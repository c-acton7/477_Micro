
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010be0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08010e80  08010e80  00011e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011340  08011340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011348  08011348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801134c  0801134c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  24000000  08011350  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000074c  24000084  080113d4  00013084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240007d0  080113d4  000137d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bc94  00000000  00000000  000130b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003eb2  00000000  00000000  0002ed46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001888  00000000  00000000  00032bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012ed  00000000  00000000  00034480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ba01  00000000  00000000  0003576d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021fcd  00000000  00000000  0007116e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167918  00000000  00000000  0009313b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001faa53  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007460  00000000  00000000  001faa98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  00201ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010e68 	.word	0x08010e68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	08010e68 	.word	0x08010e68

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:

//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_soft_reset>:
/*!
 Performs a SW-based reset of the RA8875
 */
/**************************************************************************/
void RA8875_soft_reset (void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_SOFTRESET);
 80003c0:	2101      	movs	r1, #1
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fa12 	bl	80007ec <RA8875_write_reg>
  HAL_Delay (10);
 80003c8:	200a      	movs	r0, #10
 80003ca:	f004 fab1 	bl	8004930 <HAL_Delay>
  RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL);
 80003ce:	2100      	movs	r1, #0
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fa0b 	bl	80007ec <RA8875_write_reg>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <RA885_pll_init>:
/*!
 Initialise the PLL
 */
/**************************************************************************/
static void RA885_pll_init (void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  if (_size == RA8875_480x80 || _size == RA8875_480x128 || _size == RA8875_480x272)
 80003e0:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <RA885_pll_init+0x5c>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d007      	beq.n	80003f8 <RA885_pll_init+0x1c>
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <RA885_pll_init+0x5c>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d003      	beq.n	80003f8 <RA885_pll_init+0x1c>
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <RA885_pll_init+0x5c>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d10e      	bne.n	8000416 <RA885_pll_init+0x3a>
  {
    RA8875_write_reg (RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 8);
 80003f8:	2108      	movs	r1, #8
 80003fa:	2088      	movs	r0, #136	@ 0x88
 80003fc:	f000 f9f6 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 8000400:	2001      	movs	r0, #1
 8000402:	f004 fa95 	bl	8004930 <HAL_Delay>
    RA8875_write_reg (RA8875_PLLC2, RA8875_PLLC2_DIV4);
 8000406:	2102      	movs	r1, #2
 8000408:	2089      	movs	r0, #137	@ 0x89
 800040a:	f000 f9ef 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 800040e:	2001      	movs	r0, #1
 8000410:	f004 fa8e 	bl	8004930 <HAL_Delay>
 8000414:	e00e      	b.n	8000434 <RA885_pll_init+0x58>
  }
  else /* (_size == RA8875_800x480) */
  {
    RA8875_write_reg (RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 11);
 8000416:	210b      	movs	r1, #11
 8000418:	2088      	movs	r0, #136	@ 0x88
 800041a:	f000 f9e7 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 800041e:	2001      	movs	r0, #1
 8000420:	f004 fa86 	bl	8004930 <HAL_Delay>
    RA8875_write_reg (RA8875_PLLC2, RA8875_PLLC2_DIV4);
 8000424:	2102      	movs	r1, #2
 8000426:	2089      	movs	r0, #137	@ 0x89
 8000428:	f000 f9e0 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 800042c:	2001      	movs	r0, #1
 800042e:	f004 fa7f 	bl	8004930 <HAL_Delay>
  }
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	240000a0 	.word	0x240000a0

0800043c <RA8875_init>:
/*!
 Initialises the driver IC (clock setup, etc.)
 */
/**************************************************************************/
static void RA8875_init (uint16_t color_depth, uint16_t mcu_bus)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	460a      	mov	r2, r1
 8000446:	80fb      	strh	r3, [r7, #6]
 8000448:	4613      	mov	r3, r2
 800044a:	80bb      	strh	r3, [r7, #4]

  RA885_pll_init ();
 800044c:	f7ff ffc6 	bl	80003dc <RA885_pll_init>
  RA8875_write_reg (RA8875_SYSR, RA8875_SYSR_16BPP | RA8875_SYSR_MCU8);
 8000450:	210c      	movs	r1, #12
 8000452:	2010      	movs	r0, #16
 8000454:	f000 f9ca 	bl	80007ec <RA8875_write_reg>
  uint8_t vsync_pw;
  uint16_t vsync_nondisp;
  uint16_t vsync_start;

  /* Set the correct values for the display being used */
  if (_size == RA8875_480x80)
 8000458:	4b8e      	ldr	r3, [pc, #568]	@ (8000694 <RA8875_init+0x258>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d113      	bne.n	8000488 <RA8875_init+0x4c>
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000460:	2382      	movs	r3, #130	@ 0x82
 8000462:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 8000464:	230a      	movs	r3, #10
 8000466:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 8000468:	2308      	movs	r3, #8
 800046a:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 800046c:	2330      	movs	r3, #48	@ 0x30
 800046e:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 8000474:	2303      	movs	r3, #3
 8000476:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 8000478:	2308      	movs	r3, #8
 800047a:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 800047c:	230a      	movs	r3, #10
 800047e:	74bb      	strb	r3, [r7, #18]
    _voffset = 192; // This uses the bottom 80 pixels of a 272 pixel controller
 8000480:	4b85      	ldr	r3, [pc, #532]	@ (8000698 <RA8875_init+0x25c>)
 8000482:	22c0      	movs	r2, #192	@ 0xc0
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	e02e      	b.n	80004e6 <RA8875_init+0xaa>
  }
  else if (_size == RA8875_480x128 || _size == RA8875_480x272)
 8000488:	4b82      	ldr	r3, [pc, #520]	@ (8000694 <RA8875_init+0x258>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <RA8875_init+0x5c>
 8000490:	4b80      	ldr	r3, [pc, #512]	@ (8000694 <RA8875_init+0x258>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d113      	bne.n	80004c0 <RA8875_init+0x84>
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000498:	2382      	movs	r3, #130	@ 0x82
 800049a:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 800049c:	230a      	movs	r3, #10
 800049e:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 80004a0:	2308      	movs	r3, #8
 80004a2:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 80004a4:	2330      	movs	r3, #48	@ 0x30
 80004a6:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 80004ac:	2303      	movs	r3, #3
 80004ae:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 80004b0:	2308      	movs	r3, #8
 80004b2:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 80004b4:	230a      	movs	r3, #10
 80004b6:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 80004b8:	4b77      	ldr	r3, [pc, #476]	@ (8000698 <RA8875_init+0x25c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
 80004be:	e012      	b.n	80004e6 <RA8875_init+0xaa>
  }
  else // (_size == RA8875_800x480)
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_2CLK;
 80004c0:	2381      	movs	r3, #129	@ 0x81
 80004c2:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 26;
 80004c4:	231a      	movs	r3, #26
 80004c6:	74fb      	strb	r3, [r7, #19]
    hsync_start = 32;
 80004c8:	2320      	movs	r3, #32
 80004ca:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 96;
 80004cc:	2360      	movs	r3, #96	@ 0x60
 80004ce:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 32;
 80004d4:	2320      	movs	r3, #32
 80004d6:	823b      	strh	r3, [r7, #16]
    vsync_start = 23;
 80004d8:	2317      	movs	r3, #23
 80004da:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 2;
 80004dc:	2302      	movs	r3, #2
 80004de:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 80004e0:	4b6d      	ldr	r3, [pc, #436]	@ (8000698 <RA8875_init+0x25c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Set color dept and MCU Bus
   */
  RA8875_write_reg (RA8875_SYSR, color_depth | mcu_bus);
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	88bb      	ldrh	r3, [r7, #4]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	2010      	movs	r0, #16
 80004f6:	f000 f979 	bl	80007ec <RA8875_write_reg>

  RA8875_write_reg (RA8875_PCSR, pixclk);
 80004fa:	7dfb      	ldrb	r3, [r7, #23]
 80004fc:	4619      	mov	r1, r3
 80004fe:	2004      	movs	r0, #4
 8000500:	f000 f974 	bl	80007ec <RA8875_write_reg>
  HAL_Delay (1);
 8000504:	2001      	movs	r0, #1
 8000506:	f004 fa13 	bl	8004930 <HAL_Delay>

  /* Horizontal settings registers */
  RA8875_write_reg (RA8875_HDWR, (_width / 8) - 1); // H width: (HDWR + 1) * 8 = 480
 800050a:	4b64      	ldr	r3, [pc, #400]	@ (800069c <RA8875_init+0x260>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	08db      	lsrs	r3, r3, #3
 8000510:	b29b      	uxth	r3, r3
 8000512:	b2db      	uxtb	r3, r3
 8000514:	3b01      	subs	r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	2014      	movs	r0, #20
 800051c:	f000 f966 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HNDFTR, RA8875_HNDFTR_DE_HIGH + hsync_finetune);
 8000520:	7d3b      	ldrb	r3, [r7, #20]
 8000522:	4619      	mov	r1, r3
 8000524:	2015      	movs	r0, #21
 8000526:	f000 f961 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HNDR, (hsync_nondisp - hsync_finetune - 2) / 8); // H non-display: HNDR * 8 + HNDFTR + 2 = 10
 800052a:	7cfa      	ldrb	r2, [r7, #19]
 800052c:	7d3b      	ldrb	r3, [r7, #20]
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	3b02      	subs	r3, #2
 8000532:	2b00      	cmp	r3, #0
 8000534:	da00      	bge.n	8000538 <RA8875_init+0xfc>
 8000536:	3307      	adds	r3, #7
 8000538:	10db      	asrs	r3, r3, #3
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	2016      	movs	r0, #22
 8000540:	f000 f954 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HSTR, hsync_start / 8 - 1); // Hsync start: (HSTR + 1)*8
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	08db      	lsrs	r3, r3, #3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	3b01      	subs	r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	2017      	movs	r0, #23
 8000552:	f000 f94b 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HPWR,
 8000556:	7d7b      	ldrb	r3, [r7, #21]
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	b2db      	uxtb	r3, r3
 800055c:	3b01      	subs	r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4619      	mov	r1, r3
 8000562:	2018      	movs	r0, #24
 8000564:	f000 f942 	bl	80007ec <RA8875_write_reg>
  RA8875_HPWR_LOW + (hsync_pw / 8 - 1)); // HSync pulse width = (HPWR+1) * 8

  /* Vertical settings registers */
  RA8875_write_reg (RA8875_VDHR0, (uint16_t) (_height - 1 + _voffset) & 0xFF);
 8000568:	4b4d      	ldr	r3, [pc, #308]	@ (80006a0 <RA8875_init+0x264>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b4a      	ldr	r3, [pc, #296]	@ (8000698 <RA8875_init+0x25c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	3b01      	subs	r3, #1
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	2019      	movs	r0, #25
 800057e:	f000 f935 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VDHR1, (uint16_t) (_height - 1 + _voffset) >> 8);
 8000582:	4b45      	ldr	r3, [pc, #276]	@ (8000698 <RA8875_init+0x25c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b45      	ldr	r3, [pc, #276]	@ (80006a0 <RA8875_init+0x264>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	4413      	add	r3, r2
 800058e:	b29b      	uxth	r3, r3
 8000590:	3b01      	subs	r3, #1
 8000592:	b29b      	uxth	r3, r3
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	201a      	movs	r0, #26
 800059e:	f000 f925 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VNDR0, vsync_nondisp - 1); // V non-display period = VNDR + 1
 80005a2:	8a3b      	ldrh	r3, [r7, #16]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	3b01      	subs	r3, #1
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	201b      	movs	r0, #27
 80005ae:	f000 f91d 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VNDR1, vsync_nondisp >> 8);
 80005b2:	8a3b      	ldrh	r3, [r7, #16]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	201c      	movs	r0, #28
 80005be:	f000 f915 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSTR0, vsync_start - 1); // Vsync start position = VSTR + 1
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	3b01      	subs	r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	201d      	movs	r0, #29
 80005ce:	f000 f90d 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSTR1, vsync_start >> 8);
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	201e      	movs	r0, #30
 80005de:	f000 f905 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VPWR,
 80005e2:	7cbb      	ldrb	r3, [r7, #18]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4619      	mov	r1, r3
 80005ea:	201f      	movs	r0, #31
 80005ec:	f000 f8fe 	bl	80007ec <RA8875_write_reg>
  RA8875_VPWR_LOW + vsync_pw - 1); // Vsync pulse width = VPWR + 1

  /* Set active window X */
  RA8875_write_reg (RA8875_HSAW0, 0); // horizontal start point
 80005f0:	2100      	movs	r1, #0
 80005f2:	2030      	movs	r0, #48	@ 0x30
 80005f4:	f000 f8fa 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HSAW1, 0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2031      	movs	r0, #49	@ 0x31
 80005fc:	f000 f8f6 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HEAW0, (uint16_t) (_width - 1) & 0xFF); // horizontal end point
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <RA8875_init+0x260>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	3b01      	subs	r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4619      	mov	r1, r3
 800060c:	2034      	movs	r0, #52	@ 0x34
 800060e:	f000 f8ed 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HEAW1, (uint16_t) (_width - 1) >> 8);
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <RA8875_init+0x260>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	b29b      	uxth	r3, r3
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b29b      	uxth	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	2035      	movs	r0, #53	@ 0x35
 8000624:	f000 f8e2 	bl	80007ec <RA8875_write_reg>

  /* Set active window Y */
  RA8875_write_reg (RA8875_VSAW0, 0 + _voffset); // vertical start point
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <RA8875_init+0x25c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	2032      	movs	r0, #50	@ 0x32
 8000630:	f000 f8dc 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSAW1, 0 + _voffset);
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <RA8875_init+0x25c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	2033      	movs	r0, #51	@ 0x33
 800063c:	f000 f8d6 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VEAW0, (uint16_t) (_height - 1 + _voffset) & 0xFF); // vertical end point
 8000640:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <RA8875_init+0x264>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <RA8875_init+0x25c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	3b01      	subs	r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2036      	movs	r0, #54	@ 0x36
 8000656:	f000 f8c9 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VEAW1, (uint16_t) (_height - 1 + _voffset) >> 8);
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <RA8875_init+0x25c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <RA8875_init+0x264>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	4413      	add	r3, r2
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b01      	subs	r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	b29b      	uxth	r3, r3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	2037      	movs	r0, #55	@ 0x37
 8000676:	f000 f8b9 	bl	80007ec <RA8875_write_reg>

  /* Clear the entire window */
  RA8875_write_reg (RA8875_MCLR, RA8875_MCLR_START | RA8875_MCLR_FULL);
 800067a:	2180      	movs	r1, #128	@ 0x80
 800067c:	208e      	movs	r0, #142	@ 0x8e
 800067e:	f000 f8b5 	bl	80007ec <RA8875_write_reg>
  HAL_Delay (500);
 8000682:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000686:	f004 f953 	bl	8004930 <HAL_Delay>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	240000a0 	.word	0x240000a0
 8000698:	240000a8 	.word	0x240000a8
 800069c:	240000a2 	.word	0x240000a2
 80006a0:	240000a4 	.word	0x240000a4

080006a4 <RA8875_begin>:
 'RA8875_800x480' (5" and 7" displays)
 @return 1 if we reached the end 0 if some error occurs
 */
/**************************************************************************/
uint8_t RA8875_begin (GPIO_TypeDef *reset_port, uint16_t reset_pin, GPIO_TypeDef *wait_port, uint16_t wait_pin, RA8875_sizes_e s, RA8875_bpp_e bpp)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	461a      	mov	r2, r3
 80006b0:	460b      	mov	r3, r1
 80006b2:	817b      	strh	r3, [r7, #10]
 80006b4:	4613      	mov	r3, r2
 80006b6:	813b      	strh	r3, [r7, #8]
  _reset_port = reset_port;
 80006b8:	4a38      	ldr	r2, [pc, #224]	@ (800079c <RA8875_begin+0xf8>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6013      	str	r3, [r2, #0]
  _reset_pin = reset_pin;
 80006be:	4a38      	ldr	r2, [pc, #224]	@ (80007a0 <RA8875_begin+0xfc>)
 80006c0:	897b      	ldrh	r3, [r7, #10]
 80006c2:	8013      	strh	r3, [r2, #0]
  _size = s;
 80006c4:	4a37      	ldr	r2, [pc, #220]	@ (80007a4 <RA8875_begin+0x100>)
 80006c6:	7e3b      	ldrb	r3, [r7, #24]
 80006c8:	7013      	strb	r3, [r2, #0]
  _wait_port = wait_port;
 80006ca:	4a37      	ldr	r2, [pc, #220]	@ (80007a8 <RA8875_begin+0x104>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6013      	str	r3, [r2, #0]
  _wait_pin = wait_pin;
 80006d0:	4a36      	ldr	r2, [pc, #216]	@ (80007ac <RA8875_begin+0x108>)
 80006d2:	893b      	ldrh	r3, [r7, #8]
 80006d4:	8013      	strh	r3, [r2, #0]
  _color_depth = bpp;
 80006d6:	4a36      	ldr	r2, [pc, #216]	@ (80007b0 <RA8875_begin+0x10c>)
 80006d8:	7f3b      	ldrb	r3, [r7, #28]
 80006da:	7013      	strb	r3, [r2, #0]
  //Wait 50 ms
  HAL_Delay (50);
 80006dc:	2032      	movs	r0, #50	@ 0x32
 80006de:	f004 f927 	bl	8004930 <HAL_Delay>

  if (_size == RA8875_480x80)
 80006e2:	4b30      	ldr	r3, [pc, #192]	@ (80007a4 <RA8875_begin+0x100>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d107      	bne.n	80006fa <RA8875_begin+0x56>
  {
    _width = 480;
 80006ea:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <RA8875_begin+0x110>)
 80006ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80006f0:	801a      	strh	r2, [r3, #0]
    _height = 80;
 80006f2:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <RA8875_begin+0x114>)
 80006f4:	2250      	movs	r2, #80	@ 0x50
 80006f6:	801a      	strh	r2, [r3, #0]
 80006f8:	e027      	b.n	800074a <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_480x128)
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <RA8875_begin+0x100>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d107      	bne.n	8000712 <RA8875_begin+0x6e>
  {
    _width = 480;
 8000702:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <RA8875_begin+0x110>)
 8000704:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000708:	801a      	strh	r2, [r3, #0]
    _height = 128;
 800070a:	4b2b      	ldr	r3, [pc, #172]	@ (80007b8 <RA8875_begin+0x114>)
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	801a      	strh	r2, [r3, #0]
 8000710:	e01b      	b.n	800074a <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_480x272)
 8000712:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <RA8875_begin+0x100>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d108      	bne.n	800072c <RA8875_begin+0x88>
  {
    _width = 480;
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <RA8875_begin+0x110>)
 800071c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000720:	801a      	strh	r2, [r3, #0]
    _height = 272;
 8000722:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <RA8875_begin+0x114>)
 8000724:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000728:	801a      	strh	r2, [r3, #0]
 800072a:	e00e      	b.n	800074a <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_800x480)
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <RA8875_begin+0x100>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b03      	cmp	r3, #3
 8000732:	d108      	bne.n	8000746 <RA8875_begin+0xa2>
  {
    _width = 800;
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <RA8875_begin+0x110>)
 8000736:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800073a:	801a      	strh	r2, [r3, #0]
    _height = 480;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <RA8875_begin+0x114>)
 800073e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000742:	801a      	strh	r2, [r3, #0]
 8000744:	e001      	b.n	800074a <RA8875_begin+0xa6>
  }
  else
  {
    return 0;
 8000746:	2300      	movs	r3, #0
 8000748:	e024      	b.n	8000794 <RA8875_begin+0xf0>
  }
  _rotation = 0;
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <RA8875_begin+0x118>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]

  //Display hardware reset. Reset is active LOW
  LCD_RESET_OFF
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <RA8875_begin+0xfc>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <RA8875_begin+0xf8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	0412      	lsls	r2, r2, #16
 800075c:	619a      	str	r2, [r3, #24]
  ;
  HAL_Delay (10);
 800075e:	200a      	movs	r0, #10
 8000760:	f004 f8e6 	bl	8004930 <HAL_Delay>
  LCD_RESET_ON
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <RA8875_begin+0xfc>)
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <RA8875_begin+0xf8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	619a      	str	r2, [r3, #24]
  ;
  HAL_Delay (10);
 800076e:	200a      	movs	r0, #10
 8000770:	f004 f8de 	bl	8004930 <HAL_Delay>
  RA8875_soft_reset ();
 8000774:	f7ff fe22 	bl	80003bc <RA8875_soft_reset>
  HAL_Delay (10);
 8000778:	200a      	movs	r0, #10
 800077a:	f004 f8d9 	bl	8004930 <HAL_Delay>
  RA8875_init (((bpp == RA8875_8BPP) ? RA8875_SYSR_8BPP : RA8875_SYSR_16BPP), RA8875_SYSR_MCU8);
 800077e:	7f3b      	ldrb	r3, [r7, #28]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <RA8875_begin+0xe4>
 8000784:	2300      	movs	r3, #0
 8000786:	e000      	b.n	800078a <RA8875_begin+0xe6>
 8000788:	230c      	movs	r3, #12
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe55 	bl	800043c <RA8875_init>

  return 1;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	240000ac 	.word	0x240000ac
 80007a0:	240000b0 	.word	0x240000b0
 80007a4:	240000a0 	.word	0x240000a0
 80007a8:	240000b4 	.word	0x240000b4
 80007ac:	240000b8 	.word	0x240000b8
 80007b0:	240000ba 	.word	0x240000ba
 80007b4:	240000a2 	.word	0x240000a2
 80007b8:	240000a4 	.word	0x240000a4
 80007bc:	240000a7 	.word	0x240000a7

080007c0 <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80007c4:	bf00      	nop
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <RA8875_BUS_FREE+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	4a06      	ldr	r2, [pc, #24]	@ (80007e8 <RA8875_BUS_FREE+0x28>)
 80007ce:	8812      	ldrh	r2, [r2, #0]
 80007d0:	4013      	ands	r3, r2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f7      	beq.n	80007c6 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	240000b4 	.word	0x240000b4
 80007e8:	240000b8 	.word	0x240000b8

080007ec <RA8875_write_reg>:
 @param reg Register to write to
 @param val Value to write
 */
/**************************************************************************/
void RA8875_write_reg (uint8_t reg, uint8_t val)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
  RA8875_write_command (reg);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f894 	bl	800092c <RA8875_write_command>
  RA8875_write_data (val);
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f814 	bl	8000834 <RA8875_write_data>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f883 	bl	800092c <RA8875_write_command>
  return RA8875_read_data ();
 8000826:	f000 f843 	bl	80008b0 <RA8875_read_data>
 800082a:	4603      	mov	r3, r0
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <RA8875_write_data+0x6c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <RA8875_write_data+0x70>)
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	4013      	ands	r3, r2
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ffb6 	bl	80007c0 <RA8875_BUS_FREE>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d01d      	beq.n	8000896 <RA8875_write_data+0x62>
  }
  uint8_t rs_rw_info = 0b00000000;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000864:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <RA8875_write_data+0x74>)
 8000866:	f006 f82d 	bl	80068c4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800086a:	f107 010f 	add.w	r1, r7, #15
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	2201      	movs	r2, #1
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <RA8875_write_data+0x78>)
 8000876:	f009 ff8d 	bl	800a794 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800087a:	1df9      	adds	r1, r7, #7
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	2201      	movs	r2, #1
 8000882:	480a      	ldr	r0, [pc, #40]	@ (80008ac <RA8875_write_data+0x78>)
 8000884:	f009 ff86 	bl	800a794 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800088e:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <RA8875_write_data+0x74>)
 8000890:	f006 f818 	bl	80068c4 <HAL_GPIO_WritePin>
 8000894:	e000      	b.n	8000898 <RA8875_write_data+0x64>
    if (!(RA8875_BUS_FREE (1))) return;
 8000896:	bf00      	nop
}
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	240000b4 	.word	0x240000b4
 80008a4:	240000b8 	.word	0x240000b8
 80008a8:	58020c00 	.word	0x58020c00
 80008ac:	24000188 	.word	0x24000188

080008b0 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <RA8875_read_data+0x6c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	4a17      	ldr	r2, [pc, #92]	@ (8000920 <RA8875_read_data+0x70>)
 80008c2:	8812      	ldrh	r2, [r2, #0]
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d107      	bne.n	80008da <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff ff78 	bl	80007c0 <RA8875_BUS_FREE>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <RA8875_read_data+0x2a>
 80008d6:	2300      	movs	r3, #0
 80008d8:	e01c      	b.n	8000914 <RA8875_read_data+0x64>
  }
  uint8_t rs_rw_info = 0b01000000;
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e4:	480f      	ldr	r0, [pc, #60]	@ (8000924 <RA8875_read_data+0x74>)
 80008e6:	f005 ffed 	bl	80068c4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 80008ea:	1db9      	adds	r1, r7, #6
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	2201      	movs	r2, #1
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <RA8875_read_data+0x78>)
 80008f4:	f009 ff4e 	bl	800a794 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80008f8:	1df9      	adds	r1, r7, #7
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	2201      	movs	r2, #1
 8000900:	4809      	ldr	r0, [pc, #36]	@ (8000928 <RA8875_read_data+0x78>)
 8000902:	f00a f935 	bl	800ab70 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <RA8875_read_data+0x74>)
 800090e:	f005 ffd9 	bl	80068c4 <HAL_GPIO_WritePin>
  return data;
 8000912:	79fb      	ldrb	r3, [r7, #7]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	240000b4 	.word	0x240000b4
 8000920:	240000b8 	.word	0x240000b8
 8000924:	58020c00 	.word	0x58020c00
 8000928:	24000188 	.word	0x24000188

0800092c <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <RA8875_write_command+0x6c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	4a17      	ldr	r2, [pc, #92]	@ (800099c <RA8875_write_command+0x70>)
 800093e:	8812      	ldrh	r2, [r2, #0]
 8000940:	4013      	ands	r3, r2
 8000942:	2b00      	cmp	r3, #0
 8000944:	d105      	bne.n	8000952 <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff ff3a 	bl	80007c0 <RA8875_BUS_FREE>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d01d      	beq.n	800098e <RA8875_write_command+0x62>
  }
  uint8_t rs_rw_info = 0b10000000;
 8000952:	2380      	movs	r3, #128	@ 0x80
 8000954:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095c:	4810      	ldr	r0, [pc, #64]	@ (80009a0 <RA8875_write_command+0x74>)
 800095e:	f005 ffb1 	bl	80068c4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 8000962:	f107 010f 	add.w	r1, r7, #15
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	2201      	movs	r2, #1
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <RA8875_write_command+0x78>)
 800096e:	f009 ff11 	bl	800a794 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 8000972:	1df9      	adds	r1, r7, #7
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	2201      	movs	r2, #1
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <RA8875_write_command+0x78>)
 800097c:	f009 ff0a 	bl	800a794 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <RA8875_write_command+0x74>)
 8000988:	f005 ff9c 	bl	80068c4 <HAL_GPIO_WritePin>
 800098c:	e000      	b.n	8000990 <RA8875_write_command+0x64>
    if (!(RA8875_BUS_FREE (1))) return;
 800098e:	bf00      	nop
}
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	240000b4 	.word	0x240000b4
 800099c:	240000b8 	.word	0x240000b8
 80009a0:	58020c00 	.word	0x58020c00
 80009a4:	24000188 	.word	0x24000188

080009a8 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 80009ae:	2040      	movs	r0, #64	@ 0x40
 80009b0:	f7ff ffbc 	bl	800092c <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 80009b4:	f7ff ff7c 	bl	80008b0 <RA8875_read_data>
 80009b8:	4603      	mov	r3, r0
 80009ba:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009c2:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff34 	bl	8000834 <RA8875_write_data>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff14 	bl	8000814 <RA8875_read_reg>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 80009f0:	7bfa      	ldrb	r2, [r7, #15]
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	4013      	ands	r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1f3      	bne.n	80009e4 <RA8875_wait_poll+0x10>
 80009fc:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <RA8875_apply_rotation_x+0x34>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d108      	bne.n	8000a2c <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <RA8875_apply_rotation_x+0x38>)
 8000a1c:	881a      	ldrh	r2, [r3, #0]
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	3b01      	subs	r3, #1
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	80fb      	strh	r3, [r7, #6]
      break;
 8000a2a:	bf00      	nop
  }

  return x;
 8000a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	240000a7 	.word	0x240000a7
 8000a40:	240000a2 	.word	0x240000a2

08000a44 <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <RA8875_apply_rotation_y+0x40>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d108      	bne.n	8000a68 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <RA8875_apply_rotation_y+0x44>)
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	3b01      	subs	r3, #1
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	80fb      	strh	r3, [r7, #6]
      break;
 8000a66:	bf00      	nop
  }

  return y + _voffset;
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <RA8875_apply_rotation_y+0x48>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	4413      	add	r3, r2
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b21b      	sxth	r3, r3
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	240000a7 	.word	0x240000a7
 8000a88:	240000a4 	.word	0x240000a4
 8000a8c:	240000a8 	.word	0x240000a8

08000a90 <circleHelper>:
/*!
 Helper function for higher level circle drawing code
 */
/**************************************************************************/
static void circleHelper (int16_t x, int16_t y, int16_t r, uint16_t color, uint8_t filled)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4604      	mov	r4, r0
 8000a98:	4608      	mov	r0, r1
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80bb      	strh	r3, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	807b      	strh	r3, [r7, #2]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ffa8 	bl	8000a08 <RA8875_apply_rotation_x>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000abc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffbf 	bl	8000a44 <RA8875_apply_rotation_y>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80bb      	strh	r3, [r7, #4]

  /* Set X */
  RA8875_write_command (0x99);
 8000aca:	2099      	movs	r0, #153	@ 0x99
 8000acc:	f7ff ff2e 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x);
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fead 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x9a);
 8000ada:	209a      	movs	r0, #154	@ 0x9a
 8000adc:	f7ff ff26 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae4:	121b      	asrs	r3, r3, #8
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fea2 	bl	8000834 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x9b);
 8000af0:	209b      	movs	r0, #155	@ 0x9b
 8000af2:	f7ff ff1b 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y);
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fe9a 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x9c);
 8000b00:	209c      	movs	r0, #156	@ 0x9c
 8000b02:	f7ff ff13 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000b06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b0a:	121b      	asrs	r3, r3, #8
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fe8f 	bl	8000834 <RA8875_write_data>

  /* Set Radius */
  RA8875_write_command (0x9d);
 8000b16:	209d      	movs	r0, #157	@ 0x9d
 8000b18:	f7ff ff08 	bl	800092c <RA8875_write_command>
  RA8875_write_data (r);
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fe87 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000b26:	2063      	movs	r0, #99	@ 0x63
 8000b28:	f7ff ff00 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000b2c:	883b      	ldrh	r3, [r7, #0]
 8000b2e:	0adb      	lsrs	r3, r3, #11
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe7d 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000b3a:	2064      	movs	r0, #100	@ 0x64
 8000b3c:	f7ff fef6 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000b40:	883b      	ldrh	r3, [r7, #0]
 8000b42:	115b      	asrs	r3, r3, #5
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe71 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000b52:	2065      	movs	r0, #101	@ 0x65
 8000b54:	f7ff feea 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000b58:	883b      	ldrh	r3, [r7, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fe66 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000b68:	2090      	movs	r0, #144	@ 0x90
 8000b6a:	f7ff fedf 	bl	800092c <RA8875_write_command>
  if (filled)
 8000b6e:	7e3b      	ldrb	r3, [r7, #24]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <circleHelper+0xec>
  {
    RA8875_write_data (RA8875_DCR_CIRCLE_START | RA8875_DCR_FILL);
 8000b74:	2060      	movs	r0, #96	@ 0x60
 8000b76:	f7ff fe5d 	bl	8000834 <RA8875_write_data>
 8000b7a:	e002      	b.n	8000b82 <circleHelper+0xf2>
  }
  else
  {
    RA8875_write_data (RA8875_DCR_CIRCLE_START | RA8875_DCR_NOFILL);
 8000b7c:	2040      	movs	r0, #64	@ 0x40
 8000b7e:	f7ff fe59 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_CIRCLE_STATUS);
 8000b82:	2140      	movs	r1, #64	@ 0x40
 8000b84:	2090      	movs	r0, #144	@ 0x90
 8000b86:	f7ff ff25 	bl	80009d4 <RA8875_wait_poll>
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}

08000b92 <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 8000b92:	b590      	push	{r4, r7, lr}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4604      	mov	r4, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4623      	mov	r3, r4
 8000ba2:	80fb      	strh	r3, [r7, #6]
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	80bb      	strh	r3, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]
 8000bac:	4613      	mov	r3, r2
 8000bae:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff27 	bl	8000a08 <RA8875_apply_rotation_x>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000bbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff3e 	bl	8000a44 <RA8875_apply_rotation_y>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000bcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff19 	bl	8000a08 <RA8875_apply_rotation_x>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000bda:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff30 	bl	8000a44 <RA8875_apply_rotation_y>
 8000be4:	4603      	mov	r3, r0
 8000be6:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 8000be8:	2091      	movs	r0, #145	@ 0x91
 8000bea:	f7ff fe9f 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x);
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe1e 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000bf8:	2092      	movs	r0, #146	@ 0x92
 8000bfa:	f7ff fe97 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c02:	121b      	asrs	r3, r3, #8
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fe13 	bl	8000834 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000c0e:	2093      	movs	r0, #147	@ 0x93
 8000c10:	f7ff fe8c 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y);
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe0b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000c1e:	2094      	movs	r0, #148	@ 0x94
 8000c20:	f7ff fe84 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000c24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c28:	121b      	asrs	r3, r3, #8
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fe00 	bl	8000834 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000c34:	2095      	movs	r0, #149	@ 0x95
 8000c36:	f7ff fe79 	bl	800092c <RA8875_write_command>
  RA8875_write_data (w);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fdf8 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000c44:	2096      	movs	r0, #150	@ 0x96
 8000c46:	f7ff fe71 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000c4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c4e:	121b      	asrs	r3, r3, #8
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fded 	bl	8000834 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000c5a:	2097      	movs	r0, #151	@ 0x97
 8000c5c:	f7ff fe66 	bl	800092c <RA8875_write_command>
  RA8875_write_data (h);
 8000c60:	883b      	ldrh	r3, [r7, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fde5 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000c6a:	2098      	movs	r0, #152	@ 0x98
 8000c6c:	f7ff fe5e 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000c70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c74:	121b      	asrs	r3, r3, #8
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fdda 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c80:	2063      	movs	r0, #99	@ 0x63
 8000c82:	f7ff fe53 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c86:	8b3b      	ldrh	r3, [r7, #24]
 8000c88:	0adb      	lsrs	r3, r3, #11
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fdd0 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c94:	2064      	movs	r0, #100	@ 0x64
 8000c96:	f7ff fe49 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c9a:	8b3b      	ldrh	r3, [r7, #24]
 8000c9c:	115b      	asrs	r3, r3, #5
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fdc4 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000cac:	2065      	movs	r0, #101	@ 0x65
 8000cae:	f7ff fe3d 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000cb2:	8b3b      	ldrh	r3, [r7, #24]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fdb9 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000cc2:	2090      	movs	r0, #144	@ 0x90
 8000cc4:	f7ff fe32 	bl	800092c <RA8875_write_command>
  if (filled)
 8000cc8:	7f3b      	ldrb	r3, [r7, #28]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000cce:	20b0      	movs	r0, #176	@ 0xb0
 8000cd0:	f7ff fdb0 	bl	8000834 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 8000cd4:	e002      	b.n	8000cdc <rectHelper+0x14a>
    RA8875_write_data (0x90);
 8000cd6:	2090      	movs	r0, #144	@ 0x90
 8000cd8:	f7ff fdac 	bl	8000834 <RA8875_write_data>
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}

08000ce4 <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4604      	mov	r4, r0
 8000cec:	4608      	mov	r0, r1
 8000cee:	4611      	mov	r1, r2
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	80fb      	strh	r3, [r7, #6]
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80bb      	strh	r3, [r7, #4]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	807b      	strh	r3, [r7, #2]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 8000d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fe7e 	bl	8000a08 <RA8875_apply_rotation_x>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 8000d10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe95 	bl	8000a44 <RA8875_apply_rotation_y>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 8000d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fe70 	bl	8000a08 <RA8875_apply_rotation_x>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 8000d2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fe87 	bl	8000a44 <RA8875_apply_rotation_y>
 8000d36:	4603      	mov	r3, r0
 8000d38:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000d3a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fe62 	bl	8000a08 <RA8875_apply_rotation_x>
 8000d44:	4603      	mov	r3, r0
 8000d46:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 8000d48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe79 	bl	8000a44 <RA8875_apply_rotation_y>
 8000d52:	4603      	mov	r3, r0
 8000d54:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 8000d56:	2091      	movs	r0, #145	@ 0x91
 8000d58:	f7ff fde8 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x0);
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fd67 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000d66:	2092      	movs	r0, #146	@ 0x92
 8000d68:	f7ff fde0 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d70:	121b      	asrs	r3, r3, #8
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fd5c 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000d7c:	2093      	movs	r0, #147	@ 0x93
 8000d7e:	f7ff fdd5 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y0);
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fd54 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000d8c:	2094      	movs	r0, #148	@ 0x94
 8000d8e:	f7ff fdcd 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 8000d92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d96:	121b      	asrs	r3, r3, #8
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fd49 	bl	8000834 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 8000da2:	2095      	movs	r0, #149	@ 0x95
 8000da4:	f7ff fdc2 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x1);
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fd41 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000db2:	2096      	movs	r0, #150	@ 0x96
 8000db4:	f7ff fdba 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 8000db8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dbc:	121b      	asrs	r3, r3, #8
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fd36 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x97);
 8000dc8:	2097      	movs	r0, #151	@ 0x97
 8000dca:	f7ff fdaf 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y1);
 8000dce:	883b      	ldrh	r3, [r7, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fd2e 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000dd8:	2098      	movs	r0, #152	@ 0x98
 8000dda:	f7ff fda7 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 8000dde:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000de2:	121b      	asrs	r3, r3, #8
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fd23 	bl	8000834 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 8000dee:	20a9      	movs	r0, #169	@ 0xa9
 8000df0:	f7ff fd9c 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x2);
 8000df4:	8b3b      	ldrh	r3, [r7, #24]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fd1b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xAA);
 8000dfe:	20aa      	movs	r0, #170	@ 0xaa
 8000e00:	f7ff fd94 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 8000e04:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e08:	121b      	asrs	r3, r3, #8
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fd10 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xAB);
 8000e14:	20ab      	movs	r0, #171	@ 0xab
 8000e16:	f7ff fd89 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y2);
 8000e1a:	8bbb      	ldrh	r3, [r7, #28]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fd08 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xAC);
 8000e24:	20ac      	movs	r0, #172	@ 0xac
 8000e26:	f7ff fd81 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 8000e2a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e2e:	121b      	asrs	r3, r3, #8
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fcfd 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000e3a:	2063      	movs	r0, #99	@ 0x63
 8000e3c:	f7ff fd76 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000e40:	8c3b      	ldrh	r3, [r7, #32]
 8000e42:	0adb      	lsrs	r3, r3, #11
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fcf3 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000e4e:	2064      	movs	r0, #100	@ 0x64
 8000e50:	f7ff fd6c 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000e54:	8c3b      	ldrh	r3, [r7, #32]
 8000e56:	115b      	asrs	r3, r3, #5
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fce7 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000e66:	2065      	movs	r0, #101	@ 0x65
 8000e68:	f7ff fd60 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000e6c:	8c3b      	ldrh	r3, [r7, #32]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fcdc 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000e7c:	2090      	movs	r0, #144	@ 0x90
 8000e7e:	f7ff fd55 	bl	800092c <RA8875_write_command>
  if (filled)
 8000e82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000e8a:	20a1      	movs	r0, #161	@ 0xa1
 8000e8c:	f7ff fcd2 	bl	8000834 <RA8875_write_data>
 8000e90:	e002      	b.n	8000e98 <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 8000e92:	2081      	movs	r0, #129	@ 0x81
 8000e94:	f7ff fcce 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 8000e98:	2180      	movs	r1, #128	@ 0x80
 8000e9a:	2090      	movs	r0, #144	@ 0x90
 8000e9c:	f7ff fd9a 	bl	80009d4 <RA8875_wait_poll>
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd90      	pop	{r4, r7, pc}

08000ea8 <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 8000ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fd9c 	bl	8000a08 <RA8875_apply_rotation_x>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 8000ed4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fdb3 	bl	8000a44 <RA8875_apply_rotation_y>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 8000ee2:	20a5      	movs	r0, #165	@ 0xa5
 8000ee4:	f7ff fd22 	bl	800092c <RA8875_write_command>
  RA8875_write_data (xCenter);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fca1 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA6);
 8000ef2:	20a6      	movs	r0, #166	@ 0xa6
 8000ef4:	f7ff fd1a 	bl	800092c <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 8000ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efc:	121b      	asrs	r3, r3, #8
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fc96 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA7);
 8000f08:	20a7      	movs	r0, #167	@ 0xa7
 8000f0a:	f7ff fd0f 	bl	800092c <RA8875_write_command>
  RA8875_write_data (yCenter);
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fc8e 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA8);
 8000f18:	20a8      	movs	r0, #168	@ 0xa8
 8000f1a:	f7ff fd07 	bl	800092c <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 8000f1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f22:	121b      	asrs	r3, r3, #8
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fc83 	bl	8000834 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 8000f2e:	20a1      	movs	r0, #161	@ 0xa1
 8000f30:	f7ff fcfc 	bl	800092c <RA8875_write_command>
  RA8875_write_data (longAxis);
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fc7b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000f3e:	20a2      	movs	r0, #162	@ 0xa2
 8000f40:	f7ff fcf4 	bl	800092c <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000f44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f48:	121b      	asrs	r3, r3, #8
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fc70 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000f54:	20a3      	movs	r0, #163	@ 0xa3
 8000f56:	f7ff fce9 	bl	800092c <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000f5a:	883b      	ldrh	r3, [r7, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fc68 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000f64:	20a4      	movs	r0, #164	@ 0xa4
 8000f66:	f7ff fce1 	bl	800092c <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000f6a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f6e:	121b      	asrs	r3, r3, #8
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fc5d 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000f7a:	2063      	movs	r0, #99	@ 0x63
 8000f7c:	f7ff fcd6 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000f80:	8b3b      	ldrh	r3, [r7, #24]
 8000f82:	0adb      	lsrs	r3, r3, #11
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fc53 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000f8e:	2064      	movs	r0, #100	@ 0x64
 8000f90:	f7ff fccc 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000f94:	8b3b      	ldrh	r3, [r7, #24]
 8000f96:	115b      	asrs	r3, r3, #5
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fc47 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000fa6:	2065      	movs	r0, #101	@ 0x65
 8000fa8:	f7ff fcc0 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000fac:	8b3b      	ldrh	r3, [r7, #24]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fc3c 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000fbc:	20a0      	movs	r0, #160	@ 0xa0
 8000fbe:	f7ff fcb5 	bl	800092c <RA8875_write_command>
  if (filled)
 8000fc2:	7f3b      	ldrb	r3, [r7, #28]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000fc8:	20c0      	movs	r0, #192	@ 0xc0
 8000fca:	f7ff fc33 	bl	8000834 <RA8875_write_data>
 8000fce:	e002      	b.n	8000fd6 <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000fd0:	2080      	movs	r0, #128	@ 0x80
 8000fd2:	f7ff fc2f 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000fd6:	2180      	movs	r1, #128	@ 0x80
 8000fd8:	20a0      	movs	r0, #160	@ 0xa0
 8000fda:	f7ff fcfb 	bl	80009d4 <RA8875_wait_poll>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000fe6:	b590      	push	{r4, r7, lr}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4604      	mov	r4, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	80fb      	strh	r3, [r7, #6]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	80bb      	strh	r3, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8001004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fcfd 	bl	8000a08 <RA8875_apply_rotation_x>
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8001012:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fd14 	bl	8000a44 <RA8875_apply_rotation_y>
 800101c:	4603      	mov	r3, r0
 800101e:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8001020:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fcef 	bl	8000a08 <RA8875_apply_rotation_x>
 800102a:	4603      	mov	r3, r0
 800102c:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 800102e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fd06 	bl	8000a44 <RA8875_apply_rotation_y>
 8001038:	4603      	mov	r3, r0
 800103a:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 800103c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001040:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001044:	429a      	cmp	r2, r3
 8001046:	dd05      	ble.n	8001054 <roundRectHelper+0x6e>
 8001048:	1cba      	adds	r2, r7, #2
 800104a:	1dbb      	adds	r3, r7, #6
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f99e 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8001054:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001058:	f9b7 3000 	ldrsh.w	r3, [r7]
 800105c:	429a      	cmp	r2, r3
 800105e:	dd05      	ble.n	800106c <roundRectHelper+0x86>
 8001060:	463a      	mov	r2, r7
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f992 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 800106c:	2091      	movs	r0, #145	@ 0x91
 800106e:	f7ff fc5d 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x);
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fbdb 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x92);
 800107e:	2092      	movs	r0, #146	@ 0x92
 8001080:	f7ff fc54 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8001084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001088:	121b      	asrs	r3, r3, #8
 800108a:	b21b      	sxth	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fbd0 	bl	8000834 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8001094:	2093      	movs	r0, #147	@ 0x93
 8001096:	f7ff fc49 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y);
 800109a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fbc7 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x94);
 80010a6:	2094      	movs	r0, #148	@ 0x94
 80010a8:	f7ff fc40 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80010ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010b0:	121b      	asrs	r3, r3, #8
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fbbc 	bl	8000834 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80010bc:	2095      	movs	r0, #149	@ 0x95
 80010be:	f7ff fc35 	bl	800092c <RA8875_write_command>
  RA8875_write_data (w);
 80010c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fbb3 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x96);
 80010ce:	2096      	movs	r0, #150	@ 0x96
 80010d0:	f7ff fc2c 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 80010d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010d8:	121b      	asrs	r3, r3, #8
 80010da:	b21b      	sxth	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fba8 	bl	8000834 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 80010e4:	2097      	movs	r0, #151	@ 0x97
 80010e6:	f7ff fc21 	bl	800092c <RA8875_write_command>
  RA8875_write_data (h);
 80010ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fb9f 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x98);
 80010f6:	2098      	movs	r0, #152	@ 0x98
 80010f8:	f7ff fc18 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 80010fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001100:	121b      	asrs	r3, r3, #8
 8001102:	b21b      	sxth	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fb94 	bl	8000834 <RA8875_write_data>

  RA8875_write_command (0xA1);
 800110c:	20a1      	movs	r0, #161	@ 0xa1
 800110e:	f7ff fc0d 	bl	800092c <RA8875_write_command>
  RA8875_write_data (r);
 8001112:	8b3b      	ldrh	r3, [r7, #24]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fb8c 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA2);
 800111c:	20a2      	movs	r0, #162	@ 0xa2
 800111e:	f7ff fc05 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8001122:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001126:	121b      	asrs	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fb81 	bl	8000834 <RA8875_write_data>

  RA8875_write_command (0xA3);
 8001132:	20a3      	movs	r0, #163	@ 0xa3
 8001134:	f7ff fbfa 	bl	800092c <RA8875_write_command>
  RA8875_write_data (r);
 8001138:	8b3b      	ldrh	r3, [r7, #24]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fb79 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8001142:	20a4      	movs	r0, #164	@ 0xa4
 8001144:	f7ff fbf2 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8001148:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800114c:	121b      	asrs	r3, r3, #8
 800114e:	b21b      	sxth	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fb6e 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8001158:	2063      	movs	r0, #99	@ 0x63
 800115a:	f7ff fbe7 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 800115e:	8bbb      	ldrh	r3, [r7, #28]
 8001160:	0adb      	lsrs	r3, r3, #11
 8001162:	b29b      	uxth	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fb64 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 800116c:	2064      	movs	r0, #100	@ 0x64
 800116e:	f7ff fbdd 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8001172:	8bbb      	ldrh	r3, [r7, #28]
 8001174:	115b      	asrs	r3, r3, #5
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fb58 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8001184:	2065      	movs	r0, #101	@ 0x65
 8001186:	f7ff fbd1 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 800118a:	8bbb      	ldrh	r3, [r7, #28]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fb4d 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 800119a:	20a0      	movs	r0, #160	@ 0xa0
 800119c:	f7ff fbc6 	bl	800092c <RA8875_write_command>
  if (filled)
 80011a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 80011a8:	20e0      	movs	r0, #224	@ 0xe0
 80011aa:	f7ff fb43 	bl	8000834 <RA8875_write_data>
 80011ae:	e002      	b.n	80011b6 <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 80011b0:	20a0      	movs	r0, #160	@ 0xa0
 80011b2:	f7ff fb3f 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 80011b6:	2180      	movs	r1, #128	@ 0x80
 80011b8:	20a0      	movs	r0, #160	@ 0xa0
 80011ba:	f7ff fc0b 	bl	80009d4 <RA8875_wait_poll>
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}

080011c6 <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af02      	add	r7, sp, #8
 80011cc:	4604      	mov	r4, r0
 80011ce:	4608      	mov	r0, r1
 80011d0:	4611      	mov	r1, r2
 80011d2:	461a      	mov	r2, r3
 80011d4:	4623      	mov	r3, r4
 80011d6:	80fb      	strh	r3, [r7, #6]
 80011d8:	4603      	mov	r3, r0
 80011da:	80bb      	strh	r3, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 80011e4:	88fa      	ldrh	r2, [r7, #6]
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	4413      	add	r3, r2
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3b01      	subs	r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	b21c      	sxth	r4, r3
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	883b      	ldrh	r3, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b21a      	sxth	r2, r3
 8001200:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001204:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001208:	2301      	movs	r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	8b3b      	ldrh	r3, [r7, #24]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	4622      	mov	r2, r4
 8001214:	f7ff fcbd 	bl	8000b92 <rectHelper>
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}

08001220 <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <RA8875_fill_screen+0x38>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	3b01      	subs	r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <RA8875_fill_screen+0x3c>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	b219      	sxth	r1, r3
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	460b      	mov	r3, r1
 8001248:	2100      	movs	r1, #0
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff fca1 	bl	8000b92 <rectHelper>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	240000a2 	.word	0x240000a2
 800125c:	240000a4 	.word	0x240000a4

08001260 <RA8875_draw_fill_circle>:
 @param r     The circle's radius
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_circle (int16_t x, int16_t y, int16_t r, uint16_t color)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af02      	add	r7, sp, #8
 8001266:	4604      	mov	r4, r0
 8001268:	4608      	mov	r0, r1
 800126a:	4611      	mov	r1, r2
 800126c:	461a      	mov	r2, r3
 800126e:	4623      	mov	r3, r4
 8001270:	80fb      	strh	r3, [r7, #6]
 8001272:	4603      	mov	r3, r0
 8001274:	80bb      	strh	r3, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]
 800127a:	4613      	mov	r3, r2
 800127c:	803b      	strh	r3, [r7, #0]
  circleHelper (x, y, r, color, 1);
 800127e:	883b      	ldrh	r3, [r7, #0]
 8001280:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001284:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001288:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800128c:	2401      	movs	r4, #1
 800128e:	9400      	str	r4, [sp, #0]
 8001290:	f7ff fbfe 	bl	8000a90 <circleHelper>
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4623      	mov	r3, r4
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	4603      	mov	r3, r0
 80012b0:	80bb      	strh	r3, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	807b      	strh	r3, [r7, #2]
 80012b6:	4613      	mov	r3, r2
 80012b8:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 80012ba:	f9b7 4000 	ldrsh.w	r4, [r7]
 80012be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9303      	str	r3, [sp, #12]
 80012ce:	8c3b      	ldrh	r3, [r7, #32]
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	4623      	mov	r3, r4
 80012e0:	f7ff fd00 	bl	8000ce4 <triangleHelper>
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	4604      	mov	r4, r0
 80012f4:	4608      	mov	r0, r1
 80012f6:	4611      	mov	r1, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	4623      	mov	r3, r4
 80012fc:	80fb      	strh	r3, [r7, #6]
 80012fe:	4603      	mov	r3, r0
 8001300:	80bb      	strh	r3, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	807b      	strh	r3, [r7, #2]
 8001306:	4613      	mov	r3, r2
 8001308:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 800130a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800130e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001312:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001316:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	8b3b      	ldrh	r3, [r7, #24]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4623      	mov	r3, r4
 8001324:	f7ff fdc0 	bl	8000ea8 <ellipseHelper>
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b087      	sub	sp, #28
 8001334:	af04      	add	r7, sp, #16
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	80fb      	strh	r3, [r7, #6]
 8001342:	4603      	mov	r3, r0
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
 800134a:	4613      	mov	r3, r2
 800134c:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	4413      	add	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	b21c      	sxth	r4, r3
 8001358:	88ba      	ldrh	r2, [r7, #4]
 800135a:	883b      	ldrh	r3, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	b29b      	uxth	r3, r3
 8001360:	b21a      	sxth	r2, r3
 8001362:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001366:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800136a:	2301      	movs	r3, #1
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	8bbb      	ldrh	r3, [r7, #28]
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	4622      	mov	r2, r4
 800137c:	f7ff fe33 	bl	8000fe6 <roundRectHelper>
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}

08001388 <RA8875_draw_hexagon>:

/**************************************************************************/
void RA8875_draw_hexagon(int16_t centerX, int16_t centerY, int16_t radius, uint16_t color) {
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	ed2d 8b04 	vpush	{d8-d9}
 800138e:	b099      	sub	sp, #100	@ 0x64
 8001390:	af04      	add	r7, sp, #16
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4623      	mov	r3, r4
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	4603      	mov	r3, r0
 80013a0:	80bb      	strh	r3, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]
 80013a6:	4613      	mov	r3, r2
 80013a8:	803b      	strh	r3, [r7, #0]
    int x[6], y[6];
    for (int i = 0; i < 6; ++i) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013ae:	e051      	b.n	8001454 <RA8875_draw_hexagon+0xcc>
        double angle = 2 * M_PI * i / 6;
 80013b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013ba:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80014e8 <RA8875_draw_hexagon+0x160>
 80013be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013c2:	eeb1 5b08 	vmov.f64	d5, #24	@ 0x40c00000  6.0
 80013c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013ca:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
        x[i] = centerX + radius * cos(angle);
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80013da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 80013e6:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80013ea:	f00e ff25 	bl	8010238 <cos>
 80013ee:	eeb0 7b40 	vmov.f64	d7, d0
 80013f2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013f6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013fa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013fe:	ee17 2a90 	vmov	r2, s15
 8001402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	3350      	adds	r3, #80	@ 0x50
 8001408:	443b      	add	r3, r7
 800140a:	f843 2c30 	str.w	r2, [r3, #-48]
        y[i] = centerY + radius * sin(angle);
 800140e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800141a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8001426:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800142a:	f00e ff51 	bl	80102d0 <sin>
 800142e:	eeb0 7b40 	vmov.f64	d7, d0
 8001432:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001436:	ee38 7b07 	vadd.f64	d7, d8, d7
 800143a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800143e:	ee17 2a90 	vmov	r2, s15
 8001442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	3350      	adds	r3, #80	@ 0x50
 8001448:	443b      	add	r3, r7
 800144a:	f843 2c48 	str.w	r2, [r3, #-72]
    for (int i = 0; i < 6; ++i) {
 800144e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001450:	3301      	adds	r3, #1
 8001452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001456:	2b05      	cmp	r3, #5
 8001458:	ddaa      	ble.n	80013b0 <RA8875_draw_hexagon+0x28>
    }

    for (int i = 0; i < 6; ++i) {
 800145a:	2300      	movs	r3, #0
 800145c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800145e:	e038      	b.n	80014d2 <RA8875_draw_hexagon+0x14a>
        int next = (i + 1) % 6;
 8001460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <RA8875_draw_hexagon+0x168>)
 8001466:	fb83 3102 	smull	r3, r1, r3, r2
 800146a:	17d3      	asrs	r3, r2, #31
 800146c:	1ac9      	subs	r1, r1, r3
 800146e:	460b      	mov	r3, r1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	440b      	add	r3, r1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	647b      	str	r3, [r7, #68]	@ 0x44
        // Draw triangles to form the hexagon
        RA8875_draw_fill_triangle(centerX, centerY, x[i], y[i], x[next], y[next], color);
 800147a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	3350      	adds	r3, #80	@ 0x50
 8001480:	443b      	add	r3, r7
 8001482:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001486:	b21d      	sxth	r5, r3
 8001488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	3350      	adds	r3, #80	@ 0x50
 800148e:	443b      	add	r3, r7
 8001490:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001494:	b21e      	sxth	r6, r3
 8001496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	3350      	adds	r3, #80	@ 0x50
 800149c:	443b      	add	r3, r7
 800149e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	3350      	adds	r3, #80	@ 0x50
 80014aa:	443b      	add	r3, r7
 80014ac:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80014b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014ba:	8839      	ldrh	r1, [r7, #0]
 80014bc:	9102      	str	r1, [sp, #8]
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	4633      	mov	r3, r6
 80014c4:	462a      	mov	r2, r5
 80014c6:	4621      	mov	r1, r4
 80014c8:	f7ff fee8 	bl	800129c <RA8875_draw_fill_triangle>
    for (int i = 0; i < 6; ++i) {
 80014cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014ce:	3301      	adds	r3, #1
 80014d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80014d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	ddc3      	ble.n	8001460 <RA8875_draw_hexagon+0xd8>
    }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3754      	adds	r7, #84	@ 0x54
 80014de:	46bd      	mov	sp, r7
 80014e0:	ecbd 8b04 	vpop	{d8-d9}
 80014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	54442d18 	.word	0x54442d18
 80014ec:	401921fb 	.word	0x401921fb
 80014f0:	2aaaaaab 	.word	0x2aaaaaab

080014f4 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 80014fa:	2040      	movs	r0, #64	@ 0x40
 80014fc:	f7ff fa16 	bl	800092c <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8001500:	f7ff f9d6 	bl	80008b0 <RA8875_read_data>
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800150e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f98e 	bl	8000834 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 8001518:	2021      	movs	r0, #33	@ 0x21
 800151a:	f7ff fa07 	bl	800092c <RA8875_write_command>
  temp = RA8875_read_data ();
 800151e:	f7ff f9c7 	bl	80008b0 <RA8875_read_data>
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 800152c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f97f 	bl	8000834 <RA8875_write_data>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	460a      	mov	r2, r1
 8001548:	80fb      	strh	r3, [r7, #6]
 800154a:	4613      	mov	r3, r2
 800154c:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 800154e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fa58 	bl	8000a08 <RA8875_apply_rotation_x>
 8001558:	4603      	mov	r3, r0
 800155a:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 800155c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fa6f 	bl	8000a44 <RA8875_apply_rotation_y>
 8001566:	4603      	mov	r3, r0
 8001568:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 800156a:	202a      	movs	r0, #42	@ 0x2a
 800156c:	f7ff f9de 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f95d 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x2B);
 800157a:	202b      	movs	r0, #43	@ 0x2b
 800157c:	f7ff f9d6 	bl	800092c <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	b29b      	uxth	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff f953 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x2C);
 800158e:	202c      	movs	r0, #44	@ 0x2c
 8001590:	f7ff f9cc 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8001594:	88bb      	ldrh	r3, [r7, #4]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f94b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x2D);
 800159e:	202d      	movs	r0, #45	@ 0x2d
 80015a0:	f7ff f9c4 	bl	800092c <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff f941 	bl	8000834 <RA8875_write_data>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	460a      	mov	r2, r1
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4613      	mov	r3, r2
 80015c8:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 80015ca:	2063      	movs	r0, #99	@ 0x63
 80015cc:	f7ff f9ae 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	0adb      	lsrs	r3, r3, #11
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f92b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 80015de:	2064      	movs	r0, #100	@ 0x64
 80015e0:	f7ff f9a4 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	115b      	asrs	r3, r3, #5
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f91f 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 80015f6:	2065      	movs	r0, #101	@ 0x65
 80015f8:	f7ff f998 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f914 	bl	8000834 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 800160c:	2060      	movs	r0, #96	@ 0x60
 800160e:	f7ff f98d 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 8001612:	88bb      	ldrh	r3, [r7, #4]
 8001614:	0adb      	lsrs	r3, r3, #11
 8001616:	b29b      	uxth	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f90a 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x61);
 8001620:	2061      	movs	r0, #97	@ 0x61
 8001622:	f7ff f983 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	115b      	asrs	r3, r3, #5
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f8fe 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x62);
 8001638:	2062      	movs	r0, #98	@ 0x62
 800163a:	f7ff f977 	bl	800092c <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f8f3 	bl	8000834 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 800164e:	2022      	movs	r0, #34	@ 0x22
 8001650:	f7ff f96c 	bl	800092c <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8001654:	f7ff f92c 	bl	80008b0 <RA8875_read_data>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001662:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff f8e4 	bl	8000834 <RA8875_write_data>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d901      	bls.n	8001688 <RA8875_text_scale+0x14>
 8001684:	2303      	movs	r3, #3
 8001686:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8001688:	2022      	movs	r0, #34	@ 0x22
 800168a:	f7ff f94f 	bl	800092c <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 800168e:	f7ff f90f 	bl	80008b0 <RA8875_read_data>
 8001692:	4603      	mov	r3, r0
 8001694:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	f023 030f 	bic.w	r3, r3, #15
 800169c:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f8c0 	bl	8000834 <RA8875_write_data>

  _textScale = scale;
 80016b4:	4a03      	ldr	r2, [pc, #12]	@ (80016c4 <RA8875_text_scale+0x50>)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	7013      	strb	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	240000a6 	.word	0x240000a6

080016c8 <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <RA8875_text_write+0x1c>
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7fe fe00 	bl	80002e0 <strlen>
 80016e0:	4603      	mov	r3, r0
 80016e2:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 80016e4:	2002      	movs	r0, #2
 80016e6:	f7ff f921 	bl	800092c <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	81fb      	strh	r3, [r7, #14]
 80016ee:	e010      	b.n	8001712 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f89b 	bl	8000834 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <RA8875_text_write+0x5c>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <RA8875_text_write+0x44>
 8001706:	2001      	movs	r0, #1
 8001708:	f003 f912 	bl	8004930 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	3301      	adds	r3, #1
 8001710:	81fb      	strh	r3, [r7, #14]
 8001712:	89fa      	ldrh	r2, [r7, #14]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3ea      	bcc.n	80016f0 <RA8875_text_write+0x28>
  }
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	240000a6 	.word	0x240000a6

08001728 <RA8875_pwm1_out>:
 Set the duty cycle of the PWM 1 Clock
 @param p The duty Cycle (0-255)
 */
/**************************************************************************/
void RA8875_pwm1_out (uint8_t p)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  RA8875_write_reg (RA8875_P1DCR, p);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	4619      	mov	r1, r3
 8001736:	208b      	movs	r0, #139	@ 0x8b
 8001738:	f7ff f858 	bl	80007ec <RA8875_write_reg>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <RA8875_pwm1_config>:
 @param on Whether to enable the clock
 @param clock The Clock Divider
 */
/**************************************************************************/
void RA8875_pwm1_config (uint8_t on, uint8_t clock)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
  if (on)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <RA8875_pwm1_config+0x32>
  {
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_ENABLE | (clock & 0xF));
 800175a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	b25b      	sxtb	r3, r3
 8001764:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001768:	b25b      	sxtb	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	4619      	mov	r1, r3
 800176e:	208a      	movs	r0, #138	@ 0x8a
 8001770:	f7ff f83c 	bl	80007ec <RA8875_write_reg>
  }
  else
  {
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
  }
}
 8001774:	e007      	b.n	8001786 <RA8875_pwm1_config+0x42>
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4619      	mov	r1, r3
 8001780:	208a      	movs	r0, #138	@ 0x8a
 8001782:	f7ff f833 	bl	80007ec <RA8875_write_reg>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <RA8875_display_on>:
 Turns the display on or off
 @param on Whether to turn the display on or not
 */
/**************************************************************************/
void RA8875_display_on (uint8_t on)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  if (on) RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPON);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <RA8875_display_on+0x1a>
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff f823 	bl	80007ec <RA8875_write_reg>
  else RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
}
 80017a6:	e003      	b.n	80017b0 <RA8875_display_on+0x22>
  else RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
 80017a8:	2100      	movs	r1, #0
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff f81e 	bl	80007ec <RA8875_write_reg>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <get_word_matrix>:
//        }
//    }
}

void get_word_matrix(WordVector* word_matrix, int board_num, int round_num)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	f5ad 6d94 	sub.w	sp, sp, #1184	@ 0x4a0
 80017be:	af00      	add	r7, sp, #0
 80017c0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80017c4:	f2a3 4394 	subw	r3, r3, #1172	@ 0x494
 80017c8:	6018      	str	r0, [r3, #0]
 80017ca:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80017ce:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80017d2:	6019      	str	r1, [r3, #0]
 80017d4:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80017d8:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80017dc:	601a      	str	r2, [r3, #0]
	HAL_Delay(1000);
 80017de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017e2:	f003 f8a5 	bl	8004930 <HAL_Delay>
    FATFS fs;
    FIL file;
    FRESULT fr;
    char line[MAX_LINE_LENGTH];

    fr = f_mount(&fs, "", 1);
 80017e6:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 80017ea:	2201      	movs	r2, #1
 80017ec:	496f      	ldr	r1, [pc, #444]	@ (80019ac <get_word_matrix+0x1f4>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00c fe82 	bl	800e4f8 <f_mount>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f887 3493 	strb.w	r3, [r7, #1171]	@ 0x493
    if (fr != FR_OK) {		//1 means now
 80017fa:	f897 3493 	ldrb.w	r3, [r7, #1171]	@ 0x493
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80cc 	bne.w	800199c <get_word_matrix+0x1e4>
    	return;
    }

    char filename[12];    // Enough space for "r0000\0"
    snprintf(filename, sizeof(filename), "r%04d.txt", board_num);
 8001804:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8001808:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800180c:	f107 0010 	add.w	r0, r7, #16
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a67      	ldr	r2, [pc, #412]	@ (80019b0 <get_word_matrix+0x1f8>)
 8001814:	210c      	movs	r1, #12
 8001816:	f00d fc1f 	bl	800f058 <sniprintf>

    fr = f_open(&file, filename, FA_READ);
 800181a:	f107 0110 	add.w	r1, r7, #16
 800181e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001822:	2201      	movs	r2, #1
 8001824:	4618      	mov	r0, r3
 8001826:	f00c fead 	bl	800e584 <f_open>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 3493 	strb.w	r3, [r7, #1171]	@ 0x493
    if (fr != FR_OK) {
 8001830:	f897 3493 	ldrb.w	r3, [r7, #1171]	@ 0x493
 8001834:	2b00      	cmp	r3, #0
 8001836:	f040 80b3 	bne.w	80019a0 <get_word_matrix+0x1e8>
    	return;
    }

	for(int i = 1; i < round_num; i++) {
 800183a:	2301      	movs	r3, #1
 800183c:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 8001840:	e019      	b.n	8001876 <get_word_matrix+0xbe>
		for(int n = 0; n < 21; n++) {
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 8001848:	e00c      	b.n	8001864 <get_word_matrix+0xac>
			f_gets(line, MAX_WORD_LENGTH, &file);
 800184a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	210d      	movs	r1, #13
 8001854:	4618      	mov	r0, r3
 8001856:	f00d fa36 	bl	800ecc6 <f_gets>
		for(int n = 0; n < 21; n++) {
 800185a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	@ 0x498
 800185e:	3301      	adds	r3, #1
 8001860:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 8001864:	f8d7 3498 	ldr.w	r3, [r7, #1176]	@ 0x498
 8001868:	2b14      	cmp	r3, #20
 800186a:	ddee      	ble.n	800184a <get_word_matrix+0x92>
	for(int i = 1; i < round_num; i++) {
 800186c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	@ 0x49c
 8001870:	3301      	adds	r3, #1
 8001872:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 8001876:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800187a:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 800187e:	f8d7 249c 	ldr.w	r2, [r7, #1180]	@ 0x49c
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbdc      	blt.n	8001842 <get_word_matrix+0x8a>
		}
	}

    f_gets(line, MAX_WORD_LENGTH, &file);
 8001888:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	210d      	movs	r1, #13
 8001892:	4618      	mov	r0, r3
 8001894:	f00d fa17 	bl	800ecc6 <f_gets>
	size_t length = strlen(line);
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fd1f 	bl	80002e0 <strlen>
 80018a2:	f8c7 048c 	str.w	r0, [r7, #1164]	@ 0x48c
	word_matrix[NUM_WORDS].length = length;
 80018a6:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80018aa:	f2a3 4394 	subw	r3, r3, #1172	@ 0x494
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80018b4:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 80018b8:	611a      	str	r2, [r3, #16]
	line[length - 1] = '\0';
 80018ba:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 80018be:	3b01      	subs	r3, #1
 80018c0:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 80018c4:	f2a2 4284 	subw	r2, r2, #1156	@ 0x484
 80018c8:	2100      	movs	r1, #0
 80018ca:	54d1      	strb	r1, [r2, r3]
	strcpy(&word_matrix[NUM_WORDS - 1], line);
 80018cc:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80018d0:	f2a3 4394 	subw	r3, r3, #1172	@ 0x494
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80018da:	f107 021c 	add.w	r2, r7, #28
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00d fccc 	bl	800f27e <strcpy>

    f_gets(line, sizeof(line), &file); //read and discard
 80018e6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	210d      	movs	r1, #13
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00d f9e8 	bl	800ecc6 <f_gets>

    // Read lines from the file and parse them
    for(int i = 0; i < NUM_WORDS - 1; i++) {
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 80018fc:	e03f      	b.n	800197e <get_word_matrix+0x1c6>
    	f_gets(line, MAX_WORD_LENGTH, &file);
 80018fe:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	210d      	movs	r1, #13
 8001908:	4618      	mov	r0, r3
 800190a:	f00d f9dc 	bl	800ecc6 <f_gets>
    	length = strlen(line);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fce4 	bl	80002e0 <strlen>
 8001918:	f8c7 048c 	str.w	r0, [r7, #1164]	@ 0x48c
    	word_matrix[i].length = length;
 800191c:	f8d7 2494 	ldr.w	r2, [r7, #1172]	@ 0x494
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	461a      	mov	r2, r3
 800192a:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800192e:	f2a3 4394 	subw	r3, r3, #1172	@ 0x494
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4413      	add	r3, r2
 8001936:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 800193a:	611a      	str	r2, [r3, #16]
    	line[length - 1] = '\0';
 800193c:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8001940:	3b01      	subs	r3, #1
 8001942:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 8001946:	f2a2 4284 	subw	r2, r2, #1156	@ 0x484
 800194a:	2100      	movs	r1, #0
 800194c:	54d1      	strb	r1, [r2, r3]
    	strcpy(&word_matrix[i], line);
 800194e:	f8d7 2494 	ldr.w	r2, [r7, #1172]	@ 0x494
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	461a      	mov	r2, r3
 800195c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8001960:	f2a3 4394 	subw	r3, r3, #1172	@ 0x494
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	f107 021c 	add.w	r2, r7, #28
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f00d fc85 	bl	800f27e <strcpy>
    for(int i = 0; i < NUM_WORDS - 1; i++) {
 8001974:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8001978:	3301      	adds	r3, #1
 800197a:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 800197e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8001982:	2b0f      	cmp	r3, #15
 8001984:	ddbb      	ble.n	80018fe <get_word_matrix+0x146>
    }

    //close the file
    f_close(&file);
 8001986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800198a:	4618      	mov	r0, r3
 800198c:	f00d f971 	bl	800ec72 <f_close>

    //unmount the SD card
    f_mount(NULL, "", 0);
 8001990:	2200      	movs	r2, #0
 8001992:	4906      	ldr	r1, [pc, #24]	@ (80019ac <get_word_matrix+0x1f4>)
 8001994:	2000      	movs	r0, #0
 8001996:	f00c fdaf 	bl	800e4f8 <f_mount>

    return;
 800199a:	e002      	b.n	80019a2 <get_word_matrix+0x1ea>
    	return;
 800199c:	bf00      	nop
 800199e:	e000      	b.n	80019a2 <get_word_matrix+0x1ea>
    	return;
 80019a0:	bf00      	nop
}
 80019a2:	f507 6794 	add.w	r7, r7, #1184	@ 0x4a0
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	08010e84 	.word	0x08010e84
 80019b0:	08010e88 	.word	0x08010e88

080019b4 <init_game>:
#include "fatfs_sd_card.h"
#include "main.h"
#include <stdlib.h>
#include <stdio.h>

void init_game(Game_HandleTypeDef *hgame) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

	RA8875_pwm1_out(255);
 80019bc:	20ff      	movs	r0, #255	@ 0xff
 80019be:	f7ff feb3 	bl	8001728 <RA8875_pwm1_out>

    hgame->set_b = 0;                // Brightness flag
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
    hgame->current_b = 255;          // Maximum brightness
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	22ff      	movs	r2, #255	@ 0xff
 80019ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    hgame->guess_remain = 2;         // Guesses remaining
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
    hgame->score = 0;                // Initial score
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
    hgame->hi_score = 0;             // High score
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    hgame->picked = -1;              // No word picked
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
    hgame->index0 = 0;               // Initial index tracking 0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
    hgame->index1 = 1;               // Initial index tracking 1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0
    hgame->board_num = 1;            // Start with board 1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
    hgame->round_num = 1;            // Start with round 1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
    hgame->game_timer = 60;          // Start with 30 seconds
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	223c      	movs	r2, #60	@ 0x3c
 8001a18:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <generate_random_letters>:

void generate_random_letters(char* buffer, size_t length) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	srand(HAL_GetTick());
 8001a2e:	f002 ff73 	bl	8004918 <HAL_GetTick>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00d f9e1 	bl	800edfc <srand>

	for (size_t i = 0; i < length; i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e016      	b.n	8001a6e <generate_random_letters+0x4a>
		buffer[i] = (rand() % 26) + 65;
 8001a40:	f00d fa0a 	bl	800ee58 <rand>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <generate_random_letters+0x64>)
 8001a48:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4c:	10d1      	asrs	r1, r2, #3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	1a8a      	subs	r2, r1, r2
 8001a52:	211a      	movs	r1, #26
 8001a54:	fb01 f202 	mul.w	r2, r1, r2
 8001a58:	1a9a      	subs	r2, r3, r2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	440b      	add	r3, r1
 8001a62:	3241      	adds	r2, #65	@ 0x41
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; i++) {
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d3e4      	bcc.n	8001a40 <generate_random_letters+0x1c>
	}
	buffer[length] = '\0';
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	4ec4ec4f 	.word	0x4ec4ec4f

08001a8c <shuffle_array>:

void shuffle_array(uint8_t *array, size_t size, int *index0, int *index1) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
    *index0 = 0;  // Initial position of 0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
    *index1 = 1;  // Initial position of 1
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

    for (size_t i = size - 1; i > 0; i--) {
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	e046      	b.n	8001b3c <shuffle_array+0xb0>
        size_t j = rand() % (i + 1);
 8001aae:	f00d f9d3 	bl	800ee58 <rand>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	fbb2 f1f3 	udiv	r1, r2, r3
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	61bb      	str	r3, [r7, #24]

        uint8_t temp = array[i];
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	75fb      	strb	r3, [r7, #23]
        array[i] = array[j];
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	441a      	add	r2, r3
 8001ad6:	68f9      	ldr	r1, [r7, #12]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	440b      	add	r3, r1
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	701a      	strb	r2, [r3, #0]
        array[j] = temp;
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	7dfa      	ldrb	r2, [r7, #23]
 8001ae8:	701a      	strb	r2, [r3, #0]

        if (*index0 == i) *index0 = j;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d103      	bne.n	8001afe <shuffle_array+0x72>
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e008      	b.n	8001b10 <shuffle_array+0x84>
        else if (*index0 == j) *index0 = i;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d102      	bne.n	8001b10 <shuffle_array+0x84>
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]

        if (*index1 == i) *index1 = j;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d103      	bne.n	8001b24 <shuffle_array+0x98>
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e008      	b.n	8001b36 <shuffle_array+0xaa>
        else if (*index1 == j) *index1 = i;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d102      	bne.n	8001b36 <shuffle_array+0xaa>
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	601a      	str	r2, [r3, #0]
    for (size_t i = size - 1; i > 0; i--) {
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1b5      	bne.n	8001aae <shuffle_array+0x22>
    }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <title_screen>:

void title_screen(Game_HandleTypeDef *hgame) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	@ 0x30
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	6078      	str	r0, [r7, #4]
	hgame->mode = GAME_MODE_TITLE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2204      	movs	r2, #4
 8001b58:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

	//background
	RA8875_fill_screen(RA8875_BLACK);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fb5f 	bl	8001220 <RA8875_fill_screen>
	//corner text
	RA8875_text_mode();
 8001b62:	f7ff fcc7 	bl	80014f4 <RA8875_text_mode>
	RA8875_text_color (RA8875_BLUE, RA8875_BLACK);
 8001b66:	2100      	movs	r1, #0
 8001b68:	201f      	movs	r0, #31
 8001b6a:	f7ff fd26 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(1);
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7ff fd80 	bl	8001674 <RA8875_text_scale>
	RA8875_text_cursor_position(80, 0);
 8001b74:	2100      	movs	r1, #0
 8001b76:	2050      	movs	r0, #80	@ 0x50
 8001b78:	f7ff fce1 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Beat", 5);
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	485b      	ldr	r0, [pc, #364]	@ (8001cec <title_screen+0x1a0>)
 8001b80:	f7ff fda2 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(80, 55);
 8001b84:	2137      	movs	r1, #55	@ 0x37
 8001b86:	2050      	movs	r0, #80	@ 0x50
 8001b88:	f7ff fcd9 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("The", 4);
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4858      	ldr	r0, [pc, #352]	@ (8001cf0 <title_screen+0x1a4>)
 8001b90:	f7ff fd9a 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(80, 110);
 8001b94:	216e      	movs	r1, #110	@ 0x6e
 8001b96:	2050      	movs	r0, #80	@ 0x50
 8001b98:	f7ff fcd1 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Clock", 6);
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	4855      	ldr	r0, [pc, #340]	@ (8001cf4 <title_screen+0x1a8>)
 8001ba0:	f7ff fd92 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-150, SCREEN_HEIGHT-150);
 8001ba4:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001ba8:	f240 208a 	movw	r0, #650	@ 0x28a
 8001bac:	f7ff fcc7 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Crack", 6);
 8001bb0:	2106      	movs	r1, #6
 8001bb2:	4851      	ldr	r0, [pc, #324]	@ (8001cf8 <title_screen+0x1ac>)
 8001bb4:	f7ff fd88 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-150, SCREEN_HEIGHT-95);
 8001bb8:	f240 1181 	movw	r1, #385	@ 0x181
 8001bbc:	f240 208a 	movw	r0, #650	@ 0x28a
 8001bc0:	f7ff fcbd 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("The", 4);
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	484a      	ldr	r0, [pc, #296]	@ (8001cf0 <title_screen+0x1a4>)
 8001bc8:	f7ff fd7e 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-150, SCREEN_HEIGHT-40);
 8001bcc:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8001bd0:	f240 208a 	movw	r0, #650	@ 0x28a
 8001bd4:	f7ff fcb3 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Code", 5);
 8001bd8:	2105      	movs	r1, #5
 8001bda:	4848      	ldr	r0, [pc, #288]	@ (8001cfc <title_screen+0x1b0>)
 8001bdc:	f7ff fd74 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 8001be0:	f7fe fee2 	bl	80009a8 <RA8875_graphic_mode>
	//center emblem
	RA8875_draw_fill_circle(CENTER_X, CENTER_Y, 250, 0x9d18);	// blue
 8001be4:	f649 5318 	movw	r3, #40216	@ 0x9d18
 8001be8:	22fa      	movs	r2, #250	@ 0xfa
 8001bea:	21f0      	movs	r1, #240	@ 0xf0
 8001bec:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001bf0:	f7ff fb36 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(CENTER_X, CENTER_Y, 225, 0xc65d);	// light blue
 8001bf4:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8001bf8:	22e1      	movs	r2, #225	@ 0xe1
 8001bfa:	21f0      	movs	r1, #240	@ 0xf0
 8001bfc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c00:	f7ff fb2e 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_rect(CENTER_X - 170, CENTER_Y - 90, 340, 160, RA8875_YELLOW);
 8001c04:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	23a0      	movs	r3, #160	@ 0xa0
 8001c0c:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8001c10:	2196      	movs	r1, #150	@ 0x96
 8001c12:	20e6      	movs	r0, #230	@ 0xe6
 8001c14:	f7ff fad7 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_hexagon(CENTER_X, CENTER_Y, 160, RA8875_YELLOW);
 8001c18:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c1c:	22a0      	movs	r2, #160	@ 0xa0
 8001c1e:	21f0      	movs	r1, #240	@ 0xf0
 8001c20:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c24:	f7ff fbb0 	bl	8001388 <RA8875_draw_hexagon>
	RA8875_draw_hexagon(CENTER_X, CENTER_Y, 150, RA8875_BLACK);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2296      	movs	r2, #150	@ 0x96
 8001c2c:	21f0      	movs	r1, #240	@ 0xf0
 8001c2e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c32:	f7ff fba9 	bl	8001388 <RA8875_draw_hexagon>
	RA8875_draw_fill_rect(CENTER_X - 160, CENTER_Y - 80, 320, 140, RA8875_BLACK);
 8001c36:	2300      	movs	r3, #0
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	238c      	movs	r3, #140	@ 0x8c
 8001c3c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001c40:	21a0      	movs	r1, #160	@ 0xa0
 8001c42:	20f0      	movs	r0, #240	@ 0xf0
 8001c44:	f7ff fabf 	bl	80011c6 <RA8875_draw_fill_rect>
	//side graphics
	RA8875_draw_fill_rect(50, 0, 10, SCREEN_HEIGHT, RA8875_WHITE);
 8001c48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c52:	220a      	movs	r2, #10
 8001c54:	2100      	movs	r1, #0
 8001c56:	2032      	movs	r0, #50	@ 0x32
 8001c58:	f7ff fab5 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-50, 0, 10, SCREEN_HEIGHT, RA8875_WHITE);
 8001c5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c66:	220a      	movs	r2, #10
 8001c68:	2100      	movs	r1, #0
 8001c6a:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001c6e:	f7ff faaa 	bl	80011c6 <RA8875_draw_fill_rect>

	RA8875_text_mode();
 8001c72:	f7ff fc3f 	bl	80014f4 <RA8875_text_mode>
	//center text
	RA8875_text_cursor_position(CENTER_X-144, CENTER_Y-75);
 8001c76:	21a5      	movs	r1, #165	@ 0xa5
 8001c78:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c7c:	f7ff fc5f 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8001c80:	2100      	movs	r1, #0
 8001c82:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001c86:	f7ff fc98 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(3);
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f7ff fcf2 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Conundrum", 9);
 8001c90:	2109      	movs	r1, #9
 8001c92:	481b      	ldr	r0, [pc, #108]	@ (8001d00 <title_screen+0x1b4>)
 8001c94:	f7ff fd18 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-75, CENTER_Y-5);
 8001c98:	21eb      	movs	r1, #235	@ 0xeb
 8001c9a:	f240 1045 	movw	r0, #325	@ 0x145
 8001c9e:	f7ff fc4e 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Crack", 6);
 8001ca2:	2106      	movs	r1, #6
 8001ca4:	4814      	ldr	r0, [pc, #80]	@ (8001cf8 <title_screen+0x1ac>)
 8001ca6:	f7ff fd0f 	bl	80016c8 <RA8875_text_write>
	//side text
	char letters[16];
	generate_random_letters(letters, 16);
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff feb7 	bl	8001a24 <generate_random_letters>
	for(size_t i = 0; i < 16; i++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e03d      	b.n	8001d38 <title_screen+0x1ec>
		if(i<8) {
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b07      	cmp	r3, #7
 8001cc0:	d820      	bhi.n	8001d04 <title_screen+0x1b8>
			RA8875_text_cursor_position(10, i*60);
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f7ff fc33 	bl	800153e <RA8875_text_cursor_position>
			RA8875_text_write(&letters[i], 1);
 8001cd8:	f107 0208 	add.w	r2, r7, #8
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	4413      	add	r3, r2
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fcf0 	bl	80016c8 <RA8875_text_write>
 8001ce8:	e023      	b.n	8001d32 <title_screen+0x1e6>
 8001cea:	bf00      	nop
 8001cec:	08010e94 	.word	0x08010e94
 8001cf0:	08010e9c 	.word	0x08010e9c
 8001cf4:	08010ea0 	.word	0x08010ea0
 8001cf8:	08010ea8 	.word	0x08010ea8
 8001cfc:	08010eb0 	.word	0x08010eb0
 8001d00:	08010eb8 	.word	0x08010eb8
		}
		else {
			RA8875_text_cursor_position(SCREEN_WIDTH-35, (i-8)*60);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f240 20fd 	movw	r0, #765	@ 0x2fd
 8001d1e:	f7ff fc0e 	bl	800153e <RA8875_text_cursor_position>
			RA8875_text_write(&letters[i], 1);
 8001d22:	f107 0208 	add.w	r2, r7, #8
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	4413      	add	r3, r2
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fccb 	bl	80016c8 <RA8875_text_write>
	for(size_t i = 0; i < 16; i++) {
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	d9be      	bls.n	8001cbc <title_screen+0x170>
		}
	}
	RA8875_graphic_mode();
 8001d3e:	f7fe fe33 	bl	80009a8 <RA8875_graphic_mode>

	//cracks
	RA8875_draw_fill_rect(200, 0, 5, 160, RA8875_YELLOW);
 8001d42:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	23a0      	movs	r3, #160	@ 0xa0
 8001d4a:	2205      	movs	r2, #5
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	20c8      	movs	r0, #200	@ 0xc8
 8001d50:	f7ff fa39 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(150, 80, 150, 5, RA8875_YELLOW);
 8001d54:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	2296      	movs	r2, #150	@ 0x96
 8001d5e:	2150      	movs	r1, #80	@ 0x50
 8001d60:	2096      	movs	r0, #150	@ 0x96
 8001d62:	f7ff fa30 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(130, SCREEN_HEIGHT-220, 5, 220, RA8875_YELLOW);
 8001d66:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	23dc      	movs	r3, #220	@ 0xdc
 8001d6e:	2205      	movs	r2, #5
 8001d70:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001d74:	2082      	movs	r0, #130	@ 0x82
 8001d76:	f7ff fa26 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-300, 0, 5, 100, RA8875_YELLOW);
 8001d7a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2364      	movs	r3, #100	@ 0x64
 8001d82:	2205      	movs	r2, #5
 8001d84:	2100      	movs	r1, #0
 8001d86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d8a:	f7ff fa1c 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-300, 100, 200, 5, RA8875_YELLOW);
 8001d8e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2305      	movs	r3, #5
 8001d96:	22c8      	movs	r2, #200	@ 0xc8
 8001d98:	2164      	movs	r1, #100	@ 0x64
 8001d9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d9e:	f7ff fa12 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-100, 0, 5, 280, RA8875_YELLOW);
 8001da2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001dac:	2205      	movs	r2, #5
 8001dae:	2100      	movs	r1, #0
 8001db0:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001db4:	f7ff fa07 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-200, SCREEN_HEIGHT-200, 100, 5, RA8875_YELLOW);
 8001db8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	2264      	movs	r2, #100	@ 0x64
 8001dc2:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001dc6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001dca:	f7ff f9fc 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-180, SCREEN_HEIGHT-250, 5, 250, RA8875_YELLOW);
 8001dce:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	23fa      	movs	r3, #250	@ 0xfa
 8001dd6:	2205      	movs	r2, #5
 8001dd8:	21e6      	movs	r1, #230	@ 0xe6
 8001dda:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001dde:	f7ff f9f2 	bl	80011c6 <RA8875_draw_fill_rect>
	//intersects
	RA8875_draw_fill_circle(202, 82, 7, RA8875_YELLOW);
 8001de2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001de6:	2207      	movs	r2, #7
 8001de8:	2152      	movs	r1, #82	@ 0x52
 8001dea:	20ca      	movs	r0, #202	@ 0xca
 8001dec:	f7ff fa38 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(202, 82, 5, RA8875_BLUE);
 8001df0:	231f      	movs	r3, #31
 8001df2:	2205      	movs	r2, #5
 8001df4:	2152      	movs	r1, #82	@ 0x52
 8001df6:	20ca      	movs	r0, #202	@ 0xca
 8001df8:	f7ff fa32 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(202, 82, 3, RA8875_YELLOW);
 8001dfc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e00:	2203      	movs	r2, #3
 8001e02:	2152      	movs	r1, #82	@ 0x52
 8001e04:	20ca      	movs	r0, #202	@ 0xca
 8001e06:	f7ff fa2b 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(132, SCREEN_HEIGHT-218, 7, RA8875_YELLOW);
 8001e0a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e0e:	2207      	movs	r2, #7
 8001e10:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001e14:	2084      	movs	r0, #132	@ 0x84
 8001e16:	f7ff fa23 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(132, SCREEN_HEIGHT-218, 5, RA8875_BLUE);
 8001e1a:	231f      	movs	r3, #31
 8001e1c:	2205      	movs	r2, #5
 8001e1e:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001e22:	2084      	movs	r0, #132	@ 0x84
 8001e24:	f7ff fa1c 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(132, SCREEN_HEIGHT-218, 3, RA8875_YELLOW);
 8001e28:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001e32:	2084      	movs	r0, #132	@ 0x84
 8001e34:	f7ff fa14 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-98, 100, 7, RA8875_YELLOW);
 8001e38:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	2164      	movs	r1, #100	@ 0x64
 8001e40:	f240 20be 	movw	r0, #702	@ 0x2be
 8001e44:	f7ff fa0c 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-98, 100, 5, RA8875_BLUE);
 8001e48:	231f      	movs	r3, #31
 8001e4a:	2205      	movs	r2, #5
 8001e4c:	2164      	movs	r1, #100	@ 0x64
 8001e4e:	f240 20be 	movw	r0, #702	@ 0x2be
 8001e52:	f7ff fa05 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-98, 100, 3, RA8875_YELLOW);
 8001e56:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	2164      	movs	r1, #100	@ 0x64
 8001e5e:	f240 20be 	movw	r0, #702	@ 0x2be
 8001e62:	f7ff f9fd 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-100, SCREEN_HEIGHT-200, 7, RA8875_YELLOW);
 8001e66:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001e70:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001e74:	f7ff f9f4 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-100, SCREEN_HEIGHT-200, 5, RA8875_BLUE);
 8001e78:	231f      	movs	r3, #31
 8001e7a:	2205      	movs	r2, #5
 8001e7c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001e80:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001e84:	f7ff f9ec 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-100, SCREEN_HEIGHT-200, 3, RA8875_YELLOW);
 8001e88:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001e92:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001e96:	f7ff f9e3 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-178, SCREEN_HEIGHT-198, 7, RA8875_YELLOW);
 8001e9a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001ea4:	f240 206e 	movw	r0, #622	@ 0x26e
 8001ea8:	f7ff f9da 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-178, SCREEN_HEIGHT-198, 5, RA8875_BLUE);
 8001eac:	231f      	movs	r3, #31
 8001eae:	2205      	movs	r2, #5
 8001eb0:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001eb4:	f240 206e 	movw	r0, #622	@ 0x26e
 8001eb8:	f7ff f9d2 	bl	8001260 <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-178, SCREEN_HEIGHT-198, 3, RA8875_YELLOW);
 8001ebc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001ec6:	f240 206e 	movw	r0, #622	@ 0x26e
 8001eca:	f7ff f9c9 	bl	8001260 <RA8875_draw_fill_circle>
	//hour glass
	RA8875_draw_fill_triangle(CENTER_X-40, CENTER_Y+100, CENTER_X+40, CENTER_Y+100, CENTER_X, CENTER_Y+160, RA8875_WHITE);
 8001ece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ed2:	9302      	str	r3, [sp, #8]
 8001ed4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 8001ee4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8001ee8:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001eec:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001ef0:	f7ff f9d4 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-40, CENTER_Y+210, CENTER_X+40, CENTER_Y+210, CENTER_X, CENTER_Y+140, RA8875_WHITE);
 8001ef4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001f0a:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8001f0e:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001f12:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001f16:	f7ff f9c1 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_round_rect(CENTER_X-40, CENTER_Y+90, 80, 20, 10, 0xbc20);
 8001f1a:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	230a      	movs	r3, #10
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2314      	movs	r3, #20
 8001f26:	2250      	movs	r2, #80	@ 0x50
 8001f28:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001f2c:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001f30:	f7ff f9fe 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-40, CENTER_Y+200, 80, 20, 10, 0xbc20);	//orange
 8001f34:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2314      	movs	r3, #20
 8001f40:	2250      	movs	r2, #80	@ 0x50
 8001f42:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8001f46:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001f4a:	f7ff f9f1 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_rect(CENTER_X-34, CENTER_Y+100, 7, 110, 0xbc20);
 8001f4e:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	236e      	movs	r3, #110	@ 0x6e
 8001f56:	2207      	movs	r2, #7
 8001f58:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001f5c:	f44f 70b7 	mov.w	r0, #366	@ 0x16e
 8001f60:	f7ff f931 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(CENTER_X+26, CENTER_Y+100, 7, 110, 0xbc20);
 8001f64:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	236e      	movs	r3, #110	@ 0x6e
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001f72:	f44f 70d5 	mov.w	r0, #426	@ 0x1aa
 8001f76:	f7ff f926 	bl	80011c6 <RA8875_draw_fill_rect>

	HAL_Delay(5000);
 8001f7a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f7e:	f002 fcd7 	bl	8004930 <HAL_Delay>
	for(int p = 200; p >= 0; p -= 20) {
 8001f82:	23c8      	movs	r3, #200	@ 0xc8
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	e00a      	b.n	8001f9e <title_screen+0x452>
		RA8875_pwm1_out(p);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fbcb 	bl	8001728 <RA8875_pwm1_out>
		HAL_Delay(100);
 8001f92:	2064      	movs	r0, #100	@ 0x64
 8001f94:	f002 fccc 	bl	8004930 <HAL_Delay>
	for(int p = 200; p >= 0; p -= 20) {
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	3b14      	subs	r3, #20
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	daf1      	bge.n	8001f88 <title_screen+0x43c>
	}
	RA8875_fill_screen(RA8875_BLACK);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff f93b 	bl	8001220 <RA8875_fill_screen>

	return;
 8001faa:	bf00      	nop
}
 8001fac:	3720      	adds	r7, #32
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop

08001fb4 <show_menu>:

void show_menu(Game_HandleTypeDef *hgame) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af04      	add	r7, sp, #16
 8001fba:	6078      	str	r0, [r7, #4]
	hgame->mode = GAME_MODE_MENU;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

	//background
	RA8875_pwm1_out(hgame->current_b);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fbab 	bl	8001728 <RA8875_pwm1_out>
	RA8875_fill_screen(RA8875_BLUE);
 8001fd2:	201f      	movs	r0, #31
 8001fd4:	f7ff f924 	bl	8001220 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8001fd8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	230a      	movs	r3, #10
 8001fe0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001fe4:	215a      	movs	r1, #90	@ 0x5a
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff f8ed 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8001fec:	2300      	movs	r3, #0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	230a      	movs	r3, #10
 8001ff2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ff6:	2164      	movs	r1, #100	@ 0x64
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff f8e4 	bl	80011c6 <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0xc65d);
 8001ffe:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002014:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002018:	21b4      	movs	r1, #180	@ 0xb4
 800201a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800201e:	f7ff f93d 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 8002022:	231f      	movs	r3, #31
 8002024:	9302      	str	r3, [sp, #8]
 8002026:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002036:	f240 22da 	movw	r2, #730	@ 0x2da
 800203a:	21b4      	movs	r1, #180	@ 0xb4
 800203c:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8002040:	f7ff f92c 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 8002044:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	f240 238a 	movw	r3, #650	@ 0x28a
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800205a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800205e:	21b4      	movs	r1, #180	@ 0xb4
 8002060:	f240 208a 	movw	r0, #650	@ 0x28a
 8002064:	f7ff f91a 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 8002068:	231f      	movs	r3, #31
 800206a:	9302      	str	r3, [sp, #8]
 800206c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	f240 2376 	movw	r3, #630	@ 0x276
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800207c:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8002080:	21b4      	movs	r1, #180	@ 0xb4
 8002082:	f240 2076 	movw	r0, #630	@ 0x276
 8002086:	f7ff f909 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0xc65d);
 800208a:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800208e:	9302      	str	r3, [sp, #8]
 8002090:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	2346      	movs	r3, #70	@ 0x46
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800209e:	2214      	movs	r2, #20
 80020a0:	21b4      	movs	r1, #180	@ 0xb4
 80020a2:	2046      	movs	r0, #70	@ 0x46
 80020a4:	f7ff f8fa 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 80020a8:	231f      	movs	r3, #31
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	235a      	movs	r3, #90	@ 0x5a
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80020ba:	2228      	movs	r2, #40	@ 0x28
 80020bc:	21b4      	movs	r1, #180	@ 0xb4
 80020be:	205a      	movs	r0, #90	@ 0x5a
 80020c0:	f7ff f8ec 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 80020c4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2378      	movs	r3, #120	@ 0x78
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80020d8:	2246      	movs	r2, #70	@ 0x46
 80020da:	21b4      	movs	r1, #180	@ 0xb4
 80020dc:	2078      	movs	r0, #120	@ 0x78
 80020de:	f7ff f8dd 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 80020e2:	231f      	movs	r3, #31
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	238c      	movs	r3, #140	@ 0x8c
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80020f4:	225a      	movs	r2, #90	@ 0x5a
 80020f6:	21b4      	movs	r1, #180	@ 0xb4
 80020f8:	208c      	movs	r0, #140	@ 0x8c
 80020fa:	f7ff f8cf 	bl	800129c <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0xc65d);
 80020fe:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2378      	movs	r3, #120	@ 0x78
 8002106:	22c8      	movs	r2, #200	@ 0xc8
 8002108:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800210c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002110:	f7ff f8ec 	bl	80012ec <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0xc65d);//0deg
 8002114:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	f240 237e 	movw	r3, #638	@ 0x27e
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800212a:	f240 224e 	movw	r2, #590	@ 0x24e
 800212e:	21fa      	movs	r1, #250	@ 0xfa
 8002130:	f240 204e 	movw	r0, #590	@ 0x24e
 8002134:	f7ff f8b2 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0xc65d);//180deg
 8002138:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	23ae      	movs	r3, #174	@ 0xae
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800214c:	22d4      	movs	r2, #212	@ 0xd4
 800214e:	21fa      	movs	r1, #250	@ 0xfa
 8002150:	20d4      	movs	r0, #212	@ 0xd4
 8002152:	f7ff f8a3 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0xc65d);//74deg
 8002156:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	2382      	movs	r3, #130	@ 0x82
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	f240 13db 	movw	r3, #475	@ 0x1db
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	23c0      	movs	r3, #192	@ 0xc0
 8002168:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 800216c:	21af      	movs	r1, #175	@ 0xaf
 800216e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002172:	f7ff f893 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0xc65d);//106deg
 8002176:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	2382      	movs	r3, #130	@ 0x82
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	f240 1345 	movw	r3, #325	@ 0x145
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	23c0      	movs	r3, #192	@ 0xc0
 8002188:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800218c:	21af      	movs	r1, #175	@ 0xaf
 800218e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002192:	f7ff f883 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0xc65d);//-74deg
 8002196:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 80021ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80021b0:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80021b4:	f240 200a 	movw	r0, #522	@ 0x20a
 80021b8:	f7ff f870 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0xc65d);//-106deg
 80021bc:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 80021d2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80021d6:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80021da:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80021de:	f7ff f85d 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0xc65d);//32deg
 80021e2:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	23be      	movs	r3, #190	@ 0xbe
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	f44f 7311 	mov.w	r3, #580	@ 0x244
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	23c0      	movs	r3, #192	@ 0xc0
 80021f4:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 80021f8:	21fa      	movs	r1, #250	@ 0xfa
 80021fa:	f44f 7014 	mov.w	r0, #592	@ 0x250
 80021fe:	f7ff f84d 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0xc65d);//122deg
 8002202:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	23be      	movs	r3, #190	@ 0xbe
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	23dc      	movs	r3, #220	@ 0xdc
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	23c0      	movs	r3, #192	@ 0xc0
 8002212:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8002216:	21fa      	movs	r1, #250	@ 0xfa
 8002218:	20d4      	movs	r0, #212	@ 0xd4
 800221a:	f7ff f83f 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0xc65d);//-32deg
 800221e:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002222:	9302      	str	r3, [sp, #8]
 8002224:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	f44f 7311 	mov.w	r3, #580	@ 0x244
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8002234:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8002238:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800223c:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002240:	f7ff f82c 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0xc65d);//-122deg
 8002244:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800225a:	22d4      	movs	r2, #212	@ 0xd4
 800225c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002260:	20dc      	movs	r0, #220	@ 0xdc
 8002262:	f7ff f81b 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0xc65d);//stem
 8002266:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	237c      	movs	r3, #124	@ 0x7c
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800227a:	22e8      	movs	r2, #232	@ 0xe8
 800227c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002280:	20ca      	movs	r0, #202	@ 0xca
 8002282:	f7ff f80b 	bl	800129c <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 8002286:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	230a      	movs	r3, #10
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2346      	movs	r3, #70	@ 0x46
 8002292:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002296:	21cd      	movs	r1, #205	@ 0xcd
 8002298:	20fa      	movs	r0, #250	@ 0xfa
 800229a:	f7ff f849 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 800229e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	230a      	movs	r3, #10
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2346      	movs	r3, #70	@ 0x46
 80022aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022ae:	f240 1127 	movw	r1, #295	@ 0x127
 80022b2:	20fa      	movs	r0, #250	@ 0xfa
 80022b4:	f7ff f83c 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2307      	movs	r3, #7
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2332      	movs	r3, #50	@ 0x32
 80022c2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80022c6:	21d7      	movs	r1, #215	@ 0xd7
 80022c8:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80022cc:	f7ff f830 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2307      	movs	r3, #7
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2332      	movs	r3, #50	@ 0x32
 80022da:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80022de:	f240 1131 	movw	r1, #305	@ 0x131
 80022e2:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80022e6:	f7ff f823 	bl	8001330 <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 80022ea:	f7ff f903 	bl	80014f4 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 80022ee:	2100      	movs	r1, #0
 80022f0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80022f4:	f7ff f961 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y-25);
 80022f8:	21d7      	movs	r1, #215	@ 0xd7
 80022fa:	f240 1063 	movw	r0, #355	@ 0x163
 80022fe:	f7ff f91e 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8002302:	2002      	movs	r0, #2
 8002304:	f7ff f9b6 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Play", 5);
 8002308:	2105      	movs	r1, #5
 800230a:	4847      	ldr	r0, [pc, #284]	@ (8002428 <show_menu+0x474>)
 800230c:	f7ff f9dc 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-95, CENTER_Y+65);
 8002310:	f240 1131 	movw	r1, #305	@ 0x131
 8002314:	f240 1031 	movw	r0, #305	@ 0x131
 8002318:	f7ff f911 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Settings", 9);
 800231c:	2109      	movs	r1, #9
 800231e:	4843      	ldr	r0, [pc, #268]	@ (800242c <show_menu+0x478>)
 8002320:	f7ff f9d2 	bl	80016c8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 8002324:	211f      	movs	r1, #31
 8002326:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800232a:	f7ff f946 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-53, 20);
 800232e:	2114      	movs	r1, #20
 8002330:	f240 105b 	movw	r0, #347	@ 0x15b
 8002334:	f7ff f903 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 8002338:	2003      	movs	r0, #3
 800233a:	f7ff f99b 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("MENU", 5);
 800233e:	2105      	movs	r1, #5
 8002340:	483b      	ldr	r0, [pc, #236]	@ (8002430 <show_menu+0x47c>)
 8002342:	f7ff f9c1 	bl	80016c8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002346:	211f      	movs	r1, #31
 8002348:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800234c:	f7ff f935 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8002350:	2100      	movs	r1, #0
 8002352:	200a      	movs	r0, #10
 8002354:	f7ff f8f3 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8002358:	2001      	movs	r0, #1
 800235a:	f7ff f98b 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Conundrum", 9);
 800235e:	2109      	movs	r1, #9
 8002360:	4834      	ldr	r0, [pc, #208]	@ (8002434 <show_menu+0x480>)
 8002362:	f7ff f9b1 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-90, 0);
 8002366:	2100      	movs	r1, #0
 8002368:	f240 20c6 	movw	r0, #710	@ 0x2c6
 800236c:	f7ff f8e7 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Crack", 5);
 8002370:	2105      	movs	r1, #5
 8002372:	4831      	ldr	r0, [pc, #196]	@ (8002438 <show_menu+0x484>)
 8002374:	f7ff f9a8 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8002378:	2137      	movs	r1, #55	@ 0x37
 800237a:	200a      	movs	r0, #10
 800237c:	f7ff f8df 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("ECE", 3);
 8002380:	2103      	movs	r1, #3
 8002382:	482e      	ldr	r0, [pc, #184]	@ (800243c <show_menu+0x488>)
 8002384:	f7ff f9a0 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 8002388:	2137      	movs	r1, #55	@ 0x37
 800238a:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 800238e:	f7ff f8d6 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("477", 3);
 8002392:	2103      	movs	r1, #3
 8002394:	482a      	ldr	r0, [pc, #168]	@ (8002440 <show_menu+0x48c>)
 8002396:	f7ff f997 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 800239a:	f7fe fb05 	bl	80009a8 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-79, 10, CENTER_X-72, 50, CENTER_X-87, 50, RA8875_YELLOW);
 800239e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023a2:	9302      	str	r3, [sp, #8]
 80023a4:	2332      	movs	r3, #50	@ 0x32
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	f240 1339 	movw	r3, #313	@ 0x139
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2332      	movs	r3, #50	@ 0x32
 80023b0:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80023b4:	210a      	movs	r1, #10
 80023b6:	f240 1041 	movw	r0, #321	@ 0x141
 80023ba:	f7fe ff6f 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-72, 85, CENTER_X-65, 50, CENTER_X-80, 50, RA8875_YELLOW);
 80023be:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023c2:	9302      	str	r3, [sp, #8]
 80023c4:	2332      	movs	r3, #50	@ 0x32
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2332      	movs	r3, #50	@ 0x32
 80023d0:	f240 124f 	movw	r2, #335	@ 0x14f
 80023d4:	2155      	movs	r1, #85	@ 0x55
 80023d6:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 80023da:	f7fe ff5f 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+99, 10, CENTER_X+92, 50, CENTER_X+107, 50, RA8875_YELLOW);
 80023de:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2332      	movs	r3, #50	@ 0x32
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f240 13fb 	movw	r3, #507	@ 0x1fb
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2332      	movs	r3, #50	@ 0x32
 80023f0:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 80023f4:	210a      	movs	r1, #10
 80023f6:	f240 10f3 	movw	r0, #499	@ 0x1f3
 80023fa:	f7fe ff4f 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+92, 85, CENTER_X+85, 50, CENTER_X+100, 50, RA8875_YELLOW);
 80023fe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	2332      	movs	r3, #50	@ 0x32
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2332      	movs	r3, #50	@ 0x32
 8002410:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002414:	2155      	movs	r1, #85	@ 0x55
 8002416:	f44f 70f6 	mov.w	r0, #492	@ 0x1ec
 800241a:	f7fe ff3f 	bl	800129c <RA8875_draw_fill_triangle>

	return;
 800241e:	bf00      	nop
}
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	08010ec4 	.word	0x08010ec4
 800242c:	08010ecc 	.word	0x08010ecc
 8002430:	08010ed8 	.word	0x08010ed8
 8002434:	08010eb8 	.word	0x08010eb8
 8002438:	08010ea8 	.word	0x08010ea8
 800243c:	08010ee0 	.word	0x08010ee0
 8002440:	08010ee4 	.word	0x08010ee4
 8002444:	00000000 	.word	0x00000000

08002448 <game_matrix>:

void game_matrix(Game_HandleTypeDef *hgame) {
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b093      	sub	sp, #76	@ 0x4c
 800244c:	af02      	add	r7, sp, #8
 800244e:	6078      	str	r0, [r7, #4]
	RA8875_pwm1_out(hgame->current_b);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002456:	b2db      	uxtb	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f965 	bl	8001728 <RA8875_pwm1_out>
	hgame->mode = GAME_MODE_PLAY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0
	get_word_matrix(hgame->word_matrix, hgame->board_num, hgame->round_num);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 12f4 	ldr.w	r1, [r3, #756]	@ 0x2f4
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8002474:	461a      	mov	r2, r3
 8002476:	f7ff f99f 	bl	80017b8 <get_word_matrix>

    srand(HAL_GetTick());
 800247a:	f002 fa4d 	bl	8004918 <HAL_GetTick>
 800247e:	4603      	mov	r3, r0
 8002480:	4618      	mov	r0, r3
 8002482:	f00c fcbb 	bl	800edfc <srand>
    uint8_t numbers[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 8002486:	4b9c      	ldr	r3, [pc, #624]	@ (80026f8 <game_matrix+0x2b0>)
 8002488:	f107 0418 	add.w	r4, r7, #24
 800248c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800248e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shuffle_array(numbers, 16, &(hgame->index0), &(hgame->index1));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f503 723b 	add.w	r2, r3, #748	@ 0x2ec
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800249e:	f107 0018 	add.w	r0, r7, #24
 80024a2:	2110      	movs	r1, #16
 80024a4:	f7ff faf2 	bl	8001a8c <shuffle_array>

	//background
	RA8875_fill_screen(RA8875_BLUE);
 80024a8:	201f      	movs	r0, #31
 80024aa:	f7fe feb9 	bl	8001220 <RA8875_fill_screen>
	//clue
	RA8875_draw_fill_rect(CENTER_X-100, 30, 200, 70, RA8875_YELLOW);
 80024ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2346      	movs	r3, #70	@ 0x46
 80024b6:	22c8      	movs	r2, #200	@ 0xc8
 80024b8:	211e      	movs	r1, #30
 80024ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80024be:	f7fe fe82 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(CENTER_X-90, 40, 180, 50, RA8875_BLUE);
 80024c2:	231f      	movs	r3, #31
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2332      	movs	r3, #50	@ 0x32
 80024c8:	22b4      	movs	r2, #180	@ 0xb4
 80024ca:	2128      	movs	r1, #40	@ 0x28
 80024cc:	f44f 709b 	mov.w	r0, #310	@ 0x136
 80024d0:	f7fe fe79 	bl	80011c6 <RA8875_draw_fill_rect>
	//4x4 square matrix with words
	for (int row = 0; row < ROWS; row++) {
 80024d4:	2300      	movs	r3, #0
 80024d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024d8:	e094      	b.n	8002604 <game_matrix+0x1bc>
	  for (int col = 0; col < COLS; col++) {
 80024da:	2300      	movs	r3, #0
 80024dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024de:	e08a      	b.n	80025f6 <game_matrix+0x1ae>
		  int x = MARGIN + col * (SQWIDTH + SPACE);
 80024e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	019b      	lsls	r3, r3, #6
 80024ea:	3314      	adds	r3, #20
 80024ec:	637b      	str	r3, [r7, #52]	@ 0x34
		  int y = HEADER + MARGIN + row * (SQHEIGHT + SPACE);
 80024ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024f8:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 80026e0 <game_matrix+0x298>
 80024fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002500:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 80026e8 <game_matrix+0x2a0>
 8002504:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002508:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800250c:	ee17 3a90 	vmov	r3, s15
 8002510:	633b      	str	r3, [r7, #48]	@ 0x30

		  RA8875_draw_fill_rect(x, y, SQWIDTH, SQHEIGHT, RA8875_WHITE);
 8002512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002514:	b218      	sxth	r0, r3
 8002516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002518:	b219      	sxth	r1, r3
 800251a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	234e      	movs	r3, #78	@ 0x4e
 8002522:	22b6      	movs	r2, #182	@ 0xb6
 8002524:	f7fe fe4f 	bl	80011c6 <RA8875_draw_fill_rect>

		  int textX = x + SQWIDTH / 2 - (7 * ((hgame->word_matrix)[numbers[4*row + col]]).length);
 8002528:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800252a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252c:	009a      	lsls	r2, r3, #2
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	4413      	add	r3, r2
 8002532:	3340      	adds	r3, #64	@ 0x40
 8002534:	443b      	add	r3, r7
 8002536:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800253a:	4618      	mov	r0, r3
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4603      	mov	r3, r0
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4403      	add	r3, r0
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	3310      	adds	r3, #16
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	1acb      	subs	r3, r1, r3
 8002554:	335b      	adds	r3, #91	@ 0x5b
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  int textY = y + SQHEIGHT / 2 - 15;
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002562:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 80026f0 <game_matrix+0x2a8>
 8002566:	ee37 7b06 	vadd.f64	d7, d7, d6
 800256a:	eeb2 6b0e 	vmov.f64	d6, #46	@ 0x41700000  15.0
 800256e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002572:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002576:	ee17 3a90 	vmov	r3, s15
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28

		  RA8875_text_mode();
 800257c:	f7fe ffba 	bl	80014f4 <RA8875_text_mode>
		  RA8875_text_cursor_position(textX, textY);
 8002580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002582:	b29b      	uxth	r3, r3
 8002584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002586:	b292      	uxth	r2, r2
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe ffd7 	bl	800153e <RA8875_text_cursor_position>
		  RA8875_text_color (RA8875_BLACK, RA8875_WHITE);
 8002590:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002594:	2000      	movs	r0, #0
 8002596:	f7ff f810 	bl	80015ba <RA8875_text_color>
		  RA8875_text_scale(1);
 800259a:	2001      	movs	r0, #1
 800259c:	f7ff f86a 	bl	8001674 <RA8875_text_scale>

		  RA8875_text_write(((hgame->word_matrix)[numbers[4*row + col]]).word, ((hgame->word_matrix)[numbers[4*row + col]]).length - 1);
 80025a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a2:	009a      	lsls	r2, r3, #2
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	4413      	add	r3, r2
 80025a8:	3340      	adds	r3, #64	@ 0x40
 80025aa:	443b      	add	r3, r7
 80025ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	18d0      	adds	r0, r2, r3
 80025be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c0:	009a      	lsls	r2, r3, #2
 80025c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c4:	4413      	add	r3, r2
 80025c6:	3340      	adds	r3, #64	@ 0x40
 80025c8:	443b      	add	r3, r7
 80025ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025ce:	4619      	mov	r1, r3
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	3310      	adds	r3, #16
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7ff f86e 	bl	80016c8 <RA8875_text_write>
		  RA8875_graphic_mode();
 80025ec:	f7fe f9dc 	bl	80009a8 <RA8875_graphic_mode>
	  for (int col = 0; col < COLS; col++) {
 80025f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f2:	3301      	adds	r3, #1
 80025f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	f77f af71 	ble.w	80024e0 <game_matrix+0x98>
	for (int row = 0; row < ROWS; row++) {
 80025fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002600:	3301      	adds	r3, #1
 8002602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002606:	2b03      	cmp	r3, #3
 8002608:	f77f af67 	ble.w	80024da <game_matrix+0x92>
	  }
	}
	//timer
	char buffer[10];
	sprintf(buffer, "%d", hgame->game_timer);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	4938      	ldr	r1, [pc, #224]	@ (80026fc <game_matrix+0x2b4>)
 800261c:	4618      	mov	r0, r3
 800261e:	f00c fd4f 	bl	800f0c0 <siprintf>
	RA8875_text_mode();
 8002622:	f7fe ff67 	bl	80014f4 <RA8875_text_mode>
	RA8875_text_cursor_position(CENTER_X-200, 50);
 8002626:	2132      	movs	r1, #50	@ 0x32
 8002628:	20c8      	movs	r0, #200	@ 0xc8
 800262a:	f7fe ff88 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 800262e:	211f      	movs	r1, #31
 8002630:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002634:	f7fe ffc1 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(1);
 8002638:	2001      	movs	r0, #1
 800263a:	f7ff f81b 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write(buffer, 2);
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff f83f 	bl	80016c8 <RA8875_text_write>
	//score
	sprintf(buffer, "Score: %02d", hgame->score);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	492a      	ldr	r1, [pc, #168]	@ (8002700 <game_matrix+0x2b8>)
 8002656:	4618      	mov	r0, r3
 8002658:	f00c fd32 	bl	800f0c0 <siprintf>
	RA8875_text_cursor_position(CENTER_X+190, 50);
 800265c:	2132      	movs	r1, #50	@ 0x32
 800265e:	f240 204e 	movw	r0, #590	@ 0x24e
 8002662:	f7fe ff6c 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002666:	211f      	movs	r1, #31
 8002668:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800266c:	f7fe ffa5 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(1);
 8002670:	2001      	movs	r0, #1
 8002672:	f7fe ffff 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write(buffer, 10);
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	210a      	movs	r1, #10
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff f823 	bl	80016c8 <RA8875_text_write>
	//clue
	RA8875_text_cursor_position(CENTER_X - (7*hgame->word_matrix[NUM_WORDS].length), 50);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	00d2      	lsls	r2, r2, #3
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	b29b      	uxth	r3, r3
 8002692:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 8002696:	b29b      	uxth	r3, r3
 8002698:	2132      	movs	r1, #50	@ 0x32
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe ff4f 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80026a0:	211f      	movs	r1, #31
 80026a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80026a6:	f7fe ff88 	bl	80015ba <RA8875_text_color>
	RA8875_text_scale(1);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f7fe ffe2 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write(hgame->word_matrix[NUM_WORDS-1].word, hgame->word_matrix[NUM_WORDS].length - 1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f503 7220 	add.w	r2, r3, #640	@ 0x280
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7fe ffff 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 80026ca:	f7fe f96d 	bl	80009a8 <RA8875_graphic_mode>

	HAL_TIM_Base_Start_IT(&htim6);
 80026ce:	480d      	ldr	r0, [pc, #52]	@ (8002704 <game_matrix+0x2bc>)
 80026d0:	f009 f93a 	bl	800b948 <HAL_TIM_Base_Start_IT>

	return;
 80026d4:	bf00      	nop
}
 80026d6:	3744      	adds	r7, #68	@ 0x44
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	f3af 8000 	nop.w
 80026e0:	00000000 	.word	0x00000000
 80026e4:	40562000 	.word	0x40562000
 80026e8:	00000000 	.word	0x00000000
 80026ec:	405d0000 	.word	0x405d0000
 80026f0:	00000000 	.word	0x00000000
 80026f4:	4043a000 	.word	0x4043a000
 80026f8:	08010ef8 	.word	0x08010ef8
 80026fc:	08010ee8 	.word	0x08010ee8
 8002700:	08010eec 	.word	0x08010eec
 8002704:	24000298 	.word	0x24000298

08002708 <process_input>:

void process_input(Game_HandleTypeDef *hgame, int key) {
 8002708:	b5b0      	push	{r4, r5, r7, lr}
 800270a:	b094      	sub	sp, #80	@ 0x50
 800270c:	af02      	add	r7, sp, #8
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]

					//   0  1  2  3   4   5  6  7  8   9   10 11 12  13  14  15 16 17  18  19
	uint8_t mapping[] = {0, 4, 8, 12, -1, 1, 5, 9, 13, -1, 2, 6, 10, 14, -1, 3, 7, 11, 15, -1};
 8002712:	4bb1      	ldr	r3, [pc, #708]	@ (80029d8 <process_input+0x2d0>)
 8002714:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002718:	461d      	mov	r5, r3
 800271a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271e:	682b      	ldr	r3, [r5, #0]
 8002720:	6023      	str	r3, [r4, #0]
	switch(hgame->mode) {
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 32d0 	ldrb.w	r3, [r3, #720]	@ 0x2d0
 8002728:	2b04      	cmp	r3, #4
 800272a:	f200 8362 	bhi.w	8002df2 <process_input+0x6ea>
 800272e:	a201      	add	r2, pc, #4	@ (adr r2, 8002734 <process_input+0x2c>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	08002833 	.word	0x08002833
 8002738:	08002749 	.word	0x08002749
 800273c:	080029f1 	.word	0x080029f1
 8002740:	08002adb 	.word	0x08002adb
 8002744:	08002de1 	.word	0x08002de1
		case GAME_MODE_TITLE:
			break;
		case GAME_MODE_MENU:
			if(key == 4) {
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b04      	cmp	r3, #4
 800274c:	d136      	bne.n	80027bc <process_input+0xb4>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_BLACK);
 800274e:	2300      	movs	r3, #0
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	230a      	movs	r3, #10
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2346      	movs	r3, #70	@ 0x46
 8002758:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800275c:	21cd      	movs	r1, #205	@ 0xcd
 800275e:	20fa      	movs	r0, #250	@ 0xfa
 8002760:	f7fe fde6 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_GREEN);
 8002764:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	2307      	movs	r3, #7
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2332      	movs	r3, #50	@ 0x32
 8002770:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002774:	21d7      	movs	r1, #215	@ 0xd7
 8002776:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800277a:	f7fe fdd9 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 800277e:	f7fe feb9 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002782:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe ff17 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-45, CENTER_Y-25);
 800278c:	21d7      	movs	r1, #215	@ 0xd7
 800278e:	f240 1063 	movw	r0, #355	@ 0x163
 8002792:	f7fe fed4 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 8002796:	2002      	movs	r0, #2
 8002798:	f7fe ff6c 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Play", 5);
 800279c:	2105      	movs	r1, #5
 800279e:	488f      	ldr	r0, [pc, #572]	@ (80029dc <process_input+0x2d4>)
 80027a0:	f7fe ff92 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 80027a4:	f7fe f900 	bl	80009a8 <RA8875_graphic_mode>

				HAL_Delay(250);
 80027a8:	20fa      	movs	r0, #250	@ 0xfa
 80027aa:	f002 f8c1 	bl	8004930 <HAL_Delay>
				title_screen(hgame);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff f9cc 	bl	8001b4c <title_screen>
				game_matrix(hgame);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fe47 	bl	8002448 <game_matrix>
				RA8875_graphic_mode();

				HAL_Delay(250);
				settings(hgame);
			}
			break;
 80027ba:	e313      	b.n	8002de4 <process_input+0x6dc>
			else if(key == 9) {
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b09      	cmp	r3, #9
 80027c0:	f040 8310 	bne.w	8002de4 <process_input+0x6dc>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_BLACK);
 80027c4:	2300      	movs	r3, #0
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	230a      	movs	r3, #10
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2346      	movs	r3, #70	@ 0x46
 80027ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027d2:	f240 1127 	movw	r1, #295	@ 0x127
 80027d6:	20fa      	movs	r0, #250	@ 0xfa
 80027d8:	f7fe fdaa 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_GREEN);
 80027dc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	2307      	movs	r3, #7
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2332      	movs	r3, #50	@ 0x32
 80027e8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80027ec:	f240 1131 	movw	r1, #305	@ 0x131
 80027f0:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80027f4:	f7fe fd9c 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 80027f8:	f7fe fe7c 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 80027fc:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe feda 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-95, CENTER_Y+65);
 8002806:	f240 1131 	movw	r1, #305	@ 0x131
 800280a:	f240 1031 	movw	r0, #305	@ 0x131
 800280e:	f7fe fe96 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 8002812:	2002      	movs	r0, #2
 8002814:	f7fe ff2e 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Settings", 9);
 8002818:	2109      	movs	r1, #9
 800281a:	4871      	ldr	r0, [pc, #452]	@ (80029e0 <process_input+0x2d8>)
 800281c:	f7fe ff54 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 8002820:	f7fe f8c2 	bl	80009a8 <RA8875_graphic_mode>
				HAL_Delay(250);
 8002824:	20fa      	movs	r0, #250	@ 0xfa
 8002826:	f002 f883 	bl	8004930 <HAL_Delay>
				settings(hgame);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fd62 	bl	80032f4 <settings>
			break;
 8002830:	e2d8      	b.n	8002de4 <process_input+0x6dc>
		case GAME_MODE_PLAY:
			if(0 <= key && (key+6) % 5 && key != hgame->picked) {
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f2c0 82d7 	blt.w	8002de8 <process_input+0x6e0>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	1d99      	adds	r1, r3, #6
 800283e:	4b69      	ldr	r3, [pc, #420]	@ (80029e4 <process_input+0x2dc>)
 8002840:	fb83 2301 	smull	r2, r3, r3, r1
 8002844:	105a      	asrs	r2, r3, #1
 8002846:	17cb      	asrs	r3, r1, #31
 8002848:	1ad2      	subs	r2, r2, r3
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	1aca      	subs	r2, r1, r3
 8002852:	2a00      	cmp	r2, #0
 8002854:	f000 82c8 	beq.w	8002de8 <process_input+0x6e0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	f000 82c1 	beq.w	8002de8 <process_input+0x6e0>
				HAL_Delay(100);
 8002866:	2064      	movs	r0, #100	@ 0x64
 8002868:	f002 f862 	bl	8004930 <HAL_Delay>
				key = mapping[key];
 800286c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4413      	add	r3, r2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	603b      	str	r3, [r7, #0]
				hgame->guess_remain -= 1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 32dc 	ldrb.w	r3, [r3, #732]	@ 0x2dc
 800287e:	3b01      	subs	r3, #1
 8002880:	b2da      	uxtb	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
				int x = MARGIN + (key % 4) * (SQWIDTH + SPACE);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4259      	negs	r1, r3
 800288c:	f003 0203 	and.w	r2, r3, #3
 8002890:	f001 0303 	and.w	r3, r1, #3
 8002894:	bf58      	it	pl
 8002896:	425a      	negpl	r2, r3
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	019b      	lsls	r3, r3, #6
 80028a0:	3314      	adds	r3, #20
 80028a2:	647b      	str	r3, [r7, #68]	@ 0x44
				int y = HEADER + MARGIN + (key / 4) * (SQHEIGHT + SPACE);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	da00      	bge.n	80028ac <process_input+0x1a4>
 80028aa:	3303      	adds	r3, #3
 80028ac:	109b      	asrs	r3, r3, #2
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028b6:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80029c8 <process_input+0x2c0>
 80028ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028be:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80029d0 <process_input+0x2c8>
 80028c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028c6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80028ca:	ee17 3a90 	vmov	r3, s15
 80028ce:	643b      	str	r3, [r7, #64]	@ 0x40
//			    int textX = x + SQWIDTH / 2 - 40;
//			    int textY = y + SQHEIGHT / 2 - 15;
				RA8875_draw_fill_rect(x, y, SQWIDTH, SQHEIGHT, RA8875_GREEN);
 80028d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028d2:	b218      	sxth	r0, r3
 80028d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028d6:	b219      	sxth	r1, r3
 80028d8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	234e      	movs	r3, #78	@ 0x4e
 80028e0:	22b6      	movs	r2, #182	@ 0xb6
 80028e2:	f7fe fc70 	bl	80011c6 <RA8875_draw_fill_rect>
				HAL_Delay(50);
 80028e6:	2032      	movs	r0, #50	@ 0x32
 80028e8:	f002 f822 	bl	8004930 <HAL_Delay>
//				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
//				RA8875_text_cursor_position(textX, textY);
//				RA8875_text_scale(1);
//				RA8875_text_write(word_matrix[key].word, 6);
//				RA8875_graphic_mode();
				if(hgame->guess_remain > 0) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 32dc 	ldrb.w	r3, [r3, #732]	@ 0x2dc
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <process_input+0x1f8>
					hgame->picked = key;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
					  game_matrix(hgame);
					}
					HAL_Delay(100);
				}
			}
			break;
 80028fe:	e273      	b.n	8002de8 <process_input+0x6e0>
				else if(hgame->guess_remain == 0) {
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 32dc 	ldrb.w	r3, [r3, #732]	@ 0x2dc
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 826e 	bne.w	8002de8 <process_input+0x6e0>
					int guess_list[2] = {hgame->picked, key};
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
					int gt[2] = {hgame->index0, hgame->index1};
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 8002926:	623b      	str	r3, [r7, #32]
					calc_score(hgame, guess_list, gt);
 8002928:	f107 021c 	add.w	r2, r7, #28
 800292c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fe68 	bl	8003608 <calc_score>
					sprintf(buffer, "Score: %02d", hgame->score);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4929      	ldr	r1, [pc, #164]	@ (80029e8 <process_input+0x2e0>)
 8002944:	4618      	mov	r0, r3
 8002946:	f00c fbbb 	bl	800f0c0 <siprintf>
					RA8875_text_mode();
 800294a:	f7fe fdd3 	bl	80014f4 <RA8875_text_mode>
					RA8875_text_cursor_position(CENTER_X+190, 50);
 800294e:	2132      	movs	r1, #50	@ 0x32
 8002950:	f240 204e 	movw	r0, #590	@ 0x24e
 8002954:	f7fe fdf3 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002958:	211f      	movs	r1, #31
 800295a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800295e:	f7fe fe2c 	bl	80015ba <RA8875_text_color>
					RA8875_text_scale(1);
 8002962:	2001      	movs	r0, #1
 8002964:	f7fe fe86 	bl	8001674 <RA8875_text_scale>
					RA8875_text_write(buffer, 10);
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	210a      	movs	r1, #10
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe feaa 	bl	80016c8 <RA8875_text_write>
					RA8875_graphic_mode();
 8002974:	f7fe f818 	bl	80009a8 <RA8875_graphic_mode>
					hgame->picked = -1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f04f 32ff 	mov.w	r2, #4294967295
 800297e:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
					hgame->guess_remain = 2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
					hgame->round_num++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
					if(hgame->round_num > 10) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 800299e:	2b0a      	cmp	r3, #10
 80029a0:	dd0a      	ble.n	80029b8 <process_input+0x2b0>
					  hgame->game_timer = 60;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	223c      	movs	r2, #60	@ 0x3c
 80029a6:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc
					  HAL_TIM_Base_Stop_IT(&htim6);
 80029aa:	4810      	ldr	r0, [pc, #64]	@ (80029ec <process_input+0x2e4>)
 80029ac:	f009 f844 	bl	800ba38 <HAL_TIM_Base_Stop_IT>
					  end_game(hgame);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fa23 	bl	8002dfc <end_game>
 80029b6:	e002      	b.n	80029be <process_input+0x2b6>
					  game_matrix(hgame);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fd45 	bl	8002448 <game_matrix>
					HAL_Delay(100);
 80029be:	2064      	movs	r0, #100	@ 0x64
 80029c0:	f001 ffb6 	bl	8004930 <HAL_Delay>
			break;
 80029c4:	e210      	b.n	8002de8 <process_input+0x6e0>
 80029c6:	bf00      	nop
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40562000 	.word	0x40562000
 80029d0:	00000000 	.word	0x00000000
 80029d4:	405d0000 	.word	0x405d0000
 80029d8:	08010f44 	.word	0x08010f44
 80029dc:	08010ec4 	.word	0x08010ec4
 80029e0:	08010ecc 	.word	0x08010ecc
 80029e4:	66666667 	.word	0x66666667
 80029e8:	08010eec 	.word	0x08010eec
 80029ec:	24000298 	.word	0x24000298
		case GAME_MODE_END:
			if(key == 4) {
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d136      	bne.n	8002a64 <process_input+0x35c>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_BLACK);
 80029f6:	2300      	movs	r3, #0
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	230a      	movs	r3, #10
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2346      	movs	r3, #70	@ 0x46
 8002a00:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a04:	21cd      	movs	r1, #205	@ 0xcd
 8002a06:	20fa      	movs	r0, #250	@ 0xfa
 8002a08:	f7fe fc92 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_GREEN);
 8002a0c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	2307      	movs	r3, #7
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2332      	movs	r3, #50	@ 0x32
 8002a18:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002a1c:	21d7      	movs	r1, #215	@ 0xd7
 8002a1e:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002a22:	f7fe fc85 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 8002a26:	f7fe fd65 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002a2a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe fdc3 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-23);
 8002a34:	21d9      	movs	r1, #217	@ 0xd9
 8002a36:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8002a3a:	f7fe fd80 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 8002a3e:	2002      	movs	r0, #2
 8002a40:	f7fe fe18 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Play Again", 10);
 8002a44:	210a      	movs	r1, #10
 8002a46:	48bb      	ldr	r0, [pc, #748]	@ (8002d34 <process_input+0x62c>)
 8002a48:	f7fe fe3e 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 8002a4c:	f7fd ffac 	bl	80009a8 <RA8875_graphic_mode>

				HAL_Delay(250);
 8002a50:	20fa      	movs	r0, #250	@ 0xfa
 8002a52:	f001 ff6d 	bl	8004930 <HAL_Delay>
				title_screen(hgame);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff f878 	bl	8001b4c <title_screen>
				game_matrix(hgame);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fcf3 	bl	8002448 <game_matrix>
				RA8875_graphic_mode();

				HAL_Delay(250);
				show_menu(hgame);
			}
			break;
 8002a62:	e1c3      	b.n	8002dec <process_input+0x6e4>
			else if(key == 9) {
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b09      	cmp	r3, #9
 8002a68:	f040 81c0 	bne.w	8002dec <process_input+0x6e4>
				RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_BLACK);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	230a      	movs	r3, #10
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2346      	movs	r3, #70	@ 0x46
 8002a76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a7a:	f240 1127 	movw	r1, #295	@ 0x127
 8002a7e:	20fa      	movs	r0, #250	@ 0xfa
 8002a80:	f7fe fc56 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_GREEN);
 8002a84:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2332      	movs	r3, #50	@ 0x32
 8002a90:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002a94:	f240 1131 	movw	r1, #305	@ 0x131
 8002a98:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002a9c:	f7fe fc48 	bl	8001330 <RA8875_draw_fill_round_rect>
				RA8875_text_mode();
 8002aa0:	f7fe fd28 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002aa4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fe fd86 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 8002aae:	f240 1131 	movw	r1, #305	@ 0x131
 8002ab2:	f240 1063 	movw	r0, #355	@ 0x163
 8002ab6:	f7fe fd42 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 8002aba:	2002      	movs	r0, #2
 8002abc:	f7fe fdda 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Menu", 5);
 8002ac0:	2105      	movs	r1, #5
 8002ac2:	489d      	ldr	r0, [pc, #628]	@ (8002d38 <process_input+0x630>)
 8002ac4:	f7fe fe00 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 8002ac8:	f7fd ff6e 	bl	80009a8 <RA8875_graphic_mode>
				HAL_Delay(250);
 8002acc:	20fa      	movs	r0, #250	@ 0xfa
 8002ace:	f001 ff2f 	bl	8004930 <HAL_Delay>
				show_menu(hgame);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fa6e 	bl	8001fb4 <show_menu>
			break;
 8002ad8:	e188      	b.n	8002dec <process_input+0x6e4>
		case GAME_MODE_SETTINGS:
			if(key == 4) {
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d13f      	bne.n	8002b60 <process_input+0x458>
				RA8875_draw_fill_rect(10, CENTER_Y-40, 280, 50, RA8875_GREEN);
 8002ae0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2332      	movs	r3, #50	@ 0x32
 8002ae8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002aec:	21c8      	movs	r1, #200	@ 0xc8
 8002aee:	200a      	movs	r0, #10
 8002af0:	f7fe fb69 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_text_mode();
 8002af4:	f7fe fcfe 	bl	80014f4 <RA8875_text_mode>
				RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002af8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fe fd5c 	bl	80015ba <RA8875_text_color>
				RA8875_text_cursor_position(30, CENTER_Y-40);
 8002b02:	21c8      	movs	r1, #200	@ 0xc8
 8002b04:	201e      	movs	r0, #30
 8002b06:	f7fe fd1a 	bl	800153e <RA8875_text_cursor_position>
				RA8875_text_scale(2);
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f7fe fdb2 	bl	8001674 <RA8875_text_scale>
				RA8875_text_write("Brightness", 10);
 8002b10:	210a      	movs	r1, #10
 8002b12:	488a      	ldr	r0, [pc, #552]	@ (8002d3c <process_input+0x634>)
 8002b14:	f7fe fdd8 	bl	80016c8 <RA8875_text_write>
				RA8875_graphic_mode();
 8002b18:	f7fd ff46 	bl	80009a8 <RA8875_graphic_mode>

				hgame->set_b = 1;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
				RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-10, 256, 25, RA8875_YELLOW);
 8002b24:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2319      	movs	r3, #25
 8002b2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b30:	21e6      	movs	r1, #230	@ 0xe6
 8002b32:	f240 10a9 	movw	r0, #425	@ 0x1a9
 8002b36:	f7fe fb46 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25+(hgame->current_b), CENTER_Y-16, 10, 37, RA8875_BLACK);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f203 13a9 	addw	r3, r3, #425	@ 0x1a9
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	b218      	sxth	r0, r3
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	2325      	movs	r3, #37	@ 0x25
 8002b50:	220a      	movs	r2, #10
 8002b52:	21e0      	movs	r1, #224	@ 0xe0
 8002b54:	f7fe fb37 	bl	80011c6 <RA8875_draw_fill_rect>

				HAL_Delay(250);
 8002b58:	20fa      	movs	r0, #250	@ 0xfa
 8002b5a:	f001 fee9 	bl	8004930 <HAL_Delay>
				RA8875_pwm1_out(hgame->current_b);
				RA8875_draw_fill_rect(CENTER_X+15, CENTER_Y-16, 280, 40, 0xc65d);
				RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-10, 256, 25, RA8875_YELLOW);
				RA8875_draw_fill_rect(CENTER_X+25+(hgame->current_b), CENTER_Y-16, 10, 37, RA8875_BLACK);
			}
			break;
 8002b5e:	e147      	b.n	8002df0 <process_input+0x6e8>
			else if(key == 9) {
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b09      	cmp	r3, #9
 8002b64:	f040 809f 	bne.w	8002ca6 <process_input+0x59e>
				if(hgame->set_b) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d063      	beq.n	8002c3a <process_input+0x532>
					hgame->set_b = 0;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
					RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-16, 280, 40, 0xc65d);
 8002b7a:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2328      	movs	r3, #40	@ 0x28
 8002b82:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002b86:	21e0      	movs	r1, #224	@ 0xe0
 8002b88:	f240 10a9 	movw	r0, #425	@ 0x1a9
 8002b8c:	f7fe fb1b 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_draw_fill_rect(10, CENTER_Y-40, 280, 150, RA8875_BLACK);
 8002b90:	2300      	movs	r3, #0
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2396      	movs	r3, #150	@ 0x96
 8002b96:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002b9a:	21c8      	movs	r1, #200	@ 0xc8
 8002b9c:	200a      	movs	r0, #10
 8002b9e:	f7fe fb12 	bl	80011c6 <RA8875_draw_fill_rect>
					RA8875_text_mode();
 8002ba2:	f7fe fca7 	bl	80014f4 <RA8875_text_mode>
					RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002bac:	f7fe fd05 	bl	80015ba <RA8875_text_color>
					RA8875_text_cursor_position(30, CENTER_Y-40);
 8002bb0:	21c8      	movs	r1, #200	@ 0xc8
 8002bb2:	201e      	movs	r0, #30
 8002bb4:	f7fe fcc3 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_scale(2);
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f7fe fd5b 	bl	8001674 <RA8875_text_scale>
					RA8875_text_write("Brightness", 10);
 8002bbe:	210a      	movs	r1, #10
 8002bc0:	485e      	ldr	r0, [pc, #376]	@ (8002d3c <process_input+0x634>)
 8002bc2:	f7fe fd81 	bl	80016c8 <RA8875_text_write>
					RA8875_text_cursor_position(80, CENTER_Y+10);
 8002bc6:	21fa      	movs	r1, #250	@ 0xfa
 8002bc8:	2050      	movs	r0, #80	@ 0x50
 8002bca:	f7fe fcb8 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_write("Volume", 6);
 8002bce:	2106      	movs	r1, #6
 8002bd0:	485b      	ldr	r0, [pc, #364]	@ (8002d40 <process_input+0x638>)
 8002bd2:	f7fe fd79 	bl	80016c8 <RA8875_text_write>
					RA8875_text_cursor_position(30, CENTER_Y+60);
 8002bd6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002bda:	201e      	movs	r0, #30
 8002bdc:	f7fe fcaf 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_write("Difficulty", 10);
 8002be0:	210a      	movs	r1, #10
 8002be2:	4858      	ldr	r0, [pc, #352]	@ (8002d44 <process_input+0x63c>)
 8002be4:	f7fe fd70 	bl	80016c8 <RA8875_text_write>
					sprintf(buffer, "%d", ((hgame->current_b)*100 + 127)/255);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002bee:	2264      	movs	r2, #100	@ 0x64
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	337f      	adds	r3, #127	@ 0x7f
 8002bf6:	4a54      	ldr	r2, [pc, #336]	@ (8002d48 <process_input+0x640>)
 8002bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8002bfc:	441a      	add	r2, r3
 8002bfe:	11d2      	asrs	r2, r2, #7
 8002c00:	17db      	asrs	r3, r3, #31
 8002c02:	1ad2      	subs	r2, r2, r3
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	4950      	ldr	r1, [pc, #320]	@ (8002d4c <process_input+0x644>)
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f00c fa58 	bl	800f0c0 <siprintf>
					RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002c10:	211f      	movs	r1, #31
 8002c12:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c16:	f7fe fcd0 	bl	80015ba <RA8875_text_color>
					RA8875_text_cursor_position(10, 55);
 8002c1a:	2137      	movs	r1, #55	@ 0x37
 8002c1c:	200a      	movs	r0, #10
 8002c1e:	f7fe fc8e 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_scale(1);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7fe fd26 	bl	8001674 <RA8875_text_scale>
					RA8875_text_write(buffer, 3);
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	2103      	movs	r1, #3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fd4a 	bl	80016c8 <RA8875_text_write>
					RA8875_graphic_mode();
 8002c34:	f7fd feb8 	bl	80009a8 <RA8875_graphic_mode>
			break;
 8002c38:	e0da      	b.n	8002df0 <process_input+0x6e8>
					RA8875_draw_fill_round_rect(SCREEN_WIDTH-210, SCREEN_HEIGHT-90, 180, 70, 10, RA8875_BLACK);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	230a      	movs	r3, #10
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2346      	movs	r3, #70	@ 0x46
 8002c44:	22b4      	movs	r2, #180	@ 0xb4
 8002c46:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8002c4a:	f240 204e 	movw	r0, #590	@ 0x24e
 8002c4e:	f7fe fb6f 	bl	8001330 <RA8875_draw_fill_round_rect>
					RA8875_draw_fill_round_rect(SCREEN_WIDTH-200, SCREEN_HEIGHT-80, 160, 50, 7, RA8875_GREEN);
 8002c52:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	2307      	movs	r3, #7
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2332      	movs	r3, #50	@ 0x32
 8002c5e:	22a0      	movs	r2, #160	@ 0xa0
 8002c60:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c64:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002c68:	f7fe fb62 	bl	8001330 <RA8875_draw_fill_round_rect>
					RA8875_text_mode();
 8002c6c:	f7fe fc42 	bl	80014f4 <RA8875_text_mode>
					RA8875_text_color (RA8875_BLACK, RA8875_GREEN);
 8002c70:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fca0 	bl	80015ba <RA8875_text_color>
					RA8875_text_cursor_position(SCREEN_WIDTH-165, SCREEN_HEIGHT-80);
 8002c7a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c7e:	f240 207b 	movw	r0, #635	@ 0x27b
 8002c82:	f7fe fc5c 	bl	800153e <RA8875_text_cursor_position>
					RA8875_text_scale(2);
 8002c86:	2002      	movs	r0, #2
 8002c88:	f7fe fcf4 	bl	8001674 <RA8875_text_scale>
					RA8875_text_write("Back", 5);
 8002c8c:	2105      	movs	r1, #5
 8002c8e:	4830      	ldr	r0, [pc, #192]	@ (8002d50 <process_input+0x648>)
 8002c90:	f7fe fd1a 	bl	80016c8 <RA8875_text_write>
					RA8875_graphic_mode();
 8002c94:	f7fd fe88 	bl	80009a8 <RA8875_graphic_mode>
					HAL_Delay(250);
 8002c98:	20fa      	movs	r0, #250	@ 0xfa
 8002c9a:	f001 fe49 	bl	8004930 <HAL_Delay>
					show_menu(hgame);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff f988 	bl	8001fb4 <show_menu>
			break;
 8002ca4:	e0a4      	b.n	8002df0 <process_input+0x6e8>
			else if((key == 19) && hgame->set_b) {
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b13      	cmp	r3, #19
 8002caa:	d153      	bne.n	8002d54 <process_input+0x64c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d04e      	beq.n	8002d54 <process_input+0x64c>
				hgame->current_b += 8;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002cbc:	f103 0208 	add.w	r2, r3, #8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
				if (hgame->current_b > 255) {
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002ccc:	2bff      	cmp	r3, #255	@ 0xff
 8002cce:	dd03      	ble.n	8002cd8 <process_input+0x5d0>
					hgame->current_b = 255;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	22ff      	movs	r2, #255	@ 0xff
 8002cd4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
				RA8875_pwm1_out(hgame->current_b);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fd21 	bl	8001728 <RA8875_pwm1_out>
				RA8875_draw_fill_rect(CENTER_X+15, CENTER_Y-16, 280, 40, 0xc65d);
 8002ce6:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2328      	movs	r3, #40	@ 0x28
 8002cee:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002cf2:	21e0      	movs	r1, #224	@ 0xe0
 8002cf4:	f240 109f 	movw	r0, #415	@ 0x19f
 8002cf8:	f7fe fa65 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-10, 256, 25, RA8875_YELLOW);
 8002cfc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2319      	movs	r3, #25
 8002d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d08:	21e6      	movs	r1, #230	@ 0xe6
 8002d0a:	f240 10a9 	movw	r0, #425	@ 0x1a9
 8002d0e:	f7fe fa5a 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25+(hgame->current_b), CENTER_Y-16, 10, 37, RA8875_BLACK);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f203 13a9 	addw	r3, r3, #425	@ 0x1a9
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b218      	sxth	r0, r3
 8002d22:	2300      	movs	r3, #0
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2325      	movs	r3, #37	@ 0x25
 8002d28:	220a      	movs	r2, #10
 8002d2a:	21e0      	movs	r1, #224	@ 0xe0
 8002d2c:	f7fe fa4b 	bl	80011c6 <RA8875_draw_fill_rect>
			break;
 8002d30:	e05e      	b.n	8002df0 <process_input+0x6e8>
 8002d32:	bf00      	nop
 8002d34:	08010f08 	.word	0x08010f08
 8002d38:	08010f14 	.word	0x08010f14
 8002d3c:	08010f1c 	.word	0x08010f1c
 8002d40:	08010f28 	.word	0x08010f28
 8002d44:	08010f30 	.word	0x08010f30
 8002d48:	80808081 	.word	0x80808081
 8002d4c:	08010ee8 	.word	0x08010ee8
 8002d50:	08010f3c 	.word	0x08010f3c
			else if((key == 14) && hgame->set_b) {
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b0e      	cmp	r3, #14
 8002d58:	d14a      	bne.n	8002df0 <process_input+0x6e8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d045      	beq.n	8002df0 <process_input+0x6e8>
				hgame->current_b -= 8;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002d6a:	f1a3 0208 	sub.w	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
				if (hgame->current_b < 10) {
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	dc03      	bgt.n	8002d86 <process_input+0x67e>
					hgame->current_b = 10;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	220a      	movs	r2, #10
 8002d82:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
				RA8875_pwm1_out(hgame->current_b);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fcca 	bl	8001728 <RA8875_pwm1_out>
				RA8875_draw_fill_rect(CENTER_X+15, CENTER_Y-16, 280, 40, 0xc65d);
 8002d94:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2328      	movs	r3, #40	@ 0x28
 8002d9c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002da0:	21e0      	movs	r1, #224	@ 0xe0
 8002da2:	f240 109f 	movw	r0, #415	@ 0x19f
 8002da6:	f7fe fa0e 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25, CENTER_Y-10, 256, 25, RA8875_YELLOW);
 8002daa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2319      	movs	r3, #25
 8002db2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002db6:	21e6      	movs	r1, #230	@ 0xe6
 8002db8:	f240 10a9 	movw	r0, #425	@ 0x1a9
 8002dbc:	f7fe fa03 	bl	80011c6 <RA8875_draw_fill_rect>
				RA8875_draw_fill_rect(CENTER_X+25+(hgame->current_b), CENTER_Y-16, 10, 37, RA8875_BLACK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f203 13a9 	addw	r3, r3, #425	@ 0x1a9
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	b218      	sxth	r0, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2325      	movs	r3, #37	@ 0x25
 8002dd6:	220a      	movs	r2, #10
 8002dd8:	21e0      	movs	r1, #224	@ 0xe0
 8002dda:	f7fe f9f4 	bl	80011c6 <RA8875_draw_fill_rect>
			break;
 8002dde:	e007      	b.n	8002df0 <process_input+0x6e8>
			break;
 8002de0:	bf00      	nop
 8002de2:	e006      	b.n	8002df2 <process_input+0x6ea>
			break;
 8002de4:	bf00      	nop
 8002de6:	e004      	b.n	8002df2 <process_input+0x6ea>
			break;
 8002de8:	bf00      	nop
 8002dea:	e002      	b.n	8002df2 <process_input+0x6ea>
			break;
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <process_input+0x6ea>
			break;
 8002df0:	bf00      	nop
	}
}
 8002df2:	bf00      	nop
 8002df4:	3748      	adds	r7, #72	@ 0x48
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfa:	bf00      	nop

08002dfc <end_game>:

void end_game(Game_HandleTypeDef *hgame) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af04      	add	r7, sp, #16
 8002e02:	6078      	str	r0, [r7, #4]
	hgame->mode = GAME_MODE_END;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

	HAL_Delay(500);
 8002e0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e10:	f001 fd8e 	bl	8004930 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 8002e14:	201f      	movs	r0, #31
 8002e16:	f7fe fa03 	bl	8001220 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8002e1a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	230a      	movs	r3, #10
 8002e22:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e26:	215a      	movs	r1, #90	@ 0x5a
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fe f9cc 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	230a      	movs	r3, #10
 8002e34:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e38:	2164      	movs	r1, #100	@ 0x64
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe f9c3 	bl	80011c6 <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0xc65d);
 8002e40:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002e44:	9302      	str	r3, [sp, #8]
 8002e46:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002e56:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002e5a:	21b4      	movs	r1, #180	@ 0xb4
 8002e5c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002e60:	f7fe fa1c 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 8002e64:	231f      	movs	r3, #31
 8002e66:	9302      	str	r3, [sp, #8]
 8002e68:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002e78:	f240 22da 	movw	r2, #730	@ 0x2da
 8002e7c:	21b4      	movs	r1, #180	@ 0xb4
 8002e7e:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8002e82:	f7fe fa0b 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 8002e86:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e8a:	9302      	str	r3, [sp, #8]
 8002e8c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	f240 238a 	movw	r3, #650	@ 0x28a
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002e9c:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8002ea0:	21b4      	movs	r1, #180	@ 0xb4
 8002ea2:	f240 208a 	movw	r0, #650	@ 0x28a
 8002ea6:	f7fe f9f9 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 8002eaa:	231f      	movs	r3, #31
 8002eac:	9302      	str	r3, [sp, #8]
 8002eae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	f240 2376 	movw	r3, #630	@ 0x276
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002ebe:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8002ec2:	21b4      	movs	r1, #180	@ 0xb4
 8002ec4:	f240 2076 	movw	r0, #630	@ 0x276
 8002ec8:	f7fe f9e8 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0xc65d);
 8002ecc:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	2346      	movs	r3, #70	@ 0x46
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002ee0:	2214      	movs	r2, #20
 8002ee2:	21b4      	movs	r1, #180	@ 0xb4
 8002ee4:	2046      	movs	r0, #70	@ 0x46
 8002ee6:	f7fe f9d9 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 8002eea:	231f      	movs	r3, #31
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	235a      	movs	r3, #90	@ 0x5a
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002efc:	2228      	movs	r2, #40	@ 0x28
 8002efe:	21b4      	movs	r1, #180	@ 0xb4
 8002f00:	205a      	movs	r0, #90	@ 0x5a
 8002f02:	f7fe f9cb 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 8002f06:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002f0a:	9302      	str	r3, [sp, #8]
 8002f0c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	2378      	movs	r3, #120	@ 0x78
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002f1a:	2246      	movs	r2, #70	@ 0x46
 8002f1c:	21b4      	movs	r1, #180	@ 0xb4
 8002f1e:	2078      	movs	r0, #120	@ 0x78
 8002f20:	f7fe f9bc 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 8002f24:	231f      	movs	r3, #31
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	238c      	movs	r3, #140	@ 0x8c
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002f36:	225a      	movs	r2, #90	@ 0x5a
 8002f38:	21b4      	movs	r1, #180	@ 0xb4
 8002f3a:	208c      	movs	r0, #140	@ 0x8c
 8002f3c:	f7fe f9ae 	bl	800129c <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0xc65d);
 8002f40:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2378      	movs	r3, #120	@ 0x78
 8002f48:	22c8      	movs	r2, #200	@ 0xc8
 8002f4a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8002f4e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002f52:	f7fe f9cb 	bl	80012ec <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0xc65d);//0deg
 8002f56:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	f240 237e 	movw	r3, #638	@ 0x27e
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002f6c:	f240 224e 	movw	r2, #590	@ 0x24e
 8002f70:	21fa      	movs	r1, #250	@ 0xfa
 8002f72:	f240 204e 	movw	r0, #590	@ 0x24e
 8002f76:	f7fe f991 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0xc65d);//180deg
 8002f7a:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002f7e:	9302      	str	r3, [sp, #8]
 8002f80:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	23ae      	movs	r3, #174	@ 0xae
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002f8e:	22d4      	movs	r2, #212	@ 0xd4
 8002f90:	21fa      	movs	r1, #250	@ 0xfa
 8002f92:	20d4      	movs	r0, #212	@ 0xd4
 8002f94:	f7fe f982 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0xc65d);//74deg
 8002f98:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002f9c:	9302      	str	r3, [sp, #8]
 8002f9e:	2382      	movs	r3, #130	@ 0x82
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	f240 13db 	movw	r3, #475	@ 0x1db
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	23c0      	movs	r3, #192	@ 0xc0
 8002faa:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8002fae:	21af      	movs	r1, #175	@ 0xaf
 8002fb0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002fb4:	f7fe f972 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0xc65d);//106deg
 8002fb8:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002fbc:	9302      	str	r3, [sp, #8]
 8002fbe:	2382      	movs	r3, #130	@ 0x82
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	f240 1345 	movw	r3, #325	@ 0x145
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	23c0      	movs	r3, #192	@ 0xc0
 8002fca:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8002fce:	21af      	movs	r1, #175	@ 0xaf
 8002fd0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002fd4:	f7fe f962 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0xc65d);//-74deg
 8002fd8:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8002fdc:	9302      	str	r3, [sp, #8]
 8002fde:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8002fee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002ff2:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8002ff6:	f240 200a 	movw	r0, #522	@ 0x20a
 8002ffa:	f7fe f94f 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0xc65d);//-106deg
 8002ffe:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003002:	9302      	str	r3, [sp, #8]
 8003004:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8003014:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003018:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800301c:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8003020:	f7fe f93c 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0xc65d);//32deg
 8003024:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	23be      	movs	r3, #190	@ 0xbe
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	23c0      	movs	r3, #192	@ 0xc0
 8003036:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 800303a:	21fa      	movs	r1, #250	@ 0xfa
 800303c:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8003040:	f7fe f92c 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0xc65d);//122deg
 8003044:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003048:	9302      	str	r3, [sp, #8]
 800304a:	23be      	movs	r3, #190	@ 0xbe
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	23dc      	movs	r3, #220	@ 0xdc
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	23c0      	movs	r3, #192	@ 0xc0
 8003054:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8003058:	21fa      	movs	r1, #250	@ 0xfa
 800305a:	20d4      	movs	r0, #212	@ 0xd4
 800305c:	f7fe f91e 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0xc65d);//-32deg
 8003060:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 8003064:	9302      	str	r3, [sp, #8]
 8003066:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8003076:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 800307a:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800307e:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8003082:	f7fe f90b 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0xc65d);//-122deg
 8003086:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 800308a:	9302      	str	r3, [sp, #8]
 800308c:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800309c:	22d4      	movs	r2, #212	@ 0xd4
 800309e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80030a2:	20dc      	movs	r0, #220	@ 0xdc
 80030a4:	f7fe f8fa 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0xc65d);//stem
 80030a8:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	237c      	movs	r3, #124	@ 0x7c
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80030bc:	22e8      	movs	r2, #232	@ 0xe8
 80030be:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80030c2:	20ca      	movs	r0, #202	@ 0xca
 80030c4:	f7fe f8ea 	bl	800129c <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 80030c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	230a      	movs	r3, #10
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2346      	movs	r3, #70	@ 0x46
 80030d4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030d8:	21cd      	movs	r1, #205	@ 0xcd
 80030da:	20fa      	movs	r0, #250	@ 0xfa
 80030dc:	f7fe f928 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 80030e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	230a      	movs	r3, #10
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2346      	movs	r3, #70	@ 0x46
 80030ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030f0:	f240 1127 	movw	r1, #295	@ 0x127
 80030f4:	20fa      	movs	r0, #250	@ 0xfa
 80030f6:	f7fe f91b 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 80030fa:	2300      	movs	r3, #0
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2307      	movs	r3, #7
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2332      	movs	r3, #50	@ 0x32
 8003104:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003108:	21d7      	movs	r1, #215	@ 0xd7
 800310a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800310e:	f7fe f90f 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 8003112:	2300      	movs	r3, #0
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	2307      	movs	r3, #7
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	2332      	movs	r3, #50	@ 0x32
 800311c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003120:	f240 1131 	movw	r1, #305	@ 0x131
 8003124:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8003128:	f7fe f902 	bl	8001330 <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 800312c:	f7fe f9e2 	bl	80014f4 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8003130:	2100      	movs	r1, #0
 8003132:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8003136:	f7fe fa40 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 800313a:	21d7      	movs	r1, #215	@ 0xd7
 800313c:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8003140:	f7fe f9fd 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8003144:	2002      	movs	r0, #2
 8003146:	f7fe fa95 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 800314a:	210a      	movs	r1, #10
 800314c:	4862      	ldr	r0, [pc, #392]	@ (80032d8 <end_game+0x4dc>)
 800314e:	f7fe fabb 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 8003152:	f240 1131 	movw	r1, #305	@ 0x131
 8003156:	f240 1063 	movw	r0, #355	@ 0x163
 800315a:	f7fe f9f0 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 800315e:	2104      	movs	r1, #4
 8003160:	485e      	ldr	r0, [pc, #376]	@ (80032dc <end_game+0x4e0>)
 8003162:	f7fe fab1 	bl	80016c8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 8003166:	211f      	movs	r1, #31
 8003168:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800316c:	f7fe fa25 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-143, 20);
 8003170:	2114      	movs	r1, #20
 8003172:	f240 1001 	movw	r0, #257	@ 0x101
 8003176:	f7fe f9e2 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 800317a:	2003      	movs	r0, #3
 800317c:	f7fe fa7a 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 8003180:	2104      	movs	r1, #4
 8003182:	4857      	ldr	r0, [pc, #348]	@ (80032e0 <end_game+0x4e4>)
 8003184:	f7fe faa0 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 8003188:	2114      	movs	r1, #20
 800318a:	f240 1095 	movw	r0, #405	@ 0x195
 800318e:	f7fe f9d6 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 8003192:	2104      	movs	r1, #4
 8003194:	4853      	ldr	r0, [pc, #332]	@ (80032e4 <end_game+0x4e8>)
 8003196:	f7fe fa97 	bl	80016c8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 800319a:	211f      	movs	r1, #31
 800319c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80031a0:	f7fe fa0b 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 80031a4:	2100      	movs	r1, #0
 80031a6:	200a      	movs	r0, #10
 80031a8:	f7fe f9c9 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 80031ac:	2001      	movs	r0, #1
 80031ae:	f7fe fa61 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 80031b2:	2106      	movs	r1, #6
 80031b4:	484c      	ldr	r0, [pc, #304]	@ (80032e8 <end_game+0x4ec>)
 80031b6:	f7fe fa87 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 80031ba:	2100      	movs	r1, #0
 80031bc:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 80031c0:	f7fe f9bd 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 80031c4:	210b      	movs	r1, #11
 80031c6:	4849      	ldr	r0, [pc, #292]	@ (80032ec <end_game+0x4f0>)
 80031c8:	f7fe fa7e 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 80031cc:	2137      	movs	r1, #55	@ 0x37
 80031ce:	200a      	movs	r0, #10
 80031d0:	f7fe f9b5 	bl	800153e <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%02d", hgame->score);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	4944      	ldr	r1, [pc, #272]	@ (80032f0 <end_game+0x4f4>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f00b ff6d 	bl	800f0c0 <siprintf>
	RA8875_text_write(buffer, 3);
 80031e6:	f107 030c 	add.w	r3, r7, #12
 80031ea:	2103      	movs	r1, #3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe fa6b 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 80031f2:	2137      	movs	r1, #55	@ 0x37
 80031f4:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 80031f8:	f7fe f9a1 	bl	800153e <RA8875_text_cursor_position>
	if(hgame->score > hgame->hi_score) hgame->hi_score = hgame->score;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8003208:	429a      	cmp	r2, r3
 800320a:	dd05      	ble.n	8003218 <end_game+0x41c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
	sprintf(buffer, "%02d", hgame->hi_score);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 22e4 	ldr.w	r2, [r3, #740]	@ 0x2e4
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	4933      	ldr	r1, [pc, #204]	@ (80032f0 <end_game+0x4f4>)
 8003224:	4618      	mov	r0, r3
 8003226:	f00b ff4b 	bl	800f0c0 <siprintf>
	RA8875_text_write(buffer, 3);
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	2103      	movs	r1, #3
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe fa49 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 8003236:	f7fd fbb7 	bl	80009a8 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 800323a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	2332      	movs	r3, #50	@ 0x32
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	23df      	movs	r3, #223	@ 0xdf
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2332      	movs	r3, #50	@ 0x32
 800324a:	22ee      	movs	r2, #238	@ 0xee
 800324c:	210a      	movs	r1, #10
 800324e:	20e7      	movs	r0, #231	@ 0xe7
 8003250:	f7fe f824 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 8003254:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	2332      	movs	r3, #50	@ 0x32
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	23e6      	movs	r3, #230	@ 0xe6
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2332      	movs	r3, #50	@ 0x32
 8003264:	22f5      	movs	r2, #245	@ 0xf5
 8003266:	2155      	movs	r1, #85	@ 0x55
 8003268:	20ee      	movs	r0, #238	@ 0xee
 800326a:	f7fe f817 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 800326e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003272:	9302      	str	r3, [sp, #8]
 8003274:	2332      	movs	r3, #50	@ 0x32
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	f240 2337 	movw	r3, #567	@ 0x237
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2332      	movs	r3, #50	@ 0x32
 8003280:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8003284:	210a      	movs	r1, #10
 8003286:	f240 202f 	movw	r0, #559	@ 0x22f
 800328a:	f7fe f807 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 800328e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003292:	9302      	str	r3, [sp, #8]
 8003294:	2332      	movs	r3, #50	@ 0x32
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2332      	movs	r3, #50	@ 0x32
 80032a0:	f240 2221 	movw	r2, #545	@ 0x221
 80032a4:	2155      	movs	r1, #85	@ 0x55
 80032a6:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80032aa:	f7fd fff7 	bl	800129c <RA8875_draw_fill_triangle>

	hgame->score = 0;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	hgame->guess_remain = 2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
	hgame->picked = -1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
	hgame->round_num = 1;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8

	return;
 80032d0:	bf00      	nop
}
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	08010f08 	.word	0x08010f08
 80032dc:	08010f14 	.word	0x08010f14
 80032e0:	08010f58 	.word	0x08010f58
 80032e4:	08010f60 	.word	0x08010f60
 80032e8:	08010f68 	.word	0x08010f68
 80032ec:	08010f70 	.word	0x08010f70
 80032f0:	08010f7c 	.word	0x08010f7c

080032f4 <settings>:

void settings(Game_HandleTypeDef *hgame) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af04      	add	r7, sp, #16
 80032fa:	6078      	str	r0, [r7, #4]
	hgame->mode = GAME_MODE_SETTINGS;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2203      	movs	r2, #3
 8003300:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0

	HAL_Delay(500);
 8003304:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003308:	f001 fb12 	bl	8004930 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 800330c:	201f      	movs	r0, #31
 800330e:	f7fd ff87 	bl	8001220 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8003312:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	230a      	movs	r3, #10
 800331a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800331e:	215a      	movs	r1, #90	@ 0x5a
 8003320:	2000      	movs	r0, #0
 8003322:	f7fd ff50 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8003326:	2300      	movs	r3, #0
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	230a      	movs	r3, #10
 800332c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003330:	2164      	movs	r1, #100	@ 0x64
 8003332:	2000      	movs	r0, #0
 8003334:	f7fd ff47 	bl	80011c6 <RA8875_draw_fill_rect>
	//buttons
	RA8875_draw_fill_rect(0, CENTER_Y-50, 300, 170, RA8875_WHITE);
 8003338:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	23aa      	movs	r3, #170	@ 0xaa
 8003340:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003344:	21be      	movs	r1, #190	@ 0xbe
 8003346:	2000      	movs	r0, #0
 8003348:	f7fd ff3d 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(10, CENTER_Y-40, 280, 50, RA8875_BLACK);
 800334c:	2300      	movs	r3, #0
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2332      	movs	r3, #50	@ 0x32
 8003352:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003356:	21c8      	movs	r1, #200	@ 0xc8
 8003358:	200a      	movs	r0, #10
 800335a:	f7fd ff34 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(10, CENTER_Y+10, 280, 50, RA8875_BLACK);
 800335e:	2300      	movs	r3, #0
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2332      	movs	r3, #50	@ 0x32
 8003364:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003368:	21fa      	movs	r1, #250	@ 0xfa
 800336a:	200a      	movs	r0, #10
 800336c:	f7fd ff2b 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(10, CENTER_Y+60, 280, 50, RA8875_BLACK);
 8003370:	2300      	movs	r3, #0
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	2332      	movs	r3, #50	@ 0x32
 8003376:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800337a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800337e:	200a      	movs	r0, #10
 8003380:	f7fd ff21 	bl	80011c6 <RA8875_draw_fill_rect>
	RA8875_draw_fill_round_rect(SCREEN_WIDTH-210, SCREEN_HEIGHT-90, 180, 70, 10, RA8875_WHITE);
 8003384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	230a      	movs	r3, #10
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2346      	movs	r3, #70	@ 0x46
 8003390:	22b4      	movs	r2, #180	@ 0xb4
 8003392:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8003396:	f240 204e 	movw	r0, #590	@ 0x24e
 800339a:	f7fd ffc9 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(SCREEN_WIDTH-200, SCREEN_HEIGHT-80, 160, 50, 7, RA8875_BLACK);
 800339e:	2300      	movs	r3, #0
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	2307      	movs	r3, #7
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	2332      	movs	r3, #50	@ 0x32
 80033a8:	22a0      	movs	r2, #160	@ 0xa0
 80033aa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80033ae:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80033b2:	f7fd ffbd 	bl	8001330 <RA8875_draw_fill_round_rect>
	RA8875_draw_hexagon(CENTER_X+200, CENTER_Y+10, 120, 0xc65d);
 80033b6:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80033ba:	2278      	movs	r2, #120	@ 0x78
 80033bc:	21fa      	movs	r1, #250	@ 0xfa
 80033be:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80033c2:	f7fd ffe1 	bl	8001388 <RA8875_draw_hexagon>
	RA8875_draw_hexagon(CENTER_X+100, CENTER_Y+10, 120, 0xc65d);
 80033c6:	f24c 635d 	movw	r3, #50781	@ 0xc65d
 80033ca:	2278      	movs	r2, #120	@ 0x78
 80033cc:	21fa      	movs	r1, #250	@ 0xfa
 80033ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033d2:	f7fd ffd9 	bl	8001388 <RA8875_draw_hexagon>
	//trapezoid
	RA8875_draw_fill_triangle(0, SCREEN_HEIGHT-100, 310, SCREEN_HEIGHT-95, 0, SCREEN_HEIGHT-30, RA8875_YELLOW);
 80033d6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80033da:	9302      	str	r3, [sp, #8]
 80033dc:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	2300      	movs	r3, #0
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	f240 1381 	movw	r3, #385	@ 0x181
 80033ea:	f44f 729b 	mov.w	r2, #310	@ 0x136
 80033ee:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd ff52 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(0, SCREEN_HEIGHT-100, 290, SCREEN_HEIGHT-100, 0, SCREEN_HEIGHT-50, RA8875_BLUE);
 80033f8:	231f      	movs	r3, #31
 80033fa:	9302      	str	r3, [sp, #8]
 80033fc:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	2300      	movs	r3, #0
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 800340a:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800340e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8003412:	2000      	movs	r0, #0
 8003414:	f7fd ff42 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(0, CENTER_Y-70, 310, CENTER_Y-75, 0, CENTER_Y-140, RA8875_YELLOW);
 8003418:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800341c:	9302      	str	r3, [sp, #8]
 800341e:	2364      	movs	r3, #100	@ 0x64
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2300      	movs	r3, #0
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	23a5      	movs	r3, #165	@ 0xa5
 8003428:	f44f 729b 	mov.w	r2, #310	@ 0x136
 800342c:	21aa      	movs	r1, #170	@ 0xaa
 800342e:	2000      	movs	r0, #0
 8003430:	f7fd ff34 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(0, CENTER_Y-70, 290, CENTER_Y-70, 0, CENTER_Y-120, RA8875_BLUE);
 8003434:	231f      	movs	r3, #31
 8003436:	9302      	str	r3, [sp, #8]
 8003438:	2378      	movs	r3, #120	@ 0x78
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	2300      	movs	r3, #0
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	23aa      	movs	r3, #170	@ 0xaa
 8003442:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8003446:	21aa      	movs	r1, #170	@ 0xaa
 8003448:	2000      	movs	r0, #0
 800344a:	f7fd ff27 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_rect(300, CENTER_Y-75, 12, 220, RA8875_YELLOW);
 800344e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	23dc      	movs	r3, #220	@ 0xdc
 8003456:	220c      	movs	r2, #12
 8003458:	21a5      	movs	r1, #165	@ 0xa5
 800345a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800345e:	f7fd feb2 	bl	80011c6 <RA8875_draw_fill_rect>

	//button text
	RA8875_text_mode();
 8003462:	f7fe f847 	bl	80014f4 <RA8875_text_mode>
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8003466:	2100      	movs	r1, #0
 8003468:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800346c:	f7fe f8a5 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(30, CENTER_Y-40);
 8003470:	21c8      	movs	r1, #200	@ 0xc8
 8003472:	201e      	movs	r0, #30
 8003474:	f7fe f863 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8003478:	2002      	movs	r0, #2
 800347a:	f7fe f8fb 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Brightness", 10);
 800347e:	210a      	movs	r1, #10
 8003480:	4857      	ldr	r0, [pc, #348]	@ (80035e0 <settings+0x2ec>)
 8003482:	f7fe f921 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(80, CENTER_Y+10);
 8003486:	21fa      	movs	r1, #250	@ 0xfa
 8003488:	2050      	movs	r0, #80	@ 0x50
 800348a:	f7fe f858 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Volume", 6);
 800348e:	2106      	movs	r1, #6
 8003490:	4854      	ldr	r0, [pc, #336]	@ (80035e4 <settings+0x2f0>)
 8003492:	f7fe f919 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(30, CENTER_Y+60);
 8003496:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800349a:	201e      	movs	r0, #30
 800349c:	f7fe f84f 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Difficulty", 10);
 80034a0:	210a      	movs	r1, #10
 80034a2:	4851      	ldr	r0, [pc, #324]	@ (80035e8 <settings+0x2f4>)
 80034a4:	f7fe f910 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-165, SCREEN_HEIGHT-80);
 80034a8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80034ac:	f240 207b 	movw	r0, #635	@ 0x27b
 80034b0:	f7fe f845 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Back", 4);
 80034b4:	2104      	movs	r1, #4
 80034b6:	484d      	ldr	r0, [pc, #308]	@ (80035ec <settings+0x2f8>)
 80034b8:	f7fe f906 	bl	80016c8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 80034bc:	211f      	movs	r1, #31
 80034be:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80034c2:	f7fe f87a 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-128, 20);
 80034c6:	2114      	movs	r1, #20
 80034c8:	f44f 7088 	mov.w	r0, #272	@ 0x110
 80034cc:	f7fe f837 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f7fe f8cf 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("SETTINGS", 8);
 80034d6:	2108      	movs	r1, #8
 80034d8:	4845      	ldr	r0, [pc, #276]	@ (80035f0 <settings+0x2fc>)
 80034da:	f7fe f8f5 	bl	80016c8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80034de:	211f      	movs	r1, #31
 80034e0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80034e4:	f7fe f869 	bl	80015ba <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 80034e8:	2100      	movs	r1, #0
 80034ea:	200a      	movs	r0, #10
 80034ec:	f7fe f827 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 80034f0:	2001      	movs	r0, #1
 80034f2:	f7fe f8bf 	bl	8001674 <RA8875_text_scale>
	RA8875_text_write("Brightness:", 11);
 80034f6:	210b      	movs	r1, #11
 80034f8:	483e      	ldr	r0, [pc, #248]	@ (80035f4 <settings+0x300>)
 80034fa:	f7fe f8e5 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-120, 0);
 80034fe:	2100      	movs	r1, #0
 8003500:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8003504:	f7fe f81b 	bl	800153e <RA8875_text_cursor_position>
	RA8875_text_write("Volume:", 7);
 8003508:	2107      	movs	r1, #7
 800350a:	483b      	ldr	r0, [pc, #236]	@ (80035f8 <settings+0x304>)
 800350c:	f7fe f8dc 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8003510:	2137      	movs	r1, #55	@ 0x37
 8003512:	200a      	movs	r0, #10
 8003514:	f7fe f813 	bl	800153e <RA8875_text_cursor_position>
	char buffer[5];
	sprintf(buffer, "%d", ((hgame->current_b)*100 + 127)/255);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800351e:	2264      	movs	r2, #100	@ 0x64
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	337f      	adds	r3, #127	@ 0x7f
 8003526:	4a35      	ldr	r2, [pc, #212]	@ (80035fc <settings+0x308>)
 8003528:	fb82 1203 	smull	r1, r2, r2, r3
 800352c:	441a      	add	r2, r3
 800352e:	11d2      	asrs	r2, r2, #7
 8003530:	17db      	asrs	r3, r3, #31
 8003532:	1ad2      	subs	r2, r2, r3
 8003534:	f107 0308 	add.w	r3, r7, #8
 8003538:	4931      	ldr	r1, [pc, #196]	@ (8003600 <settings+0x30c>)
 800353a:	4618      	mov	r0, r3
 800353c:	f00b fdc0 	bl	800f0c0 <siprintf>
	RA8875_text_write(buffer, 3);
 8003540:	f107 0308 	add.w	r3, r7, #8
 8003544:	2103      	movs	r1, #3
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe f8be 	bl	80016c8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 800354c:	2137      	movs	r1, #55	@ 0x37
 800354e:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8003552:	f7fd fff4 	bl	800153e <RA8875_text_cursor_position>
//	sprintf(buffer, "%d", hi_score);
//	RA8875_text_write(buffer, 3);
	RA8875_text_write("100", 3);
 8003556:	2103      	movs	r1, #3
 8003558:	482a      	ldr	r0, [pc, #168]	@ (8003604 <settings+0x310>)
 800355a:	f7fe f8b5 	bl	80016c8 <RA8875_text_write>
	RA8875_graphic_mode();
 800355e:	f7fd fa23 	bl	80009a8 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-159, 10, CENTER_X-152, 50, CENTER_X-167, 50, RA8875_YELLOW);
 8003562:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003566:	9302      	str	r3, [sp, #8]
 8003568:	2332      	movs	r3, #50	@ 0x32
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	23e9      	movs	r3, #233	@ 0xe9
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2332      	movs	r3, #50	@ 0x32
 8003572:	22f8      	movs	r2, #248	@ 0xf8
 8003574:	210a      	movs	r1, #10
 8003576:	20f1      	movs	r0, #241	@ 0xf1
 8003578:	f7fd fe90 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-152, 85, CENTER_X-145, 50, CENTER_X-160, 50, RA8875_YELLOW);
 800357c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003580:	9302      	str	r3, [sp, #8]
 8003582:	2332      	movs	r3, #50	@ 0x32
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	23f0      	movs	r3, #240	@ 0xf0
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	2332      	movs	r3, #50	@ 0x32
 800358c:	22ff      	movs	r2, #255	@ 0xff
 800358e:	2155      	movs	r1, #85	@ 0x55
 8003590:	20f8      	movs	r0, #248	@ 0xf8
 8003592:	f7fd fe83 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 8003596:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800359a:	9302      	str	r3, [sp, #8]
 800359c:	2332      	movs	r3, #50	@ 0x32
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	f240 2337 	movw	r3, #567	@ 0x237
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2332      	movs	r3, #50	@ 0x32
 80035a8:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80035ac:	210a      	movs	r1, #10
 80035ae:	f240 202f 	movw	r0, #559	@ 0x22f
 80035b2:	f7fd fe73 	bl	800129c <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 80035b6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80035ba:	9302      	str	r3, [sp, #8]
 80035bc:	2332      	movs	r3, #50	@ 0x32
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2332      	movs	r3, #50	@ 0x32
 80035c8:	f240 2221 	movw	r2, #545	@ 0x221
 80035cc:	2155      	movs	r1, #85	@ 0x55
 80035ce:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80035d2:	f7fd fe63 	bl	800129c <RA8875_draw_fill_triangle>

	return;
 80035d6:	bf00      	nop
}
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	08010f1c 	.word	0x08010f1c
 80035e4:	08010f28 	.word	0x08010f28
 80035e8:	08010f30 	.word	0x08010f30
 80035ec:	08010f3c 	.word	0x08010f3c
 80035f0:	08010f84 	.word	0x08010f84
 80035f4:	08010f90 	.word	0x08010f90
 80035f8:	08010f9c 	.word	0x08010f9c
 80035fc:	80808081 	.word	0x80808081
 8003600:	08010ee8 	.word	0x08010ee8
 8003604:	08010fa4 	.word	0x08010fa4

08003608 <calc_score>:

void calc_score(Game_HandleTypeDef *hgame, int* guesses, int* truths) {
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
	int round_score = -1;
 8003614:	f04f 33ff 	mov.w	r3, #4294967295
 8003618:	617b      	str	r3, [r7, #20]

	if((guesses[0] == truths[0] || guesses[0] == truths[1]) && (guesses[1] == truths[0] || guesses[1] == truths[1])) {
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d006      	beq.n	8003634 <calc_score+0x2c>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3304      	adds	r3, #4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d111      	bne.n	8003658 <calc_score+0x50>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3304      	adds	r3, #4
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d007      	beq.n	8003652 <calc_score+0x4a>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3304      	adds	r3, #4
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d102      	bne.n	8003658 <calc_score+0x50>
		round_score = 3;
 8003652:	2303      	movs	r3, #3
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e01d      	b.n	8003694 <calc_score+0x8c>
	}
	else if((guesses[0] == truths[0] || guesses[0] == truths[1]) || (guesses[1] == truths[0] || guesses[1] == truths[1])) {
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d015      	beq.n	8003690 <calc_score+0x88>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d00e      	beq.n	8003690 <calc_score+0x88>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3304      	adds	r3, #4
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d007      	beq.n	8003690 <calc_score+0x88>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3304      	adds	r3, #4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d101      	bne.n	8003694 <calc_score+0x8c>
		round_score = 1;
 8003690:	2301      	movs	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
	}

	hgame->score += round_score;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	441a      	add	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	if(hgame->score < 0) {
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da04      	bge.n	80036b8 <calc_score+0xb0>
		hgame->score = 0;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	}

	return;
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
}
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <read_keypad>:
 */

#include "main.h"
#include "keyboard_io.h"

int read_keypad(void) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0

	for(int i = 0; i < 4; i++) { // Set current column as output and low
 80036ca:	2300      	movs	r3, #0
 80036cc:	607b      	str	r3, [r7, #4]
 80036ce:	e0a5      	b.n	800381c <read_keypad+0x158>
		if(i == 0) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d115      	bne.n	8003702 <read_keypad+0x3e>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2120      	movs	r1, #32
 80036da:	4855      	ldr	r0, [pc, #340]	@ (8003830 <read_keypad+0x16c>)
 80036dc:	f003 f8f2 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 80036e0:	2201      	movs	r2, #1
 80036e2:	2140      	movs	r1, #64	@ 0x40
 80036e4:	4852      	ldr	r0, [pc, #328]	@ (8003830 <read_keypad+0x16c>)
 80036e6:	f003 f8ed 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 80036ea:	2201      	movs	r2, #1
 80036ec:	2180      	movs	r1, #128	@ 0x80
 80036ee:	4850      	ldr	r0, [pc, #320]	@ (8003830 <read_keypad+0x16c>)
 80036f0:	f003 f8e8 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 80036f4:	2201      	movs	r2, #1
 80036f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036fa:	484e      	ldr	r0, [pc, #312]	@ (8003834 <read_keypad+0x170>)
 80036fc:	f003 f8e2 	bl	80068c4 <HAL_GPIO_WritePin>
 8003700:	e049      	b.n	8003796 <read_keypad+0xd2>
		}
		else if(i == 1) {
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d115      	bne.n	8003734 <read_keypad+0x70>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8003708:	2201      	movs	r2, #1
 800370a:	2120      	movs	r1, #32
 800370c:	4848      	ldr	r0, [pc, #288]	@ (8003830 <read_keypad+0x16c>)
 800370e:	f003 f8d9 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8003712:	2200      	movs	r2, #0
 8003714:	2140      	movs	r1, #64	@ 0x40
 8003716:	4846      	ldr	r0, [pc, #280]	@ (8003830 <read_keypad+0x16c>)
 8003718:	f003 f8d4 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 800371c:	2201      	movs	r2, #1
 800371e:	2180      	movs	r1, #128	@ 0x80
 8003720:	4843      	ldr	r0, [pc, #268]	@ (8003830 <read_keypad+0x16c>)
 8003722:	f003 f8cf 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8003726:	2201      	movs	r2, #1
 8003728:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800372c:	4841      	ldr	r0, [pc, #260]	@ (8003834 <read_keypad+0x170>)
 800372e:	f003 f8c9 	bl	80068c4 <HAL_GPIO_WritePin>
 8003732:	e030      	b.n	8003796 <read_keypad+0xd2>
		}
		else if(i == 2) {
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d115      	bne.n	8003766 <read_keypad+0xa2>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 800373a:	2201      	movs	r2, #1
 800373c:	2120      	movs	r1, #32
 800373e:	483c      	ldr	r0, [pc, #240]	@ (8003830 <read_keypad+0x16c>)
 8003740:	f003 f8c0 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8003744:	2201      	movs	r2, #1
 8003746:	2140      	movs	r1, #64	@ 0x40
 8003748:	4839      	ldr	r0, [pc, #228]	@ (8003830 <read_keypad+0x16c>)
 800374a:	f003 f8bb 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 800374e:	2200      	movs	r2, #0
 8003750:	2180      	movs	r1, #128	@ 0x80
 8003752:	4837      	ldr	r0, [pc, #220]	@ (8003830 <read_keypad+0x16c>)
 8003754:	f003 f8b6 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 8003758:	2201      	movs	r2, #1
 800375a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800375e:	4835      	ldr	r0, [pc, #212]	@ (8003834 <read_keypad+0x170>)
 8003760:	f003 f8b0 	bl	80068c4 <HAL_GPIO_WritePin>
 8003764:	e017      	b.n	8003796 <read_keypad+0xd2>
		}
		else if(i == 3) {
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d114      	bne.n	8003796 <read_keypad+0xd2>
			HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 800376c:	2201      	movs	r2, #1
 800376e:	2120      	movs	r1, #32
 8003770:	482f      	ldr	r0, [pc, #188]	@ (8003830 <read_keypad+0x16c>)
 8003772:	f003 f8a7 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8003776:	2201      	movs	r2, #1
 8003778:	2140      	movs	r1, #64	@ 0x40
 800377a:	482d      	ldr	r0, [pc, #180]	@ (8003830 <read_keypad+0x16c>)
 800377c:	f003 f8a2 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8003780:	2201      	movs	r2, #1
 8003782:	2180      	movs	r1, #128	@ 0x80
 8003784:	482a      	ldr	r0, [pc, #168]	@ (8003830 <read_keypad+0x16c>)
 8003786:	f003 f89d 	bl	80068c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 800378a:	2200      	movs	r2, #0
 800378c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003790:	4828      	ldr	r0, [pc, #160]	@ (8003834 <read_keypad+0x170>)
 8003792:	f003 f897 	bl	80068c4 <HAL_GPIO_WritePin>
		}

//		 Read current rows
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin) == GPIO_PIN_RESET) return i*5 + 0;
 8003796:	2102      	movs	r1, #2
 8003798:	4825      	ldr	r0, [pc, #148]	@ (8003830 <read_keypad+0x16c>)
 800379a:	f003 f87b 	bl	8006894 <HAL_GPIO_ReadPin>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <read_keypad+0xea>
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	e03c      	b.n	8003828 <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin) == GPIO_PIN_RESET) return i*5 + 1;
 80037ae:	2104      	movs	r1, #4
 80037b0:	481f      	ldr	r0, [pc, #124]	@ (8003830 <read_keypad+0x16c>)
 80037b2:	f003 f86f 	bl	8006894 <HAL_GPIO_ReadPin>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <read_keypad+0x104>
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	3301      	adds	r3, #1
 80037c6:	e02f      	b.n	8003828 <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin) == GPIO_PIN_RESET) return i*5 + 2;
 80037c8:	2108      	movs	r1, #8
 80037ca:	4819      	ldr	r0, [pc, #100]	@ (8003830 <read_keypad+0x16c>)
 80037cc:	f003 f862 	bl	8006894 <HAL_GPIO_ReadPin>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <read_keypad+0x11e>
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	3302      	adds	r3, #2
 80037e0:	e022      	b.n	8003828 <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin) == GPIO_PIN_RESET) return i*5 + 3;
 80037e2:	2110      	movs	r1, #16
 80037e4:	4812      	ldr	r0, [pc, #72]	@ (8003830 <read_keypad+0x16c>)
 80037e6:	f003 f855 	bl	8006894 <HAL_GPIO_ReadPin>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <read_keypad+0x138>
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	3303      	adds	r3, #3
 80037fa:	e015      	b.n	8003828 <read_keypad+0x164>
		if(HAL_GPIO_ReadPin(ROW5_GPIO_Port, ROW5_Pin) == GPIO_PIN_RESET) return i*5 + 4;
 80037fc:	2101      	movs	r1, #1
 80037fe:	480c      	ldr	r0, [pc, #48]	@ (8003830 <read_keypad+0x16c>)
 8003800:	f003 f848 	bl	8006894 <HAL_GPIO_ReadPin>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <read_keypad+0x152>
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	e008      	b.n	8003828 <read_keypad+0x164>
	for(int i = 0; i < 4; i++) { // Set current column as output and low
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3301      	adds	r3, #1
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b03      	cmp	r3, #3
 8003820:	f77f af56 	ble.w	80036d0 <read_keypad+0xc>

	}

	return -1; // No key pressed
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	58020c00 	.word	0x58020c00
 8003834:	58020400 	.word	0x58020400

08003838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800383e:	f000 ffe5 	bl	800480c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003842:	f000 f83d 	bl	80038c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003846:	f000 f8a5 	bl	8003994 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800384a:	f000 fa2f 	bl	8003cac <MX_GPIO_Init>
  MX_DMA_Init();
 800384e:	f000 fa0d 	bl	8003c6c <MX_DMA_Init>
  MX_SPI1_Init();
 8003852:	f000 f8ef 	bl	8003a34 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003856:	f000 f945 	bl	8003ae4 <MX_SPI2_Init>
  MX_FATFS_Init();
 800385a:	f008 fba7 	bl	800bfac <MX_FATFS_Init>
  MX_TIM6_Init();
 800385e:	f000 f997 	bl	8003b90 <MX_TIM6_Init>
  MX_I2S3_Init();
 8003862:	f000 f8b5 	bl	80039d0 <MX_I2S3_Init>
  MX_TIM7_Init();
 8003866:	f000 f9cb 	bl	8003c00 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //Init display with 480x272 and set color as 16-bit per pixel
  RA8875_begin(LCD_RESET_GPIO_Port,LCD_RESET_Pin,LCD_WAIT_GPIO_Port,LCD_WAIT_Pin,RA8875_800x480,RA8875_16BPP);
 800386a:	2301      	movs	r3, #1
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	2303      	movs	r3, #3
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2310      	movs	r3, #16
 8003874:	4a10      	ldr	r2, [pc, #64]	@ (80038b8 <main+0x80>)
 8003876:	2120      	movs	r1, #32
 8003878:	480f      	ldr	r0, [pc, #60]	@ (80038b8 <main+0x80>)
 800387a:	f7fc ff13 	bl	80006a4 <RA8875_begin>

  //Power on the dispaly
  RA8875_display_on(1);
 800387e:	2001      	movs	r0, #1
 8003880:	f7fd ff85 	bl	800178e <RA8875_display_on>

  //Backlight on
  RA8875_pwm1_config(1,RA8875_PWM_CLK_DIV1);
 8003884:	2100      	movs	r1, #0
 8003886:	2001      	movs	r0, #1
 8003888:	f7fd ff5c 	bl	8001744 <RA8875_pwm1_config>

  init_game(&hgame);
 800388c:	480b      	ldr	r0, [pc, #44]	@ (80038bc <main+0x84>)
 800388e:	f7fe f891 	bl	80019b4 <init_game>

  title_screen(&hgame);
 8003892:	480a      	ldr	r0, [pc, #40]	@ (80038bc <main+0x84>)
 8003894:	f7fe f95a 	bl	8001b4c <title_screen>

  show_menu(&hgame);
 8003898:	4808      	ldr	r0, [pc, #32]	@ (80038bc <main+0x84>)
 800389a:	f7fe fb8b 	bl	8001fb4 <show_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	k = read_keypad();
 800389e:	f7ff ff11 	bl	80036c4 <read_keypad>
 80038a2:	6078      	str	r0, [r7, #4]
	process_input(&hgame, k);
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4805      	ldr	r0, [pc, #20]	@ (80038bc <main+0x84>)
 80038a8:	f7fe ff2e 	bl	8002708 <process_input>
	HAL_Delay(10);
 80038ac:	200a      	movs	r0, #10
 80038ae:	f001 f83f 	bl	8004930 <HAL_Delay>
	k = read_keypad();
 80038b2:	bf00      	nop
 80038b4:	e7f3      	b.n	800389e <main+0x66>
 80038b6:	bf00      	nop
 80038b8:	58020800 	.word	0x58020800
 80038bc:	24000330 	.word	0x24000330

080038c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b09c      	sub	sp, #112	@ 0x70
 80038c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ca:	224c      	movs	r2, #76	@ 0x4c
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f00b fc59 	bl	800f186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	2220      	movs	r2, #32
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f00b fc53 	bl	800f186 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80038e0:	2002      	movs	r0, #2
 80038e2:	f003 f92b 	bl	8006b3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80038e6:	2300      	movs	r3, #0
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	4b28      	ldr	r3, [pc, #160]	@ (800398c <SystemClock_Config+0xcc>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ee:	4a27      	ldr	r2, [pc, #156]	@ (800398c <SystemClock_Config+0xcc>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80038f6:	4b25      	ldr	r3, [pc, #148]	@ (800398c <SystemClock_Config+0xcc>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	4b23      	ldr	r3, [pc, #140]	@ (8003990 <SystemClock_Config+0xd0>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003908:	4a21      	ldr	r2, [pc, #132]	@ (8003990 <SystemClock_Config+0xd0>)
 800390a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800390e:	6193      	str	r3, [r2, #24]
 8003910:	4b1f      	ldr	r3, [pc, #124]	@ (8003990 <SystemClock_Config+0xd0>)
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800391c:	bf00      	nop
 800391e:	4b1c      	ldr	r3, [pc, #112]	@ (8003990 <SystemClock_Config+0xd0>)
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392a:	d1f8      	bne.n	800391e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800392c:	2302      	movs	r3, #2
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 8003930:	2311      	movs	r3, #17
 8003932:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003934:	2340      	movs	r3, #64	@ 0x40
 8003936:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003938:	2300      	movs	r3, #0
 800393a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800393c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003940:	4618      	mov	r0, r3
 8003942:	f003 f935 	bl	8006bb0 <HAL_RCC_OscConfig>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800394c:	f000 fab0 	bl	8003eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003950:	233f      	movs	r3, #63	@ 0x3f
 8003952:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800396c:	2300      	movs	r3, #0
 800396e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fd75 	bl	8007464 <HAL_RCC_ClockConfig>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003980:	f000 fa96 	bl	8003eb0 <Error_Handler>
  }
}
 8003984:	bf00      	nop
 8003986:	3770      	adds	r7, #112	@ 0x70
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	58000400 	.word	0x58000400
 8003990:	58024800 	.word	0x58024800

08003994 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b0b0      	sub	sp, #192	@ 0xc0
 8003998:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800399a:	463b      	mov	r3, r7
 800399c:	22c0      	movs	r2, #192	@ 0xc0
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f00b fbf0 	bl	800f186 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80039a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80039b2:	2300      	movs	r3, #0
 80039b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039b6:	463b      	mov	r3, r7
 80039b8:	4618      	mov	r0, r3
 80039ba:	f004 f8c9 	bl	8007b50 <HAL_RCCEx_PeriphCLKConfig>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80039c4:	f000 fa74 	bl	8003eb0 <Error_Handler>
  }
}
 80039c8:	bf00      	nop
 80039ca:	37c0      	adds	r7, #192	@ 0xc0
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80039d4:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 80039d6:	4a16      	ldr	r2, [pc, #88]	@ (8003a30 <MX_I2S3_Init+0x60>)
 80039d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 80039da:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 80039dc:	220a      	movs	r2, #10
 80039de:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80039e0:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80039e6:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80039ec:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80039f2:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 80039f4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80039f8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80039fa:	4b0c      	ldr	r3, [pc, #48]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8003a00:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8003a06:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003a18:	4804      	ldr	r0, [pc, #16]	@ (8003a2c <MX_I2S3_Init+0x5c>)
 8003a1a:	f002 ff6d 	bl	80068f8 <HAL_I2S_Init>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8003a24:	f000 fa44 	bl	8003eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	240000bc 	.word	0x240000bc
 8003a30:	40003c00 	.word	0x40003c00

08003a34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a38:	4b28      	ldr	r3, [pc, #160]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a3a:	4a29      	ldr	r2, [pc, #164]	@ (8003ae0 <MX_SPI1_Init+0xac>)
 8003a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a3e:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a40:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a46:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a4c:	4b23      	ldr	r3, [pc, #140]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a4e:	2207      	movs	r2, #7
 8003a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003a52:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a5a:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a62:	4b1e      	ldr	r3, [pc, #120]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a72:	4b1a      	ldr	r3, [pc, #104]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a78:	4b18      	ldr	r3, [pc, #96]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a7e:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003a84:	4b15      	ldr	r3, [pc, #84]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a8a:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003a98:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003abc:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ac8:	4804      	ldr	r0, [pc, #16]	@ (8003adc <MX_SPI1_Init+0xa8>)
 8003aca:	f006 fd3f 	bl	800a54c <HAL_SPI_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8003ad4:	f000 f9ec 	bl	8003eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	24000188 	.word	0x24000188
 8003ae0:	40013000 	.word	0x40013000

08003ae4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003ae8:	4b27      	ldr	r3, [pc, #156]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003aea:	4a28      	ldr	r2, [pc, #160]	@ (8003b8c <MX_SPI2_Init+0xa8>)
 8003aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003aee:	4b26      	ldr	r3, [pc, #152]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003af0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003af4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003af6:	4b24      	ldr	r3, [pc, #144]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003afc:	4b22      	ldr	r3, [pc, #136]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003afe:	2207      	movs	r2, #7
 8003b00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b02:	4b21      	ldr	r3, [pc, #132]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b08:	4b1f      	ldr	r3, [pc, #124]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003b16:	4b1c      	ldr	r3, [pc, #112]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003b1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b24:	4b18      	ldr	r3, [pc, #96]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2a:	4b17      	ldr	r3, [pc, #92]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003b30:	4b15      	ldr	r3, [pc, #84]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b36:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003b3e:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003b44:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b50:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003b56:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003b62:	4b09      	ldr	r3, [pc, #36]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003b68:	4b07      	ldr	r3, [pc, #28]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b74:	4804      	ldr	r0, [pc, #16]	@ (8003b88 <MX_SPI2_Init+0xa4>)
 8003b76:	f006 fce9 	bl	800a54c <HAL_SPI_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003b80:	f000 f996 	bl	8003eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	24000210 	.word	0x24000210
 8003b8c:	40003800 	.word	0x40003800

08003b90 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003ba0:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <MX_TIM6_Init+0x68>)
 8003ba2:	4a16      	ldr	r2, [pc, #88]	@ (8003bfc <MX_TIM6_Init+0x6c>)
 8003ba4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8003ba6:	4b14      	ldr	r3, [pc, #80]	@ (8003bf8 <MX_TIM6_Init+0x68>)
 8003ba8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8003bac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <MX_TIM6_Init+0x68>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <MX_TIM6_Init+0x68>)
 8003bb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf8 <MX_TIM6_Init+0x68>)
 8003bbe:	2280      	movs	r2, #128	@ 0x80
 8003bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003bc2:	480d      	ldr	r0, [pc, #52]	@ (8003bf8 <MX_TIM6_Init+0x68>)
 8003bc4:	f007 fe69 	bl	800b89a <HAL_TIM_Base_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003bce:	f000 f96f 	bl	8003eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4806      	ldr	r0, [pc, #24]	@ (8003bf8 <MX_TIM6_Init+0x68>)
 8003be0:	f008 f938 	bl	800be54 <HAL_TIMEx_MasterConfigSynchronization>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003bea:	f000 f961 	bl	8003eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	24000298 	.word	0x24000298
 8003bfc:	40001000 	.word	0x40001000

08003c00 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c10:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <MX_TIM7_Init+0x64>)
 8003c12:	4a15      	ldr	r2, [pc, #84]	@ (8003c68 <MX_TIM7_Init+0x68>)
 8003c14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1599;
 8003c16:	4b13      	ldr	r3, [pc, #76]	@ (8003c64 <MX_TIM7_Init+0x64>)
 8003c18:	f240 623f 	movw	r2, #1599	@ 0x63f
 8003c1c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1e:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <MX_TIM7_Init+0x64>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8003c24:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <MX_TIM7_Init+0x64>)
 8003c26:	2263      	movs	r2, #99	@ 0x63
 8003c28:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c64 <MX_TIM7_Init+0x64>)
 8003c2c:	2280      	movs	r2, #128	@ 0x80
 8003c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c30:	480c      	ldr	r0, [pc, #48]	@ (8003c64 <MX_TIM7_Init+0x64>)
 8003c32:	f007 fe32 	bl	800b89a <HAL_TIM_Base_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003c3c:	f000 f938 	bl	8003eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c40:	2320      	movs	r3, #32
 8003c42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4805      	ldr	r0, [pc, #20]	@ (8003c64 <MX_TIM7_Init+0x64>)
 8003c4e:	f008 f901 	bl	800be54 <HAL_TIMEx_MasterConfigSynchronization>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003c58:	f000 f92a 	bl	8003eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	240002e4 	.word	0x240002e4
 8003c68:	40001400 	.word	0x40001400

08003c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <MX_DMA_Init+0x3c>)
 8003c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca8 <MX_DMA_Init+0x3c>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c82:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <MX_DMA_Init+0x3c>)
 8003c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2100      	movs	r1, #0
 8003c94:	200b      	movs	r0, #11
 8003c96:	f000 ff56 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003c9a:	200b      	movs	r0, #11
 8003c9c:	f000 ff6d 	bl	8004b7a <HAL_NVIC_EnableIRQ>

}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	58024400 	.word	0x58024400

08003cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	@ 0x28
 8003cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	60da      	str	r2, [r3, #12]
 8003cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc2:	4b75      	ldr	r3, [pc, #468]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cc8:	4a73      	ldr	r2, [pc, #460]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003cca:	f043 0304 	orr.w	r3, r3, #4
 8003cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cd2:	4b71      	ldr	r3, [pc, #452]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce0:	4b6d      	ldr	r3, [pc, #436]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ce6:	4a6c      	ldr	r2, [pc, #432]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cf0:	4b69      	ldr	r3, [pc, #420]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfe:	4b66      	ldr	r3, [pc, #408]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d04:	4a64      	ldr	r2, [pc, #400]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003d06:	f043 0302 	orr.w	r3, r3, #2
 8003d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d0e:	4b62      	ldr	r3, [pc, #392]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d22:	4a5d      	ldr	r2, [pc, #372]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003d24:	f043 0308 	orr.w	r3, r3, #8
 8003d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d3a:	4b57      	ldr	r3, [pc, #348]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d40:	4a55      	ldr	r2, [pc, #340]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003d42:	f043 0310 	orr.w	r3, r3, #16
 8003d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d4a:	4b53      	ldr	r3, [pc, #332]	@ (8003e98 <MX_GPIO_Init+0x1ec>)
 8003d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2120      	movs	r1, #32
 8003d5c:	484f      	ldr	r0, [pc, #316]	@ (8003e9c <MX_GPIO_Init+0x1f0>)
 8003d5e:	f002 fdb1 	bl	80068c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8003d62:	2201      	movs	r2, #1
 8003d64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d68:	484d      	ldr	r0, [pc, #308]	@ (8003ea0 <MX_GPIO_Init+0x1f4>)
 8003d6a:	f002 fdab 	bl	80068c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d74:	484b      	ldr	r0, [pc, #300]	@ (8003ea4 <MX_GPIO_Init+0x1f8>)
 8003d76:	f002 fda5 	bl	80068c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	21e0      	movs	r1, #224	@ 0xe0
 8003d7e:	4849      	ldr	r0, [pc, #292]	@ (8003ea4 <MX_GPIO_Init+0x1f8>)
 8003d80:	f002 fda0 	bl	80068c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 8003d84:	2200      	movs	r2, #0
 8003d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d8a:	4845      	ldr	r0, [pc, #276]	@ (8003ea0 <MX_GPIO_Init+0x1f4>)
 8003d8c:	f002 fd9a 	bl	80068c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8003d90:	2200      	movs	r2, #0
 8003d92:	2103      	movs	r1, #3
 8003d94:	4844      	ldr	r0, [pc, #272]	@ (8003ea8 <MX_GPIO_Init+0x1fc>)
 8003d96:	f002 fd95 	bl	80068c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Dummy_HiZ_Pin */
  GPIO_InitStruct.Pin = Dummy_HiZ_Pin;
 8003d9a:	2310      	movs	r3, #16
 8003d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Dummy_HiZ_GPIO_Port, &GPIO_InitStruct);
 8003da6:	f107 0314 	add.w	r3, r7, #20
 8003daa:	4619      	mov	r1, r3
 8003dac:	483f      	ldr	r0, [pc, #252]	@ (8003eac <MX_GPIO_Init+0x200>)
 8003dae:	f002 fbc1 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 8003db2:	2310      	movs	r3, #16
 8003db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4835      	ldr	r0, [pc, #212]	@ (8003e9c <MX_GPIO_Init+0x1f0>)
 8003dc6:	f002 fbb5 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8003dca:	2320      	movs	r3, #32
 8003dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8003dda:	f107 0314 	add.w	r3, r7, #20
 8003dde:	4619      	mov	r1, r3
 8003de0:	482e      	ldr	r0, [pc, #184]	@ (8003e9c <MX_GPIO_Init+0x1f0>)
 8003de2:	f002 fba7 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dec:	2301      	movs	r3, #1
 8003dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df4:	2303      	movs	r3, #3
 8003df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4828      	ldr	r0, [pc, #160]	@ (8003ea0 <MX_GPIO_Init+0x1f4>)
 8003e00:	f002 fb98 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003e04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e12:	2303      	movs	r3, #3
 8003e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003e16:	f107 0314 	add.w	r3, r7, #20
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4821      	ldr	r0, [pc, #132]	@ (8003ea4 <MX_GPIO_Init+0x1f8>)
 8003e1e:	f002 fb89 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8003e22:	231f      	movs	r3, #31
 8003e24:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e2e:	f107 0314 	add.w	r3, r7, #20
 8003e32:	4619      	mov	r1, r3
 8003e34:	481b      	ldr	r0, [pc, #108]	@ (8003ea4 <MX_GPIO_Init+0x1f8>)
 8003e36:	f002 fb7d 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 8003e3a:	23e0      	movs	r3, #224	@ 0xe0
 8003e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4814      	ldr	r0, [pc, #80]	@ (8003ea4 <MX_GPIO_Init+0x1f8>)
 8003e52:	f002 fb6f 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 8003e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e64:	2300      	movs	r3, #0
 8003e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	480c      	ldr	r0, [pc, #48]	@ (8003ea0 <MX_GPIO_Init+0x1f4>)
 8003e70:	f002 fb60 	bl	8006534 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 8003e74:	2303      	movs	r3, #3
 8003e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4807      	ldr	r0, [pc, #28]	@ (8003ea8 <MX_GPIO_Init+0x1fc>)
 8003e8c:	f002 fb52 	bl	8006534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e90:	bf00      	nop
 8003e92:	3728      	adds	r7, #40	@ 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	58020800 	.word	0x58020800
 8003ea0:	58020400 	.word	0x58020400
 8003ea4:	58020c00 	.word	0x58020c00
 8003ea8:	58021000 	.word	0x58021000
 8003eac:	58020000 	.word	0x58020000

08003eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eb4:	b672      	cpsid	i
}
 8003eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <Error_Handler+0x8>

08003ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <HAL_MspInit+0x30>)
 8003ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ec8:	4a08      	ldr	r2, [pc, #32]	@ (8003eec <HAL_MspInit+0x30>)
 8003eca:	f043 0302 	orr.w	r3, r3, #2
 8003ece:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_MspInit+0x30>)
 8003ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	58024400 	.word	0x58024400

08003ef0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b0bc      	sub	sp, #240	@ 0xf0
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f08:	f107 0318 	add.w	r3, r7, #24
 8003f0c:	22c0      	movs	r2, #192	@ 0xc0
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f00b f938 	bl	800f186 <memset>
  if(hi2s->Instance==SPI3)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a63      	ldr	r2, [pc, #396]	@ (80040a8 <HAL_I2S_MspInit+0x1b8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	f040 80bf 	bne.w	80040a0 <HAL_I2S_MspInit+0x1b0>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003f22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003f2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f32:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f34:	f107 0318 	add.w	r3, r7, #24
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f003 fe09 	bl	8007b50 <HAL_RCCEx_PeriphCLKConfig>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8003f44:	f7ff ffb4 	bl	8003eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f48:	4b58      	ldr	r3, [pc, #352]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f4e:	4a57      	ldr	r2, [pc, #348]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003f50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003f58:	4b54      	ldr	r3, [pc, #336]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f66:	4b51      	ldr	r3, [pc, #324]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f6c:	4a4f      	ldr	r2, [pc, #316]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f76:	4b4d      	ldr	r3, [pc, #308]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f84:	4b49      	ldr	r3, [pc, #292]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f8a:	4a48      	ldr	r2, [pc, #288]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f94:	4b45      	ldr	r3, [pc, #276]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa2:	4b42      	ldr	r3, [pc, #264]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fa8:	4a40      	ldr	r2, [pc, #256]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80040ac <HAL_I2S_MspInit+0x1bc>)
 8003fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003fd8:	2307      	movs	r3, #7
 8003fda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fde:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4832      	ldr	r0, [pc, #200]	@ (80040b0 <HAL_I2S_MspInit+0x1c0>)
 8003fe6:	f002 faa5 	bl	8006534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004004:	2306      	movs	r3, #6
 8004006:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800400e:	4619      	mov	r1, r3
 8004010:	4828      	ldr	r0, [pc, #160]	@ (80040b4 <HAL_I2S_MspInit+0x1c4>)
 8004012:	f002 fa8f 	bl	8006534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004016:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800401a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401e:	2302      	movs	r3, #2
 8004020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004030:	2306      	movs	r3, #6
 8004032:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004036:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800403a:	4619      	mov	r1, r3
 800403c:	481e      	ldr	r0, [pc, #120]	@ (80040b8 <HAL_I2S_MspInit+0x1c8>)
 800403e:	f002 fa79 	bl	8006534 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream0;
 8004042:	4b1e      	ldr	r3, [pc, #120]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 8004044:	4a1e      	ldr	r2, [pc, #120]	@ (80040c0 <HAL_I2S_MspInit+0x1d0>)
 8004046:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004048:	4b1c      	ldr	r3, [pc, #112]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 800404a:	223e      	movs	r2, #62	@ 0x3e
 800404c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800404e:	4b1b      	ldr	r3, [pc, #108]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 8004050:	2240      	movs	r2, #64	@ 0x40
 8004052:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004054:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 8004056:	2200      	movs	r2, #0
 8004058:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800405a:	4b18      	ldr	r3, [pc, #96]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 800405c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004060:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004062:	4b16      	ldr	r3, [pc, #88]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 8004064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004068:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800406a:	4b14      	ldr	r3, [pc, #80]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 800406c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004070:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004072:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 8004074:	2200      	movs	r2, #0
 8004076:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004078:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 800407a:	2200      	movs	r2, #0
 800407c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800407e:	4b0f      	ldr	r3, [pc, #60]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 8004080:	2200      	movs	r2, #0
 8004082:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004084:	480d      	ldr	r0, [pc, #52]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 8004086:	f000 fd93 	bl	8004bb0 <HAL_DMA_Init>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2S_MspInit+0x1a4>
    {
      Error_Handler();
 8004090:	f7ff ff0e 	bl	8003eb0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a09      	ldr	r2, [pc, #36]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
 800409a:	4a08      	ldr	r2, [pc, #32]	@ (80040bc <HAL_I2S_MspInit+0x1cc>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80040a0:	bf00      	nop
 80040a2:	37f0      	adds	r7, #240	@ 0xf0
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40003c00 	.word	0x40003c00
 80040ac:	58024400 	.word	0x58024400
 80040b0:	58020400 	.word	0x58020400
 80040b4:	58020000 	.word	0x58020000
 80040b8:	58020800 	.word	0x58020800
 80040bc:	24000110 	.word	0x24000110
 80040c0:	40020010 	.word	0x40020010

080040c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b0be      	sub	sp, #248	@ 0xf8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040dc:	f107 0320 	add.w	r3, r7, #32
 80040e0:	22c0      	movs	r2, #192	@ 0xc0
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f00b f84e 	bl	800f186 <memset>
  if(hspi->Instance==SPI1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a72      	ldr	r2, [pc, #456]	@ (80042b8 <HAL_SPI_MspInit+0x1f4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d16b      	bne.n	80041cc <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80040f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8004100:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004108:	f107 0320 	add.w	r3, r7, #32
 800410c:	4618      	mov	r0, r3
 800410e:	f003 fd1f 	bl	8007b50 <HAL_RCCEx_PeriphCLKConfig>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8004118:	f7ff feca 	bl	8003eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800411c:	4b67      	ldr	r3, [pc, #412]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800411e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004122:	4a66      	ldr	r2, [pc, #408]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 8004124:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004128:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800412c:	4b63      	ldr	r3, [pc, #396]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800412e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004132:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413a:	4b60      	ldr	r3, [pc, #384]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800413c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004140:	4a5e      	ldr	r2, [pc, #376]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800414a:	4b5c      	ldr	r3, [pc, #368]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800414c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004158:	4b58      	ldr	r3, [pc, #352]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800415a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800415e:	4a57      	ldr	r2, [pc, #348]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004168:	4b54      	ldr	r3, [pc, #336]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800416a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004176:	23c0      	movs	r3, #192	@ 0xc0
 8004178:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417c:	2302      	movs	r3, #2
 800417e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004188:	2303      	movs	r3, #3
 800418a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800418e:	2305      	movs	r3, #5
 8004190:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004194:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8004198:	4619      	mov	r1, r3
 800419a:	4849      	ldr	r0, [pc, #292]	@ (80042c0 <HAL_SPI_MspInit+0x1fc>)
 800419c:	f002 f9ca 	bl	8006534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041a0:	2308      	movs	r3, #8
 80041a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a6:	2302      	movs	r3, #2
 80041a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b2:	2303      	movs	r3, #3
 80041b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80041b8:	2305      	movs	r3, #5
 80041ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041be:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80041c2:	4619      	mov	r1, r3
 80041c4:	483f      	ldr	r0, [pc, #252]	@ (80042c4 <HAL_SPI_MspInit+0x200>)
 80041c6:	f002 f9b5 	bl	8006534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80041ca:	e070      	b.n	80042ae <HAL_SPI_MspInit+0x1ea>
  else if(hspi->Instance==SPI2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a3d      	ldr	r2, [pc, #244]	@ (80042c8 <HAL_SPI_MspInit+0x204>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d16b      	bne.n	80042ae <HAL_SPI_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80041d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80041e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041ea:	f107 0320 	add.w	r3, r7, #32
 80041ee:	4618      	mov	r0, r3
 80041f0:	f003 fcae 	bl	8007b50 <HAL_RCCEx_PeriphCLKConfig>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 80041fa:	f7ff fe59 	bl	8003eb0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041fe:	4b2f      	ldr	r3, [pc, #188]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 8004200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004204:	4a2d      	ldr	r2, [pc, #180]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 8004206:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800420a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800420e:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 8004210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421c:	4b27      	ldr	r3, [pc, #156]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800421e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004222:	4a26      	ldr	r2, [pc, #152]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800422c:	4b23      	ldr	r3, [pc, #140]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800422e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800423a:	4b20      	ldr	r3, [pc, #128]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004240:	4a1e      	ldr	r2, [pc, #120]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 8004242:	f043 0302 	orr.w	r3, r3, #2
 8004246:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800424a:	4b1c      	ldr	r3, [pc, #112]	@ (80042bc <HAL_SPI_MspInit+0x1f8>)
 800424c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004258:	2306      	movs	r3, #6
 800425a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425e:	2302      	movs	r3, #2
 8004260:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	2300      	movs	r3, #0
 8004266:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426a:	2303      	movs	r3, #3
 800426c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004270:	2305      	movs	r3, #5
 8004272:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004276:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800427a:	4619      	mov	r1, r3
 800427c:	4813      	ldr	r0, [pc, #76]	@ (80042cc <HAL_SPI_MspInit+0x208>)
 800427e:	f002 f959 	bl	8006534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428a:	2302      	movs	r3, #2
 800428c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004296:	2303      	movs	r3, #3
 8004298:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800429c:	2305      	movs	r3, #5
 800429e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4806      	ldr	r0, [pc, #24]	@ (80042c4 <HAL_SPI_MspInit+0x200>)
 80042aa:	f002 f943 	bl	8006534 <HAL_GPIO_Init>
}
 80042ae:	bf00      	nop
 80042b0:	37f8      	adds	r7, #248	@ 0xf8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40013000 	.word	0x40013000
 80042bc:	58024400 	.word	0x58024400
 80042c0:	58020000 	.word	0x58020000
 80042c4:	58020400 	.word	0x58020400
 80042c8:	40003800 	.word	0x40003800
 80042cc:	58020800 	.word	0x58020800

080042d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004354 <HAL_TIM_Base_MspInit+0x84>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d117      	bne.n	8004312 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80042e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <HAL_TIM_Base_MspInit+0x88>)
 80042e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <HAL_TIM_Base_MspInit+0x88>)
 80042ea:	f043 0310 	orr.w	r3, r3, #16
 80042ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042f2:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <HAL_TIM_Base_MspInit+0x88>)
 80042f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004300:	2200      	movs	r2, #0
 8004302:	2101      	movs	r1, #1
 8004304:	2036      	movs	r0, #54	@ 0x36
 8004306:	f000 fc1e 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800430a:	2036      	movs	r0, #54	@ 0x36
 800430c:	f000 fc35 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004310:	e01b      	b.n	800434a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a11      	ldr	r2, [pc, #68]	@ (800435c <HAL_TIM_Base_MspInit+0x8c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d116      	bne.n	800434a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800431c:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <HAL_TIM_Base_MspInit+0x88>)
 800431e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004322:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <HAL_TIM_Base_MspInit+0x88>)
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800432c:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <HAL_TIM_Base_MspInit+0x88>)
 800432e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 800433a:	2200      	movs	r2, #0
 800433c:	2103      	movs	r1, #3
 800433e:	2037      	movs	r0, #55	@ 0x37
 8004340:	f000 fc01 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004344:	2037      	movs	r0, #55	@ 0x37
 8004346:	f000 fc18 	bl	8004b7a <HAL_NVIC_EnableIRQ>
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40001000 	.word	0x40001000
 8004358:	58024400 	.word	0x58024400
 800435c:	40001400 	.word	0x40001400

08004360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004364:	bf00      	nop
 8004366:	e7fd      	b.n	8004364 <NMI_Handler+0x4>

08004368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <HardFault_Handler+0x4>

08004370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <MemManage_Handler+0x4>

08004378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <BusFault_Handler+0x4>

08004380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <UsageFault_Handler+0x4>

08004388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043b6:	f000 fa9b 	bl	80048f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80043c4:	4802      	ldr	r0, [pc, #8]	@ (80043d0 <DMA1_Stream0_IRQHandler+0x10>)
 80043c6:	f000 ff4f 	bl	8005268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	24000110 	.word	0x24000110

080043d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043da:	481f      	ldr	r0, [pc, #124]	@ (8004458 <TIM6_DAC_IRQHandler+0x84>)
 80043dc:	f007 fb5b 	bl	800ba96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  hgame.game_timer--;
 80043e0:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <TIM6_DAC_IRQHandler+0x88>)
 80043e2:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <TIM6_DAC_IRQHandler+0x88>)
 80043ee:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc
  sprintf(print_timer, "%d", hgame.game_timer);
 80043f2:	4b1a      	ldr	r3, [pc, #104]	@ (800445c <TIM6_DAC_IRQHandler+0x88>)
 80043f4:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	1d3b      	adds	r3, r7, #4
 80043fe:	4918      	ldr	r1, [pc, #96]	@ (8004460 <TIM6_DAC_IRQHandler+0x8c>)
 8004400:	4618      	mov	r0, r3
 8004402:	f00a fe5d 	bl	800f0c0 <siprintf>
  RA8875_text_mode();
 8004406:	f7fd f875 	bl	80014f4 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 800440a:	2132      	movs	r1, #50	@ 0x32
 800440c:	20c8      	movs	r0, #200	@ 0xc8
 800440e:	f7fd f896 	bl	800153e <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8004412:	211f      	movs	r1, #31
 8004414:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004418:	f7fd f8cf 	bl	80015ba <RA8875_text_color>
  RA8875_text_scale(1);
 800441c:	2001      	movs	r0, #1
 800441e:	f7fd f929 	bl	8001674 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	2102      	movs	r1, #2
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd f94e 	bl	80016c8 <RA8875_text_write>
  RA8875_graphic_mode();
 800442c:	f7fc fabc 	bl	80009a8 <RA8875_graphic_mode>
  if(hgame.game_timer <= 0) {
 8004430:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <TIM6_DAC_IRQHandler+0x88>)
 8004432:	f893 32fc 	ldrb.w	r3, [r3, #764]	@ 0x2fc
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d109      	bne.n	8004450 <TIM6_DAC_IRQHandler+0x7c>
	  hgame.game_timer = 60;
 800443c:	4b07      	ldr	r3, [pc, #28]	@ (800445c <TIM6_DAC_IRQHandler+0x88>)
 800443e:	223c      	movs	r2, #60	@ 0x3c
 8004440:	f883 22fc 	strb.w	r2, [r3, #764]	@ 0x2fc
	  HAL_TIM_Base_Stop_IT(&htim6);
 8004444:	4804      	ldr	r0, [pc, #16]	@ (8004458 <TIM6_DAC_IRQHandler+0x84>)
 8004446:	f007 faf7 	bl	800ba38 <HAL_TIM_Base_Stop_IT>
	  end_game(&hgame);
 800444a:	4804      	ldr	r0, [pc, #16]	@ (800445c <TIM6_DAC_IRQHandler+0x88>)
 800444c:	f7fe fcd6 	bl	8002dfc <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	24000298 	.word	0x24000298
 800445c:	24000330 	.word	0x24000330
 8004460:	08010fa8 	.word	0x08010fa8

08004464 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004468:	4828      	ldr	r0, [pc, #160]	@ (800450c <TIM7_IRQHandler+0xa8>)
 800446a:	f007 fb14 	bl	800ba96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 800446e:	2201      	movs	r2, #1
 8004470:	2120      	movs	r1, #32
 8004472:	4827      	ldr	r0, [pc, #156]	@ (8004510 <TIM7_IRQHandler+0xac>)
 8004474:	f002 fa26 	bl	80068c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8004478:	2201      	movs	r2, #1
 800447a:	2140      	movs	r1, #64	@ 0x40
 800447c:	4824      	ldr	r0, [pc, #144]	@ (8004510 <TIM7_IRQHandler+0xac>)
 800447e:	f002 fa21 	bl	80068c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8004482:	2201      	movs	r2, #1
 8004484:	2180      	movs	r1, #128	@ 0x80
 8004486:	4822      	ldr	r0, [pc, #136]	@ (8004510 <TIM7_IRQHandler+0xac>)
 8004488:	f002 fa1c 	bl	80068c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_SET);
 800448c:	2201      	movs	r2, #1
 800448e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004492:	4820      	ldr	r0, [pc, #128]	@ (8004514 <TIM7_IRQHandler+0xb0>)
 8004494:	f002 fa16 	bl	80068c4 <HAL_GPIO_WritePin>

  switch (column) {
 8004498:	4b1f      	ldr	r3, [pc, #124]	@ (8004518 <TIM7_IRQHandler+0xb4>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d823      	bhi.n	80044ea <TIM7_IRQHandler+0x86>
 80044a2:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <TIM7_IRQHandler+0x44>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044c5 	.word	0x080044c5
 80044b0:	080044d1 	.word	0x080044d1
 80044b4:	080044dd 	.word	0x080044dd
	  case 0: HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET); break;
 80044b8:	2200      	movs	r2, #0
 80044ba:	2120      	movs	r1, #32
 80044bc:	4814      	ldr	r0, [pc, #80]	@ (8004510 <TIM7_IRQHandler+0xac>)
 80044be:	f002 fa01 	bl	80068c4 <HAL_GPIO_WritePin>
 80044c2:	e012      	b.n	80044ea <TIM7_IRQHandler+0x86>
	  case 1: HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET); break;
 80044c4:	2200      	movs	r2, #0
 80044c6:	2140      	movs	r1, #64	@ 0x40
 80044c8:	4811      	ldr	r0, [pc, #68]	@ (8004510 <TIM7_IRQHandler+0xac>)
 80044ca:	f002 f9fb 	bl	80068c4 <HAL_GPIO_WritePin>
 80044ce:	e00c      	b.n	80044ea <TIM7_IRQHandler+0x86>
	  case 2: HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET); break;
 80044d0:	2200      	movs	r2, #0
 80044d2:	2180      	movs	r1, #128	@ 0x80
 80044d4:	480e      	ldr	r0, [pc, #56]	@ (8004510 <TIM7_IRQHandler+0xac>)
 80044d6:	f002 f9f5 	bl	80068c4 <HAL_GPIO_WritePin>
 80044da:	e006      	b.n	80044ea <TIM7_IRQHandler+0x86>
	  case 3: HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET); break;
 80044dc:	2200      	movs	r2, #0
 80044de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044e2:	480c      	ldr	r0, [pc, #48]	@ (8004514 <TIM7_IRQHandler+0xb0>)
 80044e4:	f002 f9ee 	bl	80068c4 <HAL_GPIO_WritePin>
 80044e8:	bf00      	nop
  }

  column = (column + 1) % 4;
 80044ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <TIM7_IRQHandler+0xb4>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	3301      	adds	r3, #1
 80044f2:	425a      	negs	r2, r3
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	f002 0203 	and.w	r2, r2, #3
 80044fc:	bf58      	it	pl
 80044fe:	4253      	negpl	r3, r2
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <TIM7_IRQHandler+0xb4>)
 8004504:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	240002e4 	.word	0x240002e4
 8004510:	58020c00 	.word	0x58020c00
 8004514:	58020400 	.word	0x58020400
 8004518:	24000630 	.word	0x24000630

0800451c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return 1;
 8004520:	2301      	movs	r3, #1
}
 8004522:	4618      	mov	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <_kill>:

int _kill(int pid, int sig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004536:	f00a fe75 	bl	800f224 <__errno>
 800453a:	4603      	mov	r3, r0
 800453c:	2216      	movs	r2, #22
 800453e:	601a      	str	r2, [r3, #0]
  return -1;
 8004540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_exit>:

void _exit (int status)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004554:	f04f 31ff 	mov.w	r1, #4294967295
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ffe7 	bl	800452c <_kill>
  while (1) {}    /* Make sure we hang here */
 800455e:	bf00      	nop
 8004560:	e7fd      	b.n	800455e <_exit+0x12>

08004562 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	e00a      	b.n	800458a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004574:	f3af 8000 	nop.w
 8004578:	4601      	mov	r1, r0
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	60ba      	str	r2, [r7, #8]
 8004580:	b2ca      	uxtb	r2, r1
 8004582:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	3301      	adds	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	dbf0      	blt.n	8004574 <_read+0x12>
  }

  return len;
 8004592:	687b      	ldr	r3, [r7, #4]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e009      	b.n	80045c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	60ba      	str	r2, [r7, #8]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3301      	adds	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	dbf1      	blt.n	80045ae <_write+0x12>
  }
  return len;
 80045ca:	687b      	ldr	r3, [r7, #4]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_close>:

int _close(int file)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045fc:	605a      	str	r2, [r3, #4]
  return 0;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <_isatty>:

int _isatty(int file)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004614:	2301      	movs	r3, #1
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004644:	4a14      	ldr	r2, [pc, #80]	@ (8004698 <_sbrk+0x5c>)
 8004646:	4b15      	ldr	r3, [pc, #84]	@ (800469c <_sbrk+0x60>)
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004650:	4b13      	ldr	r3, [pc, #76]	@ (80046a0 <_sbrk+0x64>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004658:	4b11      	ldr	r3, [pc, #68]	@ (80046a0 <_sbrk+0x64>)
 800465a:	4a12      	ldr	r2, [pc, #72]	@ (80046a4 <_sbrk+0x68>)
 800465c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800465e:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <_sbrk+0x64>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	429a      	cmp	r2, r3
 800466a:	d207      	bcs.n	800467c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800466c:	f00a fdda 	bl	800f224 <__errno>
 8004670:	4603      	mov	r3, r0
 8004672:	220c      	movs	r2, #12
 8004674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	e009      	b.n	8004690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800467c:	4b08      	ldr	r3, [pc, #32]	@ (80046a0 <_sbrk+0x64>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004682:	4b07      	ldr	r3, [pc, #28]	@ (80046a0 <_sbrk+0x64>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	4a05      	ldr	r2, [pc, #20]	@ (80046a0 <_sbrk+0x64>)
 800468c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800468e:	68fb      	ldr	r3, [r7, #12]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	24080000 	.word	0x24080000
 800469c:	00000400 	.word	0x00000400
 80046a0:	24000634 	.word	0x24000634
 80046a4:	240007d0 	.word	0x240007d0

080046a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046ac:	4b37      	ldr	r3, [pc, #220]	@ (800478c <SystemInit+0xe4>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	4a36      	ldr	r2, [pc, #216]	@ (800478c <SystemInit+0xe4>)
 80046b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046bc:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <SystemInit+0xe8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	2b06      	cmp	r3, #6
 80046c6:	d807      	bhi.n	80046d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046c8:	4b31      	ldr	r3, [pc, #196]	@ (8004790 <SystemInit+0xe8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 030f 	bic.w	r3, r3, #15
 80046d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <SystemInit+0xe8>)
 80046d2:	f043 0307 	orr.w	r3, r3, #7
 80046d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80046d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004794 <SystemInit+0xec>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004794 <SystemInit+0xec>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80046e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004794 <SystemInit+0xec>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80046ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004794 <SystemInit+0xec>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4929      	ldr	r1, [pc, #164]	@ (8004794 <SystemInit+0xec>)
 80046f0:	4b29      	ldr	r3, [pc, #164]	@ (8004798 <SystemInit+0xf0>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046f6:	4b26      	ldr	r3, [pc, #152]	@ (8004790 <SystemInit+0xe8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004702:	4b23      	ldr	r3, [pc, #140]	@ (8004790 <SystemInit+0xe8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 030f 	bic.w	r3, r3, #15
 800470a:	4a21      	ldr	r2, [pc, #132]	@ (8004790 <SystemInit+0xe8>)
 800470c:	f043 0307 	orr.w	r3, r3, #7
 8004710:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004712:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <SystemInit+0xec>)
 8004714:	2200      	movs	r2, #0
 8004716:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004718:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <SystemInit+0xec>)
 800471a:	2200      	movs	r2, #0
 800471c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800471e:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <SystemInit+0xec>)
 8004720:	2200      	movs	r2, #0
 8004722:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <SystemInit+0xec>)
 8004726:	4a1d      	ldr	r2, [pc, #116]	@ (800479c <SystemInit+0xf4>)
 8004728:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800472a:	4b1a      	ldr	r3, [pc, #104]	@ (8004794 <SystemInit+0xec>)
 800472c:	4a1c      	ldr	r2, [pc, #112]	@ (80047a0 <SystemInit+0xf8>)
 800472e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004730:	4b18      	ldr	r3, [pc, #96]	@ (8004794 <SystemInit+0xec>)
 8004732:	4a1c      	ldr	r2, [pc, #112]	@ (80047a4 <SystemInit+0xfc>)
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004736:	4b17      	ldr	r3, [pc, #92]	@ (8004794 <SystemInit+0xec>)
 8004738:	2200      	movs	r2, #0
 800473a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800473c:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <SystemInit+0xec>)
 800473e:	4a19      	ldr	r2, [pc, #100]	@ (80047a4 <SystemInit+0xfc>)
 8004740:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004742:	4b14      	ldr	r3, [pc, #80]	@ (8004794 <SystemInit+0xec>)
 8004744:	2200      	movs	r2, #0
 8004746:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004748:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <SystemInit+0xec>)
 800474a:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <SystemInit+0xfc>)
 800474c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800474e:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <SystemInit+0xec>)
 8004750:	2200      	movs	r2, #0
 8004752:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <SystemInit+0xec>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0e      	ldr	r2, [pc, #56]	@ (8004794 <SystemInit+0xec>)
 800475a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800475e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <SystemInit+0xec>)
 8004762:	2200      	movs	r2, #0
 8004764:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004766:	4b10      	ldr	r3, [pc, #64]	@ (80047a8 <SystemInit+0x100>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b10      	ldr	r3, [pc, #64]	@ (80047ac <SystemInit+0x104>)
 800476c:	4013      	ands	r3, r2
 800476e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004772:	d202      	bcs.n	800477a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004774:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <SystemInit+0x108>)
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800477a:	4b0e      	ldr	r3, [pc, #56]	@ (80047b4 <SystemInit+0x10c>)
 800477c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004780:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004782:	bf00      	nop
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000ed00 	.word	0xe000ed00
 8004790:	52002000 	.word	0x52002000
 8004794:	58024400 	.word	0x58024400
 8004798:	eaf6ed7f 	.word	0xeaf6ed7f
 800479c:	02020200 	.word	0x02020200
 80047a0:	01ff0000 	.word	0x01ff0000
 80047a4:	01010280 	.word	0x01010280
 80047a8:	5c001000 	.word	0x5c001000
 80047ac:	ffff0000 	.word	0xffff0000
 80047b0:	51008108 	.word	0x51008108
 80047b4:	52004000 	.word	0x52004000

080047b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80047b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80047f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80047bc:	f7ff ff74 	bl	80046a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047c0:	480c      	ldr	r0, [pc, #48]	@ (80047f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047c2:	490d      	ldr	r1, [pc, #52]	@ (80047f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047c4:	4a0d      	ldr	r2, [pc, #52]	@ (80047fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047c8:	e002      	b.n	80047d0 <LoopCopyDataInit>

080047ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ce:	3304      	adds	r3, #4

080047d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047d4:	d3f9      	bcc.n	80047ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047d8:	4c0a      	ldr	r4, [pc, #40]	@ (8004804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047dc:	e001      	b.n	80047e2 <LoopFillZerobss>

080047de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047e0:	3204      	adds	r2, #4

080047e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047e4:	d3fb      	bcc.n	80047de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047e6:	f00a fd23 	bl	800f230 <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 80047ea:	f7ff f825 	bl	8003838 <main>
  bx  lr
 80047ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80047f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80047f8:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80047fc:	08011350 	.word	0x08011350
  ldr r2, =_sbss
 8004800:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8004804:	240007d0 	.word	0x240007d0

08004808 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004808:	e7fe      	b.n	8004808 <ADC3_IRQHandler>
	...

0800480c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004812:	2003      	movs	r0, #3
 8004814:	f000 f98c 	bl	8004b30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004818:	f002 ffda 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <HAL_Init+0x68>)
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	4913      	ldr	r1, [pc, #76]	@ (8004878 <HAL_Init+0x6c>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004836:	4b0f      	ldr	r3, [pc, #60]	@ (8004874 <HAL_Init+0x68>)
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	4a0e      	ldr	r2, [pc, #56]	@ (8004878 <HAL_Init+0x6c>)
 8004840:	5cd3      	ldrb	r3, [r2, r3]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
 800484c:	4a0b      	ldr	r2, [pc, #44]	@ (800487c <HAL_Init+0x70>)
 800484e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004850:	4a0b      	ldr	r2, [pc, #44]	@ (8004880 <HAL_Init+0x74>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004856:	2000      	movs	r0, #0
 8004858:	f000 f814 	bl	8004884 <HAL_InitTick>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e002      	b.n	800486c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004866:	f7ff fb29 	bl	8003ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	58024400 	.word	0x58024400
 8004878:	08010ff0 	.word	0x08010ff0
 800487c:	24000004 	.word	0x24000004
 8004880:	24000000 	.word	0x24000000

08004884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800488c:	4b15      	ldr	r3, [pc, #84]	@ (80048e4 <HAL_InitTick+0x60>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e021      	b.n	80048dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004898:	4b13      	ldr	r3, [pc, #76]	@ (80048e8 <HAL_InitTick+0x64>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4b11      	ldr	r3, [pc, #68]	@ (80048e4 <HAL_InitTick+0x60>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	4619      	mov	r1, r3
 80048a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f971 	bl	8004b96 <HAL_SYSTICK_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e00e      	b.n	80048dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	d80a      	bhi.n	80048da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048c4:	2200      	movs	r2, #0
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	f000 f93b 	bl	8004b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048d0:	4a06      	ldr	r2, [pc, #24]	@ (80048ec <HAL_InitTick+0x68>)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e000      	b.n	80048dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	2400000c 	.word	0x2400000c
 80048e8:	24000000 	.word	0x24000000
 80048ec:	24000008 	.word	0x24000008

080048f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048f4:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <HAL_IncTick+0x20>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <HAL_IncTick+0x24>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4413      	add	r3, r2
 8004900:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <HAL_IncTick+0x24>)
 8004902:	6013      	str	r3, [r2, #0]
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	2400000c 	.word	0x2400000c
 8004914:	24000638 	.word	0x24000638

08004918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return uwTick;
 800491c:	4b03      	ldr	r3, [pc, #12]	@ (800492c <HAL_GetTick+0x14>)
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	4618      	mov	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	24000638 	.word	0x24000638

08004930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004938:	f7ff ffee 	bl	8004918 <HAL_GetTick>
 800493c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d005      	beq.n	8004956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800494a:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <HAL_Delay+0x44>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004956:	bf00      	nop
 8004958:	f7ff ffde 	bl	8004918 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	429a      	cmp	r2, r3
 8004966:	d8f7      	bhi.n	8004958 <HAL_Delay+0x28>
  {
  }
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	2400000c 	.word	0x2400000c

08004978 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800497c:	4b03      	ldr	r3, [pc, #12]	@ (800498c <HAL_GetREVID+0x14>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	0c1b      	lsrs	r3, r3, #16
}
 8004982:	4618      	mov	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	5c001000 	.word	0x5c001000

08004990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <__NVIC_SetPriorityGrouping+0x40>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049ac:	4013      	ands	r3, r2
 80049ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049b8:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <__NVIC_SetPriorityGrouping+0x44>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049be:	4a04      	ldr	r2, [pc, #16]	@ (80049d0 <__NVIC_SetPriorityGrouping+0x40>)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	60d3      	str	r3, [r2, #12]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	05fa0000 	.word	0x05fa0000

080049d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <__NVIC_GetPriorityGrouping+0x18>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	f003 0307 	and.w	r3, r3, #7
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000ed00 	.word	0xe000ed00

080049f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	db0b      	blt.n	8004a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	f003 021f 	and.w	r2, r3, #31
 8004a0c:	4907      	ldr	r1, [pc, #28]	@ (8004a2c <__NVIC_EnableIRQ+0x38>)
 8004a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2001      	movs	r0, #1
 8004a16:	fa00 f202 	lsl.w	r2, r0, r2
 8004a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	e000e100 	.word	0xe000e100

08004a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	6039      	str	r1, [r7, #0]
 8004a3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	db0a      	blt.n	8004a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	490c      	ldr	r1, [pc, #48]	@ (8004a7c <__NVIC_SetPriority+0x4c>)
 8004a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a4e:	0112      	lsls	r2, r2, #4
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	440b      	add	r3, r1
 8004a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a58:	e00a      	b.n	8004a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4908      	ldr	r1, [pc, #32]	@ (8004a80 <__NVIC_SetPriority+0x50>)
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	3b04      	subs	r3, #4
 8004a68:	0112      	lsls	r2, r2, #4
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	761a      	strb	r2, [r3, #24]
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000e100 	.word	0xe000e100
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	@ 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f1c3 0307 	rsb	r3, r3, #7
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	bf28      	it	cs
 8004aa2:	2304      	movcs	r3, #4
 8004aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	2b06      	cmp	r3, #6
 8004aac:	d902      	bls.n	8004ab4 <NVIC_EncodePriority+0x30>
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	3b03      	subs	r3, #3
 8004ab2:	e000      	b.n	8004ab6 <NVIC_EncodePriority+0x32>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004acc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad6:	43d9      	mvns	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004adc:	4313      	orrs	r3, r2
         );
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3724      	adds	r7, #36	@ 0x24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004afc:	d301      	bcc.n	8004b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004afe:	2301      	movs	r3, #1
 8004b00:	e00f      	b.n	8004b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b02:	4a0a      	ldr	r2, [pc, #40]	@ (8004b2c <SysTick_Config+0x40>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b0a:	210f      	movs	r1, #15
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	f7ff ff8e 	bl	8004a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <SysTick_Config+0x40>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b1a:	4b04      	ldr	r3, [pc, #16]	@ (8004b2c <SysTick_Config+0x40>)
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	e000e010 	.word	0xe000e010

08004b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ff29 	bl	8004990 <__NVIC_SetPriorityGrouping>
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b54:	f7ff ff40 	bl	80049d8 <__NVIC_GetPriorityGrouping>
 8004b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7ff ff90 	bl	8004a84 <NVIC_EncodePriority>
 8004b64:	4602      	mov	r2, r0
 8004b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff5f 	bl	8004a30 <__NVIC_SetPriority>
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	4603      	mov	r3, r0
 8004b82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff33 	bl	80049f4 <__NVIC_EnableIRQ>
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ffa4 	bl	8004aec <SysTick_Config>
 8004ba4:	4603      	mov	r3, r0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004bb8:	f7ff feae 	bl	8004918 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e316      	b.n	80051f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a66      	ldr	r2, [pc, #408]	@ (8004d68 <HAL_DMA_Init+0x1b8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d04a      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a65      	ldr	r2, [pc, #404]	@ (8004d6c <HAL_DMA_Init+0x1bc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d045      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a63      	ldr	r2, [pc, #396]	@ (8004d70 <HAL_DMA_Init+0x1c0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d040      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a62      	ldr	r2, [pc, #392]	@ (8004d74 <HAL_DMA_Init+0x1c4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d03b      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a60      	ldr	r2, [pc, #384]	@ (8004d78 <HAL_DMA_Init+0x1c8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d036      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a5f      	ldr	r2, [pc, #380]	@ (8004d7c <HAL_DMA_Init+0x1cc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d031      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a5d      	ldr	r2, [pc, #372]	@ (8004d80 <HAL_DMA_Init+0x1d0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d02c      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a5c      	ldr	r2, [pc, #368]	@ (8004d84 <HAL_DMA_Init+0x1d4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d027      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a5a      	ldr	r2, [pc, #360]	@ (8004d88 <HAL_DMA_Init+0x1d8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d022      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a59      	ldr	r2, [pc, #356]	@ (8004d8c <HAL_DMA_Init+0x1dc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d01d      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a57      	ldr	r2, [pc, #348]	@ (8004d90 <HAL_DMA_Init+0x1e0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a56      	ldr	r2, [pc, #344]	@ (8004d94 <HAL_DMA_Init+0x1e4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a54      	ldr	r2, [pc, #336]	@ (8004d98 <HAL_DMA_Init+0x1e8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a53      	ldr	r2, [pc, #332]	@ (8004d9c <HAL_DMA_Init+0x1ec>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a51      	ldr	r2, [pc, #324]	@ (8004da0 <HAL_DMA_Init+0x1f0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_DMA_Init+0xb8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a50      	ldr	r2, [pc, #320]	@ (8004da4 <HAL_DMA_Init+0x1f4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d101      	bne.n	8004c6c <HAL_DMA_Init+0xbc>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <HAL_DMA_Init+0xbe>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 813b 	beq.w	8004eea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a37      	ldr	r2, [pc, #220]	@ (8004d68 <HAL_DMA_Init+0x1b8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d04a      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a36      	ldr	r2, [pc, #216]	@ (8004d6c <HAL_DMA_Init+0x1bc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d045      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a34      	ldr	r2, [pc, #208]	@ (8004d70 <HAL_DMA_Init+0x1c0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d040      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a33      	ldr	r2, [pc, #204]	@ (8004d74 <HAL_DMA_Init+0x1c4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d03b      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a31      	ldr	r2, [pc, #196]	@ (8004d78 <HAL_DMA_Init+0x1c8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d036      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a30      	ldr	r2, [pc, #192]	@ (8004d7c <HAL_DMA_Init+0x1cc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d031      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8004d80 <HAL_DMA_Init+0x1d0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d02c      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a2d      	ldr	r2, [pc, #180]	@ (8004d84 <HAL_DMA_Init+0x1d4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d027      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d88 <HAL_DMA_Init+0x1d8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d022      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8004d8c <HAL_DMA_Init+0x1dc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d01d      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a28      	ldr	r2, [pc, #160]	@ (8004d90 <HAL_DMA_Init+0x1e0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d018      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a27      	ldr	r2, [pc, #156]	@ (8004d94 <HAL_DMA_Init+0x1e4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a25      	ldr	r2, [pc, #148]	@ (8004d98 <HAL_DMA_Init+0x1e8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a24      	ldr	r2, [pc, #144]	@ (8004d9c <HAL_DMA_Init+0x1ec>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <HAL_DMA_Init+0x1f0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_DMA_Init+0x174>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a21      	ldr	r2, [pc, #132]	@ (8004da4 <HAL_DMA_Init+0x1f4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d108      	bne.n	8004d36 <HAL_DMA_Init+0x186>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	e007      	b.n	8004d46 <HAL_DMA_Init+0x196>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d46:	e02f      	b.n	8004da8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d48:	f7ff fde6 	bl	8004918 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b05      	cmp	r3, #5
 8004d54:	d928      	bls.n	8004da8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e246      	b.n	80051f6 <HAL_DMA_Init+0x646>
 8004d68:	40020010 	.word	0x40020010
 8004d6c:	40020028 	.word	0x40020028
 8004d70:	40020040 	.word	0x40020040
 8004d74:	40020058 	.word	0x40020058
 8004d78:	40020070 	.word	0x40020070
 8004d7c:	40020088 	.word	0x40020088
 8004d80:	400200a0 	.word	0x400200a0
 8004d84:	400200b8 	.word	0x400200b8
 8004d88:	40020410 	.word	0x40020410
 8004d8c:	40020428 	.word	0x40020428
 8004d90:	40020440 	.word	0x40020440
 8004d94:	40020458 	.word	0x40020458
 8004d98:	40020470 	.word	0x40020470
 8004d9c:	40020488 	.word	0x40020488
 8004da0:	400204a0 	.word	0x400204a0
 8004da4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1c8      	bne.n	8004d48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4b83      	ldr	r3, [pc, #524]	@ (8004fd0 <HAL_DMA_Init+0x420>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004dce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d107      	bne.n	8004e0c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	4313      	orrs	r3, r2
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004e0c:	4b71      	ldr	r3, [pc, #452]	@ (8004fd4 <HAL_DMA_Init+0x424>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b71      	ldr	r3, [pc, #452]	@ (8004fd8 <HAL_DMA_Init+0x428>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e18:	d328      	bcc.n	8004e6c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b28      	cmp	r3, #40	@ 0x28
 8004e20:	d903      	bls.n	8004e2a <HAL_DMA_Init+0x27a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e28:	d917      	bls.n	8004e5a <HAL_DMA_Init+0x2aa>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e30:	d903      	bls.n	8004e3a <HAL_DMA_Init+0x28a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b42      	cmp	r3, #66	@ 0x42
 8004e38:	d90f      	bls.n	8004e5a <HAL_DMA_Init+0x2aa>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b46      	cmp	r3, #70	@ 0x46
 8004e40:	d903      	bls.n	8004e4a <HAL_DMA_Init+0x29a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b48      	cmp	r3, #72	@ 0x48
 8004e48:	d907      	bls.n	8004e5a <HAL_DMA_Init+0x2aa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e50:	d905      	bls.n	8004e5e <HAL_DMA_Init+0x2ae>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b52      	cmp	r3, #82	@ 0x52
 8004e58:	d801      	bhi.n	8004e5e <HAL_DMA_Init+0x2ae>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <HAL_DMA_Init+0x2b0>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e6a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0307 	bic.w	r3, r3, #7
 8004e82:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d117      	bne.n	8004ec6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 f9b9 	bl	8006220 <DMA_CheckFifoParam>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2240      	movs	r2, #64	@ 0x40
 8004eb8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e197      	b.n	80051f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 f8f4 	bl	80060bc <DMA_CalcBaseAndBitshift>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	223f      	movs	r2, #63	@ 0x3f
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	e0cd      	b.n	8005086 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3b      	ldr	r2, [pc, #236]	@ (8004fdc <HAL_DMA_Init+0x42c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d022      	beq.n	8004f3a <HAL_DMA_Init+0x38a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a39      	ldr	r2, [pc, #228]	@ (8004fe0 <HAL_DMA_Init+0x430>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01d      	beq.n	8004f3a <HAL_DMA_Init+0x38a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a38      	ldr	r2, [pc, #224]	@ (8004fe4 <HAL_DMA_Init+0x434>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d018      	beq.n	8004f3a <HAL_DMA_Init+0x38a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a36      	ldr	r2, [pc, #216]	@ (8004fe8 <HAL_DMA_Init+0x438>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_DMA_Init+0x38a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a35      	ldr	r2, [pc, #212]	@ (8004fec <HAL_DMA_Init+0x43c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_DMA_Init+0x38a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a33      	ldr	r2, [pc, #204]	@ (8004ff0 <HAL_DMA_Init+0x440>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_DMA_Init+0x38a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a32      	ldr	r2, [pc, #200]	@ (8004ff4 <HAL_DMA_Init+0x444>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_DMA_Init+0x38a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a30      	ldr	r2, [pc, #192]	@ (8004ff8 <HAL_DMA_Init+0x448>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <HAL_DMA_Init+0x38e>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_DMA_Init+0x390>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8097 	beq.w	8005074 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a24      	ldr	r2, [pc, #144]	@ (8004fdc <HAL_DMA_Init+0x42c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d021      	beq.n	8004f94 <HAL_DMA_Init+0x3e4>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a22      	ldr	r2, [pc, #136]	@ (8004fe0 <HAL_DMA_Init+0x430>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01c      	beq.n	8004f94 <HAL_DMA_Init+0x3e4>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a21      	ldr	r2, [pc, #132]	@ (8004fe4 <HAL_DMA_Init+0x434>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d017      	beq.n	8004f94 <HAL_DMA_Init+0x3e4>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe8 <HAL_DMA_Init+0x438>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d012      	beq.n	8004f94 <HAL_DMA_Init+0x3e4>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1e      	ldr	r2, [pc, #120]	@ (8004fec <HAL_DMA_Init+0x43c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00d      	beq.n	8004f94 <HAL_DMA_Init+0x3e4>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff0 <HAL_DMA_Init+0x440>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d008      	beq.n	8004f94 <HAL_DMA_Init+0x3e4>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff4 <HAL_DMA_Init+0x444>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <HAL_DMA_Init+0x3e4>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <HAL_DMA_Init+0x448>)
 8004f92:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4b13      	ldr	r3, [pc, #76]	@ (8004ffc <HAL_DMA_Init+0x44c>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b40      	cmp	r3, #64	@ 0x40
 8004fba:	d021      	beq.n	8005000 <HAL_DMA_Init+0x450>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b80      	cmp	r3, #128	@ 0x80
 8004fc2:	d102      	bne.n	8004fca <HAL_DMA_Init+0x41a>
 8004fc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fc8:	e01b      	b.n	8005002 <HAL_DMA_Init+0x452>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e019      	b.n	8005002 <HAL_DMA_Init+0x452>
 8004fce:	bf00      	nop
 8004fd0:	fe10803f 	.word	0xfe10803f
 8004fd4:	5c001000 	.word	0x5c001000
 8004fd8:	ffff0000 	.word	0xffff0000
 8004fdc:	58025408 	.word	0x58025408
 8004fe0:	5802541c 	.word	0x5802541c
 8004fe4:	58025430 	.word	0x58025430
 8004fe8:	58025444 	.word	0x58025444
 8004fec:	58025458 	.word	0x58025458
 8004ff0:	5802546c 	.word	0x5802546c
 8004ff4:	58025480 	.word	0x58025480
 8004ff8:	58025494 	.word	0x58025494
 8004ffc:	fffe000f 	.word	0xfffe000f
 8005000:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68d2      	ldr	r2, [r2, #12]
 8005006:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005020:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005028:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005030:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	4b6e      	ldr	r3, [pc, #440]	@ (8005200 <HAL_DMA_Init+0x650>)
 8005048:	4413      	add	r3, r2
 800504a:	4a6e      	ldr	r2, [pc, #440]	@ (8005204 <HAL_DMA_Init+0x654>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	009a      	lsls	r2, r3, #2
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f001 f82f 	bl	80060bc <DMA_CalcBaseAndBitshift>
 800505e:	4603      	mov	r3, r0
 8005060:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2201      	movs	r2, #1
 800506c:	409a      	lsls	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	e008      	b.n	8005086 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2240      	movs	r2, #64	@ 0x40
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2203      	movs	r2, #3
 800507e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0b7      	b.n	80051f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a5f      	ldr	r2, [pc, #380]	@ (8005208 <HAL_DMA_Init+0x658>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d072      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5d      	ldr	r2, [pc, #372]	@ (800520c <HAL_DMA_Init+0x65c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d06d      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a5c      	ldr	r2, [pc, #368]	@ (8005210 <HAL_DMA_Init+0x660>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d068      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005214 <HAL_DMA_Init+0x664>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d063      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a59      	ldr	r2, [pc, #356]	@ (8005218 <HAL_DMA_Init+0x668>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d05e      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a57      	ldr	r2, [pc, #348]	@ (800521c <HAL_DMA_Init+0x66c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d059      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a56      	ldr	r2, [pc, #344]	@ (8005220 <HAL_DMA_Init+0x670>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d054      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a54      	ldr	r2, [pc, #336]	@ (8005224 <HAL_DMA_Init+0x674>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d04f      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a53      	ldr	r2, [pc, #332]	@ (8005228 <HAL_DMA_Init+0x678>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d04a      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a51      	ldr	r2, [pc, #324]	@ (800522c <HAL_DMA_Init+0x67c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d045      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a50      	ldr	r2, [pc, #320]	@ (8005230 <HAL_DMA_Init+0x680>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d040      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a4e      	ldr	r2, [pc, #312]	@ (8005234 <HAL_DMA_Init+0x684>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d03b      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a4d      	ldr	r2, [pc, #308]	@ (8005238 <HAL_DMA_Init+0x688>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d036      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a4b      	ldr	r2, [pc, #300]	@ (800523c <HAL_DMA_Init+0x68c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d031      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a4a      	ldr	r2, [pc, #296]	@ (8005240 <HAL_DMA_Init+0x690>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d02c      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a48      	ldr	r2, [pc, #288]	@ (8005244 <HAL_DMA_Init+0x694>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d027      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a47      	ldr	r2, [pc, #284]	@ (8005248 <HAL_DMA_Init+0x698>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d022      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a45      	ldr	r2, [pc, #276]	@ (800524c <HAL_DMA_Init+0x69c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01d      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a44      	ldr	r2, [pc, #272]	@ (8005250 <HAL_DMA_Init+0x6a0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d018      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a42      	ldr	r2, [pc, #264]	@ (8005254 <HAL_DMA_Init+0x6a4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a41      	ldr	r2, [pc, #260]	@ (8005258 <HAL_DMA_Init+0x6a8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3f      	ldr	r2, [pc, #252]	@ (800525c <HAL_DMA_Init+0x6ac>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a3e      	ldr	r2, [pc, #248]	@ (8005260 <HAL_DMA_Init+0x6b0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_DMA_Init+0x5c6>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <HAL_DMA_Init+0x6b4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d101      	bne.n	800517a <HAL_DMA_Init+0x5ca>
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_DMA_Init+0x5cc>
 800517a:	2300      	movs	r3, #0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d032      	beq.n	80051e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 f8c9 	bl	8006318 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b80      	cmp	r3, #128	@ 0x80
 800518c:	d102      	bne.n	8005194 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d010      	beq.n	80051d4 <HAL_DMA_Init+0x624>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d80c      	bhi.n	80051d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 f946 	bl	800644c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	e008      	b.n	80051e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	a7fdabf8 	.word	0xa7fdabf8
 8005204:	cccccccd 	.word	0xcccccccd
 8005208:	40020010 	.word	0x40020010
 800520c:	40020028 	.word	0x40020028
 8005210:	40020040 	.word	0x40020040
 8005214:	40020058 	.word	0x40020058
 8005218:	40020070 	.word	0x40020070
 800521c:	40020088 	.word	0x40020088
 8005220:	400200a0 	.word	0x400200a0
 8005224:	400200b8 	.word	0x400200b8
 8005228:	40020410 	.word	0x40020410
 800522c:	40020428 	.word	0x40020428
 8005230:	40020440 	.word	0x40020440
 8005234:	40020458 	.word	0x40020458
 8005238:	40020470 	.word	0x40020470
 800523c:	40020488 	.word	0x40020488
 8005240:	400204a0 	.word	0x400204a0
 8005244:	400204b8 	.word	0x400204b8
 8005248:	58025408 	.word	0x58025408
 800524c:	5802541c 	.word	0x5802541c
 8005250:	58025430 	.word	0x58025430
 8005254:	58025444 	.word	0x58025444
 8005258:	58025458 	.word	0x58025458
 800525c:	5802546c 	.word	0x5802546c
 8005260:	58025480 	.word	0x58025480
 8005264:	58025494 	.word	0x58025494

08005268 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	@ 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005274:	4b67      	ldr	r3, [pc, #412]	@ (8005414 <HAL_DMA_IRQHandler+0x1ac>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a67      	ldr	r2, [pc, #412]	@ (8005418 <HAL_DMA_IRQHandler+0x1b0>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	0a9b      	lsrs	r3, r3, #10
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a5f      	ldr	r2, [pc, #380]	@ (800541c <HAL_DMA_IRQHandler+0x1b4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d04a      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a5d      	ldr	r2, [pc, #372]	@ (8005420 <HAL_DMA_IRQHandler+0x1b8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d045      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a5c      	ldr	r2, [pc, #368]	@ (8005424 <HAL_DMA_IRQHandler+0x1bc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d040      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a5a      	ldr	r2, [pc, #360]	@ (8005428 <HAL_DMA_IRQHandler+0x1c0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d03b      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a59      	ldr	r2, [pc, #356]	@ (800542c <HAL_DMA_IRQHandler+0x1c4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d036      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a57      	ldr	r2, [pc, #348]	@ (8005430 <HAL_DMA_IRQHandler+0x1c8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d031      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a56      	ldr	r2, [pc, #344]	@ (8005434 <HAL_DMA_IRQHandler+0x1cc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d02c      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a54      	ldr	r2, [pc, #336]	@ (8005438 <HAL_DMA_IRQHandler+0x1d0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d027      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a53      	ldr	r2, [pc, #332]	@ (800543c <HAL_DMA_IRQHandler+0x1d4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a51      	ldr	r2, [pc, #324]	@ (8005440 <HAL_DMA_IRQHandler+0x1d8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01d      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a50      	ldr	r2, [pc, #320]	@ (8005444 <HAL_DMA_IRQHandler+0x1dc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a4e      	ldr	r2, [pc, #312]	@ (8005448 <HAL_DMA_IRQHandler+0x1e0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a4d      	ldr	r2, [pc, #308]	@ (800544c <HAL_DMA_IRQHandler+0x1e4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a4b      	ldr	r2, [pc, #300]	@ (8005450 <HAL_DMA_IRQHandler+0x1e8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a4a      	ldr	r2, [pc, #296]	@ (8005454 <HAL_DMA_IRQHandler+0x1ec>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_DMA_IRQHandler+0xd2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a48      	ldr	r2, [pc, #288]	@ (8005458 <HAL_DMA_IRQHandler+0x1f0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <HAL_DMA_IRQHandler+0xd6>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_DMA_IRQHandler+0xd8>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 842b 	beq.w	8005b9c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	2208      	movs	r2, #8
 8005350:	409a      	lsls	r2, r3
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 80a2 	beq.w	80054a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2e      	ldr	r2, [pc, #184]	@ (800541c <HAL_DMA_IRQHandler+0x1b4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d04a      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2d      	ldr	r2, [pc, #180]	@ (8005420 <HAL_DMA_IRQHandler+0x1b8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d045      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2b      	ldr	r2, [pc, #172]	@ (8005424 <HAL_DMA_IRQHandler+0x1bc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d040      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2a      	ldr	r2, [pc, #168]	@ (8005428 <HAL_DMA_IRQHandler+0x1c0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d03b      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a28      	ldr	r2, [pc, #160]	@ (800542c <HAL_DMA_IRQHandler+0x1c4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d036      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a27      	ldr	r2, [pc, #156]	@ (8005430 <HAL_DMA_IRQHandler+0x1c8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d031      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a25      	ldr	r2, [pc, #148]	@ (8005434 <HAL_DMA_IRQHandler+0x1cc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d02c      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a24      	ldr	r2, [pc, #144]	@ (8005438 <HAL_DMA_IRQHandler+0x1d0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d027      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a22      	ldr	r2, [pc, #136]	@ (800543c <HAL_DMA_IRQHandler+0x1d4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d022      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a21      	ldr	r2, [pc, #132]	@ (8005440 <HAL_DMA_IRQHandler+0x1d8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d01d      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005444 <HAL_DMA_IRQHandler+0x1dc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d018      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005448 <HAL_DMA_IRQHandler+0x1e0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1c      	ldr	r2, [pc, #112]	@ (800544c <HAL_DMA_IRQHandler+0x1e4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00e      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005450 <HAL_DMA_IRQHandler+0x1e8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a19      	ldr	r2, [pc, #100]	@ (8005454 <HAL_DMA_IRQHandler+0x1ec>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_DMA_IRQHandler+0x194>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a18      	ldr	r2, [pc, #96]	@ (8005458 <HAL_DMA_IRQHandler+0x1f0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d12f      	bne.n	800545c <HAL_DMA_IRQHandler+0x1f4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	bf14      	ite	ne
 800540a:	2301      	movne	r3, #1
 800540c:	2300      	moveq	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	e02e      	b.n	8005470 <HAL_DMA_IRQHandler+0x208>
 8005412:	bf00      	nop
 8005414:	24000000 	.word	0x24000000
 8005418:	1b4e81b5 	.word	0x1b4e81b5
 800541c:	40020010 	.word	0x40020010
 8005420:	40020028 	.word	0x40020028
 8005424:	40020040 	.word	0x40020040
 8005428:	40020058 	.word	0x40020058
 800542c:	40020070 	.word	0x40020070
 8005430:	40020088 	.word	0x40020088
 8005434:	400200a0 	.word	0x400200a0
 8005438:	400200b8 	.word	0x400200b8
 800543c:	40020410 	.word	0x40020410
 8005440:	40020428 	.word	0x40020428
 8005444:	40020440 	.word	0x40020440
 8005448:	40020458 	.word	0x40020458
 800544c:	40020470 	.word	0x40020470
 8005450:	40020488 	.word	0x40020488
 8005454:	400204a0 	.word	0x400204a0
 8005458:	400204b8 	.word	0x400204b8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf14      	ite	ne
 800546a:	2301      	movne	r3, #1
 800546c:	2300      	moveq	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0204 	bic.w	r2, r2, #4
 8005482:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2208      	movs	r2, #8
 800548e:	409a      	lsls	r2, r3
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	fa22 f303 	lsr.w	r3, r2, r3
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d06e      	beq.n	8005594 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a69      	ldr	r2, [pc, #420]	@ (8005660 <HAL_DMA_IRQHandler+0x3f8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d04a      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a67      	ldr	r2, [pc, #412]	@ (8005664 <HAL_DMA_IRQHandler+0x3fc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d045      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a66      	ldr	r2, [pc, #408]	@ (8005668 <HAL_DMA_IRQHandler+0x400>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d040      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a64      	ldr	r2, [pc, #400]	@ (800566c <HAL_DMA_IRQHandler+0x404>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d03b      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a63      	ldr	r2, [pc, #396]	@ (8005670 <HAL_DMA_IRQHandler+0x408>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d036      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a61      	ldr	r2, [pc, #388]	@ (8005674 <HAL_DMA_IRQHandler+0x40c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d031      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a60      	ldr	r2, [pc, #384]	@ (8005678 <HAL_DMA_IRQHandler+0x410>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d02c      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a5e      	ldr	r2, [pc, #376]	@ (800567c <HAL_DMA_IRQHandler+0x414>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d027      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a5d      	ldr	r2, [pc, #372]	@ (8005680 <HAL_DMA_IRQHandler+0x418>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d022      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a5b      	ldr	r2, [pc, #364]	@ (8005684 <HAL_DMA_IRQHandler+0x41c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d01d      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a5a      	ldr	r2, [pc, #360]	@ (8005688 <HAL_DMA_IRQHandler+0x420>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d018      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a58      	ldr	r2, [pc, #352]	@ (800568c <HAL_DMA_IRQHandler+0x424>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a57      	ldr	r2, [pc, #348]	@ (8005690 <HAL_DMA_IRQHandler+0x428>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a55      	ldr	r2, [pc, #340]	@ (8005694 <HAL_DMA_IRQHandler+0x42c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a54      	ldr	r2, [pc, #336]	@ (8005698 <HAL_DMA_IRQHandler+0x430>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_DMA_IRQHandler+0x2ee>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a52      	ldr	r2, [pc, #328]	@ (800569c <HAL_DMA_IRQHandler+0x434>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d10a      	bne.n	800556c <HAL_DMA_IRQHandler+0x304>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005560:	2b00      	cmp	r3, #0
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e003      	b.n	8005574 <HAL_DMA_IRQHandler+0x30c>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2300      	movs	r3, #0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	2201      	movs	r2, #1
 8005582:	409a      	lsls	r2, r3
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558c:	f043 0202 	orr.w	r2, r3, #2
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2204      	movs	r2, #4
 800559e:	409a      	lsls	r2, r3
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 808f 	beq.w	80056c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005660 <HAL_DMA_IRQHandler+0x3f8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04a      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005664 <HAL_DMA_IRQHandler+0x3fc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d045      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a29      	ldr	r2, [pc, #164]	@ (8005668 <HAL_DMA_IRQHandler+0x400>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a27      	ldr	r2, [pc, #156]	@ (800566c <HAL_DMA_IRQHandler+0x404>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d03b      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a26      	ldr	r2, [pc, #152]	@ (8005670 <HAL_DMA_IRQHandler+0x408>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d036      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a24      	ldr	r2, [pc, #144]	@ (8005674 <HAL_DMA_IRQHandler+0x40c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a23      	ldr	r2, [pc, #140]	@ (8005678 <HAL_DMA_IRQHandler+0x410>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02c      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a21      	ldr	r2, [pc, #132]	@ (800567c <HAL_DMA_IRQHandler+0x414>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d027      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a20      	ldr	r2, [pc, #128]	@ (8005680 <HAL_DMA_IRQHandler+0x418>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1e      	ldr	r2, [pc, #120]	@ (8005684 <HAL_DMA_IRQHandler+0x41c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1d      	ldr	r2, [pc, #116]	@ (8005688 <HAL_DMA_IRQHandler+0x420>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <HAL_DMA_IRQHandler+0x424>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1a      	ldr	r2, [pc, #104]	@ (8005690 <HAL_DMA_IRQHandler+0x428>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a18      	ldr	r2, [pc, #96]	@ (8005694 <HAL_DMA_IRQHandler+0x42c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a17      	ldr	r2, [pc, #92]	@ (8005698 <HAL_DMA_IRQHandler+0x430>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_DMA_IRQHandler+0x3e2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a15      	ldr	r2, [pc, #84]	@ (800569c <HAL_DMA_IRQHandler+0x434>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d12a      	bne.n	80056a0 <HAL_DMA_IRQHandler+0x438>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e023      	b.n	80056a8 <HAL_DMA_IRQHandler+0x440>
 8005660:	40020010 	.word	0x40020010
 8005664:	40020028 	.word	0x40020028
 8005668:	40020040 	.word	0x40020040
 800566c:	40020058 	.word	0x40020058
 8005670:	40020070 	.word	0x40020070
 8005674:	40020088 	.word	0x40020088
 8005678:	400200a0 	.word	0x400200a0
 800567c:	400200b8 	.word	0x400200b8
 8005680:	40020410 	.word	0x40020410
 8005684:	40020428 	.word	0x40020428
 8005688:	40020440 	.word	0x40020440
 800568c:	40020458 	.word	0x40020458
 8005690:	40020470 	.word	0x40020470
 8005694:	40020488 	.word	0x40020488
 8005698:	400204a0 	.word	0x400204a0
 800569c:	400204b8 	.word	0x400204b8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00d      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	2204      	movs	r2, #4
 80056b6:	409a      	lsls	r2, r3
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	f043 0204 	orr.w	r2, r3, #4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	2210      	movs	r2, #16
 80056d2:	409a      	lsls	r2, r3
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80a6 	beq.w	800582a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a85      	ldr	r2, [pc, #532]	@ (80058f8 <HAL_DMA_IRQHandler+0x690>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d04a      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a83      	ldr	r2, [pc, #524]	@ (80058fc <HAL_DMA_IRQHandler+0x694>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d045      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a82      	ldr	r2, [pc, #520]	@ (8005900 <HAL_DMA_IRQHandler+0x698>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d040      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a80      	ldr	r2, [pc, #512]	@ (8005904 <HAL_DMA_IRQHandler+0x69c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d03b      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a7f      	ldr	r2, [pc, #508]	@ (8005908 <HAL_DMA_IRQHandler+0x6a0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d036      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a7d      	ldr	r2, [pc, #500]	@ (800590c <HAL_DMA_IRQHandler+0x6a4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d031      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7c      	ldr	r2, [pc, #496]	@ (8005910 <HAL_DMA_IRQHandler+0x6a8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d02c      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a7a      	ldr	r2, [pc, #488]	@ (8005914 <HAL_DMA_IRQHandler+0x6ac>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d027      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a79      	ldr	r2, [pc, #484]	@ (8005918 <HAL_DMA_IRQHandler+0x6b0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d022      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a77      	ldr	r2, [pc, #476]	@ (800591c <HAL_DMA_IRQHandler+0x6b4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d01d      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a76      	ldr	r2, [pc, #472]	@ (8005920 <HAL_DMA_IRQHandler+0x6b8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d018      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a74      	ldr	r2, [pc, #464]	@ (8005924 <HAL_DMA_IRQHandler+0x6bc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a73      	ldr	r2, [pc, #460]	@ (8005928 <HAL_DMA_IRQHandler+0x6c0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a71      	ldr	r2, [pc, #452]	@ (800592c <HAL_DMA_IRQHandler+0x6c4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d009      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a70      	ldr	r2, [pc, #448]	@ (8005930 <HAL_DMA_IRQHandler+0x6c8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_DMA_IRQHandler+0x516>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a6e      	ldr	r2, [pc, #440]	@ (8005934 <HAL_DMA_IRQHandler+0x6cc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d10a      	bne.n	8005794 <HAL_DMA_IRQHandler+0x52c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	e009      	b.n	80057a8 <HAL_DMA_IRQHandler+0x540>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d03e      	beq.n	800582a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	2210      	movs	r2, #16
 80057b6:	409a      	lsls	r2, r3
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d018      	beq.n	80057fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d108      	bne.n	80057ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d024      	beq.n	800582a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
 80057e8:	e01f      	b.n	800582a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d01b      	beq.n	800582a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4798      	blx	r3
 80057fa:	e016      	b.n	800582a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d107      	bne.n	800581a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0208 	bic.w	r2, r2, #8
 8005818:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2220      	movs	r2, #32
 8005834:	409a      	lsls	r2, r3
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8110 	beq.w	8005a60 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2c      	ldr	r2, [pc, #176]	@ (80058f8 <HAL_DMA_IRQHandler+0x690>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d04a      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2b      	ldr	r2, [pc, #172]	@ (80058fc <HAL_DMA_IRQHandler+0x694>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d045      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a29      	ldr	r2, [pc, #164]	@ (8005900 <HAL_DMA_IRQHandler+0x698>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d040      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a28      	ldr	r2, [pc, #160]	@ (8005904 <HAL_DMA_IRQHandler+0x69c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d03b      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a26      	ldr	r2, [pc, #152]	@ (8005908 <HAL_DMA_IRQHandler+0x6a0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d036      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a25      	ldr	r2, [pc, #148]	@ (800590c <HAL_DMA_IRQHandler+0x6a4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d031      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a23      	ldr	r2, [pc, #140]	@ (8005910 <HAL_DMA_IRQHandler+0x6a8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d02c      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a22      	ldr	r2, [pc, #136]	@ (8005914 <HAL_DMA_IRQHandler+0x6ac>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d027      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a20      	ldr	r2, [pc, #128]	@ (8005918 <HAL_DMA_IRQHandler+0x6b0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d022      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1f      	ldr	r2, [pc, #124]	@ (800591c <HAL_DMA_IRQHandler+0x6b4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d01d      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005920 <HAL_DMA_IRQHandler+0x6b8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d018      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005924 <HAL_DMA_IRQHandler+0x6bc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005928 <HAL_DMA_IRQHandler+0x6c0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00e      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a19      	ldr	r2, [pc, #100]	@ (800592c <HAL_DMA_IRQHandler+0x6c4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a17      	ldr	r2, [pc, #92]	@ (8005930 <HAL_DMA_IRQHandler+0x6c8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x678>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a16      	ldr	r2, [pc, #88]	@ (8005934 <HAL_DMA_IRQHandler+0x6cc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d12b      	bne.n	8005938 <HAL_DMA_IRQHandler+0x6d0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bf14      	ite	ne
 80058ee:	2301      	movne	r3, #1
 80058f0:	2300      	moveq	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	e02a      	b.n	800594c <HAL_DMA_IRQHandler+0x6e4>
 80058f6:	bf00      	nop
 80058f8:	40020010 	.word	0x40020010
 80058fc:	40020028 	.word	0x40020028
 8005900:	40020040 	.word	0x40020040
 8005904:	40020058 	.word	0x40020058
 8005908:	40020070 	.word	0x40020070
 800590c:	40020088 	.word	0x40020088
 8005910:	400200a0 	.word	0x400200a0
 8005914:	400200b8 	.word	0x400200b8
 8005918:	40020410 	.word	0x40020410
 800591c:	40020428 	.word	0x40020428
 8005920:	40020440 	.word	0x40020440
 8005924:	40020458 	.word	0x40020458
 8005928:	40020470 	.word	0x40020470
 800592c:	40020488 	.word	0x40020488
 8005930:	400204a0 	.word	0x400204a0
 8005934:	400204b8 	.word	0x400204b8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf14      	ite	ne
 8005946:	2301      	movne	r3, #1
 8005948:	2300      	moveq	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8087 	beq.w	8005a60 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	2220      	movs	r2, #32
 800595c:	409a      	lsls	r2, r3
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b04      	cmp	r3, #4
 800596c:	d139      	bne.n	80059e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0216 	bic.w	r2, r2, #22
 800597c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695a      	ldr	r2, [r3, #20]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800598c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <HAL_DMA_IRQHandler+0x736>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0208 	bic.w	r2, r2, #8
 80059ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	223f      	movs	r2, #63	@ 0x3f
 80059b8:	409a      	lsls	r2, r3
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 834a 	beq.w	800606c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
          }
          return;
 80059e0:	e344      	b.n	800606c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d018      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d02c      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	4798      	blx	r3
 8005a0e:	e027      	b.n	8005a60 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d023      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	4798      	blx	r3
 8005a20:	e01e      	b.n	8005a60 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10f      	bne.n	8005a50 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0210 	bic.w	r2, r2, #16
 8005a3e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8306 	beq.w	8006076 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8088 	beq.w	8005b88 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a7a      	ldr	r2, [pc, #488]	@ (8005c70 <HAL_DMA_IRQHandler+0xa08>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d04a      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a79      	ldr	r2, [pc, #484]	@ (8005c74 <HAL_DMA_IRQHandler+0xa0c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d045      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a77      	ldr	r2, [pc, #476]	@ (8005c78 <HAL_DMA_IRQHandler+0xa10>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d040      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a76      	ldr	r2, [pc, #472]	@ (8005c7c <HAL_DMA_IRQHandler+0xa14>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d03b      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a74      	ldr	r2, [pc, #464]	@ (8005c80 <HAL_DMA_IRQHandler+0xa18>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d036      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a73      	ldr	r2, [pc, #460]	@ (8005c84 <HAL_DMA_IRQHandler+0xa1c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d031      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a71      	ldr	r2, [pc, #452]	@ (8005c88 <HAL_DMA_IRQHandler+0xa20>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d02c      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a70      	ldr	r2, [pc, #448]	@ (8005c8c <HAL_DMA_IRQHandler+0xa24>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d027      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8005c90 <HAL_DMA_IRQHandler+0xa28>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d022      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a6d      	ldr	r2, [pc, #436]	@ (8005c94 <HAL_DMA_IRQHandler+0xa2c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d01d      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a6b      	ldr	r2, [pc, #428]	@ (8005c98 <HAL_DMA_IRQHandler+0xa30>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d018      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a6a      	ldr	r2, [pc, #424]	@ (8005c9c <HAL_DMA_IRQHandler+0xa34>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a68      	ldr	r2, [pc, #416]	@ (8005ca0 <HAL_DMA_IRQHandler+0xa38>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00e      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a67      	ldr	r2, [pc, #412]	@ (8005ca4 <HAL_DMA_IRQHandler+0xa3c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a65      	ldr	r2, [pc, #404]	@ (8005ca8 <HAL_DMA_IRQHandler+0xa40>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_DMA_IRQHandler+0x8b8>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a64      	ldr	r2, [pc, #400]	@ (8005cac <HAL_DMA_IRQHandler+0xa44>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d108      	bne.n	8005b32 <HAL_DMA_IRQHandler+0x8ca>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e007      	b.n	8005b42 <HAL_DMA_IRQHandler+0x8da>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d307      	bcc.n	8005b5e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f2      	bne.n	8005b42 <HAL_DMA_IRQHandler+0x8da>
 8005b5c:	e000      	b.n	8005b60 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005b5e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2203      	movs	r2, #3
 8005b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005b76:	e003      	b.n	8005b80 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8272 	beq.w	8006076 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
 8005b9a:	e26c      	b.n	8006076 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a43      	ldr	r2, [pc, #268]	@ (8005cb0 <HAL_DMA_IRQHandler+0xa48>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d022      	beq.n	8005bec <HAL_DMA_IRQHandler+0x984>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a42      	ldr	r2, [pc, #264]	@ (8005cb4 <HAL_DMA_IRQHandler+0xa4c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d01d      	beq.n	8005bec <HAL_DMA_IRQHandler+0x984>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a40      	ldr	r2, [pc, #256]	@ (8005cb8 <HAL_DMA_IRQHandler+0xa50>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <HAL_DMA_IRQHandler+0x984>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8005cbc <HAL_DMA_IRQHandler+0xa54>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <HAL_DMA_IRQHandler+0x984>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a3d      	ldr	r2, [pc, #244]	@ (8005cc0 <HAL_DMA_IRQHandler+0xa58>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <HAL_DMA_IRQHandler+0x984>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8005cc4 <HAL_DMA_IRQHandler+0xa5c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_DMA_IRQHandler+0x984>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8005cc8 <HAL_DMA_IRQHandler+0xa60>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_DMA_IRQHandler+0x984>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a39      	ldr	r2, [pc, #228]	@ (8005ccc <HAL_DMA_IRQHandler+0xa64>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d101      	bne.n	8005bf0 <HAL_DMA_IRQHandler+0x988>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <HAL_DMA_IRQHandler+0x98a>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 823f 	beq.w	8006076 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2204      	movs	r2, #4
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80cd 	beq.w	8005db0 <HAL_DMA_IRQHandler+0xb48>
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80c7 	beq.w	8005db0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d049      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8210 	beq.w	8006070 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c58:	e20a      	b.n	8006070 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8206 	beq.w	8006070 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c6c:	e200      	b.n	8006070 <HAL_DMA_IRQHandler+0xe08>
 8005c6e:	bf00      	nop
 8005c70:	40020010 	.word	0x40020010
 8005c74:	40020028 	.word	0x40020028
 8005c78:	40020040 	.word	0x40020040
 8005c7c:	40020058 	.word	0x40020058
 8005c80:	40020070 	.word	0x40020070
 8005c84:	40020088 	.word	0x40020088
 8005c88:	400200a0 	.word	0x400200a0
 8005c8c:	400200b8 	.word	0x400200b8
 8005c90:	40020410 	.word	0x40020410
 8005c94:	40020428 	.word	0x40020428
 8005c98:	40020440 	.word	0x40020440
 8005c9c:	40020458 	.word	0x40020458
 8005ca0:	40020470 	.word	0x40020470
 8005ca4:	40020488 	.word	0x40020488
 8005ca8:	400204a0 	.word	0x400204a0
 8005cac:	400204b8 	.word	0x400204b8
 8005cb0:	58025408 	.word	0x58025408
 8005cb4:	5802541c 	.word	0x5802541c
 8005cb8:	58025430 	.word	0x58025430
 8005cbc:	58025444 	.word	0x58025444
 8005cc0:	58025458 	.word	0x58025458
 8005cc4:	5802546c 	.word	0x5802546c
 8005cc8:	58025480 	.word	0x58025480
 8005ccc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d160      	bne.n	8005d9c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a7f      	ldr	r2, [pc, #508]	@ (8005edc <HAL_DMA_IRQHandler+0xc74>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d04a      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ee0 <HAL_DMA_IRQHandler+0xc78>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d045      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ee4 <HAL_DMA_IRQHandler+0xc7c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d040      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a7a      	ldr	r2, [pc, #488]	@ (8005ee8 <HAL_DMA_IRQHandler+0xc80>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d03b      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a79      	ldr	r2, [pc, #484]	@ (8005eec <HAL_DMA_IRQHandler+0xc84>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d036      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a77      	ldr	r2, [pc, #476]	@ (8005ef0 <HAL_DMA_IRQHandler+0xc88>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d031      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a76      	ldr	r2, [pc, #472]	@ (8005ef4 <HAL_DMA_IRQHandler+0xc8c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d02c      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a74      	ldr	r2, [pc, #464]	@ (8005ef8 <HAL_DMA_IRQHandler+0xc90>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d027      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a73      	ldr	r2, [pc, #460]	@ (8005efc <HAL_DMA_IRQHandler+0xc94>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d022      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a71      	ldr	r2, [pc, #452]	@ (8005f00 <HAL_DMA_IRQHandler+0xc98>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01d      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a70      	ldr	r2, [pc, #448]	@ (8005f04 <HAL_DMA_IRQHandler+0xc9c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d018      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8005f08 <HAL_DMA_IRQHandler+0xca0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a6d      	ldr	r2, [pc, #436]	@ (8005f0c <HAL_DMA_IRQHandler+0xca4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00e      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a6b      	ldr	r2, [pc, #428]	@ (8005f10 <HAL_DMA_IRQHandler+0xca8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d009      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a6a      	ldr	r2, [pc, #424]	@ (8005f14 <HAL_DMA_IRQHandler+0xcac>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xb12>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a68      	ldr	r2, [pc, #416]	@ (8005f18 <HAL_DMA_IRQHandler+0xcb0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d108      	bne.n	8005d8c <HAL_DMA_IRQHandler+0xb24>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0208 	bic.w	r2, r2, #8
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e007      	b.n	8005d9c <HAL_DMA_IRQHandler+0xb34>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0204 	bic.w	r2, r2, #4
 8005d9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8165 	beq.w	8006070 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dae:	e15f      	b.n	8006070 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	2202      	movs	r2, #2
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80c5 	beq.w	8005f50 <HAL_DMA_IRQHandler+0xce8>
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80bf 	beq.w	8005f50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2202      	movs	r2, #2
 8005ddc:	409a      	lsls	r2, r3
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d018      	beq.n	8005e1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 813a 	beq.w	8006074 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e08:	e134      	b.n	8006074 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 8130 	beq.w	8006074 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e1c:	e12a      	b.n	8006074 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f040 8089 	bne.w	8005f3c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005edc <HAL_DMA_IRQHandler+0xc74>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d04a      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a29      	ldr	r2, [pc, #164]	@ (8005ee0 <HAL_DMA_IRQHandler+0xc78>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d045      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a28      	ldr	r2, [pc, #160]	@ (8005ee4 <HAL_DMA_IRQHandler+0xc7c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d040      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ee8 <HAL_DMA_IRQHandler+0xc80>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d03b      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a25      	ldr	r2, [pc, #148]	@ (8005eec <HAL_DMA_IRQHandler+0xc84>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d036      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a23      	ldr	r2, [pc, #140]	@ (8005ef0 <HAL_DMA_IRQHandler+0xc88>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d031      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a22      	ldr	r2, [pc, #136]	@ (8005ef4 <HAL_DMA_IRQHandler+0xc8c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d02c      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a20      	ldr	r2, [pc, #128]	@ (8005ef8 <HAL_DMA_IRQHandler+0xc90>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d027      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005efc <HAL_DMA_IRQHandler+0xc94>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d022      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1d      	ldr	r2, [pc, #116]	@ (8005f00 <HAL_DMA_IRQHandler+0xc98>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d01d      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1c      	ldr	r2, [pc, #112]	@ (8005f04 <HAL_DMA_IRQHandler+0xc9c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d018      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005f08 <HAL_DMA_IRQHandler+0xca0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d013      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a19      	ldr	r2, [pc, #100]	@ (8005f0c <HAL_DMA_IRQHandler+0xca4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00e      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a17      	ldr	r2, [pc, #92]	@ (8005f10 <HAL_DMA_IRQHandler+0xca8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d009      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a16      	ldr	r2, [pc, #88]	@ (8005f14 <HAL_DMA_IRQHandler+0xcac>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d004      	beq.n	8005eca <HAL_DMA_IRQHandler+0xc62>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a14      	ldr	r2, [pc, #80]	@ (8005f18 <HAL_DMA_IRQHandler+0xcb0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d128      	bne.n	8005f1c <HAL_DMA_IRQHandler+0xcb4>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0214 	bic.w	r2, r2, #20
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e027      	b.n	8005f2c <HAL_DMA_IRQHandler+0xcc4>
 8005edc:	40020010 	.word	0x40020010
 8005ee0:	40020028 	.word	0x40020028
 8005ee4:	40020040 	.word	0x40020040
 8005ee8:	40020058 	.word	0x40020058
 8005eec:	40020070 	.word	0x40020070
 8005ef0:	40020088 	.word	0x40020088
 8005ef4:	400200a0 	.word	0x400200a0
 8005ef8:	400200b8 	.word	0x400200b8
 8005efc:	40020410 	.word	0x40020410
 8005f00:	40020428 	.word	0x40020428
 8005f04:	40020440 	.word	0x40020440
 8005f08:	40020458 	.word	0x40020458
 8005f0c:	40020470 	.word	0x40020470
 8005f10:	40020488 	.word	0x40020488
 8005f14:	400204a0 	.word	0x400204a0
 8005f18:	400204b8 	.word	0x400204b8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 020a 	bic.w	r2, r2, #10
 8005f2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8097 	beq.w	8006074 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f4e:	e091      	b.n	8006074 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2208      	movs	r2, #8
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8088 	beq.w	8006076 <HAL_DMA_IRQHandler+0xe0e>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8082 	beq.w	8006076 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a41      	ldr	r2, [pc, #260]	@ (800607c <HAL_DMA_IRQHandler+0xe14>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d04a      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a3f      	ldr	r2, [pc, #252]	@ (8006080 <HAL_DMA_IRQHandler+0xe18>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d045      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a3e      	ldr	r2, [pc, #248]	@ (8006084 <HAL_DMA_IRQHandler+0xe1c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d040      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a3c      	ldr	r2, [pc, #240]	@ (8006088 <HAL_DMA_IRQHandler+0xe20>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d03b      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a3b      	ldr	r2, [pc, #236]	@ (800608c <HAL_DMA_IRQHandler+0xe24>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d036      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a39      	ldr	r2, [pc, #228]	@ (8006090 <HAL_DMA_IRQHandler+0xe28>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d031      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a38      	ldr	r2, [pc, #224]	@ (8006094 <HAL_DMA_IRQHandler+0xe2c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d02c      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a36      	ldr	r2, [pc, #216]	@ (8006098 <HAL_DMA_IRQHandler+0xe30>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d027      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a35      	ldr	r2, [pc, #212]	@ (800609c <HAL_DMA_IRQHandler+0xe34>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d022      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a33      	ldr	r2, [pc, #204]	@ (80060a0 <HAL_DMA_IRQHandler+0xe38>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01d      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a32      	ldr	r2, [pc, #200]	@ (80060a4 <HAL_DMA_IRQHandler+0xe3c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d018      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a30      	ldr	r2, [pc, #192]	@ (80060a8 <HAL_DMA_IRQHandler+0xe40>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a2f      	ldr	r2, [pc, #188]	@ (80060ac <HAL_DMA_IRQHandler+0xe44>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80060b0 <HAL_DMA_IRQHandler+0xe48>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a2c      	ldr	r2, [pc, #176]	@ (80060b4 <HAL_DMA_IRQHandler+0xe4c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_DMA_IRQHandler+0xdaa>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2a      	ldr	r2, [pc, #168]	@ (80060b8 <HAL_DMA_IRQHandler+0xe50>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <HAL_DMA_IRQHandler+0xdbc>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 021c 	bic.w	r2, r2, #28
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e007      	b.n	8006034 <HAL_DMA_IRQHandler+0xdcc>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 020e 	bic.w	r2, r2, #14
 8006032:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2201      	movs	r2, #1
 800603e:	409a      	lsls	r2, r3
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
 800606a:	e004      	b.n	8006076 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800606c:	bf00      	nop
 800606e:	e002      	b.n	8006076 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006070:	bf00      	nop
 8006072:	e000      	b.n	8006076 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006074:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006076:	3728      	adds	r7, #40	@ 0x28
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40020010 	.word	0x40020010
 8006080:	40020028 	.word	0x40020028
 8006084:	40020040 	.word	0x40020040
 8006088:	40020058 	.word	0x40020058
 800608c:	40020070 	.word	0x40020070
 8006090:	40020088 	.word	0x40020088
 8006094:	400200a0 	.word	0x400200a0
 8006098:	400200b8 	.word	0x400200b8
 800609c:	40020410 	.word	0x40020410
 80060a0:	40020428 	.word	0x40020428
 80060a4:	40020440 	.word	0x40020440
 80060a8:	40020458 	.word	0x40020458
 80060ac:	40020470 	.word	0x40020470
 80060b0:	40020488 	.word	0x40020488
 80060b4:	400204a0 	.word	0x400204a0
 80060b8:	400204b8 	.word	0x400204b8

080060bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a42      	ldr	r2, [pc, #264]	@ (80061d4 <DMA_CalcBaseAndBitshift+0x118>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d04a      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a41      	ldr	r2, [pc, #260]	@ (80061d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d045      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a3f      	ldr	r2, [pc, #252]	@ (80061dc <DMA_CalcBaseAndBitshift+0x120>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d040      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a3e      	ldr	r2, [pc, #248]	@ (80061e0 <DMA_CalcBaseAndBitshift+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d03b      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a3c      	ldr	r2, [pc, #240]	@ (80061e4 <DMA_CalcBaseAndBitshift+0x128>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d036      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a3b      	ldr	r2, [pc, #236]	@ (80061e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d031      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a39      	ldr	r2, [pc, #228]	@ (80061ec <DMA_CalcBaseAndBitshift+0x130>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d02c      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a38      	ldr	r2, [pc, #224]	@ (80061f0 <DMA_CalcBaseAndBitshift+0x134>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d027      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a36      	ldr	r2, [pc, #216]	@ (80061f4 <DMA_CalcBaseAndBitshift+0x138>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d022      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a35      	ldr	r2, [pc, #212]	@ (80061f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d01d      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a33      	ldr	r2, [pc, #204]	@ (80061fc <DMA_CalcBaseAndBitshift+0x140>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d018      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a32      	ldr	r2, [pc, #200]	@ (8006200 <DMA_CalcBaseAndBitshift+0x144>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d013      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a30      	ldr	r2, [pc, #192]	@ (8006204 <DMA_CalcBaseAndBitshift+0x148>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00e      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2f      	ldr	r2, [pc, #188]	@ (8006208 <DMA_CalcBaseAndBitshift+0x14c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d009      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2d      	ldr	r2, [pc, #180]	@ (800620c <DMA_CalcBaseAndBitshift+0x150>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d004      	beq.n	8006164 <DMA_CalcBaseAndBitshift+0xa8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2c      	ldr	r2, [pc, #176]	@ (8006210 <DMA_CalcBaseAndBitshift+0x154>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d101      	bne.n	8006168 <DMA_CalcBaseAndBitshift+0xac>
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <DMA_CalcBaseAndBitshift+0xae>
 8006168:	2300      	movs	r3, #0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d024      	beq.n	80061b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	3b10      	subs	r3, #16
 8006176:	4a27      	ldr	r2, [pc, #156]	@ (8006214 <DMA_CalcBaseAndBitshift+0x158>)
 8006178:	fba2 2303 	umull	r2, r3, r2, r3
 800617c:	091b      	lsrs	r3, r3, #4
 800617e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	4a24      	ldr	r2, [pc, #144]	@ (8006218 <DMA_CalcBaseAndBitshift+0x15c>)
 8006188:	5cd3      	ldrb	r3, [r2, r3]
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b03      	cmp	r3, #3
 8006194:	d908      	bls.n	80061a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	4b1f      	ldr	r3, [pc, #124]	@ (800621c <DMA_CalcBaseAndBitshift+0x160>)
 800619e:	4013      	ands	r3, r2
 80061a0:	1d1a      	adds	r2, r3, #4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80061a6:	e00d      	b.n	80061c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	4b1b      	ldr	r3, [pc, #108]	@ (800621c <DMA_CalcBaseAndBitshift+0x160>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80061b6:	e005      	b.n	80061c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	40020010 	.word	0x40020010
 80061d8:	40020028 	.word	0x40020028
 80061dc:	40020040 	.word	0x40020040
 80061e0:	40020058 	.word	0x40020058
 80061e4:	40020070 	.word	0x40020070
 80061e8:	40020088 	.word	0x40020088
 80061ec:	400200a0 	.word	0x400200a0
 80061f0:	400200b8 	.word	0x400200b8
 80061f4:	40020410 	.word	0x40020410
 80061f8:	40020428 	.word	0x40020428
 80061fc:	40020440 	.word	0x40020440
 8006200:	40020458 	.word	0x40020458
 8006204:	40020470 	.word	0x40020470
 8006208:	40020488 	.word	0x40020488
 800620c:	400204a0 	.word	0x400204a0
 8006210:	400204b8 	.word	0x400204b8
 8006214:	aaaaaaab 	.word	0xaaaaaaab
 8006218:	08011000 	.word	0x08011000
 800621c:	fffffc00 	.word	0xfffffc00

08006220 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d120      	bne.n	8006276 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006238:	2b03      	cmp	r3, #3
 800623a:	d858      	bhi.n	80062ee <DMA_CheckFifoParam+0xce>
 800623c:	a201      	add	r2, pc, #4	@ (adr r2, 8006244 <DMA_CheckFifoParam+0x24>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	08006255 	.word	0x08006255
 8006248:	08006267 	.word	0x08006267
 800624c:	08006255 	.word	0x08006255
 8006250:	080062ef 	.word	0x080062ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d048      	beq.n	80062f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006264:	e045      	b.n	80062f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800626e:	d142      	bne.n	80062f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006274:	e03f      	b.n	80062f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627e:	d123      	bne.n	80062c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	2b03      	cmp	r3, #3
 8006286:	d838      	bhi.n	80062fa <DMA_CheckFifoParam+0xda>
 8006288:	a201      	add	r2, pc, #4	@ (adr r2, 8006290 <DMA_CheckFifoParam+0x70>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062a1 	.word	0x080062a1
 8006294:	080062a7 	.word	0x080062a7
 8006298:	080062a1 	.word	0x080062a1
 800629c:	080062b9 	.word	0x080062b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
        break;
 80062a4:	e030      	b.n	8006308 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d025      	beq.n	80062fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062b6:	e022      	b.n	80062fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062c0:	d11f      	bne.n	8006302 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062c6:	e01c      	b.n	8006302 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d902      	bls.n	80062d6 <DMA_CheckFifoParam+0xb6>
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d003      	beq.n	80062dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80062d4:	e018      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	73fb      	strb	r3, [r7, #15]
        break;
 80062da:	e015      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00e      	beq.n	8006306 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
    break;
 80062ec:	e00b      	b.n	8006306 <DMA_CheckFifoParam+0xe6>
        break;
 80062ee:	bf00      	nop
 80062f0:	e00a      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
        break;
 80062f2:	bf00      	nop
 80062f4:	e008      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
        break;
 80062f6:	bf00      	nop
 80062f8:	e006      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
        break;
 80062fa:	bf00      	nop
 80062fc:	e004      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
        break;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
        break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <DMA_CheckFifoParam+0xe8>
    break;
 8006306:	bf00      	nop
    }
  }

  return status;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop

08006318 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a38      	ldr	r2, [pc, #224]	@ (800640c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d022      	beq.n	8006376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a36      	ldr	r2, [pc, #216]	@ (8006410 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01d      	beq.n	8006376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a35      	ldr	r2, [pc, #212]	@ (8006414 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a33      	ldr	r2, [pc, #204]	@ (8006418 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a32      	ldr	r2, [pc, #200]	@ (800641c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a30      	ldr	r2, [pc, #192]	@ (8006420 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2f      	ldr	r2, [pc, #188]	@ (8006424 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a2d      	ldr	r2, [pc, #180]	@ (8006428 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d101      	bne.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800637a:	2300      	movs	r3, #0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01a      	beq.n	80063b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	3b08      	subs	r3, #8
 8006388:	4a28      	ldr	r2, [pc, #160]	@ (800642c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	091b      	lsrs	r3, r3, #4
 8006390:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4b26      	ldr	r3, [pc, #152]	@ (8006430 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a24      	ldr	r2, [pc, #144]	@ (8006434 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80063a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2201      	movs	r2, #1
 80063ae:	409a      	lsls	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80063b4:	e024      	b.n	8006400 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	3b10      	subs	r3, #16
 80063be:	4a1e      	ldr	r2, [pc, #120]	@ (8006438 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80063c0:	fba2 2303 	umull	r2, r3, r2, r3
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4a1c      	ldr	r2, [pc, #112]	@ (800643c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d806      	bhi.n	80063de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d902      	bls.n	80063de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3308      	adds	r3, #8
 80063dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4b18      	ldr	r3, [pc, #96]	@ (8006444 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a16      	ldr	r2, [pc, #88]	@ (8006448 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80063f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	2201      	movs	r2, #1
 80063fa:	409a      	lsls	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	58025408 	.word	0x58025408
 8006410:	5802541c 	.word	0x5802541c
 8006414:	58025430 	.word	0x58025430
 8006418:	58025444 	.word	0x58025444
 800641c:	58025458 	.word	0x58025458
 8006420:	5802546c 	.word	0x5802546c
 8006424:	58025480 	.word	0x58025480
 8006428:	58025494 	.word	0x58025494
 800642c:	cccccccd 	.word	0xcccccccd
 8006430:	16009600 	.word	0x16009600
 8006434:	58025880 	.word	0x58025880
 8006438:	aaaaaaab 	.word	0xaaaaaaab
 800643c:	400204b8 	.word	0x400204b8
 8006440:	4002040f 	.word	0x4002040f
 8006444:	10008200 	.word	0x10008200
 8006448:	40020880 	.word	0x40020880

0800644c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d04a      	beq.n	80064f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b08      	cmp	r3, #8
 8006466:	d847      	bhi.n	80064f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a25      	ldr	r2, [pc, #148]	@ (8006504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d022      	beq.n	80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a24      	ldr	r2, [pc, #144]	@ (8006508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01d      	beq.n	80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a22      	ldr	r2, [pc, #136]	@ (800650c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d018      	beq.n	80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a21      	ldr	r2, [pc, #132]	@ (8006510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1f      	ldr	r2, [pc, #124]	@ (8006514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1e      	ldr	r2, [pc, #120]	@ (8006518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d009      	beq.n	80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1c      	ldr	r2, [pc, #112]	@ (800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d101      	bne.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4b17      	ldr	r3, [pc, #92]	@ (8006524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a15      	ldr	r2, [pc, #84]	@ (8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80064d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80064d6:	e009      	b.n	80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4b14      	ldr	r3, [pc, #80]	@ (800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	461a      	mov	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a11      	ldr	r2, [pc, #68]	@ (8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80064ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	2201      	movs	r2, #1
 80064f2:	409a      	lsls	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	58025408 	.word	0x58025408
 8006508:	5802541c 	.word	0x5802541c
 800650c:	58025430 	.word	0x58025430
 8006510:	58025444 	.word	0x58025444
 8006514:	58025458 	.word	0x58025458
 8006518:	5802546c 	.word	0x5802546c
 800651c:	58025480 	.word	0x58025480
 8006520:	58025494 	.word	0x58025494
 8006524:	1600963f 	.word	0x1600963f
 8006528:	58025940 	.word	0x58025940
 800652c:	1000823f 	.word	0x1000823f
 8006530:	40020940 	.word	0x40020940

08006534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006534:	b480      	push	{r7}
 8006536:	b089      	sub	sp, #36	@ 0x24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006542:	4b89      	ldr	r3, [pc, #548]	@ (8006768 <HAL_GPIO_Init+0x234>)
 8006544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006546:	e194      	b.n	8006872 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	2101      	movs	r1, #1
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	fa01 f303 	lsl.w	r3, r1, r3
 8006554:	4013      	ands	r3, r2
 8006556:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 8186 	beq.w	800686c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d005      	beq.n	8006578 <HAL_GPIO_Init+0x44>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d130      	bne.n	80065da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	2203      	movs	r2, #3
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	43db      	mvns	r3, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4013      	ands	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065ae:	2201      	movs	r2, #1
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43db      	mvns	r3, r3
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	4013      	ands	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	091b      	lsrs	r3, r3, #4
 80065c4:	f003 0201 	and.w	r2, r3, #1
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d017      	beq.n	8006616 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	2203      	movs	r2, #3
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4013      	ands	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	4313      	orrs	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d123      	bne.n	800666a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	08da      	lsrs	r2, r3, #3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3208      	adds	r2, #8
 800662a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	220f      	movs	r2, #15
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	43db      	mvns	r3, r3
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	4013      	ands	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	691a      	ldr	r2, [r3, #16]
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	4313      	orrs	r3, r2
 800665a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	08da      	lsrs	r2, r3, #3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3208      	adds	r2, #8
 8006664:	69b9      	ldr	r1, [r7, #24]
 8006666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	2203      	movs	r2, #3
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43db      	mvns	r3, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4013      	ands	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f003 0203 	and.w	r2, r3, #3
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	fa02 f303 	lsl.w	r3, r2, r3
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	4313      	orrs	r3, r2
 8006696:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80e0 	beq.w	800686c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ac:	4b2f      	ldr	r3, [pc, #188]	@ (800676c <HAL_GPIO_Init+0x238>)
 80066ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066b2:	4a2e      	ldr	r2, [pc, #184]	@ (800676c <HAL_GPIO_Init+0x238>)
 80066b4:	f043 0302 	orr.w	r3, r3, #2
 80066b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80066bc:	4b2b      	ldr	r3, [pc, #172]	@ (800676c <HAL_GPIO_Init+0x238>)
 80066be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066ca:	4a29      	ldr	r2, [pc, #164]	@ (8006770 <HAL_GPIO_Init+0x23c>)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	3302      	adds	r3, #2
 80066d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	220f      	movs	r2, #15
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	43db      	mvns	r3, r3
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	4013      	ands	r3, r2
 80066ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a20      	ldr	r2, [pc, #128]	@ (8006774 <HAL_GPIO_Init+0x240>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d052      	beq.n	800679c <HAL_GPIO_Init+0x268>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006778 <HAL_GPIO_Init+0x244>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d031      	beq.n	8006762 <HAL_GPIO_Init+0x22e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a1e      	ldr	r2, [pc, #120]	@ (800677c <HAL_GPIO_Init+0x248>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d02b      	beq.n	800675e <HAL_GPIO_Init+0x22a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a1d      	ldr	r2, [pc, #116]	@ (8006780 <HAL_GPIO_Init+0x24c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d025      	beq.n	800675a <HAL_GPIO_Init+0x226>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a1c      	ldr	r2, [pc, #112]	@ (8006784 <HAL_GPIO_Init+0x250>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01f      	beq.n	8006756 <HAL_GPIO_Init+0x222>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a1b      	ldr	r2, [pc, #108]	@ (8006788 <HAL_GPIO_Init+0x254>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d019      	beq.n	8006752 <HAL_GPIO_Init+0x21e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a1a      	ldr	r2, [pc, #104]	@ (800678c <HAL_GPIO_Init+0x258>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <HAL_GPIO_Init+0x21a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a19      	ldr	r2, [pc, #100]	@ (8006790 <HAL_GPIO_Init+0x25c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00d      	beq.n	800674a <HAL_GPIO_Init+0x216>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a18      	ldr	r2, [pc, #96]	@ (8006794 <HAL_GPIO_Init+0x260>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <HAL_GPIO_Init+0x212>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a17      	ldr	r2, [pc, #92]	@ (8006798 <HAL_GPIO_Init+0x264>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_GPIO_Init+0x20e>
 800673e:	2309      	movs	r3, #9
 8006740:	e02d      	b.n	800679e <HAL_GPIO_Init+0x26a>
 8006742:	230a      	movs	r3, #10
 8006744:	e02b      	b.n	800679e <HAL_GPIO_Init+0x26a>
 8006746:	2308      	movs	r3, #8
 8006748:	e029      	b.n	800679e <HAL_GPIO_Init+0x26a>
 800674a:	2307      	movs	r3, #7
 800674c:	e027      	b.n	800679e <HAL_GPIO_Init+0x26a>
 800674e:	2306      	movs	r3, #6
 8006750:	e025      	b.n	800679e <HAL_GPIO_Init+0x26a>
 8006752:	2305      	movs	r3, #5
 8006754:	e023      	b.n	800679e <HAL_GPIO_Init+0x26a>
 8006756:	2304      	movs	r3, #4
 8006758:	e021      	b.n	800679e <HAL_GPIO_Init+0x26a>
 800675a:	2303      	movs	r3, #3
 800675c:	e01f      	b.n	800679e <HAL_GPIO_Init+0x26a>
 800675e:	2302      	movs	r3, #2
 8006760:	e01d      	b.n	800679e <HAL_GPIO_Init+0x26a>
 8006762:	2301      	movs	r3, #1
 8006764:	e01b      	b.n	800679e <HAL_GPIO_Init+0x26a>
 8006766:	bf00      	nop
 8006768:	58000080 	.word	0x58000080
 800676c:	58024400 	.word	0x58024400
 8006770:	58000400 	.word	0x58000400
 8006774:	58020000 	.word	0x58020000
 8006778:	58020400 	.word	0x58020400
 800677c:	58020800 	.word	0x58020800
 8006780:	58020c00 	.word	0x58020c00
 8006784:	58021000 	.word	0x58021000
 8006788:	58021400 	.word	0x58021400
 800678c:	58021800 	.word	0x58021800
 8006790:	58021c00 	.word	0x58021c00
 8006794:	58022000 	.word	0x58022000
 8006798:	58022400 	.word	0x58022400
 800679c:	2300      	movs	r3, #0
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	f002 0203 	and.w	r2, r2, #3
 80067a4:	0092      	lsls	r2, r2, #2
 80067a6:	4093      	lsls	r3, r2
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067ae:	4938      	ldr	r1, [pc, #224]	@ (8006890 <HAL_GPIO_Init+0x35c>)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	3302      	adds	r3, #2
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	43db      	mvns	r3, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4013      	ands	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80067e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80067ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	43db      	mvns	r3, r3
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	4013      	ands	r3, r2
 80067fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	43db      	mvns	r3, r3
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	4013      	ands	r3, r2
 8006826:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	43db      	mvns	r3, r3
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	4013      	ands	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	3301      	adds	r3, #1
 8006870:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	f47f ae63 	bne.w	8006548 <HAL_GPIO_Init+0x14>
  }
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	3724      	adds	r7, #36	@ 0x24
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	58000400 	.word	0x58000400

08006894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	887b      	ldrh	r3, [r7, #2]
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068ac:	2301      	movs	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
 80068b0:	e001      	b.n	80068b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	807b      	strh	r3, [r7, #2]
 80068d0:	4613      	mov	r3, r2
 80068d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80068d4:	787b      	ldrb	r3, [r7, #1]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068da:	887a      	ldrh	r2, [r7, #2]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80068e0:	e003      	b.n	80068ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80068e2:	887b      	ldrh	r3, [r7, #2]
 80068e4:	041a      	lsls	r2, r3, #16
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	619a      	str	r2, [r3, #24]
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e10d      	b.n	8006b26 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fd fae6 	bl	8003ef0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b01      	cmp	r3, #1
 8006938:	d107      	bne.n	800694a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2200      	movs	r2, #0
 8006950:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b04      	cmp	r3, #4
 8006958:	d008      	beq.n	800696c <HAL_I2S_Init+0x74>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b06      	cmp	r3, #6
 8006960:	d004      	beq.n	800696c <HAL_I2S_Init+0x74>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b0a      	cmp	r3, #10
 8006968:	f040 8087 	bne.w	8006a7a <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d05a      	beq.n	8006a2a <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800697c:	2302      	movs	r3, #2
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e001      	b.n	8006986 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8006982:	2301      	movs	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b30      	cmp	r3, #48	@ 0x30
 800698c:	d003      	beq.n	8006996 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8006992:	2bb0      	cmp	r3, #176	@ 0xb0
 8006994:	d102      	bne.n	800699c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8006996:	2301      	movs	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e001      	b.n	80069a0 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80069a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80069a4:	f04f 0100 	mov.w	r1, #0
 80069a8:	f002 fadc 	bl	8008f64 <HAL_RCCEx_GetPeriphCLKFreq>
 80069ac:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069b6:	d113      	bne.n	80069e0 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80069b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	fa22 f303 	lsr.w	r3, r2, r3
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	461a      	mov	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	3305      	adds	r3, #5
 80069dc:	613b      	str	r3, [r7, #16]
 80069de:	e014      	b.n	8006a0a <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80069e0:	2220      	movs	r2, #32
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	fa22 f303 	lsr.w	r3, r2, r3
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	461a      	mov	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a06:	3305      	adds	r3, #5
 8006a08:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	4a48      	ldr	r2, [pc, #288]	@ (8006b30 <HAL_I2S_Init+0x238>)
 8006a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a12:	08db      	lsrs	r3, r3, #3
 8006a14:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	085b      	lsrs	r3, r3, #1
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	e003      	b.n	8006a32 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d102      	bne.n	8006a3e <HAL_I2S_Init+0x146>
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d002      	beq.n	8006a44 <HAL_I2S_Init+0x14c>
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	2bff      	cmp	r3, #255	@ 0xff
 8006a42:	d907      	bls.n	8006a54 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a48:	f043 0210 	orr.w	r2, r3, #16
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e068      	b.n	8006b26 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a64:	4b33      	ldr	r3, [pc, #204]	@ (8006b34 <HAL_I2S_Init+0x23c>)
 8006a66:	4013      	ands	r3, r2
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	0411      	lsls	r1, r2, #16
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	0612      	lsls	r2, r2, #24
 8006a70:	4311      	orrs	r1, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	430b      	orrs	r3, r1
 8006a78:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a80:	4b2d      	ldr	r3, [pc, #180]	@ (8006b38 <HAL_I2S_Init+0x240>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6851      	ldr	r1, [r2, #4]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6892      	ldr	r2, [r2, #8]
 8006a8c:	4311      	orrs	r1, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	68d2      	ldr	r2, [r2, #12]
 8006a92:	4311      	orrs	r1, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6992      	ldr	r2, [r2, #24]
 8006a98:	4311      	orrs	r1, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6a12      	ldr	r2, [r2, #32]
 8006a9e:	4311      	orrs	r1, r2
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006aa4:	4311      	orrs	r1, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6912      	ldr	r2, [r2, #16]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0201 	orr.w	r2, r2, #1
 8006ab6:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8006ac0:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006ad0:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d007      	beq.n	8006b00 <HAL_I2S_Init+0x208>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b06      	cmp	r3, #6
 8006af6:	d003      	beq.n	8006b00 <HAL_I2S_Init+0x208>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b0a      	cmp	r3, #10
 8006afe:	d10a      	bne.n	8006b16 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	cccccccd 	.word	0xcccccccd
 8006b34:	fe00ffff 	.word	0xfe00ffff
 8006b38:	fdff9040 	.word	0xfdff9040

08006b3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b44:	4b19      	ldr	r3, [pc, #100]	@ (8006bac <HAL_PWREx_ConfigSupply+0x70>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d00a      	beq.n	8006b66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b50:	4b16      	ldr	r3, [pc, #88]	@ (8006bac <HAL_PWREx_ConfigSupply+0x70>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d001      	beq.n	8006b62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e01f      	b.n	8006ba2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e01d      	b.n	8006ba2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b66:	4b11      	ldr	r3, [pc, #68]	@ (8006bac <HAL_PWREx_ConfigSupply+0x70>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f023 0207 	bic.w	r2, r3, #7
 8006b6e:	490f      	ldr	r1, [pc, #60]	@ (8006bac <HAL_PWREx_ConfigSupply+0x70>)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b76:	f7fd fecf 	bl	8004918 <HAL_GetTick>
 8006b7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b7c:	e009      	b.n	8006b92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b7e:	f7fd fecb 	bl	8004918 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b8c:	d901      	bls.n	8006b92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e007      	b.n	8006ba2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b92:	4b06      	ldr	r3, [pc, #24]	@ (8006bac <HAL_PWREx_ConfigSupply+0x70>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b9e:	d1ee      	bne.n	8006b7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	58024800 	.word	0x58024800

08006bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08c      	sub	sp, #48	@ 0x30
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f000 bc48 	b.w	8007454 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8088 	beq.w	8006ce2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd2:	4b99      	ldr	r3, [pc, #612]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bdc:	4b96      	ldr	r3, [pc, #600]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	2b10      	cmp	r3, #16
 8006be6:	d007      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x48>
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	2b18      	cmp	r3, #24
 8006bec:	d111      	bne.n	8006c12 <HAL_RCC_OscConfig+0x62>
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d10c      	bne.n	8006c12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf8:	4b8f      	ldr	r3, [pc, #572]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d06d      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x130>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d169      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f000 bc21 	b.w	8007454 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c1a:	d106      	bne.n	8006c2a <HAL_RCC_OscConfig+0x7a>
 8006c1c:	4b86      	ldr	r3, [pc, #536]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a85      	ldr	r2, [pc, #532]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	e02e      	b.n	8006c88 <HAL_RCC_OscConfig+0xd8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10c      	bne.n	8006c4c <HAL_RCC_OscConfig+0x9c>
 8006c32:	4b81      	ldr	r3, [pc, #516]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a80      	ldr	r2, [pc, #512]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	4b7e      	ldr	r3, [pc, #504]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a7d      	ldr	r2, [pc, #500]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	e01d      	b.n	8006c88 <HAL_RCC_OscConfig+0xd8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCC_OscConfig+0xc0>
 8006c56:	4b78      	ldr	r3, [pc, #480]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a77      	ldr	r2, [pc, #476]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	4b75      	ldr	r3, [pc, #468]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a74      	ldr	r2, [pc, #464]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e00b      	b.n	8006c88 <HAL_RCC_OscConfig+0xd8>
 8006c70:	4b71      	ldr	r3, [pc, #452]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a70      	ldr	r2, [pc, #448]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	4b6e      	ldr	r3, [pc, #440]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a6d      	ldr	r2, [pc, #436]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d013      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c90:	f7fd fe42 	bl	8004918 <HAL_GetTick>
 8006c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c98:	f7fd fe3e 	bl	8004918 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b64      	cmp	r3, #100	@ 0x64
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e3d4      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006caa:	4b63      	ldr	r3, [pc, #396]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f0      	beq.n	8006c98 <HAL_RCC_OscConfig+0xe8>
 8006cb6:	e014      	b.n	8006ce2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fd fe2e 	bl	8004918 <HAL_GetTick>
 8006cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cc0:	f7fd fe2a 	bl	8004918 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b64      	cmp	r3, #100	@ 0x64
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e3c0      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cd2:	4b59      	ldr	r3, [pc, #356]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x110>
 8006cde:	e000      	b.n	8006ce2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80ca 	beq.w	8006e84 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cf0:	4b51      	ldr	r3, [pc, #324]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d007      	beq.n	8006d16 <HAL_RCC_OscConfig+0x166>
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	2b18      	cmp	r3, #24
 8006d0a:	d156      	bne.n	8006dba <HAL_RCC_OscConfig+0x20a>
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d151      	bne.n	8006dba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d16:	4b48      	ldr	r3, [pc, #288]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <HAL_RCC_OscConfig+0x17e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e392      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d2e:	4b42      	ldr	r3, [pc, #264]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f023 0219 	bic.w	r2, r3, #25
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	493f      	ldr	r1, [pc, #252]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d40:	f7fd fdea 	bl	8004918 <HAL_GetTick>
 8006d44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d48:	f7fd fde6 	bl	8004918 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e37c      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d5a:	4b37      	ldr	r3, [pc, #220]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0f0      	beq.n	8006d48 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d66:	f7fd fe07 	bl	8004978 <HAL_GetREVID>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d817      	bhi.n	8006da4 <HAL_RCC_OscConfig+0x1f4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2b40      	cmp	r3, #64	@ 0x40
 8006d7a:	d108      	bne.n	8006d8e <HAL_RCC_OscConfig+0x1de>
 8006d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006d84:	4a2c      	ldr	r2, [pc, #176]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d8a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d8c:	e07a      	b.n	8006e84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	031b      	lsls	r3, r3, #12
 8006d9c:	4926      	ldr	r1, [pc, #152]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006da2:	e06f      	b.n	8006e84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006da4:	4b24      	ldr	r3, [pc, #144]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	061b      	lsls	r3, r3, #24
 8006db2:	4921      	ldr	r1, [pc, #132]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006db8:	e064      	b.n	8006e84 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d047      	beq.n	8006e52 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f023 0219 	bic.w	r2, r3, #25
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	491a      	ldr	r1, [pc, #104]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fd fda0 	bl	8004918 <HAL_GetTick>
 8006dd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ddc:	f7fd fd9c 	bl	8004918 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e332      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dee:	4b12      	ldr	r3, [pc, #72]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f0      	beq.n	8006ddc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfa:	f7fd fdbd 	bl	8004978 <HAL_GetREVID>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d819      	bhi.n	8006e3c <HAL_RCC_OscConfig+0x28c>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b40      	cmp	r3, #64	@ 0x40
 8006e0e:	d108      	bne.n	8006e22 <HAL_RCC_OscConfig+0x272>
 8006e10:	4b09      	ldr	r3, [pc, #36]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006e18:	4a07      	ldr	r2, [pc, #28]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e1e:	6053      	str	r3, [r2, #4]
 8006e20:	e030      	b.n	8006e84 <HAL_RCC_OscConfig+0x2d4>
 8006e22:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	031b      	lsls	r3, r3, #12
 8006e30:	4901      	ldr	r1, [pc, #4]	@ (8006e38 <HAL_RCC_OscConfig+0x288>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	604b      	str	r3, [r1, #4]
 8006e36:	e025      	b.n	8006e84 <HAL_RCC_OscConfig+0x2d4>
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	4b9a      	ldr	r3, [pc, #616]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	061b      	lsls	r3, r3, #24
 8006e4a:	4997      	ldr	r1, [pc, #604]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	604b      	str	r3, [r1, #4]
 8006e50:	e018      	b.n	8006e84 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e52:	4b95      	ldr	r3, [pc, #596]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a94      	ldr	r2, [pc, #592]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5e:	f7fd fd5b 	bl	8004918 <HAL_GetTick>
 8006e62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e66:	f7fd fd57 	bl	8004918 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e2ed      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e78:	4b8b      	ldr	r3, [pc, #556]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f0      	bne.n	8006e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 80a9 	beq.w	8006fe4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e92:	4b85      	ldr	r3, [pc, #532]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e9c:	4b82      	ldr	r3, [pc, #520]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d007      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x308>
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b18      	cmp	r3, #24
 8006eac:	d13a      	bne.n	8006f24 <HAL_RCC_OscConfig+0x374>
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d135      	bne.n	8006f24 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x320>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	2b80      	cmp	r3, #128	@ 0x80
 8006eca:	d001      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e2c1      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ed0:	f7fd fd52 	bl	8004978 <HAL_GetREVID>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d817      	bhi.n	8006f0e <HAL_RCC_OscConfig+0x35e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d108      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x348>
 8006ee6:	4b70      	ldr	r3, [pc, #448]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006eee:	4a6e      	ldr	r2, [pc, #440]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006ef0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ef4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ef6:	e075      	b.n	8006fe4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	069b      	lsls	r3, r3, #26
 8006f06:	4968      	ldr	r1, [pc, #416]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f0c:	e06a      	b.n	8006fe4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f0e:	4b66      	ldr	r3, [pc, #408]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	061b      	lsls	r3, r3, #24
 8006f1c:	4962      	ldr	r1, [pc, #392]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f22:	e05f      	b.n	8006fe4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d042      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a5d      	ldr	r2, [pc, #372]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f38:	f7fd fcee 	bl	8004918 <HAL_GetTick>
 8006f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f40:	f7fd fcea 	bl	8004918 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e280      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f52:	4b55      	ldr	r3, [pc, #340]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0f0      	beq.n	8006f40 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f5e:	f7fd fd0b 	bl	8004978 <HAL_GetREVID>
 8006f62:	4603      	mov	r3, r0
 8006f64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d817      	bhi.n	8006f9c <HAL_RCC_OscConfig+0x3ec>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d108      	bne.n	8006f86 <HAL_RCC_OscConfig+0x3d6>
 8006f74:	4b4c      	ldr	r3, [pc, #304]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f82:	6053      	str	r3, [r2, #4]
 8006f84:	e02e      	b.n	8006fe4 <HAL_RCC_OscConfig+0x434>
 8006f86:	4b48      	ldr	r3, [pc, #288]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	069b      	lsls	r3, r3, #26
 8006f94:	4944      	ldr	r1, [pc, #272]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	604b      	str	r3, [r1, #4]
 8006f9a:	e023      	b.n	8006fe4 <HAL_RCC_OscConfig+0x434>
 8006f9c:	4b42      	ldr	r3, [pc, #264]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	061b      	lsls	r3, r3, #24
 8006faa:	493f      	ldr	r1, [pc, #252]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60cb      	str	r3, [r1, #12]
 8006fb0:	e018      	b.n	8006fe4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbe:	f7fd fcab 	bl	8004918 <HAL_GetTick>
 8006fc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006fc6:	f7fd fca7 	bl	8004918 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e23d      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fd8:	4b33      	ldr	r3, [pc, #204]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f0      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d036      	beq.n	800705e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d019      	beq.n	800702c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8006ffe:	f043 0301 	orr.w	r3, r3, #1
 8007002:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007004:	f7fd fc88 	bl	8004918 <HAL_GetTick>
 8007008:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800700c:	f7fd fc84 	bl	8004918 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e21a      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800701e:	4b22      	ldr	r3, [pc, #136]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8007020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0f0      	beq.n	800700c <HAL_RCC_OscConfig+0x45c>
 800702a:	e018      	b.n	800705e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800702c:	4b1e      	ldr	r3, [pc, #120]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 800702e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007030:	4a1d      	ldr	r2, [pc, #116]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8007032:	f023 0301 	bic.w	r3, r3, #1
 8007036:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007038:	f7fd fc6e 	bl	8004918 <HAL_GetTick>
 800703c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007040:	f7fd fc6a 	bl	8004918 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e200      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007052:	4b15      	ldr	r3, [pc, #84]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8007054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d039      	beq.n	80070de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01c      	beq.n	80070ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007072:	4b0d      	ldr	r3, [pc, #52]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a0c      	ldr	r2, [pc, #48]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 8007078:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800707c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800707e:	f7fd fc4b 	bl	8004918 <HAL_GetTick>
 8007082:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007084:	e008      	b.n	8007098 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007086:	f7fd fc47 	bl	8004918 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e1dd      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007098:	4b03      	ldr	r3, [pc, #12]	@ (80070a8 <HAL_RCC_OscConfig+0x4f8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0f0      	beq.n	8007086 <HAL_RCC_OscConfig+0x4d6>
 80070a4:	e01b      	b.n	80070de <HAL_RCC_OscConfig+0x52e>
 80070a6:	bf00      	nop
 80070a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070ac:	4b9b      	ldr	r3, [pc, #620]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a9a      	ldr	r2, [pc, #616]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80070b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070b8:	f7fd fc2e 	bl	8004918 <HAL_GetTick>
 80070bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070c0:	f7fd fc2a 	bl	8004918 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e1c0      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070d2:	4b92      	ldr	r3, [pc, #584]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 8081 	beq.w	80071ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070ec:	4b8c      	ldr	r3, [pc, #560]	@ (8007320 <HAL_RCC_OscConfig+0x770>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a8b      	ldr	r2, [pc, #556]	@ (8007320 <HAL_RCC_OscConfig+0x770>)
 80070f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070f8:	f7fd fc0e 	bl	8004918 <HAL_GetTick>
 80070fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007100:	f7fd fc0a 	bl	8004918 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b64      	cmp	r3, #100	@ 0x64
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e1a0      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007112:	4b83      	ldr	r3, [pc, #524]	@ (8007320 <HAL_RCC_OscConfig+0x770>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0f0      	beq.n	8007100 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d106      	bne.n	8007134 <HAL_RCC_OscConfig+0x584>
 8007126:	4b7d      	ldr	r3, [pc, #500]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712a:	4a7c      	ldr	r2, [pc, #496]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800712c:	f043 0301 	orr.w	r3, r3, #1
 8007130:	6713      	str	r3, [r2, #112]	@ 0x70
 8007132:	e02d      	b.n	8007190 <HAL_RCC_OscConfig+0x5e0>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10c      	bne.n	8007156 <HAL_RCC_OscConfig+0x5a6>
 800713c:	4b77      	ldr	r3, [pc, #476]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800713e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007140:	4a76      	ldr	r2, [pc, #472]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	6713      	str	r3, [r2, #112]	@ 0x70
 8007148:	4b74      	ldr	r3, [pc, #464]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800714a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800714c:	4a73      	ldr	r2, [pc, #460]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800714e:	f023 0304 	bic.w	r3, r3, #4
 8007152:	6713      	str	r3, [r2, #112]	@ 0x70
 8007154:	e01c      	b.n	8007190 <HAL_RCC_OscConfig+0x5e0>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b05      	cmp	r3, #5
 800715c:	d10c      	bne.n	8007178 <HAL_RCC_OscConfig+0x5c8>
 800715e:	4b6f      	ldr	r3, [pc, #444]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007162:	4a6e      	ldr	r2, [pc, #440]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007164:	f043 0304 	orr.w	r3, r3, #4
 8007168:	6713      	str	r3, [r2, #112]	@ 0x70
 800716a:	4b6c      	ldr	r3, [pc, #432]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800716c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800716e:	4a6b      	ldr	r2, [pc, #428]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007170:	f043 0301 	orr.w	r3, r3, #1
 8007174:	6713      	str	r3, [r2, #112]	@ 0x70
 8007176:	e00b      	b.n	8007190 <HAL_RCC_OscConfig+0x5e0>
 8007178:	4b68      	ldr	r3, [pc, #416]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717c:	4a67      	ldr	r2, [pc, #412]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	6713      	str	r3, [r2, #112]	@ 0x70
 8007184:	4b65      	ldr	r3, [pc, #404]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007188:	4a64      	ldr	r2, [pc, #400]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800718a:	f023 0304 	bic.w	r3, r3, #4
 800718e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d015      	beq.n	80071c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007198:	f7fd fbbe 	bl	8004918 <HAL_GetTick>
 800719c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800719e:	e00a      	b.n	80071b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071a0:	f7fd fbba 	bl	8004918 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e14e      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071b6:	4b59      	ldr	r3, [pc, #356]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80071b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0ee      	beq.n	80071a0 <HAL_RCC_OscConfig+0x5f0>
 80071c2:	e014      	b.n	80071ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c4:	f7fd fba8 	bl	8004918 <HAL_GetTick>
 80071c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071ca:	e00a      	b.n	80071e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071cc:	f7fd fba4 	bl	8004918 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071da:	4293      	cmp	r3, r2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e138      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071e2:	4b4e      	ldr	r3, [pc, #312]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80071e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1ee      	bne.n	80071cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 812d 	beq.w	8007452 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80071f8:	4b48      	ldr	r3, [pc, #288]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007200:	2b18      	cmp	r3, #24
 8007202:	f000 80bd 	beq.w	8007380 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720a:	2b02      	cmp	r3, #2
 800720c:	f040 809e 	bne.w	800734c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007210:	4b42      	ldr	r3, [pc, #264]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a41      	ldr	r2, [pc, #260]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007216:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800721a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721c:	f7fd fb7c 	bl	8004918 <HAL_GetTick>
 8007220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007224:	f7fd fb78 	bl	8004918 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e10e      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007236:	4b39      	ldr	r3, [pc, #228]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f0      	bne.n	8007224 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007242:	4b36      	ldr	r3, [pc, #216]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007246:	4b37      	ldr	r3, [pc, #220]	@ (8007324 <HAL_RCC_OscConfig+0x774>)
 8007248:	4013      	ands	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007252:	0112      	lsls	r2, r2, #4
 8007254:	430a      	orrs	r2, r1
 8007256:	4931      	ldr	r1, [pc, #196]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007258:	4313      	orrs	r3, r2
 800725a:	628b      	str	r3, [r1, #40]	@ 0x28
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	3b01      	subs	r3, #1
 8007262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726a:	3b01      	subs	r3, #1
 800726c:	025b      	lsls	r3, r3, #9
 800726e:	b29b      	uxth	r3, r3
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	3b01      	subs	r3, #1
 8007278:	041b      	lsls	r3, r3, #16
 800727a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007284:	3b01      	subs	r3, #1
 8007286:	061b      	lsls	r3, r3, #24
 8007288:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800728c:	4923      	ldr	r1, [pc, #140]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800728e:	4313      	orrs	r3, r2
 8007290:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007292:	4b22      	ldr	r3, [pc, #136]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007296:	4a21      	ldr	r2, [pc, #132]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800729e:	4b1f      	ldr	r3, [pc, #124]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072a2:	4b21      	ldr	r3, [pc, #132]	@ (8007328 <HAL_RCC_OscConfig+0x778>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80072aa:	00d2      	lsls	r2, r2, #3
 80072ac:	491b      	ldr	r1, [pc, #108]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80072b2:	4b1a      	ldr	r3, [pc, #104]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b6:	f023 020c 	bic.w	r2, r3, #12
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072be:	4917      	ldr	r1, [pc, #92]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80072c4:	4b15      	ldr	r3, [pc, #84]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	f023 0202 	bic.w	r2, r3, #2
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d0:	4912      	ldr	r1, [pc, #72]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80072d6:	4b11      	ldr	r3, [pc, #68]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	4a10      	ldr	r2, [pc, #64]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e2:	4b0e      	ldr	r3, [pc, #56]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e6:	4a0d      	ldr	r2, [pc, #52]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80072ee:	4b0b      	ldr	r3, [pc, #44]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f2:	4a0a      	ldr	r2, [pc, #40]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80072fa:	4b08      	ldr	r3, [pc, #32]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 80072fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fe:	4a07      	ldr	r2, [pc, #28]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007300:	f043 0301 	orr.w	r3, r3, #1
 8007304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007306:	4b05      	ldr	r3, [pc, #20]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a04      	ldr	r2, [pc, #16]	@ (800731c <HAL_RCC_OscConfig+0x76c>)
 800730c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007312:	f7fd fb01 	bl	8004918 <HAL_GetTick>
 8007316:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007318:	e011      	b.n	800733e <HAL_RCC_OscConfig+0x78e>
 800731a:	bf00      	nop
 800731c:	58024400 	.word	0x58024400
 8007320:	58024800 	.word	0x58024800
 8007324:	fffffc0c 	.word	0xfffffc0c
 8007328:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800732c:	f7fd faf4 	bl	8004918 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e08a      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800733e:	4b47      	ldr	r3, [pc, #284]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0f0      	beq.n	800732c <HAL_RCC_OscConfig+0x77c>
 800734a:	e082      	b.n	8007452 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800734c:	4b43      	ldr	r3, [pc, #268]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a42      	ldr	r2, [pc, #264]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007352:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007358:	f7fd fade 	bl	8004918 <HAL_GetTick>
 800735c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007360:	f7fd fada 	bl	8004918 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e070      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007372:	4b3a      	ldr	r3, [pc, #232]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f0      	bne.n	8007360 <HAL_RCC_OscConfig+0x7b0>
 800737e:	e068      	b.n	8007452 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007380:	4b36      	ldr	r3, [pc, #216]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007384:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007386:	4b35      	ldr	r3, [pc, #212]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007390:	2b01      	cmp	r3, #1
 8007392:	d031      	beq.n	80073f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f003 0203 	and.w	r2, r3, #3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800739e:	429a      	cmp	r2, r3
 80073a0:	d12a      	bne.n	80073f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d122      	bne.n	80073f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073be:	429a      	cmp	r2, r3
 80073c0:	d11a      	bne.n	80073f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	0a5b      	lsrs	r3, r3, #9
 80073c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d111      	bne.n	80073f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	0c1b      	lsrs	r3, r3, #16
 80073d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d108      	bne.n	80073f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	0e1b      	lsrs	r3, r3, #24
 80073ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d001      	beq.n	80073fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e02b      	b.n	8007454 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80073fc:	4b17      	ldr	r3, [pc, #92]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 80073fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007406:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	429a      	cmp	r2, r3
 8007410:	d01f      	beq.n	8007452 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007412:	4b12      	ldr	r3, [pc, #72]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007416:	4a11      	ldr	r2, [pc, #68]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007418:	f023 0301 	bic.w	r3, r3, #1
 800741c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800741e:	f7fd fa7b 	bl	8004918 <HAL_GetTick>
 8007422:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007424:	bf00      	nop
 8007426:	f7fd fa77 	bl	8004918 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	4293      	cmp	r3, r2
 8007430:	d0f9      	beq.n	8007426 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007432:	4b0a      	ldr	r3, [pc, #40]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007436:	4b0a      	ldr	r3, [pc, #40]	@ (8007460 <HAL_RCC_OscConfig+0x8b0>)
 8007438:	4013      	ands	r3, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800743e:	00d2      	lsls	r2, r2, #3
 8007440:	4906      	ldr	r1, [pc, #24]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007442:	4313      	orrs	r3, r2
 8007444:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007446:	4b05      	ldr	r3, [pc, #20]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 8007448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744a:	4a04      	ldr	r2, [pc, #16]	@ (800745c <HAL_RCC_OscConfig+0x8ac>)
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3730      	adds	r7, #48	@ 0x30
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	58024400 	.word	0x58024400
 8007460:	ffff0007 	.word	0xffff0007

08007464 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e19c      	b.n	80077b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007478:	4b8a      	ldr	r3, [pc, #552]	@ (80076a4 <HAL_RCC_ClockConfig+0x240>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d910      	bls.n	80074a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007486:	4b87      	ldr	r3, [pc, #540]	@ (80076a4 <HAL_RCC_ClockConfig+0x240>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f023 020f 	bic.w	r2, r3, #15
 800748e:	4985      	ldr	r1, [pc, #532]	@ (80076a4 <HAL_RCC_ClockConfig+0x240>)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	4313      	orrs	r3, r2
 8007494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007496:	4b83      	ldr	r3, [pc, #524]	@ (80076a4 <HAL_RCC_ClockConfig+0x240>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d001      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e184      	b.n	80077b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d010      	beq.n	80074d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	4b7b      	ldr	r3, [pc, #492]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d908      	bls.n	80074d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074c4:	4b78      	ldr	r3, [pc, #480]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	4975      	ldr	r1, [pc, #468]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0308 	and.w	r3, r3, #8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d010      	beq.n	8007504 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695a      	ldr	r2, [r3, #20]
 80074e6:	4b70      	ldr	r3, [pc, #448]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d908      	bls.n	8007504 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074f2:	4b6d      	ldr	r3, [pc, #436]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	496a      	ldr	r1, [pc, #424]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007500:	4313      	orrs	r3, r2
 8007502:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699a      	ldr	r2, [r3, #24]
 8007514:	4b64      	ldr	r3, [pc, #400]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800751c:	429a      	cmp	r2, r3
 800751e:	d908      	bls.n	8007532 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007520:	4b61      	ldr	r3, [pc, #388]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	495e      	ldr	r1, [pc, #376]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 800752e:	4313      	orrs	r3, r2
 8007530:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d010      	beq.n	8007560 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	69da      	ldr	r2, [r3, #28]
 8007542:	4b59      	ldr	r3, [pc, #356]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800754a:	429a      	cmp	r2, r3
 800754c:	d908      	bls.n	8007560 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800754e:	4b56      	ldr	r3, [pc, #344]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	4953      	ldr	r1, [pc, #332]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 800755c:	4313      	orrs	r3, r2
 800755e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	4b4d      	ldr	r3, [pc, #308]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	429a      	cmp	r2, r3
 800757a:	d908      	bls.n	800758e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800757c:	4b4a      	ldr	r3, [pc, #296]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f023 020f 	bic.w	r2, r3, #15
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	4947      	ldr	r1, [pc, #284]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 800758a:	4313      	orrs	r3, r2
 800758c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d055      	beq.n	8007646 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800759a:	4b43      	ldr	r3, [pc, #268]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	4940      	ldr	r1, [pc, #256]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d107      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075b4:	4b3c      	ldr	r3, [pc, #240]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d121      	bne.n	8007604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e0f6      	b.n	80077b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d107      	bne.n	80075dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075cc:	4b36      	ldr	r3, [pc, #216]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d115      	bne.n	8007604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0ea      	b.n	80077b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d107      	bne.n	80075f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075e4:	4b30      	ldr	r3, [pc, #192]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d109      	bne.n	8007604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e0de      	b.n	80077b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075f4:	4b2c      	ldr	r3, [pc, #176]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e0d6      	b.n	80077b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007604:	4b28      	ldr	r3, [pc, #160]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f023 0207 	bic.w	r2, r3, #7
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	4925      	ldr	r1, [pc, #148]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007612:	4313      	orrs	r3, r2
 8007614:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007616:	f7fd f97f 	bl	8004918 <HAL_GetTick>
 800761a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800761c:	e00a      	b.n	8007634 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800761e:	f7fd f97b 	bl	8004918 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800762c:	4293      	cmp	r3, r2
 800762e:	d901      	bls.n	8007634 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e0be      	b.n	80077b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007634:	4b1c      	ldr	r3, [pc, #112]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	429a      	cmp	r2, r3
 8007644:	d1eb      	bne.n	800761e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d010      	beq.n	8007674 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	4b14      	ldr	r3, [pc, #80]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	429a      	cmp	r2, r3
 8007660:	d208      	bcs.n	8007674 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007662:	4b11      	ldr	r3, [pc, #68]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f023 020f 	bic.w	r2, r3, #15
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	490e      	ldr	r1, [pc, #56]	@ (80076a8 <HAL_RCC_ClockConfig+0x244>)
 8007670:	4313      	orrs	r3, r2
 8007672:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007674:	4b0b      	ldr	r3, [pc, #44]	@ (80076a4 <HAL_RCC_ClockConfig+0x240>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d214      	bcs.n	80076ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007682:	4b08      	ldr	r3, [pc, #32]	@ (80076a4 <HAL_RCC_ClockConfig+0x240>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f023 020f 	bic.w	r2, r3, #15
 800768a:	4906      	ldr	r1, [pc, #24]	@ (80076a4 <HAL_RCC_ClockConfig+0x240>)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	4313      	orrs	r3, r2
 8007690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007692:	4b04      	ldr	r3, [pc, #16]	@ (80076a4 <HAL_RCC_ClockConfig+0x240>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	429a      	cmp	r2, r3
 800769e:	d005      	beq.n	80076ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e086      	b.n	80077b2 <HAL_RCC_ClockConfig+0x34e>
 80076a4:	52002000 	.word	0x52002000
 80076a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d010      	beq.n	80076da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	4b3f      	ldr	r3, [pc, #252]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d208      	bcs.n	80076da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076c8:	4b3c      	ldr	r3, [pc, #240]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	4939      	ldr	r1, [pc, #228]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d010      	beq.n	8007708 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695a      	ldr	r2, [r3, #20]
 80076ea:	4b34      	ldr	r3, [pc, #208]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d208      	bcs.n	8007708 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076f6:	4b31      	ldr	r3, [pc, #196]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	492e      	ldr	r1, [pc, #184]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 8007704:	4313      	orrs	r3, r2
 8007706:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0310 	and.w	r3, r3, #16
 8007710:	2b00      	cmp	r3, #0
 8007712:	d010      	beq.n	8007736 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699a      	ldr	r2, [r3, #24]
 8007718:	4b28      	ldr	r3, [pc, #160]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007720:	429a      	cmp	r2, r3
 8007722:	d208      	bcs.n	8007736 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007724:	4b25      	ldr	r3, [pc, #148]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	4922      	ldr	r1, [pc, #136]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 8007732:	4313      	orrs	r3, r2
 8007734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d010      	beq.n	8007764 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69da      	ldr	r2, [r3, #28]
 8007746:	4b1d      	ldr	r3, [pc, #116]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800774e:	429a      	cmp	r2, r3
 8007750:	d208      	bcs.n	8007764 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007752:	4b1a      	ldr	r3, [pc, #104]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	4917      	ldr	r1, [pc, #92]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 8007760:	4313      	orrs	r3, r2
 8007762:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007764:	f000 f834 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8007768:	4602      	mov	r2, r0
 800776a:	4b14      	ldr	r3, [pc, #80]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	0a1b      	lsrs	r3, r3, #8
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	4912      	ldr	r1, [pc, #72]	@ (80077c0 <HAL_RCC_ClockConfig+0x35c>)
 8007776:	5ccb      	ldrb	r3, [r1, r3]
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
 8007780:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007782:	4b0e      	ldr	r3, [pc, #56]	@ (80077bc <HAL_RCC_ClockConfig+0x358>)
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	4a0d      	ldr	r2, [pc, #52]	@ (80077c0 <HAL_RCC_ClockConfig+0x35c>)
 800778c:	5cd3      	ldrb	r3, [r2, r3]
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
 8007798:	4a0a      	ldr	r2, [pc, #40]	@ (80077c4 <HAL_RCC_ClockConfig+0x360>)
 800779a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800779c:	4a0a      	ldr	r2, [pc, #40]	@ (80077c8 <HAL_RCC_ClockConfig+0x364>)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80077a2:	4b0a      	ldr	r3, [pc, #40]	@ (80077cc <HAL_RCC_ClockConfig+0x368>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fd f86c 	bl	8004884 <HAL_InitTick>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	58024400 	.word	0x58024400
 80077c0:	08010ff0 	.word	0x08010ff0
 80077c4:	24000004 	.word	0x24000004
 80077c8:	24000000 	.word	0x24000000
 80077cc:	24000008 	.word	0x24000008

080077d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b089      	sub	sp, #36	@ 0x24
 80077d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077d6:	4bb3      	ldr	r3, [pc, #716]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077de:	2b18      	cmp	r3, #24
 80077e0:	f200 8155 	bhi.w	8007a8e <HAL_RCC_GetSysClockFreq+0x2be>
 80077e4:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007851 	.word	0x08007851
 80077f0:	08007a8f 	.word	0x08007a8f
 80077f4:	08007a8f 	.word	0x08007a8f
 80077f8:	08007a8f 	.word	0x08007a8f
 80077fc:	08007a8f 	.word	0x08007a8f
 8007800:	08007a8f 	.word	0x08007a8f
 8007804:	08007a8f 	.word	0x08007a8f
 8007808:	08007a8f 	.word	0x08007a8f
 800780c:	08007877 	.word	0x08007877
 8007810:	08007a8f 	.word	0x08007a8f
 8007814:	08007a8f 	.word	0x08007a8f
 8007818:	08007a8f 	.word	0x08007a8f
 800781c:	08007a8f 	.word	0x08007a8f
 8007820:	08007a8f 	.word	0x08007a8f
 8007824:	08007a8f 	.word	0x08007a8f
 8007828:	08007a8f 	.word	0x08007a8f
 800782c:	0800787d 	.word	0x0800787d
 8007830:	08007a8f 	.word	0x08007a8f
 8007834:	08007a8f 	.word	0x08007a8f
 8007838:	08007a8f 	.word	0x08007a8f
 800783c:	08007a8f 	.word	0x08007a8f
 8007840:	08007a8f 	.word	0x08007a8f
 8007844:	08007a8f 	.word	0x08007a8f
 8007848:	08007a8f 	.word	0x08007a8f
 800784c:	08007883 	.word	0x08007883
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007850:	4b94      	ldr	r3, [pc, #592]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d009      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800785c:	4b91      	ldr	r3, [pc, #580]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	08db      	lsrs	r3, r3, #3
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	4a90      	ldr	r2, [pc, #576]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
 800786c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800786e:	e111      	b.n	8007a94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007870:	4b8d      	ldr	r3, [pc, #564]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007872:	61bb      	str	r3, [r7, #24]
      break;
 8007874:	e10e      	b.n	8007a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007876:	4b8d      	ldr	r3, [pc, #564]	@ (8007aac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007878:	61bb      	str	r3, [r7, #24]
      break;
 800787a:	e10b      	b.n	8007a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800787c:	4b8c      	ldr	r3, [pc, #560]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800787e:	61bb      	str	r3, [r7, #24]
      break;
 8007880:	e108      	b.n	8007a94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007882:	4b88      	ldr	r3, [pc, #544]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007886:	f003 0303 	and.w	r3, r3, #3
 800788a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800788c:	4b85      	ldr	r3, [pc, #532]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800788e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007890:	091b      	lsrs	r3, r3, #4
 8007892:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007896:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007898:	4b82      	ldr	r3, [pc, #520]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800789a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078a2:	4b80      	ldr	r3, [pc, #512]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a6:	08db      	lsrs	r3, r3, #3
 80078a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	fb02 f303 	mul.w	r3, r2, r3
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80e1 	beq.w	8007a88 <HAL_RCC_GetSysClockFreq+0x2b8>
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	f000 8083 	beq.w	80079d4 <HAL_RCC_GetSysClockFreq+0x204>
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	f200 80a1 	bhi.w	8007a18 <HAL_RCC_GetSysClockFreq+0x248>
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_RCC_GetSysClockFreq+0x114>
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d056      	beq.n	8007990 <HAL_RCC_GetSysClockFreq+0x1c0>
 80078e2:	e099      	b.n	8007a18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078e4:	4b6f      	ldr	r3, [pc, #444]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d02d      	beq.n	800794c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078f0:	4b6c      	ldr	r3, [pc, #432]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	08db      	lsrs	r3, r3, #3
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	4a6b      	ldr	r2, [pc, #428]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007900:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791a:	4b62      	ldr	r3, [pc, #392]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800791c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792a:	ed97 6a02 	vldr	s12, [r7, #8]
 800792e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800793e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007946:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800794a:	e087      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007ab8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800795a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795e:	4b51      	ldr	r3, [pc, #324]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007972:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800798e:	e065      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007abc <HAL_RCC_GetSysClockFreq+0x2ec>
 800799e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a2:	4b40      	ldr	r3, [pc, #256]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80079b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079d2:	e043      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007ac0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80079e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e6:	4b2f      	ldr	r3, [pc, #188]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80079fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a16:	e021      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007abc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a3e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007a5c:	4b11      	ldr	r3, [pc, #68]	@ (8007aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a60:	0a5b      	lsrs	r3, r3, #9
 8007a62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a66:	3301      	adds	r3, #1
 8007a68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a80:	ee17 3a90 	vmov	r3, s15
 8007a84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007a86:	e005      	b.n	8007a94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61bb      	str	r3, [r7, #24]
      break;
 8007a8c:	e002      	b.n	8007a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007a8e:	4b07      	ldr	r3, [pc, #28]	@ (8007aac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a90:	61bb      	str	r3, [r7, #24]
      break;
 8007a92:	bf00      	nop
  }

  return sysclockfreq;
 8007a94:	69bb      	ldr	r3, [r7, #24]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3724      	adds	r7, #36	@ 0x24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	58024400 	.word	0x58024400
 8007aa8:	03d09000 	.word	0x03d09000
 8007aac:	003d0900 	.word	0x003d0900
 8007ab0:	00f42400 	.word	0x00f42400
 8007ab4:	46000000 	.word	0x46000000
 8007ab8:	4c742400 	.word	0x4c742400
 8007abc:	4a742400 	.word	0x4a742400
 8007ac0:	4b742400 	.word	0x4b742400

08007ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007aca:	f7ff fe81 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	0a1b      	lsrs	r3, r3, #8
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	490f      	ldr	r1, [pc, #60]	@ (8007b18 <HAL_RCC_GetHCLKFreq+0x54>)
 8007adc:	5ccb      	ldrb	r3, [r1, r3]
 8007ade:	f003 031f 	and.w	r3, r3, #31
 8007ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8007b14 <HAL_RCC_GetHCLKFreq+0x50>)
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	4a09      	ldr	r2, [pc, #36]	@ (8007b18 <HAL_RCC_GetHCLKFreq+0x54>)
 8007af2:	5cd3      	ldrb	r3, [r2, r3]
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	fa22 f303 	lsr.w	r3, r2, r3
 8007afe:	4a07      	ldr	r2, [pc, #28]	@ (8007b1c <HAL_RCC_GetHCLKFreq+0x58>)
 8007b00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b02:	4a07      	ldr	r2, [pc, #28]	@ (8007b20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b08:	4b04      	ldr	r3, [pc, #16]	@ (8007b1c <HAL_RCC_GetHCLKFreq+0x58>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	58024400 	.word	0x58024400
 8007b18:	08010ff0 	.word	0x08010ff0
 8007b1c:	24000004 	.word	0x24000004
 8007b20:	24000000 	.word	0x24000000

08007b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b28:	f7ff ffcc 	bl	8007ac4 <HAL_RCC_GetHCLKFreq>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	091b      	lsrs	r3, r3, #4
 8007b34:	f003 0307 	and.w	r3, r3, #7
 8007b38:	4904      	ldr	r1, [pc, #16]	@ (8007b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b3a:	5ccb      	ldrb	r3, [r1, r3]
 8007b3c:	f003 031f 	and.w	r3, r3, #31
 8007b40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	08010ff0 	.word	0x08010ff0

08007b50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b54:	b0ca      	sub	sp, #296	@ 0x128
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b62:	2300      	movs	r3, #0
 8007b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007b74:	2500      	movs	r5, #0
 8007b76:	ea54 0305 	orrs.w	r3, r4, r5
 8007b7a:	d049      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b86:	d02f      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007b88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b8c:	d828      	bhi.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b92:	d01a      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007b94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b98:	d822      	bhi.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ba2:	d007      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ba4:	e01c      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba6:	4bb8      	ldr	r3, [pc, #736]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007baa:	4ab7      	ldr	r2, [pc, #732]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bb2:	e01a      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	3308      	adds	r3, #8
 8007bba:	2102      	movs	r1, #2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f002 fb61 	bl	800a284 <RCCEx_PLL2_Config>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bc8:	e00f      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bce:	3328      	adds	r3, #40	@ 0x28
 8007bd0:	2102      	movs	r1, #2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f002 fc08 	bl	800a3e8 <RCCEx_PLL3_Config>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bde:	e004      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007be6:	e000      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007bf2:	4ba5      	ldr	r3, [pc, #660]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c00:	4aa1      	ldr	r2, [pc, #644]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c02:	430b      	orrs	r3, r1
 8007c04:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c06:	e003      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007c1c:	f04f 0900 	mov.w	r9, #0
 8007c20:	ea58 0309 	orrs.w	r3, r8, r9
 8007c24:	d047      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d82a      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007c30:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c4d 	.word	0x08007c4d
 8007c3c:	08007c5b 	.word	0x08007c5b
 8007c40:	08007c71 	.word	0x08007c71
 8007c44:	08007c8f 	.word	0x08007c8f
 8007c48:	08007c8f 	.word	0x08007c8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c4c:	4b8e      	ldr	r3, [pc, #568]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	4a8d      	ldr	r2, [pc, #564]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c58:	e01a      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	3308      	adds	r3, #8
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f002 fb0e 	bl	800a284 <RCCEx_PLL2_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e00f      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c74:	3328      	adds	r3, #40	@ 0x28
 8007c76:	2100      	movs	r1, #0
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 fbb5 	bl	800a3e8 <RCCEx_PLL3_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c84:	e004      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c8c:	e000      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c98:	4b7b      	ldr	r3, [pc, #492]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c9c:	f023 0107 	bic.w	r1, r3, #7
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ca6:	4a78      	ldr	r2, [pc, #480]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cac:	e003      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007cc2:	f04f 0b00 	mov.w	fp, #0
 8007cc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007cca:	d04c      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd6:	d030      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cdc:	d829      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ce0:	d02d      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ce4:	d825      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ce6:	2b80      	cmp	r3, #128	@ 0x80
 8007ce8:	d018      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007cea:	2b80      	cmp	r3, #128	@ 0x80
 8007cec:	d821      	bhi.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007cf2:	2b40      	cmp	r3, #64	@ 0x40
 8007cf4:	d007      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007cf6:	e01c      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cf8:	4b63      	ldr	r3, [pc, #396]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfc:	4a62      	ldr	r2, [pc, #392]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d04:	e01c      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f002 fab8 	bl	800a284 <RCCEx_PLL2_Config>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d1a:	e011      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d20:	3328      	adds	r3, #40	@ 0x28
 8007d22:	2100      	movs	r1, #0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 fb5f 	bl	800a3e8 <RCCEx_PLL3_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d30:	e006      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d38:	e002      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d3a:	bf00      	nop
 8007d3c:	e000      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007d48:	4b4f      	ldr	r3, [pc, #316]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d4c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d56:	4a4c      	ldr	r2, [pc, #304]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d5c:	e003      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007d72:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007d76:	2300      	movs	r3, #0
 8007d78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007d7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007d80:	460b      	mov	r3, r1
 8007d82:	4313      	orrs	r3, r2
 8007d84:	d053      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d92:	d035      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007d94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d98:	d82e      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007d9e:	d031      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007da0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007da4:	d828      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007daa:	d01a      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007db0:	d822      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007db6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dba:	d007      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007dbc:	e01c      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbe:	4b32      	ldr	r3, [pc, #200]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc2:	4a31      	ldr	r2, [pc, #196]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dca:	e01c      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f002 fa55 	bl	800a284 <RCCEx_PLL2_Config>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007de0:	e011      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de6:	3328      	adds	r3, #40	@ 0x28
 8007de8:	2100      	movs	r1, #0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f002 fafc 	bl	800a3e8 <RCCEx_PLL3_Config>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007df6:	e006      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dfe:	e002      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007e00:	bf00      	nop
 8007e02:	e000      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10b      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e12:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e20:	430b      	orrs	r3, r1
 8007e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e24:	e003      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007e3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007e44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	d056      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e5a:	d038      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007e5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e60:	d831      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e66:	d034      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007e68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e6c:	d82b      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e72:	d01d      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007e74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e78:	d825      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d006      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e82:	d00a      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e84:	e01f      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e86:	bf00      	nop
 8007e88:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e8c:	4ba2      	ldr	r3, [pc, #648]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e90:	4aa1      	ldr	r2, [pc, #644]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e98:	e01c      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 f9ee 	bl	800a284 <RCCEx_PLL2_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007eae:	e011      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb4:	3328      	adds	r3, #40	@ 0x28
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 fa95 	bl	800a3e8 <RCCEx_PLL3_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ec4:	e006      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10b      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007edc:	4b8e      	ldr	r3, [pc, #568]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007eec:	4a8a      	ldr	r2, [pc, #552]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ef2:	e003      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007f08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007f16:	460b      	mov	r3, r1
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	d03a      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f22:	2b30      	cmp	r3, #48	@ 0x30
 8007f24:	d01f      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007f26:	2b30      	cmp	r3, #48	@ 0x30
 8007f28:	d819      	bhi.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d00c      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d815      	bhi.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d019      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d111      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f3a:	4b77      	ldr	r3, [pc, #476]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3e:	4a76      	ldr	r2, [pc, #472]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f46:	e011      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	2102      	movs	r1, #2
 8007f50:	4618      	mov	r0, r3
 8007f52:	f002 f997 	bl	800a284 <RCCEx_PLL2_Config>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f5c:	e006      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f64:	e002      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f66:	bf00      	nop
 8007f68:	e000      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f74:	4b68      	ldr	r3, [pc, #416]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f78:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f82:	4a65      	ldr	r2, [pc, #404]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f84:	430b      	orrs	r3, r1
 8007f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f88:	e003      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007f9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007fa8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	d051      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fbc:	d035      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fc2:	d82e      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fc4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fc8:	d031      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007fca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fce:	d828      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fd4:	d01a      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fda:	d822      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe4:	d007      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007fe6:	e01c      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	4a4a      	ldr	r2, [pc, #296]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ff4:	e01c      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f002 f940 	bl	800a284 <RCCEx_PLL2_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800800a:	e011      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008010:	3328      	adds	r3, #40	@ 0x28
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f002 f9e7 	bl	800a3e8 <RCCEx_PLL3_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008020:	e006      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008028:	e002      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800802a:	bf00      	nop
 800802c:	e000      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800802e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008038:	4b37      	ldr	r3, [pc, #220]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800803a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800803c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008046:	4a34      	ldr	r2, [pc, #208]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008048:	430b      	orrs	r3, r1
 800804a:	6513      	str	r3, [r2, #80]	@ 0x50
 800804c:	e003      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008062:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008066:	2300      	movs	r3, #0
 8008068:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800806c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008070:	460b      	mov	r3, r1
 8008072:	4313      	orrs	r3, r2
 8008074:	d056      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800807c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008080:	d033      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008082:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008086:	d82c      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008088:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800808c:	d02f      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800808e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008092:	d826      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008094:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008098:	d02b      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800809a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800809e:	d820      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80080a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080a4:	d012      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80080a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080aa:	d81a      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d022      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80080b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b4:	d115      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ba:	3308      	adds	r3, #8
 80080bc:	2101      	movs	r1, #1
 80080be:	4618      	mov	r0, r3
 80080c0:	f002 f8e0 	bl	800a284 <RCCEx_PLL2_Config>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080ca:	e015      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d0:	3328      	adds	r3, #40	@ 0x28
 80080d2:	2101      	movs	r1, #1
 80080d4:	4618      	mov	r0, r3
 80080d6:	f002 f987 	bl	800a3e8 <RCCEx_PLL3_Config>
 80080da:	4603      	mov	r3, r0
 80080dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080e0:	e00a      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080e8:	e006      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080ea:	bf00      	nop
 80080ec:	e004      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080ee:	bf00      	nop
 80080f0:	e002      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080f2:	bf00      	nop
 80080f4:	e000      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10d      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008100:	4b05      	ldr	r3, [pc, #20]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008104:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800810e:	4a02      	ldr	r2, [pc, #8]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008110:	430b      	orrs	r3, r1
 8008112:	6513      	str	r3, [r2, #80]	@ 0x50
 8008114:	e006      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008116:	bf00      	nop
 8008118:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008134:	2300      	movs	r3, #0
 8008136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800813a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800813e:	460b      	mov	r3, r1
 8008140:	4313      	orrs	r3, r2
 8008142:	d055      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008148:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800814c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008150:	d033      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008156:	d82c      	bhi.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800815c:	d02f      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800815e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008162:	d826      	bhi.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008164:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008168:	d02b      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800816a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800816e:	d820      	bhi.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008174:	d012      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800817a:	d81a      	bhi.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d022      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008184:	d115      	bne.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818a:	3308      	adds	r3, #8
 800818c:	2101      	movs	r1, #1
 800818e:	4618      	mov	r0, r3
 8008190:	f002 f878 	bl	800a284 <RCCEx_PLL2_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800819a:	e015      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a0:	3328      	adds	r3, #40	@ 0x28
 80081a2:	2101      	movs	r1, #1
 80081a4:	4618      	mov	r0, r3
 80081a6:	f002 f91f 	bl	800a3e8 <RCCEx_PLL3_Config>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80081b0:	e00a      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081b8:	e006      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081ba:	bf00      	nop
 80081bc:	e004      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081be:	bf00      	nop
 80081c0:	e002      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081c2:	bf00      	nop
 80081c4:	e000      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10b      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081d0:	4ba3      	ldr	r3, [pc, #652]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081e0:	4a9f      	ldr	r2, [pc, #636]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e2:	430b      	orrs	r3, r1
 80081e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80081e6:	e003      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80081fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008200:	2300      	movs	r3, #0
 8008202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800820a:	460b      	mov	r3, r1
 800820c:	4313      	orrs	r3, r2
 800820e:	d037      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800821a:	d00e      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800821c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008220:	d816      	bhi.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d018      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800822a:	d111      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800822c:	4b8c      	ldr	r3, [pc, #560]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	4a8b      	ldr	r2, [pc, #556]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008238:	e00f      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823e:	3308      	adds	r3, #8
 8008240:	2101      	movs	r1, #1
 8008242:	4618      	mov	r0, r3
 8008244:	f002 f81e 	bl	800a284 <RCCEx_PLL2_Config>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800824e:	e004      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008256:	e000      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800825a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10a      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008262:	4b7f      	ldr	r3, [pc, #508]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008266:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008270:	4a7b      	ldr	r2, [pc, #492]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008272:	430b      	orrs	r3, r1
 8008274:	6513      	str	r3, [r2, #80]	@ 0x50
 8008276:	e003      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800827c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800828c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008290:	2300      	movs	r3, #0
 8008292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008296:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800829a:	460b      	mov	r3, r1
 800829c:	4313      	orrs	r3, r2
 800829e:	d039      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80082a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d81c      	bhi.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80082aa:	a201      	add	r2, pc, #4	@ (adr r2, 80082b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80082ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b0:	080082ed 	.word	0x080082ed
 80082b4:	080082c1 	.word	0x080082c1
 80082b8:	080082cf 	.word	0x080082cf
 80082bc:	080082ed 	.word	0x080082ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082c0:	4b67      	ldr	r3, [pc, #412]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c4:	4a66      	ldr	r2, [pc, #408]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082cc:	e00f      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d2:	3308      	adds	r3, #8
 80082d4:	2102      	movs	r1, #2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 ffd4 	bl	800a284 <RCCEx_PLL2_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082e2:	e004      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ea:	e000      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80082ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10a      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80082f6:	4b5a      	ldr	r3, [pc, #360]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082fa:	f023 0103 	bic.w	r1, r3, #3
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008304:	4a56      	ldr	r2, [pc, #344]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008306:	430b      	orrs	r3, r1
 8008308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800830a:	e003      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008320:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008324:	2300      	movs	r3, #0
 8008326:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800832a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800832e:	460b      	mov	r3, r1
 8008330:	4313      	orrs	r3, r2
 8008332:	f000 809f 	beq.w	8008474 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008336:	4b4b      	ldr	r3, [pc, #300]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a4a      	ldr	r2, [pc, #296]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800833c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008340:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008342:	f7fc fae9 	bl	8004918 <HAL_GetTick>
 8008346:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800834a:	e00b      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800834c:	f7fc fae4 	bl	8004918 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	2b64      	cmp	r3, #100	@ 0x64
 800835a:	d903      	bls.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008362:	e005      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008364:	4b3f      	ldr	r3, [pc, #252]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0ed      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008374:	2b00      	cmp	r3, #0
 8008376:	d179      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008378:	4b39      	ldr	r3, [pc, #228]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800837a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800837c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008380:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008384:	4053      	eors	r3, r2
 8008386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800838a:	2b00      	cmp	r3, #0
 800838c:	d015      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800838e:	4b34      	ldr	r3, [pc, #208]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008396:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800839a:	4b31      	ldr	r3, [pc, #196]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800839c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800839e:	4a30      	ldr	r2, [pc, #192]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083a6:	4b2e      	ldr	r3, [pc, #184]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083aa:	4a2d      	ldr	r2, [pc, #180]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80083b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80083b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083c6:	d118      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c8:	f7fc faa6 	bl	8004918 <HAL_GetTick>
 80083cc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083d0:	e00d      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083d2:	f7fc faa1 	bl	8004918 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80083dc:	1ad2      	subs	r2, r2, r3
 80083de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d903      	bls.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80083ec:	e005      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0eb      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80083fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d129      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008406:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800840a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800840e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008412:	d10e      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008414:	4b12      	ldr	r3, [pc, #72]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008424:	091a      	lsrs	r2, r3, #4
 8008426:	4b10      	ldr	r3, [pc, #64]	@ (8008468 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008428:	4013      	ands	r3, r2
 800842a:	4a0d      	ldr	r2, [pc, #52]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800842c:	430b      	orrs	r3, r1
 800842e:	6113      	str	r3, [r2, #16]
 8008430:	e005      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008432:	4b0b      	ldr	r3, [pc, #44]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	4a0a      	ldr	r2, [pc, #40]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008438:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800843c:	6113      	str	r3, [r2, #16]
 800843e:	4b08      	ldr	r3, [pc, #32]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008440:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800844a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800844e:	4a04      	ldr	r2, [pc, #16]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008450:	430b      	orrs	r3, r1
 8008452:	6713      	str	r3, [r2, #112]	@ 0x70
 8008454:	e00e      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800845a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800845e:	e009      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008460:	58024400 	.word	0x58024400
 8008464:	58024800 	.word	0x58024800
 8008468:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	f002 0301 	and.w	r3, r2, #1
 8008480:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008484:	2300      	movs	r3, #0
 8008486:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800848a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800848e:	460b      	mov	r3, r1
 8008490:	4313      	orrs	r3, r2
 8008492:	f000 8089 	beq.w	80085a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800849c:	2b28      	cmp	r3, #40	@ 0x28
 800849e:	d86b      	bhi.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80084a0:	a201      	add	r2, pc, #4	@ (adr r2, 80084a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	08008581 	.word	0x08008581
 80084ac:	08008579 	.word	0x08008579
 80084b0:	08008579 	.word	0x08008579
 80084b4:	08008579 	.word	0x08008579
 80084b8:	08008579 	.word	0x08008579
 80084bc:	08008579 	.word	0x08008579
 80084c0:	08008579 	.word	0x08008579
 80084c4:	08008579 	.word	0x08008579
 80084c8:	0800854d 	.word	0x0800854d
 80084cc:	08008579 	.word	0x08008579
 80084d0:	08008579 	.word	0x08008579
 80084d4:	08008579 	.word	0x08008579
 80084d8:	08008579 	.word	0x08008579
 80084dc:	08008579 	.word	0x08008579
 80084e0:	08008579 	.word	0x08008579
 80084e4:	08008579 	.word	0x08008579
 80084e8:	08008563 	.word	0x08008563
 80084ec:	08008579 	.word	0x08008579
 80084f0:	08008579 	.word	0x08008579
 80084f4:	08008579 	.word	0x08008579
 80084f8:	08008579 	.word	0x08008579
 80084fc:	08008579 	.word	0x08008579
 8008500:	08008579 	.word	0x08008579
 8008504:	08008579 	.word	0x08008579
 8008508:	08008581 	.word	0x08008581
 800850c:	08008579 	.word	0x08008579
 8008510:	08008579 	.word	0x08008579
 8008514:	08008579 	.word	0x08008579
 8008518:	08008579 	.word	0x08008579
 800851c:	08008579 	.word	0x08008579
 8008520:	08008579 	.word	0x08008579
 8008524:	08008579 	.word	0x08008579
 8008528:	08008581 	.word	0x08008581
 800852c:	08008579 	.word	0x08008579
 8008530:	08008579 	.word	0x08008579
 8008534:	08008579 	.word	0x08008579
 8008538:	08008579 	.word	0x08008579
 800853c:	08008579 	.word	0x08008579
 8008540:	08008579 	.word	0x08008579
 8008544:	08008579 	.word	0x08008579
 8008548:	08008581 	.word	0x08008581
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800854c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008550:	3308      	adds	r3, #8
 8008552:	2101      	movs	r1, #1
 8008554:	4618      	mov	r0, r3
 8008556:	f001 fe95 	bl	800a284 <RCCEx_PLL2_Config>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008560:	e00f      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	3328      	adds	r3, #40	@ 0x28
 8008568:	2101      	movs	r1, #1
 800856a:	4618      	mov	r0, r3
 800856c:	f001 ff3c 	bl	800a3e8 <RCCEx_PLL3_Config>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008576:	e004      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800857e:	e000      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10a      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800858a:	4bbf      	ldr	r3, [pc, #764]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800858c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008598:	4abb      	ldr	r2, [pc, #748]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800859a:	430b      	orrs	r3, r1
 800859c:	6553      	str	r3, [r2, #84]	@ 0x54
 800859e:	e003      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f002 0302 	and.w	r3, r2, #2
 80085b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085b8:	2300      	movs	r3, #0
 80085ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80085c2:	460b      	mov	r3, r1
 80085c4:	4313      	orrs	r3, r2
 80085c6:	d041      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80085c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d824      	bhi.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80085d2:	a201      	add	r2, pc, #4	@ (adr r2, 80085d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	08008625 	.word	0x08008625
 80085dc:	080085f1 	.word	0x080085f1
 80085e0:	08008607 	.word	0x08008607
 80085e4:	08008625 	.word	0x08008625
 80085e8:	08008625 	.word	0x08008625
 80085ec:	08008625 	.word	0x08008625
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f4:	3308      	adds	r3, #8
 80085f6:	2101      	movs	r1, #1
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 fe43 	bl	800a284 <RCCEx_PLL2_Config>
 80085fe:	4603      	mov	r3, r0
 8008600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008604:	e00f      	b.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860a:	3328      	adds	r3, #40	@ 0x28
 800860c:	2101      	movs	r1, #1
 800860e:	4618      	mov	r0, r3
 8008610:	f001 feea 	bl	800a3e8 <RCCEx_PLL3_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800861a:	e004      	b.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008622:	e000      	b.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800862e:	4b96      	ldr	r3, [pc, #600]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008632:	f023 0107 	bic.w	r1, r3, #7
 8008636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800863c:	4a92      	ldr	r2, [pc, #584]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800863e:	430b      	orrs	r3, r1
 8008640:	6553      	str	r3, [r2, #84]	@ 0x54
 8008642:	e003      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f002 0304 	and.w	r3, r2, #4
 8008658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800865c:	2300      	movs	r3, #0
 800865e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008662:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008666:	460b      	mov	r3, r1
 8008668:	4313      	orrs	r3, r2
 800866a:	d044      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800866c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008674:	2b05      	cmp	r3, #5
 8008676:	d825      	bhi.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008678:	a201      	add	r2, pc, #4	@ (adr r2, 8008680 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800867a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867e:	bf00      	nop
 8008680:	080086cd 	.word	0x080086cd
 8008684:	08008699 	.word	0x08008699
 8008688:	080086af 	.word	0x080086af
 800868c:	080086cd 	.word	0x080086cd
 8008690:	080086cd 	.word	0x080086cd
 8008694:	080086cd 	.word	0x080086cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869c:	3308      	adds	r3, #8
 800869e:	2101      	movs	r1, #1
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 fdef 	bl	800a284 <RCCEx_PLL2_Config>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80086ac:	e00f      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	3328      	adds	r3, #40	@ 0x28
 80086b4:	2101      	movs	r1, #1
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 fe96 	bl	800a3e8 <RCCEx_PLL3_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80086c2:	e004      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086ca:	e000      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80086cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086d6:	4b6c      	ldr	r3, [pc, #432]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086da:	f023 0107 	bic.w	r1, r3, #7
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086e6:	4a68      	ldr	r2, [pc, #416]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086e8:	430b      	orrs	r3, r1
 80086ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80086ec:	e003      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f002 0320 	and.w	r3, r2, #32
 8008702:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008706:	2300      	movs	r3, #0
 8008708:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800870c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008710:	460b      	mov	r3, r1
 8008712:	4313      	orrs	r3, r2
 8008714:	d055      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800871e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008722:	d033      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008728:	d82c      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800872a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872e:	d02f      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008734:	d826      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008736:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800873a:	d02b      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800873c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008740:	d820      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008746:	d012      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800874c:	d81a      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d022      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008756:	d115      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875c:	3308      	adds	r3, #8
 800875e:	2100      	movs	r1, #0
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fd8f 	bl	800a284 <RCCEx_PLL2_Config>
 8008766:	4603      	mov	r3, r0
 8008768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800876c:	e015      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800876e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008772:	3328      	adds	r3, #40	@ 0x28
 8008774:	2102      	movs	r1, #2
 8008776:	4618      	mov	r0, r3
 8008778:	f001 fe36 	bl	800a3e8 <RCCEx_PLL3_Config>
 800877c:	4603      	mov	r3, r0
 800877e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008782:	e00a      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800878a:	e006      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800878c:	bf00      	nop
 800878e:	e004      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008790:	bf00      	nop
 8008792:	e002      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008794:	bf00      	nop
 8008796:	e000      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800879a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10b      	bne.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087a2:	4b39      	ldr	r3, [pc, #228]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b2:	4a35      	ldr	r2, [pc, #212]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087b4:	430b      	orrs	r3, r1
 80087b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80087b8:	e003      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80087c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80087ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087d2:	2300      	movs	r3, #0
 80087d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80087d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80087dc:	460b      	mov	r3, r1
 80087de:	4313      	orrs	r3, r2
 80087e0:	d058      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087ee:	d033      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80087f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087f4:	d82c      	bhi.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087fa:	d02f      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80087fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008800:	d826      	bhi.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008802:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008806:	d02b      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008808:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800880c:	d820      	bhi.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800880e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008812:	d012      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008818:	d81a      	bhi.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d022      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800881e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008822:	d115      	bne.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008828:	3308      	adds	r3, #8
 800882a:	2100      	movs	r1, #0
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fd29 	bl	800a284 <RCCEx_PLL2_Config>
 8008832:	4603      	mov	r3, r0
 8008834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008838:	e015      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883e:	3328      	adds	r3, #40	@ 0x28
 8008840:	2102      	movs	r1, #2
 8008842:	4618      	mov	r0, r3
 8008844:	f001 fdd0 	bl	800a3e8 <RCCEx_PLL3_Config>
 8008848:	4603      	mov	r3, r0
 800884a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800884e:	e00a      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008856:	e006      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008858:	bf00      	nop
 800885a:	e004      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800885c:	bf00      	nop
 800885e:	e002      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008860:	bf00      	nop
 8008862:	e000      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10e      	bne.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800886e:	4b06      	ldr	r3, [pc, #24]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008872:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800887e:	4a02      	ldr	r2, [pc, #8]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008880:	430b      	orrs	r3, r1
 8008882:	6593      	str	r3, [r2, #88]	@ 0x58
 8008884:	e006      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008886:	bf00      	nop
 8008888:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800888c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80088a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088a4:	2300      	movs	r3, #0
 80088a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80088ae:	460b      	mov	r3, r1
 80088b0:	4313      	orrs	r3, r2
 80088b2:	d055      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80088b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80088c0:	d033      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80088c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80088c6:	d82c      	bhi.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088cc:	d02f      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80088ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088d2:	d826      	bhi.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088d8:	d02b      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80088da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088de:	d820      	bhi.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088e4:	d012      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80088e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088ea:	d81a      	bhi.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d022      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80088f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f4:	d115      	bne.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fa:	3308      	adds	r3, #8
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fcc0 	bl	800a284 <RCCEx_PLL2_Config>
 8008904:	4603      	mov	r3, r0
 8008906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800890a:	e015      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800890c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008910:	3328      	adds	r3, #40	@ 0x28
 8008912:	2102      	movs	r1, #2
 8008914:	4618      	mov	r0, r3
 8008916:	f001 fd67 	bl	800a3e8 <RCCEx_PLL3_Config>
 800891a:	4603      	mov	r3, r0
 800891c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008920:	e00a      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008928:	e006      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800892a:	bf00      	nop
 800892c:	e004      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800892e:	bf00      	nop
 8008930:	e002      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008932:	bf00      	nop
 8008934:	e000      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10b      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008940:	4ba1      	ldr	r3, [pc, #644]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008944:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008950:	4a9d      	ldr	r2, [pc, #628]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008952:	430b      	orrs	r3, r1
 8008954:	6593      	str	r3, [r2, #88]	@ 0x58
 8008956:	e003      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800895c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f002 0308 	and.w	r3, r2, #8
 800896c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008970:	2300      	movs	r3, #0
 8008972:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008976:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800897a:	460b      	mov	r3, r1
 800897c:	4313      	orrs	r3, r2
 800897e:	d01e      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898c:	d10c      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800898e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008992:	3328      	adds	r3, #40	@ 0x28
 8008994:	2102      	movs	r1, #2
 8008996:	4618      	mov	r0, r3
 8008998:	f001 fd26 	bl	800a3e8 <RCCEx_PLL3_Config>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80089a8:	4b87      	ldr	r3, [pc, #540]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089b8:	4a83      	ldr	r2, [pc, #524]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089ba:	430b      	orrs	r3, r1
 80089bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f002 0310 	and.w	r3, r2, #16
 80089ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80089ce:	2300      	movs	r3, #0
 80089d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80089d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80089d8:	460b      	mov	r3, r1
 80089da:	4313      	orrs	r3, r2
 80089dc:	d01e      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80089de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ea:	d10c      	bne.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f0:	3328      	adds	r3, #40	@ 0x28
 80089f2:	2102      	movs	r1, #2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 fcf7 	bl	800a3e8 <RCCEx_PLL3_Config>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a06:	4b70      	ldr	r3, [pc, #448]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a16:	4a6c      	ldr	r2, [pc, #432]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008a28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008a36:	460b      	mov	r3, r1
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	d03e      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a48:	d022      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a4e:	d81b      	bhi.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a58:	d00b      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008a5a:	e015      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a60:	3308      	adds	r3, #8
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f001 fc0d 	bl	800a284 <RCCEx_PLL2_Config>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a70:	e00f      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a76:	3328      	adds	r3, #40	@ 0x28
 8008a78:	2102      	movs	r1, #2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f001 fcb4 	bl	800a3e8 <RCCEx_PLL3_Config>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a86:	e004      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a8e:	e000      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008aaa:	4a47      	ldr	r2, [pc, #284]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aac:	430b      	orrs	r3, r1
 8008aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ab0:	e003      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008ac6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ac8:	2300      	movs	r3, #0
 8008aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008acc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	d03b      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ade:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ae2:	d01f      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ae4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ae8:	d818      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aee:	d003      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008af0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008af4:	d007      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008af6:	e011      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af8:	4b33      	ldr	r3, [pc, #204]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afc:	4a32      	ldr	r2, [pc, #200]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b04:	e00f      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0a:	3328      	adds	r3, #40	@ 0x28
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 fc6a 	bl	800a3e8 <RCCEx_PLL3_Config>
 8008b14:	4603      	mov	r3, r0
 8008b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b1a:	e004      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b22:	e000      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10b      	bne.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b2e:	4b26      	ldr	r3, [pc, #152]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b3e:	4a22      	ldr	r2, [pc, #136]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b40:	430b      	orrs	r3, r1
 8008b42:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b44:	e003      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008b5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008b60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008b64:	460b      	mov	r3, r1
 8008b66:	4313      	orrs	r3, r2
 8008b68:	d034      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b78:	d007      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008b7a:	e011      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b7c:	4b12      	ldr	r3, [pc, #72]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b80:	4a11      	ldr	r2, [pc, #68]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b88:	e00e      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8e:	3308      	adds	r3, #8
 8008b90:	2102      	movs	r1, #2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f001 fb76 	bl	800a284 <RCCEx_PLL2_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b9e:	e003      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10d      	bne.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008bb0:	4b05      	ldr	r3, [pc, #20]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bbe:	4a02      	ldr	r2, [pc, #8]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008bc4:	e006      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008bc6:	bf00      	nop
 8008bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008be0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008be2:	2300      	movs	r3, #0
 8008be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008be6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008bea:	460b      	mov	r3, r1
 8008bec:	4313      	orrs	r3, r2
 8008bee:	d00c      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf4:	3328      	adds	r3, #40	@ 0x28
 8008bf6:	2102      	movs	r1, #2
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f001 fbf5 	bl	800a3e8 <RCCEx_PLL3_Config>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008c16:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c18:	2300      	movs	r3, #0
 8008c1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008c20:	460b      	mov	r3, r1
 8008c22:	4313      	orrs	r3, r2
 8008c24:	d038      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c32:	d018      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008c34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c38:	d811      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c3e:	d014      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c44:	d80b      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d011      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c50:	4bc3      	ldr	r3, [pc, #780]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c54:	4ac2      	ldr	r2, [pc, #776]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008c5c:	e008      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c64:	e004      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c66:	bf00      	nop
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10b      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c78:	4bb9      	ldr	r3, [pc, #740]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c88:	4ab5      	ldr	r2, [pc, #724]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c8e:	e003      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ca4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008caa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	d009      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008cb4:	4baa      	ldr	r3, [pc, #680]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc2:	4aa7      	ldr	r2, [pc, #668]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008cd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	d00a      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ce4:	4b9e      	ldr	r3, [pc, #632]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008cf4:	4a9a      	ldr	r2, [pc, #616]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008d06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d08:	2300      	movs	r3, #0
 8008d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008d10:	460b      	mov	r3, r1
 8008d12:	4313      	orrs	r3, r2
 8008d14:	d009      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d16:	4b92      	ldr	r3, [pc, #584]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d1a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d24:	4a8e      	ldr	r2, [pc, #568]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d26:	430b      	orrs	r3, r1
 8008d28:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008d36:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d38:	2300      	movs	r3, #0
 8008d3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d40:	460b      	mov	r3, r1
 8008d42:	4313      	orrs	r3, r2
 8008d44:	d00e      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d46:	4b86      	ldr	r3, [pc, #536]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	4a85      	ldr	r2, [pc, #532]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d50:	6113      	str	r3, [r2, #16]
 8008d52:	4b83      	ldr	r3, [pc, #524]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d54:	6919      	ldr	r1, [r3, #16]
 8008d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d5e:	4a80      	ldr	r2, [pc, #512]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d60:	430b      	orrs	r3, r1
 8008d62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008d70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d72:	2300      	movs	r3, #0
 8008d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	d009      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d80:	4b77      	ldr	r3, [pc, #476]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d84:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8e:	4a74      	ldr	r2, [pc, #464]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d90:	430b      	orrs	r3, r1
 8008d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008da2:	2300      	movs	r3, #0
 8008da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008daa:	460b      	mov	r3, r1
 8008dac:	4313      	orrs	r3, r2
 8008dae:	d00a      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008db0:	4b6b      	ldr	r3, [pc, #428]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dc0:	4a67      	ldr	r2, [pc, #412]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dc2:	430b      	orrs	r3, r1
 8008dc4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	2100      	movs	r1, #0
 8008dd0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dd8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4313      	orrs	r3, r2
 8008de0:	d011      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de6:	3308      	adds	r3, #8
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fa4a 	bl	800a284 <RCCEx_PLL2_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	2100      	movs	r1, #0
 8008e10:	6239      	str	r1, [r7, #32]
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	d011      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e26:	3308      	adds	r3, #8
 8008e28:	2101      	movs	r1, #1
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 fa2a 	bl	800a284 <RCCEx_PLL2_Config>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	2100      	movs	r1, #0
 8008e50:	61b9      	str	r1, [r7, #24]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	61fb      	str	r3, [r7, #28]
 8008e58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	d011      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e66:	3308      	adds	r3, #8
 8008e68:	2102      	movs	r1, #2
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 fa0a 	bl	800a284 <RCCEx_PLL2_Config>
 8008e70:	4603      	mov	r3, r0
 8008e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	2100      	movs	r1, #0
 8008e90:	6139      	str	r1, [r7, #16]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	d011      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea6:	3328      	adds	r3, #40	@ 0x28
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f001 fa9c 	bl	800a3e8 <RCCEx_PLL3_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	2100      	movs	r1, #0
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	f003 0310 	and.w	r3, r3, #16
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008edc:	460b      	mov	r3, r1
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	d011      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee6:	3328      	adds	r3, #40	@ 0x28
 8008ee8:	2101      	movs	r1, #1
 8008eea:	4618      	mov	r0, r3
 8008eec:	f001 fa7c 	bl	800a3e8 <RCCEx_PLL3_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	2100      	movs	r1, #0
 8008f10:	6039      	str	r1, [r7, #0]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	d011      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f26:	3328      	adds	r3, #40	@ 0x28
 8008f28:	2102      	movs	r1, #2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 fa5c 	bl	800a3e8 <RCCEx_PLL3_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008f46:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e000      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f60:	58024400 	.word	0x58024400

08008f64 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b090      	sub	sp, #64	@ 0x40
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f72:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008f76:	430b      	orrs	r3, r1
 8008f78:	f040 8094 	bne.w	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008f7c:	4b9e      	ldr	r3, [pc, #632]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f80:	f003 0307 	and.w	r3, r3, #7
 8008f84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	2b04      	cmp	r3, #4
 8008f8a:	f200 8087 	bhi.w	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fa9 	.word	0x08008fa9
 8008f98:	08008fd1 	.word	0x08008fd1
 8008f9c:	08008ff9 	.word	0x08008ff9
 8008fa0:	08009095 	.word	0x08009095
 8008fa4:	08009021 	.word	0x08009021
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fa8:	4b93      	ldr	r3, [pc, #588]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fb4:	d108      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f001 f810 	bl	8009fe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc4:	f000 bd45 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fcc:	f000 bd41 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fd0:	4b89      	ldr	r3, [pc, #548]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fdc:	d108      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fde:	f107 0318 	add.w	r3, r7, #24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fd54 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fec:	f000 bd31 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff4:	f000 bd2d 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ff8:	4b7f      	ldr	r3, [pc, #508]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009004:	d108      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009006:	f107 030c 	add.w	r3, r7, #12
 800900a:	4618      	mov	r0, r3
 800900c:	f000 fe94 	bl	8009d38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009014:	f000 bd1d 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800901c:	f000 bd19 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009020:	4b75      	ldr	r3, [pc, #468]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009024:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009028:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800902a:	4b73      	ldr	r3, [pc, #460]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b04      	cmp	r3, #4
 8009034:	d10c      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009038:	2b00      	cmp	r3, #0
 800903a:	d109      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800903c:	4b6e      	ldr	r3, [pc, #440]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	08db      	lsrs	r3, r3, #3
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	4a6d      	ldr	r2, [pc, #436]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
 800904c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800904e:	e01f      	b.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009050:	4b69      	ldr	r3, [pc, #420]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800905c:	d106      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800905e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009064:	d102      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009066:	4b66      	ldr	r3, [pc, #408]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800906a:	e011      	b.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800906c:	4b62      	ldr	r3, [pc, #392]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009078:	d106      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800907a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800907c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009080:	d102      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009082:	4b60      	ldr	r3, [pc, #384]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009086:	e003      	b.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800908c:	f000 bce1 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009090:	f000 bcdf 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009094:	4b5c      	ldr	r3, [pc, #368]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009098:	f000 bcdb 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a0:	f000 bcd7 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80090a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80090ac:	430b      	orrs	r3, r1
 80090ae:	f040 80ad 	bne.w	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80090b2:	4b51      	ldr	r3, [pc, #324]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090b6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80090ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80090bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090c2:	d056      	beq.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80090c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ca:	f200 8090 	bhi.w	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80090d2:	f000 8088 	beq.w	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80090da:	f200 8088 	bhi.w	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e0:	2b80      	cmp	r3, #128	@ 0x80
 80090e2:	d032      	beq.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80090e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e6:	2b80      	cmp	r3, #128	@ 0x80
 80090e8:	f200 8081 	bhi.w	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	2b40      	cmp	r3, #64	@ 0x40
 80090f6:	d014      	beq.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80090f8:	e079      	b.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090fa:	4b3f      	ldr	r3, [pc, #252]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009106:	d108      	bne.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800910c:	4618      	mov	r0, r3
 800910e:	f000 ff67 	bl	8009fe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009116:	f000 bc9c 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800911e:	f000 bc98 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009122:	4b35      	ldr	r3, [pc, #212]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800912a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800912e:	d108      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009130:	f107 0318 	add.w	r3, r7, #24
 8009134:	4618      	mov	r0, r3
 8009136:	f000 fcab 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800913e:	f000 bc88 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009146:	f000 bc84 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800914a:	4b2b      	ldr	r3, [pc, #172]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009156:	d108      	bne.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009158:	f107 030c 	add.w	r3, r7, #12
 800915c:	4618      	mov	r0, r3
 800915e:	f000 fdeb 	bl	8009d38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009166:	f000 bc74 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916e:	f000 bc70 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009172:	4b21      	ldr	r3, [pc, #132]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009176:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800917a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800917c:	4b1e      	ldr	r3, [pc, #120]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b04      	cmp	r3, #4
 8009186:	d10c      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918a:	2b00      	cmp	r3, #0
 800918c:	d109      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800918e:	4b1a      	ldr	r3, [pc, #104]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	08db      	lsrs	r3, r3, #3
 8009194:	f003 0303 	and.w	r3, r3, #3
 8009198:	4a18      	ldr	r2, [pc, #96]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800919a:	fa22 f303 	lsr.w	r3, r2, r3
 800919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091a0:	e01f      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091a2:	4b15      	ldr	r3, [pc, #84]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091ae:	d106      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80091b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091b6:	d102      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091b8:	4b11      	ldr	r3, [pc, #68]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80091ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091bc:	e011      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091be:	4b0e      	ldr	r3, [pc, #56]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ca:	d106      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80091cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091d2:	d102      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80091d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091d8:	e003      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80091de:	f000 bc38 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091e2:	f000 bc36 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091e6:	4b08      	ldr	r3, [pc, #32]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80091e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ea:	f000 bc32 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f2:	f000 bc2e 	b.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091f6:	bf00      	nop
 80091f8:	58024400 	.word	0x58024400
 80091fc:	03d09000 	.word	0x03d09000
 8009200:	003d0900 	.word	0x003d0900
 8009204:	00f42400 	.word	0x00f42400
 8009208:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800920c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009210:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009214:	430b      	orrs	r3, r1
 8009216:	f040 809c 	bne.w	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800921a:	4b9e      	ldr	r3, [pc, #632]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800921c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800921e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009222:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800922a:	d054      	beq.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800922c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009232:	f200 808b 	bhi.w	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800923c:	f000 8083 	beq.w	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009242:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009246:	f200 8081 	bhi.w	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009250:	d02f      	beq.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009258:	d878      	bhi.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009266:	d012      	beq.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009268:	e070      	b.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800926a:	4b8a      	ldr	r3, [pc, #552]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009272:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009276:	d107      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800927c:	4618      	mov	r0, r3
 800927e:	f000 feaf 	bl	8009fe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009286:	e3e4      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800928c:	e3e1      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800928e:	4b81      	ldr	r3, [pc, #516]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800929a:	d107      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800929c:	f107 0318 	add.w	r3, r7, #24
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fbf5 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092aa:	e3d2      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b0:	e3cf      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092b2:	4b78      	ldr	r3, [pc, #480]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092be:	d107      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c0:	f107 030c 	add.w	r3, r7, #12
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fd37 	bl	8009d38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ce:	e3c0      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d4:	e3bd      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092d6:	4b6f      	ldr	r3, [pc, #444]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092e0:	4b6c      	ldr	r3, [pc, #432]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d10c      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80092ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d109      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092f2:	4b68      	ldr	r3, [pc, #416]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	08db      	lsrs	r3, r3, #3
 80092f8:	f003 0303 	and.w	r3, r3, #3
 80092fc:	4a66      	ldr	r2, [pc, #408]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80092fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009304:	e01e      	b.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009306:	4b63      	ldr	r3, [pc, #396]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800930e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009312:	d106      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800931a:	d102      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800931c:	4b5f      	ldr	r3, [pc, #380]	@ (800949c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800931e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009320:	e010      	b.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009322:	4b5c      	ldr	r3, [pc, #368]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800932a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800932e:	d106      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009336:	d102      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009338:	4b59      	ldr	r3, [pc, #356]	@ (80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800933c:	e002      	b.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009342:	e386      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009344:	e385      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009346:	4b57      	ldr	r3, [pc, #348]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800934a:	e382      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009350:	e37f      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009356:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800935a:	430b      	orrs	r3, r1
 800935c:	f040 80a7 	bne.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009360:	4b4c      	ldr	r3, [pc, #304]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009364:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009368:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009370:	d055      	beq.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009378:	f200 8096 	bhi.w	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009382:	f000 8084 	beq.w	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800938c:	f200 808c 	bhi.w	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009396:	d030      	beq.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800939e:	f200 8083 	bhi.w	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d004      	beq.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093ae:	d012      	beq.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80093b0:	e07a      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093b2:	4b38      	ldr	r3, [pc, #224]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093be:	d107      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fe0b 	bl	8009fe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ce:	e340      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d4:	e33d      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093e2:	d107      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093e4:	f107 0318 	add.w	r3, r7, #24
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 fb51 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f2:	e32e      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f8:	e32b      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093fa:	4b26      	ldr	r3, [pc, #152]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009406:	d107      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009408:	f107 030c 	add.w	r3, r7, #12
 800940c:	4618      	mov	r0, r3
 800940e:	f000 fc93 	bl	8009d38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009416:	e31c      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800941c:	e319      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800941e:	4b1d      	ldr	r3, [pc, #116]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009422:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009426:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009428:	4b1a      	ldr	r3, [pc, #104]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b04      	cmp	r3, #4
 8009432:	d10c      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009436:	2b00      	cmp	r3, #0
 8009438:	d109      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800943a:	4b16      	ldr	r3, [pc, #88]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	08db      	lsrs	r3, r3, #3
 8009440:	f003 0303 	and.w	r3, r3, #3
 8009444:	4a14      	ldr	r2, [pc, #80]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009446:	fa22 f303 	lsr.w	r3, r2, r3
 800944a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800944c:	e01e      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800944e:	4b11      	ldr	r3, [pc, #68]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800945a:	d106      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800945c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009462:	d102      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009464:	4b0d      	ldr	r3, [pc, #52]	@ (800949c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009468:	e010      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800946a:	4b0a      	ldr	r3, [pc, #40]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009476:	d106      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800947e:	d102      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009480:	4b07      	ldr	r3, [pc, #28]	@ (80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009484:	e002      	b.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800948a:	e2e2      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800948c:	e2e1      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800948e:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009492:	e2de      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009494:	58024400 	.word	0x58024400
 8009498:	03d09000 	.word	0x03d09000
 800949c:	003d0900 	.word	0x003d0900
 80094a0:	00f42400 	.word	0x00f42400
 80094a4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ac:	e2d1      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80094ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80094b6:	430b      	orrs	r3, r1
 80094b8:	f040 809c 	bne.w	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80094bc:	4b93      	ldr	r3, [pc, #588]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80094c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094cc:	d054      	beq.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094d4:	f200 808b 	bhi.w	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80094d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094de:	f000 8083 	beq.w	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80094e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094e8:	f200 8081 	bhi.w	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80094ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094f2:	d02f      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094fa:	d878      	bhi.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009508:	d012      	beq.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800950a:	e070      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800950c:	4b7f      	ldr	r3, [pc, #508]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009518:	d107      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800951a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800951e:	4618      	mov	r0, r3
 8009520:	f000 fd5e 	bl	8009fe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009528:	e293      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800952e:	e290      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009530:	4b76      	ldr	r3, [pc, #472]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009538:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800953c:	d107      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800953e:	f107 0318 	add.w	r3, r7, #24
 8009542:	4618      	mov	r0, r3
 8009544:	f000 faa4 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800954c:	e281      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009552:	e27e      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009554:	4b6d      	ldr	r3, [pc, #436]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800955c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009560:	d107      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009562:	f107 030c 	add.w	r3, r7, #12
 8009566:	4618      	mov	r0, r3
 8009568:	f000 fbe6 	bl	8009d38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009570:	e26f      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009576:	e26c      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009578:	4b64      	ldr	r3, [pc, #400]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800957a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800957c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009580:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009582:	4b62      	ldr	r3, [pc, #392]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0304 	and.w	r3, r3, #4
 800958a:	2b04      	cmp	r3, #4
 800958c:	d10c      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800958e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009594:	4b5d      	ldr	r3, [pc, #372]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	08db      	lsrs	r3, r3, #3
 800959a:	f003 0303 	and.w	r3, r3, #3
 800959e:	4a5c      	ldr	r2, [pc, #368]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80095a0:	fa22 f303 	lsr.w	r3, r2, r3
 80095a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095a6:	e01e      	b.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095a8:	4b58      	ldr	r3, [pc, #352]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095b4:	d106      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80095b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095bc:	d102      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095be:	4b55      	ldr	r3, [pc, #340]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095c2:	e010      	b.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095c4:	4b51      	ldr	r3, [pc, #324]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095d0:	d106      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80095d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095d8:	d102      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095da:	4b4f      	ldr	r3, [pc, #316]	@ (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095de:	e002      	b.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80095e4:	e235      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095e6:	e234      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80095e8:	4b4c      	ldr	r3, [pc, #304]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80095ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ec:	e231      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f2:	e22e      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80095f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80095fc:	430b      	orrs	r3, r1
 80095fe:	f040 808f 	bne.w	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009602:	4b42      	ldr	r3, [pc, #264]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009606:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800960a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800960c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009612:	d06b      	beq.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800961a:	d874      	bhi.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800961c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009622:	d056      	beq.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800962a:	d86c      	bhi.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800962c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009632:	d03b      	beq.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800963a:	d864      	bhi.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009642:	d021      	beq.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800964a:	d85c      	bhi.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800964c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964e:	2b00      	cmp	r3, #0
 8009650:	d004      	beq.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009658:	d004      	beq.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800965a:	e054      	b.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800965c:	f7fe fa62 	bl	8007b24 <HAL_RCC_GetPCLK1Freq>
 8009660:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009662:	e1f6      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009664:	4b29      	ldr	r3, [pc, #164]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800966c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009670:	d107      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009672:	f107 0318 	add.w	r3, r7, #24
 8009676:	4618      	mov	r0, r3
 8009678:	f000 fa0a 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009680:	e1e7      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009686:	e1e4      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009688:	4b20      	ldr	r3, [pc, #128]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009694:	d107      	bne.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009696:	f107 030c 	add.w	r3, r7, #12
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fb4c 	bl	8009d38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096a4:	e1d5      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096aa:	e1d2      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096ac:	4b17      	ldr	r3, [pc, #92]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d109      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096b8:	4b14      	ldr	r3, [pc, #80]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	08db      	lsrs	r3, r3, #3
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	4a13      	ldr	r2, [pc, #76]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80096c4:	fa22 f303 	lsr.w	r3, r2, r3
 80096c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ca:	e1c2      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d0:	e1bf      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096d2:	4b0e      	ldr	r3, [pc, #56]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096de:	d102      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80096e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e4:	e1b5      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ea:	e1b2      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096ec:	4b07      	ldr	r3, [pc, #28]	@ (800970c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096f8:	d102      	bne.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80096fa:	4b07      	ldr	r3, [pc, #28]	@ (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80096fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096fe:	e1a8      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009704:	e1a5      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970a:	e1a2      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800970c:	58024400 	.word	0x58024400
 8009710:	03d09000 	.word	0x03d09000
 8009714:	003d0900 	.word	0x003d0900
 8009718:	00f42400 	.word	0x00f42400
 800971c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009724:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009728:	430b      	orrs	r3, r1
 800972a:	d173      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800972c:	4b9c      	ldr	r3, [pc, #624]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800972e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009730:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009734:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800973c:	d02f      	beq.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009744:	d863      	bhi.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	2b00      	cmp	r3, #0
 800974a:	d004      	beq.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800974c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009752:	d012      	beq.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009754:	e05b      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009756:	4b92      	ldr	r3, [pc, #584]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800975e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009762:	d107      	bne.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009764:	f107 0318 	add.w	r3, r7, #24
 8009768:	4618      	mov	r0, r3
 800976a:	f000 f991 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009772:	e16e      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009778:	e16b      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800977a:	4b89      	ldr	r3, [pc, #548]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009786:	d107      	bne.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009788:	f107 030c 	add.w	r3, r7, #12
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fad3 	bl	8009d38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009796:	e15c      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800979c:	e159      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800979e:	4b80      	ldr	r3, [pc, #512]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097a8:	4b7d      	ldr	r3, [pc, #500]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0304 	and.w	r3, r3, #4
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d10c      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80097b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d109      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ba:	4b79      	ldr	r3, [pc, #484]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	08db      	lsrs	r3, r3, #3
 80097c0:	f003 0303 	and.w	r3, r3, #3
 80097c4:	4a77      	ldr	r2, [pc, #476]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80097c6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097cc:	e01e      	b.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097ce:	4b74      	ldr	r3, [pc, #464]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097da:	d106      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80097dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e2:	d102      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097e4:	4b70      	ldr	r3, [pc, #448]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097e8:	e010      	b.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097ea:	4b6d      	ldr	r3, [pc, #436]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097f6:	d106      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80097f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097fe:	d102      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009800:	4b6a      	ldr	r3, [pc, #424]	@ (80099ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009804:	e002      	b.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800980a:	e122      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800980c:	e121      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009812:	e11e      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009818:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800981c:	430b      	orrs	r3, r1
 800981e:	d133      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009820:	4b5f      	ldr	r3, [pc, #380]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009828:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009836:	d012      	beq.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009838:	e023      	b.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800983a:	4b59      	ldr	r3, [pc, #356]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009846:	d107      	bne.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fbc7 	bl	8009fe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009856:	e0fc      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800985c:	e0f9      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800985e:	4b50      	ldr	r3, [pc, #320]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800986a:	d107      	bne.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800986c:	f107 0318 	add.w	r3, r7, #24
 8009870:	4618      	mov	r0, r3
 8009872:	f000 f90d 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800987a:	e0ea      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009880:	e0e7      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009886:	e0e4      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800988c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009890:	430b      	orrs	r3, r1
 8009892:	f040 808d 	bne.w	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009896:	4b42      	ldr	r3, [pc, #264]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800989a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800989e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098a6:	d06b      	beq.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80098a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098ae:	d874      	bhi.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098b6:	d056      	beq.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80098b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098be:	d86c      	bhi.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098c6:	d03b      	beq.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80098c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098ce:	d864      	bhi.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098d6:	d021      	beq.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80098d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098de:	d85c      	bhi.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d004      	beq.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80098e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098ec:	d004      	beq.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80098ee:	e054      	b.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80098f0:	f000 f8b8 	bl	8009a64 <HAL_RCCEx_GetD3PCLK1Freq>
 80098f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098f6:	e0ac      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098f8:	4b29      	ldr	r3, [pc, #164]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009904:	d107      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009906:	f107 0318 	add.w	r3, r7, #24
 800990a:	4618      	mov	r0, r3
 800990c:	f000 f8c0 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009914:	e09d      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991a:	e09a      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800991c:	4b20      	ldr	r3, [pc, #128]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009928:	d107      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800992a:	f107 030c 	add.w	r3, r7, #12
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fa02 	bl	8009d38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009938:	e08b      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800993e:	e088      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009940:	4b17      	ldr	r3, [pc, #92]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b04      	cmp	r3, #4
 800994a:	d109      	bne.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800994c:	4b14      	ldr	r3, [pc, #80]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	08db      	lsrs	r3, r3, #3
 8009952:	f003 0303 	and.w	r3, r3, #3
 8009956:	4a13      	ldr	r2, [pc, #76]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009958:	fa22 f303 	lsr.w	r3, r2, r3
 800995c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800995e:	e078      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009964:	e075      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009966:	4b0e      	ldr	r3, [pc, #56]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800996e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009972:	d102      	bne.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009974:	4b0c      	ldr	r3, [pc, #48]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009978:	e06b      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997e:	e068      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009980:	4b07      	ldr	r3, [pc, #28]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800998c:	d102      	bne.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800998e:	4b07      	ldr	r3, [pc, #28]	@ (80099ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009992:	e05e      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009998:	e05b      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800999e:	e058      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099a0:	58024400 	.word	0x58024400
 80099a4:	03d09000 	.word	0x03d09000
 80099a8:	003d0900 	.word	0x003d0900
 80099ac:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80099b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099b4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80099b8:	430b      	orrs	r3, r1
 80099ba:	d148      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80099bc:	4b27      	ldr	r3, [pc, #156]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099cc:	d02a      	beq.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80099ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d4:	d838      	bhi.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80099d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d004      	beq.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80099dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099e2:	d00d      	beq.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80099e4:	e030      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099e6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099f2:	d102      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80099f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099f8:	e02b      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099fe:	e028      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a00:	4b16      	ldr	r3, [pc, #88]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a0c:	d107      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fae4 	bl	8009fe0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a1c:	e019      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a22:	e016      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a24:	4b0d      	ldr	r3, [pc, #52]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a30:	d107      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a32:	f107 0318 	add.w	r3, r7, #24
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f82a 	bl	8009a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a40:	e007      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a46:	e004      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4c:	e001      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3740      	adds	r7, #64	@ 0x40
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	58024400 	.word	0x58024400
 8009a60:	00f42400 	.word	0x00f42400

08009a64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a68:	f7fe f82c 	bl	8007ac4 <HAL_RCC_GetHCLKFreq>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	4b06      	ldr	r3, [pc, #24]	@ (8009a88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	091b      	lsrs	r3, r3, #4
 8009a74:	f003 0307 	and.w	r3, r3, #7
 8009a78:	4904      	ldr	r1, [pc, #16]	@ (8009a8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a7a:	5ccb      	ldrb	r3, [r1, r3]
 8009a7c:	f003 031f 	and.w	r3, r3, #31
 8009a80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	58024400 	.word	0x58024400
 8009a8c:	08010ff0 	.word	0x08010ff0

08009a90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b089      	sub	sp, #36	@ 0x24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a98:	4ba1      	ldr	r3, [pc, #644]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9c:	f003 0303 	and.w	r3, r3, #3
 8009aa0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009aa2:	4b9f      	ldr	r3, [pc, #636]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa6:	0b1b      	lsrs	r3, r3, #12
 8009aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009aac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009aae:	4b9c      	ldr	r3, [pc, #624]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab2:	091b      	lsrs	r3, r3, #4
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009aba:	4b99      	ldr	r3, [pc, #612]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009abe:	08db      	lsrs	r3, r3, #3
 8009ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	fb02 f303 	mul.w	r3, r2, r3
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 8111 	beq.w	8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	f000 8083 	beq.w	8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	f200 80a1 	bhi.w	8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d003      	beq.n	8009afc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d056      	beq.n	8009ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009afa:	e099      	b.n	8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009afc:	4b88      	ldr	r3, [pc, #544]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0320 	and.w	r3, r3, #32
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d02d      	beq.n	8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b08:	4b85      	ldr	r3, [pc, #532]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	08db      	lsrs	r3, r3, #3
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	4a84      	ldr	r2, [pc, #528]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b14:	fa22 f303 	lsr.w	r3, r2, r3
 8009b18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	ee07 3a90 	vmov	s15, r3
 8009b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b32:	4b7b      	ldr	r3, [pc, #492]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b62:	e087      	b.n	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b76:	4b6a      	ldr	r3, [pc, #424]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ba6:	e065      	b.n	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bba:	4b59      	ldr	r3, [pc, #356]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bea:	e043      	b.n	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfe:	4b48      	ldr	r3, [pc, #288]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c2e:	e021      	b.n	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c42:	4b37      	ldr	r3, [pc, #220]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009c74:	4b2a      	ldr	r3, [pc, #168]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c78:	0a5b      	lsrs	r3, r3, #9
 8009c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c9a:	ee17 2a90 	vmov	r2, s15
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca6:	0c1b      	lsrs	r3, r3, #16
 8009ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cac:	ee07 3a90 	vmov	s15, r3
 8009cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc8:	ee17 2a90 	vmov	r2, s15
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009cd0:	4b13      	ldr	r3, [pc, #76]	@ (8009d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd4:	0e1b      	lsrs	r3, r3, #24
 8009cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf6:	ee17 2a90 	vmov	r2, s15
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009cfe:	e008      	b.n	8009d12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	609a      	str	r2, [r3, #8]
}
 8009d12:	bf00      	nop
 8009d14:	3724      	adds	r7, #36	@ 0x24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	58024400 	.word	0x58024400
 8009d24:	03d09000 	.word	0x03d09000
 8009d28:	46000000 	.word	0x46000000
 8009d2c:	4c742400 	.word	0x4c742400
 8009d30:	4a742400 	.word	0x4a742400
 8009d34:	4b742400 	.word	0x4b742400

08009d38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b089      	sub	sp, #36	@ 0x24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d40:	4ba1      	ldr	r3, [pc, #644]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d44:	f003 0303 	and.w	r3, r3, #3
 8009d48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009d4a:	4b9f      	ldr	r3, [pc, #636]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4e:	0d1b      	lsrs	r3, r3, #20
 8009d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d56:	4b9c      	ldr	r3, [pc, #624]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5a:	0a1b      	lsrs	r3, r3, #8
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009d62:	4b99      	ldr	r3, [pc, #612]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d66:	08db      	lsrs	r3, r3, #3
 8009d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	fb02 f303 	mul.w	r3, r2, r3
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 8111 	beq.w	8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	f000 8083 	beq.w	8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	f200 80a1 	bhi.w	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d056      	beq.n	8009e50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009da2:	e099      	b.n	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da4:	4b88      	ldr	r3, [pc, #544]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0320 	and.w	r3, r3, #32
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d02d      	beq.n	8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009db0:	4b85      	ldr	r3, [pc, #532]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	08db      	lsrs	r3, r3, #3
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	4a84      	ldr	r2, [pc, #528]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	ee07 3a90 	vmov	s15, r3
 8009dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dda:	4b7b      	ldr	r3, [pc, #492]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e0a:	e087      	b.n	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e4e:	e065      	b.n	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e62:	4b59      	ldr	r3, [pc, #356]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e92:	e043      	b.n	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea6:	4b48      	ldr	r3, [pc, #288]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ed6:	e021      	b.n	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eea:	4b37      	ldr	r3, [pc, #220]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009efe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f20:	0a5b      	lsrs	r3, r3, #9
 8009f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f42:	ee17 2a90 	vmov	r2, s15
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f4e:	0c1b      	lsrs	r3, r3, #16
 8009f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f54:	ee07 3a90 	vmov	s15, r3
 8009f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f70:	ee17 2a90 	vmov	r2, s15
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009f78:	4b13      	ldr	r3, [pc, #76]	@ (8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7c:	0e1b      	lsrs	r3, r3, #24
 8009f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f82:	ee07 3a90 	vmov	s15, r3
 8009f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f9e:	ee17 2a90 	vmov	r2, s15
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009fa6:	e008      	b.n	8009fba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	609a      	str	r2, [r3, #8]
}
 8009fba:	bf00      	nop
 8009fbc:	3724      	adds	r7, #36	@ 0x24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	58024400 	.word	0x58024400
 8009fcc:	03d09000 	.word	0x03d09000
 8009fd0:	46000000 	.word	0x46000000
 8009fd4:	4c742400 	.word	0x4c742400
 8009fd8:	4a742400 	.word	0x4a742400
 8009fdc:	4b742400 	.word	0x4b742400

08009fe0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b089      	sub	sp, #36	@ 0x24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fe8:	4ba0      	ldr	r3, [pc, #640]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fec:	f003 0303 	and.w	r3, r3, #3
 8009ff0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009ff2:	4b9e      	ldr	r3, [pc, #632]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff6:	091b      	lsrs	r3, r3, #4
 8009ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ffc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ffe:	4b9b      	ldr	r3, [pc, #620]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a008:	4b98      	ldr	r3, [pc, #608]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a00a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a00c:	08db      	lsrs	r3, r3, #3
 800a00e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	fb02 f303 	mul.w	r3, r2, r3
 800a018:	ee07 3a90 	vmov	s15, r3
 800a01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a020:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 8111 	beq.w	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	f000 8083 	beq.w	800a13a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	2b02      	cmp	r3, #2
 800a038:	f200 80a1 	bhi.w	800a17e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d003      	beq.n	800a04a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d056      	beq.n	800a0f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a048:	e099      	b.n	800a17e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a04a:	4b88      	ldr	r3, [pc, #544]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d02d      	beq.n	800a0b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a056:	4b85      	ldr	r3, [pc, #532]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	08db      	lsrs	r3, r3, #3
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	4a83      	ldr	r2, [pc, #524]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a062:	fa22 f303 	lsr.w	r3, r2, r3
 800a066:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	ee07 3a90 	vmov	s15, r3
 800a078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a080:	4b7a      	ldr	r3, [pc, #488]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a090:	ed97 6a03 	vldr	s12, [r7, #12]
 800a094:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a274 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a0b0:	e087      	b.n	800a1c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	ee07 3a90 	vmov	s15, r3
 800a0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0bc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a278 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c4:	4b69      	ldr	r3, [pc, #420]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0cc:	ee07 3a90 	vmov	s15, r3
 800a0d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a274 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0f4:	e065      	b.n	800a1c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	ee07 3a90 	vmov	s15, r3
 800a0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a100:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a27c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a108:	4b58      	ldr	r3, [pc, #352]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a110:	ee07 3a90 	vmov	s15, r3
 800a114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a118:	ed97 6a03 	vldr	s12, [r7, #12]
 800a11c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a274 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a128:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a12c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a130:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a134:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a138:	e043      	b.n	800a1c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	ee07 3a90 	vmov	s15, r3
 800a140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a144:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a14c:	4b47      	ldr	r3, [pc, #284]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a14e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a154:	ee07 3a90 	vmov	s15, r3
 800a158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a15c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a160:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a274 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a16c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a174:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a178:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a17c:	e021      	b.n	800a1c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	ee07 3a90 	vmov	s15, r3
 800a184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a188:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a278 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a18c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a190:	4b36      	ldr	r3, [pc, #216]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a198:	ee07 3a90 	vmov	s15, r3
 800a19c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a274 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a1c2:	4b2a      	ldr	r3, [pc, #168]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c6:	0a5b      	lsrs	r3, r3, #9
 800a1c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1cc:	ee07 3a90 	vmov	s15, r3
 800a1d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1e8:	ee17 2a90 	vmov	r2, s15
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a1f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1f4:	0c1b      	lsrs	r3, r3, #16
 800a1f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1fa:	ee07 3a90 	vmov	s15, r3
 800a1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a20a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a20e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a216:	ee17 2a90 	vmov	r2, s15
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a21e:	4b13      	ldr	r3, [pc, #76]	@ (800a26c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a222:	0e1b      	lsrs	r3, r3, #24
 800a224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a228:	ee07 3a90 	vmov	s15, r3
 800a22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a230:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a234:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a238:	edd7 6a07 	vldr	s13, [r7, #28]
 800a23c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a244:	ee17 2a90 	vmov	r2, s15
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a24c:	e008      	b.n	800a260 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	609a      	str	r2, [r3, #8]
}
 800a260:	bf00      	nop
 800a262:	3724      	adds	r7, #36	@ 0x24
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	58024400 	.word	0x58024400
 800a270:	03d09000 	.word	0x03d09000
 800a274:	46000000 	.word	0x46000000
 800a278:	4c742400 	.word	0x4c742400
 800a27c:	4a742400 	.word	0x4a742400
 800a280:	4b742400 	.word	0x4b742400

0800a284 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a292:	4b53      	ldr	r3, [pc, #332]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a296:	f003 0303 	and.w	r3, r3, #3
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d101      	bne.n	800a2a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e099      	b.n	800a3d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2a2:	4b4f      	ldr	r3, [pc, #316]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a4e      	ldr	r2, [pc, #312]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2ae:	f7fa fb33 	bl	8004918 <HAL_GetTick>
 800a2b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2b4:	e008      	b.n	800a2c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2b6:	f7fa fb2f 	bl	8004918 <HAL_GetTick>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d901      	bls.n	800a2c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e086      	b.n	800a3d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2c8:	4b45      	ldr	r3, [pc, #276]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1f0      	bne.n	800a2b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2d4:	4b42      	ldr	r3, [pc, #264]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	031b      	lsls	r3, r3, #12
 800a2e2:	493f      	ldr	r1, [pc, #252]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	025b      	lsls	r3, r3, #9
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	431a      	orrs	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	3b01      	subs	r3, #1
 800a304:	041b      	lsls	r3, r3, #16
 800a306:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a30a:	431a      	orrs	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	3b01      	subs	r3, #1
 800a312:	061b      	lsls	r3, r3, #24
 800a314:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a318:	4931      	ldr	r1, [pc, #196]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a31e:	4b30      	ldr	r3, [pc, #192]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a322:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	492d      	ldr	r1, [pc, #180]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a330:	4b2b      	ldr	r3, [pc, #172]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a334:	f023 0220 	bic.w	r2, r3, #32
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	4928      	ldr	r1, [pc, #160]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a342:	4b27      	ldr	r3, [pc, #156]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a346:	4a26      	ldr	r2, [pc, #152]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a348:	f023 0310 	bic.w	r3, r3, #16
 800a34c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a34e:	4b24      	ldr	r3, [pc, #144]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a352:	4b24      	ldr	r3, [pc, #144]	@ (800a3e4 <RCCEx_PLL2_Config+0x160>)
 800a354:	4013      	ands	r3, r2
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	69d2      	ldr	r2, [r2, #28]
 800a35a:	00d2      	lsls	r2, r2, #3
 800a35c:	4920      	ldr	r1, [pc, #128]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a362:	4b1f      	ldr	r3, [pc, #124]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a366:	4a1e      	ldr	r2, [pc, #120]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a368:	f043 0310 	orr.w	r3, r3, #16
 800a36c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a374:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a378:	4a19      	ldr	r2, [pc, #100]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a37a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a37e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a380:	e00f      	b.n	800a3a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d106      	bne.n	800a396 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a388:	4b15      	ldr	r3, [pc, #84]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38c:	4a14      	ldr	r2, [pc, #80]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a38e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a394:	e005      	b.n	800a3a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a396:	4b12      	ldr	r3, [pc, #72]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a39a:	4a11      	ldr	r2, [pc, #68]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a39c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a3a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a0e      	ldr	r2, [pc, #56]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ae:	f7fa fab3 	bl	8004918 <HAL_GetTick>
 800a3b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3b4:	e008      	b.n	800a3c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3b6:	f7fa faaf 	bl	8004918 <HAL_GetTick>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d901      	bls.n	800a3c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e006      	b.n	800a3d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3c8:	4b05      	ldr	r3, [pc, #20]	@ (800a3e0 <RCCEx_PLL2_Config+0x15c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d0f0      	beq.n	800a3b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	58024400 	.word	0x58024400
 800a3e4:	ffff0007 	.word	0xffff0007

0800a3e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3f6:	4b53      	ldr	r3, [pc, #332]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fa:	f003 0303 	and.w	r3, r3, #3
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d101      	bne.n	800a406 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e099      	b.n	800a53a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a406:	4b4f      	ldr	r3, [pc, #316]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a4e      	ldr	r2, [pc, #312]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a412:	f7fa fa81 	bl	8004918 <HAL_GetTick>
 800a416:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a418:	e008      	b.n	800a42c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a41a:	f7fa fa7d 	bl	8004918 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	2b02      	cmp	r3, #2
 800a426:	d901      	bls.n	800a42c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e086      	b.n	800a53a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a42c:	4b45      	ldr	r3, [pc, #276]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1f0      	bne.n	800a41a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a438:	4b42      	ldr	r3, [pc, #264]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	051b      	lsls	r3, r3, #20
 800a446:	493f      	ldr	r1, [pc, #252]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	3b01      	subs	r3, #1
 800a452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	025b      	lsls	r3, r3, #9
 800a45e:	b29b      	uxth	r3, r3
 800a460:	431a      	orrs	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	3b01      	subs	r3, #1
 800a468:	041b      	lsls	r3, r3, #16
 800a46a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	3b01      	subs	r3, #1
 800a476:	061b      	lsls	r3, r3, #24
 800a478:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a47c:	4931      	ldr	r1, [pc, #196]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a482:	4b30      	ldr	r3, [pc, #192]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a486:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	492d      	ldr	r1, [pc, #180]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a490:	4313      	orrs	r3, r2
 800a492:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a494:	4b2b      	ldr	r3, [pc, #172]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a498:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	4928      	ldr	r1, [pc, #160]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4a6:	4b27      	ldr	r3, [pc, #156]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4aa:	4a26      	ldr	r2, [pc, #152]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4b2:	4b24      	ldr	r3, [pc, #144]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4b6:	4b24      	ldr	r3, [pc, #144]	@ (800a548 <RCCEx_PLL3_Config+0x160>)
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	69d2      	ldr	r2, [r2, #28]
 800a4be:	00d2      	lsls	r2, r2, #3
 800a4c0:	4920      	ldr	r1, [pc, #128]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d106      	bne.n	800a4e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4dc:	4a19      	ldr	r2, [pc, #100]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a4e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4e4:	e00f      	b.n	800a506 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d106      	bne.n	800a4fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4ec:	4b15      	ldr	r3, [pc, #84]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f0:	4a14      	ldr	r2, [pc, #80]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4f8:	e005      	b.n	800a506 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4fa:	4b12      	ldr	r3, [pc, #72]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fe:	4a11      	ldr	r2, [pc, #68]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a500:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a504:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a506:	4b0f      	ldr	r3, [pc, #60]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a0e      	ldr	r2, [pc, #56]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a50c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a512:	f7fa fa01 	bl	8004918 <HAL_GetTick>
 800a516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a518:	e008      	b.n	800a52c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a51a:	f7fa f9fd 	bl	8004918 <HAL_GetTick>
 800a51e:	4602      	mov	r2, r0
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	2b02      	cmp	r3, #2
 800a526:	d901      	bls.n	800a52c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e006      	b.n	800a53a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a52c:	4b05      	ldr	r3, [pc, #20]	@ (800a544 <RCCEx_PLL3_Config+0x15c>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0f0      	beq.n	800a51a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a538:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	58024400 	.word	0x58024400
 800a548:	ffff0007 	.word	0xffff0007

0800a54c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e10f      	b.n	800a77e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a87      	ldr	r2, [pc, #540]	@ (800a788 <HAL_SPI_Init+0x23c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d00f      	beq.n	800a58e <HAL_SPI_Init+0x42>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a86      	ldr	r2, [pc, #536]	@ (800a78c <HAL_SPI_Init+0x240>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d00a      	beq.n	800a58e <HAL_SPI_Init+0x42>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a84      	ldr	r2, [pc, #528]	@ (800a790 <HAL_SPI_Init+0x244>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d005      	beq.n	800a58e <HAL_SPI_Init+0x42>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	2b0f      	cmp	r3, #15
 800a588:	d901      	bls.n	800a58e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e0f7      	b.n	800a77e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f001 f968 	bl	800b864 <SPI_GetPacketSize>
 800a594:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a7b      	ldr	r2, [pc, #492]	@ (800a788 <HAL_SPI_Init+0x23c>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d00c      	beq.n	800a5ba <HAL_SPI_Init+0x6e>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a79      	ldr	r2, [pc, #484]	@ (800a78c <HAL_SPI_Init+0x240>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d007      	beq.n	800a5ba <HAL_SPI_Init+0x6e>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a78      	ldr	r2, [pc, #480]	@ (800a790 <HAL_SPI_Init+0x244>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d002      	beq.n	800a5ba <HAL_SPI_Init+0x6e>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b08      	cmp	r3, #8
 800a5b8:	d811      	bhi.n	800a5de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a5be:	4a72      	ldr	r2, [pc, #456]	@ (800a788 <HAL_SPI_Init+0x23c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d009      	beq.n	800a5d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a70      	ldr	r2, [pc, #448]	@ (800a78c <HAL_SPI_Init+0x240>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d004      	beq.n	800a5d8 <HAL_SPI_Init+0x8c>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a6f      	ldr	r2, [pc, #444]	@ (800a790 <HAL_SPI_Init+0x244>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d104      	bne.n	800a5e2 <HAL_SPI_Init+0x96>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b10      	cmp	r3, #16
 800a5dc:	d901      	bls.n	800a5e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e0cd      	b.n	800a77e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7f9 fd64 	bl	80040c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0201 	bic.w	r2, r2, #1
 800a612:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a61e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a628:	d119      	bne.n	800a65e <HAL_SPI_Init+0x112>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a632:	d103      	bne.n	800a63c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d008      	beq.n	800a64e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10c      	bne.n	800a65e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a64c:	d107      	bne.n	800a65e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a65c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00f      	beq.n	800a68a <HAL_SPI_Init+0x13e>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	2b06      	cmp	r3, #6
 800a670:	d90b      	bls.n	800a68a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	e007      	b.n	800a69a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a698:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	69da      	ldr	r2, [r3, #28]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ac:	ea42 0103 	orr.w	r1, r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	431a      	orrs	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6fa:	ea42 0103 	orr.w	r1, r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d113      	bne.n	800a73a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a724:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a738:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f022 0201 	bic.w	r2, r2, #1
 800a748:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	430a      	orrs	r2, r1
 800a76a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	40013000 	.word	0x40013000
 800a78c:	40003800 	.word	0x40003800
 800a790:	40003c00 	.word	0x40003c00

0800a794 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af02      	add	r7, sp, #8
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3320      	adds	r3, #32
 800a7aa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7ac:	f7fa f8b4 	bl	8004918 <HAL_GetTick>
 800a7b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d001      	beq.n	800a7c2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e1d1      	b.n	800ab66 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <HAL_SPI_Transmit+0x3a>
 800a7c8:	88fb      	ldrh	r3, [r7, #6]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e1c9      	b.n	800ab66 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d101      	bne.n	800a7e0 <HAL_SPI_Transmit+0x4c>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e1c2      	b.n	800ab66 <HAL_SPI_Transmit+0x3d2>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2203      	movs	r2, #3
 800a7ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	88fa      	ldrh	r2, [r7, #6]
 800a802:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	88fa      	ldrh	r2, [r7, #6]
 800a80a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a838:	d108      	bne.n	800a84c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a848:	601a      	str	r2, [r3, #0]
 800a84a:	e009      	b.n	800a860 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a85e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	4b96      	ldr	r3, [pc, #600]	@ (800aac0 <HAL_SPI_Transmit+0x32c>)
 800a868:	4013      	ands	r3, r2
 800a86a:	88f9      	ldrh	r1, [r7, #6]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	6812      	ldr	r2, [r2, #0]
 800a870:	430b      	orrs	r3, r1
 800a872:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f042 0201 	orr.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a88c:	d107      	bne.n	800a89e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a89c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	2b0f      	cmp	r3, #15
 800a8a4:	d947      	bls.n	800a936 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a8a6:	e03f      	b.n	800a928 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d114      	bne.n	800a8e0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6812      	ldr	r2, [r2, #0]
 800a8c0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8c6:	1d1a      	adds	r2, r3, #4
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a8de:	e023      	b.n	800a928 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8e0:	f7fa f81a 	bl	8004918 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	683a      	ldr	r2, [r7, #0]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d803      	bhi.n	800a8f8 <HAL_SPI_Transmit+0x164>
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f6:	d102      	bne.n	800a8fe <HAL_SPI_Transmit+0x16a>
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d114      	bne.n	800a928 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 fee2 	bl	800b6c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a90a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a924:	2303      	movs	r3, #3
 800a926:	e11e      	b.n	800ab66 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a92e:	b29b      	uxth	r3, r3
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1b9      	bne.n	800a8a8 <HAL_SPI_Transmit+0x114>
 800a934:	e0f1      	b.n	800ab1a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	2b07      	cmp	r3, #7
 800a93c:	f240 80e6 	bls.w	800ab0c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a940:	e05d      	b.n	800a9fe <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d132      	bne.n	800a9b6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a956:	b29b      	uxth	r3, r3
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d918      	bls.n	800a98e <HAL_SPI_Transmit+0x1fa>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d014      	beq.n	800a98e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6812      	ldr	r2, [r2, #0]
 800a96e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a974:	1d1a      	adds	r2, r3, #4
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a980:	b29b      	uxth	r3, r3
 800a982:	3b02      	subs	r3, #2
 800a984:	b29a      	uxth	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a98c:	e037      	b.n	800a9fe <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a992:	881a      	ldrh	r2, [r3, #0]
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a99c:	1c9a      	adds	r2, r3, #2
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a9b4:	e023      	b.n	800a9fe <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9b6:	f7f9 ffaf 	bl	8004918 <HAL_GetTick>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d803      	bhi.n	800a9ce <HAL_SPI_Transmit+0x23a>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9cc:	d102      	bne.n	800a9d4 <HAL_SPI_Transmit+0x240>
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d114      	bne.n	800a9fe <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f000 fe77 	bl	800b6c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e0b3      	b.n	800ab66 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d19b      	bne.n	800a942 <HAL_SPI_Transmit+0x1ae>
 800aa0a:	e086      	b.n	800ab1a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d154      	bne.n	800aac4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d918      	bls.n	800aa58 <HAL_SPI_Transmit+0x2c4>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa2a:	2b40      	cmp	r3, #64	@ 0x40
 800aa2c:	d914      	bls.n	800aa58 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6812      	ldr	r2, [r2, #0]
 800aa38:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa3e:	1d1a      	adds	r2, r3, #4
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	3b04      	subs	r3, #4
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aa56:	e059      	b.n	800ab0c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d917      	bls.n	800aa94 <HAL_SPI_Transmit+0x300>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d013      	beq.n	800aa94 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa70:	881a      	ldrh	r2, [r3, #0]
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa7a:	1c9a      	adds	r2, r3, #2
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	3b02      	subs	r3, #2
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aa92:	e03b      	b.n	800ab0c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3320      	adds	r3, #32
 800aa9e:	7812      	ldrb	r2, [r2, #0]
 800aaa0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	3b01      	subs	r3, #1
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aabe:	e025      	b.n	800ab0c <HAL_SPI_Transmit+0x378>
 800aac0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aac4:	f7f9 ff28 	bl	8004918 <HAL_GetTick>
 800aac8:	4602      	mov	r2, r0
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d803      	bhi.n	800aadc <HAL_SPI_Transmit+0x348>
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aada:	d102      	bne.n	800aae2 <HAL_SPI_Transmit+0x34e>
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d114      	bne.n	800ab0c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 fdf0 	bl	800b6c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e02c      	b.n	800ab66 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f47f af79 	bne.w	800aa0c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2200      	movs	r2, #0
 800ab22:	2108      	movs	r1, #8
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f000 fe6f 	bl	800b808 <SPI_WaitOnFlagUntilTimeout>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d007      	beq.n	800ab40 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab36:	f043 0220 	orr.w	r2, r3, #32
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 fdc1 	bl	800b6c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e000      	b.n	800ab66 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ab64:	2300      	movs	r3, #0
  }
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop

0800ab70 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b088      	sub	sp, #32
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab84:	095b      	lsrs	r3, r3, #5
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	3301      	adds	r3, #1
 800ab8a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3330      	adds	r3, #48	@ 0x30
 800ab92:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab94:	f7f9 fec0 	bl	8004918 <HAL_GetTick>
 800ab98:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d001      	beq.n	800abaa <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800aba6:	2302      	movs	r3, #2
 800aba8:	e250      	b.n	800b04c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <HAL_SPI_Receive+0x46>
 800abb0:	88fb      	ldrh	r3, [r7, #6]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e248      	b.n	800b04c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d101      	bne.n	800abc8 <HAL_SPI_Receive+0x58>
 800abc4:	2302      	movs	r3, #2
 800abc6:	e241      	b.n	800b04c <HAL_SPI_Receive+0x4dc>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2204      	movs	r2, #4
 800abd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	88fa      	ldrh	r2, [r7, #6]
 800abea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	88fa      	ldrh	r2, [r7, #6]
 800abf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ac20:	d108      	bne.n	800ac34 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	e009      	b.n	800ac48 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ac46:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	4b95      	ldr	r3, [pc, #596]	@ (800aea4 <HAL_SPI_Receive+0x334>)
 800ac50:	4013      	ands	r3, r2
 800ac52:	88f9      	ldrh	r1, [r7, #6]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	6812      	ldr	r2, [r2, #0]
 800ac58:	430b      	orrs	r3, r1
 800ac5a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac74:	d107      	bne.n	800ac86 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	2b0f      	cmp	r3, #15
 800ac8c:	d96c      	bls.n	800ad68 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ac8e:	e064      	b.n	800ad5a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d114      	bne.n	800acd0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800acb0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acb6:	1d1a      	adds	r2, r3, #4
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	3b01      	subs	r3, #1
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800acce:	e044      	b.n	800ad5a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	8bfa      	ldrh	r2, [r7, #30]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d919      	bls.n	800ad12 <HAL_SPI_Receive+0x1a2>
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d014      	beq.n	800ad12 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acf0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800acf2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acf8:	1d1a      	adds	r2, r3, #4
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	3b01      	subs	r3, #1
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ad10:	e023      	b.n	800ad5a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad12:	f7f9 fe01 	bl	8004918 <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d803      	bhi.n	800ad2a <HAL_SPI_Receive+0x1ba>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad28:	d102      	bne.n	800ad30 <HAL_SPI_Receive+0x1c0>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d114      	bne.n	800ad5a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f000 fcc9 	bl	800b6c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ad56:	2303      	movs	r3, #3
 800ad58:	e178      	b.n	800b04c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d194      	bne.n	800ac90 <HAL_SPI_Receive+0x120>
 800ad66:	e15e      	b.n	800b026 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	2b07      	cmp	r3, #7
 800ad6e:	f240 8153 	bls.w	800b018 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ad72:	e08f      	b.n	800ae94 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d114      	bne.n	800adb4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	8812      	ldrh	r2, [r2, #0]
 800ad92:	b292      	uxth	r2, r2
 800ad94:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad9a:	1c9a      	adds	r2, r3, #2
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	3b01      	subs	r3, #1
 800adaa:	b29a      	uxth	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800adb2:	e06f      	b.n	800ae94 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adba:	b29b      	uxth	r3, r3
 800adbc:	8bfa      	ldrh	r2, [r7, #30]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d924      	bls.n	800ae0c <HAL_SPI_Receive+0x29c>
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01f      	beq.n	800ae0c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	8812      	ldrh	r2, [r2, #0]
 800add4:	b292      	uxth	r2, r2
 800add6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800addc:	1c9a      	adds	r2, r3, #2
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ade6:	69ba      	ldr	r2, [r7, #24]
 800ade8:	8812      	ldrh	r2, [r2, #0]
 800adea:	b292      	uxth	r2, r2
 800adec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf2:	1c9a      	adds	r2, r3, #2
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	3b02      	subs	r3, #2
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ae0a:	e043      	b.n	800ae94 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d119      	bne.n	800ae4c <HAL_SPI_Receive+0x2dc>
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d014      	beq.n	800ae4c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae26:	69ba      	ldr	r2, [r7, #24]
 800ae28:	8812      	ldrh	r2, [r2, #0]
 800ae2a:	b292      	uxth	r2, r2
 800ae2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae32:	1c9a      	adds	r2, r3, #2
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	3b01      	subs	r3, #1
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ae4a:	e023      	b.n	800ae94 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae4c:	f7f9 fd64 	bl	8004918 <HAL_GetTick>
 800ae50:	4602      	mov	r2, r0
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d803      	bhi.n	800ae64 <HAL_SPI_Receive+0x2f4>
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae62:	d102      	bne.n	800ae6a <HAL_SPI_Receive+0x2fa>
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d114      	bne.n	800ae94 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f000 fc2c 	bl	800b6c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e0db      	b.n	800b04c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f47f af69 	bne.w	800ad74 <HAL_SPI_Receive+0x204>
 800aea2:	e0c0      	b.n	800b026 <HAL_SPI_Receive+0x4b6>
 800aea4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d117      	bne.n	800aeee <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeca:	7812      	ldrb	r2, [r2, #0]
 800aecc:	b2d2      	uxtb	r2, r2
 800aece:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	3b01      	subs	r3, #1
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aeec:	e094      	b.n	800b018 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	8bfa      	ldrh	r2, [r7, #30]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d946      	bls.n	800af8a <HAL_SPI_Receive+0x41a>
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af02:	2b00      	cmp	r3, #0
 800af04:	d041      	beq.n	800af8a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af12:	7812      	ldrb	r2, [r2, #0]
 800af14:	b2d2      	uxtb	r2, r2
 800af16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af1c:	1c5a      	adds	r2, r3, #1
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af2e:	7812      	ldrb	r2, [r2, #0]
 800af30:	b2d2      	uxtb	r2, r2
 800af32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af4a:	7812      	ldrb	r2, [r2, #0]
 800af4c:	b2d2      	uxtb	r2, r2
 800af4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af54:	1c5a      	adds	r2, r3, #1
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af66:	7812      	ldrb	r2, [r2, #0]
 800af68:	b2d2      	uxtb	r2, r2
 800af6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af70:	1c5a      	adds	r2, r3, #1
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	3b04      	subs	r3, #4
 800af80:	b29a      	uxth	r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800af88:	e046      	b.n	800b018 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af90:	b29b      	uxth	r3, r3
 800af92:	2b03      	cmp	r3, #3
 800af94:	d81c      	bhi.n	800afd0 <HAL_SPI_Receive+0x460>
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d017      	beq.n	800afd0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afac:	7812      	ldrb	r2, [r2, #0]
 800afae:	b2d2      	uxtb	r2, r2
 800afb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	3b01      	subs	r3, #1
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800afce:	e023      	b.n	800b018 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afd0:	f7f9 fca2 	bl	8004918 <HAL_GetTick>
 800afd4:	4602      	mov	r2, r0
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d803      	bhi.n	800afe8 <HAL_SPI_Receive+0x478>
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe6:	d102      	bne.n	800afee <HAL_SPI_Receive+0x47e>
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d114      	bne.n	800b018 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f000 fb6a 	bl	800b6c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800affa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e019      	b.n	800b04c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b01e:	b29b      	uxth	r3, r3
 800b020:	2b00      	cmp	r3, #0
 800b022:	f47f af41 	bne.w	800aea8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 fb4e 	bl	800b6c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800b04a:	2300      	movs	r3, #0
  }
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3720      	adds	r7, #32
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	@ 0x38
 800b058:	af02      	add	r7, sp, #8
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3320      	adds	r3, #32
 800b068:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3330      	adds	r3, #48	@ 0x30
 800b070:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b076:	095b      	lsrs	r3, r3, #5
 800b078:	b29b      	uxth	r3, r3
 800b07a:	3301      	adds	r3, #1
 800b07c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b07e:	f7f9 fc4b 	bl	8004918 <HAL_GetTick>
 800b082:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800b084:	887b      	ldrh	r3, [r7, #2]
 800b086:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800b088:	887b      	ldrh	r3, [r7, #2]
 800b08a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b01      	cmp	r3, #1
 800b096:	d001      	beq.n	800b09c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800b098:	2302      	movs	r3, #2
 800b09a:	e310      	b.n	800b6be <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d005      	beq.n	800b0ae <HAL_SPI_TransmitReceive+0x5a>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <HAL_SPI_TransmitReceive+0x5a>
 800b0a8:	887b      	ldrh	r3, [r7, #2]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e305      	b.n	800b6be <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d101      	bne.n	800b0c0 <HAL_SPI_TransmitReceive+0x6c>
 800b0bc:	2302      	movs	r3, #2
 800b0be:	e2fe      	b.n	800b6be <HAL_SPI_TransmitReceive+0x66a>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2205      	movs	r2, #5
 800b0cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	887a      	ldrh	r2, [r7, #2]
 800b0e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	887a      	ldrh	r2, [r7, #2]
 800b0ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	887a      	ldrh	r2, [r7, #2]
 800b0f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	887a      	ldrh	r2, [r7, #2]
 800b100:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b11e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a70      	ldr	r2, [pc, #448]	@ (800b2e8 <HAL_SPI_TransmitReceive+0x294>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d009      	beq.n	800b13e <HAL_SPI_TransmitReceive+0xea>
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a6f      	ldr	r2, [pc, #444]	@ (800b2ec <HAL_SPI_TransmitReceive+0x298>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d004      	beq.n	800b13e <HAL_SPI_TransmitReceive+0xea>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a6d      	ldr	r2, [pc, #436]	@ (800b2f0 <HAL_SPI_TransmitReceive+0x29c>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d102      	bne.n	800b144 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800b13e:	2310      	movs	r3, #16
 800b140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b142:	e001      	b.n	800b148 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800b144:	2308      	movs	r3, #8
 800b146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	4b69      	ldr	r3, [pc, #420]	@ (800b2f4 <HAL_SPI_TransmitReceive+0x2a0>)
 800b150:	4013      	ands	r3, r2
 800b152:	8879      	ldrh	r1, [r7, #2]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	6812      	ldr	r2, [r2, #0]
 800b158:	430b      	orrs	r3, r1
 800b15a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f042 0201 	orr.w	r2, r2, #1
 800b16a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b174:	d107      	bne.n	800b186 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b184:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	2b0f      	cmp	r3, #15
 800b18c:	f240 80a2 	bls.w	800b2d4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b192:	089b      	lsrs	r3, r3, #2
 800b194:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b196:	e094      	b.n	800b2c2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	f003 0302 	and.w	r3, r3, #2
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d120      	bne.n	800b1e8 <HAL_SPI_TransmitReceive+0x194>
 800b1a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01d      	beq.n	800b1e8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b1ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b1ae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d217      	bcs.n	800b1e8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6812      	ldr	r2, [r2, #0]
 800b1c2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1c8:	1d1a      	adds	r2, r3, #4
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b1e6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b1f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d065      	beq.n	800b2c2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	f003 0301 	and.w	r3, r3, #1
 800b200:	2b01      	cmp	r3, #1
 800b202:	d118      	bne.n	800b236 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b20c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b20e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b214:	1d1a      	adds	r2, r3, #4
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b220:	b29b      	uxth	r3, r3
 800b222:	3b01      	subs	r3, #1
 800b224:	b29a      	uxth	r2, r3
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b232:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b234:	e045      	b.n	800b2c2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b236:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b238:	8bfb      	ldrh	r3, [r7, #30]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d21d      	bcs.n	800b27a <HAL_SPI_TransmitReceive+0x226>
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b244:	2b00      	cmp	r3, #0
 800b246:	d018      	beq.n	800b27a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b250:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b252:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b258:	1d1a      	adds	r2, r3, #4
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b264:	b29b      	uxth	r3, r3
 800b266:	3b01      	subs	r3, #1
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b276:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b278:	e023      	b.n	800b2c2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b27a:	f7f9 fb4d 	bl	8004918 <HAL_GetTick>
 800b27e:	4602      	mov	r2, r0
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b286:	429a      	cmp	r2, r3
 800b288:	d803      	bhi.n	800b292 <HAL_SPI_TransmitReceive+0x23e>
 800b28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b290:	d102      	bne.n	800b298 <HAL_SPI_TransmitReceive+0x244>
 800b292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b294:	2b00      	cmp	r3, #0
 800b296:	d114      	bne.n	800b2c2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 fa15 	bl	800b6c8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e1fd      	b.n	800b6be <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b2c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f47f af67 	bne.w	800b198 <HAL_SPI_TransmitReceive+0x144>
 800b2ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f47f af63 	bne.w	800b198 <HAL_SPI_TransmitReceive+0x144>
 800b2d2:	e1ce      	b.n	800b672 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	2b07      	cmp	r3, #7
 800b2da:	f240 81c2 	bls.w	800b662 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e0:	085b      	lsrs	r3, r3, #1
 800b2e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b2e4:	e0c9      	b.n	800b47a <HAL_SPI_TransmitReceive+0x426>
 800b2e6:	bf00      	nop
 800b2e8:	40013000 	.word	0x40013000
 800b2ec:	40003800 	.word	0x40003800
 800b2f0:	40003c00 	.word	0x40003c00
 800b2f4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b02      	cmp	r3, #2
 800b304:	d11f      	bne.n	800b346 <HAL_SPI_TransmitReceive+0x2f2>
 800b306:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01c      	beq.n	800b346 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b30c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b30e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b312:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b314:	429a      	cmp	r2, r3
 800b316:	d216      	bcs.n	800b346 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b31c:	881a      	ldrh	r2, [r3, #0]
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b326:	1c9a      	adds	r2, r3, #2
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b332:	b29b      	uxth	r3, r3
 800b334:	3b01      	subs	r3, #1
 800b336:	b29a      	uxth	r2, r3
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b344:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b34e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 8092 	beq.w	800b47a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	f003 0301 	and.w	r3, r3, #1
 800b360:	2b01      	cmp	r3, #1
 800b362:	d118      	bne.n	800b396 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b368:	6a3a      	ldr	r2, [r7, #32]
 800b36a:	8812      	ldrh	r2, [r2, #0]
 800b36c:	b292      	uxth	r2, r2
 800b36e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b374:	1c9a      	adds	r2, r3, #2
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b380:	b29b      	uxth	r3, r3
 800b382:	3b01      	subs	r3, #1
 800b384:	b29a      	uxth	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b392:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b394:	e071      	b.n	800b47a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b396:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b398:	8bfb      	ldrh	r3, [r7, #30]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d228      	bcs.n	800b3f0 <HAL_SPI_TransmitReceive+0x39c>
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d023      	beq.n	800b3f0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3ac:	6a3a      	ldr	r2, [r7, #32]
 800b3ae:	8812      	ldrh	r2, [r2, #0]
 800b3b0:	b292      	uxth	r2, r2
 800b3b2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3b8:	1c9a      	adds	r2, r3, #2
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3c2:	6a3a      	ldr	r2, [r7, #32]
 800b3c4:	8812      	ldrh	r2, [r2, #0]
 800b3c6:	b292      	uxth	r2, r2
 800b3c8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3ce:	1c9a      	adds	r2, r3, #2
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	3b02      	subs	r3, #2
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3ec:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b3ee:	e044      	b.n	800b47a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b3f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d11d      	bne.n	800b432 <HAL_SPI_TransmitReceive+0x3de>
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d018      	beq.n	800b432 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b404:	6a3a      	ldr	r2, [r7, #32]
 800b406:	8812      	ldrh	r2, [r2, #0]
 800b408:	b292      	uxth	r2, r2
 800b40a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b410:	1c9a      	adds	r2, r3, #2
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	3b01      	subs	r3, #1
 800b420:	b29a      	uxth	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b42e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b430:	e023      	b.n	800b47a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b432:	f7f9 fa71 	bl	8004918 <HAL_GetTick>
 800b436:	4602      	mov	r2, r0
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b43e:	429a      	cmp	r2, r3
 800b440:	d803      	bhi.n	800b44a <HAL_SPI_TransmitReceive+0x3f6>
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b448:	d102      	bne.n	800b450 <HAL_SPI_TransmitReceive+0x3fc>
 800b44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d114      	bne.n	800b47a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f000 f939 	bl	800b6c8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b45c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b476:	2303      	movs	r3, #3
 800b478:	e121      	b.n	800b6be <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b47a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f47f af3b 	bne.w	800b2f8 <HAL_SPI_TransmitReceive+0x2a4>
 800b482:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b484:	2b00      	cmp	r3, #0
 800b486:	f47f af37 	bne.w	800b2f8 <HAL_SPI_TransmitReceive+0x2a4>
 800b48a:	e0f2      	b.n	800b672 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b02      	cmp	r3, #2
 800b498:	d121      	bne.n	800b4de <HAL_SPI_TransmitReceive+0x48a>
 800b49a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d01e      	beq.n	800b4de <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b4a0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b4a2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d218      	bcs.n	800b4de <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3320      	adds	r3, #32
 800b4b6:	7812      	ldrb	r2, [r2, #0]
 800b4b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b4dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b4e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 80ba 	beq.w	800b662 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d11b      	bne.n	800b534 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b508:	7812      	ldrb	r2, [r2, #0]
 800b50a:	b2d2      	uxtb	r2, r2
 800b50c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b51e:	b29b      	uxth	r3, r3
 800b520:	3b01      	subs	r3, #1
 800b522:	b29a      	uxth	r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b530:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b532:	e096      	b.n	800b662 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b534:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b536:	8bfb      	ldrh	r3, [r7, #30]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d24a      	bcs.n	800b5d2 <HAL_SPI_TransmitReceive+0x57e>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d045      	beq.n	800b5d2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b552:	7812      	ldrb	r2, [r2, #0]
 800b554:	b2d2      	uxtb	r2, r2
 800b556:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b55c:	1c5a      	adds	r2, r3, #1
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b56e:	7812      	ldrb	r2, [r2, #0]
 800b570:	b2d2      	uxtb	r2, r2
 800b572:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b58a:	7812      	ldrb	r2, [r2, #0]
 800b58c:	b2d2      	uxtb	r2, r2
 800b58e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5a6:	7812      	ldrb	r2, [r2, #0]
 800b5a8:	b2d2      	uxtb	r2, r2
 800b5aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5b0:	1c5a      	adds	r2, r3, #1
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	3b04      	subs	r3, #4
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b5ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b5d0:	e047      	b.n	800b662 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b5d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	d820      	bhi.n	800b61a <HAL_SPI_TransmitReceive+0x5c6>
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d01b      	beq.n	800b61a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5ee:	7812      	ldrb	r2, [r2, #0]
 800b5f0:	b2d2      	uxtb	r2, r2
 800b5f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b604:	b29b      	uxth	r3, r3
 800b606:	3b01      	subs	r3, #1
 800b608:	b29a      	uxth	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b616:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b618:	e023      	b.n	800b662 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b61a:	f7f9 f97d 	bl	8004918 <HAL_GetTick>
 800b61e:	4602      	mov	r2, r0
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b626:	429a      	cmp	r2, r3
 800b628:	d803      	bhi.n	800b632 <HAL_SPI_TransmitReceive+0x5de>
 800b62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b630:	d102      	bne.n	800b638 <HAL_SPI_TransmitReceive+0x5e4>
 800b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b634:	2b00      	cmp	r3, #0
 800b636:	d114      	bne.n	800b662 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 f845 	bl	800b6c8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b644:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	e02d      	b.n	800b6be <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b662:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b664:	2b00      	cmp	r3, #0
 800b666:	f47f af11 	bne.w	800b48c <HAL_SPI_TransmitReceive+0x438>
 800b66a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f47f af0d 	bne.w	800b48c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b678:	2200      	movs	r2, #0
 800b67a:	2108      	movs	r1, #8
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 f8c3 	bl	800b808 <SPI_WaitOnFlagUntilTimeout>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d007      	beq.n	800b698 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b68e:	f043 0220 	orr.w	r2, r3, #32
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f000 f815 	bl	800b6c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e000      	b.n	800b6be <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
  }
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3730      	adds	r7, #48	@ 0x30
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop

0800b6c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	699a      	ldr	r2, [r3, #24]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f042 0208 	orr.w	r2, r2, #8
 800b6e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	699a      	ldr	r2, [r3, #24]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f042 0210 	orr.w	r2, r2, #16
 800b6f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f022 0201 	bic.w	r2, r2, #1
 800b706:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6919      	ldr	r1, [r3, #16]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	4b3c      	ldr	r3, [pc, #240]	@ (800b804 <SPI_CloseTransfer+0x13c>)
 800b714:	400b      	ands	r3, r1
 800b716:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689a      	ldr	r2, [r3, #8]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b726:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b04      	cmp	r3, #4
 800b732:	d014      	beq.n	800b75e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f003 0320 	and.w	r3, r3, #32
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00f      	beq.n	800b75e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b744:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	699a      	ldr	r2, [r3, #24]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f042 0220 	orr.w	r2, r2, #32
 800b75c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b03      	cmp	r3, #3
 800b768:	d014      	beq.n	800b794 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00f      	beq.n	800b794 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b77a:	f043 0204 	orr.w	r2, r3, #4
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	699a      	ldr	r2, [r3, #24]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b792:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00f      	beq.n	800b7be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7a4:	f043 0201 	orr.w	r2, r3, #1
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	699a      	ldr	r2, [r3, #24]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00f      	beq.n	800b7e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7ce:	f043 0208 	orr.w	r2, r3, #8
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	699a      	ldr	r2, [r3, #24]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b7e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b7f8:	bf00      	nop
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	fffffc90 	.word	0xfffffc90

0800b808 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	603b      	str	r3, [r7, #0]
 800b814:	4613      	mov	r3, r2
 800b816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b818:	e010      	b.n	800b83c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b81a:	f7f9 f87d 	bl	8004918 <HAL_GetTick>
 800b81e:	4602      	mov	r2, r0
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	429a      	cmp	r2, r3
 800b828:	d803      	bhi.n	800b832 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b830:	d102      	bne.n	800b838 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e00f      	b.n	800b85c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	695a      	ldr	r2, [r3, #20]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	4013      	ands	r3, r2
 800b846:	68ba      	ldr	r2, [r7, #8]
 800b848:	429a      	cmp	r2, r3
 800b84a:	bf0c      	ite	eq
 800b84c:	2301      	moveq	r3, #1
 800b84e:	2300      	movne	r3, #0
 800b850:	b2db      	uxtb	r3, r3
 800b852:	461a      	mov	r2, r3
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	429a      	cmp	r2, r3
 800b858:	d0df      	beq.n	800b81a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b870:	095b      	lsrs	r3, r3, #5
 800b872:	3301      	adds	r3, #1
 800b874:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	3301      	adds	r3, #1
 800b87c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	3307      	adds	r3, #7
 800b882:	08db      	lsrs	r3, r3, #3
 800b884:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b082      	sub	sp, #8
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e049      	b.n	800b940 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7f8 fd05 	bl	80042d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f000 fa15 	bl	800bd08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b956:	b2db      	uxtb	r3, r3
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d001      	beq.n	800b960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e054      	b.n	800ba0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68da      	ldr	r2, [r3, #12]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0201 	orr.w	r2, r2, #1
 800b976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a26      	ldr	r2, [pc, #152]	@ (800ba18 <HAL_TIM_Base_Start_IT+0xd0>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d022      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b98a:	d01d      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a22      	ldr	r2, [pc, #136]	@ (800ba1c <HAL_TIM_Base_Start_IT+0xd4>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d018      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a21      	ldr	r2, [pc, #132]	@ (800ba20 <HAL_TIM_Base_Start_IT+0xd8>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d013      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a1f      	ldr	r2, [pc, #124]	@ (800ba24 <HAL_TIM_Base_Start_IT+0xdc>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d00e      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a1e      	ldr	r2, [pc, #120]	@ (800ba28 <HAL_TIM_Base_Start_IT+0xe0>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d009      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a1c      	ldr	r2, [pc, #112]	@ (800ba2c <HAL_TIM_Base_Start_IT+0xe4>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d004      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a1b      	ldr	r2, [pc, #108]	@ (800ba30 <HAL_TIM_Base_Start_IT+0xe8>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d115      	bne.n	800b9f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689a      	ldr	r2, [r3, #8]
 800b9ce:	4b19      	ldr	r3, [pc, #100]	@ (800ba34 <HAL_TIM_Base_Start_IT+0xec>)
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b06      	cmp	r3, #6
 800b9d8:	d015      	beq.n	800ba06 <HAL_TIM_Base_Start_IT+0xbe>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9e0:	d011      	beq.n	800ba06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f042 0201 	orr.w	r2, r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9f2:	e008      	b.n	800ba06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f042 0201 	orr.w	r2, r2, #1
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	e000      	b.n	800ba08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	40010000 	.word	0x40010000
 800ba1c:	40000400 	.word	0x40000400
 800ba20:	40000800 	.word	0x40000800
 800ba24:	40000c00 	.word	0x40000c00
 800ba28:	40010400 	.word	0x40010400
 800ba2c:	40001800 	.word	0x40001800
 800ba30:	40014000 	.word	0x40014000
 800ba34:	00010007 	.word	0x00010007

0800ba38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68da      	ldr	r2, [r3, #12]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f022 0201 	bic.w	r2, r2, #1
 800ba4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10f      	bne.n	800ba80 <HAL_TIM_Base_Stop_IT+0x48>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6a1a      	ldr	r2, [r3, #32]
 800ba66:	f240 4344 	movw	r3, #1092	@ 0x444
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d107      	bne.n	800ba80 <HAL_TIM_Base_Stop_IT+0x48>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f022 0201 	bic.w	r2, r2, #1
 800ba7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	f003 0302 	and.w	r3, r3, #2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d020      	beq.n	800bafa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f003 0302 	and.w	r3, r3, #2
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d01b      	beq.n	800bafa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f06f 0202 	mvn.w	r2, #2
 800baca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	f003 0303 	and.w	r3, r3, #3
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f8f3 	bl	800bccc <HAL_TIM_IC_CaptureCallback>
 800bae6:	e005      	b.n	800baf4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 f8e5 	bl	800bcb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f8f6 	bl	800bce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d020      	beq.n	800bb46 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0304 	and.w	r3, r3, #4
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d01b      	beq.n	800bb46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f06f 0204 	mvn.w	r2, #4
 800bb16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f8cd 	bl	800bccc <HAL_TIM_IC_CaptureCallback>
 800bb32:	e005      	b.n	800bb40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f8bf 	bl	800bcb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f8d0 	bl	800bce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f003 0308 	and.w	r3, r3, #8
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d020      	beq.n	800bb92 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f003 0308 	and.w	r3, r3, #8
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d01b      	beq.n	800bb92 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f06f 0208 	mvn.w	r2, #8
 800bb62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2204      	movs	r2, #4
 800bb68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	69db      	ldr	r3, [r3, #28]
 800bb70:	f003 0303 	and.w	r3, r3, #3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f8a7 	bl	800bccc <HAL_TIM_IC_CaptureCallback>
 800bb7e:	e005      	b.n	800bb8c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f899 	bl	800bcb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f8aa 	bl	800bce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f003 0310 	and.w	r3, r3, #16
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d020      	beq.n	800bbde <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f003 0310 	and.w	r3, r3, #16
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d01b      	beq.n	800bbde <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f06f 0210 	mvn.w	r2, #16
 800bbae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2208      	movs	r2, #8
 800bbb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	69db      	ldr	r3, [r3, #28]
 800bbbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d003      	beq.n	800bbcc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f881 	bl	800bccc <HAL_TIM_IC_CaptureCallback>
 800bbca:	e005      	b.n	800bbd8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f873 	bl	800bcb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f884 	bl	800bce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00c      	beq.n	800bc02 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d007      	beq.n	800bc02 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f06f 0201 	mvn.w	r2, #1
 800bbfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 f851 	bl	800bca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d104      	bne.n	800bc16 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00c      	beq.n	800bc30 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d007      	beq.n	800bc30 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bc28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f9aa 	bl	800bf84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00c      	beq.n	800bc54 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d007      	beq.n	800bc54 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f9a2 	bl	800bf98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00c      	beq.n	800bc78 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d007      	beq.n	800bc78 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f83e 	bl	800bcf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f003 0320 	and.w	r3, r3, #32
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00c      	beq.n	800bc9c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f003 0320 	and.w	r3, r3, #32
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d007      	beq.n	800bc9c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f06f 0220 	mvn.w	r2, #32
 800bc94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f96a 	bl	800bf70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc9c:	bf00      	nop
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a46      	ldr	r2, [pc, #280]	@ (800be34 <TIM_Base_SetConfig+0x12c>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d013      	beq.n	800bd48 <TIM_Base_SetConfig+0x40>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd26:	d00f      	beq.n	800bd48 <TIM_Base_SetConfig+0x40>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a43      	ldr	r2, [pc, #268]	@ (800be38 <TIM_Base_SetConfig+0x130>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d00b      	beq.n	800bd48 <TIM_Base_SetConfig+0x40>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a42      	ldr	r2, [pc, #264]	@ (800be3c <TIM_Base_SetConfig+0x134>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d007      	beq.n	800bd48 <TIM_Base_SetConfig+0x40>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a41      	ldr	r2, [pc, #260]	@ (800be40 <TIM_Base_SetConfig+0x138>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d003      	beq.n	800bd48 <TIM_Base_SetConfig+0x40>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a40      	ldr	r2, [pc, #256]	@ (800be44 <TIM_Base_SetConfig+0x13c>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d108      	bne.n	800bd5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a35      	ldr	r2, [pc, #212]	@ (800be34 <TIM_Base_SetConfig+0x12c>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d01f      	beq.n	800bda2 <TIM_Base_SetConfig+0x9a>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd68:	d01b      	beq.n	800bda2 <TIM_Base_SetConfig+0x9a>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4a32      	ldr	r2, [pc, #200]	@ (800be38 <TIM_Base_SetConfig+0x130>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d017      	beq.n	800bda2 <TIM_Base_SetConfig+0x9a>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a31      	ldr	r2, [pc, #196]	@ (800be3c <TIM_Base_SetConfig+0x134>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d013      	beq.n	800bda2 <TIM_Base_SetConfig+0x9a>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4a30      	ldr	r2, [pc, #192]	@ (800be40 <TIM_Base_SetConfig+0x138>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d00f      	beq.n	800bda2 <TIM_Base_SetConfig+0x9a>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4a2f      	ldr	r2, [pc, #188]	@ (800be44 <TIM_Base_SetConfig+0x13c>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d00b      	beq.n	800bda2 <TIM_Base_SetConfig+0x9a>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a2e      	ldr	r2, [pc, #184]	@ (800be48 <TIM_Base_SetConfig+0x140>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d007      	beq.n	800bda2 <TIM_Base_SetConfig+0x9a>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a2d      	ldr	r2, [pc, #180]	@ (800be4c <TIM_Base_SetConfig+0x144>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d003      	beq.n	800bda2 <TIM_Base_SetConfig+0x9a>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4a2c      	ldr	r2, [pc, #176]	@ (800be50 <TIM_Base_SetConfig+0x148>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d108      	bne.n	800bdb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bda8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	689a      	ldr	r2, [r3, #8]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a16      	ldr	r2, [pc, #88]	@ (800be34 <TIM_Base_SetConfig+0x12c>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d00f      	beq.n	800be00 <TIM_Base_SetConfig+0xf8>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a18      	ldr	r2, [pc, #96]	@ (800be44 <TIM_Base_SetConfig+0x13c>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d00b      	beq.n	800be00 <TIM_Base_SetConfig+0xf8>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a17      	ldr	r2, [pc, #92]	@ (800be48 <TIM_Base_SetConfig+0x140>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d007      	beq.n	800be00 <TIM_Base_SetConfig+0xf8>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a16      	ldr	r2, [pc, #88]	@ (800be4c <TIM_Base_SetConfig+0x144>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d003      	beq.n	800be00 <TIM_Base_SetConfig+0xf8>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a15      	ldr	r2, [pc, #84]	@ (800be50 <TIM_Base_SetConfig+0x148>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d103      	bne.n	800be08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	691a      	ldr	r2, [r3, #16]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	f003 0301 	and.w	r3, r3, #1
 800be16:	2b01      	cmp	r3, #1
 800be18:	d105      	bne.n	800be26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	f023 0201 	bic.w	r2, r3, #1
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	611a      	str	r2, [r3, #16]
  }
}
 800be26:	bf00      	nop
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	40010000 	.word	0x40010000
 800be38:	40000400 	.word	0x40000400
 800be3c:	40000800 	.word	0x40000800
 800be40:	40000c00 	.word	0x40000c00
 800be44:	40010400 	.word	0x40010400
 800be48:	40014000 	.word	0x40014000
 800be4c:	40014400 	.word	0x40014400
 800be50:	40014800 	.word	0x40014800

0800be54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be68:	2302      	movs	r3, #2
 800be6a:	e06d      	b.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2202      	movs	r2, #2
 800be78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a30      	ldr	r2, [pc, #192]	@ (800bf54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d004      	beq.n	800bea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a2f      	ldr	r2, [pc, #188]	@ (800bf58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d108      	bne.n	800beb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	4313      	orrs	r3, r2
 800beb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a20      	ldr	r2, [pc, #128]	@ (800bf54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d022      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bede:	d01d      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d018      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a1c      	ldr	r2, [pc, #112]	@ (800bf60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d013      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a1a      	ldr	r2, [pc, #104]	@ (800bf64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d00e      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a15      	ldr	r2, [pc, #84]	@ (800bf58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d009      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a16      	ldr	r2, [pc, #88]	@ (800bf68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d004      	beq.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a15      	ldr	r2, [pc, #84]	@ (800bf6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d10c      	bne.n	800bf36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	40010000 	.word	0x40010000
 800bf58:	40010400 	.word	0x40010400
 800bf5c:	40000400 	.word	0x40000400
 800bf60:	40000800 	.word	0x40000800
 800bf64:	40000c00 	.word	0x40000c00
 800bf68:	40001800 	.word	0x40001800
 800bf6c:	40014000 	.word	0x40014000

0800bf70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800bfb0:	4904      	ldr	r1, [pc, #16]	@ (800bfc4 <MX_FATFS_Init+0x18>)
 800bfb2:	4805      	ldr	r0, [pc, #20]	@ (800bfc8 <MX_FATFS_Init+0x1c>)
 800bfb4:	f002 ff12 	bl	800eddc <FATFS_LinkDriver>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	461a      	mov	r2, r3
 800bfbc:	4b03      	ldr	r3, [pc, #12]	@ (800bfcc <MX_FATFS_Init+0x20>)
 800bfbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bfc0:	bf00      	nop
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	24000640 	.word	0x24000640
 800bfc8:	24000010 	.word	0x24000010
 800bfcc:	2400063c 	.word	0x2400063c

0800bfd0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bfd4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 f9fd 	bl	800c3ec <USER_SPI_initialize>
 800bff2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 fad1 	bl	800c5b0 <USER_SPI_status>
 800c00e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c010:	4618      	mov	r0, r3
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60b9      	str	r1, [r7, #8]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800c028:	7bf8      	ldrb	r0, [r7, #15]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	68b9      	ldr	r1, [r7, #8]
 800c030:	f000 fad4 	bl	800c5dc <USER_SPI_read>
 800c034:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	603b      	str	r3, [r7, #0]
 800c04a:	4603      	mov	r3, r0
 800c04c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800c04e:	7bf8      	ldrb	r0, [r7, #15]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	f000 fb27 	bl	800c6a8 <USER_SPI_write>
 800c05a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	603a      	str	r2, [r7, #0]
 800c06e:	71fb      	strb	r3, [r7, #7]
 800c070:	460b      	mov	r3, r1
 800c072:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800c074:	79b9      	ldrb	r1, [r7, #6]
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 fb90 	bl	800c7a0 <USER_SPI_ioctl>
 800c080:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c082:	4618      	mov	r0, r3
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f022 0201 	bic.w	r2, r2, #1
 800c0a2:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	071a      	lsls	r2, r3, #28
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f042 0201 	orr.w	r2, r2, #1
 800c0c8:	601a      	str	r2, [r3, #0]
}
 800c0ca:	bf00      	nop
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800c0e0:	f7f8 fc1a 	bl	8004918 <HAL_GetTick>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	4a04      	ldr	r2, [pc, #16]	@ (800c0f8 <SPI_Timer_On+0x20>)
 800c0e8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800c0ea:	4a04      	ldr	r2, [pc, #16]	@ (800c0fc <SPI_Timer_On+0x24>)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6013      	str	r3, [r2, #0]
}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	24000648 	.word	0x24000648
 800c0fc:	2400064c 	.word	0x2400064c

0800c100 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800c100:	b580      	push	{r7, lr}
 800c102:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800c104:	f7f8 fc08 	bl	8004918 <HAL_GetTick>
 800c108:	4602      	mov	r2, r0
 800c10a:	4b06      	ldr	r3, [pc, #24]	@ (800c124 <SPI_Timer_Status+0x24>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	4b05      	ldr	r3, [pc, #20]	@ (800c128 <SPI_Timer_Status+0x28>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	429a      	cmp	r2, r3
 800c116:	bf34      	ite	cc
 800c118:	2301      	movcc	r3, #1
 800c11a:	2300      	movcs	r3, #0
 800c11c:	b2db      	uxtb	r3, r3
}
 800c11e:	4618      	mov	r0, r3
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	24000648 	.word	0x24000648
 800c128:	2400064c 	.word	0x2400064c

0800c12c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af02      	add	r7, sp, #8
 800c132:	4603      	mov	r3, r0
 800c134:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800c136:	f107 020f 	add.w	r2, r7, #15
 800c13a:	1df9      	adds	r1, r7, #7
 800c13c:	2332      	movs	r3, #50	@ 0x32
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	2301      	movs	r3, #1
 800c142:	4804      	ldr	r0, [pc, #16]	@ (800c154 <xchg_spi+0x28>)
 800c144:	f7fe ff86 	bl	800b054 <HAL_SPI_TransmitReceive>

    return rxDat;
 800c148:	7bfb      	ldrb	r3, [r7, #15]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	24000210 	.word	0x24000210

0800c158 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800c158:	b590      	push	{r4, r7, lr}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800c162:	2300      	movs	r3, #0
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	e00a      	b.n	800c17e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	18d4      	adds	r4, r2, r3
 800c16e:	20ff      	movs	r0, #255	@ 0xff
 800c170:	f7ff ffdc 	bl	800c12c <xchg_spi>
 800c174:	4603      	mov	r3, r0
 800c176:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	3301      	adds	r3, #1
 800c17c:	60fb      	str	r3, [r7, #12]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	429a      	cmp	r2, r3
 800c184:	d3f0      	bcc.n	800c168 <rcvr_spi_multi+0x10>
	}
}
 800c186:	bf00      	nop
 800c188:	bf00      	nop
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd90      	pop	{r4, r7, pc}

0800c190 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	4803      	ldr	r0, [pc, #12]	@ (800c1b4 <xmit_spi_multi+0x24>)
 800c1a6:	f7fe faf5 	bl	800a794 <HAL_SPI_Transmit>
}
 800c1aa:	bf00      	nop
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	24000210 	.word	0x24000210

0800c1b8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800c1c0:	f7f8 fbaa 	bl	8004918 <HAL_GetTick>
 800c1c4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800c1ca:	20ff      	movs	r0, #255	@ 0xff
 800c1cc:	f7ff ffae 	bl	800c12c <xchg_spi>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	2bff      	cmp	r3, #255	@ 0xff
 800c1d8:	d007      	beq.n	800c1ea <wait_ready+0x32>
 800c1da:	f7f8 fb9d 	bl	8004918 <HAL_GetTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	693a      	ldr	r2, [r7, #16]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d8ef      	bhi.n	800c1ca <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
 800c1ec:	2bff      	cmp	r3, #255	@ 0xff
 800c1ee:	bf0c      	ite	eq
 800c1f0:	2301      	moveq	r3, #1
 800c1f2:	2300      	movne	r3, #0
 800c1f4:	b2db      	uxtb	r3, r3
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
	...

0800c200 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800c204:	2201      	movs	r2, #1
 800c206:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800c20a:	4804      	ldr	r0, [pc, #16]	@ (800c21c <despiselect+0x1c>)
 800c20c:	f7fa fb5a 	bl	80068c4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c210:	20ff      	movs	r0, #255	@ 0xff
 800c212:	f7ff ff8b 	bl	800c12c <xchg_spi>

}
 800c216:	bf00      	nop
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	58020400 	.word	0x58020400

0800c220 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800c224:	2200      	movs	r2, #0
 800c226:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800c22a:	480a      	ldr	r0, [pc, #40]	@ (800c254 <spiselect+0x34>)
 800c22c:	f7fa fb4a 	bl	80068c4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800c230:	20ff      	movs	r0, #255	@ 0xff
 800c232:	f7ff ff7b 	bl	800c12c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800c236:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c23a:	f7ff ffbd 	bl	800c1b8 <wait_ready>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d001      	beq.n	800c248 <spiselect+0x28>
 800c244:	2301      	movs	r3, #1
 800c246:	e002      	b.n	800c24e <spiselect+0x2e>

	despiselect();
 800c248:	f7ff ffda 	bl	800c200 <despiselect>
	return 0;	/* Timeout */
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	58020400 	.word	0x58020400

0800c258 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800c262:	20c8      	movs	r0, #200	@ 0xc8
 800c264:	f7ff ff38 	bl	800c0d8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800c268:	20ff      	movs	r0, #255	@ 0xff
 800c26a:	f7ff ff5f 	bl	800c12c <xchg_spi>
 800c26e:	4603      	mov	r3, r0
 800c270:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	2bff      	cmp	r3, #255	@ 0xff
 800c276:	d104      	bne.n	800c282 <rcvr_datablock+0x2a>
 800c278:	f7ff ff42 	bl	800c100 <SPI_Timer_Status>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1f2      	bne.n	800c268 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800c282:	7bfb      	ldrb	r3, [r7, #15]
 800c284:	2bfe      	cmp	r3, #254	@ 0xfe
 800c286:	d001      	beq.n	800c28c <rcvr_datablock+0x34>
 800c288:	2300      	movs	r3, #0
 800c28a:	e00a      	b.n	800c2a2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7ff ff62 	bl	800c158 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800c294:	20ff      	movs	r0, #255	@ 0xff
 800c296:	f7ff ff49 	bl	800c12c <xchg_spi>
 800c29a:	20ff      	movs	r0, #255	@ 0xff
 800c29c:	f7ff ff46 	bl	800c12c <xchg_spi>

	return 1;						/* Function succeeded */
 800c2a0:	2301      	movs	r3, #1
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b084      	sub	sp, #16
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800c2b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c2ba:	f7ff ff7d 	bl	800c1b8 <wait_ready>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d101      	bne.n	800c2c8 <xmit_datablock+0x1e>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	e01e      	b.n	800c306 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800c2c8:	78fb      	ldrb	r3, [r7, #3]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff ff2e 	bl	800c12c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	2bfd      	cmp	r3, #253	@ 0xfd
 800c2d4:	d016      	beq.n	800c304 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800c2d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7ff ff58 	bl	800c190 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800c2e0:	20ff      	movs	r0, #255	@ 0xff
 800c2e2:	f7ff ff23 	bl	800c12c <xchg_spi>
 800c2e6:	20ff      	movs	r0, #255	@ 0xff
 800c2e8:	f7ff ff20 	bl	800c12c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800c2ec:	20ff      	movs	r0, #255	@ 0xff
 800c2ee:	f7ff ff1d 	bl	800c12c <xchg_spi>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	f003 031f 	and.w	r3, r3, #31
 800c2fc:	2b05      	cmp	r3, #5
 800c2fe:	d001      	beq.n	800c304 <xmit_datablock+0x5a>
 800c300:	2300      	movs	r3, #0
 800c302:	e000      	b.n	800c306 <xmit_datablock+0x5c>
	}
	return 1;
 800c304:	2301      	movs	r3, #1
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	4603      	mov	r3, r0
 800c316:	6039      	str	r1, [r7, #0]
 800c318:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800c31a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	da0e      	bge.n	800c340 <send_cmd+0x32>
		cmd &= 0x7F;
 800c322:	79fb      	ldrb	r3, [r7, #7]
 800c324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c328:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800c32a:	2100      	movs	r1, #0
 800c32c:	2037      	movs	r0, #55	@ 0x37
 800c32e:	f7ff ffee 	bl	800c30e <send_cmd>
 800c332:	4603      	mov	r3, r0
 800c334:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c336:	7bbb      	ldrb	r3, [r7, #14]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d901      	bls.n	800c340 <send_cmd+0x32>
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	e051      	b.n	800c3e4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	2b0c      	cmp	r3, #12
 800c344:	d008      	beq.n	800c358 <send_cmd+0x4a>
		despiselect();
 800c346:	f7ff ff5b 	bl	800c200 <despiselect>
		if (!spiselect()) return 0xFF;
 800c34a:	f7ff ff69 	bl	800c220 <spiselect>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <send_cmd+0x4a>
 800c354:	23ff      	movs	r3, #255	@ 0xff
 800c356:	e045      	b.n	800c3e4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c358:	79fb      	ldrb	r3, [r7, #7]
 800c35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff fee3 	bl	800c12c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	0e1b      	lsrs	r3, r3, #24
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff fedd 	bl	800c12c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	0c1b      	lsrs	r3, r3, #16
 800c376:	b2db      	uxtb	r3, r3
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff fed7 	bl	800c12c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	0a1b      	lsrs	r3, r3, #8
 800c382:	b2db      	uxtb	r3, r3
 800c384:	4618      	mov	r0, r3
 800c386:	f7ff fed1 	bl	800c12c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	4618      	mov	r0, r3
 800c390:	f7ff fecc 	bl	800c12c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800c394:	2301      	movs	r3, #1
 800c396:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800c398:	79fb      	ldrb	r3, [r7, #7]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d101      	bne.n	800c3a2 <send_cmd+0x94>
 800c39e:	2395      	movs	r3, #149	@ 0x95
 800c3a0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800c3a2:	79fb      	ldrb	r3, [r7, #7]
 800c3a4:	2b08      	cmp	r3, #8
 800c3a6:	d101      	bne.n	800c3ac <send_cmd+0x9e>
 800c3a8:	2387      	movs	r3, #135	@ 0x87
 800c3aa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7ff febc 	bl	800c12c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800c3b4:	79fb      	ldrb	r3, [r7, #7]
 800c3b6:	2b0c      	cmp	r3, #12
 800c3b8:	d102      	bne.n	800c3c0 <send_cmd+0xb2>
 800c3ba:	20ff      	movs	r0, #255	@ 0xff
 800c3bc:	f7ff feb6 	bl	800c12c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800c3c0:	230a      	movs	r3, #10
 800c3c2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800c3c4:	20ff      	movs	r0, #255	@ 0xff
 800c3c6:	f7ff feb1 	bl	800c12c <xchg_spi>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800c3ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	da05      	bge.n	800c3e2 <send_cmd+0xd4>
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	73fb      	strb	r3, [r7, #15]
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1f0      	bne.n	800c3c4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800c3e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c3ec:	b590      	push	{r4, r7, lr}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800c3f6:	79fb      	ldrb	r3, [r7, #7]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d001      	beq.n	800c400 <USER_SPI_initialize+0x14>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e0cc      	b.n	800c59a <USER_SPI_initialize+0x1ae>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800c400:	4b68      	ldr	r3, [pc, #416]	@ (800c5a4 <USER_SPI_initialize+0x1b8>)
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	b2db      	uxtb	r3, r3
 800c406:	f003 0302 	and.w	r3, r3, #2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d003      	beq.n	800c416 <USER_SPI_initialize+0x2a>
 800c40e:	4b65      	ldr	r3, [pc, #404]	@ (800c5a4 <USER_SPI_initialize+0x1b8>)
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	b2db      	uxtb	r3, r3
 800c414:	e0c1      	b.n	800c59a <USER_SPI_initialize+0x1ae>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_64);
 800c416:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 800c41a:	4863      	ldr	r0, [pc, #396]	@ (800c5a8 <USER_SPI_initialize+0x1bc>)
 800c41c:	f7ff fe35 	bl	800c08a <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800c420:	230a      	movs	r3, #10
 800c422:	73fb      	strb	r3, [r7, #15]
 800c424:	e005      	b.n	800c432 <USER_SPI_initialize+0x46>
 800c426:	20ff      	movs	r0, #255	@ 0xff
 800c428:	f7ff fe80 	bl	800c12c <xchg_spi>
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
 800c42e:	3b01      	subs	r3, #1
 800c430:	73fb      	strb	r3, [r7, #15]
 800c432:	7bfb      	ldrb	r3, [r7, #15]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1f6      	bne.n	800c426 <USER_SPI_initialize+0x3a>

	ty = 0;
 800c438:	2300      	movs	r3, #0
 800c43a:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800c43c:	2100      	movs	r1, #0
 800c43e:	2000      	movs	r0, #0
 800c440:	f7ff ff65 	bl	800c30e <send_cmd>
 800c444:	4603      	mov	r3, r0
 800c446:	2b01      	cmp	r3, #1
 800c448:	f040 808b 	bne.w	800c562 <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800c44c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c450:	f7ff fe42 	bl	800c0d8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800c454:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800c458:	2008      	movs	r0, #8
 800c45a:	f7ff ff58 	bl	800c30e <send_cmd>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b01      	cmp	r3, #1
 800c462:	d151      	bne.n	800c508 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800c464:	2300      	movs	r3, #0
 800c466:	73fb      	strb	r3, [r7, #15]
 800c468:	e00d      	b.n	800c486 <USER_SPI_initialize+0x9a>
 800c46a:	7bfc      	ldrb	r4, [r7, #15]
 800c46c:	20ff      	movs	r0, #255	@ 0xff
 800c46e:	f7ff fe5d 	bl	800c12c <xchg_spi>
 800c472:	4603      	mov	r3, r0
 800c474:	461a      	mov	r2, r3
 800c476:	f104 0310 	add.w	r3, r4, #16
 800c47a:	443b      	add	r3, r7
 800c47c:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c480:	7bfb      	ldrb	r3, [r7, #15]
 800c482:	3301      	adds	r3, #1
 800c484:	73fb      	strb	r3, [r7, #15]
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d9ee      	bls.n	800c46a <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800c48c:	7abb      	ldrb	r3, [r7, #10]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d167      	bne.n	800c562 <USER_SPI_initialize+0x176>
 800c492:	7afb      	ldrb	r3, [r7, #11]
 800c494:	2baa      	cmp	r3, #170	@ 0xaa
 800c496:	d164      	bne.n	800c562 <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800c498:	bf00      	nop
 800c49a:	f7ff fe31 	bl	800c100 <SPI_Timer_Status>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d007      	beq.n	800c4b4 <USER_SPI_initialize+0xc8>
 800c4a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c4a8:	20a9      	movs	r0, #169	@ 0xa9
 800c4aa:	f7ff ff30 	bl	800c30e <send_cmd>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1f2      	bne.n	800c49a <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800c4b4:	f7ff fe24 	bl	800c100 <SPI_Timer_Status>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d051      	beq.n	800c562 <USER_SPI_initialize+0x176>
 800c4be:	2100      	movs	r1, #0
 800c4c0:	203a      	movs	r0, #58	@ 0x3a
 800c4c2:	f7ff ff24 	bl	800c30e <send_cmd>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d14a      	bne.n	800c562 <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
 800c4d0:	e00d      	b.n	800c4ee <USER_SPI_initialize+0x102>
 800c4d2:	7bfc      	ldrb	r4, [r7, #15]
 800c4d4:	20ff      	movs	r0, #255	@ 0xff
 800c4d6:	f7ff fe29 	bl	800c12c <xchg_spi>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	461a      	mov	r2, r3
 800c4de:	f104 0310 	add.w	r3, r4, #16
 800c4e2:	443b      	add	r3, r7
 800c4e4:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	73fb      	strb	r3, [r7, #15]
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
 800c4f0:	2b03      	cmp	r3, #3
 800c4f2:	d9ee      	bls.n	800c4d2 <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800c4f4:	7a3b      	ldrb	r3, [r7, #8]
 800c4f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <USER_SPI_initialize+0x116>
 800c4fe:	230c      	movs	r3, #12
 800c500:	e000      	b.n	800c504 <USER_SPI_initialize+0x118>
 800c502:	2304      	movs	r3, #4
 800c504:	737b      	strb	r3, [r7, #13]
 800c506:	e02c      	b.n	800c562 <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800c508:	2100      	movs	r1, #0
 800c50a:	20a9      	movs	r0, #169	@ 0xa9
 800c50c:	f7ff feff 	bl	800c30e <send_cmd>
 800c510:	4603      	mov	r3, r0
 800c512:	2b01      	cmp	r3, #1
 800c514:	d804      	bhi.n	800c520 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c516:	2302      	movs	r3, #2
 800c518:	737b      	strb	r3, [r7, #13]
 800c51a:	23a9      	movs	r3, #169	@ 0xa9
 800c51c:	73bb      	strb	r3, [r7, #14]
 800c51e:	e003      	b.n	800c528 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c520:	2301      	movs	r3, #1
 800c522:	737b      	strb	r3, [r7, #13]
 800c524:	2301      	movs	r3, #1
 800c526:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c528:	bf00      	nop
 800c52a:	f7ff fde9 	bl	800c100 <SPI_Timer_Status>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d007      	beq.n	800c544 <USER_SPI_initialize+0x158>
 800c534:	7bbb      	ldrb	r3, [r7, #14]
 800c536:	2100      	movs	r1, #0
 800c538:	4618      	mov	r0, r3
 800c53a:	f7ff fee8 	bl	800c30e <send_cmd>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1f2      	bne.n	800c52a <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c544:	f7ff fddc 	bl	800c100 <SPI_Timer_Status>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <USER_SPI_initialize+0x172>
 800c54e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c552:	2010      	movs	r0, #16
 800c554:	f7ff fedb 	bl	800c30e <send_cmd>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d001      	beq.n	800c562 <USER_SPI_initialize+0x176>
				ty = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800c562:	4a12      	ldr	r2, [pc, #72]	@ (800c5ac <USER_SPI_initialize+0x1c0>)
 800c564:	7b7b      	ldrb	r3, [r7, #13]
 800c566:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c568:	f7ff fe4a 	bl	800c200 <despiselect>

	if (ty) {			/* OK */
 800c56c:	7b7b      	ldrb	r3, [r7, #13]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00d      	beq.n	800c58e <USER_SPI_initialize+0x1a2>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_4);	/* Set fast clock */
 800c572:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800c576:	480c      	ldr	r0, [pc, #48]	@ (800c5a8 <USER_SPI_initialize+0x1bc>)
 800c578:	f7ff fd87 	bl	800c08a <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c57c:	4b09      	ldr	r3, [pc, #36]	@ (800c5a4 <USER_SPI_initialize+0x1b8>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	b2db      	uxtb	r3, r3
 800c582:	f023 0301 	bic.w	r3, r3, #1
 800c586:	b2da      	uxtb	r2, r3
 800c588:	4b06      	ldr	r3, [pc, #24]	@ (800c5a4 <USER_SPI_initialize+0x1b8>)
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	e002      	b.n	800c594 <USER_SPI_initialize+0x1a8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c58e:	4b05      	ldr	r3, [pc, #20]	@ (800c5a4 <USER_SPI_initialize+0x1b8>)
 800c590:	2201      	movs	r2, #1
 800c592:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c594:	4b03      	ldr	r3, [pc, #12]	@ (800c5a4 <USER_SPI_initialize+0x1b8>)
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	b2db      	uxtb	r3, r3
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd90      	pop	{r4, r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	24000024 	.word	0x24000024
 800c5a8:	24000210 	.word	0x24000210
 800c5ac:	24000644 	.word	0x24000644

0800c5b0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <USER_SPI_status+0x14>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e002      	b.n	800c5ca <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c5c4:	4b04      	ldr	r3, [pc, #16]	@ (800c5d8 <USER_SPI_status+0x28>)
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	b2db      	uxtb	r3, r3
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	24000024 	.word	0x24000024

0800c5dc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60b9      	str	r1, [r7, #8]
 800c5e4:	607a      	str	r2, [r7, #4]
 800c5e6:	603b      	str	r3, [r7, #0]
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d102      	bne.n	800c5f8 <USER_SPI_read+0x1c>
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d101      	bne.n	800c5fc <USER_SPI_read+0x20>
 800c5f8:	2304      	movs	r3, #4
 800c5fa:	e04d      	b.n	800c698 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c5fc:	4b28      	ldr	r3, [pc, #160]	@ (800c6a0 <USER_SPI_read+0xc4>)
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	b2db      	uxtb	r3, r3
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <USER_SPI_read+0x32>
 800c60a:	2303      	movs	r3, #3
 800c60c:	e044      	b.n	800c698 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800c60e:	4b25      	ldr	r3, [pc, #148]	@ (800c6a4 <USER_SPI_read+0xc8>)
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	f003 0308 	and.w	r3, r3, #8
 800c616:	2b00      	cmp	r3, #0
 800c618:	d102      	bne.n	800c620 <USER_SPI_read+0x44>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	025b      	lsls	r3, r3, #9
 800c61e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d111      	bne.n	800c64a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	2011      	movs	r0, #17
 800c62a:	f7ff fe70 	bl	800c30e <send_cmd>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d129      	bne.n	800c688 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800c634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c638:	68b8      	ldr	r0, [r7, #8]
 800c63a:	f7ff fe0d 	bl	800c258 <rcvr_datablock>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d021      	beq.n	800c688 <USER_SPI_read+0xac>
			count = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	e01e      	b.n	800c688 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800c64a:	6879      	ldr	r1, [r7, #4]
 800c64c:	2012      	movs	r0, #18
 800c64e:	f7ff fe5e 	bl	800c30e <send_cmd>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d117      	bne.n	800c688 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800c658:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c65c:	68b8      	ldr	r0, [r7, #8]
 800c65e:	f7ff fdfb 	bl	800c258 <rcvr_datablock>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00a      	beq.n	800c67e <USER_SPI_read+0xa2>
				buff += 512;
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c66e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	3b01      	subs	r3, #1
 800c674:	603b      	str	r3, [r7, #0]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1ed      	bne.n	800c658 <USER_SPI_read+0x7c>
 800c67c:	e000      	b.n	800c680 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800c67e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800c680:	2100      	movs	r1, #0
 800c682:	200c      	movs	r0, #12
 800c684:	f7ff fe43 	bl	800c30e <send_cmd>
		}
	}
	despiselect();
 800c688:	f7ff fdba 	bl	800c200 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bf14      	ite	ne
 800c692:	2301      	movne	r3, #1
 800c694:	2300      	moveq	r3, #0
 800c696:	b2db      	uxtb	r3, r3
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	24000024 	.word	0x24000024
 800c6a4:	24000644 	.word	0x24000644

0800c6a8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60b9      	str	r1, [r7, #8]
 800c6b0:	607a      	str	r2, [r7, #4]
 800c6b2:	603b      	str	r3, [r7, #0]
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d102      	bne.n	800c6c4 <USER_SPI_write+0x1c>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <USER_SPI_write+0x20>
 800c6c4:	2304      	movs	r3, #4
 800c6c6:	e063      	b.n	800c790 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800c6c8:	4b33      	ldr	r3, [pc, #204]	@ (800c798 <USER_SPI_write+0xf0>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <USER_SPI_write+0x32>
 800c6d6:	2303      	movs	r3, #3
 800c6d8:	e05a      	b.n	800c790 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800c6da:	4b2f      	ldr	r3, [pc, #188]	@ (800c798 <USER_SPI_write+0xf0>)
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	f003 0304 	and.w	r3, r3, #4
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <USER_SPI_write+0x44>
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	e051      	b.n	800c790 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c6ec:	4b2b      	ldr	r3, [pc, #172]	@ (800c79c <USER_SPI_write+0xf4>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	f003 0308 	and.w	r3, r3, #8
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d102      	bne.n	800c6fe <USER_SPI_write+0x56>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	025b      	lsls	r3, r3, #9
 800c6fc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d110      	bne.n	800c726 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c704:	6879      	ldr	r1, [r7, #4]
 800c706:	2018      	movs	r0, #24
 800c708:	f7ff fe01 	bl	800c30e <send_cmd>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d136      	bne.n	800c780 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c712:	21fe      	movs	r1, #254	@ 0xfe
 800c714:	68b8      	ldr	r0, [r7, #8]
 800c716:	f7ff fdc8 	bl	800c2aa <xmit_datablock>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d02f      	beq.n	800c780 <USER_SPI_write+0xd8>
			count = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	603b      	str	r3, [r7, #0]
 800c724:	e02c      	b.n	800c780 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c726:	4b1d      	ldr	r3, [pc, #116]	@ (800c79c <USER_SPI_write+0xf4>)
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	f003 0306 	and.w	r3, r3, #6
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <USER_SPI_write+0x92>
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	2097      	movs	r0, #151	@ 0x97
 800c736:	f7ff fdea 	bl	800c30e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c73a:	6879      	ldr	r1, [r7, #4]
 800c73c:	2019      	movs	r0, #25
 800c73e:	f7ff fde6 	bl	800c30e <send_cmd>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d11b      	bne.n	800c780 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c748:	21fc      	movs	r1, #252	@ 0xfc
 800c74a:	68b8      	ldr	r0, [r7, #8]
 800c74c:	f7ff fdad 	bl	800c2aa <xmit_datablock>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00a      	beq.n	800c76c <USER_SPI_write+0xc4>
				buff += 512;
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c75c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	3b01      	subs	r3, #1
 800c762:	603b      	str	r3, [r7, #0]
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1ee      	bne.n	800c748 <USER_SPI_write+0xa0>
 800c76a:	e000      	b.n	800c76e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c76c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c76e:	21fd      	movs	r1, #253	@ 0xfd
 800c770:	2000      	movs	r0, #0
 800c772:	f7ff fd9a 	bl	800c2aa <xmit_datablock>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <USER_SPI_write+0xd8>
 800c77c:	2301      	movs	r3, #1
 800c77e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c780:	f7ff fd3e 	bl	800c200 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	bf14      	ite	ne
 800c78a:	2301      	movne	r3, #1
 800c78c:	2300      	moveq	r3, #0
 800c78e:	b2db      	uxtb	r3, r3
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	24000024 	.word	0x24000024
 800c79c:	24000644 	.word	0x24000644

0800c7a0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08c      	sub	sp, #48	@ 0x30
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	603a      	str	r2, [r7, #0]
 800c7aa:	71fb      	strb	r3, [r7, #7]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c7b0:	79fb      	ldrb	r3, [r7, #7]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d001      	beq.n	800c7ba <USER_SPI_ioctl+0x1a>
 800c7b6:	2304      	movs	r3, #4
 800c7b8:	e15a      	b.n	800ca70 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c7ba:	4baf      	ldr	r3, [pc, #700]	@ (800ca78 <USER_SPI_ioctl+0x2d8>)
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	f003 0301 	and.w	r3, r3, #1
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <USER_SPI_ioctl+0x2c>
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e151      	b.n	800ca70 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800c7d2:	79bb      	ldrb	r3, [r7, #6]
 800c7d4:	2b04      	cmp	r3, #4
 800c7d6:	f200 8136 	bhi.w	800ca46 <USER_SPI_ioctl+0x2a6>
 800c7da:	a201      	add	r2, pc, #4	@ (adr r2, 800c7e0 <USER_SPI_ioctl+0x40>)
 800c7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e0:	0800c7f5 	.word	0x0800c7f5
 800c7e4:	0800c809 	.word	0x0800c809
 800c7e8:	0800ca47 	.word	0x0800ca47
 800c7ec:	0800c8b5 	.word	0x0800c8b5
 800c7f0:	0800c9ab 	.word	0x0800c9ab
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c7f4:	f7ff fd14 	bl	800c220 <spiselect>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 8127 	beq.w	800ca4e <USER_SPI_ioctl+0x2ae>
 800c800:	2300      	movs	r3, #0
 800c802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c806:	e122      	b.n	800ca4e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c808:	2100      	movs	r1, #0
 800c80a:	2009      	movs	r0, #9
 800c80c:	f7ff fd7f 	bl	800c30e <send_cmd>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	f040 811d 	bne.w	800ca52 <USER_SPI_ioctl+0x2b2>
 800c818:	f107 030c 	add.w	r3, r7, #12
 800c81c:	2110      	movs	r1, #16
 800c81e:	4618      	mov	r0, r3
 800c820:	f7ff fd1a 	bl	800c258 <rcvr_datablock>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	f000 8113 	beq.w	800ca52 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800c82c:	7b3b      	ldrb	r3, [r7, #12]
 800c82e:	099b      	lsrs	r3, r3, #6
 800c830:	b2db      	uxtb	r3, r3
 800c832:	2b01      	cmp	r3, #1
 800c834:	d111      	bne.n	800c85a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800c836:	7d7b      	ldrb	r3, [r7, #21]
 800c838:	461a      	mov	r2, r3
 800c83a:	7d3b      	ldrb	r3, [r7, #20]
 800c83c:	021b      	lsls	r3, r3, #8
 800c83e:	4413      	add	r3, r2
 800c840:	461a      	mov	r2, r3
 800c842:	7cfb      	ldrb	r3, [r7, #19]
 800c844:	041b      	lsls	r3, r3, #16
 800c846:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800c84a:	4413      	add	r3, r2
 800c84c:	3301      	adds	r3, #1
 800c84e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	029a      	lsls	r2, r3, #10
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	e028      	b.n	800c8ac <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800c85a:	7c7b      	ldrb	r3, [r7, #17]
 800c85c:	f003 030f 	and.w	r3, r3, #15
 800c860:	b2da      	uxtb	r2, r3
 800c862:	7dbb      	ldrb	r3, [r7, #22]
 800c864:	09db      	lsrs	r3, r3, #7
 800c866:	b2db      	uxtb	r3, r3
 800c868:	4413      	add	r3, r2
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	7d7b      	ldrb	r3, [r7, #21]
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	b2db      	uxtb	r3, r3
 800c872:	f003 0306 	and.w	r3, r3, #6
 800c876:	b2db      	uxtb	r3, r3
 800c878:	4413      	add	r3, r2
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	3302      	adds	r3, #2
 800c87e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800c882:	7d3b      	ldrb	r3, [r7, #20]
 800c884:	099b      	lsrs	r3, r3, #6
 800c886:	b2db      	uxtb	r3, r3
 800c888:	461a      	mov	r2, r3
 800c88a:	7cfb      	ldrb	r3, [r7, #19]
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	441a      	add	r2, r3
 800c890:	7cbb      	ldrb	r3, [r7, #18]
 800c892:	029b      	lsls	r3, r3, #10
 800c894:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c898:	4413      	add	r3, r2
 800c89a:	3301      	adds	r3, #1
 800c89c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800c89e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c8a2:	3b09      	subs	r3, #9
 800c8a4:	69fa      	ldr	r2, [r7, #28]
 800c8a6:	409a      	lsls	r2, r3
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c8b2:	e0ce      	b.n	800ca52 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800c8b4:	4b71      	ldr	r3, [pc, #452]	@ (800ca7c <USER_SPI_ioctl+0x2dc>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d031      	beq.n	800c924 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	208d      	movs	r0, #141	@ 0x8d
 800c8c4:	f7ff fd23 	bl	800c30e <send_cmd>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f040 80c3 	bne.w	800ca56 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800c8d0:	20ff      	movs	r0, #255	@ 0xff
 800c8d2:	f7ff fc2b 	bl	800c12c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800c8d6:	f107 030c 	add.w	r3, r7, #12
 800c8da:	2110      	movs	r1, #16
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7ff fcbb 	bl	800c258 <rcvr_datablock>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f000 80b6 	beq.w	800ca56 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800c8ea:	2330      	movs	r3, #48	@ 0x30
 800c8ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c8f0:	e007      	b.n	800c902 <USER_SPI_ioctl+0x162>
 800c8f2:	20ff      	movs	r0, #255	@ 0xff
 800c8f4:	f7ff fc1a 	bl	800c12c <xchg_spi>
 800c8f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c902:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1f3      	bne.n	800c8f2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800c90a:	7dbb      	ldrb	r3, [r7, #22]
 800c90c:	091b      	lsrs	r3, r3, #4
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	461a      	mov	r2, r3
 800c912:	2310      	movs	r3, #16
 800c914:	fa03 f202 	lsl.w	r2, r3, r2
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c922:	e098      	b.n	800ca56 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c924:	2100      	movs	r1, #0
 800c926:	2009      	movs	r0, #9
 800c928:	f7ff fcf1 	bl	800c30e <send_cmd>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f040 8091 	bne.w	800ca56 <USER_SPI_ioctl+0x2b6>
 800c934:	f107 030c 	add.w	r3, r7, #12
 800c938:	2110      	movs	r1, #16
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7ff fc8c 	bl	800c258 <rcvr_datablock>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	f000 8087 	beq.w	800ca56 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c948:	4b4c      	ldr	r3, [pc, #304]	@ (800ca7c <USER_SPI_ioctl+0x2dc>)
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	f003 0302 	and.w	r3, r3, #2
 800c950:	2b00      	cmp	r3, #0
 800c952:	d012      	beq.n	800c97a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c954:	7dbb      	ldrb	r3, [r7, #22]
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800c95c:	7dfa      	ldrb	r2, [r7, #23]
 800c95e:	09d2      	lsrs	r2, r2, #7
 800c960:	b2d2      	uxtb	r2, r2
 800c962:	4413      	add	r3, r2
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	7e7b      	ldrb	r3, [r7, #25]
 800c968:	099b      	lsrs	r3, r3, #6
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	3b01      	subs	r3, #1
 800c96e:	fa02 f303 	lsl.w	r3, r2, r3
 800c972:	461a      	mov	r2, r3
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	e013      	b.n	800c9a2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c97a:	7dbb      	ldrb	r3, [r7, #22]
 800c97c:	109b      	asrs	r3, r3, #2
 800c97e:	b29b      	uxth	r3, r3
 800c980:	f003 031f 	and.w	r3, r3, #31
 800c984:	3301      	adds	r3, #1
 800c986:	7dfa      	ldrb	r2, [r7, #23]
 800c988:	00d2      	lsls	r2, r2, #3
 800c98a:	f002 0218 	and.w	r2, r2, #24
 800c98e:	7df9      	ldrb	r1, [r7, #23]
 800c990:	0949      	lsrs	r1, r1, #5
 800c992:	b2c9      	uxtb	r1, r1
 800c994:	440a      	add	r2, r1
 800c996:	3201      	adds	r2, #1
 800c998:	fb02 f303 	mul.w	r3, r2, r3
 800c99c:	461a      	mov	r2, r3
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c9a8:	e055      	b.n	800ca56 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c9aa:	4b34      	ldr	r3, [pc, #208]	@ (800ca7c <USER_SPI_ioctl+0x2dc>)
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	f003 0306 	and.w	r3, r3, #6
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d051      	beq.n	800ca5a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c9b6:	f107 020c 	add.w	r2, r7, #12
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	210b      	movs	r1, #11
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7ff feee 	bl	800c7a0 <USER_SPI_ioctl>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d149      	bne.n	800ca5e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c9ca:	7b3b      	ldrb	r3, [r7, #12]
 800c9cc:	099b      	lsrs	r3, r3, #6
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d104      	bne.n	800c9de <USER_SPI_ioctl+0x23e>
 800c9d4:	7dbb      	ldrb	r3, [r7, #22]
 800c9d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d041      	beq.n	800ca62 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	623b      	str	r3, [r7, #32]
 800c9e2:	6a3b      	ldr	r3, [r7, #32]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800c9ee:	4b23      	ldr	r3, [pc, #140]	@ (800ca7c <USER_SPI_ioctl+0x2dc>)
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	f003 0308 	and.w	r3, r3, #8
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d105      	bne.n	800ca06 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fc:	025b      	lsls	r3, r3, #9
 800c9fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca02:	025b      	lsls	r3, r3, #9
 800ca04:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800ca06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca08:	2020      	movs	r0, #32
 800ca0a:	f7ff fc80 	bl	800c30e <send_cmd>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d128      	bne.n	800ca66 <USER_SPI_ioctl+0x2c6>
 800ca14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca16:	2021      	movs	r0, #33	@ 0x21
 800ca18:	f7ff fc79 	bl	800c30e <send_cmd>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d121      	bne.n	800ca66 <USER_SPI_ioctl+0x2c6>
 800ca22:	2100      	movs	r1, #0
 800ca24:	2026      	movs	r0, #38	@ 0x26
 800ca26:	f7ff fc72 	bl	800c30e <send_cmd>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d11a      	bne.n	800ca66 <USER_SPI_ioctl+0x2c6>
 800ca30:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ca34:	f7ff fbc0 	bl	800c1b8 <wait_ready>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d013      	beq.n	800ca66 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800ca44:	e00f      	b.n	800ca66 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800ca46:	2304      	movs	r3, #4
 800ca48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ca4c:	e00c      	b.n	800ca68 <USER_SPI_ioctl+0x2c8>
		break;
 800ca4e:	bf00      	nop
 800ca50:	e00a      	b.n	800ca68 <USER_SPI_ioctl+0x2c8>
		break;
 800ca52:	bf00      	nop
 800ca54:	e008      	b.n	800ca68 <USER_SPI_ioctl+0x2c8>
		break;
 800ca56:	bf00      	nop
 800ca58:	e006      	b.n	800ca68 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ca5a:	bf00      	nop
 800ca5c:	e004      	b.n	800ca68 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ca5e:	bf00      	nop
 800ca60:	e002      	b.n	800ca68 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ca62:	bf00      	nop
 800ca64:	e000      	b.n	800ca68 <USER_SPI_ioctl+0x2c8>
		break;
 800ca66:	bf00      	nop
	}

	despiselect();
 800ca68:	f7ff fbca 	bl	800c200 <despiselect>

	return res;
 800ca6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3730      	adds	r7, #48	@ 0x30
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	24000024 	.word	0x24000024
 800ca7c:	24000644 	.word	0x24000644

0800ca80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ca8a:	79fb      	ldrb	r3, [r7, #7]
 800ca8c:	4a08      	ldr	r2, [pc, #32]	@ (800cab0 <disk_status+0x30>)
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	79fa      	ldrb	r2, [r7, #7]
 800ca98:	4905      	ldr	r1, [pc, #20]	@ (800cab0 <disk_status+0x30>)
 800ca9a:	440a      	add	r2, r1
 800ca9c:	7a12      	ldrb	r2, [r2, #8]
 800ca9e:	4610      	mov	r0, r2
 800caa0:	4798      	blx	r3
 800caa2:	4603      	mov	r3, r0
 800caa4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	24000678 	.word	0x24000678

0800cab4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	4603      	mov	r3, r0
 800cabc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	4a0e      	ldr	r2, [pc, #56]	@ (800cb00 <disk_initialize+0x4c>)
 800cac6:	5cd3      	ldrb	r3, [r2, r3]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d114      	bne.n	800caf6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cacc:	79fb      	ldrb	r3, [r7, #7]
 800cace:	4a0c      	ldr	r2, [pc, #48]	@ (800cb00 <disk_initialize+0x4c>)
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	79fa      	ldrb	r2, [r7, #7]
 800cada:	4909      	ldr	r1, [pc, #36]	@ (800cb00 <disk_initialize+0x4c>)
 800cadc:	440a      	add	r2, r1
 800cade:	7a12      	ldrb	r2, [r2, #8]
 800cae0:	4610      	mov	r0, r2
 800cae2:	4798      	blx	r3
 800cae4:	4603      	mov	r3, r0
 800cae6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d103      	bne.n	800caf6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800caee:	79fb      	ldrb	r3, [r7, #7]
 800caf0:	4a03      	ldr	r2, [pc, #12]	@ (800cb00 <disk_initialize+0x4c>)
 800caf2:	2101      	movs	r1, #1
 800caf4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	24000678 	.word	0x24000678

0800cb04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cb04:	b590      	push	{r4, r7, lr}
 800cb06:	b087      	sub	sp, #28
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
 800cb0e:	603b      	str	r3, [r7, #0]
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb14:	7bfb      	ldrb	r3, [r7, #15]
 800cb16:	4a0a      	ldr	r2, [pc, #40]	@ (800cb40 <disk_read+0x3c>)
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	689c      	ldr	r4, [r3, #8]
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	4a07      	ldr	r2, [pc, #28]	@ (800cb40 <disk_read+0x3c>)
 800cb24:	4413      	add	r3, r2
 800cb26:	7a18      	ldrb	r0, [r3, #8]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	68b9      	ldr	r1, [r7, #8]
 800cb2e:	47a0      	blx	r4
 800cb30:	4603      	mov	r3, r0
 800cb32:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	371c      	adds	r7, #28
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd90      	pop	{r4, r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	24000678 	.word	0x24000678

0800cb44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cb44:	b590      	push	{r4, r7, lr}
 800cb46:	b087      	sub	sp, #28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
 800cb4e:	603b      	str	r3, [r7, #0]
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	4a0a      	ldr	r2, [pc, #40]	@ (800cb80 <disk_write+0x3c>)
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	4413      	add	r3, r2
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	68dc      	ldr	r4, [r3, #12]
 800cb60:	7bfb      	ldrb	r3, [r7, #15]
 800cb62:	4a07      	ldr	r2, [pc, #28]	@ (800cb80 <disk_write+0x3c>)
 800cb64:	4413      	add	r3, r2
 800cb66:	7a18      	ldrb	r0, [r3, #8]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	68b9      	ldr	r1, [r7, #8]
 800cb6e:	47a0      	blx	r4
 800cb70:	4603      	mov	r3, r0
 800cb72:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb74:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	371c      	adds	r7, #28
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd90      	pop	{r4, r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	24000678 	.word	0x24000678

0800cb84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	603a      	str	r2, [r7, #0]
 800cb8e:	71fb      	strb	r3, [r7, #7]
 800cb90:	460b      	mov	r3, r1
 800cb92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cb94:	79fb      	ldrb	r3, [r7, #7]
 800cb96:	4a09      	ldr	r2, [pc, #36]	@ (800cbbc <disk_ioctl+0x38>)
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	79fa      	ldrb	r2, [r7, #7]
 800cba2:	4906      	ldr	r1, [pc, #24]	@ (800cbbc <disk_ioctl+0x38>)
 800cba4:	440a      	add	r2, r1
 800cba6:	7a10      	ldrb	r0, [r2, #8]
 800cba8:	79b9      	ldrb	r1, [r7, #6]
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	4798      	blx	r3
 800cbae:	4603      	mov	r3, r0
 800cbb0:	73fb      	strb	r3, [r7, #15]
  return res;
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	24000678 	.word	0x24000678

0800cbc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cbd0:	89fb      	ldrh	r3, [r7, #14]
 800cbd2:	021b      	lsls	r3, r3, #8
 800cbd4:	b21a      	sxth	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	b21b      	sxth	r3, r3
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	b21b      	sxth	r3, r3
 800cbe0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cbe2:	89fb      	ldrh	r3, [r7, #14]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3714      	adds	r7, #20
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3303      	adds	r3, #3
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	021b      	lsls	r3, r3, #8
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	3202      	adds	r2, #2
 800cc08:	7812      	ldrb	r2, [r2, #0]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	021b      	lsls	r3, r3, #8
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	3201      	adds	r2, #1
 800cc16:	7812      	ldrb	r2, [r2, #0]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	021b      	lsls	r3, r3, #8
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	7812      	ldrb	r2, [r2, #0]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	60fb      	str	r3, [r7, #12]
	return rv;
 800cc28:	68fb      	ldr	r3, [r7, #12]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr

0800cc36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cc36:	b480      	push	{r7}
 800cc38:	b083      	sub	sp, #12
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	460b      	mov	r3, r1
 800cc40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	1c5a      	adds	r2, r3, #1
 800cc46:	607a      	str	r2, [r7, #4]
 800cc48:	887a      	ldrh	r2, [r7, #2]
 800cc4a:	b2d2      	uxtb	r2, r2
 800cc4c:	701a      	strb	r2, [r3, #0]
 800cc4e:	887b      	ldrh	r3, [r7, #2]
 800cc50:	0a1b      	lsrs	r3, r3, #8
 800cc52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	607a      	str	r2, [r7, #4]
 800cc5a:	887a      	ldrh	r2, [r7, #2]
 800cc5c:	b2d2      	uxtb	r2, r2
 800cc5e:	701a      	strb	r2, [r3, #0]
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	b2d2      	uxtb	r2, r2
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	0a1b      	lsrs	r3, r3, #8
 800cc86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	1c5a      	adds	r2, r3, #1
 800cc8c:	607a      	str	r2, [r7, #4]
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	b2d2      	uxtb	r2, r2
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	0a1b      	lsrs	r3, r3, #8
 800cc98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	1c5a      	adds	r2, r3, #1
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	b2d2      	uxtb	r2, r2
 800cca4:	701a      	strb	r2, [r3, #0]
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	0a1b      	lsrs	r3, r3, #8
 800ccaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	607a      	str	r2, [r7, #4]
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	b2d2      	uxtb	r2, r2
 800ccb6:	701a      	strb	r2, [r3, #0]
}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ccc4:	b480      	push	{r7}
 800ccc6:	b087      	sub	sp, #28
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00d      	beq.n	800ccfa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	1c53      	adds	r3, r2, #1
 800cce2:	613b      	str	r3, [r7, #16]
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	1c59      	adds	r1, r3, #1
 800cce8:	6179      	str	r1, [r7, #20]
 800ccea:	7812      	ldrb	r2, [r2, #0]
 800ccec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	607b      	str	r3, [r7, #4]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1f1      	bne.n	800ccde <mem_cpy+0x1a>
	}
}
 800ccfa:	bf00      	nop
 800ccfc:	371c      	adds	r7, #28
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr

0800cd06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cd06:	b480      	push	{r7}
 800cd08:	b087      	sub	sp, #28
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	60f8      	str	r0, [r7, #12]
 800cd0e:	60b9      	str	r1, [r7, #8]
 800cd10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	617a      	str	r2, [r7, #20]
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	b2d2      	uxtb	r2, r2
 800cd20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	3b01      	subs	r3, #1
 800cd26:	607b      	str	r3, [r7, #4]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1f3      	bne.n	800cd16 <mem_set+0x10>
}
 800cd2e:	bf00      	nop
 800cd30:	bf00      	nop
 800cd32:	371c      	adds	r7, #28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cd3c:	b480      	push	{r7}
 800cd3e:	b089      	sub	sp, #36	@ 0x24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	61fb      	str	r3, [r7, #28]
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	61fa      	str	r2, [r7, #28]
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	1c5a      	adds	r2, r3, #1
 800cd62:	61ba      	str	r2, [r7, #24]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	1acb      	subs	r3, r1, r3
 800cd68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	607b      	str	r3, [r7, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <mem_cmp+0x40>
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d0eb      	beq.n	800cd54 <mem_cmp+0x18>

	return r;
 800cd7c:	697b      	ldr	r3, [r7, #20]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3724      	adds	r7, #36	@ 0x24
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cd8a:	b480      	push	{r7}
 800cd8c:	b083      	sub	sp, #12
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cd94:	e002      	b.n	800cd9c <chk_chr+0x12>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	607b      	str	r3, [r7, #4]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d005      	beq.n	800cdb0 <chk_chr+0x26>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d1f2      	bne.n	800cd96 <chk_chr+0xc>
	return *str;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60bb      	str	r3, [r7, #8]
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	60fb      	str	r3, [r7, #12]
 800cdd2:	e029      	b.n	800ce28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cdd4:	4a27      	ldr	r2, [pc, #156]	@ (800ce74 <chk_lock+0xb4>)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	011b      	lsls	r3, r3, #4
 800cdda:	4413      	add	r3, r2
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d01d      	beq.n	800ce1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cde2:	4a24      	ldr	r2, [pc, #144]	@ (800ce74 <chk_lock+0xb4>)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	011b      	lsls	r3, r3, #4
 800cde8:	4413      	add	r3, r2
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d116      	bne.n	800ce22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cdf4:	4a1f      	ldr	r2, [pc, #124]	@ (800ce74 <chk_lock+0xb4>)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	011b      	lsls	r3, r3, #4
 800cdfa:	4413      	add	r3, r2
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d10c      	bne.n	800ce22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce08:	4a1a      	ldr	r2, [pc, #104]	@ (800ce74 <chk_lock+0xb4>)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	011b      	lsls	r3, r3, #4
 800ce0e:	4413      	add	r3, r2
 800ce10:	3308      	adds	r3, #8
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d102      	bne.n	800ce22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce1c:	e007      	b.n	800ce2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	3301      	adds	r3, #1
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d9d2      	bls.n	800cdd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d109      	bne.n	800ce48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d102      	bne.n	800ce40 <chk_lock+0x80>
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d101      	bne.n	800ce44 <chk_lock+0x84>
 800ce40:	2300      	movs	r3, #0
 800ce42:	e010      	b.n	800ce66 <chk_lock+0xa6>
 800ce44:	2312      	movs	r3, #18
 800ce46:	e00e      	b.n	800ce66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d108      	bne.n	800ce60 <chk_lock+0xa0>
 800ce4e:	4a09      	ldr	r2, [pc, #36]	@ (800ce74 <chk_lock+0xb4>)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	011b      	lsls	r3, r3, #4
 800ce54:	4413      	add	r3, r2
 800ce56:	330c      	adds	r3, #12
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce5e:	d101      	bne.n	800ce64 <chk_lock+0xa4>
 800ce60:	2310      	movs	r3, #16
 800ce62:	e000      	b.n	800ce66 <chk_lock+0xa6>
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3714      	adds	r7, #20
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	24000658 	.word	0x24000658

0800ce78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	607b      	str	r3, [r7, #4]
 800ce82:	e002      	b.n	800ce8a <enq_lock+0x12>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	3301      	adds	r3, #1
 800ce88:	607b      	str	r3, [r7, #4]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d806      	bhi.n	800ce9e <enq_lock+0x26>
 800ce90:	4a09      	ldr	r2, [pc, #36]	@ (800ceb8 <enq_lock+0x40>)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	011b      	lsls	r3, r3, #4
 800ce96:	4413      	add	r3, r2
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1f2      	bne.n	800ce84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	bf14      	ite	ne
 800cea4:	2301      	movne	r3, #1
 800cea6:	2300      	moveq	r3, #0
 800cea8:	b2db      	uxtb	r3, r3
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	370c      	adds	r7, #12
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	24000658 	.word	0x24000658

0800cebc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cec6:	2300      	movs	r3, #0
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	e01f      	b.n	800cf0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cecc:	4a41      	ldr	r2, [pc, #260]	@ (800cfd4 <inc_lock+0x118>)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	011b      	lsls	r3, r3, #4
 800ced2:	4413      	add	r3, r2
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d113      	bne.n	800cf06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cede:	4a3d      	ldr	r2, [pc, #244]	@ (800cfd4 <inc_lock+0x118>)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	011b      	lsls	r3, r3, #4
 800cee4:	4413      	add	r3, r2
 800cee6:	3304      	adds	r3, #4
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d109      	bne.n	800cf06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cef2:	4a38      	ldr	r2, [pc, #224]	@ (800cfd4 <inc_lock+0x118>)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	011b      	lsls	r3, r3, #4
 800cef8:	4413      	add	r3, r2
 800cefa:	3308      	adds	r3, #8
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d006      	beq.n	800cf14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	60fb      	str	r3, [r7, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d9dc      	bls.n	800cecc <inc_lock+0x10>
 800cf12:	e000      	b.n	800cf16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d132      	bne.n	800cf82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	e002      	b.n	800cf28 <inc_lock+0x6c>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	3301      	adds	r3, #1
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d806      	bhi.n	800cf3c <inc_lock+0x80>
 800cf2e:	4a29      	ldr	r2, [pc, #164]	@ (800cfd4 <inc_lock+0x118>)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	011b      	lsls	r3, r3, #4
 800cf34:	4413      	add	r3, r2
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1f2      	bne.n	800cf22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d101      	bne.n	800cf46 <inc_lock+0x8a>
 800cf42:	2300      	movs	r3, #0
 800cf44:	e040      	b.n	800cfc8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	4922      	ldr	r1, [pc, #136]	@ (800cfd4 <inc_lock+0x118>)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	011b      	lsls	r3, r3, #4
 800cf50:	440b      	add	r3, r1
 800cf52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	689a      	ldr	r2, [r3, #8]
 800cf58:	491e      	ldr	r1, [pc, #120]	@ (800cfd4 <inc_lock+0x118>)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	011b      	lsls	r3, r3, #4
 800cf5e:	440b      	add	r3, r1
 800cf60:	3304      	adds	r3, #4
 800cf62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	695a      	ldr	r2, [r3, #20]
 800cf68:	491a      	ldr	r1, [pc, #104]	@ (800cfd4 <inc_lock+0x118>)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	011b      	lsls	r3, r3, #4
 800cf6e:	440b      	add	r3, r1
 800cf70:	3308      	adds	r3, #8
 800cf72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cf74:	4a17      	ldr	r2, [pc, #92]	@ (800cfd4 <inc_lock+0x118>)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	011b      	lsls	r3, r3, #4
 800cf7a:	4413      	add	r3, r2
 800cf7c:	330c      	adds	r3, #12
 800cf7e:	2200      	movs	r2, #0
 800cf80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d009      	beq.n	800cf9c <inc_lock+0xe0>
 800cf88:	4a12      	ldr	r2, [pc, #72]	@ (800cfd4 <inc_lock+0x118>)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	011b      	lsls	r3, r3, #4
 800cf8e:	4413      	add	r3, r2
 800cf90:	330c      	adds	r3, #12
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <inc_lock+0xe0>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	e015      	b.n	800cfc8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d108      	bne.n	800cfb4 <inc_lock+0xf8>
 800cfa2:	4a0c      	ldr	r2, [pc, #48]	@ (800cfd4 <inc_lock+0x118>)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	011b      	lsls	r3, r3, #4
 800cfa8:	4413      	add	r3, r2
 800cfaa:	330c      	adds	r3, #12
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	e001      	b.n	800cfb8 <inc_lock+0xfc>
 800cfb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cfb8:	4906      	ldr	r1, [pc, #24]	@ (800cfd4 <inc_lock+0x118>)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	011b      	lsls	r3, r3, #4
 800cfbe:	440b      	add	r3, r1
 800cfc0:	330c      	adds	r3, #12
 800cfc2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3301      	adds	r3, #1
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3714      	adds	r7, #20
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr
 800cfd4:	24000658 	.word	0x24000658

0800cfd8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	607b      	str	r3, [r7, #4]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d825      	bhi.n	800d038 <dec_lock+0x60>
		n = Files[i].ctr;
 800cfec:	4a17      	ldr	r2, [pc, #92]	@ (800d04c <dec_lock+0x74>)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	011b      	lsls	r3, r3, #4
 800cff2:	4413      	add	r3, r2
 800cff4:	330c      	adds	r3, #12
 800cff6:	881b      	ldrh	r3, [r3, #0]
 800cff8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cffa:	89fb      	ldrh	r3, [r7, #14]
 800cffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d000:	d101      	bne.n	800d006 <dec_lock+0x2e>
 800d002:	2300      	movs	r3, #0
 800d004:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d006:	89fb      	ldrh	r3, [r7, #14]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <dec_lock+0x3a>
 800d00c:	89fb      	ldrh	r3, [r7, #14]
 800d00e:	3b01      	subs	r3, #1
 800d010:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d012:	4a0e      	ldr	r2, [pc, #56]	@ (800d04c <dec_lock+0x74>)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	011b      	lsls	r3, r3, #4
 800d018:	4413      	add	r3, r2
 800d01a:	330c      	adds	r3, #12
 800d01c:	89fa      	ldrh	r2, [r7, #14]
 800d01e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d020:	89fb      	ldrh	r3, [r7, #14]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d105      	bne.n	800d032 <dec_lock+0x5a>
 800d026:	4a09      	ldr	r2, [pc, #36]	@ (800d04c <dec_lock+0x74>)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	4413      	add	r3, r2
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	737b      	strb	r3, [r7, #13]
 800d036:	e001      	b.n	800d03c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d038:	2302      	movs	r3, #2
 800d03a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d03c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	24000658 	.word	0x24000658

0800d050 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d058:	2300      	movs	r3, #0
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	e010      	b.n	800d080 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d05e:	4a0d      	ldr	r2, [pc, #52]	@ (800d094 <clear_lock+0x44>)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	4413      	add	r3, r2
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d105      	bne.n	800d07a <clear_lock+0x2a>
 800d06e:	4a09      	ldr	r2, [pc, #36]	@ (800d094 <clear_lock+0x44>)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	4413      	add	r3, r2
 800d076:	2200      	movs	r2, #0
 800d078:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3301      	adds	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2b01      	cmp	r3, #1
 800d084:	d9eb      	bls.n	800d05e <clear_lock+0xe>
	}
}
 800d086:	bf00      	nop
 800d088:	bf00      	nop
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	24000658 	.word	0x24000658

0800d098 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	78db      	ldrb	r3, [r3, #3]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d034      	beq.n	800d116 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	7858      	ldrb	r0, [r3, #1]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0bc:	2301      	movs	r3, #1
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	f7ff fd40 	bl	800cb44 <disk_write>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	73fb      	strb	r3, [r7, #15]
 800d0ce:	e022      	b.n	800d116 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a1b      	ldr	r3, [r3, #32]
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	1ad2      	subs	r2, r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	699b      	ldr	r3, [r3, #24]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d217      	bcs.n	800d116 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	789b      	ldrb	r3, [r3, #2]
 800d0ea:	613b      	str	r3, [r7, #16]
 800d0ec:	e010      	b.n	800d110 <sync_window+0x78>
					wsect += fs->fsize;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	7858      	ldrb	r0, [r3, #1]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d102:	2301      	movs	r3, #1
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	f7ff fd1d 	bl	800cb44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	3b01      	subs	r3, #1
 800d10e:	613b      	str	r3, [r7, #16]
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d8eb      	bhi.n	800d0ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3718      	adds	r7, #24
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	429a      	cmp	r2, r3
 800d136:	d01b      	beq.n	800d170 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7ff ffad 	bl	800d098 <sync_window>
 800d13e:	4603      	mov	r3, r0
 800d140:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d113      	bne.n	800d170 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7858      	ldrb	r0, [r3, #1]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d152:	2301      	movs	r3, #1
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	f7ff fcd5 	bl	800cb04 <disk_read>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d004      	beq.n	800d16a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d160:	f04f 33ff 	mov.w	r3, #4294967295
 800d164:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d166:	2301      	movs	r3, #1
 800d168:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	683a      	ldr	r2, [r7, #0]
 800d16e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d170:	7bfb      	ldrb	r3, [r7, #15]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
	...

0800d17c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff ff87 	bl	800d098 <sync_window>
 800d18a:	4603      	mov	r3, r0
 800d18c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d158      	bne.n	800d246 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d148      	bne.n	800d22e <sync_fs+0xb2>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	791b      	ldrb	r3, [r3, #4]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d144      	bne.n	800d22e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3330      	adds	r3, #48	@ 0x30
 800d1a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff fda9 	bl	800cd06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3330      	adds	r3, #48	@ 0x30
 800d1b8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d1bc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7ff fd38 	bl	800cc36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	3330      	adds	r3, #48	@ 0x30
 800d1ca:	4921      	ldr	r1, [pc, #132]	@ (800d250 <sync_fs+0xd4>)
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7ff fd4d 	bl	800cc6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3330      	adds	r3, #48	@ 0x30
 800d1d6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d1da:	491e      	ldr	r1, [pc, #120]	@ (800d254 <sync_fs+0xd8>)
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7ff fd45 	bl	800cc6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	3330      	adds	r3, #48	@ 0x30
 800d1e6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	f7ff fd3b 	bl	800cc6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3330      	adds	r3, #48	@ 0x30
 800d1fa:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	4619      	mov	r1, r3
 800d204:	4610      	mov	r0, r2
 800d206:	f7ff fd31 	bl	800cc6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	69db      	ldr	r3, [r3, #28]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	7858      	ldrb	r0, [r3, #1]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d222:	2301      	movs	r3, #1
 800d224:	f7ff fc8e 	bl	800cb44 <disk_write>
			fs->fsi_flag = 0;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	785b      	ldrb	r3, [r3, #1]
 800d232:	2200      	movs	r2, #0
 800d234:	2100      	movs	r1, #0
 800d236:	4618      	mov	r0, r3
 800d238:	f7ff fca4 	bl	800cb84 <disk_ioctl>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <sync_fs+0xca>
 800d242:	2301      	movs	r3, #1
 800d244:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d246:	7bfb      	ldrb	r3, [r7, #15]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3710      	adds	r7, #16
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	41615252 	.word	0x41615252
 800d254:	61417272 	.word	0x61417272

0800d258 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	3b02      	subs	r3, #2
 800d266:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	695b      	ldr	r3, [r3, #20]
 800d26c:	3b02      	subs	r3, #2
 800d26e:	683a      	ldr	r2, [r7, #0]
 800d270:	429a      	cmp	r2, r3
 800d272:	d301      	bcc.n	800d278 <clust2sect+0x20>
 800d274:	2300      	movs	r3, #0
 800d276:	e008      	b.n	800d28a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	895b      	ldrh	r3, [r3, #10]
 800d27c:	461a      	mov	r2, r3
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	fb03 f202 	mul.w	r2, r3, r2
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d288:	4413      	add	r3, r2
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b086      	sub	sp, #24
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d904      	bls.n	800d2b6 <get_fat+0x20>
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	695b      	ldr	r3, [r3, #20]
 800d2b0:	683a      	ldr	r2, [r7, #0]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d302      	bcc.n	800d2bc <get_fat+0x26>
		val = 1;	/* Internal error */
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	617b      	str	r3, [r7, #20]
 800d2ba:	e08e      	b.n	800d3da <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	2b03      	cmp	r3, #3
 800d2c8:	d061      	beq.n	800d38e <get_fat+0xf8>
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	dc7b      	bgt.n	800d3c6 <get_fat+0x130>
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d002      	beq.n	800d2d8 <get_fat+0x42>
 800d2d2:	2b02      	cmp	r3, #2
 800d2d4:	d041      	beq.n	800d35a <get_fat+0xc4>
 800d2d6:	e076      	b.n	800d3c6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	60fb      	str	r3, [r7, #12]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	085b      	lsrs	r3, r3, #1
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	6a1a      	ldr	r2, [r3, #32]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	0a5b      	lsrs	r3, r3, #9
 800d2ee:	4413      	add	r3, r2
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6938      	ldr	r0, [r7, #16]
 800d2f4:	f7ff ff14 	bl	800d120 <move_window>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d166      	bne.n	800d3cc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	1c5a      	adds	r2, r3, #1
 800d302:	60fa      	str	r2, [r7, #12]
 800d304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d308:	693a      	ldr	r2, [r7, #16]
 800d30a:	4413      	add	r3, r2
 800d30c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d310:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	6a1a      	ldr	r2, [r3, #32]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	0a5b      	lsrs	r3, r3, #9
 800d31a:	4413      	add	r3, r2
 800d31c:	4619      	mov	r1, r3
 800d31e:	6938      	ldr	r0, [r7, #16]
 800d320:	f7ff fefe 	bl	800d120 <move_window>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d152      	bne.n	800d3d0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d330:	693a      	ldr	r2, [r7, #16]
 800d332:	4413      	add	r3, r2
 800d334:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d338:	021b      	lsls	r3, r3, #8
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	4313      	orrs	r3, r2
 800d33e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	f003 0301 	and.w	r3, r3, #1
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <get_fat+0xba>
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	091b      	lsrs	r3, r3, #4
 800d34e:	e002      	b.n	800d356 <get_fat+0xc0>
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d356:	617b      	str	r3, [r7, #20]
			break;
 800d358:	e03f      	b.n	800d3da <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	6a1a      	ldr	r2, [r3, #32]
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	0a1b      	lsrs	r3, r3, #8
 800d362:	4413      	add	r3, r2
 800d364:	4619      	mov	r1, r3
 800d366:	6938      	ldr	r0, [r7, #16]
 800d368:	f7ff feda 	bl	800d120 <move_window>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d130      	bne.n	800d3d4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	005b      	lsls	r3, r3, #1
 800d37c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d380:	4413      	add	r3, r2
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fc1c 	bl	800cbc0 <ld_word>
 800d388:	4603      	mov	r3, r0
 800d38a:	617b      	str	r3, [r7, #20]
			break;
 800d38c:	e025      	b.n	800d3da <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	6a1a      	ldr	r2, [r3, #32]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	09db      	lsrs	r3, r3, #7
 800d396:	4413      	add	r3, r2
 800d398:	4619      	mov	r1, r3
 800d39a:	6938      	ldr	r0, [r7, #16]
 800d39c:	f7ff fec0 	bl	800d120 <move_window>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d118      	bne.n	800d3d8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d3b4:	4413      	add	r3, r2
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff fc1a 	bl	800cbf0 <ld_dword>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d3c2:	617b      	str	r3, [r7, #20]
			break;
 800d3c4:	e009      	b.n	800d3da <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	617b      	str	r3, [r7, #20]
 800d3ca:	e006      	b.n	800d3da <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3cc:	bf00      	nop
 800d3ce:	e004      	b.n	800d3da <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3d0:	bf00      	nop
 800d3d2:	e002      	b.n	800d3da <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d3d4:	bf00      	nop
 800d3d6:	e000      	b.n	800d3da <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d3d8:	bf00      	nop
		}
	}

	return val;
 800d3da:	697b      	ldr	r3, [r7, #20]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3718      	adds	r7, #24
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d3e4:	b590      	push	{r4, r7, lr}
 800d3e6:	b089      	sub	sp, #36	@ 0x24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d3f0:	2302      	movs	r3, #2
 800d3f2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	f240 80d9 	bls.w	800d5ae <put_fat+0x1ca>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	68ba      	ldr	r2, [r7, #8]
 800d402:	429a      	cmp	r2, r3
 800d404:	f080 80d3 	bcs.w	800d5ae <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	f000 8096 	beq.w	800d53e <put_fat+0x15a>
 800d412:	2b03      	cmp	r3, #3
 800d414:	f300 80cb 	bgt.w	800d5ae <put_fat+0x1ca>
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d002      	beq.n	800d422 <put_fat+0x3e>
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d06e      	beq.n	800d4fe <put_fat+0x11a>
 800d420:	e0c5      	b.n	800d5ae <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	61bb      	str	r3, [r7, #24]
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	085b      	lsrs	r3, r3, #1
 800d42a:	69ba      	ldr	r2, [r7, #24]
 800d42c:	4413      	add	r3, r2
 800d42e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6a1a      	ldr	r2, [r3, #32]
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	0a5b      	lsrs	r3, r3, #9
 800d438:	4413      	add	r3, r2
 800d43a:	4619      	mov	r1, r3
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f7ff fe6f 	bl	800d120 <move_window>
 800d442:	4603      	mov	r3, r0
 800d444:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d446:	7ffb      	ldrb	r3, [r7, #31]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f040 80a9 	bne.w	800d5a0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d454:	69bb      	ldr	r3, [r7, #24]
 800d456:	1c59      	adds	r1, r3, #1
 800d458:	61b9      	str	r1, [r7, #24]
 800d45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45e:	4413      	add	r3, r2
 800d460:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00d      	beq.n	800d488 <put_fat+0xa4>
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	b25b      	sxtb	r3, r3
 800d472:	f003 030f 	and.w	r3, r3, #15
 800d476:	b25a      	sxtb	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	011b      	lsls	r3, r3, #4
 800d47e:	b25b      	sxtb	r3, r3
 800d480:	4313      	orrs	r3, r2
 800d482:	b25b      	sxtb	r3, r3
 800d484:	b2db      	uxtb	r3, r3
 800d486:	e001      	b.n	800d48c <put_fat+0xa8>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	697a      	ldr	r2, [r7, #20]
 800d48e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2201      	movs	r2, #1
 800d494:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6a1a      	ldr	r2, [r3, #32]
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	0a5b      	lsrs	r3, r3, #9
 800d49e:	4413      	add	r3, r2
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f7ff fe3c 	bl	800d120 <move_window>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4ac:	7ffb      	ldrb	r3, [r7, #31]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d178      	bne.n	800d5a4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4be:	4413      	add	r3, r2
 800d4c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	f003 0301 	and.w	r3, r3, #1
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d003      	beq.n	800d4d4 <put_fat+0xf0>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	091b      	lsrs	r3, r3, #4
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	e00e      	b.n	800d4f2 <put_fat+0x10e>
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	b25b      	sxtb	r3, r3
 800d4da:	f023 030f 	bic.w	r3, r3, #15
 800d4de:	b25a      	sxtb	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	0a1b      	lsrs	r3, r3, #8
 800d4e4:	b25b      	sxtb	r3, r3
 800d4e6:	f003 030f 	and.w	r3, r3, #15
 800d4ea:	b25b      	sxtb	r3, r3
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	b25b      	sxtb	r3, r3
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	697a      	ldr	r2, [r7, #20]
 800d4f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	70da      	strb	r2, [r3, #3]
			break;
 800d4fc:	e057      	b.n	800d5ae <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6a1a      	ldr	r2, [r3, #32]
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	0a1b      	lsrs	r3, r3, #8
 800d506:	4413      	add	r3, r2
 800d508:	4619      	mov	r1, r3
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f7ff fe08 	bl	800d120 <move_window>
 800d510:	4603      	mov	r3, r0
 800d512:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d514:	7ffb      	ldrb	r3, [r7, #31]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d146      	bne.n	800d5a8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d528:	4413      	add	r3, r2
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	b292      	uxth	r2, r2
 800d52e:	4611      	mov	r1, r2
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff fb80 	bl	800cc36 <st_word>
			fs->wflag = 1;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2201      	movs	r2, #1
 800d53a:	70da      	strb	r2, [r3, #3]
			break;
 800d53c:	e037      	b.n	800d5ae <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6a1a      	ldr	r2, [r3, #32]
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	09db      	lsrs	r3, r3, #7
 800d546:	4413      	add	r3, r2
 800d548:	4619      	mov	r1, r3
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff fde8 	bl	800d120 <move_window>
 800d550:	4603      	mov	r3, r0
 800d552:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d554:	7ffb      	ldrb	r3, [r7, #31]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d128      	bne.n	800d5ac <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d56e:	4413      	add	r3, r2
 800d570:	4618      	mov	r0, r3
 800d572:	f7ff fb3d 	bl	800cbf0 <ld_dword>
 800d576:	4603      	mov	r3, r0
 800d578:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d57c:	4323      	orrs	r3, r4
 800d57e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d58e:	4413      	add	r3, r2
 800d590:	6879      	ldr	r1, [r7, #4]
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff fb6a 	bl	800cc6c <st_dword>
			fs->wflag = 1;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2201      	movs	r2, #1
 800d59c:	70da      	strb	r2, [r3, #3]
			break;
 800d59e:	e006      	b.n	800d5ae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d5a0:	bf00      	nop
 800d5a2:	e004      	b.n	800d5ae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d5a4:	bf00      	nop
 800d5a6:	e002      	b.n	800d5ae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d5a8:	bf00      	nop
 800d5aa:	e000      	b.n	800d5ae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d5ac:	bf00      	nop
		}
	}
	return res;
 800d5ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3724      	adds	r7, #36	@ 0x24
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd90      	pop	{r4, r7, pc}

0800d5b8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d904      	bls.n	800d5de <remove_chain+0x26>
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	695b      	ldr	r3, [r3, #20]
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d301      	bcc.n	800d5e2 <remove_chain+0x2a>
 800d5de:	2302      	movs	r3, #2
 800d5e0:	e04b      	b.n	800d67a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00c      	beq.n	800d602 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ec:	6879      	ldr	r1, [r7, #4]
 800d5ee:	69b8      	ldr	r0, [r7, #24]
 800d5f0:	f7ff fef8 	bl	800d3e4 <put_fat>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d5f8:	7ffb      	ldrb	r3, [r7, #31]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d001      	beq.n	800d602 <remove_chain+0x4a>
 800d5fe:	7ffb      	ldrb	r3, [r7, #31]
 800d600:	e03b      	b.n	800d67a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f7ff fe46 	bl	800d296 <get_fat>
 800d60a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d031      	beq.n	800d676 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d101      	bne.n	800d61c <remove_chain+0x64>
 800d618:	2302      	movs	r3, #2
 800d61a:	e02e      	b.n	800d67a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d622:	d101      	bne.n	800d628 <remove_chain+0x70>
 800d624:	2301      	movs	r3, #1
 800d626:	e028      	b.n	800d67a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d628:	2200      	movs	r2, #0
 800d62a:	68b9      	ldr	r1, [r7, #8]
 800d62c:	69b8      	ldr	r0, [r7, #24]
 800d62e:	f7ff fed9 	bl	800d3e4 <put_fat>
 800d632:	4603      	mov	r3, r0
 800d634:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d636:	7ffb      	ldrb	r3, [r7, #31]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d001      	beq.n	800d640 <remove_chain+0x88>
 800d63c:	7ffb      	ldrb	r3, [r7, #31]
 800d63e:	e01c      	b.n	800d67a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	691a      	ldr	r2, [r3, #16]
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	695b      	ldr	r3, [r3, #20]
 800d648:	3b02      	subs	r3, #2
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d20b      	bcs.n	800d666 <remove_chain+0xae>
			fs->free_clst++;
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	1c5a      	adds	r2, r3, #1
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	791b      	ldrb	r3, [r3, #4]
 800d65c:	f043 0301 	orr.w	r3, r3, #1
 800d660:	b2da      	uxtb	r2, r3
 800d662:	69bb      	ldr	r3, [r7, #24]
 800d664:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	429a      	cmp	r2, r3
 800d672:	d3c6      	bcc.n	800d602 <remove_chain+0x4a>
 800d674:	e000      	b.n	800d678 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d676:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3720      	adds	r7, #32
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b088      	sub	sp, #32
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
 800d68a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10d      	bne.n	800d6b4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d004      	beq.n	800d6ae <create_chain+0x2c>
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	695b      	ldr	r3, [r3, #20]
 800d6a8:	69ba      	ldr	r2, [r7, #24]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d31b      	bcc.n	800d6e6 <create_chain+0x64>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	61bb      	str	r3, [r7, #24]
 800d6b2:	e018      	b.n	800d6e6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7ff fded 	bl	800d296 <get_fat>
 800d6bc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d801      	bhi.n	800d6c8 <create_chain+0x46>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e070      	b.n	800d7aa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ce:	d101      	bne.n	800d6d4 <create_chain+0x52>
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	e06a      	b.n	800d7aa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	695b      	ldr	r3, [r3, #20]
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d201      	bcs.n	800d6e2 <create_chain+0x60>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	e063      	b.n	800d7aa <create_chain+0x128>
		scl = clst;
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	695b      	ldr	r3, [r3, #20]
 800d6f4:	69fa      	ldr	r2, [r7, #28]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d307      	bcc.n	800d70a <create_chain+0x88>
				ncl = 2;
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d6fe:	69fa      	ldr	r2, [r7, #28]
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	429a      	cmp	r2, r3
 800d704:	d901      	bls.n	800d70a <create_chain+0x88>
 800d706:	2300      	movs	r3, #0
 800d708:	e04f      	b.n	800d7aa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d70a:	69f9      	ldr	r1, [r7, #28]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f7ff fdc2 	bl	800d296 <get_fat>
 800d712:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00e      	beq.n	800d738 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d003      	beq.n	800d728 <create_chain+0xa6>
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d726:	d101      	bne.n	800d72c <create_chain+0xaa>
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	e03e      	b.n	800d7aa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d72c:	69fa      	ldr	r2, [r7, #28]
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	429a      	cmp	r2, r3
 800d732:	d1da      	bne.n	800d6ea <create_chain+0x68>
 800d734:	2300      	movs	r3, #0
 800d736:	e038      	b.n	800d7aa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d738:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d73a:	f04f 32ff 	mov.w	r2, #4294967295
 800d73e:	69f9      	ldr	r1, [r7, #28]
 800d740:	6938      	ldr	r0, [r7, #16]
 800d742:	f7ff fe4f 	bl	800d3e4 <put_fat>
 800d746:	4603      	mov	r3, r0
 800d748:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d74a:	7dfb      	ldrb	r3, [r7, #23]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d109      	bne.n	800d764 <create_chain+0xe2>
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d006      	beq.n	800d764 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d756:	69fa      	ldr	r2, [r7, #28]
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6938      	ldr	r0, [r7, #16]
 800d75c:	f7ff fe42 	bl	800d3e4 <put_fat>
 800d760:	4603      	mov	r3, r0
 800d762:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d764:	7dfb      	ldrb	r3, [r7, #23]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d116      	bne.n	800d798 <create_chain+0x116>
		fs->last_clst = ncl;
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	69fa      	ldr	r2, [r7, #28]
 800d76e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	691a      	ldr	r2, [r3, #16]
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	3b02      	subs	r3, #2
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d804      	bhi.n	800d788 <create_chain+0x106>
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	691b      	ldr	r3, [r3, #16]
 800d782:	1e5a      	subs	r2, r3, #1
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	791b      	ldrb	r3, [r3, #4]
 800d78c:	f043 0301 	orr.w	r3, r3, #1
 800d790:	b2da      	uxtb	r2, r3
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	711a      	strb	r2, [r3, #4]
 800d796:	e007      	b.n	800d7a8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d798:	7dfb      	ldrb	r3, [r7, #23]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d102      	bne.n	800d7a4 <create_chain+0x122>
 800d79e:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a2:	e000      	b.n	800d7a6 <create_chain+0x124>
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d7a8:	69fb      	ldr	r3, [r7, #28]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d7b2:	b480      	push	{r7}
 800d7b4:	b087      	sub	sp, #28
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	0a5b      	lsrs	r3, r3, #9
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	8952      	ldrh	r2, [r2, #10]
 800d7d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7d6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	1d1a      	adds	r2, r3, #4
 800d7dc:	613a      	str	r2, [r7, #16]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <clmt_clust+0x3a>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	e010      	b.n	800d80e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d307      	bcc.n	800d804 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d7f4:	697a      	ldr	r2, [r7, #20]
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	617b      	str	r3, [r7, #20]
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	3304      	adds	r3, #4
 800d800:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d802:	e7e9      	b.n	800d7d8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d804:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	4413      	add	r3, r2
}
 800d80e:	4618      	mov	r0, r3
 800d810:	371c      	adds	r7, #28
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b086      	sub	sp, #24
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d830:	d204      	bcs.n	800d83c <dir_sdi+0x22>
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	f003 031f 	and.w	r3, r3, #31
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d83c:	2302      	movs	r3, #2
 800d83e:	e063      	b.n	800d908 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	683a      	ldr	r2, [r7, #0]
 800d844:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d106      	bne.n	800d860 <dir_sdi+0x46>
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	2b02      	cmp	r3, #2
 800d858:	d902      	bls.n	800d860 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d85e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10c      	bne.n	800d880 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	095b      	lsrs	r3, r3, #5
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	8912      	ldrh	r2, [r2, #8]
 800d86e:	4293      	cmp	r3, r2
 800d870:	d301      	bcc.n	800d876 <dir_sdi+0x5c>
 800d872:	2302      	movs	r3, #2
 800d874:	e048      	b.n	800d908 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	61da      	str	r2, [r3, #28]
 800d87e:	e029      	b.n	800d8d4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	895b      	ldrh	r3, [r3, #10]
 800d884:	025b      	lsls	r3, r3, #9
 800d886:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d888:	e019      	b.n	800d8be <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6979      	ldr	r1, [r7, #20]
 800d88e:	4618      	mov	r0, r3
 800d890:	f7ff fd01 	bl	800d296 <get_fat>
 800d894:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89c:	d101      	bne.n	800d8a2 <dir_sdi+0x88>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e032      	b.n	800d908 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d904      	bls.n	800d8b2 <dir_sdi+0x98>
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	695b      	ldr	r3, [r3, #20]
 800d8ac:	697a      	ldr	r2, [r7, #20]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d301      	bcc.n	800d8b6 <dir_sdi+0x9c>
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	e028      	b.n	800d908 <dir_sdi+0xee>
			ofs -= csz;
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	1ad3      	subs	r3, r2, r3
 800d8bc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d8be:	683a      	ldr	r2, [r7, #0]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d2e1      	bcs.n	800d88a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d8c6:	6979      	ldr	r1, [r7, #20]
 800d8c8:	6938      	ldr	r0, [r7, #16]
 800d8ca:	f7ff fcc5 	bl	800d258 <clust2sect>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	69db      	ldr	r3, [r3, #28]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <dir_sdi+0xcc>
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	e010      	b.n	800d908 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	69da      	ldr	r2, [r3, #28]
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	0a5b      	lsrs	r3, r3, #9
 800d8ee:	441a      	add	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d900:	441a      	add	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	695b      	ldr	r3, [r3, #20]
 800d924:	3320      	adds	r3, #32
 800d926:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	69db      	ldr	r3, [r3, #28]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d003      	beq.n	800d938 <dir_next+0x28>
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d936:	d301      	bcc.n	800d93c <dir_next+0x2c>
 800d938:	2304      	movs	r3, #4
 800d93a:	e0aa      	b.n	800da92 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d942:	2b00      	cmp	r3, #0
 800d944:	f040 8098 	bne.w	800da78 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	69db      	ldr	r3, [r3, #28]
 800d94c:	1c5a      	adds	r2, r3, #1
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10b      	bne.n	800d972 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	095b      	lsrs	r3, r3, #5
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	8912      	ldrh	r2, [r2, #8]
 800d962:	4293      	cmp	r3, r2
 800d964:	f0c0 8088 	bcc.w	800da78 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	61da      	str	r2, [r3, #28]
 800d96e:	2304      	movs	r3, #4
 800d970:	e08f      	b.n	800da92 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	0a5b      	lsrs	r3, r3, #9
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	8952      	ldrh	r2, [r2, #10]
 800d97a:	3a01      	subs	r2, #1
 800d97c:	4013      	ands	r3, r2
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d17a      	bne.n	800da78 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	4619      	mov	r1, r3
 800d98a:	4610      	mov	r0, r2
 800d98c:	f7ff fc83 	bl	800d296 <get_fat>
 800d990:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d801      	bhi.n	800d99c <dir_next+0x8c>
 800d998:	2302      	movs	r3, #2
 800d99a:	e07a      	b.n	800da92 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a2:	d101      	bne.n	800d9a8 <dir_next+0x98>
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e074      	b.n	800da92 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	695b      	ldr	r3, [r3, #20]
 800d9ac:	697a      	ldr	r2, [r7, #20]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d358      	bcc.n	800da64 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d104      	bne.n	800d9c2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	61da      	str	r2, [r3, #28]
 800d9be:	2304      	movs	r3, #4
 800d9c0:	e067      	b.n	800da92 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	699b      	ldr	r3, [r3, #24]
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	4610      	mov	r0, r2
 800d9cc:	f7ff fe59 	bl	800d682 <create_chain>
 800d9d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d101      	bne.n	800d9dc <dir_next+0xcc>
 800d9d8:	2307      	movs	r3, #7
 800d9da:	e05a      	b.n	800da92 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d101      	bne.n	800d9e6 <dir_next+0xd6>
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	e055      	b.n	800da92 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ec:	d101      	bne.n	800d9f2 <dir_next+0xe2>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e04f      	b.n	800da92 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f7ff fb50 	bl	800d098 <sync_window>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <dir_next+0xf2>
 800d9fe:	2301      	movs	r3, #1
 800da00:	e047      	b.n	800da92 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	3330      	adds	r3, #48	@ 0x30
 800da06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da0a:	2100      	movs	r1, #0
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7ff f97a 	bl	800cd06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da12:	2300      	movs	r3, #0
 800da14:	613b      	str	r3, [r7, #16]
 800da16:	6979      	ldr	r1, [r7, #20]
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7ff fc1d 	bl	800d258 <clust2sect>
 800da1e:	4602      	mov	r2, r0
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	62da      	str	r2, [r3, #44]	@ 0x2c
 800da24:	e012      	b.n	800da4c <dir_next+0x13c>
						fs->wflag = 1;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2201      	movs	r2, #1
 800da2a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f7ff fb33 	bl	800d098 <sync_window>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <dir_next+0x12c>
 800da38:	2301      	movs	r3, #1
 800da3a:	e02a      	b.n	800da92 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	3301      	adds	r3, #1
 800da40:	613b      	str	r3, [r7, #16]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da46:	1c5a      	adds	r2, r3, #1
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	895b      	ldrh	r3, [r3, #10]
 800da50:	461a      	mov	r2, r3
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	4293      	cmp	r3, r2
 800da56:	d3e6      	bcc.n	800da26 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	1ad2      	subs	r2, r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800da6a:	6979      	ldr	r1, [r7, #20]
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f7ff fbf3 	bl	800d258 <clust2sect>
 800da72:	4602      	mov	r2, r0
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	68ba      	ldr	r2, [r7, #8]
 800da7c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da8a:	441a      	add	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3718      	adds	r7, #24
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b086      	sub	sp, #24
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800daaa:	2100      	movs	r1, #0
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff feb4 	bl	800d81a <dir_sdi>
 800dab2:	4603      	mov	r3, r0
 800dab4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dab6:	7dfb      	ldrb	r3, [r7, #23]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d12b      	bne.n	800db14 <dir_alloc+0x7a>
		n = 0;
 800dabc:	2300      	movs	r3, #0
 800dabe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	69db      	ldr	r3, [r3, #28]
 800dac4:	4619      	mov	r1, r3
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f7ff fb2a 	bl	800d120 <move_window>
 800dacc:	4603      	mov	r3, r0
 800dace:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dad0:	7dfb      	ldrb	r3, [r7, #23]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d11d      	bne.n	800db12 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2be5      	cmp	r3, #229	@ 0xe5
 800dade:	d004      	beq.n	800daea <dir_alloc+0x50>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6a1b      	ldr	r3, [r3, #32]
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d107      	bne.n	800dafa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	3301      	adds	r3, #1
 800daee:	613b      	str	r3, [r7, #16]
 800daf0:	693a      	ldr	r2, [r7, #16]
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d102      	bne.n	800dafe <dir_alloc+0x64>
 800daf8:	e00c      	b.n	800db14 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dafa:	2300      	movs	r3, #0
 800dafc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dafe:	2101      	movs	r1, #1
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7ff ff05 	bl	800d910 <dir_next>
 800db06:	4603      	mov	r3, r0
 800db08:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d0d7      	beq.n	800dac0 <dir_alloc+0x26>
 800db10:	e000      	b.n	800db14 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800db12:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	2b04      	cmp	r3, #4
 800db18:	d101      	bne.n	800db1e <dir_alloc+0x84>
 800db1a:	2307      	movs	r3, #7
 800db1c:	75fb      	strb	r3, [r7, #23]
	return res;
 800db1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	331a      	adds	r3, #26
 800db36:	4618      	mov	r0, r3
 800db38:	f7ff f842 	bl	800cbc0 <ld_word>
 800db3c:	4603      	mov	r3, r0
 800db3e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b03      	cmp	r3, #3
 800db46:	d109      	bne.n	800db5c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	3314      	adds	r3, #20
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff f837 	bl	800cbc0 <ld_word>
 800db52:	4603      	mov	r3, r0
 800db54:	041b      	lsls	r3, r3, #16
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	4313      	orrs	r3, r2
 800db5a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800db5c:	68fb      	ldr	r3, [r7, #12]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b084      	sub	sp, #16
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	60f8      	str	r0, [r7, #12]
 800db6e:	60b9      	str	r1, [r7, #8]
 800db70:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	331a      	adds	r3, #26
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	b292      	uxth	r2, r2
 800db7a:	4611      	mov	r1, r2
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff f85a 	bl	800cc36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	2b03      	cmp	r3, #3
 800db88:	d109      	bne.n	800db9e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f103 0214 	add.w	r2, r3, #20
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	0c1b      	lsrs	r3, r3, #16
 800db94:	b29b      	uxth	r3, r3
 800db96:	4619      	mov	r1, r3
 800db98:	4610      	mov	r0, r2
 800db9a:	f7ff f84c 	bl	800cc36 <st_word>
	}
}
 800db9e:	bf00      	nop
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b086      	sub	sp, #24
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dbb4:	2100      	movs	r1, #0
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff fe2f 	bl	800d81a <dir_sdi>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <dir_find+0x24>
 800dbc6:	7dfb      	ldrb	r3, [r7, #23]
 800dbc8:	e03e      	b.n	800dc48 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	69db      	ldr	r3, [r3, #28]
 800dbce:	4619      	mov	r1, r3
 800dbd0:	6938      	ldr	r0, [r7, #16]
 800dbd2:	f7ff faa5 	bl	800d120 <move_window>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dbda:	7dfb      	ldrb	r3, [r7, #23]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d12f      	bne.n	800dc40 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a1b      	ldr	r3, [r3, #32]
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dbe8:	7bfb      	ldrb	r3, [r7, #15]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d102      	bne.n	800dbf4 <dir_find+0x4e>
 800dbee:	2304      	movs	r3, #4
 800dbf0:	75fb      	strb	r3, [r7, #23]
 800dbf2:	e028      	b.n	800dc46 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a1b      	ldr	r3, [r3, #32]
 800dbf8:	330b      	adds	r3, #11
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a1b      	ldr	r3, [r3, #32]
 800dc0a:	330b      	adds	r3, #11
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	f003 0308 	and.w	r3, r3, #8
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10a      	bne.n	800dc2c <dir_find+0x86>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a18      	ldr	r0, [r3, #32]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	3324      	adds	r3, #36	@ 0x24
 800dc1e:	220b      	movs	r2, #11
 800dc20:	4619      	mov	r1, r3
 800dc22:	f7ff f88b 	bl	800cd3c <mem_cmp>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00b      	beq.n	800dc44 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7ff fe6e 	bl	800d910 <dir_next>
 800dc34:	4603      	mov	r3, r0
 800dc36:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dc38:	7dfb      	ldrb	r3, [r7, #23]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d0c5      	beq.n	800dbca <dir_find+0x24>
 800dc3e:	e002      	b.n	800dc46 <dir_find+0xa0>
		if (res != FR_OK) break;
 800dc40:	bf00      	nop
 800dc42:	e000      	b.n	800dc46 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dc44:	bf00      	nop

	return res;
 800dc46:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dc5e:	2101      	movs	r1, #1
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7ff ff1a 	bl	800da9a <dir_alloc>
 800dc66:	4603      	mov	r3, r0
 800dc68:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dc6a:	7bfb      	ldrb	r3, [r7, #15]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d11c      	bne.n	800dcaa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	69db      	ldr	r3, [r3, #28]
 800dc74:	4619      	mov	r1, r3
 800dc76:	68b8      	ldr	r0, [r7, #8]
 800dc78:	f7ff fa52 	bl	800d120 <move_window>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d111      	bne.n	800dcaa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a1b      	ldr	r3, [r3, #32]
 800dc8a:	2220      	movs	r2, #32
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff f839 	bl	800cd06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a18      	ldr	r0, [r3, #32]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	3324      	adds	r3, #36	@ 0x24
 800dc9c:	220b      	movs	r2, #11
 800dc9e:	4619      	mov	r1, r3
 800dca0:	f7ff f810 	bl	800ccc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	2201      	movs	r2, #1
 800dca8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dcaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	60fb      	str	r3, [r7, #12]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	3324      	adds	r3, #36	@ 0x24
 800dcc8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dcca:	220b      	movs	r2, #11
 800dccc:	2120      	movs	r1, #32
 800dcce:	68b8      	ldr	r0, [r7, #8]
 800dcd0:	f7ff f819 	bl	800cd06 <mem_set>
	si = i = 0; ni = 8;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	613b      	str	r3, [r7, #16]
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	61fb      	str	r3, [r7, #28]
 800dcdc:	2308      	movs	r3, #8
 800dcde:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	61fa      	str	r2, [r7, #28]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	4413      	add	r3, r2
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dcee:	7efb      	ldrb	r3, [r7, #27]
 800dcf0:	2b20      	cmp	r3, #32
 800dcf2:	d94e      	bls.n	800dd92 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dcf4:	7efb      	ldrb	r3, [r7, #27]
 800dcf6:	2b2f      	cmp	r3, #47	@ 0x2f
 800dcf8:	d006      	beq.n	800dd08 <create_name+0x54>
 800dcfa:	7efb      	ldrb	r3, [r7, #27]
 800dcfc:	2b5c      	cmp	r3, #92	@ 0x5c
 800dcfe:	d110      	bne.n	800dd22 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dd00:	e002      	b.n	800dd08 <create_name+0x54>
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	3301      	adds	r3, #1
 800dd06:	61fb      	str	r3, [r7, #28]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd12:	d0f6      	beq.n	800dd02 <create_name+0x4e>
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	4413      	add	r3, r2
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	2b5c      	cmp	r3, #92	@ 0x5c
 800dd1e:	d0f0      	beq.n	800dd02 <create_name+0x4e>
			break;
 800dd20:	e038      	b.n	800dd94 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dd22:	7efb      	ldrb	r3, [r7, #27]
 800dd24:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd26:	d003      	beq.n	800dd30 <create_name+0x7c>
 800dd28:	693a      	ldr	r2, [r7, #16]
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d30c      	bcc.n	800dd4a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	2b0b      	cmp	r3, #11
 800dd34:	d002      	beq.n	800dd3c <create_name+0x88>
 800dd36:	7efb      	ldrb	r3, [r7, #27]
 800dd38:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd3a:	d001      	beq.n	800dd40 <create_name+0x8c>
 800dd3c:	2306      	movs	r3, #6
 800dd3e:	e044      	b.n	800ddca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dd40:	2308      	movs	r3, #8
 800dd42:	613b      	str	r3, [r7, #16]
 800dd44:	230b      	movs	r3, #11
 800dd46:	617b      	str	r3, [r7, #20]
			continue;
 800dd48:	e022      	b.n	800dd90 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dd4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	da04      	bge.n	800dd5c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dd52:	7efb      	ldrb	r3, [r7, #27]
 800dd54:	3b80      	subs	r3, #128	@ 0x80
 800dd56:	4a1f      	ldr	r2, [pc, #124]	@ (800ddd4 <create_name+0x120>)
 800dd58:	5cd3      	ldrb	r3, [r2, r3]
 800dd5a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dd5c:	7efb      	ldrb	r3, [r7, #27]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	481d      	ldr	r0, [pc, #116]	@ (800ddd8 <create_name+0x124>)
 800dd62:	f7ff f812 	bl	800cd8a <chk_chr>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d001      	beq.n	800dd70 <create_name+0xbc>
 800dd6c:	2306      	movs	r3, #6
 800dd6e:	e02c      	b.n	800ddca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dd70:	7efb      	ldrb	r3, [r7, #27]
 800dd72:	2b60      	cmp	r3, #96	@ 0x60
 800dd74:	d905      	bls.n	800dd82 <create_name+0xce>
 800dd76:	7efb      	ldrb	r3, [r7, #27]
 800dd78:	2b7a      	cmp	r3, #122	@ 0x7a
 800dd7a:	d802      	bhi.n	800dd82 <create_name+0xce>
 800dd7c:	7efb      	ldrb	r3, [r7, #27]
 800dd7e:	3b20      	subs	r3, #32
 800dd80:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	613a      	str	r2, [r7, #16]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	7efa      	ldrb	r2, [r7, #27]
 800dd8e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dd90:	e7a6      	b.n	800dce0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dd92:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	441a      	add	r2, r3
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <create_name+0xf4>
 800dda4:	2306      	movs	r3, #6
 800dda6:	e010      	b.n	800ddca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	2be5      	cmp	r3, #229	@ 0xe5
 800ddae:	d102      	bne.n	800ddb6 <create_name+0x102>
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2205      	movs	r2, #5
 800ddb4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ddb6:	7efb      	ldrb	r3, [r7, #27]
 800ddb8:	2b20      	cmp	r3, #32
 800ddba:	d801      	bhi.n	800ddc0 <create_name+0x10c>
 800ddbc:	2204      	movs	r2, #4
 800ddbe:	e000      	b.n	800ddc2 <create_name+0x10e>
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	330b      	adds	r3, #11
 800ddc6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ddc8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3720      	adds	r7, #32
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	08011008 	.word	0x08011008
 800ddd8:	08010fac 	.word	0x08010fac

0800dddc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ddf0:	e002      	b.n	800ddf8 <follow_path+0x1c>
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	603b      	str	r3, [r7, #0]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b2f      	cmp	r3, #47	@ 0x2f
 800ddfe:	d0f8      	beq.n	800ddf2 <follow_path+0x16>
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	2b5c      	cmp	r3, #92	@ 0x5c
 800de06:	d0f4      	beq.n	800ddf2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	2200      	movs	r2, #0
 800de0c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b1f      	cmp	r3, #31
 800de14:	d80a      	bhi.n	800de2c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2280      	movs	r2, #128	@ 0x80
 800de1a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800de1e:	2100      	movs	r1, #0
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7ff fcfa 	bl	800d81a <dir_sdi>
 800de26:	4603      	mov	r3, r0
 800de28:	75fb      	strb	r3, [r7, #23]
 800de2a:	e043      	b.n	800deb4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de2c:	463b      	mov	r3, r7
 800de2e:	4619      	mov	r1, r3
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7ff ff3f 	bl	800dcb4 <create_name>
 800de36:	4603      	mov	r3, r0
 800de38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de3a:	7dfb      	ldrb	r3, [r7, #23]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d134      	bne.n	800deaa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff feb0 	bl	800dba6 <dir_find>
 800de46:	4603      	mov	r3, r0
 800de48:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800de50:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800de52:	7dfb      	ldrb	r3, [r7, #23]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00a      	beq.n	800de6e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800de58:	7dfb      	ldrb	r3, [r7, #23]
 800de5a:	2b04      	cmp	r3, #4
 800de5c:	d127      	bne.n	800deae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800de5e:	7afb      	ldrb	r3, [r7, #11]
 800de60:	f003 0304 	and.w	r3, r3, #4
 800de64:	2b00      	cmp	r3, #0
 800de66:	d122      	bne.n	800deae <follow_path+0xd2>
 800de68:	2305      	movs	r3, #5
 800de6a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800de6c:	e01f      	b.n	800deae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de6e:	7afb      	ldrb	r3, [r7, #11]
 800de70:	f003 0304 	and.w	r3, r3, #4
 800de74:	2b00      	cmp	r3, #0
 800de76:	d11c      	bne.n	800deb2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	799b      	ldrb	r3, [r3, #6]
 800de7c:	f003 0310 	and.w	r3, r3, #16
 800de80:	2b00      	cmp	r3, #0
 800de82:	d102      	bne.n	800de8a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800de84:	2305      	movs	r3, #5
 800de86:	75fb      	strb	r3, [r7, #23]
 800de88:	e014      	b.n	800deb4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	695b      	ldr	r3, [r3, #20]
 800de94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de98:	4413      	add	r3, r2
 800de9a:	4619      	mov	r1, r3
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f7ff fe43 	bl	800db28 <ld_clust>
 800dea2:	4602      	mov	r2, r0
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dea8:	e7c0      	b.n	800de2c <follow_path+0x50>
			if (res != FR_OK) break;
 800deaa:	bf00      	nop
 800deac:	e002      	b.n	800deb4 <follow_path+0xd8>
				break;
 800deae:	bf00      	nop
 800deb0:	e000      	b.n	800deb4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800deb2:	bf00      	nop
			}
		}
	}

	return res;
 800deb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800debe:	b480      	push	{r7}
 800dec0:	b087      	sub	sp, #28
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dec6:	f04f 33ff 	mov.w	r3, #4294967295
 800deca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d031      	beq.n	800df38 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	617b      	str	r3, [r7, #20]
 800deda:	e002      	b.n	800dee2 <get_ldnumber+0x24>
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	3301      	adds	r3, #1
 800dee0:	617b      	str	r3, [r7, #20]
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b20      	cmp	r3, #32
 800dee8:	d903      	bls.n	800def2 <get_ldnumber+0x34>
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b3a      	cmp	r3, #58	@ 0x3a
 800def0:	d1f4      	bne.n	800dedc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	2b3a      	cmp	r3, #58	@ 0x3a
 800def8:	d11c      	bne.n	800df34 <get_ldnumber+0x76>
			tp = *path;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	1c5a      	adds	r2, r3, #1
 800df04:	60fa      	str	r2, [r7, #12]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	3b30      	subs	r3, #48	@ 0x30
 800df0a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	2b09      	cmp	r3, #9
 800df10:	d80e      	bhi.n	800df30 <get_ldnumber+0x72>
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	429a      	cmp	r2, r3
 800df18:	d10a      	bne.n	800df30 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d107      	bne.n	800df30 <get_ldnumber+0x72>
					vol = (int)i;
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	3301      	adds	r3, #1
 800df28:	617b      	str	r3, [r7, #20]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	e002      	b.n	800df3a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800df34:	2300      	movs	r3, #0
 800df36:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800df38:	693b      	ldr	r3, [r7, #16]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	371c      	adds	r7, #28
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr
	...

0800df48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2200      	movs	r2, #0
 800df56:	70da      	strb	r2, [r3, #3]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f04f 32ff 	mov.w	r2, #4294967295
 800df5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7ff f8dc 	bl	800d120 <move_window>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d001      	beq.n	800df72 <check_fs+0x2a>
 800df6e:	2304      	movs	r3, #4
 800df70:	e038      	b.n	800dfe4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3330      	adds	r3, #48	@ 0x30
 800df76:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fe fe20 	bl	800cbc0 <ld_word>
 800df80:	4603      	mov	r3, r0
 800df82:	461a      	mov	r2, r3
 800df84:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800df88:	429a      	cmp	r2, r3
 800df8a:	d001      	beq.n	800df90 <check_fs+0x48>
 800df8c:	2303      	movs	r3, #3
 800df8e:	e029      	b.n	800dfe4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df96:	2be9      	cmp	r3, #233	@ 0xe9
 800df98:	d009      	beq.n	800dfae <check_fs+0x66>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfa0:	2beb      	cmp	r3, #235	@ 0xeb
 800dfa2:	d11e      	bne.n	800dfe2 <check_fs+0x9a>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800dfaa:	2b90      	cmp	r3, #144	@ 0x90
 800dfac:	d119      	bne.n	800dfe2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	3330      	adds	r3, #48	@ 0x30
 800dfb2:	3336      	adds	r3, #54	@ 0x36
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fe fe1b 	bl	800cbf0 <ld_dword>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dfc0:	4a0a      	ldr	r2, [pc, #40]	@ (800dfec <check_fs+0xa4>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d101      	bne.n	800dfca <check_fs+0x82>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e00c      	b.n	800dfe4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3330      	adds	r3, #48	@ 0x30
 800dfce:	3352      	adds	r3, #82	@ 0x52
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fe fe0d 	bl	800cbf0 <ld_dword>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	4a05      	ldr	r2, [pc, #20]	@ (800dff0 <check_fs+0xa8>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d101      	bne.n	800dfe2 <check_fs+0x9a>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	e000      	b.n	800dfe4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dfe2:	2302      	movs	r3, #2
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	00544146 	.word	0x00544146
 800dff0:	33544146 	.word	0x33544146

0800dff4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b096      	sub	sp, #88	@ 0x58
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	4613      	mov	r3, r2
 800e000:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	2200      	movs	r2, #0
 800e006:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f7ff ff58 	bl	800debe <get_ldnumber>
 800e00e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e012:	2b00      	cmp	r3, #0
 800e014:	da01      	bge.n	800e01a <find_volume+0x26>
 800e016:	230b      	movs	r3, #11
 800e018:	e22d      	b.n	800e476 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e01a:	4aa1      	ldr	r2, [pc, #644]	@ (800e2a0 <find_volume+0x2ac>)
 800e01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e022:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e026:	2b00      	cmp	r3, #0
 800e028:	d101      	bne.n	800e02e <find_volume+0x3a>
 800e02a:	230c      	movs	r3, #12
 800e02c:	e223      	b.n	800e476 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e032:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e034:	79fb      	ldrb	r3, [r7, #7]
 800e036:	f023 0301 	bic.w	r3, r3, #1
 800e03a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d01a      	beq.n	800e07a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e046:	785b      	ldrb	r3, [r3, #1]
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fe fd19 	bl	800ca80 <disk_status>
 800e04e:	4603      	mov	r3, r0
 800e050:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e054:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10c      	bne.n	800e07a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e060:	79fb      	ldrb	r3, [r7, #7]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d007      	beq.n	800e076 <find_volume+0x82>
 800e066:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e06a:	f003 0304 	and.w	r3, r3, #4
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d001      	beq.n	800e076 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e072:	230a      	movs	r3, #10
 800e074:	e1ff      	b.n	800e476 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e076:	2300      	movs	r3, #0
 800e078:	e1fd      	b.n	800e476 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e07c:	2200      	movs	r2, #0
 800e07e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e082:	b2da      	uxtb	r2, r3
 800e084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e086:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e08a:	785b      	ldrb	r3, [r3, #1]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe fd11 	bl	800cab4 <disk_initialize>
 800e092:	4603      	mov	r3, r0
 800e094:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e098:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e09c:	f003 0301 	and.w	r3, r3, #1
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d001      	beq.n	800e0a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e0a4:	2303      	movs	r3, #3
 800e0a6:	e1e6      	b.n	800e476 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e0a8:	79fb      	ldrb	r3, [r7, #7]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d007      	beq.n	800e0be <find_volume+0xca>
 800e0ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e0b2:	f003 0304 	and.w	r3, r3, #4
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e0ba:	230a      	movs	r3, #10
 800e0bc:	e1db      	b.n	800e476 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e0c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e0c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e0c6:	f7ff ff3f 	bl	800df48 <check_fs>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e0d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d149      	bne.n	800e16c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e0d8:	2300      	movs	r3, #0
 800e0da:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0dc:	e01e      	b.n	800e11c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e0e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0e6:	011b      	lsls	r3, r3, #4
 800e0e8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e0ec:	4413      	add	r3, r2
 800e0ee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f2:	3304      	adds	r3, #4
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d006      	beq.n	800e108 <find_volume+0x114>
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fc:	3308      	adds	r3, #8
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fe fd76 	bl	800cbf0 <ld_dword>
 800e104:	4602      	mov	r2, r0
 800e106:	e000      	b.n	800e10a <find_volume+0x116>
 800e108:	2200      	movs	r2, #0
 800e10a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	3358      	adds	r3, #88	@ 0x58
 800e110:	443b      	add	r3, r7
 800e112:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e118:	3301      	adds	r3, #1
 800e11a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e11c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e11e:	2b03      	cmp	r3, #3
 800e120:	d9dd      	bls.n	800e0de <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e122:	2300      	movs	r3, #0
 800e124:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d002      	beq.n	800e132 <find_volume+0x13e>
 800e12c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e12e:	3b01      	subs	r3, #1
 800e130:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	3358      	adds	r3, #88	@ 0x58
 800e138:	443b      	add	r3, r7
 800e13a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e13e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e142:	2b00      	cmp	r3, #0
 800e144:	d005      	beq.n	800e152 <find_volume+0x15e>
 800e146:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e148:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e14a:	f7ff fefd 	bl	800df48 <check_fs>
 800e14e:	4603      	mov	r3, r0
 800e150:	e000      	b.n	800e154 <find_volume+0x160>
 800e152:	2303      	movs	r3, #3
 800e154:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e158:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d905      	bls.n	800e16c <find_volume+0x178>
 800e160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e162:	3301      	adds	r3, #1
 800e164:	643b      	str	r3, [r7, #64]	@ 0x40
 800e166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e168:	2b03      	cmp	r3, #3
 800e16a:	d9e2      	bls.n	800e132 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e16c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e170:	2b04      	cmp	r3, #4
 800e172:	d101      	bne.n	800e178 <find_volume+0x184>
 800e174:	2301      	movs	r3, #1
 800e176:	e17e      	b.n	800e476 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e178:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d901      	bls.n	800e184 <find_volume+0x190>
 800e180:	230d      	movs	r3, #13
 800e182:	e178      	b.n	800e476 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e186:	3330      	adds	r3, #48	@ 0x30
 800e188:	330b      	adds	r3, #11
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fe fd18 	bl	800cbc0 <ld_word>
 800e190:	4603      	mov	r3, r0
 800e192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e196:	d001      	beq.n	800e19c <find_volume+0x1a8>
 800e198:	230d      	movs	r3, #13
 800e19a:	e16c      	b.n	800e476 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19e:	3330      	adds	r3, #48	@ 0x30
 800e1a0:	3316      	adds	r3, #22
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe fd0c 	bl	800cbc0 <ld_word>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e1ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <find_volume+0x1cc>
 800e1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b4:	3330      	adds	r3, #48	@ 0x30
 800e1b6:	3324      	adds	r3, #36	@ 0x24
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fe fd19 	bl	800cbf0 <ld_dword>
 800e1be:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e1c4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d2:	789b      	ldrb	r3, [r3, #2]
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d005      	beq.n	800e1e4 <find_volume+0x1f0>
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1da:	789b      	ldrb	r3, [r3, #2]
 800e1dc:	2b02      	cmp	r3, #2
 800e1de:	d001      	beq.n	800e1e4 <find_volume+0x1f0>
 800e1e0:	230d      	movs	r3, #13
 800e1e2:	e148      	b.n	800e476 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e6:	789b      	ldrb	r3, [r3, #2]
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1ec:	fb02 f303 	mul.w	r3, r2, r3
 800e1f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e200:	895b      	ldrh	r3, [r3, #10]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d008      	beq.n	800e218 <find_volume+0x224>
 800e206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e208:	895b      	ldrh	r3, [r3, #10]
 800e20a:	461a      	mov	r2, r3
 800e20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e20e:	895b      	ldrh	r3, [r3, #10]
 800e210:	3b01      	subs	r3, #1
 800e212:	4013      	ands	r3, r2
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <find_volume+0x228>
 800e218:	230d      	movs	r3, #13
 800e21a:	e12c      	b.n	800e476 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e21e:	3330      	adds	r3, #48	@ 0x30
 800e220:	3311      	adds	r3, #17
 800e222:	4618      	mov	r0, r3
 800e224:	f7fe fccc 	bl	800cbc0 <ld_word>
 800e228:	4603      	mov	r3, r0
 800e22a:	461a      	mov	r2, r3
 800e22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e22e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e232:	891b      	ldrh	r3, [r3, #8]
 800e234:	f003 030f 	and.w	r3, r3, #15
 800e238:	b29b      	uxth	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d001      	beq.n	800e242 <find_volume+0x24e>
 800e23e:	230d      	movs	r3, #13
 800e240:	e119      	b.n	800e476 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e244:	3330      	adds	r3, #48	@ 0x30
 800e246:	3313      	adds	r3, #19
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fe fcb9 	bl	800cbc0 <ld_word>
 800e24e:	4603      	mov	r3, r0
 800e250:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e254:	2b00      	cmp	r3, #0
 800e256:	d106      	bne.n	800e266 <find_volume+0x272>
 800e258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25a:	3330      	adds	r3, #48	@ 0x30
 800e25c:	3320      	adds	r3, #32
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fe fcc6 	bl	800cbf0 <ld_dword>
 800e264:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e268:	3330      	adds	r3, #48	@ 0x30
 800e26a:	330e      	adds	r3, #14
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7fe fca7 	bl	800cbc0 <ld_word>
 800e272:	4603      	mov	r3, r0
 800e274:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e276:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d101      	bne.n	800e280 <find_volume+0x28c>
 800e27c:	230d      	movs	r3, #13
 800e27e:	e0fa      	b.n	800e476 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e280:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e284:	4413      	add	r3, r2
 800e286:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e288:	8912      	ldrh	r2, [r2, #8]
 800e28a:	0912      	lsrs	r2, r2, #4
 800e28c:	b292      	uxth	r2, r2
 800e28e:	4413      	add	r3, r2
 800e290:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e296:	429a      	cmp	r2, r3
 800e298:	d204      	bcs.n	800e2a4 <find_volume+0x2b0>
 800e29a:	230d      	movs	r3, #13
 800e29c:	e0eb      	b.n	800e476 <find_volume+0x482>
 800e29e:	bf00      	nop
 800e2a0:	24000650 	.word	0x24000650
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e2a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2ac:	8952      	ldrh	r2, [r2, #10]
 800e2ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2b2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d101      	bne.n	800e2be <find_volume+0x2ca>
 800e2ba:	230d      	movs	r3, #13
 800e2bc:	e0db      	b.n	800e476 <find_volume+0x482>
		fmt = FS_FAT32;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d802      	bhi.n	800e2d4 <find_volume+0x2e0>
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d802      	bhi.n	800e2e4 <find_volume+0x2f0>
 800e2de:	2301      	movs	r3, #1
 800e2e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e6:	1c9a      	adds	r2, r3, #2
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ea:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e2f0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e2f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e2f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2f6:	441a      	add	r2, r3
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e2fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e300:	441a      	add	r2, r3
 800e302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e304:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e306:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d11e      	bne.n	800e34c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e310:	3330      	adds	r3, #48	@ 0x30
 800e312:	332a      	adds	r3, #42	@ 0x2a
 800e314:	4618      	mov	r0, r3
 800e316:	f7fe fc53 	bl	800cbc0 <ld_word>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d001      	beq.n	800e324 <find_volume+0x330>
 800e320:	230d      	movs	r3, #13
 800e322:	e0a8      	b.n	800e476 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e326:	891b      	ldrh	r3, [r3, #8]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d001      	beq.n	800e330 <find_volume+0x33c>
 800e32c:	230d      	movs	r3, #13
 800e32e:	e0a2      	b.n	800e476 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e332:	3330      	adds	r3, #48	@ 0x30
 800e334:	332c      	adds	r3, #44	@ 0x2c
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe fc5a 	bl	800cbf0 <ld_dword>
 800e33c:	4602      	mov	r2, r0
 800e33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e340:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	647b      	str	r3, [r7, #68]	@ 0x44
 800e34a:	e01f      	b.n	800e38c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34e:	891b      	ldrh	r3, [r3, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d101      	bne.n	800e358 <find_volume+0x364>
 800e354:	230d      	movs	r3, #13
 800e356:	e08e      	b.n	800e476 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e35a:	6a1a      	ldr	r2, [r3, #32]
 800e35c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e35e:	441a      	add	r2, r3
 800e360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e362:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e364:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d103      	bne.n	800e374 <find_volume+0x380>
 800e36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36e:	695b      	ldr	r3, [r3, #20]
 800e370:	005b      	lsls	r3, r3, #1
 800e372:	e00a      	b.n	800e38a <find_volume+0x396>
 800e374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e376:	695a      	ldr	r2, [r3, #20]
 800e378:	4613      	mov	r3, r2
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	4413      	add	r3, r2
 800e37e:	085a      	lsrs	r2, r3, #1
 800e380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	f003 0301 	and.w	r3, r3, #1
 800e388:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e38a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38e:	699a      	ldr	r2, [r3, #24]
 800e390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e392:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e396:	0a5b      	lsrs	r3, r3, #9
 800e398:	429a      	cmp	r2, r3
 800e39a:	d201      	bcs.n	800e3a0 <find_volume+0x3ac>
 800e39c:	230d      	movs	r3, #13
 800e39e:	e06a      	b.n	800e476 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3a6:	611a      	str	r2, [r3, #16]
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3aa:	691a      	ldr	r2, [r3, #16]
 800e3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ae:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b2:	2280      	movs	r2, #128	@ 0x80
 800e3b4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e3b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	d149      	bne.n	800e452 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c0:	3330      	adds	r3, #48	@ 0x30
 800e3c2:	3330      	adds	r3, #48	@ 0x30
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fe fbfb 	bl	800cbc0 <ld_word>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	d140      	bne.n	800e452 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e3d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e3d8:	f7fe fea2 	bl	800d120 <move_window>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d137      	bne.n	800e452 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ea:	3330      	adds	r3, #48	@ 0x30
 800e3ec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fe fbe5 	bl	800cbc0 <ld_word>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d127      	bne.n	800e452 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e404:	3330      	adds	r3, #48	@ 0x30
 800e406:	4618      	mov	r0, r3
 800e408:	f7fe fbf2 	bl	800cbf0 <ld_dword>
 800e40c:	4603      	mov	r3, r0
 800e40e:	4a1c      	ldr	r2, [pc, #112]	@ (800e480 <find_volume+0x48c>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d11e      	bne.n	800e452 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e416:	3330      	adds	r3, #48	@ 0x30
 800e418:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fe fbe7 	bl	800cbf0 <ld_dword>
 800e422:	4603      	mov	r3, r0
 800e424:	4a17      	ldr	r2, [pc, #92]	@ (800e484 <find_volume+0x490>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d113      	bne.n	800e452 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42c:	3330      	adds	r3, #48	@ 0x30
 800e42e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e432:	4618      	mov	r0, r3
 800e434:	f7fe fbdc 	bl	800cbf0 <ld_dword>
 800e438:	4602      	mov	r2, r0
 800e43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e440:	3330      	adds	r3, #48	@ 0x30
 800e442:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe fbd2 	bl	800cbf0 <ld_dword>
 800e44c:	4602      	mov	r2, r0
 800e44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e450:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e454:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e458:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e45a:	4b0b      	ldr	r3, [pc, #44]	@ (800e488 <find_volume+0x494>)
 800e45c:	881b      	ldrh	r3, [r3, #0]
 800e45e:	3301      	adds	r3, #1
 800e460:	b29a      	uxth	r2, r3
 800e462:	4b09      	ldr	r3, [pc, #36]	@ (800e488 <find_volume+0x494>)
 800e464:	801a      	strh	r2, [r3, #0]
 800e466:	4b08      	ldr	r3, [pc, #32]	@ (800e488 <find_volume+0x494>)
 800e468:	881a      	ldrh	r2, [r3, #0]
 800e46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e46e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e470:	f7fe fdee 	bl	800d050 <clear_lock>
#endif
	return FR_OK;
 800e474:	2300      	movs	r3, #0
}
 800e476:	4618      	mov	r0, r3
 800e478:	3758      	adds	r7, #88	@ 0x58
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	41615252 	.word	0x41615252
 800e484:	61417272 	.word	0x61417272
 800e488:	24000654 	.word	0x24000654

0800e48c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e496:	2309      	movs	r3, #9
 800e498:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d01c      	beq.n	800e4da <validate+0x4e>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d018      	beq.n	800e4da <validate+0x4e>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d013      	beq.n	800e4da <validate+0x4e>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	889a      	ldrh	r2, [r3, #4]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	88db      	ldrh	r3, [r3, #6]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d10c      	bne.n	800e4da <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	785b      	ldrb	r3, [r3, #1]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fe fada 	bl	800ca80 <disk_status>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	f003 0301 	and.w	r3, r3, #1
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d101      	bne.n	800e4da <validate+0x4e>
			res = FR_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e4da:	7bfb      	ldrb	r3, [r7, #15]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d102      	bne.n	800e4e6 <validate+0x5a>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	e000      	b.n	800e4e8 <validate+0x5c>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	683a      	ldr	r2, [r7, #0]
 800e4ea:	6013      	str	r3, [r2, #0]
	return res;
 800e4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
	...

0800e4f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b088      	sub	sp, #32
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	4613      	mov	r3, r2
 800e504:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e50a:	f107 0310 	add.w	r3, r7, #16
 800e50e:	4618      	mov	r0, r3
 800e510:	f7ff fcd5 	bl	800debe <get_ldnumber>
 800e514:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	da01      	bge.n	800e520 <f_mount+0x28>
 800e51c:	230b      	movs	r3, #11
 800e51e:	e02b      	b.n	800e578 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e520:	4a17      	ldr	r2, [pc, #92]	@ (800e580 <f_mount+0x88>)
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e528:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e52a:	69bb      	ldr	r3, [r7, #24]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d005      	beq.n	800e53c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e530:	69b8      	ldr	r0, [r7, #24]
 800e532:	f7fe fd8d 	bl	800d050 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	2200      	movs	r2, #0
 800e53a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d002      	beq.n	800e548 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	490d      	ldr	r1, [pc, #52]	@ (800e580 <f_mount+0x88>)
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d002      	beq.n	800e55e <f_mount+0x66>
 800e558:	79fb      	ldrb	r3, [r7, #7]
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d001      	beq.n	800e562 <f_mount+0x6a>
 800e55e:	2300      	movs	r3, #0
 800e560:	e00a      	b.n	800e578 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e562:	f107 010c 	add.w	r1, r7, #12
 800e566:	f107 0308 	add.w	r3, r7, #8
 800e56a:	2200      	movs	r2, #0
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7ff fd41 	bl	800dff4 <find_volume>
 800e572:	4603      	mov	r3, r0
 800e574:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e576:	7dfb      	ldrb	r3, [r7, #23]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3720      	adds	r7, #32
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	24000650 	.word	0x24000650

0800e584 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b098      	sub	sp, #96	@ 0x60
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	4613      	mov	r3, r2
 800e590:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d101      	bne.n	800e59c <f_open+0x18>
 800e598:	2309      	movs	r3, #9
 800e59a:	e1a9      	b.n	800e8f0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e59c:	79fb      	ldrb	r3, [r7, #7]
 800e59e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e5a2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e5a4:	79fa      	ldrb	r2, [r7, #7]
 800e5a6:	f107 0110 	add.w	r1, r7, #16
 800e5aa:	f107 0308 	add.w	r3, r7, #8
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7ff fd20 	bl	800dff4 <find_volume>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e5ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	f040 818d 	bne.w	800e8de <f_open+0x35a>
		dj.obj.fs = fs;
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e5c8:	68ba      	ldr	r2, [r7, #8]
 800e5ca:	f107 0314 	add.w	r3, r7, #20
 800e5ce:	4611      	mov	r1, r2
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7ff fc03 	bl	800dddc <follow_path>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e5dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d118      	bne.n	800e616 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e5e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e5e8:	b25b      	sxtb	r3, r3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	da03      	bge.n	800e5f6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e5ee:	2306      	movs	r3, #6
 800e5f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e5f4:	e00f      	b.n	800e616 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e5f6:	79fb      	ldrb	r3, [r7, #7]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	bf8c      	ite	hi
 800e5fc:	2301      	movhi	r3, #1
 800e5fe:	2300      	movls	r3, #0
 800e600:	b2db      	uxtb	r3, r3
 800e602:	461a      	mov	r2, r3
 800e604:	f107 0314 	add.w	r3, r7, #20
 800e608:	4611      	mov	r1, r2
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fbd8 	bl	800cdc0 <chk_lock>
 800e610:	4603      	mov	r3, r0
 800e612:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e616:	79fb      	ldrb	r3, [r7, #7]
 800e618:	f003 031c 	and.w	r3, r3, #28
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d07f      	beq.n	800e720 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e620:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e624:	2b00      	cmp	r3, #0
 800e626:	d017      	beq.n	800e658 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e628:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e62c:	2b04      	cmp	r3, #4
 800e62e:	d10e      	bne.n	800e64e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e630:	f7fe fc22 	bl	800ce78 <enq_lock>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d006      	beq.n	800e648 <f_open+0xc4>
 800e63a:	f107 0314 	add.w	r3, r7, #20
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff fb06 	bl	800dc50 <dir_register>
 800e644:	4603      	mov	r3, r0
 800e646:	e000      	b.n	800e64a <f_open+0xc6>
 800e648:	2312      	movs	r3, #18
 800e64a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e64e:	79fb      	ldrb	r3, [r7, #7]
 800e650:	f043 0308 	orr.w	r3, r3, #8
 800e654:	71fb      	strb	r3, [r7, #7]
 800e656:	e010      	b.n	800e67a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e658:	7ebb      	ldrb	r3, [r7, #26]
 800e65a:	f003 0311 	and.w	r3, r3, #17
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d003      	beq.n	800e66a <f_open+0xe6>
					res = FR_DENIED;
 800e662:	2307      	movs	r3, #7
 800e664:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e668:	e007      	b.n	800e67a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e66a:	79fb      	ldrb	r3, [r7, #7]
 800e66c:	f003 0304 	and.w	r3, r3, #4
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <f_open+0xf6>
 800e674:	2308      	movs	r3, #8
 800e676:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e67a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d168      	bne.n	800e754 <f_open+0x1d0>
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	f003 0308 	and.w	r3, r3, #8
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d063      	beq.n	800e754 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e68c:	f7fd fca0 	bl	800bfd0 <get_fattime>
 800e690:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e694:	330e      	adds	r3, #14
 800e696:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fe fae7 	bl	800cc6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6a0:	3316      	adds	r3, #22
 800e6a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fe fae1 	bl	800cc6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6ac:	330b      	adds	r3, #11
 800e6ae:	2220      	movs	r2, #32
 800e6b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff fa35 	bl	800db28 <ld_clust>
 800e6be:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7ff fa4d 	bl	800db66 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6ce:	331c      	adds	r3, #28
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe faca 	bl	800cc6c <st_dword>
					fs->wflag = 1;
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e6de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d037      	beq.n	800e754 <f_open+0x1d0>
						dw = fs->winsect;
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e6ea:	f107 0314 	add.w	r3, r7, #20
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe ff60 	bl	800d5b8 <remove_chain>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e6fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e702:	2b00      	cmp	r3, #0
 800e704:	d126      	bne.n	800e754 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fe fd08 	bl	800d120 <move_window>
 800e710:	4603      	mov	r3, r0
 800e712:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e71a:	3a01      	subs	r2, #1
 800e71c:	60da      	str	r2, [r3, #12]
 800e71e:	e019      	b.n	800e754 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e720:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e724:	2b00      	cmp	r3, #0
 800e726:	d115      	bne.n	800e754 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e728:	7ebb      	ldrb	r3, [r7, #26]
 800e72a:	f003 0310 	and.w	r3, r3, #16
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d003      	beq.n	800e73a <f_open+0x1b6>
					res = FR_NO_FILE;
 800e732:	2304      	movs	r3, #4
 800e734:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e738:	e00c      	b.n	800e754 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	f003 0302 	and.w	r3, r3, #2
 800e740:	2b00      	cmp	r3, #0
 800e742:	d007      	beq.n	800e754 <f_open+0x1d0>
 800e744:	7ebb      	ldrb	r3, [r7, #26]
 800e746:	f003 0301 	and.w	r3, r3, #1
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d002      	beq.n	800e754 <f_open+0x1d0>
						res = FR_DENIED;
 800e74e:	2307      	movs	r3, #7
 800e750:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e754:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d126      	bne.n	800e7aa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e75c:	79fb      	ldrb	r3, [r7, #7]
 800e75e:	f003 0308 	and.w	r3, r3, #8
 800e762:	2b00      	cmp	r3, #0
 800e764:	d003      	beq.n	800e76e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e766:	79fb      	ldrb	r3, [r7, #7]
 800e768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e76c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e776:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	2b01      	cmp	r3, #1
 800e780:	bf8c      	ite	hi
 800e782:	2301      	movhi	r3, #1
 800e784:	2300      	movls	r3, #0
 800e786:	b2db      	uxtb	r3, r3
 800e788:	461a      	mov	r2, r3
 800e78a:	f107 0314 	add.w	r3, r7, #20
 800e78e:	4611      	mov	r1, r2
 800e790:	4618      	mov	r0, r3
 800e792:	f7fe fb93 	bl	800cebc <inc_lock>
 800e796:	4602      	mov	r2, r0
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	691b      	ldr	r3, [r3, #16]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d102      	bne.n	800e7aa <f_open+0x226>
 800e7a4:	2302      	movs	r3, #2
 800e7a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e7aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f040 8095 	bne.w	800e8de <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7ff f9b4 	bl	800db28 <ld_clust>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e7c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7c8:	331c      	adds	r3, #28
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe fa10 	bl	800cbf0 <ld_dword>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e7dc:	693a      	ldr	r2, [r7, #16]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	88da      	ldrh	r2, [r3, #6]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	79fa      	ldrb	r2, [r7, #7]
 800e7ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	3330      	adds	r3, #48	@ 0x30
 800e806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e80a:	2100      	movs	r1, #0
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fe fa7a 	bl	800cd06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e812:	79fb      	ldrb	r3, [r7, #7]
 800e814:	f003 0320 	and.w	r3, r3, #32
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d060      	beq.n	800e8de <f_open+0x35a>
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d05c      	beq.n	800e8de <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	68da      	ldr	r2, [r3, #12]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	895b      	ldrh	r3, [r3, #10]
 800e830:	025b      	lsls	r3, r3, #9
 800e832:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e840:	e016      	b.n	800e870 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe fd25 	bl	800d296 <get_fat>
 800e84c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e84e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e850:	2b01      	cmp	r3, #1
 800e852:	d802      	bhi.n	800e85a <f_open+0x2d6>
 800e854:	2302      	movs	r3, #2
 800e856:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e85a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e860:	d102      	bne.n	800e868 <f_open+0x2e4>
 800e862:	2301      	movs	r3, #1
 800e864:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e868:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e86a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e870:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e874:	2b00      	cmp	r3, #0
 800e876:	d103      	bne.n	800e880 <f_open+0x2fc>
 800e878:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e87a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d8e0      	bhi.n	800e842 <f_open+0x2be>
				}
				fp->clust = clst;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e884:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e886:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d127      	bne.n	800e8de <f_open+0x35a>
 800e88e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e894:	2b00      	cmp	r3, #0
 800e896:	d022      	beq.n	800e8de <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7fe fcdb 	bl	800d258 <clust2sect>
 800e8a2:	6478      	str	r0, [r7, #68]	@ 0x44
 800e8a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d103      	bne.n	800e8b2 <f_open+0x32e>
						res = FR_INT_ERR;
 800e8aa:	2302      	movs	r3, #2
 800e8ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e8b0:	e015      	b.n	800e8de <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8b4:	0a5a      	lsrs	r2, r3, #9
 800e8b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8b8:	441a      	add	r2, r3
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	7858      	ldrb	r0, [r3, #1]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6a1a      	ldr	r2, [r3, #32]
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	f7fe f919 	bl	800cb04 <disk_read>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d002      	beq.n	800e8de <f_open+0x35a>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e8de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d002      	beq.n	800e8ec <f_open+0x368>
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e8ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3760      	adds	r7, #96	@ 0x60
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b08e      	sub	sp, #56	@ 0x38
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
 800e904:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	2200      	movs	r2, #0
 800e90e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f107 0214 	add.w	r2, r7, #20
 800e916:	4611      	mov	r1, r2
 800e918:	4618      	mov	r0, r3
 800e91a:	f7ff fdb7 	bl	800e48c <validate>
 800e91e:	4603      	mov	r3, r0
 800e920:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e924:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d107      	bne.n	800e93c <f_read+0x44>
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	7d5b      	ldrb	r3, [r3, #21]
 800e930:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e934:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d002      	beq.n	800e942 <f_read+0x4a>
 800e93c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e940:	e115      	b.n	800eb6e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	7d1b      	ldrb	r3, [r3, #20]
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d101      	bne.n	800e952 <f_read+0x5a>
 800e94e:	2307      	movs	r3, #7
 800e950:	e10d      	b.n	800eb6e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	68da      	ldr	r2, [r3, #12]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	699b      	ldr	r3, [r3, #24]
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	6a3b      	ldr	r3, [r7, #32]
 800e962:	429a      	cmp	r2, r3
 800e964:	f240 80fe 	bls.w	800eb64 <f_read+0x26c>
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e96c:	e0fa      	b.n	800eb64 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	699b      	ldr	r3, [r3, #24]
 800e972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e976:	2b00      	cmp	r3, #0
 800e978:	f040 80c6 	bne.w	800eb08 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	699b      	ldr	r3, [r3, #24]
 800e980:	0a5b      	lsrs	r3, r3, #9
 800e982:	697a      	ldr	r2, [r7, #20]
 800e984:	8952      	ldrh	r2, [r2, #10]
 800e986:	3a01      	subs	r2, #1
 800e988:	4013      	ands	r3, r2
 800e98a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d12f      	bne.n	800e9f2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d103      	bne.n	800e9a2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	689b      	ldr	r3, [r3, #8]
 800e99e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9a0:	e013      	b.n	800e9ca <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d007      	beq.n	800e9ba <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	699b      	ldr	r3, [r3, #24]
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	f7fe fefe 	bl	800d7b2 <clmt_clust>
 800e9b6:	6338      	str	r0, [r7, #48]	@ 0x30
 800e9b8:	e007      	b.n	800e9ca <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	69db      	ldr	r3, [r3, #28]
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	4610      	mov	r0, r2
 800e9c4:	f7fe fc67 	bl	800d296 <get_fat>
 800e9c8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d804      	bhi.n	800e9da <f_read+0xe2>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2202      	movs	r2, #2
 800e9d4:	755a      	strb	r2, [r3, #21]
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	e0c9      	b.n	800eb6e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e0:	d104      	bne.n	800e9ec <f_read+0xf4>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	755a      	strb	r2, [r3, #21]
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	e0c0      	b.n	800eb6e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9f0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e9f2:	697a      	ldr	r2, [r7, #20]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	69db      	ldr	r3, [r3, #28]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4610      	mov	r0, r2
 800e9fc:	f7fe fc2c 	bl	800d258 <clust2sect>
 800ea00:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d104      	bne.n	800ea12 <f_read+0x11a>
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	755a      	strb	r2, [r3, #21]
 800ea0e:	2302      	movs	r3, #2
 800ea10:	e0ad      	b.n	800eb6e <f_read+0x276>
			sect += csect;
 800ea12:	69ba      	ldr	r2, [r7, #24]
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	4413      	add	r3, r2
 800ea18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	0a5b      	lsrs	r3, r3, #9
 800ea1e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ea20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d039      	beq.n	800ea9a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ea26:	69fa      	ldr	r2, [r7, #28]
 800ea28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea2a:	4413      	add	r3, r2
 800ea2c:	697a      	ldr	r2, [r7, #20]
 800ea2e:	8952      	ldrh	r2, [r2, #10]
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d905      	bls.n	800ea40 <f_read+0x148>
					cc = fs->csize - csect;
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	895b      	ldrh	r3, [r3, #10]
 800ea38:	461a      	mov	r2, r3
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	7858      	ldrb	r0, [r3, #1]
 800ea44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea46:	69ba      	ldr	r2, [r7, #24]
 800ea48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea4a:	f7fe f85b 	bl	800cb04 <disk_read>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d004      	beq.n	800ea5e <f_read+0x166>
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2201      	movs	r2, #1
 800ea58:	755a      	strb	r2, [r3, #21]
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e087      	b.n	800eb6e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	7d1b      	ldrb	r3, [r3, #20]
 800ea62:	b25b      	sxtb	r3, r3
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	da14      	bge.n	800ea92 <f_read+0x19a>
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6a1a      	ldr	r2, [r3, #32]
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d90d      	bls.n	800ea92 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6a1a      	ldr	r2, [r3, #32]
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	025b      	lsls	r3, r3, #9
 800ea80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea82:	18d0      	adds	r0, r2, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	3330      	adds	r3, #48	@ 0x30
 800ea88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	f7fe f919 	bl	800ccc4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ea92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea94:	025b      	lsls	r3, r3, #9
 800ea96:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ea98:	e050      	b.n	800eb3c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6a1b      	ldr	r3, [r3, #32]
 800ea9e:	69ba      	ldr	r2, [r7, #24]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d02e      	beq.n	800eb02 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	7d1b      	ldrb	r3, [r3, #20]
 800eaa8:	b25b      	sxtb	r3, r3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	da18      	bge.n	800eae0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	7858      	ldrb	r0, [r3, #1]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6a1a      	ldr	r2, [r3, #32]
 800eabc:	2301      	movs	r3, #1
 800eabe:	f7fe f841 	bl	800cb44 <disk_write>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d004      	beq.n	800ead2 <f_read+0x1da>
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2201      	movs	r2, #1
 800eacc:	755a      	strb	r2, [r3, #21]
 800eace:	2301      	movs	r3, #1
 800ead0:	e04d      	b.n	800eb6e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	7d1b      	ldrb	r3, [r3, #20]
 800ead6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eada:	b2da      	uxtb	r2, r3
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	7858      	ldrb	r0, [r3, #1]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eaea:	2301      	movs	r3, #1
 800eaec:	69ba      	ldr	r2, [r7, #24]
 800eaee:	f7fe f809 	bl	800cb04 <disk_read>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d004      	beq.n	800eb02 <f_read+0x20a>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2201      	movs	r2, #1
 800eafc:	755a      	strb	r2, [r3, #21]
 800eafe:	2301      	movs	r3, #1
 800eb00:	e035      	b.n	800eb6e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	69ba      	ldr	r2, [r7, #24]
 800eb06:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	699b      	ldr	r3, [r3, #24]
 800eb0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb10:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800eb14:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eb16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d901      	bls.n	800eb22 <f_read+0x22a>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	699b      	ldr	r3, [r3, #24]
 800eb2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb30:	4413      	add	r3, r2
 800eb32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb34:	4619      	mov	r1, r3
 800eb36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb38:	f7fe f8c4 	bl	800ccc4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eb3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb40:	4413      	add	r3, r2
 800eb42:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	699a      	ldr	r2, [r3, #24]
 800eb48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb4a:	441a      	add	r2, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	619a      	str	r2, [r3, #24]
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb56:	441a      	add	r2, r3
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	601a      	str	r2, [r3, #0]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f47f af01 	bne.w	800e96e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eb6c:	2300      	movs	r3, #0
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3738      	adds	r7, #56	@ 0x38
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b086      	sub	sp, #24
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f107 0208 	add.w	r2, r7, #8
 800eb84:	4611      	mov	r1, r2
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7ff fc80 	bl	800e48c <validate>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb90:	7dfb      	ldrb	r3, [r7, #23]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d168      	bne.n	800ec68 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	7d1b      	ldrb	r3, [r3, #20]
 800eb9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d062      	beq.n	800ec68 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	7d1b      	ldrb	r3, [r3, #20]
 800eba6:	b25b      	sxtb	r3, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	da15      	bge.n	800ebd8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	7858      	ldrb	r0, [r3, #1]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6a1a      	ldr	r2, [r3, #32]
 800ebba:	2301      	movs	r3, #1
 800ebbc:	f7fd ffc2 	bl	800cb44 <disk_write>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d001      	beq.n	800ebca <f_sync+0x54>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e04f      	b.n	800ec6a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	7d1b      	ldrb	r3, [r3, #20]
 800ebce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ebd8:	f7fd f9fa 	bl	800bfd0 <get_fattime>
 800ebdc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	4610      	mov	r0, r2
 800ebe8:	f7fe fa9a 	bl	800d120 <move_window>
 800ebec:	4603      	mov	r3, r0
 800ebee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d138      	bne.n	800ec68 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebfa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	330b      	adds	r3, #11
 800ec00:	781a      	ldrb	r2, [r3, #0]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	330b      	adds	r3, #11
 800ec06:	f042 0220 	orr.w	r2, r2, #32
 800ec0a:	b2d2      	uxtb	r2, r2
 800ec0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6818      	ldr	r0, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	461a      	mov	r2, r3
 800ec18:	68f9      	ldr	r1, [r7, #12]
 800ec1a:	f7fe ffa4 	bl	800db66 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f103 021c 	add.w	r2, r3, #28
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	4619      	mov	r1, r3
 800ec2a:	4610      	mov	r0, r2
 800ec2c:	f7fe f81e 	bl	800cc6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	3316      	adds	r3, #22
 800ec34:	6939      	ldr	r1, [r7, #16]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fe f818 	bl	800cc6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	3312      	adds	r3, #18
 800ec40:	2100      	movs	r1, #0
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fd fff7 	bl	800cc36 <st_word>
					fs->wflag = 1;
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7fe fa93 	bl	800d17c <sync_fs>
 800ec56:	4603      	mov	r3, r0
 800ec58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	7d1b      	ldrb	r3, [r3, #20]
 800ec5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec62:	b2da      	uxtb	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ec68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b084      	sub	sp, #16
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f7ff ff7b 	bl	800eb76 <f_sync>
 800ec80:	4603      	mov	r3, r0
 800ec82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec84:	7bfb      	ldrb	r3, [r7, #15]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d118      	bne.n	800ecbc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f107 0208 	add.w	r2, r7, #8
 800ec90:	4611      	mov	r1, r2
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7ff fbfa 	bl	800e48c <validate>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec9c:	7bfb      	ldrb	r3, [r7, #15]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d10c      	bne.n	800ecbc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fe f996 	bl	800cfd8 <dec_lock>
 800ecac:	4603      	mov	r3, r0
 800ecae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d102      	bne.n	800ecbc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ecbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b088      	sub	sp, #32
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	60f8      	str	r0, [r7, #12]
 800ecce:	60b9      	str	r1, [r7, #8]
 800ecd0:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ecda:	e01c      	b.n	800ed16 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ecdc:	f107 0310 	add.w	r3, r7, #16
 800ece0:	f107 0114 	add.w	r1, r7, #20
 800ece4:	2201      	movs	r2, #1
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7ff fe06 	bl	800e8f8 <f_read>
		if (rc != 1) break;
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d117      	bne.n	800ed22 <f_gets+0x5c>
		c = s[0];
 800ecf2:	7d3b      	ldrb	r3, [r7, #20]
 800ecf4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ecf6:	7dfb      	ldrb	r3, [r7, #23]
 800ecf8:	2b0d      	cmp	r3, #13
 800ecfa:	d00b      	beq.n	800ed14 <f_gets+0x4e>
		*p++ = c;
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	1c5a      	adds	r2, r3, #1
 800ed00:	61ba      	str	r2, [r7, #24]
 800ed02:	7dfa      	ldrb	r2, [r7, #23]
 800ed04:	701a      	strb	r2, [r3, #0]
		n++;
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ed0c:	7dfb      	ldrb	r3, [r7, #23]
 800ed0e:	2b0a      	cmp	r3, #10
 800ed10:	d009      	beq.n	800ed26 <f_gets+0x60>
 800ed12:	e000      	b.n	800ed16 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ed14:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	69fa      	ldr	r2, [r7, #28]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	dbdd      	blt.n	800ecdc <f_gets+0x16>
 800ed20:	e002      	b.n	800ed28 <f_gets+0x62>
		if (rc != 1) break;
 800ed22:	bf00      	nop
 800ed24:	e000      	b.n	800ed28 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800ed26:	bf00      	nop
	}
	*p = 0;
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <f_gets+0x72>
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	e000      	b.n	800ed3a <f_gets+0x74>
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3720      	adds	r7, #32
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
	...

0800ed44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b087      	sub	sp, #28
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	4613      	mov	r3, r2
 800ed50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ed52:	2301      	movs	r3, #1
 800ed54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ed56:	2300      	movs	r3, #0
 800ed58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ed5a:	4b1f      	ldr	r3, [pc, #124]	@ (800edd8 <FATFS_LinkDriverEx+0x94>)
 800ed5c:	7a5b      	ldrb	r3, [r3, #9]
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d131      	bne.n	800edc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ed64:	4b1c      	ldr	r3, [pc, #112]	@ (800edd8 <FATFS_LinkDriverEx+0x94>)
 800ed66:	7a5b      	ldrb	r3, [r3, #9]
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	4b1a      	ldr	r3, [pc, #104]	@ (800edd8 <FATFS_LinkDriverEx+0x94>)
 800ed6e:	2100      	movs	r1, #0
 800ed70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed72:	4b19      	ldr	r3, [pc, #100]	@ (800edd8 <FATFS_LinkDriverEx+0x94>)
 800ed74:	7a5b      	ldrb	r3, [r3, #9]
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	4a17      	ldr	r2, [pc, #92]	@ (800edd8 <FATFS_LinkDriverEx+0x94>)
 800ed7a:	009b      	lsls	r3, r3, #2
 800ed7c:	4413      	add	r3, r2
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed82:	4b15      	ldr	r3, [pc, #84]	@ (800edd8 <FATFS_LinkDriverEx+0x94>)
 800ed84:	7a5b      	ldrb	r3, [r3, #9]
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	461a      	mov	r2, r3
 800ed8a:	4b13      	ldr	r3, [pc, #76]	@ (800edd8 <FATFS_LinkDriverEx+0x94>)
 800ed8c:	4413      	add	r3, r2
 800ed8e:	79fa      	ldrb	r2, [r7, #7]
 800ed90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ed92:	4b11      	ldr	r3, [pc, #68]	@ (800edd8 <FATFS_LinkDriverEx+0x94>)
 800ed94:	7a5b      	ldrb	r3, [r3, #9]
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	1c5a      	adds	r2, r3, #1
 800ed9a:	b2d1      	uxtb	r1, r2
 800ed9c:	4a0e      	ldr	r2, [pc, #56]	@ (800edd8 <FATFS_LinkDriverEx+0x94>)
 800ed9e:	7251      	strb	r1, [r2, #9]
 800eda0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eda2:	7dbb      	ldrb	r3, [r7, #22]
 800eda4:	3330      	adds	r3, #48	@ 0x30
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	3301      	adds	r3, #1
 800edb0:	223a      	movs	r2, #58	@ 0x3a
 800edb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	3302      	adds	r3, #2
 800edb8:	222f      	movs	r2, #47	@ 0x2f
 800edba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	3303      	adds	r3, #3
 800edc0:	2200      	movs	r2, #0
 800edc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800edc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	371c      	adds	r7, #28
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop
 800edd8:	24000678 	.word	0x24000678

0800eddc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ede6:	2200      	movs	r2, #0
 800ede8:	6839      	ldr	r1, [r7, #0]
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7ff ffaa 	bl	800ed44 <FATFS_LinkDriverEx>
 800edf0:	4603      	mov	r3, r0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
	...

0800edfc <srand>:
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4b10      	ldr	r3, [pc, #64]	@ (800ee40 <srand+0x44>)
 800ee00:	681d      	ldr	r5, [r3, #0]
 800ee02:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ee04:	4604      	mov	r4, r0
 800ee06:	b9b3      	cbnz	r3, 800ee36 <srand+0x3a>
 800ee08:	2018      	movs	r0, #24
 800ee0a:	f000 faa9 	bl	800f360 <malloc>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	6328      	str	r0, [r5, #48]	@ 0x30
 800ee12:	b920      	cbnz	r0, 800ee1e <srand+0x22>
 800ee14:	4b0b      	ldr	r3, [pc, #44]	@ (800ee44 <srand+0x48>)
 800ee16:	480c      	ldr	r0, [pc, #48]	@ (800ee48 <srand+0x4c>)
 800ee18:	2146      	movs	r1, #70	@ 0x46
 800ee1a:	f000 fa39 	bl	800f290 <__assert_func>
 800ee1e:	490b      	ldr	r1, [pc, #44]	@ (800ee4c <srand+0x50>)
 800ee20:	4b0b      	ldr	r3, [pc, #44]	@ (800ee50 <srand+0x54>)
 800ee22:	e9c0 1300 	strd	r1, r3, [r0]
 800ee26:	4b0b      	ldr	r3, [pc, #44]	@ (800ee54 <srand+0x58>)
 800ee28:	6083      	str	r3, [r0, #8]
 800ee2a:	230b      	movs	r3, #11
 800ee2c:	8183      	strh	r3, [r0, #12]
 800ee2e:	2100      	movs	r1, #0
 800ee30:	2001      	movs	r0, #1
 800ee32:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ee36:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ee38:	2200      	movs	r2, #0
 800ee3a:	611c      	str	r4, [r3, #16]
 800ee3c:	615a      	str	r2, [r3, #20]
 800ee3e:	bd38      	pop	{r3, r4, r5, pc}
 800ee40:	24000034 	.word	0x24000034
 800ee44:	08011088 	.word	0x08011088
 800ee48:	0801109f 	.word	0x0801109f
 800ee4c:	abcd330e 	.word	0xabcd330e
 800ee50:	e66d1234 	.word	0xe66d1234
 800ee54:	0005deec 	.word	0x0005deec

0800ee58 <rand>:
 800ee58:	4b16      	ldr	r3, [pc, #88]	@ (800eeb4 <rand+0x5c>)
 800ee5a:	b510      	push	{r4, lr}
 800ee5c:	681c      	ldr	r4, [r3, #0]
 800ee5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ee60:	b9b3      	cbnz	r3, 800ee90 <rand+0x38>
 800ee62:	2018      	movs	r0, #24
 800ee64:	f000 fa7c 	bl	800f360 <malloc>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	6320      	str	r0, [r4, #48]	@ 0x30
 800ee6c:	b920      	cbnz	r0, 800ee78 <rand+0x20>
 800ee6e:	4b12      	ldr	r3, [pc, #72]	@ (800eeb8 <rand+0x60>)
 800ee70:	4812      	ldr	r0, [pc, #72]	@ (800eebc <rand+0x64>)
 800ee72:	2152      	movs	r1, #82	@ 0x52
 800ee74:	f000 fa0c 	bl	800f290 <__assert_func>
 800ee78:	4911      	ldr	r1, [pc, #68]	@ (800eec0 <rand+0x68>)
 800ee7a:	4b12      	ldr	r3, [pc, #72]	@ (800eec4 <rand+0x6c>)
 800ee7c:	e9c0 1300 	strd	r1, r3, [r0]
 800ee80:	4b11      	ldr	r3, [pc, #68]	@ (800eec8 <rand+0x70>)
 800ee82:	6083      	str	r3, [r0, #8]
 800ee84:	230b      	movs	r3, #11
 800ee86:	8183      	strh	r3, [r0, #12]
 800ee88:	2100      	movs	r1, #0
 800ee8a:	2001      	movs	r0, #1
 800ee8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ee90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ee92:	480e      	ldr	r0, [pc, #56]	@ (800eecc <rand+0x74>)
 800ee94:	690b      	ldr	r3, [r1, #16]
 800ee96:	694c      	ldr	r4, [r1, #20]
 800ee98:	4a0d      	ldr	r2, [pc, #52]	@ (800eed0 <rand+0x78>)
 800ee9a:	4358      	muls	r0, r3
 800ee9c:	fb02 0004 	mla	r0, r2, r4, r0
 800eea0:	fba3 3202 	umull	r3, r2, r3, r2
 800eea4:	3301      	adds	r3, #1
 800eea6:	eb40 0002 	adc.w	r0, r0, r2
 800eeaa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800eeae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800eeb2:	bd10      	pop	{r4, pc}
 800eeb4:	24000034 	.word	0x24000034
 800eeb8:	08011088 	.word	0x08011088
 800eebc:	0801109f 	.word	0x0801109f
 800eec0:	abcd330e 	.word	0xabcd330e
 800eec4:	e66d1234 	.word	0xe66d1234
 800eec8:	0005deec 	.word	0x0005deec
 800eecc:	5851f42d 	.word	0x5851f42d
 800eed0:	4c957f2d 	.word	0x4c957f2d

0800eed4 <std>:
 800eed4:	2300      	movs	r3, #0
 800eed6:	b510      	push	{r4, lr}
 800eed8:	4604      	mov	r4, r0
 800eeda:	e9c0 3300 	strd	r3, r3, [r0]
 800eede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eee2:	6083      	str	r3, [r0, #8]
 800eee4:	8181      	strh	r1, [r0, #12]
 800eee6:	6643      	str	r3, [r0, #100]	@ 0x64
 800eee8:	81c2      	strh	r2, [r0, #14]
 800eeea:	6183      	str	r3, [r0, #24]
 800eeec:	4619      	mov	r1, r3
 800eeee:	2208      	movs	r2, #8
 800eef0:	305c      	adds	r0, #92	@ 0x5c
 800eef2:	f000 f948 	bl	800f186 <memset>
 800eef6:	4b0d      	ldr	r3, [pc, #52]	@ (800ef2c <std+0x58>)
 800eef8:	6263      	str	r3, [r4, #36]	@ 0x24
 800eefa:	4b0d      	ldr	r3, [pc, #52]	@ (800ef30 <std+0x5c>)
 800eefc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eefe:	4b0d      	ldr	r3, [pc, #52]	@ (800ef34 <std+0x60>)
 800ef00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ef02:	4b0d      	ldr	r3, [pc, #52]	@ (800ef38 <std+0x64>)
 800ef04:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef06:	4b0d      	ldr	r3, [pc, #52]	@ (800ef3c <std+0x68>)
 800ef08:	6224      	str	r4, [r4, #32]
 800ef0a:	429c      	cmp	r4, r3
 800ef0c:	d006      	beq.n	800ef1c <std+0x48>
 800ef0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ef12:	4294      	cmp	r4, r2
 800ef14:	d002      	beq.n	800ef1c <std+0x48>
 800ef16:	33d0      	adds	r3, #208	@ 0xd0
 800ef18:	429c      	cmp	r4, r3
 800ef1a:	d105      	bne.n	800ef28 <std+0x54>
 800ef1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ef20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef24:	f000 b9a8 	b.w	800f278 <__retarget_lock_init_recursive>
 800ef28:	bd10      	pop	{r4, pc}
 800ef2a:	bf00      	nop
 800ef2c:	0800f101 	.word	0x0800f101
 800ef30:	0800f123 	.word	0x0800f123
 800ef34:	0800f15b 	.word	0x0800f15b
 800ef38:	0800f17f 	.word	0x0800f17f
 800ef3c:	24000684 	.word	0x24000684

0800ef40 <stdio_exit_handler>:
 800ef40:	4a02      	ldr	r2, [pc, #8]	@ (800ef4c <stdio_exit_handler+0xc>)
 800ef42:	4903      	ldr	r1, [pc, #12]	@ (800ef50 <stdio_exit_handler+0x10>)
 800ef44:	4803      	ldr	r0, [pc, #12]	@ (800ef54 <stdio_exit_handler+0x14>)
 800ef46:	f000 b869 	b.w	800f01c <_fwalk_sglue>
 800ef4a:	bf00      	nop
 800ef4c:	24000028 	.word	0x24000028
 800ef50:	0800fba1 	.word	0x0800fba1
 800ef54:	24000038 	.word	0x24000038

0800ef58 <cleanup_stdio>:
 800ef58:	6841      	ldr	r1, [r0, #4]
 800ef5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ef8c <cleanup_stdio+0x34>)
 800ef5c:	4299      	cmp	r1, r3
 800ef5e:	b510      	push	{r4, lr}
 800ef60:	4604      	mov	r4, r0
 800ef62:	d001      	beq.n	800ef68 <cleanup_stdio+0x10>
 800ef64:	f000 fe1c 	bl	800fba0 <_fflush_r>
 800ef68:	68a1      	ldr	r1, [r4, #8]
 800ef6a:	4b09      	ldr	r3, [pc, #36]	@ (800ef90 <cleanup_stdio+0x38>)
 800ef6c:	4299      	cmp	r1, r3
 800ef6e:	d002      	beq.n	800ef76 <cleanup_stdio+0x1e>
 800ef70:	4620      	mov	r0, r4
 800ef72:	f000 fe15 	bl	800fba0 <_fflush_r>
 800ef76:	68e1      	ldr	r1, [r4, #12]
 800ef78:	4b06      	ldr	r3, [pc, #24]	@ (800ef94 <cleanup_stdio+0x3c>)
 800ef7a:	4299      	cmp	r1, r3
 800ef7c:	d004      	beq.n	800ef88 <cleanup_stdio+0x30>
 800ef7e:	4620      	mov	r0, r4
 800ef80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef84:	f000 be0c 	b.w	800fba0 <_fflush_r>
 800ef88:	bd10      	pop	{r4, pc}
 800ef8a:	bf00      	nop
 800ef8c:	24000684 	.word	0x24000684
 800ef90:	240006ec 	.word	0x240006ec
 800ef94:	24000754 	.word	0x24000754

0800ef98 <global_stdio_init.part.0>:
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	4b0b      	ldr	r3, [pc, #44]	@ (800efc8 <global_stdio_init.part.0+0x30>)
 800ef9c:	4c0b      	ldr	r4, [pc, #44]	@ (800efcc <global_stdio_init.part.0+0x34>)
 800ef9e:	4a0c      	ldr	r2, [pc, #48]	@ (800efd0 <global_stdio_init.part.0+0x38>)
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	4620      	mov	r0, r4
 800efa4:	2200      	movs	r2, #0
 800efa6:	2104      	movs	r1, #4
 800efa8:	f7ff ff94 	bl	800eed4 <std>
 800efac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800efb0:	2201      	movs	r2, #1
 800efb2:	2109      	movs	r1, #9
 800efb4:	f7ff ff8e 	bl	800eed4 <std>
 800efb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800efbc:	2202      	movs	r2, #2
 800efbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efc2:	2112      	movs	r1, #18
 800efc4:	f7ff bf86 	b.w	800eed4 <std>
 800efc8:	240007bc 	.word	0x240007bc
 800efcc:	24000684 	.word	0x24000684
 800efd0:	0800ef41 	.word	0x0800ef41

0800efd4 <__sfp_lock_acquire>:
 800efd4:	4801      	ldr	r0, [pc, #4]	@ (800efdc <__sfp_lock_acquire+0x8>)
 800efd6:	f000 b950 	b.w	800f27a <__retarget_lock_acquire_recursive>
 800efda:	bf00      	nop
 800efdc:	240007c5 	.word	0x240007c5

0800efe0 <__sfp_lock_release>:
 800efe0:	4801      	ldr	r0, [pc, #4]	@ (800efe8 <__sfp_lock_release+0x8>)
 800efe2:	f000 b94b 	b.w	800f27c <__retarget_lock_release_recursive>
 800efe6:	bf00      	nop
 800efe8:	240007c5 	.word	0x240007c5

0800efec <__sinit>:
 800efec:	b510      	push	{r4, lr}
 800efee:	4604      	mov	r4, r0
 800eff0:	f7ff fff0 	bl	800efd4 <__sfp_lock_acquire>
 800eff4:	6a23      	ldr	r3, [r4, #32]
 800eff6:	b11b      	cbz	r3, 800f000 <__sinit+0x14>
 800eff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800effc:	f7ff bff0 	b.w	800efe0 <__sfp_lock_release>
 800f000:	4b04      	ldr	r3, [pc, #16]	@ (800f014 <__sinit+0x28>)
 800f002:	6223      	str	r3, [r4, #32]
 800f004:	4b04      	ldr	r3, [pc, #16]	@ (800f018 <__sinit+0x2c>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d1f5      	bne.n	800eff8 <__sinit+0xc>
 800f00c:	f7ff ffc4 	bl	800ef98 <global_stdio_init.part.0>
 800f010:	e7f2      	b.n	800eff8 <__sinit+0xc>
 800f012:	bf00      	nop
 800f014:	0800ef59 	.word	0x0800ef59
 800f018:	240007bc 	.word	0x240007bc

0800f01c <_fwalk_sglue>:
 800f01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f020:	4607      	mov	r7, r0
 800f022:	4688      	mov	r8, r1
 800f024:	4614      	mov	r4, r2
 800f026:	2600      	movs	r6, #0
 800f028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f02c:	f1b9 0901 	subs.w	r9, r9, #1
 800f030:	d505      	bpl.n	800f03e <_fwalk_sglue+0x22>
 800f032:	6824      	ldr	r4, [r4, #0]
 800f034:	2c00      	cmp	r4, #0
 800f036:	d1f7      	bne.n	800f028 <_fwalk_sglue+0xc>
 800f038:	4630      	mov	r0, r6
 800f03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f03e:	89ab      	ldrh	r3, [r5, #12]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d907      	bls.n	800f054 <_fwalk_sglue+0x38>
 800f044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f048:	3301      	adds	r3, #1
 800f04a:	d003      	beq.n	800f054 <_fwalk_sglue+0x38>
 800f04c:	4629      	mov	r1, r5
 800f04e:	4638      	mov	r0, r7
 800f050:	47c0      	blx	r8
 800f052:	4306      	orrs	r6, r0
 800f054:	3568      	adds	r5, #104	@ 0x68
 800f056:	e7e9      	b.n	800f02c <_fwalk_sglue+0x10>

0800f058 <sniprintf>:
 800f058:	b40c      	push	{r2, r3}
 800f05a:	b530      	push	{r4, r5, lr}
 800f05c:	4b17      	ldr	r3, [pc, #92]	@ (800f0bc <sniprintf+0x64>)
 800f05e:	1e0c      	subs	r4, r1, #0
 800f060:	681d      	ldr	r5, [r3, #0]
 800f062:	b09d      	sub	sp, #116	@ 0x74
 800f064:	da08      	bge.n	800f078 <sniprintf+0x20>
 800f066:	238b      	movs	r3, #139	@ 0x8b
 800f068:	602b      	str	r3, [r5, #0]
 800f06a:	f04f 30ff 	mov.w	r0, #4294967295
 800f06e:	b01d      	add	sp, #116	@ 0x74
 800f070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f074:	b002      	add	sp, #8
 800f076:	4770      	bx	lr
 800f078:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f07c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f080:	bf14      	ite	ne
 800f082:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f086:	4623      	moveq	r3, r4
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	9307      	str	r3, [sp, #28]
 800f08c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f090:	9002      	str	r0, [sp, #8]
 800f092:	9006      	str	r0, [sp, #24]
 800f094:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f098:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f09a:	ab21      	add	r3, sp, #132	@ 0x84
 800f09c:	a902      	add	r1, sp, #8
 800f09e:	4628      	mov	r0, r5
 800f0a0:	9301      	str	r3, [sp, #4]
 800f0a2:	f000 fa6f 	bl	800f584 <_svfiprintf_r>
 800f0a6:	1c43      	adds	r3, r0, #1
 800f0a8:	bfbc      	itt	lt
 800f0aa:	238b      	movlt	r3, #139	@ 0x8b
 800f0ac:	602b      	strlt	r3, [r5, #0]
 800f0ae:	2c00      	cmp	r4, #0
 800f0b0:	d0dd      	beq.n	800f06e <sniprintf+0x16>
 800f0b2:	9b02      	ldr	r3, [sp, #8]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	701a      	strb	r2, [r3, #0]
 800f0b8:	e7d9      	b.n	800f06e <sniprintf+0x16>
 800f0ba:	bf00      	nop
 800f0bc:	24000034 	.word	0x24000034

0800f0c0 <siprintf>:
 800f0c0:	b40e      	push	{r1, r2, r3}
 800f0c2:	b500      	push	{lr}
 800f0c4:	b09c      	sub	sp, #112	@ 0x70
 800f0c6:	ab1d      	add	r3, sp, #116	@ 0x74
 800f0c8:	9002      	str	r0, [sp, #8]
 800f0ca:	9006      	str	r0, [sp, #24]
 800f0cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f0d0:	4809      	ldr	r0, [pc, #36]	@ (800f0f8 <siprintf+0x38>)
 800f0d2:	9107      	str	r1, [sp, #28]
 800f0d4:	9104      	str	r1, [sp, #16]
 800f0d6:	4909      	ldr	r1, [pc, #36]	@ (800f0fc <siprintf+0x3c>)
 800f0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0dc:	9105      	str	r1, [sp, #20]
 800f0de:	6800      	ldr	r0, [r0, #0]
 800f0e0:	9301      	str	r3, [sp, #4]
 800f0e2:	a902      	add	r1, sp, #8
 800f0e4:	f000 fa4e 	bl	800f584 <_svfiprintf_r>
 800f0e8:	9b02      	ldr	r3, [sp, #8]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	701a      	strb	r2, [r3, #0]
 800f0ee:	b01c      	add	sp, #112	@ 0x70
 800f0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0f4:	b003      	add	sp, #12
 800f0f6:	4770      	bx	lr
 800f0f8:	24000034 	.word	0x24000034
 800f0fc:	ffff0208 	.word	0xffff0208

0800f100 <__sread>:
 800f100:	b510      	push	{r4, lr}
 800f102:	460c      	mov	r4, r1
 800f104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f108:	f000 f868 	bl	800f1dc <_read_r>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	bfab      	itete	ge
 800f110:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f112:	89a3      	ldrhlt	r3, [r4, #12]
 800f114:	181b      	addge	r3, r3, r0
 800f116:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f11a:	bfac      	ite	ge
 800f11c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f11e:	81a3      	strhlt	r3, [r4, #12]
 800f120:	bd10      	pop	{r4, pc}

0800f122 <__swrite>:
 800f122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f126:	461f      	mov	r7, r3
 800f128:	898b      	ldrh	r3, [r1, #12]
 800f12a:	05db      	lsls	r3, r3, #23
 800f12c:	4605      	mov	r5, r0
 800f12e:	460c      	mov	r4, r1
 800f130:	4616      	mov	r6, r2
 800f132:	d505      	bpl.n	800f140 <__swrite+0x1e>
 800f134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f138:	2302      	movs	r3, #2
 800f13a:	2200      	movs	r2, #0
 800f13c:	f000 f83c 	bl	800f1b8 <_lseek_r>
 800f140:	89a3      	ldrh	r3, [r4, #12]
 800f142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f146:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f14a:	81a3      	strh	r3, [r4, #12]
 800f14c:	4632      	mov	r2, r6
 800f14e:	463b      	mov	r3, r7
 800f150:	4628      	mov	r0, r5
 800f152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f156:	f000 b853 	b.w	800f200 <_write_r>

0800f15a <__sseek>:
 800f15a:	b510      	push	{r4, lr}
 800f15c:	460c      	mov	r4, r1
 800f15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f162:	f000 f829 	bl	800f1b8 <_lseek_r>
 800f166:	1c43      	adds	r3, r0, #1
 800f168:	89a3      	ldrh	r3, [r4, #12]
 800f16a:	bf15      	itete	ne
 800f16c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f16e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f172:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f176:	81a3      	strheq	r3, [r4, #12]
 800f178:	bf18      	it	ne
 800f17a:	81a3      	strhne	r3, [r4, #12]
 800f17c:	bd10      	pop	{r4, pc}

0800f17e <__sclose>:
 800f17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f182:	f000 b809 	b.w	800f198 <_close_r>

0800f186 <memset>:
 800f186:	4402      	add	r2, r0
 800f188:	4603      	mov	r3, r0
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d100      	bne.n	800f190 <memset+0xa>
 800f18e:	4770      	bx	lr
 800f190:	f803 1b01 	strb.w	r1, [r3], #1
 800f194:	e7f9      	b.n	800f18a <memset+0x4>
	...

0800f198 <_close_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d06      	ldr	r5, [pc, #24]	@ (800f1b4 <_close_r+0x1c>)
 800f19c:	2300      	movs	r3, #0
 800f19e:	4604      	mov	r4, r0
 800f1a0:	4608      	mov	r0, r1
 800f1a2:	602b      	str	r3, [r5, #0]
 800f1a4:	f7f5 fa16 	bl	80045d4 <_close>
 800f1a8:	1c43      	adds	r3, r0, #1
 800f1aa:	d102      	bne.n	800f1b2 <_close_r+0x1a>
 800f1ac:	682b      	ldr	r3, [r5, #0]
 800f1ae:	b103      	cbz	r3, 800f1b2 <_close_r+0x1a>
 800f1b0:	6023      	str	r3, [r4, #0]
 800f1b2:	bd38      	pop	{r3, r4, r5, pc}
 800f1b4:	240007c0 	.word	0x240007c0

0800f1b8 <_lseek_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4d07      	ldr	r5, [pc, #28]	@ (800f1d8 <_lseek_r+0x20>)
 800f1bc:	4604      	mov	r4, r0
 800f1be:	4608      	mov	r0, r1
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	602a      	str	r2, [r5, #0]
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	f7f5 fa2b 	bl	8004622 <_lseek>
 800f1cc:	1c43      	adds	r3, r0, #1
 800f1ce:	d102      	bne.n	800f1d6 <_lseek_r+0x1e>
 800f1d0:	682b      	ldr	r3, [r5, #0]
 800f1d2:	b103      	cbz	r3, 800f1d6 <_lseek_r+0x1e>
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}
 800f1d8:	240007c0 	.word	0x240007c0

0800f1dc <_read_r>:
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	4d07      	ldr	r5, [pc, #28]	@ (800f1fc <_read_r+0x20>)
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	4608      	mov	r0, r1
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	602a      	str	r2, [r5, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	f7f5 f9b9 	bl	8004562 <_read>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_read_r+0x1e>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_read_r+0x1e>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	240007c0 	.word	0x240007c0

0800f200 <_write_r>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4d07      	ldr	r5, [pc, #28]	@ (800f220 <_write_r+0x20>)
 800f204:	4604      	mov	r4, r0
 800f206:	4608      	mov	r0, r1
 800f208:	4611      	mov	r1, r2
 800f20a:	2200      	movs	r2, #0
 800f20c:	602a      	str	r2, [r5, #0]
 800f20e:	461a      	mov	r2, r3
 800f210:	f7f5 f9c4 	bl	800459c <_write>
 800f214:	1c43      	adds	r3, r0, #1
 800f216:	d102      	bne.n	800f21e <_write_r+0x1e>
 800f218:	682b      	ldr	r3, [r5, #0]
 800f21a:	b103      	cbz	r3, 800f21e <_write_r+0x1e>
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	bd38      	pop	{r3, r4, r5, pc}
 800f220:	240007c0 	.word	0x240007c0

0800f224 <__errno>:
 800f224:	4b01      	ldr	r3, [pc, #4]	@ (800f22c <__errno+0x8>)
 800f226:	6818      	ldr	r0, [r3, #0]
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	24000034 	.word	0x24000034

0800f230 <__libc_init_array>:
 800f230:	b570      	push	{r4, r5, r6, lr}
 800f232:	4d0d      	ldr	r5, [pc, #52]	@ (800f268 <__libc_init_array+0x38>)
 800f234:	4c0d      	ldr	r4, [pc, #52]	@ (800f26c <__libc_init_array+0x3c>)
 800f236:	1b64      	subs	r4, r4, r5
 800f238:	10a4      	asrs	r4, r4, #2
 800f23a:	2600      	movs	r6, #0
 800f23c:	42a6      	cmp	r6, r4
 800f23e:	d109      	bne.n	800f254 <__libc_init_array+0x24>
 800f240:	4d0b      	ldr	r5, [pc, #44]	@ (800f270 <__libc_init_array+0x40>)
 800f242:	4c0c      	ldr	r4, [pc, #48]	@ (800f274 <__libc_init_array+0x44>)
 800f244:	f001 fe10 	bl	8010e68 <_init>
 800f248:	1b64      	subs	r4, r4, r5
 800f24a:	10a4      	asrs	r4, r4, #2
 800f24c:	2600      	movs	r6, #0
 800f24e:	42a6      	cmp	r6, r4
 800f250:	d105      	bne.n	800f25e <__libc_init_array+0x2e>
 800f252:	bd70      	pop	{r4, r5, r6, pc}
 800f254:	f855 3b04 	ldr.w	r3, [r5], #4
 800f258:	4798      	blx	r3
 800f25a:	3601      	adds	r6, #1
 800f25c:	e7ee      	b.n	800f23c <__libc_init_array+0xc>
 800f25e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f262:	4798      	blx	r3
 800f264:	3601      	adds	r6, #1
 800f266:	e7f2      	b.n	800f24e <__libc_init_array+0x1e>
 800f268:	08011348 	.word	0x08011348
 800f26c:	08011348 	.word	0x08011348
 800f270:	08011348 	.word	0x08011348
 800f274:	0801134c 	.word	0x0801134c

0800f278 <__retarget_lock_init_recursive>:
 800f278:	4770      	bx	lr

0800f27a <__retarget_lock_acquire_recursive>:
 800f27a:	4770      	bx	lr

0800f27c <__retarget_lock_release_recursive>:
 800f27c:	4770      	bx	lr

0800f27e <strcpy>:
 800f27e:	4603      	mov	r3, r0
 800f280:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f284:	f803 2b01 	strb.w	r2, [r3], #1
 800f288:	2a00      	cmp	r2, #0
 800f28a:	d1f9      	bne.n	800f280 <strcpy+0x2>
 800f28c:	4770      	bx	lr
	...

0800f290 <__assert_func>:
 800f290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f292:	4614      	mov	r4, r2
 800f294:	461a      	mov	r2, r3
 800f296:	4b09      	ldr	r3, [pc, #36]	@ (800f2bc <__assert_func+0x2c>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4605      	mov	r5, r0
 800f29c:	68d8      	ldr	r0, [r3, #12]
 800f29e:	b954      	cbnz	r4, 800f2b6 <__assert_func+0x26>
 800f2a0:	4b07      	ldr	r3, [pc, #28]	@ (800f2c0 <__assert_func+0x30>)
 800f2a2:	461c      	mov	r4, r3
 800f2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2a8:	9100      	str	r1, [sp, #0]
 800f2aa:	462b      	mov	r3, r5
 800f2ac:	4905      	ldr	r1, [pc, #20]	@ (800f2c4 <__assert_func+0x34>)
 800f2ae:	f000 fc9f 	bl	800fbf0 <fiprintf>
 800f2b2:	f000 fce7 	bl	800fc84 <abort>
 800f2b6:	4b04      	ldr	r3, [pc, #16]	@ (800f2c8 <__assert_func+0x38>)
 800f2b8:	e7f4      	b.n	800f2a4 <__assert_func+0x14>
 800f2ba:	bf00      	nop
 800f2bc:	24000034 	.word	0x24000034
 800f2c0:	08011132 	.word	0x08011132
 800f2c4:	08011104 	.word	0x08011104
 800f2c8:	080110f7 	.word	0x080110f7

0800f2cc <_free_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	4605      	mov	r5, r0
 800f2d0:	2900      	cmp	r1, #0
 800f2d2:	d041      	beq.n	800f358 <_free_r+0x8c>
 800f2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2d8:	1f0c      	subs	r4, r1, #4
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	bfb8      	it	lt
 800f2de:	18e4      	addlt	r4, r4, r3
 800f2e0:	f000 f8e8 	bl	800f4b4 <__malloc_lock>
 800f2e4:	4a1d      	ldr	r2, [pc, #116]	@ (800f35c <_free_r+0x90>)
 800f2e6:	6813      	ldr	r3, [r2, #0]
 800f2e8:	b933      	cbnz	r3, 800f2f8 <_free_r+0x2c>
 800f2ea:	6063      	str	r3, [r4, #4]
 800f2ec:	6014      	str	r4, [r2, #0]
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2f4:	f000 b8e4 	b.w	800f4c0 <__malloc_unlock>
 800f2f8:	42a3      	cmp	r3, r4
 800f2fa:	d908      	bls.n	800f30e <_free_r+0x42>
 800f2fc:	6820      	ldr	r0, [r4, #0]
 800f2fe:	1821      	adds	r1, r4, r0
 800f300:	428b      	cmp	r3, r1
 800f302:	bf01      	itttt	eq
 800f304:	6819      	ldreq	r1, [r3, #0]
 800f306:	685b      	ldreq	r3, [r3, #4]
 800f308:	1809      	addeq	r1, r1, r0
 800f30a:	6021      	streq	r1, [r4, #0]
 800f30c:	e7ed      	b.n	800f2ea <_free_r+0x1e>
 800f30e:	461a      	mov	r2, r3
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	b10b      	cbz	r3, 800f318 <_free_r+0x4c>
 800f314:	42a3      	cmp	r3, r4
 800f316:	d9fa      	bls.n	800f30e <_free_r+0x42>
 800f318:	6811      	ldr	r1, [r2, #0]
 800f31a:	1850      	adds	r0, r2, r1
 800f31c:	42a0      	cmp	r0, r4
 800f31e:	d10b      	bne.n	800f338 <_free_r+0x6c>
 800f320:	6820      	ldr	r0, [r4, #0]
 800f322:	4401      	add	r1, r0
 800f324:	1850      	adds	r0, r2, r1
 800f326:	4283      	cmp	r3, r0
 800f328:	6011      	str	r1, [r2, #0]
 800f32a:	d1e0      	bne.n	800f2ee <_free_r+0x22>
 800f32c:	6818      	ldr	r0, [r3, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	6053      	str	r3, [r2, #4]
 800f332:	4408      	add	r0, r1
 800f334:	6010      	str	r0, [r2, #0]
 800f336:	e7da      	b.n	800f2ee <_free_r+0x22>
 800f338:	d902      	bls.n	800f340 <_free_r+0x74>
 800f33a:	230c      	movs	r3, #12
 800f33c:	602b      	str	r3, [r5, #0]
 800f33e:	e7d6      	b.n	800f2ee <_free_r+0x22>
 800f340:	6820      	ldr	r0, [r4, #0]
 800f342:	1821      	adds	r1, r4, r0
 800f344:	428b      	cmp	r3, r1
 800f346:	bf04      	itt	eq
 800f348:	6819      	ldreq	r1, [r3, #0]
 800f34a:	685b      	ldreq	r3, [r3, #4]
 800f34c:	6063      	str	r3, [r4, #4]
 800f34e:	bf04      	itt	eq
 800f350:	1809      	addeq	r1, r1, r0
 800f352:	6021      	streq	r1, [r4, #0]
 800f354:	6054      	str	r4, [r2, #4]
 800f356:	e7ca      	b.n	800f2ee <_free_r+0x22>
 800f358:	bd38      	pop	{r3, r4, r5, pc}
 800f35a:	bf00      	nop
 800f35c:	240007cc 	.word	0x240007cc

0800f360 <malloc>:
 800f360:	4b02      	ldr	r3, [pc, #8]	@ (800f36c <malloc+0xc>)
 800f362:	4601      	mov	r1, r0
 800f364:	6818      	ldr	r0, [r3, #0]
 800f366:	f000 b825 	b.w	800f3b4 <_malloc_r>
 800f36a:	bf00      	nop
 800f36c:	24000034 	.word	0x24000034

0800f370 <sbrk_aligned>:
 800f370:	b570      	push	{r4, r5, r6, lr}
 800f372:	4e0f      	ldr	r6, [pc, #60]	@ (800f3b0 <sbrk_aligned+0x40>)
 800f374:	460c      	mov	r4, r1
 800f376:	6831      	ldr	r1, [r6, #0]
 800f378:	4605      	mov	r5, r0
 800f37a:	b911      	cbnz	r1, 800f382 <sbrk_aligned+0x12>
 800f37c:	f000 fc64 	bl	800fc48 <_sbrk_r>
 800f380:	6030      	str	r0, [r6, #0]
 800f382:	4621      	mov	r1, r4
 800f384:	4628      	mov	r0, r5
 800f386:	f000 fc5f 	bl	800fc48 <_sbrk_r>
 800f38a:	1c43      	adds	r3, r0, #1
 800f38c:	d103      	bne.n	800f396 <sbrk_aligned+0x26>
 800f38e:	f04f 34ff 	mov.w	r4, #4294967295
 800f392:	4620      	mov	r0, r4
 800f394:	bd70      	pop	{r4, r5, r6, pc}
 800f396:	1cc4      	adds	r4, r0, #3
 800f398:	f024 0403 	bic.w	r4, r4, #3
 800f39c:	42a0      	cmp	r0, r4
 800f39e:	d0f8      	beq.n	800f392 <sbrk_aligned+0x22>
 800f3a0:	1a21      	subs	r1, r4, r0
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f000 fc50 	bl	800fc48 <_sbrk_r>
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d1f2      	bne.n	800f392 <sbrk_aligned+0x22>
 800f3ac:	e7ef      	b.n	800f38e <sbrk_aligned+0x1e>
 800f3ae:	bf00      	nop
 800f3b0:	240007c8 	.word	0x240007c8

0800f3b4 <_malloc_r>:
 800f3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	1ccd      	adds	r5, r1, #3
 800f3ba:	f025 0503 	bic.w	r5, r5, #3
 800f3be:	3508      	adds	r5, #8
 800f3c0:	2d0c      	cmp	r5, #12
 800f3c2:	bf38      	it	cc
 800f3c4:	250c      	movcc	r5, #12
 800f3c6:	2d00      	cmp	r5, #0
 800f3c8:	4606      	mov	r6, r0
 800f3ca:	db01      	blt.n	800f3d0 <_malloc_r+0x1c>
 800f3cc:	42a9      	cmp	r1, r5
 800f3ce:	d904      	bls.n	800f3da <_malloc_r+0x26>
 800f3d0:	230c      	movs	r3, #12
 800f3d2:	6033      	str	r3, [r6, #0]
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4b0 <_malloc_r+0xfc>
 800f3de:	f000 f869 	bl	800f4b4 <__malloc_lock>
 800f3e2:	f8d8 3000 	ldr.w	r3, [r8]
 800f3e6:	461c      	mov	r4, r3
 800f3e8:	bb44      	cbnz	r4, 800f43c <_malloc_r+0x88>
 800f3ea:	4629      	mov	r1, r5
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f7ff ffbf 	bl	800f370 <sbrk_aligned>
 800f3f2:	1c43      	adds	r3, r0, #1
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	d158      	bne.n	800f4aa <_malloc_r+0xf6>
 800f3f8:	f8d8 4000 	ldr.w	r4, [r8]
 800f3fc:	4627      	mov	r7, r4
 800f3fe:	2f00      	cmp	r7, #0
 800f400:	d143      	bne.n	800f48a <_malloc_r+0xd6>
 800f402:	2c00      	cmp	r4, #0
 800f404:	d04b      	beq.n	800f49e <_malloc_r+0xea>
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	4639      	mov	r1, r7
 800f40a:	4630      	mov	r0, r6
 800f40c:	eb04 0903 	add.w	r9, r4, r3
 800f410:	f000 fc1a 	bl	800fc48 <_sbrk_r>
 800f414:	4581      	cmp	r9, r0
 800f416:	d142      	bne.n	800f49e <_malloc_r+0xea>
 800f418:	6821      	ldr	r1, [r4, #0]
 800f41a:	1a6d      	subs	r5, r5, r1
 800f41c:	4629      	mov	r1, r5
 800f41e:	4630      	mov	r0, r6
 800f420:	f7ff ffa6 	bl	800f370 <sbrk_aligned>
 800f424:	3001      	adds	r0, #1
 800f426:	d03a      	beq.n	800f49e <_malloc_r+0xea>
 800f428:	6823      	ldr	r3, [r4, #0]
 800f42a:	442b      	add	r3, r5
 800f42c:	6023      	str	r3, [r4, #0]
 800f42e:	f8d8 3000 	ldr.w	r3, [r8]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	bb62      	cbnz	r2, 800f490 <_malloc_r+0xdc>
 800f436:	f8c8 7000 	str.w	r7, [r8]
 800f43a:	e00f      	b.n	800f45c <_malloc_r+0xa8>
 800f43c:	6822      	ldr	r2, [r4, #0]
 800f43e:	1b52      	subs	r2, r2, r5
 800f440:	d420      	bmi.n	800f484 <_malloc_r+0xd0>
 800f442:	2a0b      	cmp	r2, #11
 800f444:	d917      	bls.n	800f476 <_malloc_r+0xc2>
 800f446:	1961      	adds	r1, r4, r5
 800f448:	42a3      	cmp	r3, r4
 800f44a:	6025      	str	r5, [r4, #0]
 800f44c:	bf18      	it	ne
 800f44e:	6059      	strne	r1, [r3, #4]
 800f450:	6863      	ldr	r3, [r4, #4]
 800f452:	bf08      	it	eq
 800f454:	f8c8 1000 	streq.w	r1, [r8]
 800f458:	5162      	str	r2, [r4, r5]
 800f45a:	604b      	str	r3, [r1, #4]
 800f45c:	4630      	mov	r0, r6
 800f45e:	f000 f82f 	bl	800f4c0 <__malloc_unlock>
 800f462:	f104 000b 	add.w	r0, r4, #11
 800f466:	1d23      	adds	r3, r4, #4
 800f468:	f020 0007 	bic.w	r0, r0, #7
 800f46c:	1ac2      	subs	r2, r0, r3
 800f46e:	bf1c      	itt	ne
 800f470:	1a1b      	subne	r3, r3, r0
 800f472:	50a3      	strne	r3, [r4, r2]
 800f474:	e7af      	b.n	800f3d6 <_malloc_r+0x22>
 800f476:	6862      	ldr	r2, [r4, #4]
 800f478:	42a3      	cmp	r3, r4
 800f47a:	bf0c      	ite	eq
 800f47c:	f8c8 2000 	streq.w	r2, [r8]
 800f480:	605a      	strne	r2, [r3, #4]
 800f482:	e7eb      	b.n	800f45c <_malloc_r+0xa8>
 800f484:	4623      	mov	r3, r4
 800f486:	6864      	ldr	r4, [r4, #4]
 800f488:	e7ae      	b.n	800f3e8 <_malloc_r+0x34>
 800f48a:	463c      	mov	r4, r7
 800f48c:	687f      	ldr	r7, [r7, #4]
 800f48e:	e7b6      	b.n	800f3fe <_malloc_r+0x4a>
 800f490:	461a      	mov	r2, r3
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	42a3      	cmp	r3, r4
 800f496:	d1fb      	bne.n	800f490 <_malloc_r+0xdc>
 800f498:	2300      	movs	r3, #0
 800f49a:	6053      	str	r3, [r2, #4]
 800f49c:	e7de      	b.n	800f45c <_malloc_r+0xa8>
 800f49e:	230c      	movs	r3, #12
 800f4a0:	6033      	str	r3, [r6, #0]
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f000 f80c 	bl	800f4c0 <__malloc_unlock>
 800f4a8:	e794      	b.n	800f3d4 <_malloc_r+0x20>
 800f4aa:	6005      	str	r5, [r0, #0]
 800f4ac:	e7d6      	b.n	800f45c <_malloc_r+0xa8>
 800f4ae:	bf00      	nop
 800f4b0:	240007cc 	.word	0x240007cc

0800f4b4 <__malloc_lock>:
 800f4b4:	4801      	ldr	r0, [pc, #4]	@ (800f4bc <__malloc_lock+0x8>)
 800f4b6:	f7ff bee0 	b.w	800f27a <__retarget_lock_acquire_recursive>
 800f4ba:	bf00      	nop
 800f4bc:	240007c4 	.word	0x240007c4

0800f4c0 <__malloc_unlock>:
 800f4c0:	4801      	ldr	r0, [pc, #4]	@ (800f4c8 <__malloc_unlock+0x8>)
 800f4c2:	f7ff bedb 	b.w	800f27c <__retarget_lock_release_recursive>
 800f4c6:	bf00      	nop
 800f4c8:	240007c4 	.word	0x240007c4

0800f4cc <__ssputs_r>:
 800f4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d0:	688e      	ldr	r6, [r1, #8]
 800f4d2:	461f      	mov	r7, r3
 800f4d4:	42be      	cmp	r6, r7
 800f4d6:	680b      	ldr	r3, [r1, #0]
 800f4d8:	4682      	mov	sl, r0
 800f4da:	460c      	mov	r4, r1
 800f4dc:	4690      	mov	r8, r2
 800f4de:	d82d      	bhi.n	800f53c <__ssputs_r+0x70>
 800f4e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f4e8:	d026      	beq.n	800f538 <__ssputs_r+0x6c>
 800f4ea:	6965      	ldr	r5, [r4, #20]
 800f4ec:	6909      	ldr	r1, [r1, #16]
 800f4ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4f2:	eba3 0901 	sub.w	r9, r3, r1
 800f4f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4fa:	1c7b      	adds	r3, r7, #1
 800f4fc:	444b      	add	r3, r9
 800f4fe:	106d      	asrs	r5, r5, #1
 800f500:	429d      	cmp	r5, r3
 800f502:	bf38      	it	cc
 800f504:	461d      	movcc	r5, r3
 800f506:	0553      	lsls	r3, r2, #21
 800f508:	d527      	bpl.n	800f55a <__ssputs_r+0x8e>
 800f50a:	4629      	mov	r1, r5
 800f50c:	f7ff ff52 	bl	800f3b4 <_malloc_r>
 800f510:	4606      	mov	r6, r0
 800f512:	b360      	cbz	r0, 800f56e <__ssputs_r+0xa2>
 800f514:	6921      	ldr	r1, [r4, #16]
 800f516:	464a      	mov	r2, r9
 800f518:	f000 fba6 	bl	800fc68 <memcpy>
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f526:	81a3      	strh	r3, [r4, #12]
 800f528:	6126      	str	r6, [r4, #16]
 800f52a:	6165      	str	r5, [r4, #20]
 800f52c:	444e      	add	r6, r9
 800f52e:	eba5 0509 	sub.w	r5, r5, r9
 800f532:	6026      	str	r6, [r4, #0]
 800f534:	60a5      	str	r5, [r4, #8]
 800f536:	463e      	mov	r6, r7
 800f538:	42be      	cmp	r6, r7
 800f53a:	d900      	bls.n	800f53e <__ssputs_r+0x72>
 800f53c:	463e      	mov	r6, r7
 800f53e:	6820      	ldr	r0, [r4, #0]
 800f540:	4632      	mov	r2, r6
 800f542:	4641      	mov	r1, r8
 800f544:	f000 fb66 	bl	800fc14 <memmove>
 800f548:	68a3      	ldr	r3, [r4, #8]
 800f54a:	1b9b      	subs	r3, r3, r6
 800f54c:	60a3      	str	r3, [r4, #8]
 800f54e:	6823      	ldr	r3, [r4, #0]
 800f550:	4433      	add	r3, r6
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	2000      	movs	r0, #0
 800f556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f55a:	462a      	mov	r2, r5
 800f55c:	f000 fb99 	bl	800fc92 <_realloc_r>
 800f560:	4606      	mov	r6, r0
 800f562:	2800      	cmp	r0, #0
 800f564:	d1e0      	bne.n	800f528 <__ssputs_r+0x5c>
 800f566:	6921      	ldr	r1, [r4, #16]
 800f568:	4650      	mov	r0, sl
 800f56a:	f7ff feaf 	bl	800f2cc <_free_r>
 800f56e:	230c      	movs	r3, #12
 800f570:	f8ca 3000 	str.w	r3, [sl]
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f57a:	81a3      	strh	r3, [r4, #12]
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295
 800f580:	e7e9      	b.n	800f556 <__ssputs_r+0x8a>
	...

0800f584 <_svfiprintf_r>:
 800f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	4698      	mov	r8, r3
 800f58a:	898b      	ldrh	r3, [r1, #12]
 800f58c:	061b      	lsls	r3, r3, #24
 800f58e:	b09d      	sub	sp, #116	@ 0x74
 800f590:	4607      	mov	r7, r0
 800f592:	460d      	mov	r5, r1
 800f594:	4614      	mov	r4, r2
 800f596:	d510      	bpl.n	800f5ba <_svfiprintf_r+0x36>
 800f598:	690b      	ldr	r3, [r1, #16]
 800f59a:	b973      	cbnz	r3, 800f5ba <_svfiprintf_r+0x36>
 800f59c:	2140      	movs	r1, #64	@ 0x40
 800f59e:	f7ff ff09 	bl	800f3b4 <_malloc_r>
 800f5a2:	6028      	str	r0, [r5, #0]
 800f5a4:	6128      	str	r0, [r5, #16]
 800f5a6:	b930      	cbnz	r0, 800f5b6 <_svfiprintf_r+0x32>
 800f5a8:	230c      	movs	r3, #12
 800f5aa:	603b      	str	r3, [r7, #0]
 800f5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b0:	b01d      	add	sp, #116	@ 0x74
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b6:	2340      	movs	r3, #64	@ 0x40
 800f5b8:	616b      	str	r3, [r5, #20]
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5be:	2320      	movs	r3, #32
 800f5c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5c8:	2330      	movs	r3, #48	@ 0x30
 800f5ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f768 <_svfiprintf_r+0x1e4>
 800f5ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5d2:	f04f 0901 	mov.w	r9, #1
 800f5d6:	4623      	mov	r3, r4
 800f5d8:	469a      	mov	sl, r3
 800f5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5de:	b10a      	cbz	r2, 800f5e4 <_svfiprintf_r+0x60>
 800f5e0:	2a25      	cmp	r2, #37	@ 0x25
 800f5e2:	d1f9      	bne.n	800f5d8 <_svfiprintf_r+0x54>
 800f5e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f5e8:	d00b      	beq.n	800f602 <_svfiprintf_r+0x7e>
 800f5ea:	465b      	mov	r3, fp
 800f5ec:	4622      	mov	r2, r4
 800f5ee:	4629      	mov	r1, r5
 800f5f0:	4638      	mov	r0, r7
 800f5f2:	f7ff ff6b 	bl	800f4cc <__ssputs_r>
 800f5f6:	3001      	adds	r0, #1
 800f5f8:	f000 80a7 	beq.w	800f74a <_svfiprintf_r+0x1c6>
 800f5fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5fe:	445a      	add	r2, fp
 800f600:	9209      	str	r2, [sp, #36]	@ 0x24
 800f602:	f89a 3000 	ldrb.w	r3, [sl]
 800f606:	2b00      	cmp	r3, #0
 800f608:	f000 809f 	beq.w	800f74a <_svfiprintf_r+0x1c6>
 800f60c:	2300      	movs	r3, #0
 800f60e:	f04f 32ff 	mov.w	r2, #4294967295
 800f612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f616:	f10a 0a01 	add.w	sl, sl, #1
 800f61a:	9304      	str	r3, [sp, #16]
 800f61c:	9307      	str	r3, [sp, #28]
 800f61e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f622:	931a      	str	r3, [sp, #104]	@ 0x68
 800f624:	4654      	mov	r4, sl
 800f626:	2205      	movs	r2, #5
 800f628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f62c:	484e      	ldr	r0, [pc, #312]	@ (800f768 <_svfiprintf_r+0x1e4>)
 800f62e:	f7f0 fe5f 	bl	80002f0 <memchr>
 800f632:	9a04      	ldr	r2, [sp, #16]
 800f634:	b9d8      	cbnz	r0, 800f66e <_svfiprintf_r+0xea>
 800f636:	06d0      	lsls	r0, r2, #27
 800f638:	bf44      	itt	mi
 800f63a:	2320      	movmi	r3, #32
 800f63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f640:	0711      	lsls	r1, r2, #28
 800f642:	bf44      	itt	mi
 800f644:	232b      	movmi	r3, #43	@ 0x2b
 800f646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f64a:	f89a 3000 	ldrb.w	r3, [sl]
 800f64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f650:	d015      	beq.n	800f67e <_svfiprintf_r+0xfa>
 800f652:	9a07      	ldr	r2, [sp, #28]
 800f654:	4654      	mov	r4, sl
 800f656:	2000      	movs	r0, #0
 800f658:	f04f 0c0a 	mov.w	ip, #10
 800f65c:	4621      	mov	r1, r4
 800f65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f662:	3b30      	subs	r3, #48	@ 0x30
 800f664:	2b09      	cmp	r3, #9
 800f666:	d94b      	bls.n	800f700 <_svfiprintf_r+0x17c>
 800f668:	b1b0      	cbz	r0, 800f698 <_svfiprintf_r+0x114>
 800f66a:	9207      	str	r2, [sp, #28]
 800f66c:	e014      	b.n	800f698 <_svfiprintf_r+0x114>
 800f66e:	eba0 0308 	sub.w	r3, r0, r8
 800f672:	fa09 f303 	lsl.w	r3, r9, r3
 800f676:	4313      	orrs	r3, r2
 800f678:	9304      	str	r3, [sp, #16]
 800f67a:	46a2      	mov	sl, r4
 800f67c:	e7d2      	b.n	800f624 <_svfiprintf_r+0xa0>
 800f67e:	9b03      	ldr	r3, [sp, #12]
 800f680:	1d19      	adds	r1, r3, #4
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	9103      	str	r1, [sp, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	bfbb      	ittet	lt
 800f68a:	425b      	neglt	r3, r3
 800f68c:	f042 0202 	orrlt.w	r2, r2, #2
 800f690:	9307      	strge	r3, [sp, #28]
 800f692:	9307      	strlt	r3, [sp, #28]
 800f694:	bfb8      	it	lt
 800f696:	9204      	strlt	r2, [sp, #16]
 800f698:	7823      	ldrb	r3, [r4, #0]
 800f69a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f69c:	d10a      	bne.n	800f6b4 <_svfiprintf_r+0x130>
 800f69e:	7863      	ldrb	r3, [r4, #1]
 800f6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6a2:	d132      	bne.n	800f70a <_svfiprintf_r+0x186>
 800f6a4:	9b03      	ldr	r3, [sp, #12]
 800f6a6:	1d1a      	adds	r2, r3, #4
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	9203      	str	r2, [sp, #12]
 800f6ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6b0:	3402      	adds	r4, #2
 800f6b2:	9305      	str	r3, [sp, #20]
 800f6b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f778 <_svfiprintf_r+0x1f4>
 800f6b8:	7821      	ldrb	r1, [r4, #0]
 800f6ba:	2203      	movs	r2, #3
 800f6bc:	4650      	mov	r0, sl
 800f6be:	f7f0 fe17 	bl	80002f0 <memchr>
 800f6c2:	b138      	cbz	r0, 800f6d4 <_svfiprintf_r+0x150>
 800f6c4:	9b04      	ldr	r3, [sp, #16]
 800f6c6:	eba0 000a 	sub.w	r0, r0, sl
 800f6ca:	2240      	movs	r2, #64	@ 0x40
 800f6cc:	4082      	lsls	r2, r0
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	3401      	adds	r4, #1
 800f6d2:	9304      	str	r3, [sp, #16]
 800f6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6d8:	4824      	ldr	r0, [pc, #144]	@ (800f76c <_svfiprintf_r+0x1e8>)
 800f6da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6de:	2206      	movs	r2, #6
 800f6e0:	f7f0 fe06 	bl	80002f0 <memchr>
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	d036      	beq.n	800f756 <_svfiprintf_r+0x1d2>
 800f6e8:	4b21      	ldr	r3, [pc, #132]	@ (800f770 <_svfiprintf_r+0x1ec>)
 800f6ea:	bb1b      	cbnz	r3, 800f734 <_svfiprintf_r+0x1b0>
 800f6ec:	9b03      	ldr	r3, [sp, #12]
 800f6ee:	3307      	adds	r3, #7
 800f6f0:	f023 0307 	bic.w	r3, r3, #7
 800f6f4:	3308      	adds	r3, #8
 800f6f6:	9303      	str	r3, [sp, #12]
 800f6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6fa:	4433      	add	r3, r6
 800f6fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6fe:	e76a      	b.n	800f5d6 <_svfiprintf_r+0x52>
 800f700:	fb0c 3202 	mla	r2, ip, r2, r3
 800f704:	460c      	mov	r4, r1
 800f706:	2001      	movs	r0, #1
 800f708:	e7a8      	b.n	800f65c <_svfiprintf_r+0xd8>
 800f70a:	2300      	movs	r3, #0
 800f70c:	3401      	adds	r4, #1
 800f70e:	9305      	str	r3, [sp, #20]
 800f710:	4619      	mov	r1, r3
 800f712:	f04f 0c0a 	mov.w	ip, #10
 800f716:	4620      	mov	r0, r4
 800f718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f71c:	3a30      	subs	r2, #48	@ 0x30
 800f71e:	2a09      	cmp	r2, #9
 800f720:	d903      	bls.n	800f72a <_svfiprintf_r+0x1a6>
 800f722:	2b00      	cmp	r3, #0
 800f724:	d0c6      	beq.n	800f6b4 <_svfiprintf_r+0x130>
 800f726:	9105      	str	r1, [sp, #20]
 800f728:	e7c4      	b.n	800f6b4 <_svfiprintf_r+0x130>
 800f72a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f72e:	4604      	mov	r4, r0
 800f730:	2301      	movs	r3, #1
 800f732:	e7f0      	b.n	800f716 <_svfiprintf_r+0x192>
 800f734:	ab03      	add	r3, sp, #12
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	462a      	mov	r2, r5
 800f73a:	4b0e      	ldr	r3, [pc, #56]	@ (800f774 <_svfiprintf_r+0x1f0>)
 800f73c:	a904      	add	r1, sp, #16
 800f73e:	4638      	mov	r0, r7
 800f740:	f3af 8000 	nop.w
 800f744:	1c42      	adds	r2, r0, #1
 800f746:	4606      	mov	r6, r0
 800f748:	d1d6      	bne.n	800f6f8 <_svfiprintf_r+0x174>
 800f74a:	89ab      	ldrh	r3, [r5, #12]
 800f74c:	065b      	lsls	r3, r3, #25
 800f74e:	f53f af2d 	bmi.w	800f5ac <_svfiprintf_r+0x28>
 800f752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f754:	e72c      	b.n	800f5b0 <_svfiprintf_r+0x2c>
 800f756:	ab03      	add	r3, sp, #12
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	462a      	mov	r2, r5
 800f75c:	4b05      	ldr	r3, [pc, #20]	@ (800f774 <_svfiprintf_r+0x1f0>)
 800f75e:	a904      	add	r1, sp, #16
 800f760:	4638      	mov	r0, r7
 800f762:	f000 f879 	bl	800f858 <_printf_i>
 800f766:	e7ed      	b.n	800f744 <_svfiprintf_r+0x1c0>
 800f768:	08011133 	.word	0x08011133
 800f76c:	0801113d 	.word	0x0801113d
 800f770:	00000000 	.word	0x00000000
 800f774:	0800f4cd 	.word	0x0800f4cd
 800f778:	08011139 	.word	0x08011139

0800f77c <_printf_common>:
 800f77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f780:	4616      	mov	r6, r2
 800f782:	4698      	mov	r8, r3
 800f784:	688a      	ldr	r2, [r1, #8]
 800f786:	690b      	ldr	r3, [r1, #16]
 800f788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f78c:	4293      	cmp	r3, r2
 800f78e:	bfb8      	it	lt
 800f790:	4613      	movlt	r3, r2
 800f792:	6033      	str	r3, [r6, #0]
 800f794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f798:	4607      	mov	r7, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	b10a      	cbz	r2, 800f7a2 <_printf_common+0x26>
 800f79e:	3301      	adds	r3, #1
 800f7a0:	6033      	str	r3, [r6, #0]
 800f7a2:	6823      	ldr	r3, [r4, #0]
 800f7a4:	0699      	lsls	r1, r3, #26
 800f7a6:	bf42      	ittt	mi
 800f7a8:	6833      	ldrmi	r3, [r6, #0]
 800f7aa:	3302      	addmi	r3, #2
 800f7ac:	6033      	strmi	r3, [r6, #0]
 800f7ae:	6825      	ldr	r5, [r4, #0]
 800f7b0:	f015 0506 	ands.w	r5, r5, #6
 800f7b4:	d106      	bne.n	800f7c4 <_printf_common+0x48>
 800f7b6:	f104 0a19 	add.w	sl, r4, #25
 800f7ba:	68e3      	ldr	r3, [r4, #12]
 800f7bc:	6832      	ldr	r2, [r6, #0]
 800f7be:	1a9b      	subs	r3, r3, r2
 800f7c0:	42ab      	cmp	r3, r5
 800f7c2:	dc26      	bgt.n	800f812 <_printf_common+0x96>
 800f7c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f7c8:	6822      	ldr	r2, [r4, #0]
 800f7ca:	3b00      	subs	r3, #0
 800f7cc:	bf18      	it	ne
 800f7ce:	2301      	movne	r3, #1
 800f7d0:	0692      	lsls	r2, r2, #26
 800f7d2:	d42b      	bmi.n	800f82c <_printf_common+0xb0>
 800f7d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f7d8:	4641      	mov	r1, r8
 800f7da:	4638      	mov	r0, r7
 800f7dc:	47c8      	blx	r9
 800f7de:	3001      	adds	r0, #1
 800f7e0:	d01e      	beq.n	800f820 <_printf_common+0xa4>
 800f7e2:	6823      	ldr	r3, [r4, #0]
 800f7e4:	6922      	ldr	r2, [r4, #16]
 800f7e6:	f003 0306 	and.w	r3, r3, #6
 800f7ea:	2b04      	cmp	r3, #4
 800f7ec:	bf02      	ittt	eq
 800f7ee:	68e5      	ldreq	r5, [r4, #12]
 800f7f0:	6833      	ldreq	r3, [r6, #0]
 800f7f2:	1aed      	subeq	r5, r5, r3
 800f7f4:	68a3      	ldr	r3, [r4, #8]
 800f7f6:	bf0c      	ite	eq
 800f7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7fc:	2500      	movne	r5, #0
 800f7fe:	4293      	cmp	r3, r2
 800f800:	bfc4      	itt	gt
 800f802:	1a9b      	subgt	r3, r3, r2
 800f804:	18ed      	addgt	r5, r5, r3
 800f806:	2600      	movs	r6, #0
 800f808:	341a      	adds	r4, #26
 800f80a:	42b5      	cmp	r5, r6
 800f80c:	d11a      	bne.n	800f844 <_printf_common+0xc8>
 800f80e:	2000      	movs	r0, #0
 800f810:	e008      	b.n	800f824 <_printf_common+0xa8>
 800f812:	2301      	movs	r3, #1
 800f814:	4652      	mov	r2, sl
 800f816:	4641      	mov	r1, r8
 800f818:	4638      	mov	r0, r7
 800f81a:	47c8      	blx	r9
 800f81c:	3001      	adds	r0, #1
 800f81e:	d103      	bne.n	800f828 <_printf_common+0xac>
 800f820:	f04f 30ff 	mov.w	r0, #4294967295
 800f824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f828:	3501      	adds	r5, #1
 800f82a:	e7c6      	b.n	800f7ba <_printf_common+0x3e>
 800f82c:	18e1      	adds	r1, r4, r3
 800f82e:	1c5a      	adds	r2, r3, #1
 800f830:	2030      	movs	r0, #48	@ 0x30
 800f832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f836:	4422      	add	r2, r4
 800f838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f83c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f840:	3302      	adds	r3, #2
 800f842:	e7c7      	b.n	800f7d4 <_printf_common+0x58>
 800f844:	2301      	movs	r3, #1
 800f846:	4622      	mov	r2, r4
 800f848:	4641      	mov	r1, r8
 800f84a:	4638      	mov	r0, r7
 800f84c:	47c8      	blx	r9
 800f84e:	3001      	adds	r0, #1
 800f850:	d0e6      	beq.n	800f820 <_printf_common+0xa4>
 800f852:	3601      	adds	r6, #1
 800f854:	e7d9      	b.n	800f80a <_printf_common+0x8e>
	...

0800f858 <_printf_i>:
 800f858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f85c:	7e0f      	ldrb	r7, [r1, #24]
 800f85e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f860:	2f78      	cmp	r7, #120	@ 0x78
 800f862:	4691      	mov	r9, r2
 800f864:	4680      	mov	r8, r0
 800f866:	460c      	mov	r4, r1
 800f868:	469a      	mov	sl, r3
 800f86a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f86e:	d807      	bhi.n	800f880 <_printf_i+0x28>
 800f870:	2f62      	cmp	r7, #98	@ 0x62
 800f872:	d80a      	bhi.n	800f88a <_printf_i+0x32>
 800f874:	2f00      	cmp	r7, #0
 800f876:	f000 80d2 	beq.w	800fa1e <_printf_i+0x1c6>
 800f87a:	2f58      	cmp	r7, #88	@ 0x58
 800f87c:	f000 80b9 	beq.w	800f9f2 <_printf_i+0x19a>
 800f880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f888:	e03a      	b.n	800f900 <_printf_i+0xa8>
 800f88a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f88e:	2b15      	cmp	r3, #21
 800f890:	d8f6      	bhi.n	800f880 <_printf_i+0x28>
 800f892:	a101      	add	r1, pc, #4	@ (adr r1, 800f898 <_printf_i+0x40>)
 800f894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f898:	0800f8f1 	.word	0x0800f8f1
 800f89c:	0800f905 	.word	0x0800f905
 800f8a0:	0800f881 	.word	0x0800f881
 800f8a4:	0800f881 	.word	0x0800f881
 800f8a8:	0800f881 	.word	0x0800f881
 800f8ac:	0800f881 	.word	0x0800f881
 800f8b0:	0800f905 	.word	0x0800f905
 800f8b4:	0800f881 	.word	0x0800f881
 800f8b8:	0800f881 	.word	0x0800f881
 800f8bc:	0800f881 	.word	0x0800f881
 800f8c0:	0800f881 	.word	0x0800f881
 800f8c4:	0800fa05 	.word	0x0800fa05
 800f8c8:	0800f92f 	.word	0x0800f92f
 800f8cc:	0800f9bf 	.word	0x0800f9bf
 800f8d0:	0800f881 	.word	0x0800f881
 800f8d4:	0800f881 	.word	0x0800f881
 800f8d8:	0800fa27 	.word	0x0800fa27
 800f8dc:	0800f881 	.word	0x0800f881
 800f8e0:	0800f92f 	.word	0x0800f92f
 800f8e4:	0800f881 	.word	0x0800f881
 800f8e8:	0800f881 	.word	0x0800f881
 800f8ec:	0800f9c7 	.word	0x0800f9c7
 800f8f0:	6833      	ldr	r3, [r6, #0]
 800f8f2:	1d1a      	adds	r2, r3, #4
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	6032      	str	r2, [r6, #0]
 800f8f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f900:	2301      	movs	r3, #1
 800f902:	e09d      	b.n	800fa40 <_printf_i+0x1e8>
 800f904:	6833      	ldr	r3, [r6, #0]
 800f906:	6820      	ldr	r0, [r4, #0]
 800f908:	1d19      	adds	r1, r3, #4
 800f90a:	6031      	str	r1, [r6, #0]
 800f90c:	0606      	lsls	r6, r0, #24
 800f90e:	d501      	bpl.n	800f914 <_printf_i+0xbc>
 800f910:	681d      	ldr	r5, [r3, #0]
 800f912:	e003      	b.n	800f91c <_printf_i+0xc4>
 800f914:	0645      	lsls	r5, r0, #25
 800f916:	d5fb      	bpl.n	800f910 <_printf_i+0xb8>
 800f918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f91c:	2d00      	cmp	r5, #0
 800f91e:	da03      	bge.n	800f928 <_printf_i+0xd0>
 800f920:	232d      	movs	r3, #45	@ 0x2d
 800f922:	426d      	negs	r5, r5
 800f924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f928:	4859      	ldr	r0, [pc, #356]	@ (800fa90 <_printf_i+0x238>)
 800f92a:	230a      	movs	r3, #10
 800f92c:	e011      	b.n	800f952 <_printf_i+0xfa>
 800f92e:	6821      	ldr	r1, [r4, #0]
 800f930:	6833      	ldr	r3, [r6, #0]
 800f932:	0608      	lsls	r0, r1, #24
 800f934:	f853 5b04 	ldr.w	r5, [r3], #4
 800f938:	d402      	bmi.n	800f940 <_printf_i+0xe8>
 800f93a:	0649      	lsls	r1, r1, #25
 800f93c:	bf48      	it	mi
 800f93e:	b2ad      	uxthmi	r5, r5
 800f940:	2f6f      	cmp	r7, #111	@ 0x6f
 800f942:	4853      	ldr	r0, [pc, #332]	@ (800fa90 <_printf_i+0x238>)
 800f944:	6033      	str	r3, [r6, #0]
 800f946:	bf14      	ite	ne
 800f948:	230a      	movne	r3, #10
 800f94a:	2308      	moveq	r3, #8
 800f94c:	2100      	movs	r1, #0
 800f94e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f952:	6866      	ldr	r6, [r4, #4]
 800f954:	60a6      	str	r6, [r4, #8]
 800f956:	2e00      	cmp	r6, #0
 800f958:	bfa2      	ittt	ge
 800f95a:	6821      	ldrge	r1, [r4, #0]
 800f95c:	f021 0104 	bicge.w	r1, r1, #4
 800f960:	6021      	strge	r1, [r4, #0]
 800f962:	b90d      	cbnz	r5, 800f968 <_printf_i+0x110>
 800f964:	2e00      	cmp	r6, #0
 800f966:	d04b      	beq.n	800fa00 <_printf_i+0x1a8>
 800f968:	4616      	mov	r6, r2
 800f96a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f96e:	fb03 5711 	mls	r7, r3, r1, r5
 800f972:	5dc7      	ldrb	r7, [r0, r7]
 800f974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f978:	462f      	mov	r7, r5
 800f97a:	42bb      	cmp	r3, r7
 800f97c:	460d      	mov	r5, r1
 800f97e:	d9f4      	bls.n	800f96a <_printf_i+0x112>
 800f980:	2b08      	cmp	r3, #8
 800f982:	d10b      	bne.n	800f99c <_printf_i+0x144>
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	07df      	lsls	r7, r3, #31
 800f988:	d508      	bpl.n	800f99c <_printf_i+0x144>
 800f98a:	6923      	ldr	r3, [r4, #16]
 800f98c:	6861      	ldr	r1, [r4, #4]
 800f98e:	4299      	cmp	r1, r3
 800f990:	bfde      	ittt	le
 800f992:	2330      	movle	r3, #48	@ 0x30
 800f994:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f998:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f99c:	1b92      	subs	r2, r2, r6
 800f99e:	6122      	str	r2, [r4, #16]
 800f9a0:	f8cd a000 	str.w	sl, [sp]
 800f9a4:	464b      	mov	r3, r9
 800f9a6:	aa03      	add	r2, sp, #12
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	4640      	mov	r0, r8
 800f9ac:	f7ff fee6 	bl	800f77c <_printf_common>
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	d14a      	bne.n	800fa4a <_printf_i+0x1f2>
 800f9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b8:	b004      	add	sp, #16
 800f9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9be:	6823      	ldr	r3, [r4, #0]
 800f9c0:	f043 0320 	orr.w	r3, r3, #32
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	4833      	ldr	r0, [pc, #204]	@ (800fa94 <_printf_i+0x23c>)
 800f9c8:	2778      	movs	r7, #120	@ 0x78
 800f9ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	6831      	ldr	r1, [r6, #0]
 800f9d2:	061f      	lsls	r7, r3, #24
 800f9d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800f9d8:	d402      	bmi.n	800f9e0 <_printf_i+0x188>
 800f9da:	065f      	lsls	r7, r3, #25
 800f9dc:	bf48      	it	mi
 800f9de:	b2ad      	uxthmi	r5, r5
 800f9e0:	6031      	str	r1, [r6, #0]
 800f9e2:	07d9      	lsls	r1, r3, #31
 800f9e4:	bf44      	itt	mi
 800f9e6:	f043 0320 	orrmi.w	r3, r3, #32
 800f9ea:	6023      	strmi	r3, [r4, #0]
 800f9ec:	b11d      	cbz	r5, 800f9f6 <_printf_i+0x19e>
 800f9ee:	2310      	movs	r3, #16
 800f9f0:	e7ac      	b.n	800f94c <_printf_i+0xf4>
 800f9f2:	4827      	ldr	r0, [pc, #156]	@ (800fa90 <_printf_i+0x238>)
 800f9f4:	e7e9      	b.n	800f9ca <_printf_i+0x172>
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	f023 0320 	bic.w	r3, r3, #32
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	e7f6      	b.n	800f9ee <_printf_i+0x196>
 800fa00:	4616      	mov	r6, r2
 800fa02:	e7bd      	b.n	800f980 <_printf_i+0x128>
 800fa04:	6833      	ldr	r3, [r6, #0]
 800fa06:	6825      	ldr	r5, [r4, #0]
 800fa08:	6961      	ldr	r1, [r4, #20]
 800fa0a:	1d18      	adds	r0, r3, #4
 800fa0c:	6030      	str	r0, [r6, #0]
 800fa0e:	062e      	lsls	r6, r5, #24
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	d501      	bpl.n	800fa18 <_printf_i+0x1c0>
 800fa14:	6019      	str	r1, [r3, #0]
 800fa16:	e002      	b.n	800fa1e <_printf_i+0x1c6>
 800fa18:	0668      	lsls	r0, r5, #25
 800fa1a:	d5fb      	bpl.n	800fa14 <_printf_i+0x1bc>
 800fa1c:	8019      	strh	r1, [r3, #0]
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6123      	str	r3, [r4, #16]
 800fa22:	4616      	mov	r6, r2
 800fa24:	e7bc      	b.n	800f9a0 <_printf_i+0x148>
 800fa26:	6833      	ldr	r3, [r6, #0]
 800fa28:	1d1a      	adds	r2, r3, #4
 800fa2a:	6032      	str	r2, [r6, #0]
 800fa2c:	681e      	ldr	r6, [r3, #0]
 800fa2e:	6862      	ldr	r2, [r4, #4]
 800fa30:	2100      	movs	r1, #0
 800fa32:	4630      	mov	r0, r6
 800fa34:	f7f0 fc5c 	bl	80002f0 <memchr>
 800fa38:	b108      	cbz	r0, 800fa3e <_printf_i+0x1e6>
 800fa3a:	1b80      	subs	r0, r0, r6
 800fa3c:	6060      	str	r0, [r4, #4]
 800fa3e:	6863      	ldr	r3, [r4, #4]
 800fa40:	6123      	str	r3, [r4, #16]
 800fa42:	2300      	movs	r3, #0
 800fa44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa48:	e7aa      	b.n	800f9a0 <_printf_i+0x148>
 800fa4a:	6923      	ldr	r3, [r4, #16]
 800fa4c:	4632      	mov	r2, r6
 800fa4e:	4649      	mov	r1, r9
 800fa50:	4640      	mov	r0, r8
 800fa52:	47d0      	blx	sl
 800fa54:	3001      	adds	r0, #1
 800fa56:	d0ad      	beq.n	800f9b4 <_printf_i+0x15c>
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	079b      	lsls	r3, r3, #30
 800fa5c:	d413      	bmi.n	800fa86 <_printf_i+0x22e>
 800fa5e:	68e0      	ldr	r0, [r4, #12]
 800fa60:	9b03      	ldr	r3, [sp, #12]
 800fa62:	4298      	cmp	r0, r3
 800fa64:	bfb8      	it	lt
 800fa66:	4618      	movlt	r0, r3
 800fa68:	e7a6      	b.n	800f9b8 <_printf_i+0x160>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	4632      	mov	r2, r6
 800fa6e:	4649      	mov	r1, r9
 800fa70:	4640      	mov	r0, r8
 800fa72:	47d0      	blx	sl
 800fa74:	3001      	adds	r0, #1
 800fa76:	d09d      	beq.n	800f9b4 <_printf_i+0x15c>
 800fa78:	3501      	adds	r5, #1
 800fa7a:	68e3      	ldr	r3, [r4, #12]
 800fa7c:	9903      	ldr	r1, [sp, #12]
 800fa7e:	1a5b      	subs	r3, r3, r1
 800fa80:	42ab      	cmp	r3, r5
 800fa82:	dcf2      	bgt.n	800fa6a <_printf_i+0x212>
 800fa84:	e7eb      	b.n	800fa5e <_printf_i+0x206>
 800fa86:	2500      	movs	r5, #0
 800fa88:	f104 0619 	add.w	r6, r4, #25
 800fa8c:	e7f5      	b.n	800fa7a <_printf_i+0x222>
 800fa8e:	bf00      	nop
 800fa90:	08011144 	.word	0x08011144
 800fa94:	08011155 	.word	0x08011155

0800fa98 <__sflush_r>:
 800fa98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa0:	0716      	lsls	r6, r2, #28
 800faa2:	4605      	mov	r5, r0
 800faa4:	460c      	mov	r4, r1
 800faa6:	d454      	bmi.n	800fb52 <__sflush_r+0xba>
 800faa8:	684b      	ldr	r3, [r1, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	dc02      	bgt.n	800fab4 <__sflush_r+0x1c>
 800faae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	dd48      	ble.n	800fb46 <__sflush_r+0xae>
 800fab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fab6:	2e00      	cmp	r6, #0
 800fab8:	d045      	beq.n	800fb46 <__sflush_r+0xae>
 800faba:	2300      	movs	r3, #0
 800fabc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fac0:	682f      	ldr	r7, [r5, #0]
 800fac2:	6a21      	ldr	r1, [r4, #32]
 800fac4:	602b      	str	r3, [r5, #0]
 800fac6:	d030      	beq.n	800fb2a <__sflush_r+0x92>
 800fac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800faca:	89a3      	ldrh	r3, [r4, #12]
 800facc:	0759      	lsls	r1, r3, #29
 800face:	d505      	bpl.n	800fadc <__sflush_r+0x44>
 800fad0:	6863      	ldr	r3, [r4, #4]
 800fad2:	1ad2      	subs	r2, r2, r3
 800fad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fad6:	b10b      	cbz	r3, 800fadc <__sflush_r+0x44>
 800fad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fada:	1ad2      	subs	r2, r2, r3
 800fadc:	2300      	movs	r3, #0
 800fade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fae0:	6a21      	ldr	r1, [r4, #32]
 800fae2:	4628      	mov	r0, r5
 800fae4:	47b0      	blx	r6
 800fae6:	1c43      	adds	r3, r0, #1
 800fae8:	89a3      	ldrh	r3, [r4, #12]
 800faea:	d106      	bne.n	800fafa <__sflush_r+0x62>
 800faec:	6829      	ldr	r1, [r5, #0]
 800faee:	291d      	cmp	r1, #29
 800faf0:	d82b      	bhi.n	800fb4a <__sflush_r+0xb2>
 800faf2:	4a2a      	ldr	r2, [pc, #168]	@ (800fb9c <__sflush_r+0x104>)
 800faf4:	410a      	asrs	r2, r1
 800faf6:	07d6      	lsls	r6, r2, #31
 800faf8:	d427      	bmi.n	800fb4a <__sflush_r+0xb2>
 800fafa:	2200      	movs	r2, #0
 800fafc:	6062      	str	r2, [r4, #4]
 800fafe:	04d9      	lsls	r1, r3, #19
 800fb00:	6922      	ldr	r2, [r4, #16]
 800fb02:	6022      	str	r2, [r4, #0]
 800fb04:	d504      	bpl.n	800fb10 <__sflush_r+0x78>
 800fb06:	1c42      	adds	r2, r0, #1
 800fb08:	d101      	bne.n	800fb0e <__sflush_r+0x76>
 800fb0a:	682b      	ldr	r3, [r5, #0]
 800fb0c:	b903      	cbnz	r3, 800fb10 <__sflush_r+0x78>
 800fb0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb12:	602f      	str	r7, [r5, #0]
 800fb14:	b1b9      	cbz	r1, 800fb46 <__sflush_r+0xae>
 800fb16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb1a:	4299      	cmp	r1, r3
 800fb1c:	d002      	beq.n	800fb24 <__sflush_r+0x8c>
 800fb1e:	4628      	mov	r0, r5
 800fb20:	f7ff fbd4 	bl	800f2cc <_free_r>
 800fb24:	2300      	movs	r3, #0
 800fb26:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb28:	e00d      	b.n	800fb46 <__sflush_r+0xae>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	47b0      	blx	r6
 800fb30:	4602      	mov	r2, r0
 800fb32:	1c50      	adds	r0, r2, #1
 800fb34:	d1c9      	bne.n	800faca <__sflush_r+0x32>
 800fb36:	682b      	ldr	r3, [r5, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d0c6      	beq.n	800faca <__sflush_r+0x32>
 800fb3c:	2b1d      	cmp	r3, #29
 800fb3e:	d001      	beq.n	800fb44 <__sflush_r+0xac>
 800fb40:	2b16      	cmp	r3, #22
 800fb42:	d11e      	bne.n	800fb82 <__sflush_r+0xea>
 800fb44:	602f      	str	r7, [r5, #0]
 800fb46:	2000      	movs	r0, #0
 800fb48:	e022      	b.n	800fb90 <__sflush_r+0xf8>
 800fb4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb4e:	b21b      	sxth	r3, r3
 800fb50:	e01b      	b.n	800fb8a <__sflush_r+0xf2>
 800fb52:	690f      	ldr	r7, [r1, #16]
 800fb54:	2f00      	cmp	r7, #0
 800fb56:	d0f6      	beq.n	800fb46 <__sflush_r+0xae>
 800fb58:	0793      	lsls	r3, r2, #30
 800fb5a:	680e      	ldr	r6, [r1, #0]
 800fb5c:	bf08      	it	eq
 800fb5e:	694b      	ldreq	r3, [r1, #20]
 800fb60:	600f      	str	r7, [r1, #0]
 800fb62:	bf18      	it	ne
 800fb64:	2300      	movne	r3, #0
 800fb66:	eba6 0807 	sub.w	r8, r6, r7
 800fb6a:	608b      	str	r3, [r1, #8]
 800fb6c:	f1b8 0f00 	cmp.w	r8, #0
 800fb70:	dde9      	ble.n	800fb46 <__sflush_r+0xae>
 800fb72:	6a21      	ldr	r1, [r4, #32]
 800fb74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb76:	4643      	mov	r3, r8
 800fb78:	463a      	mov	r2, r7
 800fb7a:	4628      	mov	r0, r5
 800fb7c:	47b0      	blx	r6
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	dc08      	bgt.n	800fb94 <__sflush_r+0xfc>
 800fb82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb8a:	81a3      	strh	r3, [r4, #12]
 800fb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb94:	4407      	add	r7, r0
 800fb96:	eba8 0800 	sub.w	r8, r8, r0
 800fb9a:	e7e7      	b.n	800fb6c <__sflush_r+0xd4>
 800fb9c:	dfbffffe 	.word	0xdfbffffe

0800fba0 <_fflush_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	690b      	ldr	r3, [r1, #16]
 800fba4:	4605      	mov	r5, r0
 800fba6:	460c      	mov	r4, r1
 800fba8:	b913      	cbnz	r3, 800fbb0 <_fflush_r+0x10>
 800fbaa:	2500      	movs	r5, #0
 800fbac:	4628      	mov	r0, r5
 800fbae:	bd38      	pop	{r3, r4, r5, pc}
 800fbb0:	b118      	cbz	r0, 800fbba <_fflush_r+0x1a>
 800fbb2:	6a03      	ldr	r3, [r0, #32]
 800fbb4:	b90b      	cbnz	r3, 800fbba <_fflush_r+0x1a>
 800fbb6:	f7ff fa19 	bl	800efec <__sinit>
 800fbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d0f3      	beq.n	800fbaa <_fflush_r+0xa>
 800fbc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fbc4:	07d0      	lsls	r0, r2, #31
 800fbc6:	d404      	bmi.n	800fbd2 <_fflush_r+0x32>
 800fbc8:	0599      	lsls	r1, r3, #22
 800fbca:	d402      	bmi.n	800fbd2 <_fflush_r+0x32>
 800fbcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbce:	f7ff fb54 	bl	800f27a <__retarget_lock_acquire_recursive>
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	4621      	mov	r1, r4
 800fbd6:	f7ff ff5f 	bl	800fa98 <__sflush_r>
 800fbda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbdc:	07da      	lsls	r2, r3, #31
 800fbde:	4605      	mov	r5, r0
 800fbe0:	d4e4      	bmi.n	800fbac <_fflush_r+0xc>
 800fbe2:	89a3      	ldrh	r3, [r4, #12]
 800fbe4:	059b      	lsls	r3, r3, #22
 800fbe6:	d4e1      	bmi.n	800fbac <_fflush_r+0xc>
 800fbe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbea:	f7ff fb47 	bl	800f27c <__retarget_lock_release_recursive>
 800fbee:	e7dd      	b.n	800fbac <_fflush_r+0xc>

0800fbf0 <fiprintf>:
 800fbf0:	b40e      	push	{r1, r2, r3}
 800fbf2:	b503      	push	{r0, r1, lr}
 800fbf4:	4601      	mov	r1, r0
 800fbf6:	ab03      	add	r3, sp, #12
 800fbf8:	4805      	ldr	r0, [pc, #20]	@ (800fc10 <fiprintf+0x20>)
 800fbfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbfe:	6800      	ldr	r0, [r0, #0]
 800fc00:	9301      	str	r3, [sp, #4]
 800fc02:	f000 f89d 	bl	800fd40 <_vfiprintf_r>
 800fc06:	b002      	add	sp, #8
 800fc08:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc0c:	b003      	add	sp, #12
 800fc0e:	4770      	bx	lr
 800fc10:	24000034 	.word	0x24000034

0800fc14 <memmove>:
 800fc14:	4288      	cmp	r0, r1
 800fc16:	b510      	push	{r4, lr}
 800fc18:	eb01 0402 	add.w	r4, r1, r2
 800fc1c:	d902      	bls.n	800fc24 <memmove+0x10>
 800fc1e:	4284      	cmp	r4, r0
 800fc20:	4623      	mov	r3, r4
 800fc22:	d807      	bhi.n	800fc34 <memmove+0x20>
 800fc24:	1e43      	subs	r3, r0, #1
 800fc26:	42a1      	cmp	r1, r4
 800fc28:	d008      	beq.n	800fc3c <memmove+0x28>
 800fc2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc32:	e7f8      	b.n	800fc26 <memmove+0x12>
 800fc34:	4402      	add	r2, r0
 800fc36:	4601      	mov	r1, r0
 800fc38:	428a      	cmp	r2, r1
 800fc3a:	d100      	bne.n	800fc3e <memmove+0x2a>
 800fc3c:	bd10      	pop	{r4, pc}
 800fc3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc46:	e7f7      	b.n	800fc38 <memmove+0x24>

0800fc48 <_sbrk_r>:
 800fc48:	b538      	push	{r3, r4, r5, lr}
 800fc4a:	4d06      	ldr	r5, [pc, #24]	@ (800fc64 <_sbrk_r+0x1c>)
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	4604      	mov	r4, r0
 800fc50:	4608      	mov	r0, r1
 800fc52:	602b      	str	r3, [r5, #0]
 800fc54:	f7f4 fcf2 	bl	800463c <_sbrk>
 800fc58:	1c43      	adds	r3, r0, #1
 800fc5a:	d102      	bne.n	800fc62 <_sbrk_r+0x1a>
 800fc5c:	682b      	ldr	r3, [r5, #0]
 800fc5e:	b103      	cbz	r3, 800fc62 <_sbrk_r+0x1a>
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	bd38      	pop	{r3, r4, r5, pc}
 800fc64:	240007c0 	.word	0x240007c0

0800fc68 <memcpy>:
 800fc68:	440a      	add	r2, r1
 800fc6a:	4291      	cmp	r1, r2
 800fc6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc70:	d100      	bne.n	800fc74 <memcpy+0xc>
 800fc72:	4770      	bx	lr
 800fc74:	b510      	push	{r4, lr}
 800fc76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc7e:	4291      	cmp	r1, r2
 800fc80:	d1f9      	bne.n	800fc76 <memcpy+0xe>
 800fc82:	bd10      	pop	{r4, pc}

0800fc84 <abort>:
 800fc84:	b508      	push	{r3, lr}
 800fc86:	2006      	movs	r0, #6
 800fc88:	f000 fa2e 	bl	80100e8 <raise>
 800fc8c:	2001      	movs	r0, #1
 800fc8e:	f7f4 fc5d 	bl	800454c <_exit>

0800fc92 <_realloc_r>:
 800fc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc96:	4680      	mov	r8, r0
 800fc98:	4615      	mov	r5, r2
 800fc9a:	460c      	mov	r4, r1
 800fc9c:	b921      	cbnz	r1, 800fca8 <_realloc_r+0x16>
 800fc9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fca2:	4611      	mov	r1, r2
 800fca4:	f7ff bb86 	b.w	800f3b4 <_malloc_r>
 800fca8:	b92a      	cbnz	r2, 800fcb6 <_realloc_r+0x24>
 800fcaa:	f7ff fb0f 	bl	800f2cc <_free_r>
 800fcae:	2400      	movs	r4, #0
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb6:	f000 fa33 	bl	8010120 <_malloc_usable_size_r>
 800fcba:	4285      	cmp	r5, r0
 800fcbc:	4606      	mov	r6, r0
 800fcbe:	d802      	bhi.n	800fcc6 <_realloc_r+0x34>
 800fcc0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fcc4:	d8f4      	bhi.n	800fcb0 <_realloc_r+0x1e>
 800fcc6:	4629      	mov	r1, r5
 800fcc8:	4640      	mov	r0, r8
 800fcca:	f7ff fb73 	bl	800f3b4 <_malloc_r>
 800fcce:	4607      	mov	r7, r0
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	d0ec      	beq.n	800fcae <_realloc_r+0x1c>
 800fcd4:	42b5      	cmp	r5, r6
 800fcd6:	462a      	mov	r2, r5
 800fcd8:	4621      	mov	r1, r4
 800fcda:	bf28      	it	cs
 800fcdc:	4632      	movcs	r2, r6
 800fcde:	f7ff ffc3 	bl	800fc68 <memcpy>
 800fce2:	4621      	mov	r1, r4
 800fce4:	4640      	mov	r0, r8
 800fce6:	f7ff faf1 	bl	800f2cc <_free_r>
 800fcea:	463c      	mov	r4, r7
 800fcec:	e7e0      	b.n	800fcb0 <_realloc_r+0x1e>

0800fcee <__sfputc_r>:
 800fcee:	6893      	ldr	r3, [r2, #8]
 800fcf0:	3b01      	subs	r3, #1
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	b410      	push	{r4}
 800fcf6:	6093      	str	r3, [r2, #8]
 800fcf8:	da08      	bge.n	800fd0c <__sfputc_r+0x1e>
 800fcfa:	6994      	ldr	r4, [r2, #24]
 800fcfc:	42a3      	cmp	r3, r4
 800fcfe:	db01      	blt.n	800fd04 <__sfputc_r+0x16>
 800fd00:	290a      	cmp	r1, #10
 800fd02:	d103      	bne.n	800fd0c <__sfputc_r+0x1e>
 800fd04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd08:	f000 b932 	b.w	800ff70 <__swbuf_r>
 800fd0c:	6813      	ldr	r3, [r2, #0]
 800fd0e:	1c58      	adds	r0, r3, #1
 800fd10:	6010      	str	r0, [r2, #0]
 800fd12:	7019      	strb	r1, [r3, #0]
 800fd14:	4608      	mov	r0, r1
 800fd16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd1a:	4770      	bx	lr

0800fd1c <__sfputs_r>:
 800fd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd1e:	4606      	mov	r6, r0
 800fd20:	460f      	mov	r7, r1
 800fd22:	4614      	mov	r4, r2
 800fd24:	18d5      	adds	r5, r2, r3
 800fd26:	42ac      	cmp	r4, r5
 800fd28:	d101      	bne.n	800fd2e <__sfputs_r+0x12>
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	e007      	b.n	800fd3e <__sfputs_r+0x22>
 800fd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd32:	463a      	mov	r2, r7
 800fd34:	4630      	mov	r0, r6
 800fd36:	f7ff ffda 	bl	800fcee <__sfputc_r>
 800fd3a:	1c43      	adds	r3, r0, #1
 800fd3c:	d1f3      	bne.n	800fd26 <__sfputs_r+0xa>
 800fd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fd40 <_vfiprintf_r>:
 800fd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd44:	460d      	mov	r5, r1
 800fd46:	b09d      	sub	sp, #116	@ 0x74
 800fd48:	4614      	mov	r4, r2
 800fd4a:	4698      	mov	r8, r3
 800fd4c:	4606      	mov	r6, r0
 800fd4e:	b118      	cbz	r0, 800fd58 <_vfiprintf_r+0x18>
 800fd50:	6a03      	ldr	r3, [r0, #32]
 800fd52:	b90b      	cbnz	r3, 800fd58 <_vfiprintf_r+0x18>
 800fd54:	f7ff f94a 	bl	800efec <__sinit>
 800fd58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd5a:	07d9      	lsls	r1, r3, #31
 800fd5c:	d405      	bmi.n	800fd6a <_vfiprintf_r+0x2a>
 800fd5e:	89ab      	ldrh	r3, [r5, #12]
 800fd60:	059a      	lsls	r2, r3, #22
 800fd62:	d402      	bmi.n	800fd6a <_vfiprintf_r+0x2a>
 800fd64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd66:	f7ff fa88 	bl	800f27a <__retarget_lock_acquire_recursive>
 800fd6a:	89ab      	ldrh	r3, [r5, #12]
 800fd6c:	071b      	lsls	r3, r3, #28
 800fd6e:	d501      	bpl.n	800fd74 <_vfiprintf_r+0x34>
 800fd70:	692b      	ldr	r3, [r5, #16]
 800fd72:	b99b      	cbnz	r3, 800fd9c <_vfiprintf_r+0x5c>
 800fd74:	4629      	mov	r1, r5
 800fd76:	4630      	mov	r0, r6
 800fd78:	f000 f938 	bl	800ffec <__swsetup_r>
 800fd7c:	b170      	cbz	r0, 800fd9c <_vfiprintf_r+0x5c>
 800fd7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd80:	07dc      	lsls	r4, r3, #31
 800fd82:	d504      	bpl.n	800fd8e <_vfiprintf_r+0x4e>
 800fd84:	f04f 30ff 	mov.w	r0, #4294967295
 800fd88:	b01d      	add	sp, #116	@ 0x74
 800fd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd8e:	89ab      	ldrh	r3, [r5, #12]
 800fd90:	0598      	lsls	r0, r3, #22
 800fd92:	d4f7      	bmi.n	800fd84 <_vfiprintf_r+0x44>
 800fd94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd96:	f7ff fa71 	bl	800f27c <__retarget_lock_release_recursive>
 800fd9a:	e7f3      	b.n	800fd84 <_vfiprintf_r+0x44>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fda0:	2320      	movs	r3, #32
 800fda2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fda6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdaa:	2330      	movs	r3, #48	@ 0x30
 800fdac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ff5c <_vfiprintf_r+0x21c>
 800fdb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fdb4:	f04f 0901 	mov.w	r9, #1
 800fdb8:	4623      	mov	r3, r4
 800fdba:	469a      	mov	sl, r3
 800fdbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdc0:	b10a      	cbz	r2, 800fdc6 <_vfiprintf_r+0x86>
 800fdc2:	2a25      	cmp	r2, #37	@ 0x25
 800fdc4:	d1f9      	bne.n	800fdba <_vfiprintf_r+0x7a>
 800fdc6:	ebba 0b04 	subs.w	fp, sl, r4
 800fdca:	d00b      	beq.n	800fde4 <_vfiprintf_r+0xa4>
 800fdcc:	465b      	mov	r3, fp
 800fdce:	4622      	mov	r2, r4
 800fdd0:	4629      	mov	r1, r5
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	f7ff ffa2 	bl	800fd1c <__sfputs_r>
 800fdd8:	3001      	adds	r0, #1
 800fdda:	f000 80a7 	beq.w	800ff2c <_vfiprintf_r+0x1ec>
 800fdde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fde0:	445a      	add	r2, fp
 800fde2:	9209      	str	r2, [sp, #36]	@ 0x24
 800fde4:	f89a 3000 	ldrb.w	r3, [sl]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 809f 	beq.w	800ff2c <_vfiprintf_r+0x1ec>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	f04f 32ff 	mov.w	r2, #4294967295
 800fdf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdf8:	f10a 0a01 	add.w	sl, sl, #1
 800fdfc:	9304      	str	r3, [sp, #16]
 800fdfe:	9307      	str	r3, [sp, #28]
 800fe00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fe04:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe06:	4654      	mov	r4, sl
 800fe08:	2205      	movs	r2, #5
 800fe0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe0e:	4853      	ldr	r0, [pc, #332]	@ (800ff5c <_vfiprintf_r+0x21c>)
 800fe10:	f7f0 fa6e 	bl	80002f0 <memchr>
 800fe14:	9a04      	ldr	r2, [sp, #16]
 800fe16:	b9d8      	cbnz	r0, 800fe50 <_vfiprintf_r+0x110>
 800fe18:	06d1      	lsls	r1, r2, #27
 800fe1a:	bf44      	itt	mi
 800fe1c:	2320      	movmi	r3, #32
 800fe1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe22:	0713      	lsls	r3, r2, #28
 800fe24:	bf44      	itt	mi
 800fe26:	232b      	movmi	r3, #43	@ 0x2b
 800fe28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe2c:	f89a 3000 	ldrb.w	r3, [sl]
 800fe30:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe32:	d015      	beq.n	800fe60 <_vfiprintf_r+0x120>
 800fe34:	9a07      	ldr	r2, [sp, #28]
 800fe36:	4654      	mov	r4, sl
 800fe38:	2000      	movs	r0, #0
 800fe3a:	f04f 0c0a 	mov.w	ip, #10
 800fe3e:	4621      	mov	r1, r4
 800fe40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe44:	3b30      	subs	r3, #48	@ 0x30
 800fe46:	2b09      	cmp	r3, #9
 800fe48:	d94b      	bls.n	800fee2 <_vfiprintf_r+0x1a2>
 800fe4a:	b1b0      	cbz	r0, 800fe7a <_vfiprintf_r+0x13a>
 800fe4c:	9207      	str	r2, [sp, #28]
 800fe4e:	e014      	b.n	800fe7a <_vfiprintf_r+0x13a>
 800fe50:	eba0 0308 	sub.w	r3, r0, r8
 800fe54:	fa09 f303 	lsl.w	r3, r9, r3
 800fe58:	4313      	orrs	r3, r2
 800fe5a:	9304      	str	r3, [sp, #16]
 800fe5c:	46a2      	mov	sl, r4
 800fe5e:	e7d2      	b.n	800fe06 <_vfiprintf_r+0xc6>
 800fe60:	9b03      	ldr	r3, [sp, #12]
 800fe62:	1d19      	adds	r1, r3, #4
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	9103      	str	r1, [sp, #12]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	bfbb      	ittet	lt
 800fe6c:	425b      	neglt	r3, r3
 800fe6e:	f042 0202 	orrlt.w	r2, r2, #2
 800fe72:	9307      	strge	r3, [sp, #28]
 800fe74:	9307      	strlt	r3, [sp, #28]
 800fe76:	bfb8      	it	lt
 800fe78:	9204      	strlt	r2, [sp, #16]
 800fe7a:	7823      	ldrb	r3, [r4, #0]
 800fe7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe7e:	d10a      	bne.n	800fe96 <_vfiprintf_r+0x156>
 800fe80:	7863      	ldrb	r3, [r4, #1]
 800fe82:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe84:	d132      	bne.n	800feec <_vfiprintf_r+0x1ac>
 800fe86:	9b03      	ldr	r3, [sp, #12]
 800fe88:	1d1a      	adds	r2, r3, #4
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	9203      	str	r2, [sp, #12]
 800fe8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe92:	3402      	adds	r4, #2
 800fe94:	9305      	str	r3, [sp, #20]
 800fe96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ff6c <_vfiprintf_r+0x22c>
 800fe9a:	7821      	ldrb	r1, [r4, #0]
 800fe9c:	2203      	movs	r2, #3
 800fe9e:	4650      	mov	r0, sl
 800fea0:	f7f0 fa26 	bl	80002f0 <memchr>
 800fea4:	b138      	cbz	r0, 800feb6 <_vfiprintf_r+0x176>
 800fea6:	9b04      	ldr	r3, [sp, #16]
 800fea8:	eba0 000a 	sub.w	r0, r0, sl
 800feac:	2240      	movs	r2, #64	@ 0x40
 800feae:	4082      	lsls	r2, r0
 800feb0:	4313      	orrs	r3, r2
 800feb2:	3401      	adds	r4, #1
 800feb4:	9304      	str	r3, [sp, #16]
 800feb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feba:	4829      	ldr	r0, [pc, #164]	@ (800ff60 <_vfiprintf_r+0x220>)
 800febc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fec0:	2206      	movs	r2, #6
 800fec2:	f7f0 fa15 	bl	80002f0 <memchr>
 800fec6:	2800      	cmp	r0, #0
 800fec8:	d03f      	beq.n	800ff4a <_vfiprintf_r+0x20a>
 800feca:	4b26      	ldr	r3, [pc, #152]	@ (800ff64 <_vfiprintf_r+0x224>)
 800fecc:	bb1b      	cbnz	r3, 800ff16 <_vfiprintf_r+0x1d6>
 800fece:	9b03      	ldr	r3, [sp, #12]
 800fed0:	3307      	adds	r3, #7
 800fed2:	f023 0307 	bic.w	r3, r3, #7
 800fed6:	3308      	adds	r3, #8
 800fed8:	9303      	str	r3, [sp, #12]
 800feda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fedc:	443b      	add	r3, r7
 800fede:	9309      	str	r3, [sp, #36]	@ 0x24
 800fee0:	e76a      	b.n	800fdb8 <_vfiprintf_r+0x78>
 800fee2:	fb0c 3202 	mla	r2, ip, r2, r3
 800fee6:	460c      	mov	r4, r1
 800fee8:	2001      	movs	r0, #1
 800feea:	e7a8      	b.n	800fe3e <_vfiprintf_r+0xfe>
 800feec:	2300      	movs	r3, #0
 800feee:	3401      	adds	r4, #1
 800fef0:	9305      	str	r3, [sp, #20]
 800fef2:	4619      	mov	r1, r3
 800fef4:	f04f 0c0a 	mov.w	ip, #10
 800fef8:	4620      	mov	r0, r4
 800fefa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fefe:	3a30      	subs	r2, #48	@ 0x30
 800ff00:	2a09      	cmp	r2, #9
 800ff02:	d903      	bls.n	800ff0c <_vfiprintf_r+0x1cc>
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d0c6      	beq.n	800fe96 <_vfiprintf_r+0x156>
 800ff08:	9105      	str	r1, [sp, #20]
 800ff0a:	e7c4      	b.n	800fe96 <_vfiprintf_r+0x156>
 800ff0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff10:	4604      	mov	r4, r0
 800ff12:	2301      	movs	r3, #1
 800ff14:	e7f0      	b.n	800fef8 <_vfiprintf_r+0x1b8>
 800ff16:	ab03      	add	r3, sp, #12
 800ff18:	9300      	str	r3, [sp, #0]
 800ff1a:	462a      	mov	r2, r5
 800ff1c:	4b12      	ldr	r3, [pc, #72]	@ (800ff68 <_vfiprintf_r+0x228>)
 800ff1e:	a904      	add	r1, sp, #16
 800ff20:	4630      	mov	r0, r6
 800ff22:	f3af 8000 	nop.w
 800ff26:	4607      	mov	r7, r0
 800ff28:	1c78      	adds	r0, r7, #1
 800ff2a:	d1d6      	bne.n	800feda <_vfiprintf_r+0x19a>
 800ff2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff2e:	07d9      	lsls	r1, r3, #31
 800ff30:	d405      	bmi.n	800ff3e <_vfiprintf_r+0x1fe>
 800ff32:	89ab      	ldrh	r3, [r5, #12]
 800ff34:	059a      	lsls	r2, r3, #22
 800ff36:	d402      	bmi.n	800ff3e <_vfiprintf_r+0x1fe>
 800ff38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff3a:	f7ff f99f 	bl	800f27c <__retarget_lock_release_recursive>
 800ff3e:	89ab      	ldrh	r3, [r5, #12]
 800ff40:	065b      	lsls	r3, r3, #25
 800ff42:	f53f af1f 	bmi.w	800fd84 <_vfiprintf_r+0x44>
 800ff46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff48:	e71e      	b.n	800fd88 <_vfiprintf_r+0x48>
 800ff4a:	ab03      	add	r3, sp, #12
 800ff4c:	9300      	str	r3, [sp, #0]
 800ff4e:	462a      	mov	r2, r5
 800ff50:	4b05      	ldr	r3, [pc, #20]	@ (800ff68 <_vfiprintf_r+0x228>)
 800ff52:	a904      	add	r1, sp, #16
 800ff54:	4630      	mov	r0, r6
 800ff56:	f7ff fc7f 	bl	800f858 <_printf_i>
 800ff5a:	e7e4      	b.n	800ff26 <_vfiprintf_r+0x1e6>
 800ff5c:	08011133 	.word	0x08011133
 800ff60:	0801113d 	.word	0x0801113d
 800ff64:	00000000 	.word	0x00000000
 800ff68:	0800fd1d 	.word	0x0800fd1d
 800ff6c:	08011139 	.word	0x08011139

0800ff70 <__swbuf_r>:
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff72:	460e      	mov	r6, r1
 800ff74:	4614      	mov	r4, r2
 800ff76:	4605      	mov	r5, r0
 800ff78:	b118      	cbz	r0, 800ff82 <__swbuf_r+0x12>
 800ff7a:	6a03      	ldr	r3, [r0, #32]
 800ff7c:	b90b      	cbnz	r3, 800ff82 <__swbuf_r+0x12>
 800ff7e:	f7ff f835 	bl	800efec <__sinit>
 800ff82:	69a3      	ldr	r3, [r4, #24]
 800ff84:	60a3      	str	r3, [r4, #8]
 800ff86:	89a3      	ldrh	r3, [r4, #12]
 800ff88:	071a      	lsls	r2, r3, #28
 800ff8a:	d501      	bpl.n	800ff90 <__swbuf_r+0x20>
 800ff8c:	6923      	ldr	r3, [r4, #16]
 800ff8e:	b943      	cbnz	r3, 800ffa2 <__swbuf_r+0x32>
 800ff90:	4621      	mov	r1, r4
 800ff92:	4628      	mov	r0, r5
 800ff94:	f000 f82a 	bl	800ffec <__swsetup_r>
 800ff98:	b118      	cbz	r0, 800ffa2 <__swbuf_r+0x32>
 800ff9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffa2:	6823      	ldr	r3, [r4, #0]
 800ffa4:	6922      	ldr	r2, [r4, #16]
 800ffa6:	1a98      	subs	r0, r3, r2
 800ffa8:	6963      	ldr	r3, [r4, #20]
 800ffaa:	b2f6      	uxtb	r6, r6
 800ffac:	4283      	cmp	r3, r0
 800ffae:	4637      	mov	r7, r6
 800ffb0:	dc05      	bgt.n	800ffbe <__swbuf_r+0x4e>
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	f7ff fdf3 	bl	800fba0 <_fflush_r>
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	d1ed      	bne.n	800ff9a <__swbuf_r+0x2a>
 800ffbe:	68a3      	ldr	r3, [r4, #8]
 800ffc0:	3b01      	subs	r3, #1
 800ffc2:	60a3      	str	r3, [r4, #8]
 800ffc4:	6823      	ldr	r3, [r4, #0]
 800ffc6:	1c5a      	adds	r2, r3, #1
 800ffc8:	6022      	str	r2, [r4, #0]
 800ffca:	701e      	strb	r6, [r3, #0]
 800ffcc:	6962      	ldr	r2, [r4, #20]
 800ffce:	1c43      	adds	r3, r0, #1
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d004      	beq.n	800ffde <__swbuf_r+0x6e>
 800ffd4:	89a3      	ldrh	r3, [r4, #12]
 800ffd6:	07db      	lsls	r3, r3, #31
 800ffd8:	d5e1      	bpl.n	800ff9e <__swbuf_r+0x2e>
 800ffda:	2e0a      	cmp	r6, #10
 800ffdc:	d1df      	bne.n	800ff9e <__swbuf_r+0x2e>
 800ffde:	4621      	mov	r1, r4
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	f7ff fddd 	bl	800fba0 <_fflush_r>
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	d0d9      	beq.n	800ff9e <__swbuf_r+0x2e>
 800ffea:	e7d6      	b.n	800ff9a <__swbuf_r+0x2a>

0800ffec <__swsetup_r>:
 800ffec:	b538      	push	{r3, r4, r5, lr}
 800ffee:	4b29      	ldr	r3, [pc, #164]	@ (8010094 <__swsetup_r+0xa8>)
 800fff0:	4605      	mov	r5, r0
 800fff2:	6818      	ldr	r0, [r3, #0]
 800fff4:	460c      	mov	r4, r1
 800fff6:	b118      	cbz	r0, 8010000 <__swsetup_r+0x14>
 800fff8:	6a03      	ldr	r3, [r0, #32]
 800fffa:	b90b      	cbnz	r3, 8010000 <__swsetup_r+0x14>
 800fffc:	f7fe fff6 	bl	800efec <__sinit>
 8010000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010004:	0719      	lsls	r1, r3, #28
 8010006:	d422      	bmi.n	801004e <__swsetup_r+0x62>
 8010008:	06da      	lsls	r2, r3, #27
 801000a:	d407      	bmi.n	801001c <__swsetup_r+0x30>
 801000c:	2209      	movs	r2, #9
 801000e:	602a      	str	r2, [r5, #0]
 8010010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010014:	81a3      	strh	r3, [r4, #12]
 8010016:	f04f 30ff 	mov.w	r0, #4294967295
 801001a:	e033      	b.n	8010084 <__swsetup_r+0x98>
 801001c:	0758      	lsls	r0, r3, #29
 801001e:	d512      	bpl.n	8010046 <__swsetup_r+0x5a>
 8010020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010022:	b141      	cbz	r1, 8010036 <__swsetup_r+0x4a>
 8010024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010028:	4299      	cmp	r1, r3
 801002a:	d002      	beq.n	8010032 <__swsetup_r+0x46>
 801002c:	4628      	mov	r0, r5
 801002e:	f7ff f94d 	bl	800f2cc <_free_r>
 8010032:	2300      	movs	r3, #0
 8010034:	6363      	str	r3, [r4, #52]	@ 0x34
 8010036:	89a3      	ldrh	r3, [r4, #12]
 8010038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801003c:	81a3      	strh	r3, [r4, #12]
 801003e:	2300      	movs	r3, #0
 8010040:	6063      	str	r3, [r4, #4]
 8010042:	6923      	ldr	r3, [r4, #16]
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	89a3      	ldrh	r3, [r4, #12]
 8010048:	f043 0308 	orr.w	r3, r3, #8
 801004c:	81a3      	strh	r3, [r4, #12]
 801004e:	6923      	ldr	r3, [r4, #16]
 8010050:	b94b      	cbnz	r3, 8010066 <__swsetup_r+0x7a>
 8010052:	89a3      	ldrh	r3, [r4, #12]
 8010054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801005c:	d003      	beq.n	8010066 <__swsetup_r+0x7a>
 801005e:	4621      	mov	r1, r4
 8010060:	4628      	mov	r0, r5
 8010062:	f000 f88b 	bl	801017c <__smakebuf_r>
 8010066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801006a:	f013 0201 	ands.w	r2, r3, #1
 801006e:	d00a      	beq.n	8010086 <__swsetup_r+0x9a>
 8010070:	2200      	movs	r2, #0
 8010072:	60a2      	str	r2, [r4, #8]
 8010074:	6962      	ldr	r2, [r4, #20]
 8010076:	4252      	negs	r2, r2
 8010078:	61a2      	str	r2, [r4, #24]
 801007a:	6922      	ldr	r2, [r4, #16]
 801007c:	b942      	cbnz	r2, 8010090 <__swsetup_r+0xa4>
 801007e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010082:	d1c5      	bne.n	8010010 <__swsetup_r+0x24>
 8010084:	bd38      	pop	{r3, r4, r5, pc}
 8010086:	0799      	lsls	r1, r3, #30
 8010088:	bf58      	it	pl
 801008a:	6962      	ldrpl	r2, [r4, #20]
 801008c:	60a2      	str	r2, [r4, #8]
 801008e:	e7f4      	b.n	801007a <__swsetup_r+0x8e>
 8010090:	2000      	movs	r0, #0
 8010092:	e7f7      	b.n	8010084 <__swsetup_r+0x98>
 8010094:	24000034 	.word	0x24000034

08010098 <_raise_r>:
 8010098:	291f      	cmp	r1, #31
 801009a:	b538      	push	{r3, r4, r5, lr}
 801009c:	4605      	mov	r5, r0
 801009e:	460c      	mov	r4, r1
 80100a0:	d904      	bls.n	80100ac <_raise_r+0x14>
 80100a2:	2316      	movs	r3, #22
 80100a4:	6003      	str	r3, [r0, #0]
 80100a6:	f04f 30ff 	mov.w	r0, #4294967295
 80100aa:	bd38      	pop	{r3, r4, r5, pc}
 80100ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80100ae:	b112      	cbz	r2, 80100b6 <_raise_r+0x1e>
 80100b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80100b4:	b94b      	cbnz	r3, 80100ca <_raise_r+0x32>
 80100b6:	4628      	mov	r0, r5
 80100b8:	f000 f830 	bl	801011c <_getpid_r>
 80100bc:	4622      	mov	r2, r4
 80100be:	4601      	mov	r1, r0
 80100c0:	4628      	mov	r0, r5
 80100c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100c6:	f000 b817 	b.w	80100f8 <_kill_r>
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d00a      	beq.n	80100e4 <_raise_r+0x4c>
 80100ce:	1c59      	adds	r1, r3, #1
 80100d0:	d103      	bne.n	80100da <_raise_r+0x42>
 80100d2:	2316      	movs	r3, #22
 80100d4:	6003      	str	r3, [r0, #0]
 80100d6:	2001      	movs	r0, #1
 80100d8:	e7e7      	b.n	80100aa <_raise_r+0x12>
 80100da:	2100      	movs	r1, #0
 80100dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80100e0:	4620      	mov	r0, r4
 80100e2:	4798      	blx	r3
 80100e4:	2000      	movs	r0, #0
 80100e6:	e7e0      	b.n	80100aa <_raise_r+0x12>

080100e8 <raise>:
 80100e8:	4b02      	ldr	r3, [pc, #8]	@ (80100f4 <raise+0xc>)
 80100ea:	4601      	mov	r1, r0
 80100ec:	6818      	ldr	r0, [r3, #0]
 80100ee:	f7ff bfd3 	b.w	8010098 <_raise_r>
 80100f2:	bf00      	nop
 80100f4:	24000034 	.word	0x24000034

080100f8 <_kill_r>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	4d07      	ldr	r5, [pc, #28]	@ (8010118 <_kill_r+0x20>)
 80100fc:	2300      	movs	r3, #0
 80100fe:	4604      	mov	r4, r0
 8010100:	4608      	mov	r0, r1
 8010102:	4611      	mov	r1, r2
 8010104:	602b      	str	r3, [r5, #0]
 8010106:	f7f4 fa11 	bl	800452c <_kill>
 801010a:	1c43      	adds	r3, r0, #1
 801010c:	d102      	bne.n	8010114 <_kill_r+0x1c>
 801010e:	682b      	ldr	r3, [r5, #0]
 8010110:	b103      	cbz	r3, 8010114 <_kill_r+0x1c>
 8010112:	6023      	str	r3, [r4, #0]
 8010114:	bd38      	pop	{r3, r4, r5, pc}
 8010116:	bf00      	nop
 8010118:	240007c0 	.word	0x240007c0

0801011c <_getpid_r>:
 801011c:	f7f4 b9fe 	b.w	800451c <_getpid>

08010120 <_malloc_usable_size_r>:
 8010120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010124:	1f18      	subs	r0, r3, #4
 8010126:	2b00      	cmp	r3, #0
 8010128:	bfbc      	itt	lt
 801012a:	580b      	ldrlt	r3, [r1, r0]
 801012c:	18c0      	addlt	r0, r0, r3
 801012e:	4770      	bx	lr

08010130 <__swhatbuf_r>:
 8010130:	b570      	push	{r4, r5, r6, lr}
 8010132:	460c      	mov	r4, r1
 8010134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010138:	2900      	cmp	r1, #0
 801013a:	b096      	sub	sp, #88	@ 0x58
 801013c:	4615      	mov	r5, r2
 801013e:	461e      	mov	r6, r3
 8010140:	da0d      	bge.n	801015e <__swhatbuf_r+0x2e>
 8010142:	89a3      	ldrh	r3, [r4, #12]
 8010144:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010148:	f04f 0100 	mov.w	r1, #0
 801014c:	bf14      	ite	ne
 801014e:	2340      	movne	r3, #64	@ 0x40
 8010150:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010154:	2000      	movs	r0, #0
 8010156:	6031      	str	r1, [r6, #0]
 8010158:	602b      	str	r3, [r5, #0]
 801015a:	b016      	add	sp, #88	@ 0x58
 801015c:	bd70      	pop	{r4, r5, r6, pc}
 801015e:	466a      	mov	r2, sp
 8010160:	f000 f848 	bl	80101f4 <_fstat_r>
 8010164:	2800      	cmp	r0, #0
 8010166:	dbec      	blt.n	8010142 <__swhatbuf_r+0x12>
 8010168:	9901      	ldr	r1, [sp, #4]
 801016a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801016e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010172:	4259      	negs	r1, r3
 8010174:	4159      	adcs	r1, r3
 8010176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801017a:	e7eb      	b.n	8010154 <__swhatbuf_r+0x24>

0801017c <__smakebuf_r>:
 801017c:	898b      	ldrh	r3, [r1, #12]
 801017e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010180:	079d      	lsls	r5, r3, #30
 8010182:	4606      	mov	r6, r0
 8010184:	460c      	mov	r4, r1
 8010186:	d507      	bpl.n	8010198 <__smakebuf_r+0x1c>
 8010188:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	6123      	str	r3, [r4, #16]
 8010190:	2301      	movs	r3, #1
 8010192:	6163      	str	r3, [r4, #20]
 8010194:	b003      	add	sp, #12
 8010196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010198:	ab01      	add	r3, sp, #4
 801019a:	466a      	mov	r2, sp
 801019c:	f7ff ffc8 	bl	8010130 <__swhatbuf_r>
 80101a0:	9f00      	ldr	r7, [sp, #0]
 80101a2:	4605      	mov	r5, r0
 80101a4:	4639      	mov	r1, r7
 80101a6:	4630      	mov	r0, r6
 80101a8:	f7ff f904 	bl	800f3b4 <_malloc_r>
 80101ac:	b948      	cbnz	r0, 80101c2 <__smakebuf_r+0x46>
 80101ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101b2:	059a      	lsls	r2, r3, #22
 80101b4:	d4ee      	bmi.n	8010194 <__smakebuf_r+0x18>
 80101b6:	f023 0303 	bic.w	r3, r3, #3
 80101ba:	f043 0302 	orr.w	r3, r3, #2
 80101be:	81a3      	strh	r3, [r4, #12]
 80101c0:	e7e2      	b.n	8010188 <__smakebuf_r+0xc>
 80101c2:	89a3      	ldrh	r3, [r4, #12]
 80101c4:	6020      	str	r0, [r4, #0]
 80101c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101ca:	81a3      	strh	r3, [r4, #12]
 80101cc:	9b01      	ldr	r3, [sp, #4]
 80101ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80101d2:	b15b      	cbz	r3, 80101ec <__smakebuf_r+0x70>
 80101d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101d8:	4630      	mov	r0, r6
 80101da:	f000 f81d 	bl	8010218 <_isatty_r>
 80101de:	b128      	cbz	r0, 80101ec <__smakebuf_r+0x70>
 80101e0:	89a3      	ldrh	r3, [r4, #12]
 80101e2:	f023 0303 	bic.w	r3, r3, #3
 80101e6:	f043 0301 	orr.w	r3, r3, #1
 80101ea:	81a3      	strh	r3, [r4, #12]
 80101ec:	89a3      	ldrh	r3, [r4, #12]
 80101ee:	431d      	orrs	r5, r3
 80101f0:	81a5      	strh	r5, [r4, #12]
 80101f2:	e7cf      	b.n	8010194 <__smakebuf_r+0x18>

080101f4 <_fstat_r>:
 80101f4:	b538      	push	{r3, r4, r5, lr}
 80101f6:	4d07      	ldr	r5, [pc, #28]	@ (8010214 <_fstat_r+0x20>)
 80101f8:	2300      	movs	r3, #0
 80101fa:	4604      	mov	r4, r0
 80101fc:	4608      	mov	r0, r1
 80101fe:	4611      	mov	r1, r2
 8010200:	602b      	str	r3, [r5, #0]
 8010202:	f7f4 f9f3 	bl	80045ec <_fstat>
 8010206:	1c43      	adds	r3, r0, #1
 8010208:	d102      	bne.n	8010210 <_fstat_r+0x1c>
 801020a:	682b      	ldr	r3, [r5, #0]
 801020c:	b103      	cbz	r3, 8010210 <_fstat_r+0x1c>
 801020e:	6023      	str	r3, [r4, #0]
 8010210:	bd38      	pop	{r3, r4, r5, pc}
 8010212:	bf00      	nop
 8010214:	240007c0 	.word	0x240007c0

08010218 <_isatty_r>:
 8010218:	b538      	push	{r3, r4, r5, lr}
 801021a:	4d06      	ldr	r5, [pc, #24]	@ (8010234 <_isatty_r+0x1c>)
 801021c:	2300      	movs	r3, #0
 801021e:	4604      	mov	r4, r0
 8010220:	4608      	mov	r0, r1
 8010222:	602b      	str	r3, [r5, #0]
 8010224:	f7f4 f9f2 	bl	800460c <_isatty>
 8010228:	1c43      	adds	r3, r0, #1
 801022a:	d102      	bne.n	8010232 <_isatty_r+0x1a>
 801022c:	682b      	ldr	r3, [r5, #0]
 801022e:	b103      	cbz	r3, 8010232 <_isatty_r+0x1a>
 8010230:	6023      	str	r3, [r4, #0]
 8010232:	bd38      	pop	{r3, r4, r5, pc}
 8010234:	240007c0 	.word	0x240007c0

08010238 <cos>:
 8010238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801023a:	eeb0 7b40 	vmov.f64	d7, d0
 801023e:	ee17 3a90 	vmov	r3, s15
 8010242:	4a21      	ldr	r2, [pc, #132]	@ (80102c8 <cos+0x90>)
 8010244:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010248:	4293      	cmp	r3, r2
 801024a:	d806      	bhi.n	801025a <cos+0x22>
 801024c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80102c0 <cos+0x88>
 8010250:	b005      	add	sp, #20
 8010252:	f85d eb04 	ldr.w	lr, [sp], #4
 8010256:	f000 b887 	b.w	8010368 <__kernel_cos>
 801025a:	4a1c      	ldr	r2, [pc, #112]	@ (80102cc <cos+0x94>)
 801025c:	4293      	cmp	r3, r2
 801025e:	d904      	bls.n	801026a <cos+0x32>
 8010260:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010264:	b005      	add	sp, #20
 8010266:	f85d fb04 	ldr.w	pc, [sp], #4
 801026a:	4668      	mov	r0, sp
 801026c:	f000 f93c 	bl	80104e8 <__ieee754_rem_pio2>
 8010270:	f000 0003 	and.w	r0, r0, #3
 8010274:	2801      	cmp	r0, #1
 8010276:	d009      	beq.n	801028c <cos+0x54>
 8010278:	2802      	cmp	r0, #2
 801027a:	d010      	beq.n	801029e <cos+0x66>
 801027c:	b9b0      	cbnz	r0, 80102ac <cos+0x74>
 801027e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010282:	ed9d 0b00 	vldr	d0, [sp]
 8010286:	f000 f86f 	bl	8010368 <__kernel_cos>
 801028a:	e7eb      	b.n	8010264 <cos+0x2c>
 801028c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010290:	ed9d 0b00 	vldr	d0, [sp]
 8010294:	f000 f8d0 	bl	8010438 <__kernel_sin>
 8010298:	eeb1 0b40 	vneg.f64	d0, d0
 801029c:	e7e2      	b.n	8010264 <cos+0x2c>
 801029e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102a2:	ed9d 0b00 	vldr	d0, [sp]
 80102a6:	f000 f85f 	bl	8010368 <__kernel_cos>
 80102aa:	e7f5      	b.n	8010298 <cos+0x60>
 80102ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102b0:	ed9d 0b00 	vldr	d0, [sp]
 80102b4:	2001      	movs	r0, #1
 80102b6:	f000 f8bf 	bl	8010438 <__kernel_sin>
 80102ba:	e7d3      	b.n	8010264 <cos+0x2c>
 80102bc:	f3af 8000 	nop.w
	...
 80102c8:	3fe921fb 	.word	0x3fe921fb
 80102cc:	7fefffff 	.word	0x7fefffff

080102d0 <sin>:
 80102d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102d2:	eeb0 7b40 	vmov.f64	d7, d0
 80102d6:	ee17 3a90 	vmov	r3, s15
 80102da:	4a21      	ldr	r2, [pc, #132]	@ (8010360 <sin+0x90>)
 80102dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d807      	bhi.n	80102f4 <sin+0x24>
 80102e4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8010358 <sin+0x88>
 80102e8:	2000      	movs	r0, #0
 80102ea:	b005      	add	sp, #20
 80102ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80102f0:	f000 b8a2 	b.w	8010438 <__kernel_sin>
 80102f4:	4a1b      	ldr	r2, [pc, #108]	@ (8010364 <sin+0x94>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d904      	bls.n	8010304 <sin+0x34>
 80102fa:	ee30 0b40 	vsub.f64	d0, d0, d0
 80102fe:	b005      	add	sp, #20
 8010300:	f85d fb04 	ldr.w	pc, [sp], #4
 8010304:	4668      	mov	r0, sp
 8010306:	f000 f8ef 	bl	80104e8 <__ieee754_rem_pio2>
 801030a:	f000 0003 	and.w	r0, r0, #3
 801030e:	2801      	cmp	r0, #1
 8010310:	d00a      	beq.n	8010328 <sin+0x58>
 8010312:	2802      	cmp	r0, #2
 8010314:	d00f      	beq.n	8010336 <sin+0x66>
 8010316:	b9c0      	cbnz	r0, 801034a <sin+0x7a>
 8010318:	ed9d 1b02 	vldr	d1, [sp, #8]
 801031c:	ed9d 0b00 	vldr	d0, [sp]
 8010320:	2001      	movs	r0, #1
 8010322:	f000 f889 	bl	8010438 <__kernel_sin>
 8010326:	e7ea      	b.n	80102fe <sin+0x2e>
 8010328:	ed9d 1b02 	vldr	d1, [sp, #8]
 801032c:	ed9d 0b00 	vldr	d0, [sp]
 8010330:	f000 f81a 	bl	8010368 <__kernel_cos>
 8010334:	e7e3      	b.n	80102fe <sin+0x2e>
 8010336:	ed9d 1b02 	vldr	d1, [sp, #8]
 801033a:	ed9d 0b00 	vldr	d0, [sp]
 801033e:	2001      	movs	r0, #1
 8010340:	f000 f87a 	bl	8010438 <__kernel_sin>
 8010344:	eeb1 0b40 	vneg.f64	d0, d0
 8010348:	e7d9      	b.n	80102fe <sin+0x2e>
 801034a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801034e:	ed9d 0b00 	vldr	d0, [sp]
 8010352:	f000 f809 	bl	8010368 <__kernel_cos>
 8010356:	e7f5      	b.n	8010344 <sin+0x74>
	...
 8010360:	3fe921fb 	.word	0x3fe921fb
 8010364:	7fefffff 	.word	0x7fefffff

08010368 <__kernel_cos>:
 8010368:	eeb0 5b40 	vmov.f64	d5, d0
 801036c:	ee15 1a90 	vmov	r1, s11
 8010370:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010374:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010378:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801037c:	d204      	bcs.n	8010388 <__kernel_cos+0x20>
 801037e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8010382:	ee17 3a90 	vmov	r3, s15
 8010386:	b343      	cbz	r3, 80103da <__kernel_cos+0x72>
 8010388:	ee25 6b05 	vmul.f64	d6, d5, d5
 801038c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8010390:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8010400 <__kernel_cos+0x98>
 8010394:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8010408 <__kernel_cos+0xa0>
 8010398:	eea6 4b07 	vfma.f64	d4, d6, d7
 801039c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8010410 <__kernel_cos+0xa8>
 80103a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80103a4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8010418 <__kernel_cos+0xb0>
 80103a8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80103ac:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8010420 <__kernel_cos+0xb8>
 80103b0:	4b1f      	ldr	r3, [pc, #124]	@ (8010430 <__kernel_cos+0xc8>)
 80103b2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80103b6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8010428 <__kernel_cos+0xc0>
 80103ba:	4299      	cmp	r1, r3
 80103bc:	eea7 4b06 	vfma.f64	d4, d7, d6
 80103c0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80103c4:	ee24 4b06 	vmul.f64	d4, d4, d6
 80103c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80103cc:	eea6 1b04 	vfma.f64	d1, d6, d4
 80103d0:	d804      	bhi.n	80103dc <__kernel_cos+0x74>
 80103d2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80103d6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80103da:	4770      	bx	lr
 80103dc:	4b15      	ldr	r3, [pc, #84]	@ (8010434 <__kernel_cos+0xcc>)
 80103de:	4299      	cmp	r1, r3
 80103e0:	d809      	bhi.n	80103f6 <__kernel_cos+0x8e>
 80103e2:	2200      	movs	r2, #0
 80103e4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 80103e8:	ec43 2b16 	vmov	d6, r2, r3
 80103ec:	ee30 0b46 	vsub.f64	d0, d0, d6
 80103f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80103f4:	e7ed      	b.n	80103d2 <__kernel_cos+0x6a>
 80103f6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 80103fa:	e7f7      	b.n	80103ec <__kernel_cos+0x84>
 80103fc:	f3af 8000 	nop.w
 8010400:	be8838d4 	.word	0xbe8838d4
 8010404:	bda8fae9 	.word	0xbda8fae9
 8010408:	bdb4b1c4 	.word	0xbdb4b1c4
 801040c:	3e21ee9e 	.word	0x3e21ee9e
 8010410:	809c52ad 	.word	0x809c52ad
 8010414:	be927e4f 	.word	0xbe927e4f
 8010418:	19cb1590 	.word	0x19cb1590
 801041c:	3efa01a0 	.word	0x3efa01a0
 8010420:	16c15177 	.word	0x16c15177
 8010424:	bf56c16c 	.word	0xbf56c16c
 8010428:	5555554c 	.word	0x5555554c
 801042c:	3fa55555 	.word	0x3fa55555
 8010430:	3fd33332 	.word	0x3fd33332
 8010434:	3fe90000 	.word	0x3fe90000

08010438 <__kernel_sin>:
 8010438:	ee10 3a90 	vmov	r3, s1
 801043c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010440:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8010444:	d204      	bcs.n	8010450 <__kernel_sin+0x18>
 8010446:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801044a:	ee17 3a90 	vmov	r3, s15
 801044e:	b35b      	cbz	r3, 80104a8 <__kernel_sin+0x70>
 8010450:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010454:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010458:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80104b0 <__kernel_sin+0x78>
 801045c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80104b8 <__kernel_sin+0x80>
 8010460:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010464:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80104c0 <__kernel_sin+0x88>
 8010468:	eea4 7b06 	vfma.f64	d7, d4, d6
 801046c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80104c8 <__kernel_sin+0x90>
 8010470:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010474:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80104d0 <__kernel_sin+0x98>
 8010478:	eea4 7b06 	vfma.f64	d7, d4, d6
 801047c:	b930      	cbnz	r0, 801048c <__kernel_sin+0x54>
 801047e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80104d8 <__kernel_sin+0xa0>
 8010482:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010486:	eea4 0b05 	vfma.f64	d0, d4, d5
 801048a:	4770      	bx	lr
 801048c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010490:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8010494:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010498:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801049c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80104e0 <__kernel_sin+0xa8>
 80104a0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80104a4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	f3af 8000 	nop.w
 80104b0:	5acfd57c 	.word	0x5acfd57c
 80104b4:	3de5d93a 	.word	0x3de5d93a
 80104b8:	8a2b9ceb 	.word	0x8a2b9ceb
 80104bc:	be5ae5e6 	.word	0xbe5ae5e6
 80104c0:	57b1fe7d 	.word	0x57b1fe7d
 80104c4:	3ec71de3 	.word	0x3ec71de3
 80104c8:	19c161d5 	.word	0x19c161d5
 80104cc:	bf2a01a0 	.word	0xbf2a01a0
 80104d0:	1110f8a6 	.word	0x1110f8a6
 80104d4:	3f811111 	.word	0x3f811111
 80104d8:	55555549 	.word	0x55555549
 80104dc:	bfc55555 	.word	0xbfc55555
 80104e0:	55555549 	.word	0x55555549
 80104e4:	3fc55555 	.word	0x3fc55555

080104e8 <__ieee754_rem_pio2>:
 80104e8:	b570      	push	{r4, r5, r6, lr}
 80104ea:	eeb0 7b40 	vmov.f64	d7, d0
 80104ee:	ee17 5a90 	vmov	r5, s15
 80104f2:	4b99      	ldr	r3, [pc, #612]	@ (8010758 <__ieee754_rem_pio2+0x270>)
 80104f4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80104f8:	429e      	cmp	r6, r3
 80104fa:	b088      	sub	sp, #32
 80104fc:	4604      	mov	r4, r0
 80104fe:	d807      	bhi.n	8010510 <__ieee754_rem_pio2+0x28>
 8010500:	2200      	movs	r2, #0
 8010502:	2300      	movs	r3, #0
 8010504:	ed84 0b00 	vstr	d0, [r4]
 8010508:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801050c:	2000      	movs	r0, #0
 801050e:	e01b      	b.n	8010548 <__ieee754_rem_pio2+0x60>
 8010510:	4b92      	ldr	r3, [pc, #584]	@ (801075c <__ieee754_rem_pio2+0x274>)
 8010512:	429e      	cmp	r6, r3
 8010514:	d83b      	bhi.n	801058e <__ieee754_rem_pio2+0xa6>
 8010516:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801051a:	2d00      	cmp	r5, #0
 801051c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8010718 <__ieee754_rem_pio2+0x230>
 8010520:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8010524:	dd19      	ble.n	801055a <__ieee754_rem_pio2+0x72>
 8010526:	ee30 7b46 	vsub.f64	d7, d0, d6
 801052a:	429e      	cmp	r6, r3
 801052c:	d00e      	beq.n	801054c <__ieee754_rem_pio2+0x64>
 801052e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8010720 <__ieee754_rem_pio2+0x238>
 8010532:	ee37 6b45 	vsub.f64	d6, d7, d5
 8010536:	ee37 7b46 	vsub.f64	d7, d7, d6
 801053a:	ed84 6b00 	vstr	d6, [r4]
 801053e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010542:	ed84 7b02 	vstr	d7, [r4, #8]
 8010546:	2001      	movs	r0, #1
 8010548:	b008      	add	sp, #32
 801054a:	bd70      	pop	{r4, r5, r6, pc}
 801054c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8010728 <__ieee754_rem_pio2+0x240>
 8010550:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8010730 <__ieee754_rem_pio2+0x248>
 8010554:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010558:	e7eb      	b.n	8010532 <__ieee754_rem_pio2+0x4a>
 801055a:	429e      	cmp	r6, r3
 801055c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010560:	d00e      	beq.n	8010580 <__ieee754_rem_pio2+0x98>
 8010562:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8010720 <__ieee754_rem_pio2+0x238>
 8010566:	ee37 6b05 	vadd.f64	d6, d7, d5
 801056a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801056e:	ed84 6b00 	vstr	d6, [r4]
 8010572:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010576:	f04f 30ff 	mov.w	r0, #4294967295
 801057a:	ed84 7b02 	vstr	d7, [r4, #8]
 801057e:	e7e3      	b.n	8010548 <__ieee754_rem_pio2+0x60>
 8010580:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8010728 <__ieee754_rem_pio2+0x240>
 8010584:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8010730 <__ieee754_rem_pio2+0x248>
 8010588:	ee37 7b06 	vadd.f64	d7, d7, d6
 801058c:	e7eb      	b.n	8010566 <__ieee754_rem_pio2+0x7e>
 801058e:	4b74      	ldr	r3, [pc, #464]	@ (8010760 <__ieee754_rem_pio2+0x278>)
 8010590:	429e      	cmp	r6, r3
 8010592:	d870      	bhi.n	8010676 <__ieee754_rem_pio2+0x18e>
 8010594:	f000 f8ec 	bl	8010770 <fabs>
 8010598:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801059c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010738 <__ieee754_rem_pio2+0x250>
 80105a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80105a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80105a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80105ac:	ee17 0a90 	vmov	r0, s15
 80105b0:	eeb1 4b45 	vneg.f64	d4, d5
 80105b4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8010718 <__ieee754_rem_pio2+0x230>
 80105b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80105bc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8010720 <__ieee754_rem_pio2+0x238>
 80105c0:	281f      	cmp	r0, #31
 80105c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80105c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80105ca:	dc05      	bgt.n	80105d8 <__ieee754_rem_pio2+0xf0>
 80105cc:	4b65      	ldr	r3, [pc, #404]	@ (8010764 <__ieee754_rem_pio2+0x27c>)
 80105ce:	1e42      	subs	r2, r0, #1
 80105d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105d4:	42b3      	cmp	r3, r6
 80105d6:	d109      	bne.n	80105ec <__ieee754_rem_pio2+0x104>
 80105d8:	ee16 3a90 	vmov	r3, s13
 80105dc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80105e0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80105e4:	2b10      	cmp	r3, #16
 80105e6:	ea4f 5226 	mov.w	r2, r6, asr #20
 80105ea:	dc02      	bgt.n	80105f2 <__ieee754_rem_pio2+0x10a>
 80105ec:	ed84 6b00 	vstr	d6, [r4]
 80105f0:	e01a      	b.n	8010628 <__ieee754_rem_pio2+0x140>
 80105f2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8010728 <__ieee754_rem_pio2+0x240>
 80105f6:	eeb0 6b40 	vmov.f64	d6, d0
 80105fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80105fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010602:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010606:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8010730 <__ieee754_rem_pio2+0x248>
 801060a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801060e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010612:	ee13 3a90 	vmov	r3, s7
 8010616:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801061a:	1ad3      	subs	r3, r2, r3
 801061c:	2b31      	cmp	r3, #49	@ 0x31
 801061e:	dc17      	bgt.n	8010650 <__ieee754_rem_pio2+0x168>
 8010620:	eeb0 0b46 	vmov.f64	d0, d6
 8010624:	ed84 3b00 	vstr	d3, [r4]
 8010628:	ed94 6b00 	vldr	d6, [r4]
 801062c:	2d00      	cmp	r5, #0
 801062e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010632:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010636:	ed84 0b02 	vstr	d0, [r4, #8]
 801063a:	da85      	bge.n	8010548 <__ieee754_rem_pio2+0x60>
 801063c:	eeb1 6b46 	vneg.f64	d6, d6
 8010640:	eeb1 0b40 	vneg.f64	d0, d0
 8010644:	ed84 6b00 	vstr	d6, [r4]
 8010648:	ed84 0b02 	vstr	d0, [r4, #8]
 801064c:	4240      	negs	r0, r0
 801064e:	e77b      	b.n	8010548 <__ieee754_rem_pio2+0x60>
 8010650:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8010740 <__ieee754_rem_pio2+0x258>
 8010654:	eeb0 0b46 	vmov.f64	d0, d6
 8010658:	eea4 0b07 	vfma.f64	d0, d4, d7
 801065c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8010660:	eea4 6b07 	vfma.f64	d6, d4, d7
 8010664:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8010748 <__ieee754_rem_pio2+0x260>
 8010668:	eeb0 7b46 	vmov.f64	d7, d6
 801066c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8010670:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010674:	e7ba      	b.n	80105ec <__ieee754_rem_pio2+0x104>
 8010676:	4b3c      	ldr	r3, [pc, #240]	@ (8010768 <__ieee754_rem_pio2+0x280>)
 8010678:	429e      	cmp	r6, r3
 801067a:	d906      	bls.n	801068a <__ieee754_rem_pio2+0x1a2>
 801067c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010680:	ed80 7b02 	vstr	d7, [r0, #8]
 8010684:	ed80 7b00 	vstr	d7, [r0]
 8010688:	e740      	b.n	801050c <__ieee754_rem_pio2+0x24>
 801068a:	ee10 3a10 	vmov	r3, s0
 801068e:	1532      	asrs	r2, r6, #20
 8010690:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8010694:	4618      	mov	r0, r3
 8010696:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801069a:	ec41 0b17 	vmov	d7, r0, r1
 801069e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80106a2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8010750 <__ieee754_rem_pio2+0x268>
 80106a6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80106aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80106ae:	ed8d 6b02 	vstr	d6, [sp, #8]
 80106b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80106b6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80106ba:	a808      	add	r0, sp, #32
 80106bc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80106c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80106c4:	ed8d 6b04 	vstr	d6, [sp, #16]
 80106c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80106cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106d0:	2103      	movs	r1, #3
 80106d2:	ed30 7b02 	vldmdb	r0!, {d7}
 80106d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80106da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106de:	460b      	mov	r3, r1
 80106e0:	f101 31ff 	add.w	r1, r1, #4294967295
 80106e4:	d0f5      	beq.n	80106d2 <__ieee754_rem_pio2+0x1ea>
 80106e6:	4921      	ldr	r1, [pc, #132]	@ (801076c <__ieee754_rem_pio2+0x284>)
 80106e8:	9101      	str	r1, [sp, #4]
 80106ea:	2102      	movs	r1, #2
 80106ec:	9100      	str	r1, [sp, #0]
 80106ee:	a802      	add	r0, sp, #8
 80106f0:	4621      	mov	r1, r4
 80106f2:	f000 f845 	bl	8010780 <__kernel_rem_pio2>
 80106f6:	2d00      	cmp	r5, #0
 80106f8:	f6bf af26 	bge.w	8010548 <__ieee754_rem_pio2+0x60>
 80106fc:	ed94 7b00 	vldr	d7, [r4]
 8010700:	eeb1 7b47 	vneg.f64	d7, d7
 8010704:	ed84 7b00 	vstr	d7, [r4]
 8010708:	ed94 7b02 	vldr	d7, [r4, #8]
 801070c:	eeb1 7b47 	vneg.f64	d7, d7
 8010710:	ed84 7b02 	vstr	d7, [r4, #8]
 8010714:	e79a      	b.n	801064c <__ieee754_rem_pio2+0x164>
 8010716:	bf00      	nop
 8010718:	54400000 	.word	0x54400000
 801071c:	3ff921fb 	.word	0x3ff921fb
 8010720:	1a626331 	.word	0x1a626331
 8010724:	3dd0b461 	.word	0x3dd0b461
 8010728:	1a600000 	.word	0x1a600000
 801072c:	3dd0b461 	.word	0x3dd0b461
 8010730:	2e037073 	.word	0x2e037073
 8010734:	3ba3198a 	.word	0x3ba3198a
 8010738:	6dc9c883 	.word	0x6dc9c883
 801073c:	3fe45f30 	.word	0x3fe45f30
 8010740:	2e000000 	.word	0x2e000000
 8010744:	3ba3198a 	.word	0x3ba3198a
 8010748:	252049c1 	.word	0x252049c1
 801074c:	397b839a 	.word	0x397b839a
 8010750:	00000000 	.word	0x00000000
 8010754:	41700000 	.word	0x41700000
 8010758:	3fe921fb 	.word	0x3fe921fb
 801075c:	4002d97b 	.word	0x4002d97b
 8010760:	413921fb 	.word	0x413921fb
 8010764:	08011168 	.word	0x08011168
 8010768:	7fefffff 	.word	0x7fefffff
 801076c:	080111e8 	.word	0x080111e8

08010770 <fabs>:
 8010770:	ec51 0b10 	vmov	r0, r1, d0
 8010774:	4602      	mov	r2, r0
 8010776:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801077a:	ec43 2b10 	vmov	d0, r2, r3
 801077e:	4770      	bx	lr

08010780 <__kernel_rem_pio2>:
 8010780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010784:	ed2d 8b06 	vpush	{d8-d10}
 8010788:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801078c:	469b      	mov	fp, r3
 801078e:	9001      	str	r0, [sp, #4]
 8010790:	4bbb      	ldr	r3, [pc, #748]	@ (8010a80 <__kernel_rem_pio2+0x300>)
 8010792:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8010794:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8010798:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801079c:	f112 0f14 	cmn.w	r2, #20
 80107a0:	bfa8      	it	ge
 80107a2:	1ed3      	subge	r3, r2, #3
 80107a4:	f10b 3aff 	add.w	sl, fp, #4294967295
 80107a8:	bfb8      	it	lt
 80107aa:	2300      	movlt	r3, #0
 80107ac:	f06f 0517 	mvn.w	r5, #23
 80107b0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8010a68 <__kernel_rem_pio2+0x2e8>
 80107b4:	bfa4      	itt	ge
 80107b6:	2018      	movge	r0, #24
 80107b8:	fb93 f3f0 	sdivge	r3, r3, r0
 80107bc:	fb03 5505 	mla	r5, r3, r5, r5
 80107c0:	eba3 040a 	sub.w	r4, r3, sl
 80107c4:	4415      	add	r5, r2
 80107c6:	460f      	mov	r7, r1
 80107c8:	eb09 060a 	add.w	r6, r9, sl
 80107cc:	a81a      	add	r0, sp, #104	@ 0x68
 80107ce:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 80107d2:	2200      	movs	r2, #0
 80107d4:	42b2      	cmp	r2, r6
 80107d6:	dd0e      	ble.n	80107f6 <__kernel_rem_pio2+0x76>
 80107d8:	aa1a      	add	r2, sp, #104	@ 0x68
 80107da:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80107de:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 80107e2:	2600      	movs	r6, #0
 80107e4:	454e      	cmp	r6, r9
 80107e6:	dc25      	bgt.n	8010834 <__kernel_rem_pio2+0xb4>
 80107e8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8010a68 <__kernel_rem_pio2+0x2e8>
 80107ec:	f8dd c004 	ldr.w	ip, [sp, #4]
 80107f0:	4614      	mov	r4, r2
 80107f2:	2000      	movs	r0, #0
 80107f4:	e015      	b.n	8010822 <__kernel_rem_pio2+0xa2>
 80107f6:	42d4      	cmn	r4, r2
 80107f8:	d409      	bmi.n	801080e <__kernel_rem_pio2+0x8e>
 80107fa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80107fe:	ee07 1a90 	vmov	s15, r1
 8010802:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010806:	eca0 7b02 	vstmia	r0!, {d7}
 801080a:	3201      	adds	r2, #1
 801080c:	e7e2      	b.n	80107d4 <__kernel_rem_pio2+0x54>
 801080e:	eeb0 7b46 	vmov.f64	d7, d6
 8010812:	e7f8      	b.n	8010806 <__kernel_rem_pio2+0x86>
 8010814:	ecbc 5b02 	vldmia	ip!, {d5}
 8010818:	ed94 6b00 	vldr	d6, [r4]
 801081c:	3001      	adds	r0, #1
 801081e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010822:	4550      	cmp	r0, sl
 8010824:	f1a4 0408 	sub.w	r4, r4, #8
 8010828:	ddf4      	ble.n	8010814 <__kernel_rem_pio2+0x94>
 801082a:	ecae 7b02 	vstmia	lr!, {d7}
 801082e:	3601      	adds	r6, #1
 8010830:	3208      	adds	r2, #8
 8010832:	e7d7      	b.n	80107e4 <__kernel_rem_pio2+0x64>
 8010834:	aa06      	add	r2, sp, #24
 8010836:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8010a70 <__kernel_rem_pio2+0x2f0>
 801083a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8010a78 <__kernel_rem_pio2+0x2f8>
 801083e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010842:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8010846:	9203      	str	r2, [sp, #12]
 8010848:	9302      	str	r3, [sp, #8]
 801084a:	464c      	mov	r4, r9
 801084c:	00e3      	lsls	r3, r4, #3
 801084e:	9304      	str	r3, [sp, #16]
 8010850:	ab92      	add	r3, sp, #584	@ 0x248
 8010852:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010856:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801085a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801085c:	ab06      	add	r3, sp, #24
 801085e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010862:	461e      	mov	r6, r3
 8010864:	4620      	mov	r0, r4
 8010866:	2800      	cmp	r0, #0
 8010868:	f1a2 0208 	sub.w	r2, r2, #8
 801086c:	dc4a      	bgt.n	8010904 <__kernel_rem_pio2+0x184>
 801086e:	4628      	mov	r0, r5
 8010870:	9305      	str	r3, [sp, #20]
 8010872:	f000 fa01 	bl	8010c78 <scalbn>
 8010876:	eeb0 8b40 	vmov.f64	d8, d0
 801087a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801087e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010882:	f000 fa79 	bl	8010d78 <floor>
 8010886:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801088a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801088e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010892:	2d00      	cmp	r5, #0
 8010894:	ee17 8a90 	vmov	r8, s15
 8010898:	9b05      	ldr	r3, [sp, #20]
 801089a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801089e:	ee38 8b47 	vsub.f64	d8, d8, d7
 80108a2:	dd41      	ble.n	8010928 <__kernel_rem_pio2+0x1a8>
 80108a4:	1e60      	subs	r0, r4, #1
 80108a6:	aa06      	add	r2, sp, #24
 80108a8:	f1c5 0c18 	rsb	ip, r5, #24
 80108ac:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80108b0:	fa46 f20c 	asr.w	r2, r6, ip
 80108b4:	4490      	add	r8, r2
 80108b6:	fa02 f20c 	lsl.w	r2, r2, ip
 80108ba:	1ab6      	subs	r6, r6, r2
 80108bc:	aa06      	add	r2, sp, #24
 80108be:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80108c2:	f1c5 0217 	rsb	r2, r5, #23
 80108c6:	4116      	asrs	r6, r2
 80108c8:	2e00      	cmp	r6, #0
 80108ca:	dd3c      	ble.n	8010946 <__kernel_rem_pio2+0x1c6>
 80108cc:	f04f 0c00 	mov.w	ip, #0
 80108d0:	f108 0801 	add.w	r8, r8, #1
 80108d4:	4660      	mov	r0, ip
 80108d6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 80108da:	4564      	cmp	r4, ip
 80108dc:	dc66      	bgt.n	80109ac <__kernel_rem_pio2+0x22c>
 80108de:	2d00      	cmp	r5, #0
 80108e0:	dd03      	ble.n	80108ea <__kernel_rem_pio2+0x16a>
 80108e2:	2d01      	cmp	r5, #1
 80108e4:	d072      	beq.n	80109cc <__kernel_rem_pio2+0x24c>
 80108e6:	2d02      	cmp	r5, #2
 80108e8:	d07a      	beq.n	80109e0 <__kernel_rem_pio2+0x260>
 80108ea:	2e02      	cmp	r6, #2
 80108ec:	d12b      	bne.n	8010946 <__kernel_rem_pio2+0x1c6>
 80108ee:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80108f2:	ee30 8b48 	vsub.f64	d8, d0, d8
 80108f6:	b330      	cbz	r0, 8010946 <__kernel_rem_pio2+0x1c6>
 80108f8:	4628      	mov	r0, r5
 80108fa:	f000 f9bd 	bl	8010c78 <scalbn>
 80108fe:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010902:	e020      	b.n	8010946 <__kernel_rem_pio2+0x1c6>
 8010904:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010908:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801090c:	3801      	subs	r0, #1
 801090e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010912:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010916:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801091a:	eca6 0a01 	vstmia	r6!, {s0}
 801091e:	ed92 0b00 	vldr	d0, [r2]
 8010922:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010926:	e79e      	b.n	8010866 <__kernel_rem_pio2+0xe6>
 8010928:	d105      	bne.n	8010936 <__kernel_rem_pio2+0x1b6>
 801092a:	1e62      	subs	r2, r4, #1
 801092c:	a906      	add	r1, sp, #24
 801092e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8010932:	15f6      	asrs	r6, r6, #23
 8010934:	e7c8      	b.n	80108c8 <__kernel_rem_pio2+0x148>
 8010936:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801093a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010942:	da31      	bge.n	80109a8 <__kernel_rem_pio2+0x228>
 8010944:	2600      	movs	r6, #0
 8010946:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801094e:	f040 809b 	bne.w	8010a88 <__kernel_rem_pio2+0x308>
 8010952:	1e62      	subs	r2, r4, #1
 8010954:	2000      	movs	r0, #0
 8010956:	454a      	cmp	r2, r9
 8010958:	da49      	bge.n	80109ee <__kernel_rem_pio2+0x26e>
 801095a:	2800      	cmp	r0, #0
 801095c:	d062      	beq.n	8010a24 <__kernel_rem_pio2+0x2a4>
 801095e:	3c01      	subs	r4, #1
 8010960:	ab06      	add	r3, sp, #24
 8010962:	3d18      	subs	r5, #24
 8010964:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d0f8      	beq.n	801095e <__kernel_rem_pio2+0x1de>
 801096c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010970:	4628      	mov	r0, r5
 8010972:	f000 f981 	bl	8010c78 <scalbn>
 8010976:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8010a70 <__kernel_rem_pio2+0x2f0>
 801097a:	1c62      	adds	r2, r4, #1
 801097c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801097e:	00d3      	lsls	r3, r2, #3
 8010980:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010984:	4622      	mov	r2, r4
 8010986:	2a00      	cmp	r2, #0
 8010988:	f280 80a8 	bge.w	8010adc <__kernel_rem_pio2+0x35c>
 801098c:	4622      	mov	r2, r4
 801098e:	2a00      	cmp	r2, #0
 8010990:	f2c0 80c6 	blt.w	8010b20 <__kernel_rem_pio2+0x3a0>
 8010994:	a96a      	add	r1, sp, #424	@ 0x1a8
 8010996:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801099a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8010a68 <__kernel_rem_pio2+0x2e8>
 801099e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8010a84 <__kernel_rem_pio2+0x304>
 80109a2:	2000      	movs	r0, #0
 80109a4:	1aa1      	subs	r1, r4, r2
 80109a6:	e0b0      	b.n	8010b0a <__kernel_rem_pio2+0x38a>
 80109a8:	2602      	movs	r6, #2
 80109aa:	e78f      	b.n	80108cc <__kernel_rem_pio2+0x14c>
 80109ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80109b0:	b948      	cbnz	r0, 80109c6 <__kernel_rem_pio2+0x246>
 80109b2:	b122      	cbz	r2, 80109be <__kernel_rem_pio2+0x23e>
 80109b4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 80109b8:	f843 2c04 	str.w	r2, [r3, #-4]
 80109bc:	2201      	movs	r2, #1
 80109be:	f10c 0c01 	add.w	ip, ip, #1
 80109c2:	4610      	mov	r0, r2
 80109c4:	e789      	b.n	80108da <__kernel_rem_pio2+0x15a>
 80109c6:	ebae 0202 	sub.w	r2, lr, r2
 80109ca:	e7f5      	b.n	80109b8 <__kernel_rem_pio2+0x238>
 80109cc:	1e62      	subs	r2, r4, #1
 80109ce:	ab06      	add	r3, sp, #24
 80109d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80109d8:	a906      	add	r1, sp, #24
 80109da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80109de:	e784      	b.n	80108ea <__kernel_rem_pio2+0x16a>
 80109e0:	1e62      	subs	r2, r4, #1
 80109e2:	ab06      	add	r3, sp, #24
 80109e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80109ec:	e7f4      	b.n	80109d8 <__kernel_rem_pio2+0x258>
 80109ee:	ab06      	add	r3, sp, #24
 80109f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109f4:	3a01      	subs	r2, #1
 80109f6:	4318      	orrs	r0, r3
 80109f8:	e7ad      	b.n	8010956 <__kernel_rem_pio2+0x1d6>
 80109fa:	3301      	adds	r3, #1
 80109fc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8010a00:	2800      	cmp	r0, #0
 8010a02:	d0fa      	beq.n	80109fa <__kernel_rem_pio2+0x27a>
 8010a04:	9a04      	ldr	r2, [sp, #16]
 8010a06:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8010a0a:	446a      	add	r2, sp
 8010a0c:	eb04 000b 	add.w	r0, r4, fp
 8010a10:	a91a      	add	r1, sp, #104	@ 0x68
 8010a12:	1c66      	adds	r6, r4, #1
 8010a14:	3a98      	subs	r2, #152	@ 0x98
 8010a16:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8010a1a:	4423      	add	r3, r4
 8010a1c:	42b3      	cmp	r3, r6
 8010a1e:	da04      	bge.n	8010a2a <__kernel_rem_pio2+0x2aa>
 8010a20:	461c      	mov	r4, r3
 8010a22:	e713      	b.n	801084c <__kernel_rem_pio2+0xcc>
 8010a24:	9a03      	ldr	r2, [sp, #12]
 8010a26:	2301      	movs	r3, #1
 8010a28:	e7e8      	b.n	80109fc <__kernel_rem_pio2+0x27c>
 8010a2a:	9902      	ldr	r1, [sp, #8]
 8010a2c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8010a30:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8010a34:	9104      	str	r1, [sp, #16]
 8010a36:	ee07 1a90 	vmov	s15, r1
 8010a3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a3e:	2400      	movs	r4, #0
 8010a40:	eca0 7b02 	vstmia	r0!, {d7}
 8010a44:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8010a68 <__kernel_rem_pio2+0x2e8>
 8010a48:	4686      	mov	lr, r0
 8010a4a:	4554      	cmp	r4, sl
 8010a4c:	dd03      	ble.n	8010a56 <__kernel_rem_pio2+0x2d6>
 8010a4e:	eca2 7b02 	vstmia	r2!, {d7}
 8010a52:	3601      	adds	r6, #1
 8010a54:	e7e2      	b.n	8010a1c <__kernel_rem_pio2+0x29c>
 8010a56:	ecbc 5b02 	vldmia	ip!, {d5}
 8010a5a:	ed3e 6b02 	vldmdb	lr!, {d6}
 8010a5e:	3401      	adds	r4, #1
 8010a60:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010a64:	e7f1      	b.n	8010a4a <__kernel_rem_pio2+0x2ca>
 8010a66:	bf00      	nop
	...
 8010a74:	3e700000 	.word	0x3e700000
 8010a78:	00000000 	.word	0x00000000
 8010a7c:	41700000 	.word	0x41700000
 8010a80:	08011330 	.word	0x08011330
 8010a84:	080112f0 	.word	0x080112f0
 8010a88:	4268      	negs	r0, r5
 8010a8a:	eeb0 0b48 	vmov.f64	d0, d8
 8010a8e:	f000 f8f3 	bl	8010c78 <scalbn>
 8010a92:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8010c60 <__kernel_rem_pio2+0x4e0>
 8010a96:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9e:	db17      	blt.n	8010ad0 <__kernel_rem_pio2+0x350>
 8010aa0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8010c68 <__kernel_rem_pio2+0x4e8>
 8010aa4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010aa8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010aac:	aa06      	add	r2, sp, #24
 8010aae:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010ab2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010ab6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010aba:	3518      	adds	r5, #24
 8010abc:	ee10 3a10 	vmov	r3, s0
 8010ac0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010ac4:	ee17 3a10 	vmov	r3, s14
 8010ac8:	3401      	adds	r4, #1
 8010aca:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010ace:	e74d      	b.n	801096c <__kernel_rem_pio2+0x1ec>
 8010ad0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010ad4:	aa06      	add	r2, sp, #24
 8010ad6:	ee10 3a10 	vmov	r3, s0
 8010ada:	e7f6      	b.n	8010aca <__kernel_rem_pio2+0x34a>
 8010adc:	a806      	add	r0, sp, #24
 8010ade:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010ae2:	9001      	str	r0, [sp, #4]
 8010ae4:	ee07 0a90 	vmov	s15, r0
 8010ae8:	3a01      	subs	r2, #1
 8010aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010aee:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010af2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010af6:	ed21 7b02 	vstmdb	r1!, {d7}
 8010afa:	e744      	b.n	8010986 <__kernel_rem_pio2+0x206>
 8010afc:	ecbc 5b02 	vldmia	ip!, {d5}
 8010b00:	ecb5 6b02 	vldmia	r5!, {d6}
 8010b04:	3001      	adds	r0, #1
 8010b06:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010b0a:	4548      	cmp	r0, r9
 8010b0c:	dc01      	bgt.n	8010b12 <__kernel_rem_pio2+0x392>
 8010b0e:	4281      	cmp	r1, r0
 8010b10:	daf4      	bge.n	8010afc <__kernel_rem_pio2+0x37c>
 8010b12:	a842      	add	r0, sp, #264	@ 0x108
 8010b14:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010b18:	ed81 7b00 	vstr	d7, [r1]
 8010b1c:	3a01      	subs	r2, #1
 8010b1e:	e736      	b.n	801098e <__kernel_rem_pio2+0x20e>
 8010b20:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8010b22:	2a02      	cmp	r2, #2
 8010b24:	dc0a      	bgt.n	8010b3c <__kernel_rem_pio2+0x3bc>
 8010b26:	2a00      	cmp	r2, #0
 8010b28:	dc2d      	bgt.n	8010b86 <__kernel_rem_pio2+0x406>
 8010b2a:	d046      	beq.n	8010bba <__kernel_rem_pio2+0x43a>
 8010b2c:	f008 0007 	and.w	r0, r8, #7
 8010b30:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8010b34:	ecbd 8b06 	vpop	{d8-d10}
 8010b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8010b3e:	2a03      	cmp	r2, #3
 8010b40:	d1f4      	bne.n	8010b2c <__kernel_rem_pio2+0x3ac>
 8010b42:	a942      	add	r1, sp, #264	@ 0x108
 8010b44:	f1a3 0208 	sub.w	r2, r3, #8
 8010b48:	440a      	add	r2, r1
 8010b4a:	4611      	mov	r1, r2
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	f1a1 0108 	sub.w	r1, r1, #8
 8010b54:	dc52      	bgt.n	8010bfc <__kernel_rem_pio2+0x47c>
 8010b56:	4621      	mov	r1, r4
 8010b58:	2901      	cmp	r1, #1
 8010b5a:	f1a2 0208 	sub.w	r2, r2, #8
 8010b5e:	dc5d      	bgt.n	8010c1c <__kernel_rem_pio2+0x49c>
 8010b60:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8010c70 <__kernel_rem_pio2+0x4f0>
 8010b64:	aa42      	add	r2, sp, #264	@ 0x108
 8010b66:	4413      	add	r3, r2
 8010b68:	2c01      	cmp	r4, #1
 8010b6a:	dc67      	bgt.n	8010c3c <__kernel_rem_pio2+0x4bc>
 8010b6c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8010b70:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8010b74:	2e00      	cmp	r6, #0
 8010b76:	d167      	bne.n	8010c48 <__kernel_rem_pio2+0x4c8>
 8010b78:	ed87 5b00 	vstr	d5, [r7]
 8010b7c:	ed87 6b02 	vstr	d6, [r7, #8]
 8010b80:	ed87 7b04 	vstr	d7, [r7, #16]
 8010b84:	e7d2      	b.n	8010b2c <__kernel_rem_pio2+0x3ac>
 8010b86:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8010c70 <__kernel_rem_pio2+0x4f0>
 8010b8a:	aa42      	add	r2, sp, #264	@ 0x108
 8010b8c:	4413      	add	r3, r2
 8010b8e:	4622      	mov	r2, r4
 8010b90:	2a00      	cmp	r2, #0
 8010b92:	da24      	bge.n	8010bde <__kernel_rem_pio2+0x45e>
 8010b94:	b34e      	cbz	r6, 8010bea <__kernel_rem_pio2+0x46a>
 8010b96:	eeb1 7b46 	vneg.f64	d7, d6
 8010b9a:	ed87 7b00 	vstr	d7, [r7]
 8010b9e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8010ba2:	aa44      	add	r2, sp, #272	@ 0x110
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010baa:	429c      	cmp	r4, r3
 8010bac:	da20      	bge.n	8010bf0 <__kernel_rem_pio2+0x470>
 8010bae:	b10e      	cbz	r6, 8010bb4 <__kernel_rem_pio2+0x434>
 8010bb0:	eeb1 7b47 	vneg.f64	d7, d7
 8010bb4:	ed87 7b02 	vstr	d7, [r7, #8]
 8010bb8:	e7b8      	b.n	8010b2c <__kernel_rem_pio2+0x3ac>
 8010bba:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8010c70 <__kernel_rem_pio2+0x4f0>
 8010bbe:	aa42      	add	r2, sp, #264	@ 0x108
 8010bc0:	4413      	add	r3, r2
 8010bc2:	2c00      	cmp	r4, #0
 8010bc4:	da05      	bge.n	8010bd2 <__kernel_rem_pio2+0x452>
 8010bc6:	b10e      	cbz	r6, 8010bcc <__kernel_rem_pio2+0x44c>
 8010bc8:	eeb1 7b47 	vneg.f64	d7, d7
 8010bcc:	ed87 7b00 	vstr	d7, [r7]
 8010bd0:	e7ac      	b.n	8010b2c <__kernel_rem_pio2+0x3ac>
 8010bd2:	ed33 6b02 	vldmdb	r3!, {d6}
 8010bd6:	3c01      	subs	r4, #1
 8010bd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010bdc:	e7f1      	b.n	8010bc2 <__kernel_rem_pio2+0x442>
 8010bde:	ed33 7b02 	vldmdb	r3!, {d7}
 8010be2:	3a01      	subs	r2, #1
 8010be4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010be8:	e7d2      	b.n	8010b90 <__kernel_rem_pio2+0x410>
 8010bea:	eeb0 7b46 	vmov.f64	d7, d6
 8010bee:	e7d4      	b.n	8010b9a <__kernel_rem_pio2+0x41a>
 8010bf0:	ecb2 6b02 	vldmia	r2!, {d6}
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010bfa:	e7d6      	b.n	8010baa <__kernel_rem_pio2+0x42a>
 8010bfc:	ed91 7b00 	vldr	d7, [r1]
 8010c00:	ed91 5b02 	vldr	d5, [r1, #8]
 8010c04:	3801      	subs	r0, #1
 8010c06:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010c0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010c0e:	ed81 6b00 	vstr	d6, [r1]
 8010c12:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010c16:	ed81 7b02 	vstr	d7, [r1, #8]
 8010c1a:	e798      	b.n	8010b4e <__kernel_rem_pio2+0x3ce>
 8010c1c:	ed92 7b00 	vldr	d7, [r2]
 8010c20:	ed92 5b02 	vldr	d5, [r2, #8]
 8010c24:	3901      	subs	r1, #1
 8010c26:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010c2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010c2e:	ed82 6b00 	vstr	d6, [r2]
 8010c32:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010c36:	ed82 7b02 	vstr	d7, [r2, #8]
 8010c3a:	e78d      	b.n	8010b58 <__kernel_rem_pio2+0x3d8>
 8010c3c:	ed33 6b02 	vldmdb	r3!, {d6}
 8010c40:	3c01      	subs	r4, #1
 8010c42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010c46:	e78f      	b.n	8010b68 <__kernel_rem_pio2+0x3e8>
 8010c48:	eeb1 5b45 	vneg.f64	d5, d5
 8010c4c:	eeb1 6b46 	vneg.f64	d6, d6
 8010c50:	ed87 5b00 	vstr	d5, [r7]
 8010c54:	eeb1 7b47 	vneg.f64	d7, d7
 8010c58:	ed87 6b02 	vstr	d6, [r7, #8]
 8010c5c:	e790      	b.n	8010b80 <__kernel_rem_pio2+0x400>
 8010c5e:	bf00      	nop
 8010c60:	00000000 	.word	0x00000000
 8010c64:	41700000 	.word	0x41700000
 8010c68:	00000000 	.word	0x00000000
 8010c6c:	3e700000 	.word	0x3e700000
	...

08010c78 <scalbn>:
 8010c78:	ee10 1a90 	vmov	r1, s1
 8010c7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010c80:	b98b      	cbnz	r3, 8010ca6 <scalbn+0x2e>
 8010c82:	ee10 3a10 	vmov	r3, s0
 8010c86:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010c8a:	4319      	orrs	r1, r3
 8010c8c:	d00a      	beq.n	8010ca4 <scalbn+0x2c>
 8010c8e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010d40 <scalbn+0xc8>
 8010c92:	4b37      	ldr	r3, [pc, #220]	@ (8010d70 <scalbn+0xf8>)
 8010c94:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010c98:	4298      	cmp	r0, r3
 8010c9a:	da0b      	bge.n	8010cb4 <scalbn+0x3c>
 8010c9c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010d48 <scalbn+0xd0>
 8010ca0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010ca4:	4770      	bx	lr
 8010ca6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d107      	bne.n	8010cbe <scalbn+0x46>
 8010cae:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010cb2:	4770      	bx	lr
 8010cb4:	ee10 1a90 	vmov	r1, s1
 8010cb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010cbc:	3b36      	subs	r3, #54	@ 0x36
 8010cbe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010cc2:	4290      	cmp	r0, r2
 8010cc4:	dd0d      	ble.n	8010ce2 <scalbn+0x6a>
 8010cc6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010d50 <scalbn+0xd8>
 8010cca:	ee10 3a90 	vmov	r3, s1
 8010cce:	eeb0 6b47 	vmov.f64	d6, d7
 8010cd2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8010d58 <scalbn+0xe0>
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	fe27 7b05 	vselge.f64	d7, d7, d5
 8010cdc:	ee27 0b06 	vmul.f64	d0, d7, d6
 8010ce0:	4770      	bx	lr
 8010ce2:	4418      	add	r0, r3
 8010ce4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8010ce8:	4298      	cmp	r0, r3
 8010cea:	dcec      	bgt.n	8010cc6 <scalbn+0x4e>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	dd0a      	ble.n	8010d06 <scalbn+0x8e>
 8010cf0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8010cf4:	ec53 2b10 	vmov	r2, r3, d0
 8010cf8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8010cfc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8010d00:	ec43 2b10 	vmov	d0, r2, r3
 8010d04:	4770      	bx	lr
 8010d06:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8010d0a:	da09      	bge.n	8010d20 <scalbn+0xa8>
 8010d0c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8010d48 <scalbn+0xd0>
 8010d10:	ee10 3a90 	vmov	r3, s1
 8010d14:	eeb0 6b47 	vmov.f64	d6, d7
 8010d18:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8010d60 <scalbn+0xe8>
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	e7db      	b.n	8010cd8 <scalbn+0x60>
 8010d20:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8010d24:	ec53 2b10 	vmov	r2, r3, d0
 8010d28:	3036      	adds	r0, #54	@ 0x36
 8010d2a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8010d2e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8010d32:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010d68 <scalbn+0xf0>
 8010d36:	ec43 2b10 	vmov	d0, r2, r3
 8010d3a:	e7b1      	b.n	8010ca0 <scalbn+0x28>
 8010d3c:	f3af 8000 	nop.w
 8010d40:	00000000 	.word	0x00000000
 8010d44:	43500000 	.word	0x43500000
 8010d48:	c2f8f359 	.word	0xc2f8f359
 8010d4c:	01a56e1f 	.word	0x01a56e1f
 8010d50:	8800759c 	.word	0x8800759c
 8010d54:	7e37e43c 	.word	0x7e37e43c
 8010d58:	8800759c 	.word	0x8800759c
 8010d5c:	fe37e43c 	.word	0xfe37e43c
 8010d60:	c2f8f359 	.word	0xc2f8f359
 8010d64:	81a56e1f 	.word	0x81a56e1f
 8010d68:	00000000 	.word	0x00000000
 8010d6c:	3c900000 	.word	0x3c900000
 8010d70:	ffff3cb0 	.word	0xffff3cb0
 8010d74:	00000000 	.word	0x00000000

08010d78 <floor>:
 8010d78:	ee10 3a90 	vmov	r3, s1
 8010d7c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8010d80:	ee10 2a10 	vmov	r2, s0
 8010d84:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8010d88:	2913      	cmp	r1, #19
 8010d8a:	b530      	push	{r4, r5, lr}
 8010d8c:	4615      	mov	r5, r2
 8010d8e:	dc33      	bgt.n	8010df8 <floor+0x80>
 8010d90:	2900      	cmp	r1, #0
 8010d92:	da18      	bge.n	8010dc6 <floor+0x4e>
 8010d94:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8010e58 <floor+0xe0>
 8010d98:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010d9c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da4:	dd0a      	ble.n	8010dbc <floor+0x44>
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	da50      	bge.n	8010e4c <floor+0xd4>
 8010daa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010dae:	4313      	orrs	r3, r2
 8010db0:	2200      	movs	r2, #0
 8010db2:	4293      	cmp	r3, r2
 8010db4:	4b2a      	ldr	r3, [pc, #168]	@ (8010e60 <floor+0xe8>)
 8010db6:	bf08      	it	eq
 8010db8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	4610      	mov	r0, r2
 8010dc0:	ec41 0b10 	vmov	d0, r0, r1
 8010dc4:	e01f      	b.n	8010e06 <floor+0x8e>
 8010dc6:	4827      	ldr	r0, [pc, #156]	@ (8010e64 <floor+0xec>)
 8010dc8:	4108      	asrs	r0, r1
 8010dca:	ea03 0400 	and.w	r4, r3, r0
 8010dce:	4314      	orrs	r4, r2
 8010dd0:	d019      	beq.n	8010e06 <floor+0x8e>
 8010dd2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010e58 <floor+0xe0>
 8010dd6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010dda:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de2:	ddeb      	ble.n	8010dbc <floor+0x44>
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	bfbe      	ittt	lt
 8010de8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8010dec:	410a      	asrlt	r2, r1
 8010dee:	189b      	addlt	r3, r3, r2
 8010df0:	ea23 0300 	bic.w	r3, r3, r0
 8010df4:	2200      	movs	r2, #0
 8010df6:	e7e1      	b.n	8010dbc <floor+0x44>
 8010df8:	2933      	cmp	r1, #51	@ 0x33
 8010dfa:	dd05      	ble.n	8010e08 <floor+0x90>
 8010dfc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010e00:	d101      	bne.n	8010e06 <floor+0x8e>
 8010e02:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010e06:	bd30      	pop	{r4, r5, pc}
 8010e08:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8010e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e10:	40e0      	lsrs	r0, r4
 8010e12:	4210      	tst	r0, r2
 8010e14:	d0f7      	beq.n	8010e06 <floor+0x8e>
 8010e16:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8010e58 <floor+0xe0>
 8010e1a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010e1e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e26:	ddc9      	ble.n	8010dbc <floor+0x44>
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	da02      	bge.n	8010e32 <floor+0xba>
 8010e2c:	2914      	cmp	r1, #20
 8010e2e:	d103      	bne.n	8010e38 <floor+0xc0>
 8010e30:	3301      	adds	r3, #1
 8010e32:	ea22 0200 	bic.w	r2, r2, r0
 8010e36:	e7c1      	b.n	8010dbc <floor+0x44>
 8010e38:	2401      	movs	r4, #1
 8010e3a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8010e3e:	fa04 f101 	lsl.w	r1, r4, r1
 8010e42:	440a      	add	r2, r1
 8010e44:	42aa      	cmp	r2, r5
 8010e46:	bf38      	it	cc
 8010e48:	191b      	addcc	r3, r3, r4
 8010e4a:	e7f2      	b.n	8010e32 <floor+0xba>
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	4613      	mov	r3, r2
 8010e50:	e7b4      	b.n	8010dbc <floor+0x44>
 8010e52:	bf00      	nop
 8010e54:	f3af 8000 	nop.w
 8010e58:	8800759c 	.word	0x8800759c
 8010e5c:	7e37e43c 	.word	0x7e37e43c
 8010e60:	bff00000 	.word	0xbff00000
 8010e64:	000fffff 	.word	0x000fffff

08010e68 <_init>:
 8010e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e6a:	bf00      	nop
 8010e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e6e:	bc08      	pop	{r3}
 8010e70:	469e      	mov	lr, r3
 8010e72:	4770      	bx	lr

08010e74 <_fini>:
 8010e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e76:	bf00      	nop
 8010e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e7a:	bc08      	pop	{r3}
 8010e7c:	469e      	mov	lr, r3
 8010e7e:	4770      	bx	lr
