
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3d8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800b678  0800b678  0000c678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b7c8  0800b7c8  0000c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b7d0  0800b7d0  0000c7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b7d4  0800b7d4  0000c7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0800b7d8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000444  2400007c  0800b854  0000d07c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004c0  0800b854  0000d4c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000171ae  00000000  00000000  0000d0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003417  00000000  00000000  00024258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  00027670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ff7  00000000  00000000  00028b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039760  00000000  00000000  00029b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b76c  00000000  00000000  00063277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00164bd9  00000000  00000000  0007e9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e35bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c0c  00000000  00000000  001e3600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  001e920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b660 	.word	0x0800b660

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800b660 	.word	0x0800b660

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:

//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80003c0:	bf00      	nop
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <RA8875_BUS_FREE+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a06      	ldr	r2, [pc, #24]	@ (80003e4 <RA8875_BUS_FREE+0x28>)
 80003ca:	8812      	ldrh	r2, [r2, #0]
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f7      	beq.n	80003c2 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	240000a0 	.word	0x240000a0
 80003e4:	240000a4 	.word	0x240000a4

080003e8 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f87f 	bl	80004f8 <RA8875_write_command>
  return RA8875_read_data ();
 80003fa:	f000 f841 	bl	8000480 <RA8875_read_data>
 80003fe:	4603      	mov	r3, r0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000412:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <RA8875_write_data+0x68>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <RA8875_write_data+0x6c>)
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d105      	bne.n	800042e <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ffca 	bl	80003bc <RA8875_BUS_FREE>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01b      	beq.n	8000466 <RA8875_write_data+0x5e>
  }
  uint8_t rs_rw_info = 0b00000000;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	4810      	ldr	r0, [pc, #64]	@ (8000478 <RA8875_write_data+0x70>)
 8000438:	f004 f9b2 	bl	80047a0 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800043c:	f107 010f 	add.w	r1, r7, #15
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	2201      	movs	r2, #1
 8000446:	480d      	ldr	r0, [pc, #52]	@ (800047c <RA8875_write_data+0x74>)
 8000448:	f008 f912 	bl	8008670 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800044c:	1df9      	adds	r1, r7, #7
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
 8000452:	2201      	movs	r2, #1
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <RA8875_write_data+0x74>)
 8000456:	f008 f90b 	bl	8008670 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <RA8875_write_data+0x70>)
 8000460:	f004 f99e 	bl	80047a0 <HAL_GPIO_WritePin>
 8000464:	e000      	b.n	8000468 <RA8875_write_data+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000466:	bf00      	nop
}
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	240000a0 	.word	0x240000a0
 8000474:	240000a4 	.word	0x240000a4
 8000478:	58020000 	.word	0x58020000
 800047c:	24000104 	.word	0x24000104

08000480 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <RA8875_read_data+0x68>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <RA8875_read_data+0x6c>)
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	4013      	ands	r3, r2
 8000496:	2b00      	cmp	r3, #0
 8000498:	d107      	bne.n	80004aa <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff8e 	bl	80003bc <RA8875_BUS_FREE>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d101      	bne.n	80004aa <RA8875_read_data+0x2a>
 80004a6:	2300      	movs	r3, #0
 80004a8:	e01a      	b.n	80004e0 <RA8875_read_data+0x60>
  }
  uint8_t rs_rw_info = 0b01000000;
 80004aa:	2340      	movs	r3, #64	@ 0x40
 80004ac:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2110      	movs	r1, #16
 80004b2:	480f      	ldr	r0, [pc, #60]	@ (80004f0 <RA8875_read_data+0x70>)
 80004b4:	f004 f974 	bl	80047a0 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 80004b8:	1db9      	adds	r1, r7, #6
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	2201      	movs	r2, #1
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <RA8875_read_data+0x74>)
 80004c2:	f008 f8d5 	bl	8008670 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	2201      	movs	r2, #1
 80004ce:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <RA8875_read_data+0x74>)
 80004d0:	f008 fabc 	bl	8008a4c <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2110      	movs	r1, #16
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <RA8875_read_data+0x70>)
 80004da:	f004 f961 	bl	80047a0 <HAL_GPIO_WritePin>
  return data;
 80004de:	79fb      	ldrb	r3, [r7, #7]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	240000a0 	.word	0x240000a0
 80004ec:	240000a4 	.word	0x240000a4
 80004f0:	58020000 	.word	0x58020000
 80004f4:	24000104 	.word	0x24000104

080004f8 <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <RA8875_write_command+0x68>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <RA8875_write_command+0x6c>)
 800050a:	8812      	ldrh	r2, [r2, #0]
 800050c:	4013      	ands	r3, r2
 800050e:	2b00      	cmp	r3, #0
 8000510:	d105      	bne.n	800051e <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ff52 	bl	80003bc <RA8875_BUS_FREE>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d01b      	beq.n	8000556 <RA8875_write_command+0x5e>
  }
  uint8_t rs_rw_info = 0b10000000;
 800051e:	2380      	movs	r3, #128	@ 0x80
 8000520:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <RA8875_write_command+0x70>)
 8000528:	f004 f93a 	bl	80047a0 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800052c:	f107 010f 	add.w	r1, r7, #15
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	2201      	movs	r2, #1
 8000536:	480d      	ldr	r0, [pc, #52]	@ (800056c <RA8875_write_command+0x74>)
 8000538:	f008 f89a 	bl	8008670 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800053c:	1df9      	adds	r1, r7, #7
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	2201      	movs	r2, #1
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <RA8875_write_command+0x74>)
 8000546:	f008 f893 	bl	8008670 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <RA8875_write_command+0x70>)
 8000550:	f004 f926 	bl	80047a0 <HAL_GPIO_WritePin>
 8000554:	e000      	b.n	8000558 <RA8875_write_command+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000556:	bf00      	nop
}
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	240000a0 	.word	0x240000a0
 8000564:	240000a4 	.word	0x240000a4
 8000568:	58020000 	.word	0x58020000
 800056c:	24000104 	.word	0x24000104

08000570 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 8000576:	2040      	movs	r0, #64	@ 0x40
 8000578:	f7ff ffbe 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 800057c:	f7ff ff80 	bl	8000480 <RA8875_read_data>
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800058a:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff3a 	bl	8000408 <RA8875_write_data>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff1a 	bl	80003e8 <RA8875_read_reg>
 80005b4:	4603      	mov	r3, r0
 80005b6:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 80005b8:	7bfa      	ldrb	r2, [r7, #15]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	4013      	ands	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f3      	bne.n	80005ac <RA8875_wait_poll+0x10>
 80005c4:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <RA8875_apply_rotation_x+0x34>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d108      	bne.n	80005f4 <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <RA8875_apply_rotation_x+0x38>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	80fb      	strh	r3, [r7, #6]
      break;
 80005f2:	bf00      	nop
  }

  return x;
 80005f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	2400009d 	.word	0x2400009d
 8000608:	24000098 	.word	0x24000098

0800060c <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <RA8875_apply_rotation_y+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d108      	bne.n	8000630 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <RA8875_apply_rotation_y+0x44>)
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	3b01      	subs	r3, #1
 800062a:	b29b      	uxth	r3, r3
 800062c:	80fb      	strh	r3, [r7, #6]
      break;
 800062e:	bf00      	nop
  }

  return y + _voffset;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <RA8875_apply_rotation_y+0x48>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	4413      	add	r3, r2
 800063a:	b29b      	uxth	r3, r3
 800063c:	b21b      	sxth	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2400009d 	.word	0x2400009d
 8000650:	2400009a 	.word	0x2400009a
 8000654:	2400009e 	.word	0x2400009e

08000658 <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4603      	mov	r3, r0
 800066c:	80bb      	strh	r3, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	807b      	strh	r3, [r7, #2]
 8000672:	4613      	mov	r3, r2
 8000674:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffa8 	bl	80005d0 <RA8875_apply_rotation_x>
 8000680:	4603      	mov	r3, r0
 8000682:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000684:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffbf 	bl	800060c <RA8875_apply_rotation_y>
 800068e:	4603      	mov	r3, r0
 8000690:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff9a 	bl	80005d0 <RA8875_apply_rotation_x>
 800069c:	4603      	mov	r3, r0
 800069e:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 80006a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffb1 	bl	800060c <RA8875_apply_rotation_y>
 80006aa:	4603      	mov	r3, r0
 80006ac:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 80006ae:	2091      	movs	r0, #145	@ 0x91
 80006b0:	f7ff ff22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fea5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 80006be:	2092      	movs	r0, #146	@ 0x92
 80006c0:	f7ff ff1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 80006c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c8:	121b      	asrs	r3, r3, #8
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fe9a 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 80006d4:	2093      	movs	r0, #147	@ 0x93
 80006d6:	f7ff ff0f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe92 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 80006e4:	2094      	movs	r0, #148	@ 0x94
 80006e6:	f7ff ff07 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80006ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ee:	121b      	asrs	r3, r3, #8
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fe87 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80006fa:	2095      	movs	r0, #149	@ 0x95
 80006fc:	f7ff fefc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe7f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 800070a:	2096      	movs	r0, #150	@ 0x96
 800070c:	f7ff fef4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000714:	121b      	asrs	r3, r3, #8
 8000716:	b21b      	sxth	r3, r3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fe74 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000720:	2097      	movs	r0, #151	@ 0x97
 8000722:	f7ff fee9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000726:	883b      	ldrh	r3, [r7, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fe6c 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000730:	2098      	movs	r0, #152	@ 0x98
 8000732:	f7ff fee1 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000736:	f9b7 3000 	ldrsh.w	r3, [r7]
 800073a:	121b      	asrs	r3, r3, #8
 800073c:	b21b      	sxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe61 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000746:	2063      	movs	r0, #99	@ 0x63
 8000748:	f7ff fed6 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 800074c:	8b3b      	ldrh	r3, [r7, #24]
 800074e:	0adb      	lsrs	r3, r3, #11
 8000750:	b29b      	uxth	r3, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe57 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 800075a:	2064      	movs	r0, #100	@ 0x64
 800075c:	f7ff fecc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000760:	8b3b      	ldrh	r3, [r7, #24]
 8000762:	115b      	asrs	r3, r3, #5
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe4b 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000772:	2065      	movs	r0, #101	@ 0x65
 8000774:	f7ff fec0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000778:	8b3b      	ldrh	r3, [r7, #24]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe40 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000788:	2090      	movs	r0, #144	@ 0x90
 800078a:	f7ff feb5 	bl	80004f8 <RA8875_write_command>
  if (filled)
 800078e:	7f3b      	ldrb	r3, [r7, #28]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000794:	20b0      	movs	r0, #176	@ 0xb0
 8000796:	f7ff fe37 	bl	8000408 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 800079a:	e002      	b.n	80007a2 <rectHelper+0x14a>
    RA8875_write_data (0x90);
 800079c:	2090      	movs	r0, #144	@ 0x90
 800079e:	f7ff fe33 	bl	8000408 <RA8875_write_data>
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd90      	pop	{r4, r7, pc}

080007aa <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 80007aa:	b590      	push	{r4, r7, lr}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4604      	mov	r4, r0
 80007b2:	4608      	mov	r0, r1
 80007b4:	4611      	mov	r1, r2
 80007b6:	461a      	mov	r2, r3
 80007b8:	4623      	mov	r3, r4
 80007ba:	80fb      	strh	r3, [r7, #6]
 80007bc:	4603      	mov	r3, r0
 80007be:	80bb      	strh	r3, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 80007c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff feff 	bl	80005d0 <RA8875_apply_rotation_x>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 80007d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff16 	bl	800060c <RA8875_apply_rotation_y>
 80007e0:	4603      	mov	r3, r0
 80007e2:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 80007e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fef1 	bl	80005d0 <RA8875_apply_rotation_x>
 80007ee:	4603      	mov	r3, r0
 80007f0:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 80007f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff08 	bl	800060c <RA8875_apply_rotation_y>
 80007fc:	4603      	mov	r3, r0
 80007fe:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000800:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fee3 	bl	80005d0 <RA8875_apply_rotation_x>
 800080a:	4603      	mov	r3, r0
 800080c:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 800080e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fefa 	bl	800060c <RA8875_apply_rotation_y>
 8000818:	4603      	mov	r3, r0
 800081a:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 800081c:	2091      	movs	r0, #145	@ 0x91
 800081e:	f7ff fe6b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0);
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fdee 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 800082c:	2092      	movs	r0, #146	@ 0x92
 800082e:	f7ff fe63 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	121b      	asrs	r3, r3, #8
 8000838:	b21b      	sxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fde3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000842:	2093      	movs	r0, #147	@ 0x93
 8000844:	f7ff fe58 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0);
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fddb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000852:	2094      	movs	r0, #148	@ 0x94
 8000854:	f7ff fe50 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 8000858:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800085c:	121b      	asrs	r3, r3, #8
 800085e:	b21b      	sxth	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fdd0 	bl	8000408 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 8000868:	2095      	movs	r0, #149	@ 0x95
 800086a:	f7ff fe45 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1);
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fdc8 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000878:	2096      	movs	r0, #150	@ 0x96
 800087a:	f7ff fe3d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 800087e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000882:	121b      	asrs	r3, r3, #8
 8000884:	b21b      	sxth	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fdbd 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x97);
 800088e:	2097      	movs	r0, #151	@ 0x97
 8000890:	f7ff fe32 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1);
 8000894:	883b      	ldrh	r3, [r7, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fdb5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 800089e:	2098      	movs	r0, #152	@ 0x98
 80008a0:	f7ff fe2a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 80008a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008a8:	121b      	asrs	r3, r3, #8
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fdaa 	bl	8000408 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 80008b4:	20a9      	movs	r0, #169	@ 0xa9
 80008b6:	f7ff fe1f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2);
 80008ba:	8b3b      	ldrh	r3, [r7, #24]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fda2 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAA);
 80008c4:	20aa      	movs	r0, #170	@ 0xaa
 80008c6:	f7ff fe17 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 80008ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008ce:	121b      	asrs	r3, r3, #8
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fd97 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAB);
 80008da:	20ab      	movs	r0, #171	@ 0xab
 80008dc:	f7ff fe0c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2);
 80008e0:	8bbb      	ldrh	r3, [r7, #28]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fd8f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAC);
 80008ea:	20ac      	movs	r0, #172	@ 0xac
 80008ec:	f7ff fe04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 80008f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008f4:	121b      	asrs	r3, r3, #8
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fd84 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000900:	2063      	movs	r0, #99	@ 0x63
 8000902:	f7ff fdf9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000906:	8c3b      	ldrh	r3, [r7, #32]
 8000908:	0adb      	lsrs	r3, r3, #11
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fd7a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f7ff fdef 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800091a:	8c3b      	ldrh	r3, [r7, #32]
 800091c:	115b      	asrs	r3, r3, #5
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fd6e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 800092c:	2065      	movs	r0, #101	@ 0x65
 800092e:	f7ff fde3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000932:	8c3b      	ldrh	r3, [r7, #32]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 031f 	and.w	r3, r3, #31
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fd63 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000942:	2090      	movs	r0, #144	@ 0x90
 8000944:	f7ff fdd8 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000950:	20a1      	movs	r0, #161	@ 0xa1
 8000952:	f7ff fd59 	bl	8000408 <RA8875_write_data>
 8000956:	e002      	b.n	800095e <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 8000958:	2081      	movs	r0, #129	@ 0x81
 800095a:	f7ff fd55 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	2090      	movs	r0, #144	@ 0x90
 8000962:	f7ff fe1b 	bl	800059c <RA8875_wait_poll>
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}

0800096e <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 800096e:	b590      	push	{r4, r7, lr}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4623      	mov	r3, r4
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	4603      	mov	r3, r0
 8000982:	80bb      	strh	r3, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 800098c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe1d 	bl	80005d0 <RA8875_apply_rotation_x>
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 800099a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe34 	bl	800060c <RA8875_apply_rotation_y>
 80009a4:	4603      	mov	r3, r0
 80009a6:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 80009a8:	20a5      	movs	r0, #165	@ 0xa5
 80009aa:	f7ff fda5 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd28 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA6);
 80009b8:	20a6      	movs	r0, #166	@ 0xa6
 80009ba:	f7ff fd9d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	121b      	asrs	r3, r3, #8
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd1d 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA7);
 80009ce:	20a7      	movs	r0, #167	@ 0xa7
 80009d0:	f7ff fd92 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter);
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd15 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA8);
 80009de:	20a8      	movs	r0, #168	@ 0xa8
 80009e0:	f7ff fd8a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 80009e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009e8:	121b      	asrs	r3, r3, #8
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fd0a 	bl	8000408 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 80009f4:	20a1      	movs	r0, #161	@ 0xa1
 80009f6:	f7ff fd7f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis);
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd02 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000a04:	20a2      	movs	r0, #162	@ 0xa2
 8000a06:	f7ff fd77 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000a0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a0e:	121b      	asrs	r3, r3, #8
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fcf7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000a1a:	20a3      	movs	r0, #163	@ 0xa3
 8000a1c:	f7ff fd6c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fcef 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000a2a:	20a4      	movs	r0, #164	@ 0xa4
 8000a2c:	f7ff fd64 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000a30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fce4 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000a40:	2063      	movs	r0, #99	@ 0x63
 8000a42:	f7ff fd59 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000a46:	8b3b      	ldrh	r3, [r7, #24]
 8000a48:	0adb      	lsrs	r3, r3, #11
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fcda 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000a54:	2064      	movs	r0, #100	@ 0x64
 8000a56:	f7ff fd4f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000a5a:	8b3b      	ldrh	r3, [r7, #24]
 8000a5c:	115b      	asrs	r3, r3, #5
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fcce 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000a6c:	2065      	movs	r0, #101	@ 0x65
 8000a6e:	f7ff fd43 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fcc3 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000a82:	20a0      	movs	r0, #160	@ 0xa0
 8000a84:	f7ff fd38 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000a88:	7f3b      	ldrb	r3, [r7, #28]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000a8e:	20c0      	movs	r0, #192	@ 0xc0
 8000a90:	f7ff fcba 	bl	8000408 <RA8875_write_data>
 8000a94:	e002      	b.n	8000a9c <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000a96:	2080      	movs	r0, #128	@ 0x80
 8000a98:	f7ff fcb6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	20a0      	movs	r0, #160	@ 0xa0
 8000aa0:	f7ff fd7c 	bl	800059c <RA8875_wait_poll>
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}

08000aac <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4623      	mov	r3, r4
 8000abc:	80fb      	strh	r3, [r7, #6]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80bb      	strh	r3, [r7, #4]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	807b      	strh	r3, [r7, #2]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fd7e 	bl	80005d0 <RA8875_apply_rotation_x>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000ad8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd95 	bl	800060c <RA8875_apply_rotation_y>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000ae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd70 	bl	80005d0 <RA8875_apply_rotation_x>
 8000af0:	4603      	mov	r3, r0
 8000af2:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000af4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd87 	bl	800060c <RA8875_apply_rotation_y>
 8000afe:	4603      	mov	r3, r0
 8000b00:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 8000b02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dd05      	ble.n	8000b1a <roundRectHelper+0x6e>
 8000b0e:	1cba      	adds	r2, r7, #2
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc3b 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8000b1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dd05      	ble.n	8000b32 <roundRectHelper+0x86>
 8000b26:	463a      	mov	r2, r7
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fc2f 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 8000b32:	2091      	movs	r0, #145	@ 0x91
 8000b34:	f7ff fce0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 8000b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fc62 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000b44:	2092      	movs	r0, #146	@ 0x92
 8000b46:	f7ff fcd7 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4e:	121b      	asrs	r3, r3, #8
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fc57 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000b5a:	2093      	movs	r0, #147	@ 0x93
 8000b5c:	f7ff fccc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 8000b60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc4e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000b6c:	2094      	movs	r0, #148	@ 0x94
 8000b6e:	f7ff fcc3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b76:	121b      	asrs	r3, r3, #8
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc43 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000b82:	2095      	movs	r0, #149	@ 0x95
 8000b84:	f7ff fcb8 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fc3a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000b94:	2096      	movs	r0, #150	@ 0x96
 8000b96:	f7ff fcaf 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	121b      	asrs	r3, r3, #8
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc2f 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000baa:	2097      	movs	r0, #151	@ 0x97
 8000bac:	f7ff fca4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000bb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc26 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000bbc:	2098      	movs	r0, #152	@ 0x98
 8000bbe:	f7ff fc9b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000bc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc6:	121b      	asrs	r3, r3, #8
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc1b 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA1);
 8000bd2:	20a1      	movs	r0, #161	@ 0xa1
 8000bd4:	f7ff fc90 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bd8:	8b3b      	ldrh	r3, [r7, #24]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fc13 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000be2:	20a2      	movs	r0, #162	@ 0xa2
 8000be4:	f7ff fc88 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000be8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000bec:	121b      	asrs	r3, r3, #8
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc08 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA3);
 8000bf8:	20a3      	movs	r0, #163	@ 0xa3
 8000bfa:	f7ff fc7d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bfe:	8b3b      	ldrh	r3, [r7, #24]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc00 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000c08:	20a4      	movs	r0, #164	@ 0xa4
 8000c0a:	f7ff fc75 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000c0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c12:	121b      	asrs	r3, r3, #8
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbf5 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c1e:	2063      	movs	r0, #99	@ 0x63
 8000c20:	f7ff fc6a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c24:	8bbb      	ldrh	r3, [r7, #28]
 8000c26:	0adb      	lsrs	r3, r3, #11
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fbeb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c32:	2064      	movs	r0, #100	@ 0x64
 8000c34:	f7ff fc60 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c38:	8bbb      	ldrh	r3, [r7, #28]
 8000c3a:	115b      	asrs	r3, r3, #5
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbdf 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000c4a:	2065      	movs	r0, #101	@ 0x65
 8000c4c:	f7ff fc54 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 031f 	and.w	r3, r3, #31
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbd4 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 8000c60:	20a0      	movs	r0, #160	@ 0xa0
 8000c62:	f7ff fc49 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 8000c6e:	20e0      	movs	r0, #224	@ 0xe0
 8000c70:	f7ff fbca 	bl	8000408 <RA8875_write_data>
 8000c74:	e002      	b.n	8000c7c <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 8000c76:	20a0      	movs	r0, #160	@ 0xa0
 8000c78:	f7ff fbc6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	20a0      	movs	r0, #160	@ 0xa0
 8000c80:	f7ff fc8c 	bl	800059c <RA8875_wait_poll>
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}

08000c8c <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	807b      	strh	r3, [r7, #2]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 8000caa:	88fa      	ldrh	r2, [r7, #6]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b21c      	sxth	r4, r3
 8000cb8:	88ba      	ldrh	r2, [r7, #4]
 8000cba:	883b      	ldrh	r3, [r7, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	8b3b      	ldrh	r3, [r7, #24]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	4622      	mov	r2, r4
 8000cda:	f7ff fcbd 	bl	8000658 <rectHelper>
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
	...

08000ce8 <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <RA8875_fill_screen+0x38>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <RA8875_fill_screen+0x3c>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b219      	sxth	r1, r3
 8000d06:	2301      	movs	r3, #1
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fca0 	bl	8000658 <rectHelper>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000098 	.word	0x24000098
 8000d24:	2400009a 	.word	0x2400009a

08000d28 <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4608      	mov	r0, r1
 8000d32:	4611      	mov	r1, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	4623      	mov	r3, r4
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	807b      	strh	r3, [r7, #2]
 8000d42:	4613      	mov	r3, r2
 8000d44:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 8000d46:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d56:	2301      	movs	r3, #1
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	8c3b      	ldrh	r3, [r7, #32]
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	f7ff fd1d 	bl	80007aa <triangleHelper>
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}

08000d78 <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	807b      	strh	r3, [r7, #2]
 8000d92:	4613      	mov	r3, r2
 8000d94:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 8000d96:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d9e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000da2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000da6:	2301      	movs	r3, #1
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	8b3b      	ldrh	r3, [r7, #24]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4623      	mov	r3, r4
 8000db0:	f7ff fddd 	bl	800096e <ellipseHelper>
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af04      	add	r7, sp, #16
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 8000dda:	88fa      	ldrh	r2, [r7, #6]
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	4413      	add	r3, r2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b21c      	sxth	r4, r3
 8000de4:	88ba      	ldrh	r2, [r7, #4]
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	8bbb      	ldrh	r3, [r7, #28]
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	4622      	mov	r2, r4
 8000e08:	f7ff fe50 	bl	8000aac <roundRectHelper>
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}

08000e14 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 8000e1a:	2040      	movs	r0, #64	@ 0x40
 8000e1c:	f7ff fb6c 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000e20:	f7ff fb2e 	bl	8000480 <RA8875_read_data>
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e2e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fae8 	bl	8000408 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 8000e38:	2021      	movs	r0, #33	@ 0x21
 8000e3a:	f7ff fb5d 	bl	80004f8 <RA8875_write_command>
  temp = RA8875_read_data ();
 8000e3e:	f7ff fb1f 	bl	8000480 <RA8875_read_data>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8000e4c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fad9 	bl	8000408 <RA8875_write_data>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	460a      	mov	r2, r1
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 8000e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fbac 	bl	80005d0 <RA8875_apply_rotation_x>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000e7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fbc3 	bl	800060c <RA8875_apply_rotation_y>
 8000e86:	4603      	mov	r3, r0
 8000e88:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 8000e8a:	202a      	movs	r0, #42	@ 0x2a
 8000e8c:	f7ff fb34 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fab7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2B);
 8000e9a:	202b      	movs	r0, #43	@ 0x2b
 8000e9c:	f7ff fb2c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff faad 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2C);
 8000eae:	202c      	movs	r0, #44	@ 0x2c
 8000eb0:	f7ff fb22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2D);
 8000ebe:	202d      	movs	r0, #45	@ 0x2d
 8000ec0:	f7ff fb1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa9b 	bl	8000408 <RA8875_write_data>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 8000eea:	2063      	movs	r0, #99	@ 0x63
 8000eec:	f7ff fb04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	0adb      	lsrs	r3, r3, #11
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fa85 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000efe:	2064      	movs	r0, #100	@ 0x64
 8000f00:	f7ff fafa 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	115b      	asrs	r3, r3, #5
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa79 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000f16:	2065      	movs	r0, #101	@ 0x65
 8000f18:	f7ff faee 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa6e 	bl	8000408 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 8000f2c:	2060      	movs	r0, #96	@ 0x60
 8000f2e:	f7ff fae3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	0adb      	lsrs	r3, r3, #11
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa64 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x61);
 8000f40:	2061      	movs	r0, #97	@ 0x61
 8000f42:	f7ff fad9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	115b      	asrs	r3, r3, #5
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa58 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x62);
 8000f58:	2062      	movs	r0, #98	@ 0x62
 8000f5a:	f7ff facd 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa4d 	bl	8000408 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 8000f6e:	2022      	movs	r0, #34	@ 0x22
 8000f70:	f7ff fac2 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000f74:	f7ff fa84 	bl	8000480 <RA8875_read_data>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f82:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa3e 	bl	8000408 <RA8875_write_data>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d901      	bls.n	8000fa8 <RA8875_text_scale+0x14>
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8000fa8:	2022      	movs	r0, #34	@ 0x22
 8000faa:	f7ff faa5 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000fae:	f7ff fa67 	bl	8000480 <RA8875_read_data>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f023 030f 	bic.w	r3, r3, #15
 8000fbc:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa1a 	bl	8000408 <RA8875_write_data>

  _textScale = scale;
 8000fd4:	4a03      	ldr	r2, [pc, #12]	@ (8000fe4 <RA8875_text_scale+0x50>)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	7013      	strb	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2400009c 	.word	0x2400009c

08000fe8 <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <RA8875_text_write+0x1c>
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f970 	bl	80002e0 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 8001004:	2002      	movs	r0, #2
 8001006:	f7ff fa77 	bl	80004f8 <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 800100a:	2300      	movs	r3, #0
 800100c:	81fb      	strh	r3, [r7, #14]
 800100e:	e010      	b.n	8001032 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f9f5 	bl	8000408 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <RA8875_text_write+0x5c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <RA8875_text_write+0x44>
 8001026:	2001      	movs	r0, #1
 8001028:	f001 f9c2 	bl	80023b0 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	3301      	adds	r3, #1
 8001030:	81fb      	strh	r3, [r7, #14]
 8001032:	89fa      	ldrh	r2, [r7, #14]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3ea      	bcc.n	8001010 <RA8875_text_write+0x28>
  }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2400009c 	.word	0x2400009c

08001048 <end_game>:
			}
			break;
	}
}

void end_game(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af04      	add	r7, sp, #16
	mode = GAME_MODE_END;
 800104e:	4bdb      	ldr	r3, [pc, #876]	@ (80013bc <end_game+0x374>)
 8001050:	2202      	movs	r2, #2
 8001052:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 8001054:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001058:	f001 f9aa 	bl	80023b0 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 800105c:	201f      	movs	r0, #31
 800105e:	f7ff fe43 	bl	8000ce8 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8001062:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	230a      	movs	r3, #10
 800106a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800106e:	215a      	movs	r1, #90	@ 0x5a
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fe0b 	bl	8000c8c <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8001076:	2300      	movs	r3, #0
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	230a      	movs	r3, #10
 800107c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001080:	2164      	movs	r1, #100	@ 0x64
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fe02 	bl	8000c8c <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 8001088:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800109e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80010a2:	21b4      	movs	r1, #180	@ 0xb4
 80010a4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80010a8:	f7ff fe3e 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 80010ac:	231f      	movs	r3, #31
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80010c0:	f240 22da 	movw	r2, #730	@ 0x2da
 80010c4:	21b4      	movs	r1, #180	@ 0xb4
 80010c6:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 80010ca:	f7ff fe2d 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 80010ce:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	f240 238a 	movw	r3, #650	@ 0x28a
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80010e4:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80010e8:	21b4      	movs	r1, #180	@ 0xb4
 80010ea:	f240 208a 	movw	r0, #650	@ 0x28a
 80010ee:	f7ff fe1b 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 80010f2:	231f      	movs	r3, #31
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f240 2376 	movw	r3, #630	@ 0x276
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001106:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800110a:	21b4      	movs	r1, #180	@ 0xb4
 800110c:	f240 2076 	movw	r0, #630	@ 0x276
 8001110:	f7ff fe0a 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 8001114:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	2346      	movs	r3, #70	@ 0x46
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001128:	2214      	movs	r2, #20
 800112a:	21b4      	movs	r1, #180	@ 0xb4
 800112c:	2046      	movs	r0, #70	@ 0x46
 800112e:	f7ff fdfb 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 8001132:	231f      	movs	r3, #31
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	235a      	movs	r3, #90	@ 0x5a
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001144:	2228      	movs	r2, #40	@ 0x28
 8001146:	21b4      	movs	r1, #180	@ 0xb4
 8001148:	205a      	movs	r0, #90	@ 0x5a
 800114a:	f7ff fded 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 800114e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	2378      	movs	r3, #120	@ 0x78
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001162:	2246      	movs	r2, #70	@ 0x46
 8001164:	21b4      	movs	r1, #180	@ 0xb4
 8001166:	2078      	movs	r0, #120	@ 0x78
 8001168:	f7ff fdde 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 800116c:	231f      	movs	r3, #31
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	238c      	movs	r3, #140	@ 0x8c
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800117e:	225a      	movs	r2, #90	@ 0x5a
 8001180:	21b4      	movs	r1, #180	@ 0xb4
 8001182:	208c      	movs	r0, #140	@ 0x8c
 8001184:	f7ff fdd0 	bl	8000d28 <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 8001188:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2378      	movs	r3, #120	@ 0x78
 8001190:	22c8      	movs	r2, #200	@ 0xc8
 8001192:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001196:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800119a:	f7ff fded 	bl	8000d78 <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 800119e:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	f240 237e 	movw	r3, #638	@ 0x27e
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80011b4:	f240 224e 	movw	r2, #590	@ 0x24e
 80011b8:	21fa      	movs	r1, #250	@ 0xfa
 80011ba:	f240 204e 	movw	r0, #590	@ 0x24e
 80011be:	f7ff fdb3 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 80011c2:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	23ae      	movs	r3, #174	@ 0xae
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80011d6:	22d4      	movs	r2, #212	@ 0xd4
 80011d8:	21fa      	movs	r1, #250	@ 0xfa
 80011da:	20d4      	movs	r0, #212	@ 0xd4
 80011dc:	f7ff fda4 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 80011e0:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	2382      	movs	r3, #130	@ 0x82
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	f240 13db 	movw	r3, #475	@ 0x1db
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	23c0      	movs	r3, #192	@ 0xc0
 80011f2:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 80011f6:	21af      	movs	r1, #175	@ 0xaf
 80011f8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80011fc:	f7ff fd94 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 8001200:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	2382      	movs	r3, #130	@ 0x82
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	f240 1345 	movw	r3, #325	@ 0x145
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	23c0      	movs	r3, #192	@ 0xc0
 8001212:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001216:	21af      	movs	r1, #175	@ 0xaf
 8001218:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800121c:	f7ff fd84 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 8001220:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001236:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800123a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800123e:	f240 200a 	movw	r0, #522	@ 0x20a
 8001242:	f7ff fd71 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 8001246:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 800125c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001260:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001264:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001268:	f7ff fd5e 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 800126c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	23be      	movs	r3, #190	@ 0xbe
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f44f 7311 	mov.w	r3, #580	@ 0x244
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	23c0      	movs	r3, #192	@ 0xc0
 800127e:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8001282:	21fa      	movs	r1, #250	@ 0xfa
 8001284:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8001288:	f7ff fd4e 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 800128c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	23be      	movs	r3, #190	@ 0xbe
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	23dc      	movs	r3, #220	@ 0xdc
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	23c0      	movs	r3, #192	@ 0xc0
 800129c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80012a0:	21fa      	movs	r1, #250	@ 0xfa
 80012a2:	20d4      	movs	r0, #212	@ 0xd4
 80012a4:	f7ff fd40 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 80012a8:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	f44f 7311 	mov.w	r3, #580	@ 0x244
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80012be:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 80012c2:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80012c6:	f44f 7014 	mov.w	r0, #592	@ 0x250
 80012ca:	f7ff fd2d 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 80012ce:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80012e4:	22d4      	movs	r2, #212	@ 0xd4
 80012e6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80012ea:	20dc      	movs	r0, #220	@ 0xdc
 80012ec:	f7ff fd1c 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 80012f0:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	237c      	movs	r3, #124	@ 0x7c
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001304:	22e8      	movs	r2, #232	@ 0xe8
 8001306:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800130a:	20ca      	movs	r0, #202	@ 0xca
 800130c:	f7ff fd0c 	bl	8000d28 <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 8001310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	230a      	movs	r3, #10
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2346      	movs	r3, #70	@ 0x46
 800131c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001320:	21cd      	movs	r1, #205	@ 0xcd
 8001322:	20fa      	movs	r0, #250	@ 0xfa
 8001324:	f7ff fd4a 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 8001328:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	230a      	movs	r3, #10
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2346      	movs	r3, #70	@ 0x46
 8001334:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001338:	f240 1127 	movw	r1, #295	@ 0x127
 800133c:	20fa      	movs	r0, #250	@ 0xfa
 800133e:	f7ff fd3d 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 8001342:	2300      	movs	r3, #0
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	2307      	movs	r3, #7
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2332      	movs	r3, #50	@ 0x32
 800134c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001350:	21d7      	movs	r1, #215	@ 0xd7
 8001352:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001356:	f7ff fd31 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 800135a:	2300      	movs	r3, #0
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	2307      	movs	r3, #7
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2332      	movs	r3, #50	@ 0x32
 8001364:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001368:	f240 1131 	movw	r1, #305	@ 0x131
 800136c:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001370:	f7ff fd24 	bl	8000dbc <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 8001374:	f7ff fd4e 	bl	8000e14 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8001378:	2100      	movs	r1, #0
 800137a:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800137e:	f7ff fdac 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 8001382:	21d7      	movs	r1, #215	@ 0xd7
 8001384:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001388:	f7ff fd69 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fe01 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 8001392:	210a      	movs	r1, #10
 8001394:	480a      	ldr	r0, [pc, #40]	@ (80013c0 <end_game+0x378>)
 8001396:	f7ff fe27 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 800139a:	f240 1131 	movw	r1, #305	@ 0x131
 800139e:	f240 1063 	movw	r0, #355	@ 0x163
 80013a2:	f7ff fd5c 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 80013a6:	2104      	movs	r1, #4
 80013a8:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <end_game+0x37c>)
 80013aa:	f7ff fe1d 	bl	8000fe8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 80013ae:	211f      	movs	r1, #31
 80013b0:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80013b4:	f7ff fd91 	bl	8000eda <RA8875_text_color>
 80013b8:	e006      	b.n	80013c8 <end_game+0x380>
 80013ba:	bf00      	nop
 80013bc:	240000a6 	.word	0x240000a6
 80013c0:	0800b6d8 	.word	0x0800b6d8
 80013c4:	0800b6e4 	.word	0x0800b6e4
	RA8875_text_cursor_position(CENTER_X-143, 20);
 80013c8:	2114      	movs	r1, #20
 80013ca:	f240 1001 	movw	r0, #257	@ 0x101
 80013ce:	f7ff fd46 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f7ff fdde 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 80013d8:	2104      	movs	r1, #4
 80013da:	4849      	ldr	r0, [pc, #292]	@ (8001500 <end_game+0x4b8>)
 80013dc:	f7ff fe04 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 80013e0:	2114      	movs	r1, #20
 80013e2:	f240 1095 	movw	r0, #405	@ 0x195
 80013e6:	f7ff fd3a 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 80013ea:	2104      	movs	r1, #4
 80013ec:	4845      	ldr	r0, [pc, #276]	@ (8001504 <end_game+0x4bc>)
 80013ee:	f7ff fdfb 	bl	8000fe8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80013f2:	211f      	movs	r1, #31
 80013f4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013f8:	f7ff fd6f 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	200a      	movs	r0, #10
 8001400:	f7ff fd2d 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fdc5 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 800140a:	2106      	movs	r1, #6
 800140c:	483e      	ldr	r0, [pc, #248]	@ (8001508 <end_game+0x4c0>)
 800140e:	f7ff fdeb 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 8001412:	2100      	movs	r1, #0
 8001414:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001418:	f7ff fd21 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 800141c:	210b      	movs	r1, #11
 800141e:	483b      	ldr	r0, [pc, #236]	@ (800150c <end_game+0x4c4>)
 8001420:	f7ff fde2 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8001424:	2137      	movs	r1, #55	@ 0x37
 8001426:	200a      	movs	r0, #10
 8001428:	f7ff fd19 	bl	8000e5e <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%d", score);
 800142c:	4b38      	ldr	r3, [pc, #224]	@ (8001510 <end_game+0x4c8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4938      	ldr	r1, [pc, #224]	@ (8001514 <end_game+0x4cc>)
 8001434:	4618      	mov	r0, r3
 8001436:	f009 fc73 	bl	800ad20 <siprintf>
	RA8875_text_write(buffer, 3);
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2103      	movs	r1, #3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fdd2 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 8001444:	2137      	movs	r1, #55	@ 0x37
 8001446:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 800144a:	f7ff fd08 	bl	8000e5e <RA8875_text_cursor_position>
	if(score > hi_score) hi_score = score;
 800144e:	4b30      	ldr	r3, [pc, #192]	@ (8001510 <end_game+0x4c8>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <end_game+0x4d0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	dd03      	ble.n	8001462 <end_game+0x41a>
 800145a:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <end_game+0x4c8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2e      	ldr	r2, [pc, #184]	@ (8001518 <end_game+0x4d0>)
 8001460:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%d", hi_score);
 8001462:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <end_game+0x4d0>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	492a      	ldr	r1, [pc, #168]	@ (8001514 <end_game+0x4cc>)
 800146a:	4618      	mov	r0, r3
 800146c:	f009 fc58 	bl	800ad20 <siprintf>
	RA8875_text_write(buffer, 3);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2103      	movs	r1, #3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fdb7 	bl	8000fe8 <RA8875_text_write>
	RA8875_graphic_mode();
 800147a:	f7ff f879 	bl	8000570 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 800147e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2332      	movs	r3, #50	@ 0x32
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	23df      	movs	r3, #223	@ 0xdf
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2332      	movs	r3, #50	@ 0x32
 800148e:	22ee      	movs	r2, #238	@ 0xee
 8001490:	210a      	movs	r1, #10
 8001492:	20e7      	movs	r0, #231	@ 0xe7
 8001494:	f7ff fc48 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 8001498:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2332      	movs	r3, #50	@ 0x32
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	23e6      	movs	r3, #230	@ 0xe6
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2332      	movs	r3, #50	@ 0x32
 80014a8:	22f5      	movs	r2, #245	@ 0xf5
 80014aa:	2155      	movs	r1, #85	@ 0x55
 80014ac:	20ee      	movs	r0, #238	@ 0xee
 80014ae:	f7ff fc3b 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 80014b2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	2332      	movs	r3, #50	@ 0x32
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	f240 2337 	movw	r3, #567	@ 0x237
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2332      	movs	r3, #50	@ 0x32
 80014c4:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80014c8:	210a      	movs	r1, #10
 80014ca:	f240 202f 	movw	r0, #559	@ 0x22f
 80014ce:	f7ff fc2b 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 80014d2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2332      	movs	r3, #50	@ 0x32
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2332      	movs	r3, #50	@ 0x32
 80014e4:	f240 2221 	movw	r2, #545	@ 0x221
 80014e8:	2155      	movs	r1, #85	@ 0x55
 80014ea:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80014ee:	f7ff fc1b 	bl	8000d28 <RA8875_draw_fill_triangle>

	score = 0;
 80014f2:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <end_game+0x4c8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

	return;
 80014f8:	bf00      	nop
}
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	0800b728 	.word	0x0800b728
 8001504:	0800b730 	.word	0x0800b730
 8001508:	0800b738 	.word	0x0800b738
 800150c:	0800b740 	.word	0x0800b740
 8001510:	240000a8 	.word	0x240000a8
 8001514:	0800b74c 	.word	0x0800b74c
 8001518:	240000ac 	.word	0x240000ac

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001522:	f000 feb3 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001526:	f000 f825 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152a:	f000 f9df 	bl	80018ec <MX_GPIO_Init>
  MX_DMA_Init();
 800152e:	f000 f9b5 	bl	800189c <MX_DMA_Init>
  MX_SPI1_Init();
 8001532:	f000 f8cd 	bl	80016d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001536:	f000 f921 	bl	800177c <MX_SPI2_Init>
  MX_FATFS_Init();
 800153a:	f008 fe47 	bl	800a1cc <MX_FATFS_Init>
  MX_TIM6_Init();
 800153e:	f000 f975 	bl	800182c <MX_TIM6_Init>
  MX_I2S3_Init();
 8001542:	f000 f893 	bl	800166c <MX_I2S3_Init>
//  title_screen();

//  game_matrix();

  char buffer[2];
  buffer[0] = 'a';
 8001546:	2361      	movs	r3, #97	@ 0x61
 8001548:	713b      	strb	r3, [r7, #4]
  buffer[1] = 'b';
 800154a:	2362      	movs	r3, #98	@ 0x62
 800154c:	717b      	strb	r3, [r7, #5]

//  int data;
//  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
//  uint8_t pdata = 0x55;

  HAL_Delay(10000);
 800154e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001552:	f000 ff2d 	bl	80023b0 <HAL_Delay>
  while (1)
  {
	  spiselect();
 8001556:	f008 ff67 	bl	800a428 <spiselect>
	   HAL_SPI_Transmit(&hspi2, buffer, 2, HAL_MAX_DELAY);
 800155a:	1d39      	adds	r1, r7, #4
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	2202      	movs	r2, #2
 8001562:	4803      	ldr	r0, [pc, #12]	@ (8001570 <main+0x54>)
 8001564:	f007 f884 	bl	8008670 <HAL_SPI_Transmit>
	   despiselect();
 8001568:	f008 ff52 	bl	800a410 <despiselect>
	  spiselect();
 800156c:	bf00      	nop
 800156e:	e7f2      	b.n	8001556 <main+0x3a>
 8001570:	2400018c 	.word	0x2400018c

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b09c      	sub	sp, #112	@ 0x70
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157e:	224c      	movs	r2, #76	@ 0x4c
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f009 fbec 	bl	800ad60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2220      	movs	r2, #32
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f009 fbe6 	bl	800ad60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001594:	2002      	movs	r0, #2
 8001596:	f003 fa3f 	bl	8004a18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b31      	ldr	r3, [pc, #196]	@ (8001664 <SystemClock_Config+0xf0>)
 80015a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a2:	4a30      	ldr	r2, [pc, #192]	@ (8001664 <SystemClock_Config+0xf0>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80015aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <SystemClock_Config+0xf0>)
 80015ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <SystemClock_Config+0xf4>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001668 <SystemClock_Config+0xf4>)
 80015be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <SystemClock_Config+0xf4>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015d0:	bf00      	nop
 80015d2:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <SystemClock_Config+0xf4>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015de:	d1f8      	bne.n	80015d2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e0:	2302      	movs	r3, #2
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e8:	2340      	movs	r3, #64	@ 0x40
 80015ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ec:	2302      	movs	r3, #2
 80015ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f0:	2300      	movs	r3, #0
 80015f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f4:	2304      	movs	r3, #4
 80015f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80015f8:	230c      	movs	r3, #12
 80015fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001600:	2302      	movs	r3, #2
 8001602:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 3;
 8001604:	2303      	movs	r3, #3
 8001606:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001608:	230c      	movs	r3, #12
 800160a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800160c:	2300      	movs	r3, #0
 800160e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fa37 	bl	8004a8c <HAL_RCC_OscConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001624:	f000 fa50 	bl	8001ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001628:	233f      	movs	r3, #63	@ 0x3f
 800162a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162c:	2303      	movs	r3, #3
 800162e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2102      	movs	r1, #2
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fe77 	bl	8005340 <HAL_RCC_ClockConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001658:	f000 fa36 	bl	8001ac8 <Error_Handler>
  }
}
 800165c:	bf00      	nop
 800165e:	3770      	adds	r7, #112	@ 0x70
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	58000400 	.word	0x58000400
 8001668:	58024800 	.word	0x58024800

0800166c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001670:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 8001672:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <MX_I2S3_Init+0x60>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 8001678:	220a      	movs	r2, #10
 800167a:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 8001690:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001694:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <MX_I2S3_Init+0x5c>)
 80016b6:	f003 f88d 	bl	80047d4 <HAL_I2S_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 80016c0:	f000 fa02 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	240000b0 	.word	0x240000b0
 80016cc:	40003c00 	.word	0x40003c00

080016d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <MX_SPI1_Init+0xa4>)
 80016d6:	4a28      	ldr	r2, [pc, #160]	@ (8001778 <MX_SPI1_Init+0xa8>)
 80016d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <MX_SPI1_Init+0xa4>)
 80016dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80016e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <MX_SPI1_Init+0xa4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <MX_SPI1_Init+0xa4>)
 80016ea:	2207      	movs	r2, #7
 80016ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <MX_SPI1_Init+0xa4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <MX_SPI1_Init+0xa4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <MX_SPI1_Init+0xa4>)
 80016fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001708:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_SPI1_Init+0xa4>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001710:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001718:	2200      	movs	r2, #0
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <MX_SPI1_Init+0xa4>)
 800171e:	2200      	movs	r2, #0
 8001720:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_SPI1_Init+0xa4>)
 800172a:	2200      	movs	r2, #0
 800172c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001730:	2200      	movs	r2, #0
 8001732:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_SPI1_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_SPI1_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_SPI1_Init+0xa4>)
 800175a:	2200      	movs	r2, #0
 800175c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_SPI1_Init+0xa4>)
 8001760:	f006 fe62 	bl	8008428 <HAL_SPI_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800176a:	f000 f9ad 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	24000104 	.word	0x24000104
 8001778:	40013000 	.word	0x40013000

0800177c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001780:	4b28      	ldr	r3, [pc, #160]	@ (8001824 <MX_SPI2_Init+0xa8>)
 8001782:	4a29      	ldr	r2, [pc, #164]	@ (8001828 <MX_SPI2_Init+0xac>)
 8001784:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001786:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <MX_SPI2_Init+0xa8>)
 8001788:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800178c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800178e:	4b25      	ldr	r3, [pc, #148]	@ (8001824 <MX_SPI2_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001794:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <MX_SPI2_Init+0xa8>)
 8001796:	2207      	movs	r2, #7
 8001798:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <MX_SPI2_Init+0xa8>)
 800179c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <MX_SPI2_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <MX_SPI2_Init+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <MX_SPI2_Init+0xa8>)
 800180a:	2200      	movs	r2, #0
 800180c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <MX_SPI2_Init+0xa8>)
 8001810:	f006 fe0a 	bl	8008428 <HAL_SPI_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800181a:	f000 f955 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2400018c 	.word	0x2400018c
 8001828:	40003800 	.word	0x40003800

0800182c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800183c:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <MX_TIM6_Init+0x68>)
 800183e:	4a16      	ldr	r2, [pc, #88]	@ (8001898 <MX_TIM6_Init+0x6c>)
 8001840:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_TIM6_Init+0x68>)
 8001844:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001848:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <MX_TIM6_Init+0x68>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <MX_TIM6_Init+0x68>)
 8001852:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001856:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_TIM6_Init+0x68>)
 800185a:	2280      	movs	r2, #128	@ 0x80
 800185c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800185e:	480d      	ldr	r0, [pc, #52]	@ (8001894 <MX_TIM6_Init+0x68>)
 8001860:	f008 f9a3 	bl	8009baa <HAL_TIM_Base_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800186a:	f000 f92d 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800186e:	2320      	movs	r3, #32
 8001870:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4806      	ldr	r0, [pc, #24]	@ (8001894 <MX_TIM6_Init+0x68>)
 800187c:	f008 fbfa 	bl	800a074 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001886:	f000 f91f 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	24000304 	.word	0x24000304
 8001898:	40001000 	.word	0x40001000

0800189c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <MX_DMA_Init+0x4c>)
 80018a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018a8:	4a0f      	ldr	r2, [pc, #60]	@ (80018e8 <MX_DMA_Init+0x4c>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <MX_DMA_Init+0x4c>)
 80018b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	200b      	movs	r0, #11
 80018c6:	f000 fe7e 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80018ca:	200b      	movs	r0, #11
 80018cc:	f000 fe95 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	200c      	movs	r0, #12
 80018d6:	f000 fe76 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018da:	200c      	movs	r0, #12
 80018dc:	f000 fe8d 	bl	80025fa <HAL_NVIC_EnableIRQ>

}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	58024400 	.word	0x58024400

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001908:	4a69      	ldr	r2, [pc, #420]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001912:	4b67      	ldr	r3, [pc, #412]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	4b63      	ldr	r3, [pc, #396]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001926:	4a62      	ldr	r2, [pc, #392]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001930:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001944:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800194e:	4b58      	ldr	r3, [pc, #352]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195c:	4b54      	ldr	r3, [pc, #336]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001962:	4a53      	ldr	r2, [pc, #332]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800196c:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001980:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198a:	4b49      	ldr	r3, [pc, #292]	@ (8001ab0 <MX_GPIO_Init+0x1c4>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2110      	movs	r1, #16
 800199c:	4845      	ldr	r0, [pc, #276]	@ (8001ab4 <MX_GPIO_Init+0x1c8>)
 800199e:	f002 feff 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2120      	movs	r1, #32
 80019a6:	4844      	ldr	r0, [pc, #272]	@ (8001ab8 <MX_GPIO_Init+0x1cc>)
 80019a8:	f002 fefa 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019b2:	4842      	ldr	r0, [pc, #264]	@ (8001abc <MX_GPIO_Init+0x1d0>)
 80019b4:	f002 fef4 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	21e0      	movs	r1, #224	@ 0xe0
 80019bc:	4840      	ldr	r0, [pc, #256]	@ (8001ac0 <MX_GPIO_Init+0x1d4>)
 80019be:	f002 feef 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2103      	movs	r1, #3
 80019c6:	483f      	ldr	r0, [pc, #252]	@ (8001ac4 <MX_GPIO_Init+0x1d8>)
 80019c8:	f002 feea 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80019cc:	2310      	movs	r3, #16
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4834      	ldr	r0, [pc, #208]	@ (8001ab4 <MX_GPIO_Init+0x1c8>)
 80019e4:	f002 fd2c 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 80019e8:	2310      	movs	r3, #16
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	482f      	ldr	r0, [pc, #188]	@ (8001ab8 <MX_GPIO_Init+0x1cc>)
 80019fc:	f002 fd20 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001a00:	2320      	movs	r3, #32
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4828      	ldr	r0, [pc, #160]	@ (8001ab8 <MX_GPIO_Init+0x1cc>)
 8001a18:	f002 fd12 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	4821      	ldr	r0, [pc, #132]	@ (8001abc <MX_GPIO_Init+0x1d0>)
 8001a36:	f002 fd03 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8001a3a:	231f      	movs	r3, #31
 8001a3c:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481c      	ldr	r0, [pc, #112]	@ (8001ac0 <MX_GPIO_Init+0x1d4>)
 8001a4e:	f002 fcf7 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 8001a52:	23e0      	movs	r3, #224	@ 0xe0
 8001a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4815      	ldr	r0, [pc, #84]	@ (8001ac0 <MX_GPIO_Init+0x1d4>)
 8001a6a:	f002 fce9 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDG_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 8001a6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	480d      	ldr	r0, [pc, #52]	@ (8001abc <MX_GPIO_Init+0x1d0>)
 8001a88:	f002 fcda 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4808      	ldr	r0, [pc, #32]	@ (8001ac4 <MX_GPIO_Init+0x1d8>)
 8001aa4:	f002 fccc 	bl	8004440 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	@ 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	58020000 	.word	0x58020000
 8001ab8:	58020800 	.word	0x58020800
 8001abc:	58020400 	.word	0x58020400
 8001ac0:	58020c00 	.word	0x58020c00
 8001ac4:	58021000 	.word	0x58021000

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <Error_Handler+0x8>

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_MspInit+0x30>)
 8001adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ae0:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <HAL_MspInit+0x30>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_MspInit+0x30>)
 8001aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	58024400 	.word	0x58024400

08001b08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0bc      	sub	sp, #240	@ 0xf0
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	22c0      	movs	r2, #192	@ 0xc0
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f009 f919 	bl	800ad60 <memset>
  if(hi2s->Instance==SPI3)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a4b      	ldr	r2, [pc, #300]	@ (8001c60 <HAL_I2S_MspInit+0x158>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	f040 808f 	bne.w	8001c58 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001b3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 ff6c 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8001b5a:	f7ff ffb5 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b5e:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b64:	4a3f      	ldr	r2, [pc, #252]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b82:	4a38      	ldr	r2, [pc, #224]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b8c:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba0:	4a30      	ldr	r2, [pc, #192]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bbe:	4a29      	ldr	r2, [pc, #164]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc8:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <HAL_I2S_MspInit+0x15c>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	481b      	ldr	r0, [pc, #108]	@ (8001c68 <HAL_I2S_MspInit+0x160>)
 8001bfc:	f002 fc20 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c1a:	2306      	movs	r3, #6
 8001c1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c24:	4619      	mov	r1, r3
 8001c26:	4811      	ldr	r0, [pc, #68]	@ (8001c6c <HAL_I2S_MspInit+0x164>)
 8001c28:	f002 fc0a 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c2c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c46:	2306      	movs	r3, #6
 8001c48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c50:	4619      	mov	r1, r3
 8001c52:	4807      	ldr	r0, [pc, #28]	@ (8001c70 <HAL_I2S_MspInit+0x168>)
 8001c54:	f002 fbf4 	bl	8004440 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001c58:	bf00      	nop
 8001c5a:	37f0      	adds	r7, #240	@ 0xf0
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40003c00 	.word	0x40003c00
 8001c64:	58024400 	.word	0x58024400
 8001c68:	58020400 	.word	0x58020400
 8001c6c:	58020000 	.word	0x58020000
 8001c70:	58020800 	.word	0x58020800

08001c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b0be      	sub	sp, #248	@ 0xf8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	22c0      	movs	r2, #192	@ 0xc0
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f009 f863 	bl	800ad60 <memset>
  if(hspi->Instance==SPI1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4aa2      	ldr	r2, [pc, #648]	@ (8001f28 <HAL_SPI_MspInit+0x2b4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d16a      	bne.n	8001d7a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001ca4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb6:	f107 0320 	add.w	r3, r7, #32
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 feb6 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001cc6:	f7ff feff 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cca:	4b98      	ldr	r3, [pc, #608]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd0:	4a96      	ldr	r2, [pc, #600]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001cd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cda:	4b94      	ldr	r3, [pc, #592]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b90      	ldr	r3, [pc, #576]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cee:	4a8f      	ldr	r2, [pc, #572]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b89      	ldr	r3, [pc, #548]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0c:	4a87      	ldr	r2, [pc, #540]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d16:	4b85      	ldr	r3, [pc, #532]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d24:	23c0      	movs	r3, #192	@ 0xc0
 8001d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4879      	ldr	r0, [pc, #484]	@ (8001f30 <HAL_SPI_MspInit+0x2bc>)
 8001d4a:	f002 fb79 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d4e:	2308      	movs	r3, #8
 8001d50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d66:	2305      	movs	r3, #5
 8001d68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4870      	ldr	r0, [pc, #448]	@ (8001f34 <HAL_SPI_MspInit+0x2c0>)
 8001d74:	f002 fb64 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d78:	e0d2      	b.n	8001f20 <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f38 <HAL_SPI_MspInit+0x2c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	f040 80cd 	bne.w	8001f20 <HAL_SPI_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001d86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d98:	f107 0320 	add.w	r3, r7, #32
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fe45 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8001da8:	f7ff fe8e 	bl	8001ac8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dac:	4b5f      	ldr	r3, [pc, #380]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001db2:	4a5e      	ldr	r2, [pc, #376]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b58      	ldr	r3, [pc, #352]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd0:	4a56      	ldr	r2, [pc, #344]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dda:	4b54      	ldr	r3, [pc, #336]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	4b50      	ldr	r3, [pc, #320]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dee:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df8:	4b4c      	ldr	r3, [pc, #304]	@ (8001f2c <HAL_SPI_MspInit+0x2b8>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001e06:	2306      	movs	r3, #6
 8001e08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4844      	ldr	r0, [pc, #272]	@ (8001f3c <HAL_SPI_MspInit+0x2c8>)
 8001e2c:	f002 fb08 	bl	8004440 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4837      	ldr	r0, [pc, #220]	@ (8001f34 <HAL_SPI_MspInit+0x2c0>)
 8001e58:	f002 faf2 	bl	8004440 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8001e5c:	4b38      	ldr	r3, [pc, #224]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e5e:	4a39      	ldr	r2, [pc, #228]	@ (8001f44 <HAL_SPI_MspInit+0x2d0>)
 8001e60:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001e62:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e64:	2227      	movs	r2, #39	@ 0x27
 8001e66:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e68:	4b35      	ldr	r3, [pc, #212]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6e:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e74:	4b32      	ldr	r3, [pc, #200]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7c:	4b30      	ldr	r3, [pc, #192]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e82:	4b2f      	ldr	r3, [pc, #188]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001e9a:	4829      	ldr	r0, [pc, #164]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001e9c:	f000 fbc8 	bl	8002630 <HAL_DMA_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_SPI_MspInit+0x236>
      Error_Handler();
 8001ea6:	f7ff fe0f 	bl	8001ac8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001eae:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001eb0:	4a23      	ldr	r2, [pc, #140]	@ (8001f40 <HAL_SPI_MspInit+0x2cc>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8001eb6:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001eb8:	4a24      	ldr	r2, [pc, #144]	@ (8001f4c <HAL_SPI_MspInit+0x2d8>)
 8001eba:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001ebc:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001ebe:	2228      	movs	r2, #40	@ 0x28
 8001ec0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001ec4:	2240      	movs	r2, #64	@ 0x40
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001ed0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001ef4:	4814      	ldr	r0, [pc, #80]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001ef6:	f000 fb9b 	bl	8002630 <HAL_DMA_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_SPI_MspInit+0x290>
      Error_Handler();
 8001f00:	f7ff fde2 	bl	8001ac8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a10      	ldr	r2, [pc, #64]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001f08:	679a      	str	r2, [r3, #120]	@ 0x78
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f48 <HAL_SPI_MspInit+0x2d4>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	2024      	movs	r0, #36	@ 0x24
 8001f16:	f000 fb56 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f1a:	2024      	movs	r0, #36	@ 0x24
 8001f1c:	f000 fb6d 	bl	80025fa <HAL_NVIC_EnableIRQ>
}
 8001f20:	bf00      	nop
 8001f22:	37f8      	adds	r7, #248	@ 0xf8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40013000 	.word	0x40013000
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58020000 	.word	0x58020000
 8001f34:	58020400 	.word	0x58020400
 8001f38:	40003800 	.word	0x40003800
 8001f3c:	58020800 	.word	0x58020800
 8001f40:	24000214 	.word	0x24000214
 8001f44:	40020010 	.word	0x40020010
 8001f48:	2400028c 	.word	0x2400028c
 8001f4c:	40020028 	.word	0x40020028

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f98 <HAL_TIM_Base_MspInit+0x48>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d116      	bne.n	8001f90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f62:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <HAL_TIM_Base_MspInit+0x4c>)
 8001f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f68:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <HAL_TIM_Base_MspInit+0x4c>)
 8001f6a:	f043 0310 	orr.w	r3, r3, #16
 8001f6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_TIM_Base_MspInit+0x4c>)
 8001f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2101      	movs	r1, #1
 8001f84:	2036      	movs	r0, #54	@ 0x36
 8001f86:	f000 fb1e 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f8a:	2036      	movs	r0, #54	@ 0x36
 8001f8c:	f000 fb35 	bl	80025fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40001000 	.word	0x40001000
 8001f9c:	58024400 	.word	0x58024400

08001fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <NMI_Handler+0x4>

08001fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <BusFault_Handler+0x4>

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff6:	f000 f9bb 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <DMA1_Stream0_IRQHandler+0x10>)
 8002006:	f001 f8b5 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	24000214 	.word	0x24000214

08002014 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002018:	4802      	ldr	r0, [pc, #8]	@ (8002024 <DMA1_Stream1_IRQHandler+0x10>)
 800201a:	f001 f8ab 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2400028c 	.word	0x2400028c

08002028 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <SPI2_IRQHandler+0x10>)
 800202e:	f007 fab9 	bl	80095a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2400018c 	.word	0x2400018c

0800203c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002042:	481b      	ldr	r0, [pc, #108]	@ (80020b0 <TIM6_DAC_IRQHandler+0x74>)
 8002044:	f007 fe37 	bl	8009cb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  game_timer--;
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <TIM6_DAC_IRQHandler+0x78>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	3b01      	subs	r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <TIM6_DAC_IRQHandler+0x78>)
 8002052:	701a      	strb	r2, [r3, #0]
  sprintf(print_timer, "%d", game_timer);
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <TIM6_DAC_IRQHandler+0x78>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4916      	ldr	r1, [pc, #88]	@ (80020b8 <TIM6_DAC_IRQHandler+0x7c>)
 800205e:	4618      	mov	r0, r3
 8002060:	f008 fe5e 	bl	800ad20 <siprintf>
  RA8875_text_mode();
 8002064:	f7fe fed6 	bl	8000e14 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 8002068:	2132      	movs	r1, #50	@ 0x32
 800206a:	20c8      	movs	r0, #200	@ 0xc8
 800206c:	f7fe fef7 	bl	8000e5e <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002070:	211f      	movs	r1, #31
 8002072:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002076:	f7fe ff30 	bl	8000eda <RA8875_text_color>
  RA8875_text_scale(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f7fe ff8a 	bl	8000f94 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	2102      	movs	r1, #2
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe ffaf 	bl	8000fe8 <RA8875_text_write>
  RA8875_graphic_mode();
 800208a:	f7fe fa71 	bl	8000570 <RA8875_graphic_mode>
  if(game_timer <= 0) {
 800208e:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <TIM6_DAC_IRQHandler+0x78>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <TIM6_DAC_IRQHandler+0x6a>
	  game_timer = 10;
 8002096:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <TIM6_DAC_IRQHandler+0x78>)
 8002098:	220a      	movs	r2, #10
 800209a:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim6);
 800209c:	4804      	ldr	r0, [pc, #16]	@ (80020b0 <TIM6_DAC_IRQHandler+0x74>)
 800209e:	f007 fddb 	bl	8009c58 <HAL_TIM_Base_Stop_IT>
	  end_game();
 80020a2:	f7fe ffd1 	bl	8001048 <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	24000304 	.word	0x24000304
 80020b4:	24000000 	.word	0x24000000
 80020b8:	0800b778 	.word	0x0800b778

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ec:	f008 fe40 	bl	800ad70 <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002102:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <_sbrk+0x64>)
 800210c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	24080000 	.word	0x24080000
 800211c:	00000400 	.word	0x00000400
 8002120:	24000350 	.word	0x24000350
 8002124:	240004c0 	.word	0x240004c0

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800212c:	4b37      	ldr	r3, [pc, #220]	@ (800220c <SystemInit+0xe4>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	4a36      	ldr	r2, [pc, #216]	@ (800220c <SystemInit+0xe4>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800213c:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <SystemInit+0xe8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	2b06      	cmp	r3, #6
 8002146:	d807      	bhi.n	8002158 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002148:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <SystemInit+0xe8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 030f 	bic.w	r3, r3, #15
 8002150:	4a2f      	ldr	r2, [pc, #188]	@ (8002210 <SystemInit+0xe8>)
 8002152:	f043 0307 	orr.w	r3, r3, #7
 8002156:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002158:	4b2e      	ldr	r3, [pc, #184]	@ (8002214 <SystemInit+0xec>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2d      	ldr	r2, [pc, #180]	@ (8002214 <SystemInit+0xec>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002164:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <SystemInit+0xec>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800216a:	4b2a      	ldr	r3, [pc, #168]	@ (8002214 <SystemInit+0xec>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4929      	ldr	r1, [pc, #164]	@ (8002214 <SystemInit+0xec>)
 8002170:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <SystemInit+0xf0>)
 8002172:	4013      	ands	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002176:	4b26      	ldr	r3, [pc, #152]	@ (8002210 <SystemInit+0xe8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002182:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <SystemInit+0xe8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 030f 	bic.w	r3, r3, #15
 800218a:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <SystemInit+0xe8>)
 800218c:	f043 0307 	orr.w	r3, r3, #7
 8002190:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002192:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <SystemInit+0xec>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002198:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <SystemInit+0xec>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <SystemInit+0xec>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <SystemInit+0xec>)
 80021a6:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <SystemInit+0xf4>)
 80021a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80021aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <SystemInit+0xec>)
 80021ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002220 <SystemInit+0xf8>)
 80021ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80021b0:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <SystemInit+0xec>)
 80021b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002224 <SystemInit+0xfc>)
 80021b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80021b6:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <SystemInit+0xec>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80021bc:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <SystemInit+0xec>)
 80021be:	4a19      	ldr	r2, [pc, #100]	@ (8002224 <SystemInit+0xfc>)
 80021c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80021c2:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <SystemInit+0xec>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <SystemInit+0xec>)
 80021ca:	4a16      	ldr	r2, [pc, #88]	@ (8002224 <SystemInit+0xfc>)
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <SystemInit+0xec>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <SystemInit+0xec>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002214 <SystemInit+0xec>)
 80021da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <SystemInit+0xec>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <SystemInit+0x100>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <SystemInit+0x104>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021f2:	d202      	bcs.n	80021fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <SystemInit+0x108>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <SystemInit+0x10c>)
 80021fc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002200:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00
 8002210:	52002000 	.word	0x52002000
 8002214:	58024400 	.word	0x58024400
 8002218:	eaf6ed7f 	.word	0xeaf6ed7f
 800221c:	02020200 	.word	0x02020200
 8002220:	01ff0000 	.word	0x01ff0000
 8002224:	01010280 	.word	0x01010280
 8002228:	5c001000 	.word	0x5c001000
 800222c:	ffff0000 	.word	0xffff0000
 8002230:	51008108 	.word	0x51008108
 8002234:	52004000 	.word	0x52004000

08002238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002270 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800223c:	f7ff ff74 	bl	8002128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002240:	480c      	ldr	r0, [pc, #48]	@ (8002274 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002242:	490d      	ldr	r1, [pc, #52]	@ (8002278 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002244:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002248:	e002      	b.n	8002250 <LoopCopyDataInit>

0800224a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800224c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224e:	3304      	adds	r3, #4

08002250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002254:	d3f9      	bcc.n	800224a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002258:	4c0a      	ldr	r4, [pc, #40]	@ (8002284 <LoopFillZerobss+0x22>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800225c:	e001      	b.n	8002262 <LoopFillZerobss>

0800225e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002260:	3204      	adds	r2, #4

08002262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002264:	d3fb      	bcc.n	800225e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002266:	f008 fd89 	bl	800ad7c <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 800226a:	f7ff f957 	bl	800151c <main>
  bx  lr
 800226e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002270:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002274:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002278:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 800227c:	0800b7d8 	.word	0x0800b7d8
  ldr r2, =_sbss
 8002280:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002284:	240004c0 	.word	0x240004c0

08002288 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC3_IRQHandler>
	...

0800228c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002292:	2003      	movs	r0, #3
 8002294:	f000 f98c 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002298:	f003 fa08 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_Init+0x68>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	4913      	ldr	r1, [pc, #76]	@ (80022f8 <HAL_Init+0x6c>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022b6:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <HAL_Init+0x68>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4a0e      	ldr	r2, [pc, #56]	@ (80022f8 <HAL_Init+0x6c>)
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	4a0b      	ldr	r2, [pc, #44]	@ (80022fc <HAL_Init+0x70>)
 80022ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002300 <HAL_Init+0x74>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d6:	200f      	movs	r0, #15
 80022d8:	f000 f814 	bl	8002304 <HAL_InitTick>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e002      	b.n	80022ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022e6:	f7ff fbf5 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	58024400 	.word	0x58024400
 80022f8:	0800b77c 	.word	0x0800b77c
 80022fc:	24000008 	.word	0x24000008
 8002300:	24000004 	.word	0x24000004

08002304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800230c:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <HAL_InitTick+0x60>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e021      	b.n	800235c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002318:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <HAL_InitTick+0x64>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_InitTick+0x60>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f971 	bl	8002616 <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 f93b 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	@ (800236c <HAL_InitTick+0x68>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	24000010 	.word	0x24000010
 8002368:	24000004 	.word	0x24000004
 800236c:	2400000c 	.word	0x2400000c

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	24000010 	.word	0x24000010
 8002394:	24000354 	.word	0x24000354

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	24000354 	.word	0x24000354

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	24000010 	.word	0x24000010

080023f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023fc:	4b03      	ldr	r3, [pc, #12]	@ (800240c <HAL_GetREVID+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0c1b      	lsrs	r3, r3, #16
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	5c001000 	.word	0x5c001000

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <__NVIC_SetPriorityGrouping+0x40>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	4313      	orrs	r3, r2
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <__NVIC_SetPriorityGrouping+0x40>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00
 8002454:	05fa0000 	.word	0x05fa0000

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4907      	ldr	r1, [pc, #28]	@ (80024ac <__NVIC_EnableIRQ+0x38>)
 800248e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	@ (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	@ 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	@ 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f7ff ff8e 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff29 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff40 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff90 	bl	8002504 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5f 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff33 	bl	8002474 <__NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa4 	bl	800256c <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff feae 	bl	8002398 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e316      	b.n	8002c76 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a66      	ldr	r2, [pc, #408]	@ (80027e8 <HAL_DMA_Init+0x1b8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d04a      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a65      	ldr	r2, [pc, #404]	@ (80027ec <HAL_DMA_Init+0x1bc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d045      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a63      	ldr	r2, [pc, #396]	@ (80027f0 <HAL_DMA_Init+0x1c0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d040      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a62      	ldr	r2, [pc, #392]	@ (80027f4 <HAL_DMA_Init+0x1c4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d03b      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a60      	ldr	r2, [pc, #384]	@ (80027f8 <HAL_DMA_Init+0x1c8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d036      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5f      	ldr	r2, [pc, #380]	@ (80027fc <HAL_DMA_Init+0x1cc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d031      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5d      	ldr	r2, [pc, #372]	@ (8002800 <HAL_DMA_Init+0x1d0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02c      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a5c      	ldr	r2, [pc, #368]	@ (8002804 <HAL_DMA_Init+0x1d4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d027      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a5a      	ldr	r2, [pc, #360]	@ (8002808 <HAL_DMA_Init+0x1d8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d022      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a59      	ldr	r2, [pc, #356]	@ (800280c <HAL_DMA_Init+0x1dc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d01d      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a57      	ldr	r2, [pc, #348]	@ (8002810 <HAL_DMA_Init+0x1e0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d018      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a56      	ldr	r2, [pc, #344]	@ (8002814 <HAL_DMA_Init+0x1e4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a54      	ldr	r2, [pc, #336]	@ (8002818 <HAL_DMA_Init+0x1e8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a53      	ldr	r2, [pc, #332]	@ (800281c <HAL_DMA_Init+0x1ec>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a51      	ldr	r2, [pc, #324]	@ (8002820 <HAL_DMA_Init+0x1f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_DMA_Init+0xb8>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a50      	ldr	r2, [pc, #320]	@ (8002824 <HAL_DMA_Init+0x1f4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_DMA_Init+0xbc>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_DMA_Init+0xbe>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 813b 	beq.w	800296a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a37      	ldr	r2, [pc, #220]	@ (80027e8 <HAL_DMA_Init+0x1b8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d04a      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a36      	ldr	r2, [pc, #216]	@ (80027ec <HAL_DMA_Init+0x1bc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d045      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a34      	ldr	r2, [pc, #208]	@ (80027f0 <HAL_DMA_Init+0x1c0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d040      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a33      	ldr	r2, [pc, #204]	@ (80027f4 <HAL_DMA_Init+0x1c4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d03b      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a31      	ldr	r2, [pc, #196]	@ (80027f8 <HAL_DMA_Init+0x1c8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d036      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a30      	ldr	r2, [pc, #192]	@ (80027fc <HAL_DMA_Init+0x1cc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d031      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2e      	ldr	r2, [pc, #184]	@ (8002800 <HAL_DMA_Init+0x1d0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02c      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2d      	ldr	r2, [pc, #180]	@ (8002804 <HAL_DMA_Init+0x1d4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d027      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2b      	ldr	r2, [pc, #172]	@ (8002808 <HAL_DMA_Init+0x1d8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d022      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <HAL_DMA_Init+0x1dc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d01d      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a28      	ldr	r2, [pc, #160]	@ (8002810 <HAL_DMA_Init+0x1e0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d018      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a27      	ldr	r2, [pc, #156]	@ (8002814 <HAL_DMA_Init+0x1e4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a25      	ldr	r2, [pc, #148]	@ (8002818 <HAL_DMA_Init+0x1e8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00e      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a24      	ldr	r2, [pc, #144]	@ (800281c <HAL_DMA_Init+0x1ec>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a22      	ldr	r2, [pc, #136]	@ (8002820 <HAL_DMA_Init+0x1f0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_DMA_Init+0x174>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a21      	ldr	r2, [pc, #132]	@ (8002824 <HAL_DMA_Init+0x1f4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <HAL_DMA_Init+0x186>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e007      	b.n	80027c6 <HAL_DMA_Init+0x196>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027c6:	e02f      	b.n	8002828 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c8:	f7ff fde6 	bl	8002398 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	d928      	bls.n	8002828 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2203      	movs	r2, #3
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e246      	b.n	8002c76 <HAL_DMA_Init+0x646>
 80027e8:	40020010 	.word	0x40020010
 80027ec:	40020028 	.word	0x40020028
 80027f0:	40020040 	.word	0x40020040
 80027f4:	40020058 	.word	0x40020058
 80027f8:	40020070 	.word	0x40020070
 80027fc:	40020088 	.word	0x40020088
 8002800:	400200a0 	.word	0x400200a0
 8002804:	400200b8 	.word	0x400200b8
 8002808:	40020410 	.word	0x40020410
 800280c:	40020428 	.word	0x40020428
 8002810:	40020440 	.word	0x40020440
 8002814:	40020458 	.word	0x40020458
 8002818:	40020470 	.word	0x40020470
 800281c:	40020488 	.word	0x40020488
 8002820:	400204a0 	.word	0x400204a0
 8002824:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1c8      	bne.n	80027c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4b83      	ldr	r3, [pc, #524]	@ (8002a50 <HAL_DMA_Init+0x420>)
 8002842:	4013      	ands	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800284e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002866:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	2b04      	cmp	r3, #4
 800287a:	d107      	bne.n	800288c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	4313      	orrs	r3, r2
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800288c:	4b71      	ldr	r3, [pc, #452]	@ (8002a54 <HAL_DMA_Init+0x424>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b71      	ldr	r3, [pc, #452]	@ (8002a58 <HAL_DMA_Init+0x428>)
 8002892:	4013      	ands	r3, r2
 8002894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002898:	d328      	bcc.n	80028ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b28      	cmp	r3, #40	@ 0x28
 80028a0:	d903      	bls.n	80028aa <HAL_DMA_Init+0x27a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80028a8:	d917      	bls.n	80028da <HAL_DMA_Init+0x2aa>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80028b0:	d903      	bls.n	80028ba <HAL_DMA_Init+0x28a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b42      	cmp	r3, #66	@ 0x42
 80028b8:	d90f      	bls.n	80028da <HAL_DMA_Init+0x2aa>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b46      	cmp	r3, #70	@ 0x46
 80028c0:	d903      	bls.n	80028ca <HAL_DMA_Init+0x29a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b48      	cmp	r3, #72	@ 0x48
 80028c8:	d907      	bls.n	80028da <HAL_DMA_Init+0x2aa>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80028d0:	d905      	bls.n	80028de <HAL_DMA_Init+0x2ae>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b52      	cmp	r3, #82	@ 0x52
 80028d8:	d801      	bhi.n	80028de <HAL_DMA_Init+0x2ae>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_DMA_Init+0x2b0>
 80028de:	2300      	movs	r3, #0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0307 	bic.w	r3, r3, #7
 8002902:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	2b04      	cmp	r3, #4
 8002914:	d117      	bne.n	8002946 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 fbff 	bl	800412c <DMA_CheckFifoParam>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2240      	movs	r2, #64	@ 0x40
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e197      	b.n	8002c76 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f001 fb3a 	bl	8003fc8 <DMA_CalcBaseAndBitshift>
 8002954:	4603      	mov	r3, r0
 8002956:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	223f      	movs	r2, #63	@ 0x3f
 8002962:	409a      	lsls	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e0cd      	b.n	8002b06 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a5c <HAL_DMA_Init+0x42c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <HAL_DMA_Init+0x38a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a39      	ldr	r2, [pc, #228]	@ (8002a60 <HAL_DMA_Init+0x430>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01d      	beq.n	80029ba <HAL_DMA_Init+0x38a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a38      	ldr	r2, [pc, #224]	@ (8002a64 <HAL_DMA_Init+0x434>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d018      	beq.n	80029ba <HAL_DMA_Init+0x38a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a36      	ldr	r2, [pc, #216]	@ (8002a68 <HAL_DMA_Init+0x438>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_DMA_Init+0x38a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a35      	ldr	r2, [pc, #212]	@ (8002a6c <HAL_DMA_Init+0x43c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00e      	beq.n	80029ba <HAL_DMA_Init+0x38a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a33      	ldr	r2, [pc, #204]	@ (8002a70 <HAL_DMA_Init+0x440>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_DMA_Init+0x38a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a32      	ldr	r2, [pc, #200]	@ (8002a74 <HAL_DMA_Init+0x444>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_DMA_Init+0x38a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a30      	ldr	r2, [pc, #192]	@ (8002a78 <HAL_DMA_Init+0x448>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_DMA_Init+0x38e>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_DMA_Init+0x390>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8097 	beq.w	8002af4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a24      	ldr	r2, [pc, #144]	@ (8002a5c <HAL_DMA_Init+0x42c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d021      	beq.n	8002a14 <HAL_DMA_Init+0x3e4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a22      	ldr	r2, [pc, #136]	@ (8002a60 <HAL_DMA_Init+0x430>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01c      	beq.n	8002a14 <HAL_DMA_Init+0x3e4>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a21      	ldr	r2, [pc, #132]	@ (8002a64 <HAL_DMA_Init+0x434>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d017      	beq.n	8002a14 <HAL_DMA_Init+0x3e4>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <HAL_DMA_Init+0x438>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d012      	beq.n	8002a14 <HAL_DMA_Init+0x3e4>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a6c <HAL_DMA_Init+0x43c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00d      	beq.n	8002a14 <HAL_DMA_Init+0x3e4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002a70 <HAL_DMA_Init+0x440>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d008      	beq.n	8002a14 <HAL_DMA_Init+0x3e4>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1b      	ldr	r2, [pc, #108]	@ (8002a74 <HAL_DMA_Init+0x444>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d003      	beq.n	8002a14 <HAL_DMA_Init+0x3e4>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a19      	ldr	r2, [pc, #100]	@ (8002a78 <HAL_DMA_Init+0x448>)
 8002a12:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <HAL_DMA_Init+0x44c>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b40      	cmp	r3, #64	@ 0x40
 8002a3a:	d021      	beq.n	8002a80 <HAL_DMA_Init+0x450>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b80      	cmp	r3, #128	@ 0x80
 8002a42:	d102      	bne.n	8002a4a <HAL_DMA_Init+0x41a>
 8002a44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a48:	e01b      	b.n	8002a82 <HAL_DMA_Init+0x452>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e019      	b.n	8002a82 <HAL_DMA_Init+0x452>
 8002a4e:	bf00      	nop
 8002a50:	fe10803f 	.word	0xfe10803f
 8002a54:	5c001000 	.word	0x5c001000
 8002a58:	ffff0000 	.word	0xffff0000
 8002a5c:	58025408 	.word	0x58025408
 8002a60:	5802541c 	.word	0x5802541c
 8002a64:	58025430 	.word	0x58025430
 8002a68:	58025444 	.word	0x58025444
 8002a6c:	58025458 	.word	0x58025458
 8002a70:	5802546c 	.word	0x5802546c
 8002a74:	58025480 	.word	0x58025480
 8002a78:	58025494 	.word	0x58025494
 8002a7c:	fffe000f 	.word	0xfffe000f
 8002a80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68d2      	ldr	r2, [r2, #12]
 8002a86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002aa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002aa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ab0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c80 <HAL_DMA_Init+0x650>)
 8002ac8:	4413      	add	r3, r2
 8002aca:	4a6e      	ldr	r2, [pc, #440]	@ (8002c84 <HAL_DMA_Init+0x654>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	009a      	lsls	r2, r3, #2
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f001 fa75 	bl	8003fc8 <DMA_CalcBaseAndBitshift>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2201      	movs	r2, #1
 8002aec:	409a      	lsls	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	e008      	b.n	8002b06 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2203      	movs	r2, #3
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0b7      	b.n	8002c76 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8002c88 <HAL_DMA_Init+0x658>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d072      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a5d      	ldr	r2, [pc, #372]	@ (8002c8c <HAL_DMA_Init+0x65c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d06d      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c90 <HAL_DMA_Init+0x660>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d068      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5a      	ldr	r2, [pc, #360]	@ (8002c94 <HAL_DMA_Init+0x664>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d063      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a59      	ldr	r2, [pc, #356]	@ (8002c98 <HAL_DMA_Init+0x668>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d05e      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a57      	ldr	r2, [pc, #348]	@ (8002c9c <HAL_DMA_Init+0x66c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d059      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a56      	ldr	r2, [pc, #344]	@ (8002ca0 <HAL_DMA_Init+0x670>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d054      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a54      	ldr	r2, [pc, #336]	@ (8002ca4 <HAL_DMA_Init+0x674>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04f      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a53      	ldr	r2, [pc, #332]	@ (8002ca8 <HAL_DMA_Init+0x678>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d04a      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a51      	ldr	r2, [pc, #324]	@ (8002cac <HAL_DMA_Init+0x67c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d045      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a50      	ldr	r2, [pc, #320]	@ (8002cb0 <HAL_DMA_Init+0x680>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d040      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a4e      	ldr	r2, [pc, #312]	@ (8002cb4 <HAL_DMA_Init+0x684>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d03b      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb8 <HAL_DMA_Init+0x688>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d036      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002cbc <HAL_DMA_Init+0x68c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d031      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a4a      	ldr	r2, [pc, #296]	@ (8002cc0 <HAL_DMA_Init+0x690>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a48      	ldr	r2, [pc, #288]	@ (8002cc4 <HAL_DMA_Init+0x694>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d027      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a47      	ldr	r2, [pc, #284]	@ (8002cc8 <HAL_DMA_Init+0x698>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a45      	ldr	r2, [pc, #276]	@ (8002ccc <HAL_DMA_Init+0x69c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a44      	ldr	r2, [pc, #272]	@ (8002cd0 <HAL_DMA_Init+0x6a0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a42      	ldr	r2, [pc, #264]	@ (8002cd4 <HAL_DMA_Init+0x6a4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a41      	ldr	r2, [pc, #260]	@ (8002cd8 <HAL_DMA_Init+0x6a8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8002cdc <HAL_DMA_Init+0x6ac>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ce0 <HAL_DMA_Init+0x6b0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_DMA_Init+0x5c6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce4 <HAL_DMA_Init+0x6b4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_DMA_Init+0x5ca>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_DMA_Init+0x5cc>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d032      	beq.n	8002c66 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f001 fb0f 	bl	8004224 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b80      	cmp	r3, #128	@ 0x80
 8002c0c:	d102      	bne.n	8002c14 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d010      	beq.n	8002c54 <HAL_DMA_Init+0x624>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d80c      	bhi.n	8002c54 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f001 fb8c 	bl	8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	e008      	b.n	8002c66 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	a7fdabf8 	.word	0xa7fdabf8
 8002c84:	cccccccd 	.word	0xcccccccd
 8002c88:	40020010 	.word	0x40020010
 8002c8c:	40020028 	.word	0x40020028
 8002c90:	40020040 	.word	0x40020040
 8002c94:	40020058 	.word	0x40020058
 8002c98:	40020070 	.word	0x40020070
 8002c9c:	40020088 	.word	0x40020088
 8002ca0:	400200a0 	.word	0x400200a0
 8002ca4:	400200b8 	.word	0x400200b8
 8002ca8:	40020410 	.word	0x40020410
 8002cac:	40020428 	.word	0x40020428
 8002cb0:	40020440 	.word	0x40020440
 8002cb4:	40020458 	.word	0x40020458
 8002cb8:	40020470 	.word	0x40020470
 8002cbc:	40020488 	.word	0x40020488
 8002cc0:	400204a0 	.word	0x400204a0
 8002cc4:	400204b8 	.word	0x400204b8
 8002cc8:	58025408 	.word	0x58025408
 8002ccc:	5802541c 	.word	0x5802541c
 8002cd0:	58025430 	.word	0x58025430
 8002cd4:	58025444 	.word	0x58025444
 8002cd8:	58025458 	.word	0x58025458
 8002cdc:	5802546c 	.word	0x5802546c
 8002ce0:	58025480 	.word	0x58025480
 8002ce4:	58025494 	.word	0x58025494

08002ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e237      	b.n	800316a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d004      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2280      	movs	r2, #128	@ 0x80
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e22c      	b.n	800316a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a5c      	ldr	r2, [pc, #368]	@ (8002e88 <HAL_DMA_Abort_IT+0x1a0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d04a      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8002e8c <HAL_DMA_Abort_IT+0x1a4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d045      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a59      	ldr	r2, [pc, #356]	@ (8002e90 <HAL_DMA_Abort_IT+0x1a8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d040      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a58      	ldr	r2, [pc, #352]	@ (8002e94 <HAL_DMA_Abort_IT+0x1ac>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d03b      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a56      	ldr	r2, [pc, #344]	@ (8002e98 <HAL_DMA_Abort_IT+0x1b0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d036      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a55      	ldr	r2, [pc, #340]	@ (8002e9c <HAL_DMA_Abort_IT+0x1b4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d031      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a53      	ldr	r2, [pc, #332]	@ (8002ea0 <HAL_DMA_Abort_IT+0x1b8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02c      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a52      	ldr	r2, [pc, #328]	@ (8002ea4 <HAL_DMA_Abort_IT+0x1bc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d027      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a50      	ldr	r2, [pc, #320]	@ (8002ea8 <HAL_DMA_Abort_IT+0x1c0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d022      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a4f      	ldr	r2, [pc, #316]	@ (8002eac <HAL_DMA_Abort_IT+0x1c4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01d      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb0 <HAL_DMA_Abort_IT+0x1c8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d018      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb4 <HAL_DMA_Abort_IT+0x1cc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d013      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1d0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00e      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a49      	ldr	r2, [pc, #292]	@ (8002ebc <HAL_DMA_Abort_IT+0x1d4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d009      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a47      	ldr	r2, [pc, #284]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1d8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xc8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a46      	ldr	r2, [pc, #280]	@ (8002ec4 <HAL_DMA_Abort_IT+0x1dc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_DMA_Abort_IT+0xcc>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_DMA_Abort_IT+0xce>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8086 	beq.w	8002ec8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8002e88 <HAL_DMA_Abort_IT+0x1a0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d04a      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8002e8c <HAL_DMA_Abort_IT+0x1a4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d045      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8002e90 <HAL_DMA_Abort_IT+0x1a8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d040      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e94 <HAL_DMA_Abort_IT+0x1ac>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d03b      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a29      	ldr	r2, [pc, #164]	@ (8002e98 <HAL_DMA_Abort_IT+0x1b0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d036      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a28      	ldr	r2, [pc, #160]	@ (8002e9c <HAL_DMA_Abort_IT+0x1b4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d031      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a26      	ldr	r2, [pc, #152]	@ (8002ea0 <HAL_DMA_Abort_IT+0x1b8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02c      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a25      	ldr	r2, [pc, #148]	@ (8002ea4 <HAL_DMA_Abort_IT+0x1bc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d027      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a23      	ldr	r2, [pc, #140]	@ (8002ea8 <HAL_DMA_Abort_IT+0x1c0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d022      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <HAL_DMA_Abort_IT+0x1c4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d01d      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <HAL_DMA_Abort_IT+0x1c8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d018      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <HAL_DMA_Abort_IT+0x1cc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1d0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ebc <HAL_DMA_Abort_IT+0x1d4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1d8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x17c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a19      	ldr	r2, [pc, #100]	@ (8002ec4 <HAL_DMA_Abort_IT+0x1dc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d108      	bne.n	8002e76 <HAL_DMA_Abort_IT+0x18e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e178      	b.n	8003168 <HAL_DMA_Abort_IT+0x480>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e16f      	b.n	8003168 <HAL_DMA_Abort_IT+0x480>
 8002e88:	40020010 	.word	0x40020010
 8002e8c:	40020028 	.word	0x40020028
 8002e90:	40020040 	.word	0x40020040
 8002e94:	40020058 	.word	0x40020058
 8002e98:	40020070 	.word	0x40020070
 8002e9c:	40020088 	.word	0x40020088
 8002ea0:	400200a0 	.word	0x400200a0
 8002ea4:	400200b8 	.word	0x400200b8
 8002ea8:	40020410 	.word	0x40020410
 8002eac:	40020428 	.word	0x40020428
 8002eb0:	40020440 	.word	0x40020440
 8002eb4:	40020458 	.word	0x40020458
 8002eb8:	40020470 	.word	0x40020470
 8002ebc:	40020488 	.word	0x40020488
 8002ec0:	400204a0 	.word	0x400204a0
 8002ec4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 020e 	bic.w	r2, r2, #14
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6c      	ldr	r2, [pc, #432]	@ (8003090 <HAL_DMA_Abort_IT+0x3a8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d04a      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6b      	ldr	r2, [pc, #428]	@ (8003094 <HAL_DMA_Abort_IT+0x3ac>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d045      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a69      	ldr	r2, [pc, #420]	@ (8003098 <HAL_DMA_Abort_IT+0x3b0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d040      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a68      	ldr	r2, [pc, #416]	@ (800309c <HAL_DMA_Abort_IT+0x3b4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d03b      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a66      	ldr	r2, [pc, #408]	@ (80030a0 <HAL_DMA_Abort_IT+0x3b8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d036      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a65      	ldr	r2, [pc, #404]	@ (80030a4 <HAL_DMA_Abort_IT+0x3bc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d031      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a63      	ldr	r2, [pc, #396]	@ (80030a8 <HAL_DMA_Abort_IT+0x3c0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d02c      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a62      	ldr	r2, [pc, #392]	@ (80030ac <HAL_DMA_Abort_IT+0x3c4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d027      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a60      	ldr	r2, [pc, #384]	@ (80030b0 <HAL_DMA_Abort_IT+0x3c8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d022      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a5f      	ldr	r2, [pc, #380]	@ (80030b4 <HAL_DMA_Abort_IT+0x3cc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d01d      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a5d      	ldr	r2, [pc, #372]	@ (80030b8 <HAL_DMA_Abort_IT+0x3d0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d018      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a5c      	ldr	r2, [pc, #368]	@ (80030bc <HAL_DMA_Abort_IT+0x3d4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a5a      	ldr	r2, [pc, #360]	@ (80030c0 <HAL_DMA_Abort_IT+0x3d8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a59      	ldr	r2, [pc, #356]	@ (80030c4 <HAL_DMA_Abort_IT+0x3dc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d009      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a57      	ldr	r2, [pc, #348]	@ (80030c8 <HAL_DMA_Abort_IT+0x3e0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x290>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a56      	ldr	r2, [pc, #344]	@ (80030cc <HAL_DMA_Abort_IT+0x3e4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <HAL_DMA_Abort_IT+0x2a2>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e007      	b.n	8002f9a <HAL_DMA_Abort_IT+0x2b2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a3c      	ldr	r2, [pc, #240]	@ (8003090 <HAL_DMA_Abort_IT+0x3a8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d072      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3a      	ldr	r2, [pc, #232]	@ (8003094 <HAL_DMA_Abort_IT+0x3ac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d06d      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a39      	ldr	r2, [pc, #228]	@ (8003098 <HAL_DMA_Abort_IT+0x3b0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d068      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a37      	ldr	r2, [pc, #220]	@ (800309c <HAL_DMA_Abort_IT+0x3b4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d063      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a36      	ldr	r2, [pc, #216]	@ (80030a0 <HAL_DMA_Abort_IT+0x3b8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d05e      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a34      	ldr	r2, [pc, #208]	@ (80030a4 <HAL_DMA_Abort_IT+0x3bc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d059      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a33      	ldr	r2, [pc, #204]	@ (80030a8 <HAL_DMA_Abort_IT+0x3c0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d054      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a31      	ldr	r2, [pc, #196]	@ (80030ac <HAL_DMA_Abort_IT+0x3c4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d04f      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a30      	ldr	r2, [pc, #192]	@ (80030b0 <HAL_DMA_Abort_IT+0x3c8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d04a      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80030b4 <HAL_DMA_Abort_IT+0x3cc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d045      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2d      	ldr	r2, [pc, #180]	@ (80030b8 <HAL_DMA_Abort_IT+0x3d0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d040      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2b      	ldr	r2, [pc, #172]	@ (80030bc <HAL_DMA_Abort_IT+0x3d4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d03b      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2a      	ldr	r2, [pc, #168]	@ (80030c0 <HAL_DMA_Abort_IT+0x3d8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d036      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a28      	ldr	r2, [pc, #160]	@ (80030c4 <HAL_DMA_Abort_IT+0x3dc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d031      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a27      	ldr	r2, [pc, #156]	@ (80030c8 <HAL_DMA_Abort_IT+0x3e0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d02c      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a25      	ldr	r2, [pc, #148]	@ (80030cc <HAL_DMA_Abort_IT+0x3e4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d027      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a24      	ldr	r2, [pc, #144]	@ (80030d0 <HAL_DMA_Abort_IT+0x3e8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d022      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a22      	ldr	r2, [pc, #136]	@ (80030d4 <HAL_DMA_Abort_IT+0x3ec>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01d      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a21      	ldr	r2, [pc, #132]	@ (80030d8 <HAL_DMA_Abort_IT+0x3f0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d018      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1f      	ldr	r2, [pc, #124]	@ (80030dc <HAL_DMA_Abort_IT+0x3f4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1e      	ldr	r2, [pc, #120]	@ (80030e0 <HAL_DMA_Abort_IT+0x3f8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1c      	ldr	r2, [pc, #112]	@ (80030e4 <HAL_DMA_Abort_IT+0x3fc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1b      	ldr	r2, [pc, #108]	@ (80030e8 <HAL_DMA_Abort_IT+0x400>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_DMA_Abort_IT+0x3a2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a19      	ldr	r2, [pc, #100]	@ (80030ec <HAL_DMA_Abort_IT+0x404>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d132      	bne.n	80030f0 <HAL_DMA_Abort_IT+0x408>
 800308a:	2301      	movs	r3, #1
 800308c:	e031      	b.n	80030f2 <HAL_DMA_Abort_IT+0x40a>
 800308e:	bf00      	nop
 8003090:	40020010 	.word	0x40020010
 8003094:	40020028 	.word	0x40020028
 8003098:	40020040 	.word	0x40020040
 800309c:	40020058 	.word	0x40020058
 80030a0:	40020070 	.word	0x40020070
 80030a4:	40020088 	.word	0x40020088
 80030a8:	400200a0 	.word	0x400200a0
 80030ac:	400200b8 	.word	0x400200b8
 80030b0:	40020410 	.word	0x40020410
 80030b4:	40020428 	.word	0x40020428
 80030b8:	40020440 	.word	0x40020440
 80030bc:	40020458 	.word	0x40020458
 80030c0:	40020470 	.word	0x40020470
 80030c4:	40020488 	.word	0x40020488
 80030c8:	400204a0 	.word	0x400204a0
 80030cc:	400204b8 	.word	0x400204b8
 80030d0:	58025408 	.word	0x58025408
 80030d4:	5802541c 	.word	0x5802541c
 80030d8:	58025430 	.word	0x58025430
 80030dc:	58025444 	.word	0x58025444
 80030e0:	58025458 	.word	0x58025458
 80030e4:	5802546c 	.word	0x5802546c
 80030e8:	58025480 	.word	0x58025480
 80030ec:	58025494 	.word	0x58025494
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d028      	beq.n	8003148 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003104:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2201      	movs	r2, #1
 8003116:	409a      	lsls	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003124:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800313c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003146:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop

08003174 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	@ 0x28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003180:	4b67      	ldr	r3, [pc, #412]	@ (8003320 <HAL_DMA_IRQHandler+0x1ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a67      	ldr	r2, [pc, #412]	@ (8003324 <HAL_DMA_IRQHandler+0x1b0>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0a9b      	lsrs	r3, r3, #10
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003192:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003328 <HAL_DMA_IRQHandler+0x1b4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d04a      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a5d      	ldr	r2, [pc, #372]	@ (800332c <HAL_DMA_IRQHandler+0x1b8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d045      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5c      	ldr	r2, [pc, #368]	@ (8003330 <HAL_DMA_IRQHandler+0x1bc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d040      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003334 <HAL_DMA_IRQHandler+0x1c0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d03b      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a59      	ldr	r2, [pc, #356]	@ (8003338 <HAL_DMA_IRQHandler+0x1c4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d036      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a57      	ldr	r2, [pc, #348]	@ (800333c <HAL_DMA_IRQHandler+0x1c8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d031      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a56      	ldr	r2, [pc, #344]	@ (8003340 <HAL_DMA_IRQHandler+0x1cc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d02c      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a54      	ldr	r2, [pc, #336]	@ (8003344 <HAL_DMA_IRQHandler+0x1d0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d027      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a53      	ldr	r2, [pc, #332]	@ (8003348 <HAL_DMA_IRQHandler+0x1d4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a51      	ldr	r2, [pc, #324]	@ (800334c <HAL_DMA_IRQHandler+0x1d8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01d      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a50      	ldr	r2, [pc, #320]	@ (8003350 <HAL_DMA_IRQHandler+0x1dc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d018      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a4e      	ldr	r2, [pc, #312]	@ (8003354 <HAL_DMA_IRQHandler+0x1e0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a4d      	ldr	r2, [pc, #308]	@ (8003358 <HAL_DMA_IRQHandler+0x1e4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4b      	ldr	r2, [pc, #300]	@ (800335c <HAL_DMA_IRQHandler+0x1e8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a4a      	ldr	r2, [pc, #296]	@ (8003360 <HAL_DMA_IRQHandler+0x1ec>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_DMA_IRQHandler+0xd2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a48      	ldr	r2, [pc, #288]	@ (8003364 <HAL_DMA_IRQHandler+0x1f0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_DMA_IRQHandler+0xd6>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_DMA_IRQHandler+0xd8>
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 842b 	beq.w	8003aa8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	2208      	movs	r2, #8
 800325c:	409a      	lsls	r2, r3
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80a2 	beq.w	80033ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2e      	ldr	r2, [pc, #184]	@ (8003328 <HAL_DMA_IRQHandler+0x1b4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d04a      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2d      	ldr	r2, [pc, #180]	@ (800332c <HAL_DMA_IRQHandler+0x1b8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d045      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <HAL_DMA_IRQHandler+0x1bc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d040      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2a      	ldr	r2, [pc, #168]	@ (8003334 <HAL_DMA_IRQHandler+0x1c0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d03b      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a28      	ldr	r2, [pc, #160]	@ (8003338 <HAL_DMA_IRQHandler+0x1c4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d036      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a27      	ldr	r2, [pc, #156]	@ (800333c <HAL_DMA_IRQHandler+0x1c8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d031      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a25      	ldr	r2, [pc, #148]	@ (8003340 <HAL_DMA_IRQHandler+0x1cc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d02c      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a24      	ldr	r2, [pc, #144]	@ (8003344 <HAL_DMA_IRQHandler+0x1d0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d027      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a22      	ldr	r2, [pc, #136]	@ (8003348 <HAL_DMA_IRQHandler+0x1d4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d022      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a21      	ldr	r2, [pc, #132]	@ (800334c <HAL_DMA_IRQHandler+0x1d8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d01d      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003350 <HAL_DMA_IRQHandler+0x1dc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d018      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1e      	ldr	r2, [pc, #120]	@ (8003354 <HAL_DMA_IRQHandler+0x1e0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003358 <HAL_DMA_IRQHandler+0x1e4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00e      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1b      	ldr	r2, [pc, #108]	@ (800335c <HAL_DMA_IRQHandler+0x1e8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d009      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <HAL_DMA_IRQHandler+0x1ec>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_DMA_IRQHandler+0x194>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <HAL_DMA_IRQHandler+0x1f0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d12f      	bne.n	8003368 <HAL_DMA_IRQHandler+0x1f4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e02e      	b.n	800337c <HAL_DMA_IRQHandler+0x208>
 800331e:	bf00      	nop
 8003320:	24000004 	.word	0x24000004
 8003324:	1b4e81b5 	.word	0x1b4e81b5
 8003328:	40020010 	.word	0x40020010
 800332c:	40020028 	.word	0x40020028
 8003330:	40020040 	.word	0x40020040
 8003334:	40020058 	.word	0x40020058
 8003338:	40020070 	.word	0x40020070
 800333c:	40020088 	.word	0x40020088
 8003340:	400200a0 	.word	0x400200a0
 8003344:	400200b8 	.word	0x400200b8
 8003348:	40020410 	.word	0x40020410
 800334c:	40020428 	.word	0x40020428
 8003350:	40020440 	.word	0x40020440
 8003354:	40020458 	.word	0x40020458
 8003358:	40020470 	.word	0x40020470
 800335c:	40020488 	.word	0x40020488
 8003360:	400204a0 	.word	0x400204a0
 8003364:	400204b8 	.word	0x400204b8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d015      	beq.n	80033ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0204 	bic.w	r2, r2, #4
 800338e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2208      	movs	r2, #8
 800339a:	409a      	lsls	r2, r3
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d06e      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a69      	ldr	r2, [pc, #420]	@ (800356c <HAL_DMA_IRQHandler+0x3f8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d04a      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a67      	ldr	r2, [pc, #412]	@ (8003570 <HAL_DMA_IRQHandler+0x3fc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d045      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a66      	ldr	r2, [pc, #408]	@ (8003574 <HAL_DMA_IRQHandler+0x400>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d040      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a64      	ldr	r2, [pc, #400]	@ (8003578 <HAL_DMA_IRQHandler+0x404>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d03b      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a63      	ldr	r2, [pc, #396]	@ (800357c <HAL_DMA_IRQHandler+0x408>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d036      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a61      	ldr	r2, [pc, #388]	@ (8003580 <HAL_DMA_IRQHandler+0x40c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d031      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a60      	ldr	r2, [pc, #384]	@ (8003584 <HAL_DMA_IRQHandler+0x410>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d02c      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a5e      	ldr	r2, [pc, #376]	@ (8003588 <HAL_DMA_IRQHandler+0x414>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d027      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a5d      	ldr	r2, [pc, #372]	@ (800358c <HAL_DMA_IRQHandler+0x418>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a5b      	ldr	r2, [pc, #364]	@ (8003590 <HAL_DMA_IRQHandler+0x41c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01d      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a5a      	ldr	r2, [pc, #360]	@ (8003594 <HAL_DMA_IRQHandler+0x420>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a58      	ldr	r2, [pc, #352]	@ (8003598 <HAL_DMA_IRQHandler+0x424>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a57      	ldr	r2, [pc, #348]	@ (800359c <HAL_DMA_IRQHandler+0x428>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a55      	ldr	r2, [pc, #340]	@ (80035a0 <HAL_DMA_IRQHandler+0x42c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a54      	ldr	r2, [pc, #336]	@ (80035a4 <HAL_DMA_IRQHandler+0x430>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2ee>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a52      	ldr	r2, [pc, #328]	@ (80035a8 <HAL_DMA_IRQHandler+0x434>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10a      	bne.n	8003478 <HAL_DMA_IRQHandler+0x304>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e003      	b.n	8003480 <HAL_DMA_IRQHandler+0x30c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2201      	movs	r2, #1
 800348e:	409a      	lsls	r2, r3
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f043 0202 	orr.w	r2, r3, #2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2204      	movs	r2, #4
 80034aa:	409a      	lsls	r2, r3
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 808f 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2c      	ldr	r2, [pc, #176]	@ (800356c <HAL_DMA_IRQHandler+0x3f8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d04a      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003570 <HAL_DMA_IRQHandler+0x3fc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d045      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a29      	ldr	r2, [pc, #164]	@ (8003574 <HAL_DMA_IRQHandler+0x400>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d040      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a27      	ldr	r2, [pc, #156]	@ (8003578 <HAL_DMA_IRQHandler+0x404>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d03b      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a26      	ldr	r2, [pc, #152]	@ (800357c <HAL_DMA_IRQHandler+0x408>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d036      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a24      	ldr	r2, [pc, #144]	@ (8003580 <HAL_DMA_IRQHandler+0x40c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d031      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a23      	ldr	r2, [pc, #140]	@ (8003584 <HAL_DMA_IRQHandler+0x410>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d02c      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a21      	ldr	r2, [pc, #132]	@ (8003588 <HAL_DMA_IRQHandler+0x414>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d027      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a20      	ldr	r2, [pc, #128]	@ (800358c <HAL_DMA_IRQHandler+0x418>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1e      	ldr	r2, [pc, #120]	@ (8003590 <HAL_DMA_IRQHandler+0x41c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01d      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1d      	ldr	r2, [pc, #116]	@ (8003594 <HAL_DMA_IRQHandler+0x420>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d018      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1b      	ldr	r2, [pc, #108]	@ (8003598 <HAL_DMA_IRQHandler+0x424>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1a      	ldr	r2, [pc, #104]	@ (800359c <HAL_DMA_IRQHandler+0x428>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a18      	ldr	r2, [pc, #96]	@ (80035a0 <HAL_DMA_IRQHandler+0x42c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <HAL_DMA_IRQHandler+0x430>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_DMA_IRQHandler+0x3e2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a15      	ldr	r2, [pc, #84]	@ (80035a8 <HAL_DMA_IRQHandler+0x434>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d12a      	bne.n	80035ac <HAL_DMA_IRQHandler+0x438>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e023      	b.n	80035b4 <HAL_DMA_IRQHandler+0x440>
 800356c:	40020010 	.word	0x40020010
 8003570:	40020028 	.word	0x40020028
 8003574:	40020040 	.word	0x40020040
 8003578:	40020058 	.word	0x40020058
 800357c:	40020070 	.word	0x40020070
 8003580:	40020088 	.word	0x40020088
 8003584:	400200a0 	.word	0x400200a0
 8003588:	400200b8 	.word	0x400200b8
 800358c:	40020410 	.word	0x40020410
 8003590:	40020428 	.word	0x40020428
 8003594:	40020440 	.word	0x40020440
 8003598:	40020458 	.word	0x40020458
 800359c:	40020470 	.word	0x40020470
 80035a0:	40020488 	.word	0x40020488
 80035a4:	400204a0 	.word	0x400204a0
 80035a8:	400204b8 	.word	0x400204b8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00d      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2204      	movs	r2, #4
 80035c2:	409a      	lsls	r2, r3
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035cc:	f043 0204 	orr.w	r2, r3, #4
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2210      	movs	r2, #16
 80035de:	409a      	lsls	r2, r3
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a6 	beq.w	8003736 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a85      	ldr	r2, [pc, #532]	@ (8003804 <HAL_DMA_IRQHandler+0x690>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d04a      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a83      	ldr	r2, [pc, #524]	@ (8003808 <HAL_DMA_IRQHandler+0x694>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d045      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a82      	ldr	r2, [pc, #520]	@ (800380c <HAL_DMA_IRQHandler+0x698>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d040      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a80      	ldr	r2, [pc, #512]	@ (8003810 <HAL_DMA_IRQHandler+0x69c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d03b      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a7f      	ldr	r2, [pc, #508]	@ (8003814 <HAL_DMA_IRQHandler+0x6a0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d036      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a7d      	ldr	r2, [pc, #500]	@ (8003818 <HAL_DMA_IRQHandler+0x6a4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d031      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7c      	ldr	r2, [pc, #496]	@ (800381c <HAL_DMA_IRQHandler+0x6a8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d02c      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a7a      	ldr	r2, [pc, #488]	@ (8003820 <HAL_DMA_IRQHandler+0x6ac>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d027      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a79      	ldr	r2, [pc, #484]	@ (8003824 <HAL_DMA_IRQHandler+0x6b0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a77      	ldr	r2, [pc, #476]	@ (8003828 <HAL_DMA_IRQHandler+0x6b4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01d      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a76      	ldr	r2, [pc, #472]	@ (800382c <HAL_DMA_IRQHandler+0x6b8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d018      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a74      	ldr	r2, [pc, #464]	@ (8003830 <HAL_DMA_IRQHandler+0x6bc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a73      	ldr	r2, [pc, #460]	@ (8003834 <HAL_DMA_IRQHandler+0x6c0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a71      	ldr	r2, [pc, #452]	@ (8003838 <HAL_DMA_IRQHandler+0x6c4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a70      	ldr	r2, [pc, #448]	@ (800383c <HAL_DMA_IRQHandler+0x6c8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_DMA_IRQHandler+0x516>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6e      	ldr	r2, [pc, #440]	@ (8003840 <HAL_DMA_IRQHandler+0x6cc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10a      	bne.n	80036a0 <HAL_DMA_IRQHandler+0x52c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e009      	b.n	80036b4 <HAL_DMA_IRQHandler+0x540>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03e      	beq.n	8003736 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	2210      	movs	r2, #16
 80036c2:	409a      	lsls	r2, r3
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d018      	beq.n	8003708 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d024      	beq.n	8003736 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
 80036f4:	e01f      	b.n	8003736 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01b      	beq.n	8003736 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
 8003706:	e016      	b.n	8003736 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0208 	bic.w	r2, r2, #8
 8003724:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2220      	movs	r2, #32
 8003740:	409a      	lsls	r2, r3
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8110 	beq.w	800396c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2c      	ldr	r2, [pc, #176]	@ (8003804 <HAL_DMA_IRQHandler+0x690>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d04a      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2b      	ldr	r2, [pc, #172]	@ (8003808 <HAL_DMA_IRQHandler+0x694>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d045      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a29      	ldr	r2, [pc, #164]	@ (800380c <HAL_DMA_IRQHandler+0x698>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d040      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a28      	ldr	r2, [pc, #160]	@ (8003810 <HAL_DMA_IRQHandler+0x69c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d03b      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a26      	ldr	r2, [pc, #152]	@ (8003814 <HAL_DMA_IRQHandler+0x6a0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d036      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a25      	ldr	r2, [pc, #148]	@ (8003818 <HAL_DMA_IRQHandler+0x6a4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d031      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a23      	ldr	r2, [pc, #140]	@ (800381c <HAL_DMA_IRQHandler+0x6a8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d02c      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a22      	ldr	r2, [pc, #136]	@ (8003820 <HAL_DMA_IRQHandler+0x6ac>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d027      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a20      	ldr	r2, [pc, #128]	@ (8003824 <HAL_DMA_IRQHandler+0x6b0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d022      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003828 <HAL_DMA_IRQHandler+0x6b4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d01d      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	@ (800382c <HAL_DMA_IRQHandler+0x6b8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d018      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1c      	ldr	r2, [pc, #112]	@ (8003830 <HAL_DMA_IRQHandler+0x6bc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003834 <HAL_DMA_IRQHandler+0x6c0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <HAL_DMA_IRQHandler+0x6c4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a17      	ldr	r2, [pc, #92]	@ (800383c <HAL_DMA_IRQHandler+0x6c8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <HAL_DMA_IRQHandler+0x678>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a16      	ldr	r2, [pc, #88]	@ (8003840 <HAL_DMA_IRQHandler+0x6cc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d12b      	bne.n	8003844 <HAL_DMA_IRQHandler+0x6d0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf14      	ite	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	2300      	moveq	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e02a      	b.n	8003858 <HAL_DMA_IRQHandler+0x6e4>
 8003802:	bf00      	nop
 8003804:	40020010 	.word	0x40020010
 8003808:	40020028 	.word	0x40020028
 800380c:	40020040 	.word	0x40020040
 8003810:	40020058 	.word	0x40020058
 8003814:	40020070 	.word	0x40020070
 8003818:	40020088 	.word	0x40020088
 800381c:	400200a0 	.word	0x400200a0
 8003820:	400200b8 	.word	0x400200b8
 8003824:	40020410 	.word	0x40020410
 8003828:	40020428 	.word	0x40020428
 800382c:	40020440 	.word	0x40020440
 8003830:	40020458 	.word	0x40020458
 8003834:	40020470 	.word	0x40020470
 8003838:	40020488 	.word	0x40020488
 800383c:	400204a0 	.word	0x400204a0
 8003840:	400204b8 	.word	0x400204b8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8087 	beq.w	800396c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2220      	movs	r2, #32
 8003868:	409a      	lsls	r2, r3
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b04      	cmp	r3, #4
 8003878:	d139      	bne.n	80038ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0216 	bic.w	r2, r2, #22
 8003888:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003898:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <HAL_DMA_IRQHandler+0x736>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0208 	bic.w	r2, r2, #8
 80038b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	223f      	movs	r2, #63	@ 0x3f
 80038c4:	409a      	lsls	r2, r3
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 834a 	beq.w	8003f78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
          }
          return;
 80038ec:	e344      	b.n	8003f78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d018      	beq.n	800392e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02c      	beq.n	800396c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
 800391a:	e027      	b.n	800396c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d023      	beq.n	800396c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
 800392c:	e01e      	b.n	800396c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10f      	bne.n	800395c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0210 	bic.w	r2, r2, #16
 800394a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8306 	beq.w	8003f82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8088 	beq.w	8003a94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2204      	movs	r2, #4
 8003988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7a      	ldr	r2, [pc, #488]	@ (8003b7c <HAL_DMA_IRQHandler+0xa08>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d04a      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a79      	ldr	r2, [pc, #484]	@ (8003b80 <HAL_DMA_IRQHandler+0xa0c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d045      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a77      	ldr	r2, [pc, #476]	@ (8003b84 <HAL_DMA_IRQHandler+0xa10>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d040      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a76      	ldr	r2, [pc, #472]	@ (8003b88 <HAL_DMA_IRQHandler+0xa14>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d03b      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a74      	ldr	r2, [pc, #464]	@ (8003b8c <HAL_DMA_IRQHandler+0xa18>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d036      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a73      	ldr	r2, [pc, #460]	@ (8003b90 <HAL_DMA_IRQHandler+0xa1c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d031      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a71      	ldr	r2, [pc, #452]	@ (8003b94 <HAL_DMA_IRQHandler+0xa20>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02c      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a70      	ldr	r2, [pc, #448]	@ (8003b98 <HAL_DMA_IRQHandler+0xa24>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d027      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <HAL_DMA_IRQHandler+0xa28>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d022      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6d      	ldr	r2, [pc, #436]	@ (8003ba0 <HAL_DMA_IRQHandler+0xa2c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01d      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba4 <HAL_DMA_IRQHandler+0xa30>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba8 <HAL_DMA_IRQHandler+0xa34>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a68      	ldr	r2, [pc, #416]	@ (8003bac <HAL_DMA_IRQHandler+0xa38>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a67      	ldr	r2, [pc, #412]	@ (8003bb0 <HAL_DMA_IRQHandler+0xa3c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a65      	ldr	r2, [pc, #404]	@ (8003bb4 <HAL_DMA_IRQHandler+0xa40>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x8b8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a64      	ldr	r2, [pc, #400]	@ (8003bb8 <HAL_DMA_IRQHandler+0xa44>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d108      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x8ca>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e007      	b.n	8003a4e <HAL_DMA_IRQHandler+0x8da>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3301      	adds	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d307      	bcc.n	8003a6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f2      	bne.n	8003a4e <HAL_DMA_IRQHandler+0x8da>
 8003a68:	e000      	b.n	8003a6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003a82:	e003      	b.n	8003a8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8272 	beq.w	8003f82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	4798      	blx	r3
 8003aa6:	e26c      	b.n	8003f82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a43      	ldr	r2, [pc, #268]	@ (8003bbc <HAL_DMA_IRQHandler+0xa48>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x984>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a42      	ldr	r2, [pc, #264]	@ (8003bc0 <HAL_DMA_IRQHandler+0xa4c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x984>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a40      	ldr	r2, [pc, #256]	@ (8003bc4 <HAL_DMA_IRQHandler+0xa50>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x984>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3f      	ldr	r2, [pc, #252]	@ (8003bc8 <HAL_DMA_IRQHandler+0xa54>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x984>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3d      	ldr	r2, [pc, #244]	@ (8003bcc <HAL_DMA_IRQHandler+0xa58>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x984>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3c      	ldr	r2, [pc, #240]	@ (8003bd0 <HAL_DMA_IRQHandler+0xa5c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x984>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd4 <HAL_DMA_IRQHandler+0xa60>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x984>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a39      	ldr	r2, [pc, #228]	@ (8003bd8 <HAL_DMA_IRQHandler+0xa64>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_DMA_IRQHandler+0x988>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_DMA_IRQHandler+0x98a>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 823f 	beq.w	8003f82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2204      	movs	r2, #4
 8003b16:	409a      	lsls	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80cd 	beq.w	8003cbc <HAL_DMA_IRQHandler+0xb48>
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80c7 	beq.w	8003cbc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2204      	movs	r2, #4
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d049      	beq.n	8003bdc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8210 	beq.w	8003f7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b64:	e20a      	b.n	8003f7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8206 	beq.w	8003f7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b78:	e200      	b.n	8003f7c <HAL_DMA_IRQHandler+0xe08>
 8003b7a:	bf00      	nop
 8003b7c:	40020010 	.word	0x40020010
 8003b80:	40020028 	.word	0x40020028
 8003b84:	40020040 	.word	0x40020040
 8003b88:	40020058 	.word	0x40020058
 8003b8c:	40020070 	.word	0x40020070
 8003b90:	40020088 	.word	0x40020088
 8003b94:	400200a0 	.word	0x400200a0
 8003b98:	400200b8 	.word	0x400200b8
 8003b9c:	40020410 	.word	0x40020410
 8003ba0:	40020428 	.word	0x40020428
 8003ba4:	40020440 	.word	0x40020440
 8003ba8:	40020458 	.word	0x40020458
 8003bac:	40020470 	.word	0x40020470
 8003bb0:	40020488 	.word	0x40020488
 8003bb4:	400204a0 	.word	0x400204a0
 8003bb8:	400204b8 	.word	0x400204b8
 8003bbc:	58025408 	.word	0x58025408
 8003bc0:	5802541c 	.word	0x5802541c
 8003bc4:	58025430 	.word	0x58025430
 8003bc8:	58025444 	.word	0x58025444
 8003bcc:	58025458 	.word	0x58025458
 8003bd0:	5802546c 	.word	0x5802546c
 8003bd4:	58025480 	.word	0x58025480
 8003bd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d160      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7f      	ldr	r2, [pc, #508]	@ (8003de8 <HAL_DMA_IRQHandler+0xc74>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d04a      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a7d      	ldr	r2, [pc, #500]	@ (8003dec <HAL_DMA_IRQHandler+0xc78>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d045      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8003df0 <HAL_DMA_IRQHandler+0xc7c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d040      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a7a      	ldr	r2, [pc, #488]	@ (8003df4 <HAL_DMA_IRQHandler+0xc80>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d03b      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a79      	ldr	r2, [pc, #484]	@ (8003df8 <HAL_DMA_IRQHandler+0xc84>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d036      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a77      	ldr	r2, [pc, #476]	@ (8003dfc <HAL_DMA_IRQHandler+0xc88>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d031      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a76      	ldr	r2, [pc, #472]	@ (8003e00 <HAL_DMA_IRQHandler+0xc8c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d02c      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a74      	ldr	r2, [pc, #464]	@ (8003e04 <HAL_DMA_IRQHandler+0xc90>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d027      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a73      	ldr	r2, [pc, #460]	@ (8003e08 <HAL_DMA_IRQHandler+0xc94>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d022      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a71      	ldr	r2, [pc, #452]	@ (8003e0c <HAL_DMA_IRQHandler+0xc98>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01d      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a70      	ldr	r2, [pc, #448]	@ (8003e10 <HAL_DMA_IRQHandler+0xc9c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d018      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6e      	ldr	r2, [pc, #440]	@ (8003e14 <HAL_DMA_IRQHandler+0xca0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6d      	ldr	r2, [pc, #436]	@ (8003e18 <HAL_DMA_IRQHandler+0xca4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00e      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a6b      	ldr	r2, [pc, #428]	@ (8003e1c <HAL_DMA_IRQHandler+0xca8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d009      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6a      	ldr	r2, [pc, #424]	@ (8003e20 <HAL_DMA_IRQHandler+0xcac>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d004      	beq.n	8003c86 <HAL_DMA_IRQHandler+0xb12>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a68      	ldr	r2, [pc, #416]	@ (8003e24 <HAL_DMA_IRQHandler+0xcb0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <HAL_DMA_IRQHandler+0xb24>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0208 	bic.w	r2, r2, #8
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e007      	b.n	8003ca8 <HAL_DMA_IRQHandler+0xb34>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0204 	bic.w	r2, r2, #4
 8003ca6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8165 	beq.w	8003f7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cba:	e15f      	b.n	8003f7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80c5 	beq.w	8003e5c <HAL_DMA_IRQHandler+0xce8>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80bf 	beq.w	8003e5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d018      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 813a 	beq.w	8003f80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d14:	e134      	b.n	8003f80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8130 	beq.w	8003f80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d28:	e12a      	b.n	8003f80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f040 8089 	bne.w	8003e48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003de8 <HAL_DMA_IRQHandler+0xc74>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d04a      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a29      	ldr	r2, [pc, #164]	@ (8003dec <HAL_DMA_IRQHandler+0xc78>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d045      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a28      	ldr	r2, [pc, #160]	@ (8003df0 <HAL_DMA_IRQHandler+0xc7c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d040      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a26      	ldr	r2, [pc, #152]	@ (8003df4 <HAL_DMA_IRQHandler+0xc80>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d03b      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a25      	ldr	r2, [pc, #148]	@ (8003df8 <HAL_DMA_IRQHandler+0xc84>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d036      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a23      	ldr	r2, [pc, #140]	@ (8003dfc <HAL_DMA_IRQHandler+0xc88>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d031      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a22      	ldr	r2, [pc, #136]	@ (8003e00 <HAL_DMA_IRQHandler+0xc8c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d02c      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a20      	ldr	r2, [pc, #128]	@ (8003e04 <HAL_DMA_IRQHandler+0xc90>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d027      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e08 <HAL_DMA_IRQHandler+0xc94>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d022      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <HAL_DMA_IRQHandler+0xc98>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01d      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <HAL_DMA_IRQHandler+0xc9c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d018      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e14 <HAL_DMA_IRQHandler+0xca0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a19      	ldr	r2, [pc, #100]	@ (8003e18 <HAL_DMA_IRQHandler+0xca4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a17      	ldr	r2, [pc, #92]	@ (8003e1c <HAL_DMA_IRQHandler+0xca8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a16      	ldr	r2, [pc, #88]	@ (8003e20 <HAL_DMA_IRQHandler+0xcac>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xc62>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <HAL_DMA_IRQHandler+0xcb0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d128      	bne.n	8003e28 <HAL_DMA_IRQHandler+0xcb4>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0214 	bic.w	r2, r2, #20
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e027      	b.n	8003e38 <HAL_DMA_IRQHandler+0xcc4>
 8003de8:	40020010 	.word	0x40020010
 8003dec:	40020028 	.word	0x40020028
 8003df0:	40020040 	.word	0x40020040
 8003df4:	40020058 	.word	0x40020058
 8003df8:	40020070 	.word	0x40020070
 8003dfc:	40020088 	.word	0x40020088
 8003e00:	400200a0 	.word	0x400200a0
 8003e04:	400200b8 	.word	0x400200b8
 8003e08:	40020410 	.word	0x40020410
 8003e0c:	40020428 	.word	0x40020428
 8003e10:	40020440 	.word	0x40020440
 8003e14:	40020458 	.word	0x40020458
 8003e18:	40020470 	.word	0x40020470
 8003e1c:	40020488 	.word	0x40020488
 8003e20:	400204a0 	.word	0x400204a0
 8003e24:	400204b8 	.word	0x400204b8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 020a 	bic.w	r2, r2, #10
 8003e36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8097 	beq.w	8003f80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e5a:	e091      	b.n	8003f80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2208      	movs	r2, #8
 8003e66:	409a      	lsls	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8088 	beq.w	8003f82 <HAL_DMA_IRQHandler+0xe0e>
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8082 	beq.w	8003f82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a41      	ldr	r2, [pc, #260]	@ (8003f88 <HAL_DMA_IRQHandler+0xe14>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d04a      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8003f8c <HAL_DMA_IRQHandler+0xe18>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d045      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a3e      	ldr	r2, [pc, #248]	@ (8003f90 <HAL_DMA_IRQHandler+0xe1c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d040      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8003f94 <HAL_DMA_IRQHandler+0xe20>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d03b      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a3b      	ldr	r2, [pc, #236]	@ (8003f98 <HAL_DMA_IRQHandler+0xe24>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d036      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a39      	ldr	r2, [pc, #228]	@ (8003f9c <HAL_DMA_IRQHandler+0xe28>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a38      	ldr	r2, [pc, #224]	@ (8003fa0 <HAL_DMA_IRQHandler+0xe2c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d02c      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a36      	ldr	r2, [pc, #216]	@ (8003fa4 <HAL_DMA_IRQHandler+0xe30>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d027      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a35      	ldr	r2, [pc, #212]	@ (8003fa8 <HAL_DMA_IRQHandler+0xe34>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a33      	ldr	r2, [pc, #204]	@ (8003fac <HAL_DMA_IRQHandler+0xe38>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01d      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a32      	ldr	r2, [pc, #200]	@ (8003fb0 <HAL_DMA_IRQHandler+0xe3c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a30      	ldr	r2, [pc, #192]	@ (8003fb4 <HAL_DMA_IRQHandler+0xe40>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb8 <HAL_DMA_IRQHandler+0xe44>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	@ (8003fbc <HAL_DMA_IRQHandler+0xe48>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc0 <HAL_DMA_IRQHandler+0xe4c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xdaa>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc4 <HAL_DMA_IRQHandler+0xe50>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <HAL_DMA_IRQHandler+0xdbc>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 021c 	bic.w	r2, r2, #28
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e007      	b.n	8003f40 <HAL_DMA_IRQHandler+0xdcc>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 020e 	bic.w	r2, r2, #14
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
 8003f76:	e004      	b.n	8003f82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f78:	bf00      	nop
 8003f7a:	e002      	b.n	8003f82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f82:	3728      	adds	r7, #40	@ 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40020010 	.word	0x40020010
 8003f8c:	40020028 	.word	0x40020028
 8003f90:	40020040 	.word	0x40020040
 8003f94:	40020058 	.word	0x40020058
 8003f98:	40020070 	.word	0x40020070
 8003f9c:	40020088 	.word	0x40020088
 8003fa0:	400200a0 	.word	0x400200a0
 8003fa4:	400200b8 	.word	0x400200b8
 8003fa8:	40020410 	.word	0x40020410
 8003fac:	40020428 	.word	0x40020428
 8003fb0:	40020440 	.word	0x40020440
 8003fb4:	40020458 	.word	0x40020458
 8003fb8:	40020470 	.word	0x40020470
 8003fbc:	40020488 	.word	0x40020488
 8003fc0:	400204a0 	.word	0x400204a0
 8003fc4:	400204b8 	.word	0x400204b8

08003fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a42      	ldr	r2, [pc, #264]	@ (80040e0 <DMA_CalcBaseAndBitshift+0x118>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d04a      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a41      	ldr	r2, [pc, #260]	@ (80040e4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d045      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a3f      	ldr	r2, [pc, #252]	@ (80040e8 <DMA_CalcBaseAndBitshift+0x120>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d040      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80040ec <DMA_CalcBaseAndBitshift+0x124>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d03b      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80040f0 <DMA_CalcBaseAndBitshift+0x128>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d036      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a3b      	ldr	r2, [pc, #236]	@ (80040f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d031      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a39      	ldr	r2, [pc, #228]	@ (80040f8 <DMA_CalcBaseAndBitshift+0x130>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d02c      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a38      	ldr	r2, [pc, #224]	@ (80040fc <DMA_CalcBaseAndBitshift+0x134>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d027      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a36      	ldr	r2, [pc, #216]	@ (8004100 <DMA_CalcBaseAndBitshift+0x138>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d022      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a35      	ldr	r2, [pc, #212]	@ (8004104 <DMA_CalcBaseAndBitshift+0x13c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d01d      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a33      	ldr	r2, [pc, #204]	@ (8004108 <DMA_CalcBaseAndBitshift+0x140>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d018      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a32      	ldr	r2, [pc, #200]	@ (800410c <DMA_CalcBaseAndBitshift+0x144>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d013      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a30      	ldr	r2, [pc, #192]	@ (8004110 <DMA_CalcBaseAndBitshift+0x148>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00e      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2f      	ldr	r2, [pc, #188]	@ (8004114 <DMA_CalcBaseAndBitshift+0x14c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d009      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2d      	ldr	r2, [pc, #180]	@ (8004118 <DMA_CalcBaseAndBitshift+0x150>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d004      	beq.n	8004070 <DMA_CalcBaseAndBitshift+0xa8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2c      	ldr	r2, [pc, #176]	@ (800411c <DMA_CalcBaseAndBitshift+0x154>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d101      	bne.n	8004074 <DMA_CalcBaseAndBitshift+0xac>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <DMA_CalcBaseAndBitshift+0xae>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d024      	beq.n	80040c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3b10      	subs	r3, #16
 8004082:	4a27      	ldr	r2, [pc, #156]	@ (8004120 <DMA_CalcBaseAndBitshift+0x158>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	4a24      	ldr	r2, [pc, #144]	@ (8004124 <DMA_CalcBaseAndBitshift+0x15c>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	461a      	mov	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d908      	bls.n	80040b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004128 <DMA_CalcBaseAndBitshift+0x160>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	1d1a      	adds	r2, r3, #4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80040b2:	e00d      	b.n	80040d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004128 <DMA_CalcBaseAndBitshift+0x160>)
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c2:	e005      	b.n	80040d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40020010 	.word	0x40020010
 80040e4:	40020028 	.word	0x40020028
 80040e8:	40020040 	.word	0x40020040
 80040ec:	40020058 	.word	0x40020058
 80040f0:	40020070 	.word	0x40020070
 80040f4:	40020088 	.word	0x40020088
 80040f8:	400200a0 	.word	0x400200a0
 80040fc:	400200b8 	.word	0x400200b8
 8004100:	40020410 	.word	0x40020410
 8004104:	40020428 	.word	0x40020428
 8004108:	40020440 	.word	0x40020440
 800410c:	40020458 	.word	0x40020458
 8004110:	40020470 	.word	0x40020470
 8004114:	40020488 	.word	0x40020488
 8004118:	400204a0 	.word	0x400204a0
 800411c:	400204b8 	.word	0x400204b8
 8004120:	aaaaaaab 	.word	0xaaaaaaab
 8004124:	0800b78c 	.word	0x0800b78c
 8004128:	fffffc00 	.word	0xfffffc00

0800412c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d120      	bne.n	8004182 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	2b03      	cmp	r3, #3
 8004146:	d858      	bhi.n	80041fa <DMA_CheckFifoParam+0xce>
 8004148:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <DMA_CheckFifoParam+0x24>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	08004173 	.word	0x08004173
 8004158:	08004161 	.word	0x08004161
 800415c:	080041fb 	.word	0x080041fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d048      	beq.n	80041fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004170:	e045      	b.n	80041fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800417a:	d142      	bne.n	8004202 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004180:	e03f      	b.n	8004202 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800418a:	d123      	bne.n	80041d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	2b03      	cmp	r3, #3
 8004192:	d838      	bhi.n	8004206 <DMA_CheckFifoParam+0xda>
 8004194:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <DMA_CheckFifoParam+0x70>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041ad 	.word	0x080041ad
 80041a0:	080041b3 	.word	0x080041b3
 80041a4:	080041ad 	.word	0x080041ad
 80041a8:	080041c5 	.word	0x080041c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
        break;
 80041b0:	e030      	b.n	8004214 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d025      	beq.n	800420a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041c2:	e022      	b.n	800420a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041cc:	d11f      	bne.n	800420e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041d2:	e01c      	b.n	800420e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d902      	bls.n	80041e2 <DMA_CheckFifoParam+0xb6>
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d003      	beq.n	80041e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041e0:	e018      	b.n	8004214 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
        break;
 80041e6:	e015      	b.n	8004214 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00e      	beq.n	8004212 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
    break;
 80041f8:	e00b      	b.n	8004212 <DMA_CheckFifoParam+0xe6>
        break;
 80041fa:	bf00      	nop
 80041fc:	e00a      	b.n	8004214 <DMA_CheckFifoParam+0xe8>
        break;
 80041fe:	bf00      	nop
 8004200:	e008      	b.n	8004214 <DMA_CheckFifoParam+0xe8>
        break;
 8004202:	bf00      	nop
 8004204:	e006      	b.n	8004214 <DMA_CheckFifoParam+0xe8>
        break;
 8004206:	bf00      	nop
 8004208:	e004      	b.n	8004214 <DMA_CheckFifoParam+0xe8>
        break;
 800420a:	bf00      	nop
 800420c:	e002      	b.n	8004214 <DMA_CheckFifoParam+0xe8>
        break;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <DMA_CheckFifoParam+0xe8>
    break;
 8004212:	bf00      	nop
    }
  }

  return status;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop

08004224 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a38      	ldr	r2, [pc, #224]	@ (8004318 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d022      	beq.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a36      	ldr	r2, [pc, #216]	@ (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01d      	beq.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a35      	ldr	r2, [pc, #212]	@ (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a33      	ldr	r2, [pc, #204]	@ (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a32      	ldr	r2, [pc, #200]	@ (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00e      	beq.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a30      	ldr	r2, [pc, #192]	@ (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2f      	ldr	r2, [pc, #188]	@ (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2d      	ldr	r2, [pc, #180]	@ (8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01a      	beq.n	80042c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	3b08      	subs	r3, #8
 8004294:	4a28      	ldr	r2, [pc, #160]	@ (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4b26      	ldr	r3, [pc, #152]	@ (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a24      	ldr	r2, [pc, #144]	@ (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2201      	movs	r2, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042c0:	e024      	b.n	800430c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	3b10      	subs	r3, #16
 80042ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d806      	bhi.n	80042ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4a1b      	ldr	r2, [pc, #108]	@ (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d902      	bls.n	80042ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3308      	adds	r3, #8
 80042e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4b18      	ldr	r3, [pc, #96]	@ (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a16      	ldr	r2, [pc, #88]	@ (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80042fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	58025408 	.word	0x58025408
 800431c:	5802541c 	.word	0x5802541c
 8004320:	58025430 	.word	0x58025430
 8004324:	58025444 	.word	0x58025444
 8004328:	58025458 	.word	0x58025458
 800432c:	5802546c 	.word	0x5802546c
 8004330:	58025480 	.word	0x58025480
 8004334:	58025494 	.word	0x58025494
 8004338:	cccccccd 	.word	0xcccccccd
 800433c:	16009600 	.word	0x16009600
 8004340:	58025880 	.word	0x58025880
 8004344:	aaaaaaab 	.word	0xaaaaaaab
 8004348:	400204b8 	.word	0x400204b8
 800434c:	4002040f 	.word	0x4002040f
 8004350:	10008200 	.word	0x10008200
 8004354:	40020880 	.word	0x40020880

08004358 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d04a      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d847      	bhi.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a25      	ldr	r2, [pc, #148]	@ (8004410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d022      	beq.n	80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a24      	ldr	r2, [pc, #144]	@ (8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d01d      	beq.n	80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a22      	ldr	r2, [pc, #136]	@ (8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d018      	beq.n	80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a21      	ldr	r2, [pc, #132]	@ (800441c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d009      	beq.n	80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1b      	ldr	r2, [pc, #108]	@ (800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d101      	bne.n	80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4b17      	ldr	r3, [pc, #92]	@ (8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	461a      	mov	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a15      	ldr	r2, [pc, #84]	@ (8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80043e2:	e009      	b.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4b14      	ldr	r3, [pc, #80]	@ (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	461a      	mov	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a11      	ldr	r2, [pc, #68]	@ (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	2201      	movs	r2, #1
 80043fe:	409a      	lsls	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	58025408 	.word	0x58025408
 8004414:	5802541c 	.word	0x5802541c
 8004418:	58025430 	.word	0x58025430
 800441c:	58025444 	.word	0x58025444
 8004420:	58025458 	.word	0x58025458
 8004424:	5802546c 	.word	0x5802546c
 8004428:	58025480 	.word	0x58025480
 800442c:	58025494 	.word	0x58025494
 8004430:	1600963f 	.word	0x1600963f
 8004434:	58025940 	.word	0x58025940
 8004438:	1000823f 	.word	0x1000823f
 800443c:	40020940 	.word	0x40020940

08004440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	@ 0x24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800444e:	4b89      	ldr	r3, [pc, #548]	@ (8004674 <HAL_GPIO_Init+0x234>)
 8004450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004452:	e194      	b.n	800477e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	fa01 f303 	lsl.w	r3, r1, r3
 8004460:	4013      	ands	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8186 	beq.w	8004778 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b01      	cmp	r3, #1
 8004476:	d005      	beq.n	8004484 <HAL_GPIO_Init+0x44>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d130      	bne.n	80044e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	2203      	movs	r2, #3
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ba:	2201      	movs	r2, #1
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 0201 	and.w	r2, r3, #1
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d017      	beq.n	8004522 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	2203      	movs	r2, #3
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4313      	orrs	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d123      	bne.n	8004576 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	08da      	lsrs	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3208      	adds	r2, #8
 8004536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	220f      	movs	r2, #15
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	08da      	lsrs	r2, r3, #3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3208      	adds	r2, #8
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	2203      	movs	r2, #3
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0203 	and.w	r2, r3, #3
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80e0 	beq.w	8004778 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004678 <HAL_GPIO_Init+0x238>)
 80045ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045be:	4a2e      	ldr	r2, [pc, #184]	@ (8004678 <HAL_GPIO_Init+0x238>)
 80045c0:	f043 0302 	orr.w	r3, r3, #2
 80045c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80045c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004678 <HAL_GPIO_Init+0x238>)
 80045ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045d6:	4a29      	ldr	r2, [pc, #164]	@ (800467c <HAL_GPIO_Init+0x23c>)
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	089b      	lsrs	r3, r3, #2
 80045dc:	3302      	adds	r3, #2
 80045de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	220f      	movs	r2, #15
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a20      	ldr	r2, [pc, #128]	@ (8004680 <HAL_GPIO_Init+0x240>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d052      	beq.n	80046a8 <HAL_GPIO_Init+0x268>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1f      	ldr	r2, [pc, #124]	@ (8004684 <HAL_GPIO_Init+0x244>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d031      	beq.n	800466e <HAL_GPIO_Init+0x22e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1e      	ldr	r2, [pc, #120]	@ (8004688 <HAL_GPIO_Init+0x248>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d02b      	beq.n	800466a <HAL_GPIO_Init+0x22a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1d      	ldr	r2, [pc, #116]	@ (800468c <HAL_GPIO_Init+0x24c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d025      	beq.n	8004666 <HAL_GPIO_Init+0x226>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a1c      	ldr	r2, [pc, #112]	@ (8004690 <HAL_GPIO_Init+0x250>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01f      	beq.n	8004662 <HAL_GPIO_Init+0x222>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <HAL_GPIO_Init+0x254>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d019      	beq.n	800465e <HAL_GPIO_Init+0x21e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a1a      	ldr	r2, [pc, #104]	@ (8004698 <HAL_GPIO_Init+0x258>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <HAL_GPIO_Init+0x21a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a19      	ldr	r2, [pc, #100]	@ (800469c <HAL_GPIO_Init+0x25c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00d      	beq.n	8004656 <HAL_GPIO_Init+0x216>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a18      	ldr	r2, [pc, #96]	@ (80046a0 <HAL_GPIO_Init+0x260>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d007      	beq.n	8004652 <HAL_GPIO_Init+0x212>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a17      	ldr	r2, [pc, #92]	@ (80046a4 <HAL_GPIO_Init+0x264>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d101      	bne.n	800464e <HAL_GPIO_Init+0x20e>
 800464a:	2309      	movs	r3, #9
 800464c:	e02d      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 800464e:	230a      	movs	r3, #10
 8004650:	e02b      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 8004652:	2308      	movs	r3, #8
 8004654:	e029      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 8004656:	2307      	movs	r3, #7
 8004658:	e027      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 800465a:	2306      	movs	r3, #6
 800465c:	e025      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 800465e:	2305      	movs	r3, #5
 8004660:	e023      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 8004662:	2304      	movs	r3, #4
 8004664:	e021      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 8004666:	2303      	movs	r3, #3
 8004668:	e01f      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 800466a:	2302      	movs	r3, #2
 800466c:	e01d      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 800466e:	2301      	movs	r3, #1
 8004670:	e01b      	b.n	80046aa <HAL_GPIO_Init+0x26a>
 8004672:	bf00      	nop
 8004674:	58000080 	.word	0x58000080
 8004678:	58024400 	.word	0x58024400
 800467c:	58000400 	.word	0x58000400
 8004680:	58020000 	.word	0x58020000
 8004684:	58020400 	.word	0x58020400
 8004688:	58020800 	.word	0x58020800
 800468c:	58020c00 	.word	0x58020c00
 8004690:	58021000 	.word	0x58021000
 8004694:	58021400 	.word	0x58021400
 8004698:	58021800 	.word	0x58021800
 800469c:	58021c00 	.word	0x58021c00
 80046a0:	58022000 	.word	0x58022000
 80046a4:	58022400 	.word	0x58022400
 80046a8:	2300      	movs	r3, #0
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	f002 0203 	and.w	r2, r2, #3
 80046b0:	0092      	lsls	r2, r2, #2
 80046b2:	4093      	lsls	r3, r2
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ba:	4938      	ldr	r1, [pc, #224]	@ (800479c <HAL_GPIO_Init+0x35c>)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	089b      	lsrs	r3, r3, #2
 80046c0:	3302      	adds	r3, #2
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800471c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	f47f ae63 	bne.w	8004454 <HAL_GPIO_Init+0x14>
  }
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	3724      	adds	r7, #36	@ 0x24
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	58000400 	.word	0x58000400

080047a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
 80047ac:	4613      	mov	r3, r2
 80047ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047b0:	787b      	ldrb	r3, [r7, #1]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047bc:	e003      	b.n	80047c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	041a      	lsls	r2, r3, #16
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	619a      	str	r2, [r3, #24]
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e10d      	b.n	8004a02 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd f984 	bl	8001b08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b04      	cmp	r3, #4
 8004834:	d008      	beq.n	8004848 <HAL_I2S_Init+0x74>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b06      	cmp	r3, #6
 800483c:	d004      	beq.n	8004848 <HAL_I2S_Init+0x74>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b0a      	cmp	r3, #10
 8004844:	f040 8087 	bne.w	8004956 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d05a      	beq.n	8004906 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004858:	2302      	movs	r3, #2
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e001      	b.n	8004862 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800485e:	2301      	movs	r3, #1
 8004860:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b30      	cmp	r3, #48	@ 0x30
 8004868:	d003      	beq.n	8004872 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800486e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004870:	d102      	bne.n	8004878 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8004872:	2301      	movs	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e001      	b.n	800487c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800487c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004880:	f04f 0100 	mov.w	r1, #0
 8004884:	f002 fadc 	bl	8006e40 <HAL_RCCEx_GetPeriphCLKFreq>
 8004888:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004892:	d113      	bne.n	80048bc <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	3305      	adds	r3, #5
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	e014      	b.n	80048e6 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80048bc:	2220      	movs	r2, #32
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	461a      	mov	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	3305      	adds	r3, #5
 80048e4:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4a48      	ldr	r2, [pc, #288]	@ (8004a0c <HAL_I2S_Init+0x238>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	08db      	lsrs	r3, r3, #3
 80048f0:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	e003      	b.n	800490e <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8004906:	2302      	movs	r3, #2
 8004908:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d102      	bne.n	800491a <HAL_I2S_Init+0x146>
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d002      	beq.n	8004920 <HAL_I2S_Init+0x14c>
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	2bff      	cmp	r3, #255	@ 0xff
 800491e:	d907      	bls.n	8004930 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004924:	f043 0210 	orr.w	r2, r3, #16
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e068      	b.n	8004a02 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8004936:	2301      	movs	r3, #1
 8004938:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004940:	4b33      	ldr	r3, [pc, #204]	@ (8004a10 <HAL_I2S_Init+0x23c>)
 8004942:	4013      	ands	r3, r2
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	0411      	lsls	r1, r2, #16
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	0612      	lsls	r2, r2, #24
 800494c:	4311      	orrs	r1, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	430b      	orrs	r3, r1
 8004954:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800495c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a14 <HAL_I2S_Init+0x240>)
 800495e:	4013      	ands	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6851      	ldr	r1, [r2, #4]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6892      	ldr	r2, [r2, #8]
 8004968:	4311      	orrs	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	4311      	orrs	r1, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6992      	ldr	r2, [r2, #24]
 8004974:	4311      	orrs	r1, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6a12      	ldr	r2, [r2, #32]
 800497a:	4311      	orrs	r1, r2
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004980:	4311      	orrs	r1, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6912      	ldr	r2, [r2, #16]
 8004986:	430a      	orrs	r2, r1
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f640 72f8 	movw	r2, #4088	@ 0xff8
 800499c:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80049ac:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d007      	beq.n	80049dc <HAL_I2S_Init+0x208>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b06      	cmp	r3, #6
 80049d2:	d003      	beq.n	80049dc <HAL_I2S_Init+0x208>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b0a      	cmp	r3, #10
 80049da:	d10a      	bne.n	80049f2 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	cccccccd 	.word	0xcccccccd
 8004a10:	fe00ffff 	.word	0xfe00ffff
 8004a14:	fdff9040 	.word	0xfdff9040

08004a18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a20:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <HAL_PWREx_ConfigSupply+0x70>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d00a      	beq.n	8004a42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a2c:	4b16      	ldr	r3, [pc, #88]	@ (8004a88 <HAL_PWREx_ConfigSupply+0x70>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d001      	beq.n	8004a3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e01f      	b.n	8004a7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e01d      	b.n	8004a7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a42:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <HAL_PWREx_ConfigSupply+0x70>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	490f      	ldr	r1, [pc, #60]	@ (8004a88 <HAL_PWREx_ConfigSupply+0x70>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a52:	f7fd fca1 	bl	8002398 <HAL_GetTick>
 8004a56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a58:	e009      	b.n	8004a6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a5a:	f7fd fc9d 	bl	8002398 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a68:	d901      	bls.n	8004a6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e007      	b.n	8004a7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <HAL_PWREx_ConfigSupply+0x70>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a7a:	d1ee      	bne.n	8004a5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	58024800 	.word	0x58024800

08004a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08c      	sub	sp, #48	@ 0x30
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f000 bc48 	b.w	8005330 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8088 	beq.w	8004bbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aae:	4b99      	ldr	r3, [pc, #612]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ab8:	4b96      	ldr	r3, [pc, #600]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d007      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x48>
 8004ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac6:	2b18      	cmp	r3, #24
 8004ac8:	d111      	bne.n	8004aee <HAL_RCC_OscConfig+0x62>
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d10c      	bne.n	8004aee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad4:	4b8f      	ldr	r3, [pc, #572]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d06d      	beq.n	8004bbc <HAL_RCC_OscConfig+0x130>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d169      	bne.n	8004bbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f000 bc21 	b.w	8005330 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af6:	d106      	bne.n	8004b06 <HAL_RCC_OscConfig+0x7a>
 8004af8:	4b86      	ldr	r3, [pc, #536]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a85      	ldr	r2, [pc, #532]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e02e      	b.n	8004b64 <HAL_RCC_OscConfig+0xd8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x9c>
 8004b0e:	4b81      	ldr	r3, [pc, #516]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a80      	ldr	r2, [pc, #512]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	4b7e      	ldr	r3, [pc, #504]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7d      	ldr	r2, [pc, #500]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e01d      	b.n	8004b64 <HAL_RCC_OscConfig+0xd8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0xc0>
 8004b32:	4b78      	ldr	r3, [pc, #480]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a77      	ldr	r2, [pc, #476]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4b75      	ldr	r3, [pc, #468]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a74      	ldr	r2, [pc, #464]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCC_OscConfig+0xd8>
 8004b4c:	4b71      	ldr	r3, [pc, #452]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a70      	ldr	r2, [pc, #448]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b6e      	ldr	r3, [pc, #440]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a6d      	ldr	r2, [pc, #436]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d013      	beq.n	8004b94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fd fc14 	bl	8002398 <HAL_GetTick>
 8004b70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b74:	f7fd fc10 	bl	8002398 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	@ 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e3d4      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b86:	4b63      	ldr	r3, [pc, #396]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0xe8>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd fc00 	bl	8002398 <HAL_GetTick>
 8004b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fd fbfc 	bl	8002398 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	@ 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e3c0      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bae:	4b59      	ldr	r3, [pc, #356]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x110>
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80ca 	beq.w	8004d60 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bcc:	4b51      	ldr	r3, [pc, #324]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bd6:	4b4f      	ldr	r3, [pc, #316]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x166>
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2b18      	cmp	r3, #24
 8004be6:	d156      	bne.n	8004c96 <HAL_RCC_OscConfig+0x20a>
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d151      	bne.n	8004c96 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf2:	4b48      	ldr	r3, [pc, #288]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_RCC_OscConfig+0x17e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e392      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c0a:	4b42      	ldr	r3, [pc, #264]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 0219 	bic.w	r2, r3, #25
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	493f      	ldr	r1, [pc, #252]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fd fbbc 	bl	8002398 <HAL_GetTick>
 8004c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c24:	f7fd fbb8 	bl	8002398 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e37c      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c36:	4b37      	ldr	r3, [pc, #220]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c42:	f7fd fbd9 	bl	80023f8 <HAL_GetREVID>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d817      	bhi.n	8004c80 <HAL_RCC_OscConfig+0x1f4>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b40      	cmp	r3, #64	@ 0x40
 8004c56:	d108      	bne.n	8004c6a <HAL_RCC_OscConfig+0x1de>
 8004c58:	4b2e      	ldr	r3, [pc, #184]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c60:	4a2c      	ldr	r2, [pc, #176]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c66:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c68:	e07a      	b.n	8004d60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	031b      	lsls	r3, r3, #12
 8004c78:	4926      	ldr	r1, [pc, #152]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c7e:	e06f      	b.n	8004d60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	4b24      	ldr	r3, [pc, #144]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	4921      	ldr	r1, [pc, #132]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c94:	e064      	b.n	8004d60 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d047      	beq.n	8004d2e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0219 	bic.w	r2, r3, #25
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	491a      	ldr	r1, [pc, #104]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fd fb72 	bl	8002398 <HAL_GetTick>
 8004cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb8:	f7fd fb6e 	bl	8002398 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e332      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cca:	4b12      	ldr	r3, [pc, #72]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	f7fd fb8f 	bl	80023f8 <HAL_GetREVID>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d819      	bhi.n	8004d18 <HAL_RCC_OscConfig+0x28c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b40      	cmp	r3, #64	@ 0x40
 8004cea:	d108      	bne.n	8004cfe <HAL_RCC_OscConfig+0x272>
 8004cec:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004cf4:	4a07      	ldr	r2, [pc, #28]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cfa:	6053      	str	r3, [r2, #4]
 8004cfc:	e030      	b.n	8004d60 <HAL_RCC_OscConfig+0x2d4>
 8004cfe:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	031b      	lsls	r3, r3, #12
 8004d0c:	4901      	ldr	r1, [pc, #4]	@ (8004d14 <HAL_RCC_OscConfig+0x288>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
 8004d12:	e025      	b.n	8004d60 <HAL_RCC_OscConfig+0x2d4>
 8004d14:	58024400 	.word	0x58024400
 8004d18:	4b9a      	ldr	r3, [pc, #616]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	061b      	lsls	r3, r3, #24
 8004d26:	4997      	ldr	r1, [pc, #604]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]
 8004d2c:	e018      	b.n	8004d60 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d2e:	4b95      	ldr	r3, [pc, #596]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a94      	ldr	r2, [pc, #592]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7fd fb2d 	bl	8002398 <HAL_GetTick>
 8004d3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d42:	f7fd fb29 	bl	8002398 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e2ed      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d54:	4b8b      	ldr	r3, [pc, #556]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f0      	bne.n	8004d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80a9 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6e:	4b85      	ldr	r3, [pc, #532]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d78:	4b82      	ldr	r3, [pc, #520]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d007      	beq.n	8004d94 <HAL_RCC_OscConfig+0x308>
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b18      	cmp	r3, #24
 8004d88:	d13a      	bne.n	8004e00 <HAL_RCC_OscConfig+0x374>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d135      	bne.n	8004e00 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d94:	4b7b      	ldr	r3, [pc, #492]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_OscConfig+0x320>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	2b80      	cmp	r3, #128	@ 0x80
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e2c1      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dac:	f7fd fb24 	bl	80023f8 <HAL_GetREVID>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d817      	bhi.n	8004dea <HAL_RCC_OscConfig+0x35e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d108      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x348>
 8004dc2:	4b70      	ldr	r3, [pc, #448]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004dca:	4a6e      	ldr	r2, [pc, #440]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004dcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dd0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dd2:	e075      	b.n	8004ec0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dd4:	4b6b      	ldr	r3, [pc, #428]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	069b      	lsls	r3, r3, #26
 8004de2:	4968      	ldr	r1, [pc, #416]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004de8:	e06a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dea:	4b66      	ldr	r3, [pc, #408]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	4962      	ldr	r1, [pc, #392]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dfe:	e05f      	b.n	8004ec0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d042      	beq.n	8004e8e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e08:	4b5e      	ldr	r3, [pc, #376]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd fac0 	bl	8002398 <HAL_GetTick>
 8004e18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e1c:	f7fd fabc 	bl	8002398 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e280      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e2e:	4b55      	ldr	r3, [pc, #340]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e3a:	f7fd fadd 	bl	80023f8 <HAL_GetREVID>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d817      	bhi.n	8004e78 <HAL_RCC_OscConfig+0x3ec>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d108      	bne.n	8004e62 <HAL_RCC_OscConfig+0x3d6>
 8004e50:	4b4c      	ldr	r3, [pc, #304]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e58:	4a4a      	ldr	r2, [pc, #296]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e5e:	6053      	str	r3, [r2, #4]
 8004e60:	e02e      	b.n	8004ec0 <HAL_RCC_OscConfig+0x434>
 8004e62:	4b48      	ldr	r3, [pc, #288]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	069b      	lsls	r3, r3, #26
 8004e70:	4944      	ldr	r1, [pc, #272]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	604b      	str	r3, [r1, #4]
 8004e76:	e023      	b.n	8004ec0 <HAL_RCC_OscConfig+0x434>
 8004e78:	4b42      	ldr	r3, [pc, #264]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	061b      	lsls	r3, r3, #24
 8004e86:	493f      	ldr	r1, [pc, #252]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60cb      	str	r3, [r1, #12]
 8004e8c:	e018      	b.n	8004ec0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a3c      	ldr	r2, [pc, #240]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004e94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7fd fa7d 	bl	8002398 <HAL_GetTick>
 8004e9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ea2:	f7fd fa79 	bl	8002398 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e23d      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eb4:	4b33      	ldr	r3, [pc, #204]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d036      	beq.n	8004f3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d019      	beq.n	8004f08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fd fa5a 	bl	8002398 <HAL_GetTick>
 8004ee4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee8:	f7fd fa56 	bl	8002398 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e21a      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004efa:	4b22      	ldr	r3, [pc, #136]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x45c>
 8004f06:	e018      	b.n	8004f3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f08:	4b1e      	ldr	r3, [pc, #120]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd fa40 	bl	8002398 <HAL_GetTick>
 8004f18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1c:	f7fd fa3c 	bl	8002398 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e200      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f2e:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d039      	beq.n	8004fba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01c      	beq.n	8004f88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a0c      	ldr	r2, [pc, #48]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004f54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f5a:	f7fd fa1d 	bl	8002398 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f62:	f7fd fa19 	bl	8002398 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e1dd      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f74:	4b03      	ldr	r3, [pc, #12]	@ (8004f84 <HAL_RCC_OscConfig+0x4f8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x4d6>
 8004f80:	e01b      	b.n	8004fba <HAL_RCC_OscConfig+0x52e>
 8004f82:	bf00      	nop
 8004f84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f88:	4b9b      	ldr	r3, [pc, #620]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a9a      	ldr	r2, [pc, #616]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8004f8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f94:	f7fd fa00 	bl	8002398 <HAL_GetTick>
 8004f98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f9c:	f7fd f9fc 	bl	8002398 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e1c0      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fae:	4b92      	ldr	r3, [pc, #584]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8081 	beq.w	80050ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80051fc <HAL_RCC_OscConfig+0x770>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a8b      	ldr	r2, [pc, #556]	@ (80051fc <HAL_RCC_OscConfig+0x770>)
 8004fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fd4:	f7fd f9e0 	bl	8002398 <HAL_GetTick>
 8004fd8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fdc:	f7fd f9dc 	bl	8002398 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	@ 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e1a0      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fee:	4b83      	ldr	r3, [pc, #524]	@ (80051fc <HAL_RCC_OscConfig+0x770>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d106      	bne.n	8005010 <HAL_RCC_OscConfig+0x584>
 8005002:	4b7d      	ldr	r3, [pc, #500]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	4a7c      	ldr	r2, [pc, #496]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	6713      	str	r3, [r2, #112]	@ 0x70
 800500e:	e02d      	b.n	800506c <HAL_RCC_OscConfig+0x5e0>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10c      	bne.n	8005032 <HAL_RCC_OscConfig+0x5a6>
 8005018:	4b77      	ldr	r3, [pc, #476]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501c:	4a76      	ldr	r2, [pc, #472]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	6713      	str	r3, [r2, #112]	@ 0x70
 8005024:	4b74      	ldr	r3, [pc, #464]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005028:	4a73      	ldr	r2, [pc, #460]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800502a:	f023 0304 	bic.w	r3, r3, #4
 800502e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005030:	e01c      	b.n	800506c <HAL_RCC_OscConfig+0x5e0>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b05      	cmp	r3, #5
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0x5c8>
 800503a:	4b6f      	ldr	r3, [pc, #444]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	4a6e      	ldr	r2, [pc, #440]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005040:	f043 0304 	orr.w	r3, r3, #4
 8005044:	6713      	str	r3, [r2, #112]	@ 0x70
 8005046:	4b6c      	ldr	r3, [pc, #432]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504a:	4a6b      	ldr	r2, [pc, #428]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	6713      	str	r3, [r2, #112]	@ 0x70
 8005052:	e00b      	b.n	800506c <HAL_RCC_OscConfig+0x5e0>
 8005054:	4b68      	ldr	r3, [pc, #416]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005058:	4a67      	ldr	r2, [pc, #412]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005060:	4b65      	ldr	r3, [pc, #404]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005064:	4a64      	ldr	r2, [pc, #400]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005066:	f023 0304 	bic.w	r3, r3, #4
 800506a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d015      	beq.n	80050a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fd f990 	bl	8002398 <HAL_GetTick>
 8005078:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800507a:	e00a      	b.n	8005092 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fd f98c 	bl	8002398 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e14e      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005092:	4b59      	ldr	r3, [pc, #356]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0ee      	beq.n	800507c <HAL_RCC_OscConfig+0x5f0>
 800509e:	e014      	b.n	80050ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fd f97a 	bl	8002398 <HAL_GetTick>
 80050a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050a6:	e00a      	b.n	80050be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a8:	f7fd f976 	bl	8002398 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e138      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050be:	4b4e      	ldr	r3, [pc, #312]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1ee      	bne.n	80050a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 812d 	beq.w	800532e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050d4:	4b48      	ldr	r3, [pc, #288]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050dc:	2b18      	cmp	r3, #24
 80050de:	f000 80bd 	beq.w	800525c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	f040 809e 	bne.w	8005228 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ec:	4b42      	ldr	r3, [pc, #264]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a41      	ldr	r2, [pc, #260]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80050f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fd f94e 	bl	8002398 <HAL_GetTick>
 80050fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005100:	f7fd f94a 	bl	8002398 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e10e      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005112:	4b39      	ldr	r3, [pc, #228]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800511e:	4b36      	ldr	r3, [pc, #216]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005122:	4b37      	ldr	r3, [pc, #220]	@ (8005200 <HAL_RCC_OscConfig+0x774>)
 8005124:	4013      	ands	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800512e:	0112      	lsls	r2, r2, #4
 8005130:	430a      	orrs	r2, r1
 8005132:	4931      	ldr	r1, [pc, #196]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	628b      	str	r3, [r1, #40]	@ 0x28
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513c:	3b01      	subs	r3, #1
 800513e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005146:	3b01      	subs	r3, #1
 8005148:	025b      	lsls	r3, r3, #9
 800514a:	b29b      	uxth	r3, r3
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	3b01      	subs	r3, #1
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005160:	3b01      	subs	r3, #1
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005168:	4923      	ldr	r1, [pc, #140]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800516a:	4313      	orrs	r3, r2
 800516c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800516e:	4b22      	ldr	r3, [pc, #136]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	4a21      	ldr	r2, [pc, #132]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800517a:	4b1f      	ldr	r3, [pc, #124]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800517c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800517e:	4b21      	ldr	r3, [pc, #132]	@ (8005204 <HAL_RCC_OscConfig+0x778>)
 8005180:	4013      	ands	r3, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005186:	00d2      	lsls	r2, r2, #3
 8005188:	491b      	ldr	r1, [pc, #108]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800518a:	4313      	orrs	r3, r2
 800518c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800518e:	4b1a      	ldr	r3, [pc, #104]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 8005190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005192:	f023 020c 	bic.w	r2, r3, #12
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	4917      	ldr	r1, [pc, #92]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051a0:	4b15      	ldr	r3, [pc, #84]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	f023 0202 	bic.w	r2, r3, #2
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ac:	4912      	ldr	r1, [pc, #72]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051b2:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	4a10      	ldr	r2, [pc, #64]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051be:	4b0e      	ldr	r3, [pc, #56]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	4a0d      	ldr	r2, [pc, #52]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051ca:	4b0b      	ldr	r3, [pc, #44]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ce:	4a0a      	ldr	r2, [pc, #40]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051d6:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	4a07      	ldr	r2, [pc, #28]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e2:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a04      	ldr	r2, [pc, #16]	@ (80051f8 <HAL_RCC_OscConfig+0x76c>)
 80051e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fd f8d3 	bl	8002398 <HAL_GetTick>
 80051f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051f4:	e011      	b.n	800521a <HAL_RCC_OscConfig+0x78e>
 80051f6:	bf00      	nop
 80051f8:	58024400 	.word	0x58024400
 80051fc:	58024800 	.word	0x58024800
 8005200:	fffffc0c 	.word	0xfffffc0c
 8005204:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005208:	f7fd f8c6 	bl	8002398 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e08a      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800521a:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x77c>
 8005226:	e082      	b.n	800532e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005228:	4b43      	ldr	r3, [pc, #268]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a42      	ldr	r2, [pc, #264]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 800522e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fd f8b0 	bl	8002398 <HAL_GetTick>
 8005238:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523c:	f7fd f8ac 	bl	8002398 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e070      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800524e:	4b3a      	ldr	r3, [pc, #232]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x7b0>
 800525a:	e068      	b.n	800532e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800525c:	4b36      	ldr	r3, [pc, #216]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005262:	4b35      	ldr	r3, [pc, #212]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005266:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	2b01      	cmp	r3, #1
 800526e:	d031      	beq.n	80052d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f003 0203 	and.w	r2, r3, #3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d12a      	bne.n	80052d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528a:	429a      	cmp	r2, r3
 800528c:	d122      	bne.n	80052d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d11a      	bne.n	80052d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	0a5b      	lsrs	r3, r3, #9
 80052a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d111      	bne.n	80052d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	0c1b      	lsrs	r3, r3, #16
 80052b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d108      	bne.n	80052d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	0e1b      	lsrs	r3, r3, #24
 80052c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e02b      	b.n	8005330 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052d8:	4b17      	ldr	r3, [pc, #92]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 80052da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052dc:	08db      	lsrs	r3, r3, #3
 80052de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d01f      	beq.n	800532e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4a11      	ldr	r2, [pc, #68]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052fa:	f7fd f84d 	bl	8002398 <HAL_GetTick>
 80052fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005300:	bf00      	nop
 8005302:	f7fd f849 	bl	8002398 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	4293      	cmp	r3, r2
 800530c:	d0f9      	beq.n	8005302 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800530e:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 8005310:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005312:	4b0a      	ldr	r3, [pc, #40]	@ (800533c <HAL_RCC_OscConfig+0x8b0>)
 8005314:	4013      	ands	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800531a:	00d2      	lsls	r2, r2, #3
 800531c:	4906      	ldr	r1, [pc, #24]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 800531e:	4313      	orrs	r3, r2
 8005320:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005322:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	4a04      	ldr	r2, [pc, #16]	@ (8005338 <HAL_RCC_OscConfig+0x8ac>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3730      	adds	r7, #48	@ 0x30
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	58024400 	.word	0x58024400
 800533c:	ffff0007 	.word	0xffff0007

08005340 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e19c      	b.n	800568e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005354:	4b8a      	ldr	r3, [pc, #552]	@ (8005580 <HAL_RCC_ClockConfig+0x240>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d910      	bls.n	8005384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b87      	ldr	r3, [pc, #540]	@ (8005580 <HAL_RCC_ClockConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 020f 	bic.w	r2, r3, #15
 800536a:	4985      	ldr	r1, [pc, #532]	@ (8005580 <HAL_RCC_ClockConfig+0x240>)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	4313      	orrs	r3, r2
 8005370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	4b83      	ldr	r3, [pc, #524]	@ (8005580 <HAL_RCC_ClockConfig+0x240>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e184      	b.n	800568e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d010      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	4b7b      	ldr	r3, [pc, #492]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800539c:	429a      	cmp	r2, r3
 800539e:	d908      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053a0:	4b78      	ldr	r3, [pc, #480]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	4975      	ldr	r1, [pc, #468]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d010      	beq.n	80053e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	4b70      	ldr	r3, [pc, #448]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d908      	bls.n	80053e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	496a      	ldr	r1, [pc, #424]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d010      	beq.n	800540e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699a      	ldr	r2, [r3, #24]
 80053f0:	4b64      	ldr	r3, [pc, #400]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d908      	bls.n	800540e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053fc:	4b61      	ldr	r3, [pc, #388]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	495e      	ldr	r1, [pc, #376]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 800540a:	4313      	orrs	r3, r2
 800540c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d010      	beq.n	800543c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69da      	ldr	r2, [r3, #28]
 800541e:	4b59      	ldr	r3, [pc, #356]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005426:	429a      	cmp	r2, r3
 8005428:	d908      	bls.n	800543c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800542a:	4b56      	ldr	r3, [pc, #344]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	4953      	ldr	r1, [pc, #332]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005438:	4313      	orrs	r3, r2
 800543a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d010      	beq.n	800546a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	4b4d      	ldr	r3, [pc, #308]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	429a      	cmp	r2, r3
 8005456:	d908      	bls.n	800546a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005458:	4b4a      	ldr	r3, [pc, #296]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f023 020f 	bic.w	r2, r3, #15
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4947      	ldr	r1, [pc, #284]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005466:	4313      	orrs	r3, r2
 8005468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d055      	beq.n	8005522 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005476:	4b43      	ldr	r3, [pc, #268]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	4940      	ldr	r1, [pc, #256]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005484:	4313      	orrs	r3, r2
 8005486:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b02      	cmp	r3, #2
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005490:	4b3c      	ldr	r3, [pc, #240]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d121      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0f6      	b.n	800568e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d107      	bne.n	80054b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054a8:	4b36      	ldr	r3, [pc, #216]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d115      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0ea      	b.n	800568e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d107      	bne.n	80054d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054c0:	4b30      	ldr	r3, [pc, #192]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d109      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0de      	b.n	800568e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0d6      	b.n	800568e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054e0:	4b28      	ldr	r3, [pc, #160]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f023 0207 	bic.w	r2, r3, #7
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4925      	ldr	r1, [pc, #148]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f2:	f7fc ff51 	bl	8002398 <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f8:	e00a      	b.n	8005510 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fa:	f7fc ff4d 	bl	8002398 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005508:	4293      	cmp	r3, r2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e0be      	b.n	800568e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005510:	4b1c      	ldr	r3, [pc, #112]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	429a      	cmp	r2, r3
 8005520:	d1eb      	bne.n	80054fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d010      	beq.n	8005550 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	4b14      	ldr	r3, [pc, #80]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	429a      	cmp	r2, r3
 800553c:	d208      	bcs.n	8005550 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800553e:	4b11      	ldr	r3, [pc, #68]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f023 020f 	bic.w	r2, r3, #15
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	490e      	ldr	r1, [pc, #56]	@ (8005584 <HAL_RCC_ClockConfig+0x244>)
 800554c:	4313      	orrs	r3, r2
 800554e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005550:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <HAL_RCC_ClockConfig+0x240>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d214      	bcs.n	8005588 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b08      	ldr	r3, [pc, #32]	@ (8005580 <HAL_RCC_ClockConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 020f 	bic.w	r2, r3, #15
 8005566:	4906      	ldr	r1, [pc, #24]	@ (8005580 <HAL_RCC_ClockConfig+0x240>)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <HAL_RCC_ClockConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d005      	beq.n	8005588 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e086      	b.n	800568e <HAL_RCC_ClockConfig+0x34e>
 8005580:	52002000 	.word	0x52002000
 8005584:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d010      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	4b3f      	ldr	r3, [pc, #252]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d208      	bcs.n	80055b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	4939      	ldr	r1, [pc, #228]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d010      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695a      	ldr	r2, [r3, #20]
 80055c6:	4b34      	ldr	r3, [pc, #208]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d208      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055d2:	4b31      	ldr	r3, [pc, #196]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	492e      	ldr	r1, [pc, #184]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d010      	beq.n	8005612 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	4b28      	ldr	r3, [pc, #160]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d208      	bcs.n	8005612 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005600:	4b25      	ldr	r3, [pc, #148]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	4922      	ldr	r1, [pc, #136]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 800560e:	4313      	orrs	r3, r2
 8005610:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d010      	beq.n	8005640 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	4b1d      	ldr	r3, [pc, #116]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800562a:	429a      	cmp	r2, r3
 800562c:	d208      	bcs.n	8005640 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800562e:	4b1a      	ldr	r3, [pc, #104]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	4917      	ldr	r1, [pc, #92]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 800563c:	4313      	orrs	r3, r2
 800563e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005640:	f000 f834 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 8005644:	4602      	mov	r2, r0
 8005646:	4b14      	ldr	r3, [pc, #80]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	0a1b      	lsrs	r3, r3, #8
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	4912      	ldr	r1, [pc, #72]	@ (800569c <HAL_RCC_ClockConfig+0x35c>)
 8005652:	5ccb      	ldrb	r3, [r1, r3]
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
 800565c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800565e:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <HAL_RCC_ClockConfig+0x358>)
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	4a0d      	ldr	r2, [pc, #52]	@ (800569c <HAL_RCC_ClockConfig+0x35c>)
 8005668:	5cd3      	ldrb	r3, [r2, r3]
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	fa22 f303 	lsr.w	r3, r2, r3
 8005674:	4a0a      	ldr	r2, [pc, #40]	@ (80056a0 <HAL_RCC_ClockConfig+0x360>)
 8005676:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005678:	4a0a      	ldr	r2, [pc, #40]	@ (80056a4 <HAL_RCC_ClockConfig+0x364>)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800567e:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <HAL_RCC_ClockConfig+0x368>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7fc fe3e 	bl	8002304 <HAL_InitTick>
 8005688:	4603      	mov	r3, r0
 800568a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	58024400 	.word	0x58024400
 800569c:	0800b77c 	.word	0x0800b77c
 80056a0:	24000008 	.word	0x24000008
 80056a4:	24000004 	.word	0x24000004
 80056a8:	2400000c 	.word	0x2400000c

080056ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b089      	sub	sp, #36	@ 0x24
 80056b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056b2:	4bb3      	ldr	r3, [pc, #716]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056ba:	2b18      	cmp	r3, #24
 80056bc:	f200 8155 	bhi.w	800596a <HAL_RCC_GetSysClockFreq+0x2be>
 80056c0:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	0800572d 	.word	0x0800572d
 80056cc:	0800596b 	.word	0x0800596b
 80056d0:	0800596b 	.word	0x0800596b
 80056d4:	0800596b 	.word	0x0800596b
 80056d8:	0800596b 	.word	0x0800596b
 80056dc:	0800596b 	.word	0x0800596b
 80056e0:	0800596b 	.word	0x0800596b
 80056e4:	0800596b 	.word	0x0800596b
 80056e8:	08005753 	.word	0x08005753
 80056ec:	0800596b 	.word	0x0800596b
 80056f0:	0800596b 	.word	0x0800596b
 80056f4:	0800596b 	.word	0x0800596b
 80056f8:	0800596b 	.word	0x0800596b
 80056fc:	0800596b 	.word	0x0800596b
 8005700:	0800596b 	.word	0x0800596b
 8005704:	0800596b 	.word	0x0800596b
 8005708:	08005759 	.word	0x08005759
 800570c:	0800596b 	.word	0x0800596b
 8005710:	0800596b 	.word	0x0800596b
 8005714:	0800596b 	.word	0x0800596b
 8005718:	0800596b 	.word	0x0800596b
 800571c:	0800596b 	.word	0x0800596b
 8005720:	0800596b 	.word	0x0800596b
 8005724:	0800596b 	.word	0x0800596b
 8005728:	0800575f 	.word	0x0800575f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800572c:	4b94      	ldr	r3, [pc, #592]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005738:	4b91      	ldr	r3, [pc, #580]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	08db      	lsrs	r3, r3, #3
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	4a90      	ldr	r2, [pc, #576]	@ (8005984 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
 8005748:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800574a:	e111      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800574c:	4b8d      	ldr	r3, [pc, #564]	@ (8005984 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800574e:	61bb      	str	r3, [r7, #24]
      break;
 8005750:	e10e      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005752:	4b8d      	ldr	r3, [pc, #564]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005754:	61bb      	str	r3, [r7, #24]
      break;
 8005756:	e10b      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005758:	4b8c      	ldr	r3, [pc, #560]	@ (800598c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800575a:	61bb      	str	r3, [r7, #24]
      break;
 800575c:	e108      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800575e:	4b88      	ldr	r3, [pc, #544]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005768:	4b85      	ldr	r3, [pc, #532]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005772:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005774:	4b82      	ldr	r3, [pc, #520]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800577e:	4b80      	ldr	r3, [pc, #512]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005782:	08db      	lsrs	r3, r3, #3
 8005784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005796:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80e1 	beq.w	8005964 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	f000 8083 	beq.w	80058b0 <HAL_RCC_GetSysClockFreq+0x204>
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	f200 80a1 	bhi.w	80058f4 <HAL_RCC_GetSysClockFreq+0x248>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x114>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d056      	beq.n	800586c <HAL_RCC_GetSysClockFreq+0x1c0>
 80057be:	e099      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d02d      	beq.n	8005828 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057cc:	4b6c      	ldr	r3, [pc, #432]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	08db      	lsrs	r3, r3, #3
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	4a6b      	ldr	r2, [pc, #428]	@ (8005984 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
 80057dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	ee07 3a90 	vmov	s15, r3
 80057e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f6:	4b62      	ldr	r3, [pc, #392]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005806:	ed97 6a02 	vldr	s12, [r7, #8]
 800580a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005990 <HAL_RCC_GetSysClockFreq+0x2e4>
 800580e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800581a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005826:	e087      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005994 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583a:	4b51      	ldr	r3, [pc, #324]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584a:	ed97 6a02 	vldr	s12, [r7, #8]
 800584e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005990 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800586a:	e065      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005998 <HAL_RCC_GetSysClockFreq+0x2ec>
 800587a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587e:	4b40      	ldr	r3, [pc, #256]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005892:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005990 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ae:	e043      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800599c <HAL_RCC_GetSysClockFreq+0x2f0>
 80058be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005990 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058f2:	e021      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005998 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005906:	4b1e      	ldr	r3, [pc, #120]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005916:	ed97 6a02 	vldr	s12, [r7, #8]
 800591a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005990 <HAL_RCC_GetSysClockFreq+0x2e4>
 800591e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800592a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800592e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005932:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005936:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005938:	4b11      	ldr	r3, [pc, #68]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593c:	0a5b      	lsrs	r3, r3, #9
 800593e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005942:	3301      	adds	r3, #1
 8005944:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	ee07 3a90 	vmov	s15, r3
 800594c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005950:	edd7 6a07 	vldr	s13, [r7, #28]
 8005954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800595c:	ee17 3a90 	vmov	r3, s15
 8005960:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005962:	e005      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	61bb      	str	r3, [r7, #24]
      break;
 8005968:	e002      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800596a:	4b07      	ldr	r3, [pc, #28]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800596c:	61bb      	str	r3, [r7, #24]
      break;
 800596e:	bf00      	nop
  }

  return sysclockfreq;
 8005970:	69bb      	ldr	r3, [r7, #24]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3724      	adds	r7, #36	@ 0x24
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	58024400 	.word	0x58024400
 8005984:	03d09000 	.word	0x03d09000
 8005988:	003d0900 	.word	0x003d0900
 800598c:	00f42400 	.word	0x00f42400
 8005990:	46000000 	.word	0x46000000
 8005994:	4c742400 	.word	0x4c742400
 8005998:	4a742400 	.word	0x4a742400
 800599c:	4b742400 	.word	0x4b742400

080059a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059a6:	f7ff fe81 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 80059aa:	4602      	mov	r2, r0
 80059ac:	4b10      	ldr	r3, [pc, #64]	@ (80059f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	0a1b      	lsrs	r3, r3, #8
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	490f      	ldr	r1, [pc, #60]	@ (80059f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80059b8:	5ccb      	ldrb	r3, [r1, r3]
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	fa22 f303 	lsr.w	r3, r2, r3
 80059c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059c4:	4b0a      	ldr	r3, [pc, #40]	@ (80059f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	4a09      	ldr	r2, [pc, #36]	@ (80059f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80059ce:	5cd3      	ldrb	r3, [r2, r3]
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	fa22 f303 	lsr.w	r3, r2, r3
 80059da:	4a07      	ldr	r2, [pc, #28]	@ (80059f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80059dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059de:	4a07      	ldr	r2, [pc, #28]	@ (80059fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059e4:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80059e6:	681b      	ldr	r3, [r3, #0]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	58024400 	.word	0x58024400
 80059f4:	0800b77c 	.word	0x0800b77c
 80059f8:	24000008 	.word	0x24000008
 80059fc:	24000004 	.word	0x24000004

08005a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a04:	f7ff ffcc 	bl	80059a0 <HAL_RCC_GetHCLKFreq>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	4904      	ldr	r1, [pc, #16]	@ (8005a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a16:	5ccb      	ldrb	r3, [r1, r3]
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	58024400 	.word	0x58024400
 8005a28:	0800b77c 	.word	0x0800b77c

08005a2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a30:	b0ca      	sub	sp, #296	@ 0x128
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a50:	2500      	movs	r5, #0
 8005a52:	ea54 0305 	orrs.w	r3, r4, r5
 8005a56:	d049      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a62:	d02f      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a68:	d828      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a6e:	d01a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a74:	d822      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a7e:	d007      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a80:	e01c      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a82:	4bb8      	ldr	r3, [pc, #736]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	4ab7      	ldr	r2, [pc, #732]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a8e:	e01a      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a94:	3308      	adds	r3, #8
 8005a96:	2102      	movs	r1, #2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f002 fb61 	bl	8008160 <RCCEx_PLL2_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aa4:	e00f      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aaa:	3328      	adds	r3, #40	@ 0x28
 8005aac:	2102      	movs	r1, #2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f002 fc08 	bl	80082c4 <RCCEx_PLL3_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aba:	e004      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ace:	4ba5      	ldr	r3, [pc, #660]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005adc:	4aa1      	ldr	r2, [pc, #644]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ae2:	e003      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005af8:	f04f 0900 	mov.w	r9, #0
 8005afc:	ea58 0309 	orrs.w	r3, r8, r9
 8005b00:	d047      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d82a      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b29 	.word	0x08005b29
 8005b18:	08005b37 	.word	0x08005b37
 8005b1c:	08005b4d 	.word	0x08005b4d
 8005b20:	08005b6b 	.word	0x08005b6b
 8005b24:	08005b6b 	.word	0x08005b6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	4b8e      	ldr	r3, [pc, #568]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	4a8d      	ldr	r2, [pc, #564]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b34:	e01a      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f002 fb0e 	bl	8008160 <RCCEx_PLL2_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b4a:	e00f      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	3328      	adds	r3, #40	@ 0x28
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f002 fbb5 	bl	80082c4 <RCCEx_PLL3_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b60:	e004      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b68:	e000      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b74:	4b7b      	ldr	r3, [pc, #492]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	f023 0107 	bic.w	r1, r3, #7
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	4a78      	ldr	r2, [pc, #480]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b88:	e003      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b9e:	f04f 0b00 	mov.w	fp, #0
 8005ba2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ba6:	d04c      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb2:	d030      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb8:	d829      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bbc:	d02d      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bc0:	d825      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bc2:	2b80      	cmp	r3, #128	@ 0x80
 8005bc4:	d018      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005bc6:	2b80      	cmp	r3, #128	@ 0x80
 8005bc8:	d821      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005bce:	2b40      	cmp	r3, #64	@ 0x40
 8005bd0:	d007      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005bd2:	e01c      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd4:	4b63      	ldr	r3, [pc, #396]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	4a62      	ldr	r2, [pc, #392]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005be0:	e01c      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	3308      	adds	r3, #8
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f002 fab8 	bl	8008160 <RCCEx_PLL2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bf6:	e011      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfc:	3328      	adds	r3, #40	@ 0x28
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f002 fb5f 	bl	80082c4 <RCCEx_PLL3_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c0c:	e006      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c14:	e002      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c16:	bf00      	nop
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c24:	4b4f      	ldr	r3, [pc, #316]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c32:	4a4c      	ldr	r2, [pc, #304]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c38:	e003      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c52:	2300      	movs	r3, #0
 8005c54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	d053      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c6e:	d035      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c74:	d82e      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c7a:	d031      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c80:	d828      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c86:	d01a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c8c:	d822      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c96:	d007      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c98:	e01c      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9a:	4b32      	ldr	r3, [pc, #200]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	4a31      	ldr	r2, [pc, #196]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ca6:	e01c      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cac:	3308      	adds	r3, #8
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f002 fa55 	bl	8008160 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cbc:	e011      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc2:	3328      	adds	r3, #40	@ 0x28
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f002 fafc 	bl	80082c4 <RCCEx_PLL3_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cd2:	e006      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cda:	e002      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cea:	4b1e      	ldr	r3, [pc, #120]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d00:	e003      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005d24:	460b      	mov	r3, r1
 8005d26:	4313      	orrs	r3, r2
 8005d28:	d056      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d36:	d038      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d3c:	d831      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d42:	d034      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d48:	d82b      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d4e:	d01d      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d54:	d825      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d006      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d60:	e01f      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d62:	bf00      	nop
 8005d64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d68:	4ba2      	ldr	r3, [pc, #648]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6c:	4aa1      	ldr	r2, [pc, #644]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d74:	e01c      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f002 f9ee 	bl	8008160 <RCCEx_PLL2_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d8a:	e011      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d90:	3328      	adds	r3, #40	@ 0x28
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f002 fa95 	bl	80082c4 <RCCEx_PLL3_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005da0:	e006      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da8:	e002      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005daa:	bf00      	nop
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10b      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005db8:	4b8e      	ldr	r3, [pc, #568]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dc8:	4a8a      	ldr	r2, [pc, #552]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dce:	e003      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005de4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005dee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d03a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfe:	2b30      	cmp	r3, #48	@ 0x30
 8005e00:	d01f      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005e02:	2b30      	cmp	r3, #48	@ 0x30
 8005e04:	d819      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d00c      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d815      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d019      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d111      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e16:	4b77      	ldr	r3, [pc, #476]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	4a76      	ldr	r2, [pc, #472]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e22:	e011      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e28:	3308      	adds	r3, #8
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f002 f997 	bl	8008160 <RCCEx_PLL2_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e38:	e006      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e40:	e002      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e50:	4b68      	ldr	r3, [pc, #416]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5e:	4a65      	ldr	r2, [pc, #404]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e60:	430b      	orrs	r3, r1
 8005e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e64:	e003      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	d051      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e98:	d035      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e9e:	d82e      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ea0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ea4:	d031      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ea6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eaa:	d828      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb0:	d01a      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb6:	d822      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec0:	d007      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ec2:	e01c      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e01c      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f002 f940 	bl	8008160 <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ee6:	e011      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eec:	3328      	adds	r3, #40	@ 0x28
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f002 f9e7 	bl	80082c4 <RCCEx_PLL3_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005efc:	e006      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f14:	4b37      	ldr	r3, [pc, #220]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f22:	4a34      	ldr	r2, [pc, #208]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f28:	e003      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f42:	2300      	movs	r3, #0
 8005f44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d056      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f5c:	d033      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f62:	d82c      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f68:	d02f      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f6e:	d826      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f74:	d02b      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f7a:	d820      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f80:	d012      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f86:	d81a      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d022      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f90:	d115      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	3308      	adds	r3, #8
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 f8e0 	bl	8008160 <RCCEx_PLL2_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fa6:	e015      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fac:	3328      	adds	r3, #40	@ 0x28
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f002 f987 	bl	80082c4 <RCCEx_PLL3_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fbc:	e00a      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fc4:	e006      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fc6:	bf00      	nop
 8005fc8:	e004      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10d      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fdc:	4b05      	ldr	r3, [pc, #20]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fea:	4a02      	ldr	r2, [pc, #8]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ff0:	e006      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ff2:	bf00      	nop
 8005ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800600c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006010:	2300      	movs	r3, #0
 8006012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006016:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d055      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800602c:	d033      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800602e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006032:	d82c      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006038:	d02f      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603e:	d826      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006040:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006044:	d02b      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800604a:	d820      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d012      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006056:	d81a      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d022      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800605c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006060:	d115      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006066:	3308      	adds	r3, #8
 8006068:	2101      	movs	r1, #1
 800606a:	4618      	mov	r0, r3
 800606c:	f002 f878 	bl	8008160 <RCCEx_PLL2_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006076:	e015      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607c:	3328      	adds	r3, #40	@ 0x28
 800607e:	2101      	movs	r1, #1
 8006080:	4618      	mov	r0, r3
 8006082:	f002 f91f 	bl	80082c4 <RCCEx_PLL3_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800608c:	e00a      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006094:	e006      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006096:	bf00      	nop
 8006098:	e004      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800609a:	bf00      	nop
 800609c:	e002      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060ac:	4ba3      	ldr	r3, [pc, #652]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060bc:	4a9f      	ldr	r2, [pc, #636]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060be:	430b      	orrs	r3, r1
 80060c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80060c2:	e003      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d037      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060f6:	d00e      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060fc:	d816      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d018      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006106:	d111      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006108:	4b8c      	ldr	r3, [pc, #560]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	4a8b      	ldr	r2, [pc, #556]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800610e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006114:	e00f      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611a:	3308      	adds	r3, #8
 800611c:	2101      	movs	r1, #1
 800611e:	4618      	mov	r0, r3
 8006120:	f002 f81e 	bl	8008160 <RCCEx_PLL2_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800612a:	e004      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800613e:	4b7f      	ldr	r3, [pc, #508]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006142:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614c:	4a7b      	ldr	r2, [pc, #492]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800614e:	430b      	orrs	r3, r1
 8006150:	6513      	str	r3, [r2, #80]	@ 0x50
 8006152:	e003      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006172:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006176:	460b      	mov	r3, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	d039      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006182:	2b03      	cmp	r3, #3
 8006184:	d81c      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061c9 	.word	0x080061c9
 8006190:	0800619d 	.word	0x0800619d
 8006194:	080061ab 	.word	0x080061ab
 8006198:	080061c9 	.word	0x080061c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800619c:	4b67      	ldr	r3, [pc, #412]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	4a66      	ldr	r2, [pc, #408]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061a8:	e00f      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	3308      	adds	r3, #8
 80061b0:	2102      	movs	r1, #2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 ffd4 	bl	8008160 <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061be:	e004      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061d2:	4b5a      	ldr	r3, [pc, #360]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d6:	f023 0103 	bic.w	r1, r3, #3
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e0:	4a56      	ldr	r2, [pc, #344]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061e2:	430b      	orrs	r3, r1
 80061e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061e6:	e003      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006206:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800620a:	460b      	mov	r3, r1
 800620c:	4313      	orrs	r3, r2
 800620e:	f000 809f 	beq.w	8006350 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006212:	4b4b      	ldr	r3, [pc, #300]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a4a      	ldr	r2, [pc, #296]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800621c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800621e:	f7fc f8bb 	bl	8002398 <HAL_GetTick>
 8006222:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006226:	e00b      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006228:	f7fc f8b6 	bl	8002398 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b64      	cmp	r3, #100	@ 0x64
 8006236:	d903      	bls.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800623e:	e005      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006240:	4b3f      	ldr	r3, [pc, #252]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0ed      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800624c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006250:	2b00      	cmp	r3, #0
 8006252:	d179      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006254:	4b39      	ldr	r3, [pc, #228]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006256:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006260:	4053      	eors	r3, r2
 8006262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006266:	2b00      	cmp	r3, #0
 8006268:	d015      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800626a:	4b34      	ldr	r3, [pc, #208]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006272:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006276:	4b31      	ldr	r3, [pc, #196]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	4a30      	ldr	r2, [pc, #192]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006280:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006282:	4b2e      	ldr	r3, [pc, #184]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006286:	4a2d      	ldr	r2, [pc, #180]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800628c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800628e:	4a2b      	ldr	r2, [pc, #172]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006294:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800629e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a2:	d118      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fc f878 	bl	8002398 <HAL_GetTick>
 80062a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ac:	e00d      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ae:	f7fc f873 	bl	8002398 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062be:	429a      	cmp	r2, r3
 80062c0:	d903      	bls.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80062c8:	e005      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ca:	4b1c      	ldr	r3, [pc, #112]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0eb      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80062d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d129      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ee:	d10e      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062f0:	4b12      	ldr	r3, [pc, #72]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006300:	091a      	lsrs	r2, r3, #4
 8006302:	4b10      	ldr	r3, [pc, #64]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006304:	4013      	ands	r3, r2
 8006306:	4a0d      	ldr	r2, [pc, #52]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006308:	430b      	orrs	r3, r1
 800630a:	6113      	str	r3, [r2, #16]
 800630c:	e005      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800630e:	4b0b      	ldr	r3, [pc, #44]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	4a0a      	ldr	r2, [pc, #40]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006314:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006318:	6113      	str	r3, [r2, #16]
 800631a:	4b08      	ldr	r3, [pc, #32]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800631c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632a:	4a04      	ldr	r2, [pc, #16]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800632c:	430b      	orrs	r3, r1
 800632e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006330:	e00e      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800633a:	e009      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800633c:	58024400 	.word	0x58024400
 8006340:	58024800 	.word	0x58024800
 8006344:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f002 0301 	and.w	r3, r2, #1
 800635c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006360:	2300      	movs	r3, #0
 8006362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006366:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800636a:	460b      	mov	r3, r1
 800636c:	4313      	orrs	r3, r2
 800636e:	f000 8089 	beq.w	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006376:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006378:	2b28      	cmp	r3, #40	@ 0x28
 800637a:	d86b      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800637c:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	0800645d 	.word	0x0800645d
 8006388:	08006455 	.word	0x08006455
 800638c:	08006455 	.word	0x08006455
 8006390:	08006455 	.word	0x08006455
 8006394:	08006455 	.word	0x08006455
 8006398:	08006455 	.word	0x08006455
 800639c:	08006455 	.word	0x08006455
 80063a0:	08006455 	.word	0x08006455
 80063a4:	08006429 	.word	0x08006429
 80063a8:	08006455 	.word	0x08006455
 80063ac:	08006455 	.word	0x08006455
 80063b0:	08006455 	.word	0x08006455
 80063b4:	08006455 	.word	0x08006455
 80063b8:	08006455 	.word	0x08006455
 80063bc:	08006455 	.word	0x08006455
 80063c0:	08006455 	.word	0x08006455
 80063c4:	0800643f 	.word	0x0800643f
 80063c8:	08006455 	.word	0x08006455
 80063cc:	08006455 	.word	0x08006455
 80063d0:	08006455 	.word	0x08006455
 80063d4:	08006455 	.word	0x08006455
 80063d8:	08006455 	.word	0x08006455
 80063dc:	08006455 	.word	0x08006455
 80063e0:	08006455 	.word	0x08006455
 80063e4:	0800645d 	.word	0x0800645d
 80063e8:	08006455 	.word	0x08006455
 80063ec:	08006455 	.word	0x08006455
 80063f0:	08006455 	.word	0x08006455
 80063f4:	08006455 	.word	0x08006455
 80063f8:	08006455 	.word	0x08006455
 80063fc:	08006455 	.word	0x08006455
 8006400:	08006455 	.word	0x08006455
 8006404:	0800645d 	.word	0x0800645d
 8006408:	08006455 	.word	0x08006455
 800640c:	08006455 	.word	0x08006455
 8006410:	08006455 	.word	0x08006455
 8006414:	08006455 	.word	0x08006455
 8006418:	08006455 	.word	0x08006455
 800641c:	08006455 	.word	0x08006455
 8006420:	08006455 	.word	0x08006455
 8006424:	0800645d 	.word	0x0800645d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642c:	3308      	adds	r3, #8
 800642e:	2101      	movs	r1, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f001 fe95 	bl	8008160 <RCCEx_PLL2_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800643c:	e00f      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006442:	3328      	adds	r3, #40	@ 0x28
 8006444:	2101      	movs	r1, #1
 8006446:	4618      	mov	r0, r3
 8006448:	f001 ff3c 	bl	80082c4 <RCCEx_PLL3_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006452:	e004      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800645a:	e000      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800645c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006466:	4bbf      	ldr	r3, [pc, #764]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006472:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006474:	4abb      	ldr	r2, [pc, #748]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006476:	430b      	orrs	r3, r1
 8006478:	6553      	str	r3, [r2, #84]	@ 0x54
 800647a:	e003      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f002 0302 	and.w	r3, r2, #2
 8006490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800649a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d041      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d824      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80064ae:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	08006501 	.word	0x08006501
 80064b8:	080064cd 	.word	0x080064cd
 80064bc:	080064e3 	.word	0x080064e3
 80064c0:	08006501 	.word	0x08006501
 80064c4:	08006501 	.word	0x08006501
 80064c8:	08006501 	.word	0x08006501
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d0:	3308      	adds	r3, #8
 80064d2:	2101      	movs	r1, #1
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fe43 	bl	8008160 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064e0:	e00f      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	3328      	adds	r3, #40	@ 0x28
 80064e8:	2101      	movs	r1, #1
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 feea 	bl	80082c4 <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800650a:	4b96      	ldr	r3, [pc, #600]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	f023 0107 	bic.w	r1, r3, #7
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006518:	4a92      	ldr	r2, [pc, #584]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800651a:	430b      	orrs	r3, r1
 800651c:	6553      	str	r3, [r2, #84]	@ 0x54
 800651e:	e003      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f002 0304 	and.w	r3, r2, #4
 8006534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006538:	2300      	movs	r3, #0
 800653a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800653e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006542:	460b      	mov	r3, r1
 8006544:	4313      	orrs	r3, r2
 8006546:	d044      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006550:	2b05      	cmp	r3, #5
 8006552:	d825      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006554:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	080065a9 	.word	0x080065a9
 8006560:	08006575 	.word	0x08006575
 8006564:	0800658b 	.word	0x0800658b
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065a9 	.word	0x080065a9
 8006570:	080065a9 	.word	0x080065a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006578:	3308      	adds	r3, #8
 800657a:	2101      	movs	r1, #1
 800657c:	4618      	mov	r0, r3
 800657e:	f001 fdef 	bl	8008160 <RCCEx_PLL2_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006588:	e00f      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658e:	3328      	adds	r3, #40	@ 0x28
 8006590:	2101      	movs	r1, #1
 8006592:	4618      	mov	r0, r3
 8006594:	f001 fe96 	bl	80082c4 <RCCEx_PLL3_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800659e:	e004      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065a6:	e000      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80065a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	f023 0107 	bic.w	r1, r3, #7
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065c2:	4a68      	ldr	r2, [pc, #416]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c8:	e003      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f002 0320 	and.w	r3, r2, #32
 80065de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065e2:	2300      	movs	r3, #0
 80065e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065ec:	460b      	mov	r3, r1
 80065ee:	4313      	orrs	r3, r2
 80065f0:	d055      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065fe:	d033      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006604:	d82c      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660a:	d02f      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800660c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006610:	d826      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006612:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006616:	d02b      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006618:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800661c:	d820      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800661e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006622:	d012      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006628:	d81a      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d022      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800662e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006632:	d115      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	3308      	adds	r3, #8
 800663a:	2100      	movs	r1, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f001 fd8f 	bl	8008160 <RCCEx_PLL2_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006648:	e015      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	3328      	adds	r3, #40	@ 0x28
 8006650:	2102      	movs	r1, #2
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fe36 	bl	80082c4 <RCCEx_PLL3_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800665e:	e00a      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006666:	e006      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006668:	bf00      	nop
 800666a:	e004      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800667e:	4b39      	ldr	r3, [pc, #228]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006682:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668e:	4a35      	ldr	r2, [pc, #212]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006690:	430b      	orrs	r3, r1
 8006692:	6553      	str	r3, [r2, #84]	@ 0x54
 8006694:	e003      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800669a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066ae:	2300      	movs	r3, #0
 80066b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80066b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d058      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066ca:	d033      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80066cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066d0:	d82c      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d6:	d02f      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066dc:	d826      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e2:	d02b      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e8:	d820      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ee:	d012      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f4:	d81a      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d022      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fe:	d115      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	3308      	adds	r3, #8
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fd29 	bl	8008160 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006714:	e015      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	3328      	adds	r3, #40	@ 0x28
 800671c:	2102      	movs	r1, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f001 fdd0 	bl	80082c4 <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800672a:	e00a      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006732:	e006      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006734:	bf00      	nop
 8006736:	e004      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006738:	bf00      	nop
 800673a:	e002      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800673c:	bf00      	nop
 800673e:	e000      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10e      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800674a:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800674c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006756:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800675a:	4a02      	ldr	r2, [pc, #8]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006760:	e006      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006762:	bf00      	nop
 8006764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800677c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006780:	2300      	movs	r3, #0
 8006782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006786:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	d055      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006798:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800679c:	d033      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800679e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067a2:	d82c      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a8:	d02f      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80067aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ae:	d826      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067b4:	d02b      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80067b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067ba:	d820      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067c0:	d012      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80067c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067c6:	d81a      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d022      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d0:	d115      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d6:	3308      	adds	r3, #8
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 fcc0 	bl	8008160 <RCCEx_PLL2_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067e6:	e015      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	3328      	adds	r3, #40	@ 0x28
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fd67 	bl	80082c4 <RCCEx_PLL3_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067fc:	e00a      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006804:	e006      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006806:	bf00      	nop
 8006808:	e004      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10b      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800681c:	4ba1      	ldr	r3, [pc, #644]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800681e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006820:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006828:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800682c:	4a9d      	ldr	r2, [pc, #628]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800682e:	430b      	orrs	r3, r1
 8006830:	6593      	str	r3, [r2, #88]	@ 0x58
 8006832:	e003      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	f002 0308 	and.w	r3, r2, #8
 8006848:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006852:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006856:	460b      	mov	r3, r1
 8006858:	4313      	orrs	r3, r2
 800685a:	d01e      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800685c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006868:	d10c      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686e:	3328      	adds	r3, #40	@ 0x28
 8006870:	2102      	movs	r1, #2
 8006872:	4618      	mov	r0, r3
 8006874:	f001 fd26 	bl	80082c4 <RCCEx_PLL3_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006884:	4b87      	ldr	r3, [pc, #540]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006888:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006894:	4a83      	ldr	r2, [pc, #524]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006896:	430b      	orrs	r3, r1
 8006898:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f002 0310 	and.w	r3, r2, #16
 80068a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068b4:	460b      	mov	r3, r1
 80068b6:	4313      	orrs	r3, r2
 80068b8:	d01e      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c6:	d10c      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068cc:	3328      	adds	r3, #40	@ 0x28
 80068ce:	2102      	movs	r1, #2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 fcf7 	bl	80082c4 <RCCEx_PLL3_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068e2:	4b70      	ldr	r3, [pc, #448]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068f2:	4a6c      	ldr	r2, [pc, #432]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006908:	2300      	movs	r3, #0
 800690a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800690e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d03e      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006924:	d022      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800692a:	d81b      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006934:	d00b      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006936:	e015      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	3308      	adds	r3, #8
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f001 fc0d 	bl	8008160 <RCCEx_PLL2_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800694c:	e00f      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	3328      	adds	r3, #40	@ 0x28
 8006954:	2102      	movs	r1, #2
 8006956:	4618      	mov	r0, r3
 8006958:	f001 fcb4 	bl	80082c4 <RCCEx_PLL3_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006962:	e004      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800696a:	e000      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800696c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006976:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800697a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006986:	4a47      	ldr	r2, [pc, #284]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006988:	430b      	orrs	r3, r1
 800698a:	6593      	str	r3, [r2, #88]	@ 0x58
 800698c:	e003      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069a4:	2300      	movs	r3, #0
 80069a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80069ac:	460b      	mov	r3, r1
 80069ae:	4313      	orrs	r3, r2
 80069b0:	d03b      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069be:	d01f      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80069c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069c4:	d818      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80069c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ca:	d003      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80069cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069d0:	d007      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80069d2:	e011      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d4:	4b33      	ldr	r3, [pc, #204]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	4a32      	ldr	r2, [pc, #200]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069e0:	e00f      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e6:	3328      	adds	r3, #40	@ 0x28
 80069e8:	2101      	movs	r1, #1
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 fc6a 	bl	80082c4 <RCCEx_PLL3_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069f6:	e004      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069fe:	e000      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a0a:	4b26      	ldr	r3, [pc, #152]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1a:	4a22      	ldr	r2, [pc, #136]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a20:	e003      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a36:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a38:	2300      	movs	r3, #0
 8006a3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d034      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a54:	d007      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a56:	e011      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a58:	4b12      	ldr	r3, [pc, #72]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	4a11      	ldr	r2, [pc, #68]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a64:	e00e      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	2102      	movs	r1, #2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 fb76 	bl	8008160 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a7a:	e003      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10d      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a8c:	4b05      	ldr	r3, [pc, #20]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a9a:	4a02      	ldr	r2, [pc, #8]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006aa0:	e006      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006aa2:	bf00      	nop
 8006aa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006abe:	2300      	movs	r3, #0
 8006ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ac2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	d00c      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad0:	3328      	adds	r3, #40	@ 0x28
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 fbf5 	bl	80082c4 <RCCEx_PLL3_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006af2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006af4:	2300      	movs	r3, #0
 8006af6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006af8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006afc:	460b      	mov	r3, r1
 8006afe:	4313      	orrs	r3, r2
 8006b00:	d038      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b0e:	d018      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b14:	d811      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b1a:	d014      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b20:	d80b      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d011      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b2a:	d106      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2c:	4bc3      	ldr	r3, [pc, #780]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b30:	4ac2      	ldr	r2, [pc, #776]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b38:	e008      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b40:	e004      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b42:	bf00      	nop
 8006b44:	e002      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b46:	bf00      	nop
 8006b48:	e000      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b54:	4bb9      	ldr	r3, [pc, #740]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b64:	4ab5      	ldr	r2, [pc, #724]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b66:	430b      	orrs	r3, r1
 8006b68:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b6a:	e003      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b82:	2300      	movs	r3, #0
 8006b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b90:	4baa      	ldr	r3, [pc, #680]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b9e:	4aa7      	ldr	r2, [pc, #668]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006bb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	d00a      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006bc0:	4b9e      	ldr	r3, [pc, #632]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006bd0:	4a9a      	ldr	r2, [pc, #616]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006be4:	2300      	movs	r3, #0
 8006be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bec:	460b      	mov	r3, r1
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bf2:	4b92      	ldr	r3, [pc, #584]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c00:	4a8e      	ldr	r2, [pc, #568]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c14:	2300      	movs	r3, #0
 8006c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d00e      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c22:	4b86      	ldr	r3, [pc, #536]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	4a85      	ldr	r2, [pc, #532]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c2c:	6113      	str	r3, [r2, #16]
 8006c2e:	4b83      	ldr	r3, [pc, #524]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c30:	6919      	ldr	r1, [r3, #16]
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c3a:	4a80      	ldr	r2, [pc, #512]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c4e:	2300      	movs	r3, #0
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c56:	460b      	mov	r3, r1
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c5c:	4b77      	ldr	r3, [pc, #476]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c60:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6a:	4a74      	ldr	r2, [pc, #464]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c7e:	2300      	movs	r3, #0
 8006c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c86:	460b      	mov	r3, r1
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	d00a      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c90:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c9c:	4a67      	ldr	r2, [pc, #412]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	2100      	movs	r1, #0
 8006cac:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	d011      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 fa4a 	bl	8008160 <RCCEx_PLL2_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	2100      	movs	r1, #0
 8006cec:	6239      	str	r1, [r7, #32]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cf4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	d011      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d02:	3308      	adds	r3, #8
 8006d04:	2101      	movs	r1, #1
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 fa2a 	bl	8008160 <RCCEx_PLL2_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	61b9      	str	r1, [r7, #24]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	d011      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d42:	3308      	adds	r3, #8
 8006d44:	2102      	movs	r1, #2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fa0a 	bl	8008160 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6139      	str	r1, [r7, #16]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	d011      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	3328      	adds	r3, #40	@ 0x28
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 fa9c 	bl	80082c4 <RCCEx_PLL3_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	2100      	movs	r1, #0
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	f003 0310 	and.w	r3, r3, #16
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006db8:	460b      	mov	r3, r1
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	d011      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc2:	3328      	adds	r3, #40	@ 0x28
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fa7c 	bl	80082c4 <RCCEx_PLL3_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	2100      	movs	r1, #0
 8006dec:	6039      	str	r1, [r7, #0]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	d011      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	3328      	adds	r3, #40	@ 0x28
 8006e04:	2102      	movs	r1, #2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fa5c 	bl	80082c4 <RCCEx_PLL3_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006e22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006e36:	46bd      	mov	sp, r7
 8006e38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e3c:	58024400 	.word	0x58024400

08006e40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b090      	sub	sp, #64	@ 0x40
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006e52:	430b      	orrs	r3, r1
 8006e54:	f040 8094 	bne.w	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006e58:	4b9e      	ldr	r3, [pc, #632]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	f200 8087 	bhi.w	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006e85 	.word	0x08006e85
 8006e74:	08006ead 	.word	0x08006ead
 8006e78:	08006ed5 	.word	0x08006ed5
 8006e7c:	08006f71 	.word	0x08006f71
 8006e80:	08006efd 	.word	0x08006efd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e84:	4b93      	ldr	r3, [pc, #588]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e90:	d108      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 f810 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea0:	f000 bd45 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea8:	f000 bd41 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eac:	4b89      	ldr	r3, [pc, #548]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eb8:	d108      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eba:	f107 0318 	add.w	r3, r7, #24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fd54 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec8:	f000 bd31 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed0:	f000 bd2d 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ed4:	4b7f      	ldr	r3, [pc, #508]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee0:	d108      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ee2:	f107 030c 	add.w	r3, r7, #12
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fe94 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef0:	f000 bd1d 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef8:	f000 bd19 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006efc:	4b75      	ldr	r3, [pc, #468]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f06:	4b73      	ldr	r3, [pc, #460]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d10c      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f18:	4b6e      	ldr	r3, [pc, #440]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	08db      	lsrs	r3, r3, #3
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	4a6d      	ldr	r2, [pc, #436]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f2a:	e01f      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f2c:	4b69      	ldr	r3, [pc, #420]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f38:	d106      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f40:	d102      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f42:	4b66      	ldr	r3, [pc, #408]	@ (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f46:	e011      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f48:	4b62      	ldr	r3, [pc, #392]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f54:	d106      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f5c:	d102      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f5e:	4b60      	ldr	r3, [pc, #384]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f62:	e003      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f68:	f000 bce1 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f6c:	f000 bcdf 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f70:	4b5c      	ldr	r3, [pc, #368]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f74:	f000 bcdb 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f7c:	f000 bcd7 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f84:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	f040 80ad 	bne.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006f8e:	4b51      	ldr	r3, [pc, #324]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f92:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006f96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f9e:	d056      	beq.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fa6:	f200 8090 	bhi.w	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fac:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fae:	f000 8088 	beq.w	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fb6:	f200 8088 	bhi.w	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbc:	2b80      	cmp	r3, #128	@ 0x80
 8006fbe:	d032      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	2b80      	cmp	r3, #128	@ 0x80
 8006fc4:	f200 8081 	bhi.w	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	2b40      	cmp	r3, #64	@ 0x40
 8006fd2:	d014      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006fd4:	e079      	b.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fe2:	d108      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 ff67 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff2:	f000 bc9c 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ffa:	f000 bc98 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ffe:	4b35      	ldr	r3, [pc, #212]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800700a:	d108      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800700c:	f107 0318 	add.w	r3, r7, #24
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fcab 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800701a:	f000 bc88 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007022:	f000 bc84 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007026:	4b2b      	ldr	r3, [pc, #172]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800702e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007032:	d108      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007034:	f107 030c 	add.w	r3, r7, #12
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fdeb 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007042:	f000 bc74 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800704a:	f000 bc70 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800704e:	4b21      	ldr	r3, [pc, #132]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007052:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007058:	4b1e      	ldr	r3, [pc, #120]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b04      	cmp	r3, #4
 8007062:	d10c      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007066:	2b00      	cmp	r3, #0
 8007068:	d109      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800706a:	4b1a      	ldr	r3, [pc, #104]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	08db      	lsrs	r3, r3, #3
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	4a18      	ldr	r2, [pc, #96]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007076:	fa22 f303 	lsr.w	r3, r2, r3
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800707c:	e01f      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800707e:	4b15      	ldr	r3, [pc, #84]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800708a:	d106      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800708c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007092:	d102      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007094:	4b11      	ldr	r3, [pc, #68]	@ (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007098:	e011      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800709a:	4b0e      	ldr	r3, [pc, #56]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070a6:	d106      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80070a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ae:	d102      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070b0:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b4:	e003      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80070ba:	f000 bc38 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070be:	f000 bc36 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070c2:	4b08      	ldr	r3, [pc, #32]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c6:	f000 bc32 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ce:	f000 bc2e 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
 80070d8:	03d09000 	.word	0x03d09000
 80070dc:	003d0900 	.word	0x003d0900
 80070e0:	00f42400 	.word	0x00f42400
 80070e4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80070e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80070f0:	430b      	orrs	r3, r1
 80070f2:	f040 809c 	bne.w	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80070f6:	4b9e      	ldr	r3, [pc, #632]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80070fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007106:	d054      	beq.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800710e:	f200 808b 	bhi.w	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007118:	f000 8083 	beq.w	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007122:	f200 8081 	bhi.w	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800712c:	d02f      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007134:	d878      	bhi.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007142:	d012      	beq.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007144:	e070      	b.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007146:	4b8a      	ldr	r3, [pc, #552]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800714e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007152:	d107      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007158:	4618      	mov	r0, r3
 800715a:	f000 feaf 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800715e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007162:	e3e4      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007168:	e3e1      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800716a:	4b81      	ldr	r3, [pc, #516]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007176:	d107      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007178:	f107 0318 	add.w	r3, r7, #24
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fbf5 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007186:	e3d2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800718c:	e3cf      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800718e:	4b78      	ldr	r3, [pc, #480]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719a:	d107      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800719c:	f107 030c 	add.w	r3, r7, #12
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fd37 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071aa:	e3c0      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b0:	e3bd      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071b2:	4b6f      	ldr	r3, [pc, #444]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d10c      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80071c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d109      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071ce:	4b68      	ldr	r3, [pc, #416]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	08db      	lsrs	r3, r3, #3
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	4a66      	ldr	r2, [pc, #408]	@ (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80071da:	fa22 f303 	lsr.w	r3, r2, r3
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071e0:	e01e      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071e2:	4b63      	ldr	r3, [pc, #396]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ee:	d106      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80071f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071f6:	d102      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071f8:	4b5f      	ldr	r3, [pc, #380]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071fc:	e010      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071fe:	4b5c      	ldr	r3, [pc, #368]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800720a:	d106      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800720c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007212:	d102      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007214:	4b59      	ldr	r3, [pc, #356]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007218:	e002      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800721e:	e386      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007220:	e385      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007222:	4b57      	ldr	r3, [pc, #348]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007226:	e382      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800722c:	e37f      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800722e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007232:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007236:	430b      	orrs	r3, r1
 8007238:	f040 80a7 	bne.w	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800723c:	4b4c      	ldr	r3, [pc, #304]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800723e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007240:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007244:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800724c:	d055      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007254:	f200 8096 	bhi.w	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800725e:	f000 8084 	beq.w	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007268:	f200 808c 	bhi.w	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007272:	d030      	beq.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800727a:	f200 8083 	bhi.w	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	2b00      	cmp	r3, #0
 8007282:	d004      	beq.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800728a:	d012      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800728c:	e07a      	b.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800728e:	4b38      	ldr	r3, [pc, #224]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800729a:	d107      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800729c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fe0b 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072aa:	e340      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b0:	e33d      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072be:	d107      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c0:	f107 0318 	add.w	r3, r7, #24
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fb51 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ce:	e32e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d4:	e32b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072d6:	4b26      	ldr	r3, [pc, #152]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e2:	d107      	bne.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072e4:	f107 030c 	add.w	r3, r7, #12
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fc93 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f2:	e31c      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072f8:	e319      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007304:	4b1a      	ldr	r3, [pc, #104]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b04      	cmp	r3, #4
 800730e:	d10c      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007316:	4b16      	ldr	r3, [pc, #88]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	08db      	lsrs	r3, r3, #3
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	4a14      	ldr	r2, [pc, #80]	@ (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007322:	fa22 f303 	lsr.w	r3, r2, r3
 8007326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007328:	e01e      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800732a:	4b11      	ldr	r3, [pc, #68]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007336:	d106      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800733e:	d102      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007340:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007344:	e010      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007346:	4b0a      	ldr	r3, [pc, #40]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800734e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007352:	d106      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800735a:	d102      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800735c:	4b07      	ldr	r3, [pc, #28]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007366:	e2e2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007368:	e2e1      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800736a:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800736c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800736e:	e2de      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007370:	58024400 	.word	0x58024400
 8007374:	03d09000 	.word	0x03d09000
 8007378:	003d0900 	.word	0x003d0900
 800737c:	00f42400 	.word	0x00f42400
 8007380:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007388:	e2d1      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800738a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800738e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007392:	430b      	orrs	r3, r1
 8007394:	f040 809c 	bne.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007398:	4b93      	ldr	r3, [pc, #588]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800739a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800739c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80073a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073a8:	d054      	beq.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80073aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073b0:	f200 808b 	bhi.w	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073ba:	f000 8083 	beq.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073c4:	f200 8081 	bhi.w	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80073c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ce:	d02f      	beq.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80073d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073d6:	d878      	bhi.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d004      	beq.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80073de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e4:	d012      	beq.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80073e6:	e070      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073e8:	4b7f      	ldr	r3, [pc, #508]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073f4:	d107      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fd5e 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007404:	e293      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800740a:	e290      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800740c:	4b76      	ldr	r3, [pc, #472]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007418:	d107      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800741a:	f107 0318 	add.w	r3, r7, #24
 800741e:	4618      	mov	r0, r3
 8007420:	f000 faa4 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007428:	e281      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800742e:	e27e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007430:	4b6d      	ldr	r3, [pc, #436]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800743c:	d107      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800743e:	f107 030c 	add.w	r3, r7, #12
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fbe6 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800744c:	e26f      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007452:	e26c      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007454:	4b64      	ldr	r3, [pc, #400]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800745c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800745e:	4b62      	ldr	r3, [pc, #392]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b04      	cmp	r3, #4
 8007468:	d10c      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800746a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007470:	4b5d      	ldr	r3, [pc, #372]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	08db      	lsrs	r3, r3, #3
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	4a5c      	ldr	r2, [pc, #368]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007482:	e01e      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007484:	4b58      	ldr	r3, [pc, #352]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800748c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007490:	d106      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007498:	d102      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800749a:	4b55      	ldr	r3, [pc, #340]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800749c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800749e:	e010      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074a0:	4b51      	ldr	r3, [pc, #324]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ac:	d106      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80074ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b4:	d102      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074b6:	4b4f      	ldr	r3, [pc, #316]	@ (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80074b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ba:	e002      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80074c0:	e235      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074c2:	e234      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80074c4:	4b4c      	ldr	r3, [pc, #304]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80074c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c8:	e231      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ce:	e22e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80074d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80074d8:	430b      	orrs	r3, r1
 80074da:	f040 808f 	bne.w	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80074de:	4b42      	ldr	r3, [pc, #264]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80074e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80074e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074ee:	d06b      	beq.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80074f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074f6:	d874      	bhi.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074fe:	d056      	beq.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007502:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007506:	d86c      	bhi.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800750e:	d03b      	beq.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007516:	d864      	bhi.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751e:	d021      	beq.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007526:	d85c      	bhi.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800752e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007534:	d004      	beq.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007536:	e054      	b.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007538:	f7fe fa62 	bl	8005a00 <HAL_RCC_GetPCLK1Freq>
 800753c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800753e:	e1f6      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007540:	4b29      	ldr	r3, [pc, #164]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800754c:	d107      	bne.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800754e:	f107 0318 	add.w	r3, r7, #24
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fa0a 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800755c:	e1e7      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007562:	e1e4      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007564:	4b20      	ldr	r3, [pc, #128]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800756c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007570:	d107      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007572:	f107 030c 	add.w	r3, r7, #12
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fb4c 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007580:	e1d5      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007586:	e1d2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007588:	4b17      	ldr	r3, [pc, #92]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b04      	cmp	r3, #4
 8007592:	d109      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007594:	4b14      	ldr	r3, [pc, #80]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	08db      	lsrs	r3, r3, #3
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	4a13      	ldr	r2, [pc, #76]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
 80075a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075a6:	e1c2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ac:	e1bf      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075ba:	d102      	bne.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80075bc:	4b0c      	ldr	r3, [pc, #48]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c0:	e1b5      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c6:	e1b2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075c8:	4b07      	ldr	r3, [pc, #28]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075d4:	d102      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80075d6:	4b07      	ldr	r3, [pc, #28]	@ (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075da:	e1a8      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e0:	e1a5      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e6:	e1a2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075e8:	58024400 	.word	0x58024400
 80075ec:	03d09000 	.word	0x03d09000
 80075f0:	003d0900 	.word	0x003d0900
 80075f4:	00f42400 	.word	0x00f42400
 80075f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80075fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007600:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007604:	430b      	orrs	r3, r1
 8007606:	d173      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007608:	4b9c      	ldr	r3, [pc, #624]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800760a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007610:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007618:	d02f      	beq.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800761a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007620:	d863      	bhi.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800762e:	d012      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007630:	e05b      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007632:	4b92      	ldr	r3, [pc, #584]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800763a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800763e:	d107      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007640:	f107 0318 	add.w	r3, r7, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f000 f991 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800764e:	e16e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007654:	e16b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007656:	4b89      	ldr	r3, [pc, #548]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800765e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007662:	d107      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007664:	f107 030c 	add.w	r3, r7, #12
 8007668:	4618      	mov	r0, r3
 800766a:	f000 fad3 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007672:	e15c      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007678:	e159      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800767a:	4b80      	ldr	r3, [pc, #512]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800767c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800767e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007684:	4b7d      	ldr	r3, [pc, #500]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b04      	cmp	r3, #4
 800768e:	d10c      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007696:	4b79      	ldr	r3, [pc, #484]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	4a77      	ldr	r2, [pc, #476]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80076a2:	fa22 f303 	lsr.w	r3, r2, r3
 80076a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076a8:	e01e      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076aa:	4b74      	ldr	r3, [pc, #464]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b6:	d106      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80076b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076be:	d102      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076c0:	4b70      	ldr	r3, [pc, #448]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80076c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076c4:	e010      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076c6:	4b6d      	ldr	r3, [pc, #436]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d2:	d106      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80076d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076da:	d102      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076e0:	e002      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076e6:	e122      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076e8:	e121      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ee:	e11e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80076f8:	430b      	orrs	r3, r1
 80076fa:	d133      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80076fc:	4b5f      	ldr	r3, [pc, #380]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007704:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800770c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007712:	d012      	beq.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007714:	e023      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007716:	4b59      	ldr	r3, [pc, #356]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800771e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007722:	d107      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fbc7 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800772e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007732:	e0fc      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007738:	e0f9      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800773a:	4b50      	ldr	r3, [pc, #320]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007746:	d107      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007748:	f107 0318 	add.w	r3, r7, #24
 800774c:	4618      	mov	r0, r3
 800774e:	f000 f90d 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007756:	e0ea      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775c:	e0e7      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007762:	e0e4      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007768:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800776c:	430b      	orrs	r3, r1
 800776e:	f040 808d 	bne.w	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007772:	4b42      	ldr	r3, [pc, #264]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007776:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800777a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007782:	d06b      	beq.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800778a:	d874      	bhi.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800778c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007792:	d056      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779a:	d86c      	bhi.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077a2:	d03b      	beq.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077aa:	d864      	bhi.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80077ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077b2:	d021      	beq.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ba:	d85c      	bhi.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80077bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80077c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077c8:	d004      	beq.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80077ca:	e054      	b.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80077cc:	f000 f8b8 	bl	8007940 <HAL_RCCEx_GetD3PCLK1Freq>
 80077d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077d2:	e0ac      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077d4:	4b29      	ldr	r3, [pc, #164]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077e0:	d107      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077e2:	f107 0318 	add.w	r3, r7, #24
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f8c0 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077f0:	e09d      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f6:	e09a      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077f8:	4b20      	ldr	r3, [pc, #128]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007804:	d107      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007806:	f107 030c 	add.w	r3, r7, #12
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fa02 	bl	8007c14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007814:	e08b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781a:	e088      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800781c:	4b17      	ldr	r3, [pc, #92]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b04      	cmp	r3, #4
 8007826:	d109      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007828:	4b14      	ldr	r3, [pc, #80]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	08db      	lsrs	r3, r3, #3
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	4a13      	ldr	r2, [pc, #76]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007834:	fa22 f303 	lsr.w	r3, r2, r3
 8007838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800783a:	e078      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007840:	e075      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007842:	4b0e      	ldr	r3, [pc, #56]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800784e:	d102      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007850:	4b0c      	ldr	r3, [pc, #48]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007854:	e06b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785a:	e068      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800785c:	4b07      	ldr	r3, [pc, #28]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007868:	d102      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800786a:	4b07      	ldr	r3, [pc, #28]	@ (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800786c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800786e:	e05e      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007874:	e05b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800787a:	e058      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800787c:	58024400 	.word	0x58024400
 8007880:	03d09000 	.word	0x03d09000
 8007884:	003d0900 	.word	0x003d0900
 8007888:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800788c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007890:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007894:	430b      	orrs	r3, r1
 8007896:	d148      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007898:	4b27      	ldr	r3, [pc, #156]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800789a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a8:	d02a      	beq.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078b0:	d838      	bhi.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80078b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80078b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078be:	d00d      	beq.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80078c0:	e030      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078ce:	d102      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80078d0:	4b1a      	ldr	r3, [pc, #104]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80078d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078d4:	e02b      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078da:	e028      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078dc:	4b16      	ldr	r3, [pc, #88]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078e8:	d107      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fae4 	bl	8007ebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078f8:	e019      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078fe:	e016      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007900:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800790c:	d107      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790e:	f107 0318 	add.w	r3, r7, #24
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f82a 	bl	800796c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800791c:	e007      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007922:	e004      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007928:	e001      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800792e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007930:	4618      	mov	r0, r3
 8007932:	3740      	adds	r7, #64	@ 0x40
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	58024400 	.word	0x58024400
 800793c:	00f42400 	.word	0x00f42400

08007940 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007944:	f7fe f82c 	bl	80059a0 <HAL_RCC_GetHCLKFreq>
 8007948:	4602      	mov	r2, r0
 800794a:	4b06      	ldr	r3, [pc, #24]	@ (8007964 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	091b      	lsrs	r3, r3, #4
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	4904      	ldr	r1, [pc, #16]	@ (8007968 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007956:	5ccb      	ldrb	r3, [r1, r3]
 8007958:	f003 031f 	and.w	r3, r3, #31
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007960:	4618      	mov	r0, r3
 8007962:	bd80      	pop	{r7, pc}
 8007964:	58024400 	.word	0x58024400
 8007968:	0800b77c 	.word	0x0800b77c

0800796c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800796c:	b480      	push	{r7}
 800796e:	b089      	sub	sp, #36	@ 0x24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007974:	4ba1      	ldr	r3, [pc, #644]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	f003 0303 	and.w	r3, r3, #3
 800797c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800797e:	4b9f      	ldr	r3, [pc, #636]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007982:	0b1b      	lsrs	r3, r3, #12
 8007984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007988:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800798a:	4b9c      	ldr	r3, [pc, #624]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	091b      	lsrs	r3, r3, #4
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007996:	4b99      	ldr	r3, [pc, #612]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799a:	08db      	lsrs	r3, r3, #3
 800799c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	fb02 f303 	mul.w	r3, r2, r3
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 8111 	beq.w	8007bdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	f000 8083 	beq.w	8007ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	f200 80a1 	bhi.w	8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d056      	beq.n	8007a84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80079d6:	e099      	b.n	8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d8:	4b88      	ldr	r3, [pc, #544]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d02d      	beq.n	8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079e4:	4b85      	ldr	r3, [pc, #532]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	08db      	lsrs	r3, r3, #3
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	4a84      	ldr	r2, [pc, #528]	@ (8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079f0:	fa22 f303 	lsr.w	r3, r2, r3
 80079f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0e:	4b7b      	ldr	r3, [pc, #492]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a3e:	e087      	b.n	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a52:	4b6a      	ldr	r3, [pc, #424]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a82:	e065      	b.n	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a96:	4b59      	ldr	r3, [pc, #356]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aaa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ac6:	e043      	b.n	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ada:	4b48      	ldr	r3, [pc, #288]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b0a:	e021      	b.n	8007b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1e:	4b37      	ldr	r3, [pc, #220]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b50:	4b2a      	ldr	r3, [pc, #168]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b54:	0a5b      	lsrs	r3, r3, #9
 8007b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b76:	ee17 2a90 	vmov	r2, s15
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b82:	0c1b      	lsrs	r3, r3, #16
 8007b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b88:	ee07 3a90 	vmov	s15, r3
 8007b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ba4:	ee17 2a90 	vmov	r2, s15
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007bac:	4b13      	ldr	r3, [pc, #76]	@ (8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb0:	0e1b      	lsrs	r3, r3, #24
 8007bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bd2:	ee17 2a90 	vmov	r2, s15
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007bda:	e008      	b.n	8007bee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	609a      	str	r2, [r3, #8]
}
 8007bee:	bf00      	nop
 8007bf0:	3724      	adds	r7, #36	@ 0x24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	58024400 	.word	0x58024400
 8007c00:	03d09000 	.word	0x03d09000
 8007c04:	46000000 	.word	0x46000000
 8007c08:	4c742400 	.word	0x4c742400
 8007c0c:	4a742400 	.word	0x4a742400
 8007c10:	4b742400 	.word	0x4b742400

08007c14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b089      	sub	sp, #36	@ 0x24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c1c:	4ba1      	ldr	r3, [pc, #644]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c26:	4b9f      	ldr	r3, [pc, #636]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	0d1b      	lsrs	r3, r3, #20
 8007c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c32:	4b9c      	ldr	r3, [pc, #624]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c3e:	4b99      	ldr	r3, [pc, #612]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8111 	beq.w	8007e84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	f000 8083 	beq.w	8007d70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	f200 80a1 	bhi.w	8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d056      	beq.n	8007d2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c7e:	e099      	b.n	8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c80:	4b88      	ldr	r3, [pc, #544]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0320 	and.w	r3, r3, #32
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d02d      	beq.n	8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c8c:	4b85      	ldr	r3, [pc, #532]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	08db      	lsrs	r3, r3, #3
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	4a84      	ldr	r2, [pc, #528]	@ (8007ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c98:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	ee07 3a90 	vmov	s15, r3
 8007ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ce6:	e087      	b.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d2a:	e065      	b.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3e:	4b59      	ldr	r3, [pc, #356]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d6e:	e043      	b.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d82:	4b48      	ldr	r3, [pc, #288]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007db2:	e021      	b.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc6:	4b37      	ldr	r3, [pc, #220]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007df6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007df8:	4b2a      	ldr	r3, [pc, #168]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfc:	0a5b      	lsrs	r3, r3, #9
 8007dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e1e:	ee17 2a90 	vmov	r2, s15
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e26:	4b1f      	ldr	r3, [pc, #124]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2a:	0c1b      	lsrs	r3, r3, #16
 8007e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e30:	ee07 3a90 	vmov	s15, r3
 8007e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4c:	ee17 2a90 	vmov	r2, s15
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e54:	4b13      	ldr	r3, [pc, #76]	@ (8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	0e1b      	lsrs	r3, r3, #24
 8007e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e7a:	ee17 2a90 	vmov	r2, s15
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e82:	e008      	b.n	8007e96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	609a      	str	r2, [r3, #8]
}
 8007e96:	bf00      	nop
 8007e98:	3724      	adds	r7, #36	@ 0x24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	58024400 	.word	0x58024400
 8007ea8:	03d09000 	.word	0x03d09000
 8007eac:	46000000 	.word	0x46000000
 8007eb0:	4c742400 	.word	0x4c742400
 8007eb4:	4a742400 	.word	0x4a742400
 8007eb8:	4b742400 	.word	0x4b742400

08007ebc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b089      	sub	sp, #36	@ 0x24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ec4:	4ba0      	ldr	r3, [pc, #640]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	f003 0303 	and.w	r3, r3, #3
 8007ecc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007ece:	4b9e      	ldr	r3, [pc, #632]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed2:	091b      	lsrs	r3, r3, #4
 8007ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007eda:	4b9b      	ldr	r3, [pc, #620]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ee4:	4b98      	ldr	r3, [pc, #608]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	fb02 f303 	mul.w	r3, r2, r3
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8111 	beq.w	800812a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	f000 8083 	beq.w	8008016 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	f200 80a1 	bhi.w	800805a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d056      	beq.n	8007fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007f24:	e099      	b.n	800805a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f26:	4b88      	ldr	r3, [pc, #544]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0320 	and.w	r3, r3, #32
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d02d      	beq.n	8007f8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f32:	4b85      	ldr	r3, [pc, #532]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	08db      	lsrs	r3, r3, #3
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	4a83      	ldr	r2, [pc, #524]	@ (800814c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5c:	4b7a      	ldr	r3, [pc, #488]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f64:	ee07 3a90 	vmov	s15, r3
 8007f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f70:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f8c:	e087      	b.n	800809e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f98:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008154 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa0:	4b69      	ldr	r3, [pc, #420]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa8:	ee07 3a90 	vmov	s15, r3
 8007fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd0:	e065      	b.n	800809e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	ee07 3a90 	vmov	s15, r3
 8007fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fdc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008158 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe4:	4b58      	ldr	r3, [pc, #352]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fec:	ee07 3a90 	vmov	s15, r3
 8007ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008004:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008014:	e043      	b.n	800809e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	ee07 3a90 	vmov	s15, r3
 800801c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008020:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800815c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008028:	4b47      	ldr	r3, [pc, #284]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800802a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008030:	ee07 3a90 	vmov	s15, r3
 8008034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008038:	ed97 6a03 	vldr	s12, [r7, #12]
 800803c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800804c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008058:	e021      	b.n	800809e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	ee07 3a90 	vmov	s15, r3
 8008060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008064:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008154 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806c:	4b36      	ldr	r3, [pc, #216]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800806e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008074:	ee07 3a90 	vmov	s15, r3
 8008078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008080:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800809c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800809e:	4b2a      	ldr	r3, [pc, #168]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a2:	0a5b      	lsrs	r3, r3, #9
 80080a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080a8:	ee07 3a90 	vmov	s15, r3
 80080ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c4:	ee17 2a90 	vmov	r2, s15
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80080cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d0:	0c1b      	lsrs	r3, r3, #16
 80080d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f2:	ee17 2a90 	vmov	r2, s15
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80080fa:	4b13      	ldr	r3, [pc, #76]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fe:	0e1b      	lsrs	r3, r3, #24
 8008100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008104:	ee07 3a90 	vmov	s15, r3
 8008108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008110:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008114:	edd7 6a07 	vldr	s13, [r7, #28]
 8008118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800811c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008120:	ee17 2a90 	vmov	r2, s15
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008128:	e008      	b.n	800813c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	609a      	str	r2, [r3, #8]
}
 800813c:	bf00      	nop
 800813e:	3724      	adds	r7, #36	@ 0x24
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	58024400 	.word	0x58024400
 800814c:	03d09000 	.word	0x03d09000
 8008150:	46000000 	.word	0x46000000
 8008154:	4c742400 	.word	0x4c742400
 8008158:	4a742400 	.word	0x4a742400
 800815c:	4b742400 	.word	0x4b742400

08008160 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800816e:	4b53      	ldr	r3, [pc, #332]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	2b03      	cmp	r3, #3
 8008178:	d101      	bne.n	800817e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e099      	b.n	80082b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800817e:	4b4f      	ldr	r3, [pc, #316]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a4e      	ldr	r2, [pc, #312]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008184:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818a:	f7fa f905 	bl	8002398 <HAL_GetTick>
 800818e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008190:	e008      	b.n	80081a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008192:	f7fa f901 	bl	8002398 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e086      	b.n	80082b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081a4:	4b45      	ldr	r3, [pc, #276]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f0      	bne.n	8008192 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081b0:	4b42      	ldr	r3, [pc, #264]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	031b      	lsls	r3, r3, #12
 80081be:	493f      	ldr	r1, [pc, #252]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	025b      	lsls	r3, r3, #9
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	3b01      	subs	r3, #1
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	061b      	lsls	r3, r3, #24
 80081f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081f4:	4931      	ldr	r1, [pc, #196]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081fa:	4b30      	ldr	r3, [pc, #192]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	492d      	ldr	r1, [pc, #180]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008208:	4313      	orrs	r3, r2
 800820a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800820c:	4b2b      	ldr	r3, [pc, #172]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800820e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008210:	f023 0220 	bic.w	r2, r3, #32
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	4928      	ldr	r1, [pc, #160]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800821e:	4b27      	ldr	r3, [pc, #156]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008222:	4a26      	ldr	r2, [pc, #152]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008224:	f023 0310 	bic.w	r3, r3, #16
 8008228:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800822a:	4b24      	ldr	r3, [pc, #144]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800822c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800822e:	4b24      	ldr	r3, [pc, #144]	@ (80082c0 <RCCEx_PLL2_Config+0x160>)
 8008230:	4013      	ands	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	69d2      	ldr	r2, [r2, #28]
 8008236:	00d2      	lsls	r2, r2, #3
 8008238:	4920      	ldr	r1, [pc, #128]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800823a:	4313      	orrs	r3, r2
 800823c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800823e:	4b1f      	ldr	r3, [pc, #124]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008242:	4a1e      	ldr	r2, [pc, #120]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008244:	f043 0310 	orr.w	r3, r3, #16
 8008248:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008250:	4b1a      	ldr	r3, [pc, #104]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008254:	4a19      	ldr	r2, [pc, #100]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800825a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800825c:	e00f      	b.n	800827e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d106      	bne.n	8008272 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008264:	4b15      	ldr	r3, [pc, #84]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008268:	4a14      	ldr	r2, [pc, #80]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 800826a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800826e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008270:	e005      	b.n	800827e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008272:	4b12      	ldr	r3, [pc, #72]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	4a11      	ldr	r2, [pc, #68]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008278:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800827c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800827e:	4b0f      	ldr	r3, [pc, #60]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a0e      	ldr	r2, [pc, #56]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 8008284:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800828a:	f7fa f885 	bl	8002398 <HAL_GetTick>
 800828e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008290:	e008      	b.n	80082a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008292:	f7fa f881 	bl	8002398 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b02      	cmp	r3, #2
 800829e:	d901      	bls.n	80082a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e006      	b.n	80082b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082a4:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <RCCEx_PLL2_Config+0x15c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0f0      	beq.n	8008292 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
 80082c0:	ffff0007 	.word	0xffff0007

080082c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082d2:	4b53      	ldr	r3, [pc, #332]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80082d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d101      	bne.n	80082e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e099      	b.n	8008416 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082e2:	4b4f      	ldr	r3, [pc, #316]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ee:	f7fa f853 	bl	8002398 <HAL_GetTick>
 80082f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082f4:	e008      	b.n	8008308 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082f6:	f7fa f84f 	bl	8002398 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d901      	bls.n	8008308 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e086      	b.n	8008416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008308:	4b45      	ldr	r3, [pc, #276]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1f0      	bne.n	80082f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008314:	4b42      	ldr	r3, [pc, #264]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008318:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	051b      	lsls	r3, r3, #20
 8008322:	493f      	ldr	r1, [pc, #252]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008324:	4313      	orrs	r3, r2
 8008326:	628b      	str	r3, [r1, #40]	@ 0x28
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	3b01      	subs	r3, #1
 8008338:	025b      	lsls	r3, r3, #9
 800833a:	b29b      	uxth	r3, r3
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	3b01      	subs	r3, #1
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800834a:	431a      	orrs	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	3b01      	subs	r3, #1
 8008352:	061b      	lsls	r3, r3, #24
 8008354:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008358:	4931      	ldr	r1, [pc, #196]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800835a:	4313      	orrs	r3, r2
 800835c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800835e:	4b30      	ldr	r3, [pc, #192]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	492d      	ldr	r1, [pc, #180]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800836c:	4313      	orrs	r3, r2
 800836e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008370:	4b2b      	ldr	r3, [pc, #172]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	4928      	ldr	r1, [pc, #160]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008382:	4b27      	ldr	r3, [pc, #156]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008386:	4a26      	ldr	r2, [pc, #152]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800838c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800838e:	4b24      	ldr	r3, [pc, #144]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 8008390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008392:	4b24      	ldr	r3, [pc, #144]	@ (8008424 <RCCEx_PLL3_Config+0x160>)
 8008394:	4013      	ands	r3, r2
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	69d2      	ldr	r2, [r2, #28]
 800839a:	00d2      	lsls	r2, r2, #3
 800839c:	4920      	ldr	r1, [pc, #128]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	4a19      	ldr	r2, [pc, #100]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80083be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083c0:	e00f      	b.n	80083e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d106      	bne.n	80083d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083c8:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083cc:	4a14      	ldr	r2, [pc, #80]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083d4:	e005      	b.n	80083e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083d6:	4b12      	ldr	r3, [pc, #72]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083da:	4a11      	ldr	r2, [pc, #68]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a0e      	ldr	r2, [pc, #56]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 80083e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ee:	f7f9 ffd3 	bl	8002398 <HAL_GetTick>
 80083f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083f4:	e008      	b.n	8008408 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083f6:	f7f9 ffcf 	bl	8002398 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e006      	b.n	8008416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008408:	4b05      	ldr	r3, [pc, #20]	@ (8008420 <RCCEx_PLL3_Config+0x15c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	58024400 	.word	0x58024400
 8008424:	ffff0007 	.word	0xffff0007

08008428 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e10f      	b.n	800865a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a87      	ldr	r2, [pc, #540]	@ (8008664 <HAL_SPI_Init+0x23c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00f      	beq.n	800846a <HAL_SPI_Init+0x42>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a86      	ldr	r2, [pc, #536]	@ (8008668 <HAL_SPI_Init+0x240>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00a      	beq.n	800846a <HAL_SPI_Init+0x42>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a84      	ldr	r2, [pc, #528]	@ (800866c <HAL_SPI_Init+0x244>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d005      	beq.n	800846a <HAL_SPI_Init+0x42>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	2b0f      	cmp	r3, #15
 8008464:	d901      	bls.n	800846a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e0f7      	b.n	800865a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 fb82 	bl	8009b74 <SPI_GetPacketSize>
 8008470:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a7b      	ldr	r2, [pc, #492]	@ (8008664 <HAL_SPI_Init+0x23c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00c      	beq.n	8008496 <HAL_SPI_Init+0x6e>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a79      	ldr	r2, [pc, #484]	@ (8008668 <HAL_SPI_Init+0x240>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d007      	beq.n	8008496 <HAL_SPI_Init+0x6e>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a78      	ldr	r2, [pc, #480]	@ (800866c <HAL_SPI_Init+0x244>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d002      	beq.n	8008496 <HAL_SPI_Init+0x6e>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b08      	cmp	r3, #8
 8008494:	d811      	bhi.n	80084ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800849a:	4a72      	ldr	r2, [pc, #456]	@ (8008664 <HAL_SPI_Init+0x23c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d009      	beq.n	80084b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a70      	ldr	r2, [pc, #448]	@ (8008668 <HAL_SPI_Init+0x240>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d004      	beq.n	80084b4 <HAL_SPI_Init+0x8c>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a6f      	ldr	r2, [pc, #444]	@ (800866c <HAL_SPI_Init+0x244>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d104      	bne.n	80084be <HAL_SPI_Init+0x96>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b10      	cmp	r3, #16
 80084b8:	d901      	bls.n	80084be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e0cd      	b.n	800865a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7f9 fbce 	bl	8001c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80084fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008504:	d119      	bne.n	800853a <HAL_SPI_Init+0x112>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800850e:	d103      	bne.n	8008518 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008514:	2b00      	cmp	r3, #0
 8008516:	d008      	beq.n	800852a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10c      	bne.n	800853a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008524:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008528:	d107      	bne.n	800853a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008538:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00f      	beq.n	8008566 <HAL_SPI_Init+0x13e>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	2b06      	cmp	r3, #6
 800854c:	d90b      	bls.n	8008566 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	e007      	b.n	8008576 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008574:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	69da      	ldr	r2, [r3, #28]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857e:	431a      	orrs	r2, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008588:	ea42 0103 	orr.w	r1, r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a0:	431a      	orrs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	431a      	orrs	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	431a      	orrs	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	431a      	orrs	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	431a      	orrs	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	431a      	orrs	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	431a      	orrs	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085d6:	ea42 0103 	orr.w	r1, r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d113      	bne.n	8008616 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008600:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008614:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f022 0201 	bic.w	r2, r2, #1
 8008624:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40013000 	.word	0x40013000
 8008668:	40003800 	.word	0x40003800
 800866c:	40003c00 	.word	0x40003c00

08008670 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	4613      	mov	r3, r2
 800867e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3320      	adds	r3, #32
 8008686:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008688:	f7f9 fe86 	bl	8002398 <HAL_GetTick>
 800868c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b01      	cmp	r3, #1
 8008698:	d001      	beq.n	800869e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800869a:	2302      	movs	r3, #2
 800869c:	e1d1      	b.n	8008a42 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <HAL_SPI_Transmit+0x3a>
 80086a4:	88fb      	ldrh	r3, [r7, #6]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e1c9      	b.n	8008a42 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_SPI_Transmit+0x4c>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e1c2      	b.n	8008a42 <HAL_SPI_Transmit+0x3d2>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2203      	movs	r2, #3
 80086c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	88fa      	ldrh	r2, [r7, #6]
 80086de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	88fa      	ldrh	r2, [r7, #6]
 80086e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008714:	d108      	bne.n	8008728 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	e009      	b.n	800873c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800873a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	4b96      	ldr	r3, [pc, #600]	@ (800899c <HAL_SPI_Transmit+0x32c>)
 8008744:	4013      	ands	r3, r2
 8008746:	88f9      	ldrh	r1, [r7, #6]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	6812      	ldr	r2, [r2, #0]
 800874c:	430b      	orrs	r3, r1
 800874e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f042 0201 	orr.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008768:	d107      	bne.n	800877a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008778:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d947      	bls.n	8008812 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008782:	e03f      	b.n	8008804 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b02      	cmp	r3, #2
 8008790:	d114      	bne.n	80087bc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6812      	ldr	r2, [r2, #0]
 800879c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087a2:	1d1a      	adds	r2, r3, #4
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087ba:	e023      	b.n	8008804 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087bc:	f7f9 fdec 	bl	8002398 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d803      	bhi.n	80087d4 <HAL_SPI_Transmit+0x164>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d2:	d102      	bne.n	80087da <HAL_SPI_Transmit+0x16a>
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d114      	bne.n	8008804 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f001 f8fc 	bl	80099d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e11e      	b.n	8008a42 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800880a:	b29b      	uxth	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1b9      	bne.n	8008784 <HAL_SPI_Transmit+0x114>
 8008810:	e0f1      	b.n	80089f6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	2b07      	cmp	r3, #7
 8008818:	f240 80e6 	bls.w	80089e8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800881c:	e05d      	b.n	80088da <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	f003 0302 	and.w	r3, r3, #2
 8008828:	2b02      	cmp	r3, #2
 800882a:	d132      	bne.n	8008892 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b01      	cmp	r3, #1
 8008836:	d918      	bls.n	800886a <HAL_SPI_Transmit+0x1fa>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d014      	beq.n	800886a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008850:	1d1a      	adds	r2, r3, #4
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800885c:	b29b      	uxth	r3, r3
 800885e:	3b02      	subs	r3, #2
 8008860:	b29a      	uxth	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008868:	e037      	b.n	80088da <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800886e:	881a      	ldrh	r2, [r3, #0]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008878:	1c9a      	adds	r2, r3, #2
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008884:	b29b      	uxth	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	b29a      	uxth	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008890:	e023      	b.n	80088da <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008892:	f7f9 fd81 	bl	8002398 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d803      	bhi.n	80088aa <HAL_SPI_Transmit+0x23a>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d102      	bne.n	80088b0 <HAL_SPI_Transmit+0x240>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d114      	bne.n	80088da <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f001 f891 	bl	80099d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e0b3      	b.n	8008a42 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d19b      	bne.n	800881e <HAL_SPI_Transmit+0x1ae>
 80088e6:	e086      	b.n	80089f6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d154      	bne.n	80089a0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d918      	bls.n	8008934 <HAL_SPI_Transmit+0x2c4>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008906:	2b40      	cmp	r3, #64	@ 0x40
 8008908:	d914      	bls.n	8008934 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b04      	subs	r3, #4
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008932:	e059      	b.n	80089e8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800893a:	b29b      	uxth	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	d917      	bls.n	8008970 <HAL_SPI_Transmit+0x300>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d013      	beq.n	8008970 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800894c:	881a      	ldrh	r2, [r3, #0]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008956:	1c9a      	adds	r2, r3, #2
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b02      	subs	r3, #2
 8008966:	b29a      	uxth	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800896e:	e03b      	b.n	80089e8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3320      	adds	r3, #32
 800897a:	7812      	ldrb	r2, [r2, #0]
 800897c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008982:	1c5a      	adds	r2, r3, #1
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800899a:	e025      	b.n	80089e8 <HAL_SPI_Transmit+0x378>
 800899c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089a0:	f7f9 fcfa 	bl	8002398 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d803      	bhi.n	80089b8 <HAL_SPI_Transmit+0x348>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b6:	d102      	bne.n	80089be <HAL_SPI_Transmit+0x34e>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d114      	bne.n	80089e8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f001 f80a 	bl	80099d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e02c      	b.n	8008a42 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f47f af79 	bne.w	80088e8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2200      	movs	r2, #0
 80089fe:	2108      	movs	r1, #8
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f001 f889 	bl	8009b18 <SPI_WaitOnFlagUntilTimeout>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a12:	f043 0220 	orr.w	r2, r3, #32
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 ffdb 	bl	80099d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008a40:	2300      	movs	r3, #0
  }
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop

08008a4c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	603b      	str	r3, [r7, #0]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	3301      	adds	r3, #1
 8008a66:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3330      	adds	r3, #48	@ 0x30
 8008a6e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a70:	f7f9 fc92 	bl	8002398 <HAL_GetTick>
 8008a74:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d001      	beq.n	8008a86 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008a82:	2302      	movs	r3, #2
 8008a84:	e250      	b.n	8008f28 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <HAL_SPI_Receive+0x46>
 8008a8c:	88fb      	ldrh	r3, [r7, #6]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e248      	b.n	8008f28 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_SPI_Receive+0x58>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e241      	b.n	8008f28 <HAL_SPI_Receive+0x4dc>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2204      	movs	r2, #4
 8008ab0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	88fa      	ldrh	r2, [r7, #6]
 8008ac6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	88fa      	ldrh	r2, [r7, #6]
 8008ace:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008afc:	d108      	bne.n	8008b10 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	e009      	b.n	8008b24 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008b22:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	4b95      	ldr	r3, [pc, #596]	@ (8008d80 <HAL_SPI_Receive+0x334>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	88f9      	ldrh	r1, [r7, #6]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	430b      	orrs	r3, r1
 8008b36:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0201 	orr.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b50:	d107      	bne.n	8008b62 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b60:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	2b0f      	cmp	r3, #15
 8008b68:	d96c      	bls.n	8008c44 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008b6a:	e064      	b.n	8008c36 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d114      	bne.n	8008bac <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b8c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b92:	1d1a      	adds	r2, r3, #4
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008baa:	e044      	b.n	8008c36 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	8bfa      	ldrh	r2, [r7, #30]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d919      	bls.n	8008bee <HAL_SPI_Receive+0x1a2>
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d014      	beq.n	8008bee <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bcc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008bce:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd4:	1d1a      	adds	r2, r3, #4
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	3b01      	subs	r3, #1
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bec:	e023      	b.n	8008c36 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bee:	f7f9 fbd3 	bl	8002398 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d803      	bhi.n	8008c06 <HAL_SPI_Receive+0x1ba>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c04:	d102      	bne.n	8008c0c <HAL_SPI_Receive+0x1c0>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d114      	bne.n	8008c36 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 fee3 	bl	80099d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e178      	b.n	8008f28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d194      	bne.n	8008b6c <HAL_SPI_Receive+0x120>
 8008c42:	e15e      	b.n	8008f02 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	2b07      	cmp	r3, #7
 8008c4a:	f240 8153 	bls.w	8008ef4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008c4e:	e08f      	b.n	8008d70 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d114      	bne.n	8008c90 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	8812      	ldrh	r2, [r2, #0]
 8008c6e:	b292      	uxth	r2, r2
 8008c70:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c76:	1c9a      	adds	r2, r3, #2
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c8e:	e06f      	b.n	8008d70 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	8bfa      	ldrh	r2, [r7, #30]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d924      	bls.n	8008ce8 <HAL_SPI_Receive+0x29c>
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01f      	beq.n	8008ce8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	8812      	ldrh	r2, [r2, #0]
 8008cb0:	b292      	uxth	r2, r2
 8008cb2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cb8:	1c9a      	adds	r2, r3, #2
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	8812      	ldrh	r2, [r2, #0]
 8008cc6:	b292      	uxth	r2, r2
 8008cc8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cce:	1c9a      	adds	r2, r3, #2
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b02      	subs	r3, #2
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ce6:	e043      	b.n	8008d70 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d119      	bne.n	8008d28 <HAL_SPI_Receive+0x2dc>
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d014      	beq.n	8008d28 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	8812      	ldrh	r2, [r2, #0]
 8008d06:	b292      	uxth	r2, r2
 8008d08:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0e:	1c9a      	adds	r2, r3, #2
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d26:	e023      	b.n	8008d70 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d28:	f7f9 fb36 	bl	8002398 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d803      	bhi.n	8008d40 <HAL_SPI_Receive+0x2f4>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d102      	bne.n	8008d46 <HAL_SPI_Receive+0x2fa>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d114      	bne.n	8008d70 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fe46 	bl	80099d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e0db      	b.n	8008f28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f47f af69 	bne.w	8008c50 <HAL_SPI_Receive+0x204>
 8008d7e:	e0c0      	b.n	8008f02 <HAL_SPI_Receive+0x4b6>
 8008d80:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d117      	bne.n	8008dca <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008da6:	7812      	ldrb	r2, [r2, #0]
 8008da8:	b2d2      	uxtb	r2, r2
 8008daa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008dc8:	e094      	b.n	8008ef4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	8bfa      	ldrh	r2, [r7, #30]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d946      	bls.n	8008e66 <HAL_SPI_Receive+0x41a>
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d041      	beq.n	8008e66 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dee:	7812      	ldrb	r2, [r2, #0]
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e0a:	7812      	ldrb	r2, [r2, #0]
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e26:	7812      	ldrb	r2, [r2, #0]
 8008e28:	b2d2      	uxtb	r2, r2
 8008e2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e42:	7812      	ldrb	r2, [r2, #0]
 8008e44:	b2d2      	uxtb	r2, r2
 8008e46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b04      	subs	r3, #4
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e64:	e046      	b.n	8008ef4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d81c      	bhi.n	8008eac <HAL_SPI_Receive+0x460>
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d017      	beq.n	8008eac <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e88:	7812      	ldrb	r2, [r2, #0]
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008eaa:	e023      	b.n	8008ef4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eac:	f7f9 fa74 	bl	8002398 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d803      	bhi.n	8008ec4 <HAL_SPI_Receive+0x478>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec2:	d102      	bne.n	8008eca <HAL_SPI_Receive+0x47e>
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d114      	bne.n	8008ef4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fd84 	bl	80099d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ed6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e019      	b.n	8008f28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f47f af41 	bne.w	8008d84 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 fd68 	bl	80099d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008f26:	2300      	movs	r3, #0
  }
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3720      	adds	r7, #32
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08e      	sub	sp, #56	@ 0x38
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3320      	adds	r3, #32
 8008f44:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3330      	adds	r3, #48	@ 0x30
 8008f4c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	3301      	adds	r3, #1
 8008f58:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f5a:	f7f9 fa1d 	bl	8002398 <HAL_GetTick>
 8008f5e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8008f60:	887b      	ldrh	r3, [r7, #2]
 8008f62:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8008f64:	887b      	ldrh	r3, [r7, #2]
 8008f66:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d001      	beq.n	8008f78 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8008f74:	2302      	movs	r3, #2
 8008f76:	e310      	b.n	800959a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <HAL_SPI_TransmitReceive+0x5a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <HAL_SPI_TransmitReceive+0x5a>
 8008f84:	887b      	ldrh	r3, [r7, #2]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e305      	b.n	800959a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_SPI_TransmitReceive+0x6c>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e2fe      	b.n	800959a <HAL_SPI_TransmitReceive+0x66a>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2205      	movs	r2, #5
 8008fa8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	887a      	ldrh	r2, [r7, #2]
 8008fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	887a      	ldrh	r2, [r7, #2]
 8008fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	887a      	ldrh	r2, [r7, #2]
 8008fd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	887a      	ldrh	r2, [r7, #2]
 8008fdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008ffa:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a70      	ldr	r2, [pc, #448]	@ (80091c4 <HAL_SPI_TransmitReceive+0x294>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d009      	beq.n	800901a <HAL_SPI_TransmitReceive+0xea>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a6f      	ldr	r2, [pc, #444]	@ (80091c8 <HAL_SPI_TransmitReceive+0x298>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d004      	beq.n	800901a <HAL_SPI_TransmitReceive+0xea>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a6d      	ldr	r2, [pc, #436]	@ (80091cc <HAL_SPI_TransmitReceive+0x29c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d102      	bne.n	8009020 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800901a:	2310      	movs	r3, #16
 800901c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800901e:	e001      	b.n	8009024 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8009020:	2308      	movs	r3, #8
 8009022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	4b69      	ldr	r3, [pc, #420]	@ (80091d0 <HAL_SPI_TransmitReceive+0x2a0>)
 800902c:	4013      	ands	r3, r2
 800902e:	8879      	ldrh	r1, [r7, #2]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	6812      	ldr	r2, [r2, #0]
 8009034:	430b      	orrs	r3, r1
 8009036:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0201 	orr.w	r2, r2, #1
 8009046:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009050:	d107      	bne.n	8009062 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009060:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	2b0f      	cmp	r3, #15
 8009068:	f240 80a2 	bls.w	80091b0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800906c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906e:	089b      	lsrs	r3, r3, #2
 8009070:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009072:	e094      	b.n	800919e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b02      	cmp	r3, #2
 8009080:	d120      	bne.n	80090c4 <HAL_SPI_TransmitReceive+0x194>
 8009082:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01d      	beq.n	80090c4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009088:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800908a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800908c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009090:	429a      	cmp	r2, r3
 8009092:	d217      	bcs.n	80090c4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6812      	ldr	r2, [r2, #0]
 800909e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	3b01      	subs	r3, #1
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80090c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80090cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d065      	beq.n	800919e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d118      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80090ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090f0:	1d1a      	adds	r2, r3, #4
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800910e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009110:	e045      	b.n	800919e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009112:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009114:	8bfb      	ldrh	r3, [r7, #30]
 8009116:	429a      	cmp	r2, r3
 8009118:	d21d      	bcs.n	8009156 <HAL_SPI_TransmitReceive+0x226>
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d018      	beq.n	8009156 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800912c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800912e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009134:	1d1a      	adds	r2, r3, #4
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009140:	b29b      	uxth	r3, r3
 8009142:	3b01      	subs	r3, #1
 8009144:	b29a      	uxth	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009152:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009154:	e023      	b.n	800919e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009156:	f7f9 f91f 	bl	8002398 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009162:	429a      	cmp	r2, r3
 8009164:	d803      	bhi.n	800916e <HAL_SPI_TransmitReceive+0x23e>
 8009166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916c:	d102      	bne.n	8009174 <HAL_SPI_TransmitReceive+0x244>
 800916e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009170:	2b00      	cmp	r3, #0
 8009172:	d114      	bne.n	800919e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fc2f 	bl	80099d8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009180:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e1fd      	b.n	800959a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800919e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f47f af67 	bne.w	8009074 <HAL_SPI_TransmitReceive+0x144>
 80091a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f47f af63 	bne.w	8009074 <HAL_SPI_TransmitReceive+0x144>
 80091ae:	e1ce      	b.n	800954e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	2b07      	cmp	r3, #7
 80091b6:	f240 81c2 	bls.w	800953e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80091ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091bc:	085b      	lsrs	r3, r3, #1
 80091be:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80091c0:	e0c9      	b.n	8009356 <HAL_SPI_TransmitReceive+0x426>
 80091c2:	bf00      	nop
 80091c4:	40013000 	.word	0x40013000
 80091c8:	40003800 	.word	0x40003800
 80091cc:	40003c00 	.word	0x40003c00
 80091d0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d11f      	bne.n	8009222 <HAL_SPI_TransmitReceive+0x2f2>
 80091e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01c      	beq.n	8009222 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80091e8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80091ea:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80091ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ee:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d216      	bcs.n	8009222 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091f8:	881a      	ldrh	r2, [r3, #0]
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009202:	1c9a      	adds	r2, r3, #2
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800920e:	b29b      	uxth	r3, r3
 8009210:	3b01      	subs	r3, #1
 8009212:	b29a      	uxth	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009220:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800922a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 8092 	beq.w	8009356 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	2b01      	cmp	r3, #1
 800923e:	d118      	bne.n	8009272 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009244:	6a3a      	ldr	r2, [r7, #32]
 8009246:	8812      	ldrh	r2, [r2, #0]
 8009248:	b292      	uxth	r2, r2
 800924a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009250:	1c9a      	adds	r2, r3, #2
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800926e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009270:	e071      	b.n	8009356 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009272:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009274:	8bfb      	ldrh	r3, [r7, #30]
 8009276:	429a      	cmp	r2, r3
 8009278:	d228      	bcs.n	80092cc <HAL_SPI_TransmitReceive+0x39c>
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d023      	beq.n	80092cc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009288:	6a3a      	ldr	r2, [r7, #32]
 800928a:	8812      	ldrh	r2, [r2, #0]
 800928c:	b292      	uxth	r2, r2
 800928e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009294:	1c9a      	adds	r2, r3, #2
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800929e:	6a3a      	ldr	r2, [r7, #32]
 80092a0:	8812      	ldrh	r2, [r2, #0]
 80092a2:	b292      	uxth	r2, r2
 80092a4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092aa:	1c9a      	adds	r2, r3, #2
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b02      	subs	r3, #2
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092c8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80092ca:	e044      	b.n	8009356 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80092cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d11d      	bne.n	800930e <HAL_SPI_TransmitReceive+0x3de>
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d018      	beq.n	800930e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092e0:	6a3a      	ldr	r2, [r7, #32]
 80092e2:	8812      	ldrh	r2, [r2, #0]
 80092e4:	b292      	uxth	r2, r2
 80092e6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092ec:	1c9a      	adds	r2, r3, #2
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800930a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800930c:	e023      	b.n	8009356 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800930e:	f7f9 f843 	bl	8002398 <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800931a:	429a      	cmp	r2, r3
 800931c:	d803      	bhi.n	8009326 <HAL_SPI_TransmitReceive+0x3f6>
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009324:	d102      	bne.n	800932c <HAL_SPI_TransmitReceive+0x3fc>
 8009326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009328:	2b00      	cmp	r3, #0
 800932a:	d114      	bne.n	8009356 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 fb53 	bl	80099d8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009338:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e121      	b.n	800959a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009356:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009358:	2b00      	cmp	r3, #0
 800935a:	f47f af3b 	bne.w	80091d4 <HAL_SPI_TransmitReceive+0x2a4>
 800935e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009360:	2b00      	cmp	r3, #0
 8009362:	f47f af37 	bne.w	80091d4 <HAL_SPI_TransmitReceive+0x2a4>
 8009366:	e0f2      	b.n	800954e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	f003 0302 	and.w	r3, r3, #2
 8009372:	2b02      	cmp	r3, #2
 8009374:	d121      	bne.n	80093ba <HAL_SPI_TransmitReceive+0x48a>
 8009376:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01e      	beq.n	80093ba <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800937c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800937e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009382:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009384:	429a      	cmp	r2, r3
 8009386:	d218      	bcs.n	80093ba <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3320      	adds	r3, #32
 8009392:	7812      	ldrb	r2, [r2, #0]
 8009394:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	3b01      	subs	r3, #1
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80093c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 80ba 	beq.w	800953e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d11b      	bne.n	8009410 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093e4:	7812      	ldrb	r2, [r2, #0]
 80093e6:	b2d2      	uxtb	r2, r2
 80093e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800940c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800940e:	e096      	b.n	800953e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009410:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009412:	8bfb      	ldrh	r3, [r7, #30]
 8009414:	429a      	cmp	r2, r3
 8009416:	d24a      	bcs.n	80094ae <HAL_SPI_TransmitReceive+0x57e>
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d045      	beq.n	80094ae <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800942e:	7812      	ldrb	r2, [r2, #0]
 8009430:	b2d2      	uxtb	r2, r2
 8009432:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800944a:	7812      	ldrb	r2, [r2, #0]
 800944c:	b2d2      	uxtb	r2, r2
 800944e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009466:	7812      	ldrb	r2, [r2, #0]
 8009468:	b2d2      	uxtb	r2, r2
 800946a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	b2d2      	uxtb	r2, r2
 8009486:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009498:	b29b      	uxth	r3, r3
 800949a:	3b04      	subs	r3, #4
 800949c:	b29a      	uxth	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80094ac:	e047      	b.n	800953e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80094ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d820      	bhi.n	80094f6 <HAL_SPI_TransmitReceive+0x5c6>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d01b      	beq.n	80094f6 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ca:	7812      	ldrb	r2, [r2, #0]
 80094cc:	b2d2      	uxtb	r2, r2
 80094ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80094f4:	e023      	b.n	800953e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094f6:	f7f8 ff4f 	bl	8002398 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009502:	429a      	cmp	r2, r3
 8009504:	d803      	bhi.n	800950e <HAL_SPI_TransmitReceive+0x5de>
 8009506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d102      	bne.n	8009514 <HAL_SPI_TransmitReceive+0x5e4>
 800950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009510:	2b00      	cmp	r3, #0
 8009512:	d114      	bne.n	800953e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 fa5f 	bl	80099d8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009520:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e02d      	b.n	800959a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800953e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009540:	2b00      	cmp	r3, #0
 8009542:	f47f af11 	bne.w	8009368 <HAL_SPI_TransmitReceive+0x438>
 8009546:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009548:	2b00      	cmp	r3, #0
 800954a:	f47f af0d 	bne.w	8009368 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009554:	2200      	movs	r2, #0
 8009556:	2108      	movs	r1, #8
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 fadd 	bl	8009b18 <SPI_WaitOnFlagUntilTimeout>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d007      	beq.n	8009574 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800956a:	f043 0220 	orr.w	r2, r3, #32
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 fa2f 	bl	80099d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e000      	b.n	800959a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8009598:	2300      	movs	r3, #0
  }
}
 800959a:	4618      	mov	r0, r3
 800959c:	3730      	adds	r7, #48	@ 0x30
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop

080095a4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08a      	sub	sp, #40	@ 0x28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80095bc:	6a3a      	ldr	r2, [r7, #32]
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	4013      	ands	r3, r2
 80095c2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80095cc:	2300      	movs	r3, #0
 80095ce:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80095d6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3330      	adds	r3, #48	@ 0x30
 80095de:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d010      	beq.n	800960c <HAL_SPI_IRQHandler+0x68>
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	699a      	ldr	r2, [r3, #24]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009602:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f9c3 	bl	8009990 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800960a:	e192      	b.n	8009932 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d113      	bne.n	800963e <HAL_SPI_IRQHandler+0x9a>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f003 0320 	and.w	r3, r3, #32
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10e      	bne.n	800963e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	4798      	blx	r3
    handled = 1UL;
 800963a:	2301      	movs	r3, #1
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10f      	bne.n	8009668 <HAL_SPI_IRQHandler+0xc4>
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00a      	beq.n	8009668 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009658:	2b00      	cmp	r3, #0
 800965a:	d105      	bne.n	8009668 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	4798      	blx	r3
    handled = 1UL;
 8009664:	2301      	movs	r3, #1
 8009666:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	f003 0320 	and.w	r3, r3, #32
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10f      	bne.n	8009692 <HAL_SPI_IRQHandler+0xee>
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00a      	beq.n	8009692 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009682:	2b00      	cmp	r3, #0
 8009684:	d105      	bne.n	8009692 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	4798      	blx	r3
    handled = 1UL;
 800968e:	2301      	movs	r3, #1
 8009690:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009694:	2b00      	cmp	r3, #0
 8009696:	f040 8147 	bne.w	8009928 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	f003 0308 	and.w	r3, r3, #8
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 808b 	beq.w	80097bc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	699a      	ldr	r2, [r3, #24]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f042 0208 	orr.w	r2, r2, #8
 80096b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	699a      	ldr	r2, [r3, #24]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f042 0210 	orr.w	r2, r2, #16
 80096c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	699a      	ldr	r2, [r3, #24]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096d4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	691a      	ldr	r2, [r3, #16]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0208 	bic.w	r2, r2, #8
 80096e4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d13d      	bne.n	8009770 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80096f4:	e036      	b.n	8009764 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	2b0f      	cmp	r3, #15
 80096fc:	d90b      	bls.n	8009716 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009706:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009708:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800970e:	1d1a      	adds	r2, r3, #4
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	665a      	str	r2, [r3, #100]	@ 0x64
 8009714:	e01d      	b.n	8009752 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	2b07      	cmp	r3, #7
 800971c:	d90b      	bls.n	8009736 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	8812      	ldrh	r2, [r2, #0]
 8009726:	b292      	uxth	r2, r2
 8009728:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800972e:	1c9a      	adds	r2, r3, #2
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	665a      	str	r2, [r3, #100]	@ 0x64
 8009734:	e00d      	b.n	8009752 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	b2d2      	uxtb	r2, r2
 8009746:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009758:	b29b      	uxth	r3, r3
 800975a:	3b01      	subs	r3, #1
 800975c:	b29a      	uxth	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800976a:	b29b      	uxth	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1c2      	bne.n	80096f6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f931 	bl	80099d8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f8f7 	bl	800997c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800978e:	e0d0      	b.n	8009932 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009790:	7cfb      	ldrb	r3, [r7, #19]
 8009792:	2b05      	cmp	r3, #5
 8009794:	d103      	bne.n	800979e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f8e6 	bl	8009968 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800979c:	e0c6      	b.n	800992c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800979e:	7cfb      	ldrb	r3, [r7, #19]
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d103      	bne.n	80097ac <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f8d5 	bl	8009954 <HAL_SPI_RxCpltCallback>
    return;
 80097aa:	e0bf      	b.n	800992c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80097ac:	7cfb      	ldrb	r3, [r7, #19]
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	f040 80bc 	bne.w	800992c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f8c3 	bl	8009940 <HAL_SPI_TxCpltCallback>
    return;
 80097ba:	e0b7      	b.n	800992c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 80b5 	beq.w	8009932 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00f      	beq.n	80097f2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097d8:	f043 0204 	orr.w	r2, r3, #4
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	699a      	ldr	r2, [r3, #24]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097f0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00f      	beq.n	800981c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009802:	f043 0201 	orr.w	r2, r3, #1
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	699a      	ldr	r2, [r3, #24]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800981a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00f      	beq.n	8009846 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800982c:	f043 0208 	orr.w	r2, r3, #8
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	699a      	ldr	r2, [r3, #24]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009844:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	f003 0320 	and.w	r3, r3, #32
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00f      	beq.n	8009870 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009856:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	699a      	ldr	r2, [r3, #24]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0220 	orr.w	r2, r2, #32
 800986e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009876:	2b00      	cmp	r3, #0
 8009878:	d05a      	beq.n	8009930 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 0201 	bic.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6919      	ldr	r1, [r3, #16]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	4b28      	ldr	r3, [pc, #160]	@ (8009938 <HAL_SPI_IRQHandler+0x394>)
 8009896:	400b      	ands	r3, r1
 8009898:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80098a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80098a4:	d138      	bne.n	8009918 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80098b4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d013      	beq.n	80098e6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098c2:	4a1e      	ldr	r2, [pc, #120]	@ (800993c <HAL_SPI_IRQHandler+0x398>)
 80098c4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7f9 fa0c 	bl	8002ce8 <HAL_DMA_Abort_IT>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d007      	beq.n	80098e6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d020      	beq.n	8009930 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098f2:	4a12      	ldr	r2, [pc, #72]	@ (800993c <HAL_SPI_IRQHandler+0x398>)
 80098f4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7f9 f9f4 	bl	8002ce8 <HAL_DMA_Abort_IT>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d014      	beq.n	8009930 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800990c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009916:	e00b      	b.n	8009930 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f82b 	bl	800997c <HAL_SPI_ErrorCallback>
    return;
 8009926:	e003      	b.n	8009930 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009928:	bf00      	nop
 800992a:	e002      	b.n	8009932 <HAL_SPI_IRQHandler+0x38e>
    return;
 800992c:	bf00      	nop
 800992e:	e000      	b.n	8009932 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009930:	bf00      	nop
  }
}
 8009932:	3728      	adds	r7, #40	@ 0x28
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	fffffc94 	.word	0xfffffc94
 800993c:	080099a5 	.word	0x080099a5

08009940 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f7ff ffd6 	bl	800997c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099d0:	bf00      	nop
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0208 	orr.w	r2, r2, #8
 80099f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0210 	orr.w	r2, r2, #16
 8009a06:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 0201 	bic.w	r2, r2, #1
 8009a16:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6919      	ldr	r1, [r3, #16]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	4b3c      	ldr	r3, [pc, #240]	@ (8009b14 <SPI_CloseTransfer+0x13c>)
 8009a24:	400b      	ands	r3, r1
 8009a26:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689a      	ldr	r2, [r3, #8]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009a36:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d014      	beq.n	8009a6e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00f      	beq.n	8009a6e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	699a      	ldr	r2, [r3, #24]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0220 	orr.w	r2, r2, #32
 8009a6c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d014      	beq.n	8009aa4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00f      	beq.n	8009aa4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a8a:	f043 0204 	orr.w	r2, r3, #4
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009aa2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00f      	beq.n	8009ace <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ab4:	f043 0201 	orr.w	r2, r3, #1
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	699a      	ldr	r2, [r3, #24]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009acc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00f      	beq.n	8009af8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ade:	f043 0208 	orr.w	r2, r3, #8
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	699a      	ldr	r2, [r3, #24]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009af6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009b08:	bf00      	nop
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	fffffc90 	.word	0xfffffc90

08009b18 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	603b      	str	r3, [r7, #0]
 8009b24:	4613      	mov	r3, r2
 8009b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009b28:	e010      	b.n	8009b4c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b2a:	f7f8 fc35 	bl	8002398 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d803      	bhi.n	8009b42 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b40:	d102      	bne.n	8009b48 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e00f      	b.n	8009b6c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	695a      	ldr	r2, [r3, #20]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4013      	ands	r3, r2
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	bf0c      	ite	eq
 8009b5c:	2301      	moveq	r3, #1
 8009b5e:	2300      	movne	r3, #0
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	461a      	mov	r2, r3
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d0df      	beq.n	8009b2a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b80:	095b      	lsrs	r3, r3, #5
 8009b82:	3301      	adds	r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	3307      	adds	r3, #7
 8009b92:	08db      	lsrs	r3, r3, #3
 8009b94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e049      	b.n	8009c50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d106      	bne.n	8009bd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7f8 f9bd 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3304      	adds	r3, #4
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f000 f99d 	bl	8009f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68da      	ldr	r2, [r3, #12]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 0201 	bic.w	r2, r2, #1
 8009c6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6a1a      	ldr	r2, [r3, #32]
 8009c76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10f      	bne.n	8009ca0 <HAL_TIM_Base_Stop_IT+0x48>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6a1a      	ldr	r2, [r3, #32]
 8009c86:	f240 4344 	movw	r3, #1092	@ 0x444
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d107      	bne.n	8009ca0 <HAL_TIM_Base_Stop_IT+0x48>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f022 0201 	bic.w	r2, r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d020      	beq.n	8009d1a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d01b      	beq.n	8009d1a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f06f 0202 	mvn.w	r2, #2
 8009cea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	f003 0303 	and.w	r3, r3, #3
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f8f3 	bl	8009eec <HAL_TIM_IC_CaptureCallback>
 8009d06:	e005      	b.n	8009d14 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f8e5 	bl	8009ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f8f6 	bl	8009f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d020      	beq.n	8009d66 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d01b      	beq.n	8009d66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f06f 0204 	mvn.w	r2, #4
 8009d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f8cd 	bl	8009eec <HAL_TIM_IC_CaptureCallback>
 8009d52:	e005      	b.n	8009d60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f8bf 	bl	8009ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f8d0 	bl	8009f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f003 0308 	and.w	r3, r3, #8
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d020      	beq.n	8009db2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d01b      	beq.n	8009db2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f06f 0208 	mvn.w	r2, #8
 8009d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2204      	movs	r2, #4
 8009d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	f003 0303 	and.w	r3, r3, #3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f8a7 	bl	8009eec <HAL_TIM_IC_CaptureCallback>
 8009d9e:	e005      	b.n	8009dac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f899 	bl	8009ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f8aa 	bl	8009f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f003 0310 	and.w	r3, r3, #16
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d020      	beq.n	8009dfe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f003 0310 	and.w	r3, r3, #16
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d01b      	beq.n	8009dfe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f06f 0210 	mvn.w	r2, #16
 8009dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2208      	movs	r2, #8
 8009dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d003      	beq.n	8009dec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f881 	bl	8009eec <HAL_TIM_IC_CaptureCallback>
 8009dea:	e005      	b.n	8009df8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f873 	bl	8009ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f884 	bl	8009f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00c      	beq.n	8009e22 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d007      	beq.n	8009e22 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f06f 0201 	mvn.w	r2, #1
 8009e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f851 	bl	8009ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00c      	beq.n	8009e50 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d007      	beq.n	8009e50 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f9aa 	bl	800a1a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00c      	beq.n	8009e74 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d007      	beq.n	8009e74 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f9a2 	bl	800a1b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00c      	beq.n	8009e98 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d007      	beq.n	8009e98 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f83e 	bl	8009f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00c      	beq.n	8009ebc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f003 0320 	and.w	r3, r3, #32
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d007      	beq.n	8009ebc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f06f 0220 	mvn.w	r2, #32
 8009eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f96a 	bl	800a190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ebc:	bf00      	nop
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a46      	ldr	r2, [pc, #280]	@ (800a054 <TIM_Base_SetConfig+0x12c>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d013      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f46:	d00f      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a43      	ldr	r2, [pc, #268]	@ (800a058 <TIM_Base_SetConfig+0x130>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d00b      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a42      	ldr	r2, [pc, #264]	@ (800a05c <TIM_Base_SetConfig+0x134>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d007      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a41      	ldr	r2, [pc, #260]	@ (800a060 <TIM_Base_SetConfig+0x138>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d003      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a40      	ldr	r2, [pc, #256]	@ (800a064 <TIM_Base_SetConfig+0x13c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d108      	bne.n	8009f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a35      	ldr	r2, [pc, #212]	@ (800a054 <TIM_Base_SetConfig+0x12c>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d01f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f88:	d01b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a32      	ldr	r2, [pc, #200]	@ (800a058 <TIM_Base_SetConfig+0x130>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d017      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a31      	ldr	r2, [pc, #196]	@ (800a05c <TIM_Base_SetConfig+0x134>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d013      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a30      	ldr	r2, [pc, #192]	@ (800a060 <TIM_Base_SetConfig+0x138>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a2f      	ldr	r2, [pc, #188]	@ (800a064 <TIM_Base_SetConfig+0x13c>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a2e      	ldr	r2, [pc, #184]	@ (800a068 <TIM_Base_SetConfig+0x140>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d007      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800a06c <TIM_Base_SetConfig+0x144>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d003      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a2c      	ldr	r2, [pc, #176]	@ (800a070 <TIM_Base_SetConfig+0x148>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d108      	bne.n	8009fd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a16      	ldr	r2, [pc, #88]	@ (800a054 <TIM_Base_SetConfig+0x12c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d00f      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a18      	ldr	r2, [pc, #96]	@ (800a064 <TIM_Base_SetConfig+0x13c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00b      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a17      	ldr	r2, [pc, #92]	@ (800a068 <TIM_Base_SetConfig+0x140>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d007      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a16      	ldr	r2, [pc, #88]	@ (800a06c <TIM_Base_SetConfig+0x144>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d003      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a15      	ldr	r2, [pc, #84]	@ (800a070 <TIM_Base_SetConfig+0x148>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d103      	bne.n	800a028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	691a      	ldr	r2, [r3, #16]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b01      	cmp	r3, #1
 800a038:	d105      	bne.n	800a046 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f023 0201 	bic.w	r2, r3, #1
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	611a      	str	r2, [r3, #16]
  }
}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	40010000 	.word	0x40010000
 800a058:	40000400 	.word	0x40000400
 800a05c:	40000800 	.word	0x40000800
 800a060:	40000c00 	.word	0x40000c00
 800a064:	40010400 	.word	0x40010400
 800a068:	40014000 	.word	0x40014000
 800a06c:	40014400 	.word	0x40014400
 800a070:	40014800 	.word	0x40014800

0800a074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a084:	2b01      	cmp	r3, #1
 800a086:	d101      	bne.n	800a08c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a088:	2302      	movs	r3, #2
 800a08a:	e06d      	b.n	800a168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2202      	movs	r2, #2
 800a098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a30      	ldr	r2, [pc, #192]	@ (800a174 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d004      	beq.n	800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a2f      	ldr	r2, [pc, #188]	@ (800a178 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d108      	bne.n	800a0d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a0c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a20      	ldr	r2, [pc, #128]	@ (800a174 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d022      	beq.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0fe:	d01d      	beq.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a1d      	ldr	r2, [pc, #116]	@ (800a17c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d018      	beq.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a1c      	ldr	r2, [pc, #112]	@ (800a180 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d013      	beq.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a1a      	ldr	r2, [pc, #104]	@ (800a184 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d00e      	beq.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a15      	ldr	r2, [pc, #84]	@ (800a178 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d009      	beq.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a16      	ldr	r2, [pc, #88]	@ (800a188 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d004      	beq.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a15      	ldr	r2, [pc, #84]	@ (800a18c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d10c      	bne.n	800a156 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a142:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	40010000 	.word	0x40010000
 800a178:	40010400 	.word	0x40010400
 800a17c:	40000400 	.word	0x40000400
 800a180:	40000800 	.word	0x40000800
 800a184:	40000c00 	.word	0x40000c00
 800a188:	40001800 	.word	0x40001800
 800a18c:	40014000 	.word	0x40014000

0800a190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a1d0:	4904      	ldr	r1, [pc, #16]	@ (800a1e4 <MX_FATFS_Init+0x18>)
 800a1d2:	4805      	ldr	r0, [pc, #20]	@ (800a1e8 <MX_FATFS_Init+0x1c>)
 800a1d4:	f000 fd94 	bl	800ad00 <FATFS_LinkDriver>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	461a      	mov	r2, r3
 800a1dc:	4b03      	ldr	r3, [pc, #12]	@ (800a1ec <MX_FATFS_Init+0x20>)
 800a1de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a1e0:	bf00      	nop
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	2400035c 	.word	0x2400035c
 800a1e8:	24000014 	.word	0x24000014
 800a1ec:	24000358 	.word	0x24000358

0800a1f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a1fa:	79fb      	ldrb	r3, [r7, #7]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 f9eb 	bl	800a5d8 <USER_SPI_initialize>
 800a202:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	4603      	mov	r3, r0
 800a214:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a216:	79fb      	ldrb	r3, [r7, #7]
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 fabd 	bl	800a798 <USER_SPI_status>
 800a21e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	607a      	str	r2, [r7, #4]
 800a232:	603b      	str	r3, [r7, #0]
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a238:	7bf8      	ldrb	r0, [r7, #15]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	f000 fac0 	bl	800a7c4 <USER_SPI_read>
 800a244:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
 800a25a:	4603      	mov	r3, r0
 800a25c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a25e:	7bf8      	ldrb	r0, [r7, #15]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	68b9      	ldr	r1, [r7, #8]
 800a266:	f000 fb13 	bl	800a890 <USER_SPI_write>
 800a26a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	603a      	str	r2, [r7, #0]
 800a27e:	71fb      	strb	r3, [r7, #7]
 800a280:	460b      	mov	r3, r1
 800a282:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a284:	79b9      	ldrb	r1, [r7, #6]
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 fb7c 	bl	800a988 <USER_SPI_ioctl>
 800a290:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0201 	bic.w	r2, r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	071a      	lsls	r2, r3, #28
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f042 0201 	orr.w	r2, r2, #1
 800a2d8:	601a      	str	r2, [r3, #0]
}
 800a2da:	bf00      	nop
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a2f0:	f7f8 f852 	bl	8002398 <HAL_GetTick>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	4a04      	ldr	r2, [pc, #16]	@ (800a308 <SPI_Timer_On+0x20>)
 800a2f8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a2fa:	4a04      	ldr	r2, [pc, #16]	@ (800a30c <SPI_Timer_On+0x24>)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6013      	str	r3, [r2, #0]
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	24000364 	.word	0x24000364
 800a30c:	24000368 	.word	0x24000368

0800a310 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a314:	f7f8 f840 	bl	8002398 <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	4b06      	ldr	r3, [pc, #24]	@ (800a334 <SPI_Timer_Status+0x24>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	1ad2      	subs	r2, r2, r3
 800a320:	4b05      	ldr	r3, [pc, #20]	@ (800a338 <SPI_Timer_Status+0x28>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	bf34      	ite	cc
 800a328:	2301      	movcc	r3, #1
 800a32a:	2300      	movcs	r3, #0
 800a32c:	b2db      	uxtb	r3, r3
}
 800a32e:	4618      	mov	r0, r3
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	24000364 	.word	0x24000364
 800a338:	24000368 	.word	0x24000368

0800a33c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af02      	add	r7, sp, #8
 800a342:	4603      	mov	r3, r0
 800a344:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, HAL_MAX_DELAY);
 800a346:	f107 020f 	add.w	r2, r7, #15
 800a34a:	1df9      	adds	r1, r7, #7
 800a34c:	f04f 33ff 	mov.w	r3, #4294967295
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	2301      	movs	r3, #1
 800a354:	4803      	ldr	r0, [pc, #12]	@ (800a364 <xchg_spi+0x28>)
 800a356:	f7fe fdeb 	bl	8008f30 <HAL_SPI_TransmitReceive>
//	 Clear the DMA transfer complete flag
//    while (__HAL_DMA_GET_FLAG(hspi2.hdmarx, DMA_FLAG_TCIF3_7) == RESET) {
//        // Optionally, add a timeout here
//    }

    return rxDat;
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	2400018c 	.word	0x2400018c

0800a368 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	e00a      	b.n	800a38e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	18d4      	adds	r4, r2, r3
 800a37e:	20ff      	movs	r0, #255	@ 0xff
 800a380:	f7ff ffdc 	bl	800a33c <xchg_spi>
 800a384:	4603      	mov	r3, r0
 800a386:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d3f0      	bcc.n	800a378 <rcvr_spi_multi+0x10>
	}
}
 800a396:	bf00      	nop
 800a398:	bf00      	nop
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd90      	pop	{r4, r7, pc}

0800a3a0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	4803      	ldr	r0, [pc, #12]	@ (800a3c4 <xmit_spi_multi+0x24>)
 800a3b6:	f7fe f95b 	bl	8008670 <HAL_SPI_Transmit>

//	while ((READ_BIT(hspi->Instance->IER, SPI_IT_EOT) == 0)) {}

}
 800a3ba:	bf00      	nop
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	2400018c 	.word	0x2400018c

0800a3c8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800a3d0:	f7f7 ffe2 	bl	8002398 <HAL_GetTick>
 800a3d4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800a3da:	20ff      	movs	r0, #255	@ 0xff
 800a3dc:	f7ff ffae 	bl	800a33c <xchg_spi>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	2bff      	cmp	r3, #255	@ 0xff
 800a3e8:	d007      	beq.n	800a3fa <wait_ready+0x32>
 800a3ea:	f7f7 ffd5 	bl	8002398 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d8ef      	bhi.n	800a3da <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	2bff      	cmp	r3, #255	@ 0xff
 800a3fe:	bf0c      	ite	eq
 800a400:	2301      	moveq	r3, #1
 800a402:	2300      	movne	r3, #0
 800a404:	b2db      	uxtb	r3, r3
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

void despiselect (void)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a414:	2201      	movs	r2, #1
 800a416:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a41a:	4802      	ldr	r0, [pc, #8]	@ (800a424 <despiselect+0x14>)
 800a41c:	f7fa f9c0 	bl	80047a0 <HAL_GPIO_WritePin>
//	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */

}
 800a420:	bf00      	nop
 800a422:	bd80      	pop	{r7, pc}
 800a424:	58020400 	.word	0x58020400

0800a428 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/


int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a42c:	2200      	movs	r2, #0
 800a42e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a432:	4803      	ldr	r0, [pc, #12]	@ (800a440 <spiselect+0x18>)
 800a434:	f7fa f9b4 	bl	80047a0 <HAL_GPIO_WritePin>
//	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
//	if (wait_ready(500)) return 1;	/* Wait for card ready */
//
//	despiselect();
//	return 0;	/* Timeout */
}
 800a438:	bf00      	nop
 800a43a:	4618      	mov	r0, r3
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	58020400 	.word	0x58020400

0800a444 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a44e:	20c8      	movs	r0, #200	@ 0xc8
 800a450:	f7ff ff4a 	bl	800a2e8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a454:	20ff      	movs	r0, #255	@ 0xff
 800a456:	f7ff ff71 	bl	800a33c <xchg_spi>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	2bff      	cmp	r3, #255	@ 0xff
 800a462:	d104      	bne.n	800a46e <rcvr_datablock+0x2a>
 800a464:	f7ff ff54 	bl	800a310 <SPI_Timer_Status>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1f2      	bne.n	800a454 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	2bfe      	cmp	r3, #254	@ 0xfe
 800a472:	d001      	beq.n	800a478 <rcvr_datablock+0x34>
 800a474:	2300      	movs	r3, #0
 800a476:	e00a      	b.n	800a48e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff ff74 	bl	800a368 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a480:	20ff      	movs	r0, #255	@ 0xff
 800a482:	f7ff ff5b 	bl	800a33c <xchg_spi>
 800a486:	20ff      	movs	r0, #255	@ 0xff
 800a488:	f7ff ff58 	bl	800a33c <xchg_spi>

	return 1;						/* Function succeeded */
 800a48c:	2301      	movs	r3, #1
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a4a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a4a6:	f7ff ff8f 	bl	800a3c8 <wait_ready>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <xmit_datablock+0x1e>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	e01e      	b.n	800a4f2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a4b4:	78fb      	ldrb	r3, [r7, #3]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff ff40 	bl	800a33c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a4bc:	78fb      	ldrb	r3, [r7, #3]
 800a4be:	2bfd      	cmp	r3, #253	@ 0xfd
 800a4c0:	d016      	beq.n	800a4f0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a4c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7ff ff6a 	bl	800a3a0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a4cc:	20ff      	movs	r0, #255	@ 0xff
 800a4ce:	f7ff ff35 	bl	800a33c <xchg_spi>
 800a4d2:	20ff      	movs	r0, #255	@ 0xff
 800a4d4:	f7ff ff32 	bl	800a33c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a4d8:	20ff      	movs	r0, #255	@ 0xff
 800a4da:	f7ff ff2f 	bl	800a33c <xchg_spi>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	f003 031f 	and.w	r3, r3, #31
 800a4e8:	2b05      	cmp	r3, #5
 800a4ea:	d001      	beq.n	800a4f0 <xmit_datablock+0x5a>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e000      	b.n	800a4f2 <xmit_datablock+0x5c>
	}
	return 1;
 800a4f0:	2301      	movs	r3, #1
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	4603      	mov	r3, r0
 800a502:	6039      	str	r1, [r7, #0]
 800a504:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	da0e      	bge.n	800a52c <send_cmd+0x32>
		cmd &= 0x7F;
 800a50e:	79fb      	ldrb	r3, [r7, #7]
 800a510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a514:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a516:	2100      	movs	r1, #0
 800a518:	2037      	movs	r0, #55	@ 0x37
 800a51a:	f7ff ffee 	bl	800a4fa <send_cmd>
 800a51e:	4603      	mov	r3, r0
 800a520:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a522:	7bbb      	ldrb	r3, [r7, #14]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d901      	bls.n	800a52c <send_cmd+0x32>
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	e051      	b.n	800a5d0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	2b0c      	cmp	r3, #12
 800a530:	d008      	beq.n	800a544 <send_cmd+0x4a>
		despiselect();
 800a532:	f7ff ff6d 	bl	800a410 <despiselect>
		if (!spiselect()) return 0xFF;
 800a536:	f7ff ff77 	bl	800a428 <spiselect>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <send_cmd+0x4a>
 800a540:	23ff      	movs	r3, #255	@ 0xff
 800a542:	e045      	b.n	800a5d0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fef5 	bl	800a33c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	0e1b      	lsrs	r3, r3, #24
 800a556:	b2db      	uxtb	r3, r3
 800a558:	4618      	mov	r0, r3
 800a55a:	f7ff feef 	bl	800a33c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	0c1b      	lsrs	r3, r3, #16
 800a562:	b2db      	uxtb	r3, r3
 800a564:	4618      	mov	r0, r3
 800a566:	f7ff fee9 	bl	800a33c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff fee3 	bl	800a33c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff fede 	bl	800a33c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a580:	2301      	movs	r3, #1
 800a582:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a584:	79fb      	ldrb	r3, [r7, #7]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <send_cmd+0x94>
 800a58a:	2395      	movs	r3, #149	@ 0x95
 800a58c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	2b08      	cmp	r3, #8
 800a592:	d101      	bne.n	800a598 <send_cmd+0x9e>
 800a594:	2387      	movs	r3, #135	@ 0x87
 800a596:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a598:	7bfb      	ldrb	r3, [r7, #15]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fece 	bl	800a33c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	2b0c      	cmp	r3, #12
 800a5a4:	d102      	bne.n	800a5ac <send_cmd+0xb2>
 800a5a6:	20ff      	movs	r0, #255	@ 0xff
 800a5a8:	f7ff fec8 	bl	800a33c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a5ac:	230a      	movs	r3, #10
 800a5ae:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a5b0:	20ff      	movs	r0, #255	@ 0xff
 800a5b2:	f7ff fec3 	bl	800a33c <xchg_spi>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a5ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	da05      	bge.n	800a5ce <send_cmd+0xd4>
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1f0      	bne.n	800a5b0 <send_cmd+0xb6>

	return res;							/* Return received response */
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a5d8:	b590      	push	{r4, r7, lr}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a5e2:	79fb      	ldrb	r3, [r7, #7]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <USER_SPI_initialize+0x14>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e0cb      	b.n	800a784 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a5ec:	4b67      	ldr	r3, [pc, #412]	@ (800a78c <USER_SPI_initialize+0x1b4>)
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <USER_SPI_initialize+0x2a>
 800a5fa:	4b64      	ldr	r3, [pc, #400]	@ (800a78c <USER_SPI_initialize+0x1b4>)
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	e0c0      	b.n	800a784 <USER_SPI_initialize+0x1ac>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_256);
 800a602:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800a606:	4862      	ldr	r0, [pc, #392]	@ (800a790 <USER_SPI_initialize+0x1b8>)
 800a608:	f7ff fe47 	bl	800a29a <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a60c:	230a      	movs	r3, #10
 800a60e:	73fb      	strb	r3, [r7, #15]
 800a610:	e005      	b.n	800a61e <USER_SPI_initialize+0x46>
 800a612:	20ff      	movs	r0, #255	@ 0xff
 800a614:	f7ff fe92 	bl	800a33c <xchg_spi>
 800a618:	7bfb      	ldrb	r3, [r7, #15]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	73fb      	strb	r3, [r7, #15]
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1f6      	bne.n	800a612 <USER_SPI_initialize+0x3a>

	ty = 0;
 800a624:	2300      	movs	r3, #0
 800a626:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a628:	2100      	movs	r1, #0
 800a62a:	2000      	movs	r0, #0
 800a62c:	f7ff ff65 	bl	800a4fa <send_cmd>
 800a630:	4603      	mov	r3, r0
 800a632:	2b01      	cmp	r3, #1
 800a634:	f040 808b 	bne.w	800a74e <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a638:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a63c:	f7ff fe54 	bl	800a2e8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a640:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800a644:	2008      	movs	r0, #8
 800a646:	f7ff ff58 	bl	800a4fa <send_cmd>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d151      	bne.n	800a6f4 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a650:	2300      	movs	r3, #0
 800a652:	73fb      	strb	r3, [r7, #15]
 800a654:	e00d      	b.n	800a672 <USER_SPI_initialize+0x9a>
 800a656:	7bfc      	ldrb	r4, [r7, #15]
 800a658:	20ff      	movs	r0, #255	@ 0xff
 800a65a:	f7ff fe6f 	bl	800a33c <xchg_spi>
 800a65e:	4603      	mov	r3, r0
 800a660:	461a      	mov	r2, r3
 800a662:	f104 0310 	add.w	r3, r4, #16
 800a666:	443b      	add	r3, r7
 800a668:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
 800a66e:	3301      	adds	r3, #1
 800a670:	73fb      	strb	r3, [r7, #15]
 800a672:	7bfb      	ldrb	r3, [r7, #15]
 800a674:	2b03      	cmp	r3, #3
 800a676:	d9ee      	bls.n	800a656 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a678:	7abb      	ldrb	r3, [r7, #10]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d167      	bne.n	800a74e <USER_SPI_initialize+0x176>
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	2baa      	cmp	r3, #170	@ 0xaa
 800a682:	d164      	bne.n	800a74e <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a684:	bf00      	nop
 800a686:	f7ff fe43 	bl	800a310 <SPI_Timer_Status>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d007      	beq.n	800a6a0 <USER_SPI_initialize+0xc8>
 800a690:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a694:	20a9      	movs	r0, #169	@ 0xa9
 800a696:	f7ff ff30 	bl	800a4fa <send_cmd>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1f2      	bne.n	800a686 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a6a0:	f7ff fe36 	bl	800a310 <SPI_Timer_Status>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d051      	beq.n	800a74e <USER_SPI_initialize+0x176>
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	203a      	movs	r0, #58	@ 0x3a
 800a6ae:	f7ff ff24 	bl	800a4fa <send_cmd>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d14a      	bne.n	800a74e <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]
 800a6bc:	e00d      	b.n	800a6da <USER_SPI_initialize+0x102>
 800a6be:	7bfc      	ldrb	r4, [r7, #15]
 800a6c0:	20ff      	movs	r0, #255	@ 0xff
 800a6c2:	f7ff fe3b 	bl	800a33c <xchg_spi>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	f104 0310 	add.w	r3, r4, #16
 800a6ce:	443b      	add	r3, r7
 800a6d0:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	73fb      	strb	r3, [r7, #15]
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d9ee      	bls.n	800a6be <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a6e0:	7a3b      	ldrb	r3, [r7, #8]
 800a6e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <USER_SPI_initialize+0x116>
 800a6ea:	230c      	movs	r3, #12
 800a6ec:	e000      	b.n	800a6f0 <USER_SPI_initialize+0x118>
 800a6ee:	2304      	movs	r3, #4
 800a6f0:	737b      	strb	r3, [r7, #13]
 800a6f2:	e02c      	b.n	800a74e <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	20a9      	movs	r0, #169	@ 0xa9
 800a6f8:	f7ff feff 	bl	800a4fa <send_cmd>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d804      	bhi.n	800a70c <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a702:	2302      	movs	r3, #2
 800a704:	737b      	strb	r3, [r7, #13]
 800a706:	23a9      	movs	r3, #169	@ 0xa9
 800a708:	73bb      	strb	r3, [r7, #14]
 800a70a:	e003      	b.n	800a714 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a70c:	2301      	movs	r3, #1
 800a70e:	737b      	strb	r3, [r7, #13]
 800a710:	2301      	movs	r3, #1
 800a712:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a714:	bf00      	nop
 800a716:	f7ff fdfb 	bl	800a310 <SPI_Timer_Status>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d007      	beq.n	800a730 <USER_SPI_initialize+0x158>
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	2100      	movs	r1, #0
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff fee8 	bl	800a4fa <send_cmd>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1f2      	bne.n	800a716 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a730:	f7ff fdee 	bl	800a310 <SPI_Timer_Status>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d007      	beq.n	800a74a <USER_SPI_initialize+0x172>
 800a73a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a73e:	2010      	movs	r0, #16
 800a740:	f7ff fedb 	bl	800a4fa <send_cmd>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <USER_SPI_initialize+0x176>
				ty = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a74e:	4a11      	ldr	r2, [pc, #68]	@ (800a794 <USER_SPI_initialize+0x1bc>)
 800a750:	7b7b      	ldrb	r3, [r7, #13]
 800a752:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a754:	f7ff fe5c 	bl	800a410 <despiselect>

	if (ty) {			/* OK */
 800a758:	7b7b      	ldrb	r3, [r7, #13]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00c      	beq.n	800a778 <USER_SPI_initialize+0x1a0>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_2);	/* Set fast clock */
 800a75e:	2100      	movs	r1, #0
 800a760:	480b      	ldr	r0, [pc, #44]	@ (800a790 <USER_SPI_initialize+0x1b8>)
 800a762:	f7ff fd9a 	bl	800a29a <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a766:	4b09      	ldr	r3, [pc, #36]	@ (800a78c <USER_SPI_initialize+0x1b4>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	f023 0301 	bic.w	r3, r3, #1
 800a770:	b2da      	uxtb	r2, r3
 800a772:	4b06      	ldr	r3, [pc, #24]	@ (800a78c <USER_SPI_initialize+0x1b4>)
 800a774:	701a      	strb	r2, [r3, #0]
 800a776:	e002      	b.n	800a77e <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a778:	4b04      	ldr	r3, [pc, #16]	@ (800a78c <USER_SPI_initialize+0x1b4>)
 800a77a:	2201      	movs	r2, #1
 800a77c:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a77e:	4b03      	ldr	r3, [pc, #12]	@ (800a78c <USER_SPI_initialize+0x1b4>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b2db      	uxtb	r3, r3
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd90      	pop	{r4, r7, pc}
 800a78c:	24000028 	.word	0x24000028
 800a790:	2400018c 	.word	0x2400018c
 800a794:	24000360 	.word	0x24000360

0800a798 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <USER_SPI_status+0x14>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e002      	b.n	800a7b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a7ac:	4b04      	ldr	r3, [pc, #16]	@ (800a7c0 <USER_SPI_status+0x28>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	b2db      	uxtb	r3, r3
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	24000028 	.word	0x24000028

0800a7c4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60b9      	str	r1, [r7, #8]
 800a7cc:	607a      	str	r2, [r7, #4]
 800a7ce:	603b      	str	r3, [r7, #0]
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d102      	bne.n	800a7e0 <USER_SPI_read+0x1c>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <USER_SPI_read+0x20>
 800a7e0:	2304      	movs	r3, #4
 800a7e2:	e04d      	b.n	800a880 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a7e4:	4b28      	ldr	r3, [pc, #160]	@ (800a888 <USER_SPI_read+0xc4>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <USER_SPI_read+0x32>
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e044      	b.n	800a880 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a7f6:	4b25      	ldr	r3, [pc, #148]	@ (800a88c <USER_SPI_read+0xc8>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	f003 0308 	and.w	r3, r3, #8
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d102      	bne.n	800a808 <USER_SPI_read+0x44>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	025b      	lsls	r3, r3, #9
 800a806:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d111      	bne.n	800a832 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	2011      	movs	r0, #17
 800a812:	f7ff fe72 	bl	800a4fa <send_cmd>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d129      	bne.n	800a870 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a81c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a820:	68b8      	ldr	r0, [r7, #8]
 800a822:	f7ff fe0f 	bl	800a444 <rcvr_datablock>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d021      	beq.n	800a870 <USER_SPI_read+0xac>
			count = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	e01e      	b.n	800a870 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	2012      	movs	r0, #18
 800a836:	f7ff fe60 	bl	800a4fa <send_cmd>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d117      	bne.n	800a870 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a840:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a844:	68b8      	ldr	r0, [r7, #8]
 800a846:	f7ff fdfd 	bl	800a444 <rcvr_datablock>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00a      	beq.n	800a866 <USER_SPI_read+0xa2>
				buff += 512;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a856:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	603b      	str	r3, [r7, #0]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1ed      	bne.n	800a840 <USER_SPI_read+0x7c>
 800a864:	e000      	b.n	800a868 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a866:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a868:	2100      	movs	r1, #0
 800a86a:	200c      	movs	r0, #12
 800a86c:	f7ff fe45 	bl	800a4fa <send_cmd>
		}
	}
	despiselect();
 800a870:	f7ff fdce 	bl	800a410 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	bf14      	ite	ne
 800a87a:	2301      	movne	r3, #1
 800a87c:	2300      	moveq	r3, #0
 800a87e:	b2db      	uxtb	r3, r3
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	24000028 	.word	0x24000028
 800a88c:	24000360 	.word	0x24000360

0800a890 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	607a      	str	r2, [r7, #4]
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <USER_SPI_write+0x1c>
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <USER_SPI_write+0x20>
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	e063      	b.n	800a978 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a8b0:	4b33      	ldr	r3, [pc, #204]	@ (800a980 <USER_SPI_write+0xf0>)
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <USER_SPI_write+0x32>
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e05a      	b.n	800a978 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a8c2:	4b2f      	ldr	r3, [pc, #188]	@ (800a980 <USER_SPI_write+0xf0>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <USER_SPI_write+0x44>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e051      	b.n	800a978 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a8d4:	4b2b      	ldr	r3, [pc, #172]	@ (800a984 <USER_SPI_write+0xf4>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	f003 0308 	and.w	r3, r3, #8
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d102      	bne.n	800a8e6 <USER_SPI_write+0x56>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	025b      	lsls	r3, r3, #9
 800a8e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d110      	bne.n	800a90e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a8ec:	6879      	ldr	r1, [r7, #4]
 800a8ee:	2018      	movs	r0, #24
 800a8f0:	f7ff fe03 	bl	800a4fa <send_cmd>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d136      	bne.n	800a968 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a8fa:	21fe      	movs	r1, #254	@ 0xfe
 800a8fc:	68b8      	ldr	r0, [r7, #8]
 800a8fe:	f7ff fdca 	bl	800a496 <xmit_datablock>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d02f      	beq.n	800a968 <USER_SPI_write+0xd8>
			count = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	e02c      	b.n	800a968 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a90e:	4b1d      	ldr	r3, [pc, #116]	@ (800a984 <USER_SPI_write+0xf4>)
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	f003 0306 	and.w	r3, r3, #6
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <USER_SPI_write+0x92>
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	2097      	movs	r0, #151	@ 0x97
 800a91e:	f7ff fdec 	bl	800a4fa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	2019      	movs	r0, #25
 800a926:	f7ff fde8 	bl	800a4fa <send_cmd>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d11b      	bne.n	800a968 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a930:	21fc      	movs	r1, #252	@ 0xfc
 800a932:	68b8      	ldr	r0, [r7, #8]
 800a934:	f7ff fdaf 	bl	800a496 <xmit_datablock>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00a      	beq.n	800a954 <USER_SPI_write+0xc4>
				buff += 512;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a944:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	3b01      	subs	r3, #1
 800a94a:	603b      	str	r3, [r7, #0]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1ee      	bne.n	800a930 <USER_SPI_write+0xa0>
 800a952:	e000      	b.n	800a956 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a954:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a956:	21fd      	movs	r1, #253	@ 0xfd
 800a958:	2000      	movs	r0, #0
 800a95a:	f7ff fd9c 	bl	800a496 <xmit_datablock>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <USER_SPI_write+0xd8>
 800a964:	2301      	movs	r3, #1
 800a966:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a968:	f7ff fd52 	bl	800a410 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bf14      	ite	ne
 800a972:	2301      	movne	r3, #1
 800a974:	2300      	moveq	r3, #0
 800a976:	b2db      	uxtb	r3, r3
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	24000028 	.word	0x24000028
 800a984:	24000360 	.word	0x24000360

0800a988 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08c      	sub	sp, #48	@ 0x30
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	4603      	mov	r3, r0
 800a990:	603a      	str	r2, [r7, #0]
 800a992:	71fb      	strb	r3, [r7, #7]
 800a994:	460b      	mov	r3, r1
 800a996:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <USER_SPI_ioctl+0x1a>
 800a99e:	2304      	movs	r3, #4
 800a9a0:	e15a      	b.n	800ac58 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a9a2:	4baf      	ldr	r3, [pc, #700]	@ (800ac60 <USER_SPI_ioctl+0x2d8>)
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <USER_SPI_ioctl+0x2c>
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e151      	b.n	800ac58 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800a9ba:	79bb      	ldrb	r3, [r7, #6]
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	f200 8136 	bhi.w	800ac2e <USER_SPI_ioctl+0x2a6>
 800a9c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c8 <USER_SPI_ioctl+0x40>)
 800a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c8:	0800a9dd 	.word	0x0800a9dd
 800a9cc:	0800a9f1 	.word	0x0800a9f1
 800a9d0:	0800ac2f 	.word	0x0800ac2f
 800a9d4:	0800aa9d 	.word	0x0800aa9d
 800a9d8:	0800ab93 	.word	0x0800ab93
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a9dc:	f7ff fd24 	bl	800a428 <spiselect>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f000 8127 	beq.w	800ac36 <USER_SPI_ioctl+0x2ae>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800a9ee:	e122      	b.n	800ac36 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	2009      	movs	r0, #9
 800a9f4:	f7ff fd81 	bl	800a4fa <send_cmd>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f040 811d 	bne.w	800ac3a <USER_SPI_ioctl+0x2b2>
 800aa00:	f107 030c 	add.w	r3, r7, #12
 800aa04:	2110      	movs	r1, #16
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7ff fd1c 	bl	800a444 <rcvr_datablock>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 8113 	beq.w	800ac3a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800aa14:	7b3b      	ldrb	r3, [r7, #12]
 800aa16:	099b      	lsrs	r3, r3, #6
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d111      	bne.n	800aa42 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800aa1e:	7d7b      	ldrb	r3, [r7, #21]
 800aa20:	461a      	mov	r2, r3
 800aa22:	7d3b      	ldrb	r3, [r7, #20]
 800aa24:	021b      	lsls	r3, r3, #8
 800aa26:	4413      	add	r3, r2
 800aa28:	461a      	mov	r2, r3
 800aa2a:	7cfb      	ldrb	r3, [r7, #19]
 800aa2c:	041b      	lsls	r3, r3, #16
 800aa2e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800aa32:	4413      	add	r3, r2
 800aa34:	3301      	adds	r3, #1
 800aa36:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	029a      	lsls	r2, r3, #10
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	e028      	b.n	800aa94 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800aa42:	7c7b      	ldrb	r3, [r7, #17]
 800aa44:	f003 030f 	and.w	r3, r3, #15
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	7dbb      	ldrb	r3, [r7, #22]
 800aa4c:	09db      	lsrs	r3, r3, #7
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	4413      	add	r3, r2
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	7d7b      	ldrb	r3, [r7, #21]
 800aa56:	005b      	lsls	r3, r3, #1
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	f003 0306 	and.w	r3, r3, #6
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	4413      	add	r3, r2
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	3302      	adds	r3, #2
 800aa66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800aa6a:	7d3b      	ldrb	r3, [r7, #20]
 800aa6c:	099b      	lsrs	r3, r3, #6
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	461a      	mov	r2, r3
 800aa72:	7cfb      	ldrb	r3, [r7, #19]
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	441a      	add	r2, r3
 800aa78:	7cbb      	ldrb	r3, [r7, #18]
 800aa7a:	029b      	lsls	r3, r3, #10
 800aa7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aa80:	4413      	add	r3, r2
 800aa82:	3301      	adds	r3, #1
 800aa84:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800aa86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa8a:	3b09      	subs	r3, #9
 800aa8c:	69fa      	ldr	r2, [r7, #28]
 800aa8e:	409a      	lsls	r2, r3
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800aa9a:	e0ce      	b.n	800ac3a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800aa9c:	4b71      	ldr	r3, [pc, #452]	@ (800ac64 <USER_SPI_ioctl+0x2dc>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	f003 0304 	and.w	r3, r3, #4
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d031      	beq.n	800ab0c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	208d      	movs	r0, #141	@ 0x8d
 800aaac:	f7ff fd25 	bl	800a4fa <send_cmd>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f040 80c3 	bne.w	800ac3e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800aab8:	20ff      	movs	r0, #255	@ 0xff
 800aaba:	f7ff fc3f 	bl	800a33c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800aabe:	f107 030c 	add.w	r3, r7, #12
 800aac2:	2110      	movs	r1, #16
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7ff fcbd 	bl	800a444 <rcvr_datablock>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 80b6 	beq.w	800ac3e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800aad2:	2330      	movs	r3, #48	@ 0x30
 800aad4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800aad8:	e007      	b.n	800aaea <USER_SPI_ioctl+0x162>
 800aada:	20ff      	movs	r0, #255	@ 0xff
 800aadc:	f7ff fc2e 	bl	800a33c <xchg_spi>
 800aae0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aae4:	3b01      	subs	r3, #1
 800aae6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800aaea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1f3      	bne.n	800aada <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800aaf2:	7dbb      	ldrb	r3, [r7, #22]
 800aaf4:	091b      	lsrs	r3, r3, #4
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	461a      	mov	r2, r3
 800aafa:	2310      	movs	r3, #16
 800aafc:	fa03 f202 	lsl.w	r2, r3, r2
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800ab0a:	e098      	b.n	800ac3e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	2009      	movs	r0, #9
 800ab10:	f7ff fcf3 	bl	800a4fa <send_cmd>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f040 8091 	bne.w	800ac3e <USER_SPI_ioctl+0x2b6>
 800ab1c:	f107 030c 	add.w	r3, r7, #12
 800ab20:	2110      	movs	r1, #16
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff fc8e 	bl	800a444 <rcvr_datablock>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8087 	beq.w	800ac3e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800ab30:	4b4c      	ldr	r3, [pc, #304]	@ (800ac64 <USER_SPI_ioctl+0x2dc>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	f003 0302 	and.w	r3, r3, #2
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d012      	beq.n	800ab62 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800ab3c:	7dbb      	ldrb	r3, [r7, #22]
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800ab44:	7dfa      	ldrb	r2, [r7, #23]
 800ab46:	09d2      	lsrs	r2, r2, #7
 800ab48:	b2d2      	uxtb	r2, r2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	7e7b      	ldrb	r3, [r7, #25]
 800ab50:	099b      	lsrs	r3, r3, #6
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	3b01      	subs	r3, #1
 800ab56:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	e013      	b.n	800ab8a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800ab62:	7dbb      	ldrb	r3, [r7, #22]
 800ab64:	109b      	asrs	r3, r3, #2
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	f003 031f 	and.w	r3, r3, #31
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	7dfa      	ldrb	r2, [r7, #23]
 800ab70:	00d2      	lsls	r2, r2, #3
 800ab72:	f002 0218 	and.w	r2, r2, #24
 800ab76:	7df9      	ldrb	r1, [r7, #23]
 800ab78:	0949      	lsrs	r1, r1, #5
 800ab7a:	b2c9      	uxtb	r1, r1
 800ab7c:	440a      	add	r2, r1
 800ab7e:	3201      	adds	r2, #1
 800ab80:	fb02 f303 	mul.w	r3, r2, r3
 800ab84:	461a      	mov	r2, r3
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800ab90:	e055      	b.n	800ac3e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ab92:	4b34      	ldr	r3, [pc, #208]	@ (800ac64 <USER_SPI_ioctl+0x2dc>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	f003 0306 	and.w	r3, r3, #6
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d051      	beq.n	800ac42 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ab9e:	f107 020c 	add.w	r2, r7, #12
 800aba2:	79fb      	ldrb	r3, [r7, #7]
 800aba4:	210b      	movs	r1, #11
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff feee 	bl	800a988 <USER_SPI_ioctl>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d149      	bne.n	800ac46 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800abb2:	7b3b      	ldrb	r3, [r7, #12]
 800abb4:	099b      	lsrs	r3, r3, #6
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d104      	bne.n	800abc6 <USER_SPI_ioctl+0x23e>
 800abbc:	7dbb      	ldrb	r3, [r7, #22]
 800abbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d041      	beq.n	800ac4a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	623b      	str	r3, [r7, #32]
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800abd6:	4b23      	ldr	r3, [pc, #140]	@ (800ac64 <USER_SPI_ioctl+0x2dc>)
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	f003 0308 	and.w	r3, r3, #8
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d105      	bne.n	800abee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800abe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe4:	025b      	lsls	r3, r3, #9
 800abe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abea:	025b      	lsls	r3, r3, #9
 800abec:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800abee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abf0:	2020      	movs	r0, #32
 800abf2:	f7ff fc82 	bl	800a4fa <send_cmd>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d128      	bne.n	800ac4e <USER_SPI_ioctl+0x2c6>
 800abfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800abfe:	2021      	movs	r0, #33	@ 0x21
 800ac00:	f7ff fc7b 	bl	800a4fa <send_cmd>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d121      	bne.n	800ac4e <USER_SPI_ioctl+0x2c6>
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	2026      	movs	r0, #38	@ 0x26
 800ac0e:	f7ff fc74 	bl	800a4fa <send_cmd>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d11a      	bne.n	800ac4e <USER_SPI_ioctl+0x2c6>
 800ac18:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ac1c:	f7ff fbd4 	bl	800a3c8 <wait_ready>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d013      	beq.n	800ac4e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800ac26:	2300      	movs	r3, #0
 800ac28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800ac2c:	e00f      	b.n	800ac4e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800ac2e:	2304      	movs	r3, #4
 800ac30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ac34:	e00c      	b.n	800ac50 <USER_SPI_ioctl+0x2c8>
		break;
 800ac36:	bf00      	nop
 800ac38:	e00a      	b.n	800ac50 <USER_SPI_ioctl+0x2c8>
		break;
 800ac3a:	bf00      	nop
 800ac3c:	e008      	b.n	800ac50 <USER_SPI_ioctl+0x2c8>
		break;
 800ac3e:	bf00      	nop
 800ac40:	e006      	b.n	800ac50 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ac42:	bf00      	nop
 800ac44:	e004      	b.n	800ac50 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ac46:	bf00      	nop
 800ac48:	e002      	b.n	800ac50 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ac4a:	bf00      	nop
 800ac4c:	e000      	b.n	800ac50 <USER_SPI_ioctl+0x2c8>
		break;
 800ac4e:	bf00      	nop
	}

	despiselect();
 800ac50:	f7ff fbde 	bl	800a410 <despiselect>

	return res;
 800ac54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3730      	adds	r7, #48	@ 0x30
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	24000028 	.word	0x24000028
 800ac64:	24000360 	.word	0x24000360

0800ac68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	4613      	mov	r3, r2
 800ac74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac76:	2301      	movs	r3, #1
 800ac78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac7e:	4b1f      	ldr	r3, [pc, #124]	@ (800acfc <FATFS_LinkDriverEx+0x94>)
 800ac80:	7a5b      	ldrb	r3, [r3, #9]
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d131      	bne.n	800acec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac88:	4b1c      	ldr	r3, [pc, #112]	@ (800acfc <FATFS_LinkDriverEx+0x94>)
 800ac8a:	7a5b      	ldrb	r3, [r3, #9]
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	461a      	mov	r2, r3
 800ac90:	4b1a      	ldr	r3, [pc, #104]	@ (800acfc <FATFS_LinkDriverEx+0x94>)
 800ac92:	2100      	movs	r1, #0
 800ac94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac96:	4b19      	ldr	r3, [pc, #100]	@ (800acfc <FATFS_LinkDriverEx+0x94>)
 800ac98:	7a5b      	ldrb	r3, [r3, #9]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	4a17      	ldr	r2, [pc, #92]	@ (800acfc <FATFS_LinkDriverEx+0x94>)
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aca6:	4b15      	ldr	r3, [pc, #84]	@ (800acfc <FATFS_LinkDriverEx+0x94>)
 800aca8:	7a5b      	ldrb	r3, [r3, #9]
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	461a      	mov	r2, r3
 800acae:	4b13      	ldr	r3, [pc, #76]	@ (800acfc <FATFS_LinkDriverEx+0x94>)
 800acb0:	4413      	add	r3, r2
 800acb2:	79fa      	ldrb	r2, [r7, #7]
 800acb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800acb6:	4b11      	ldr	r3, [pc, #68]	@ (800acfc <FATFS_LinkDriverEx+0x94>)
 800acb8:	7a5b      	ldrb	r3, [r3, #9]
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	b2d1      	uxtb	r1, r2
 800acc0:	4a0e      	ldr	r2, [pc, #56]	@ (800acfc <FATFS_LinkDriverEx+0x94>)
 800acc2:	7251      	strb	r1, [r2, #9]
 800acc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800acc6:	7dbb      	ldrb	r3, [r7, #22]
 800acc8:	3330      	adds	r3, #48	@ 0x30
 800acca:	b2da      	uxtb	r2, r3
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	3301      	adds	r3, #1
 800acd4:	223a      	movs	r2, #58	@ 0x3a
 800acd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	3302      	adds	r3, #2
 800acdc:	222f      	movs	r2, #47	@ 0x2f
 800acde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	3303      	adds	r3, #3
 800ace4:	2200      	movs	r2, #0
 800ace6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800acec:	7dfb      	ldrb	r3, [r7, #23]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	371c      	adds	r7, #28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	2400036c 	.word	0x2400036c

0800ad00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff ffaa 	bl	800ac68 <FATFS_LinkDriverEx>
 800ad14:	4603      	mov	r3, r0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <siprintf>:
 800ad20:	b40e      	push	{r1, r2, r3}
 800ad22:	b500      	push	{lr}
 800ad24:	b09c      	sub	sp, #112	@ 0x70
 800ad26:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad28:	9002      	str	r0, [sp, #8]
 800ad2a:	9006      	str	r0, [sp, #24]
 800ad2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad30:	4809      	ldr	r0, [pc, #36]	@ (800ad58 <siprintf+0x38>)
 800ad32:	9107      	str	r1, [sp, #28]
 800ad34:	9104      	str	r1, [sp, #16]
 800ad36:	4909      	ldr	r1, [pc, #36]	@ (800ad5c <siprintf+0x3c>)
 800ad38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad3c:	9105      	str	r1, [sp, #20]
 800ad3e:	6800      	ldr	r0, [r0, #0]
 800ad40:	9301      	str	r3, [sp, #4]
 800ad42:	a902      	add	r1, sp, #8
 800ad44:	f000 f994 	bl	800b070 <_svfiprintf_r>
 800ad48:	9b02      	ldr	r3, [sp, #8]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	b01c      	add	sp, #112	@ 0x70
 800ad50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad54:	b003      	add	sp, #12
 800ad56:	4770      	bx	lr
 800ad58:	2400002c 	.word	0x2400002c
 800ad5c:	ffff0208 	.word	0xffff0208

0800ad60 <memset>:
 800ad60:	4402      	add	r2, r0
 800ad62:	4603      	mov	r3, r0
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d100      	bne.n	800ad6a <memset+0xa>
 800ad68:	4770      	bx	lr
 800ad6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad6e:	e7f9      	b.n	800ad64 <memset+0x4>

0800ad70 <__errno>:
 800ad70:	4b01      	ldr	r3, [pc, #4]	@ (800ad78 <__errno+0x8>)
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	2400002c 	.word	0x2400002c

0800ad7c <__libc_init_array>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	4d0d      	ldr	r5, [pc, #52]	@ (800adb4 <__libc_init_array+0x38>)
 800ad80:	4c0d      	ldr	r4, [pc, #52]	@ (800adb8 <__libc_init_array+0x3c>)
 800ad82:	1b64      	subs	r4, r4, r5
 800ad84:	10a4      	asrs	r4, r4, #2
 800ad86:	2600      	movs	r6, #0
 800ad88:	42a6      	cmp	r6, r4
 800ad8a:	d109      	bne.n	800ada0 <__libc_init_array+0x24>
 800ad8c:	4d0b      	ldr	r5, [pc, #44]	@ (800adbc <__libc_init_array+0x40>)
 800ad8e:	4c0c      	ldr	r4, [pc, #48]	@ (800adc0 <__libc_init_array+0x44>)
 800ad90:	f000 fc66 	bl	800b660 <_init>
 800ad94:	1b64      	subs	r4, r4, r5
 800ad96:	10a4      	asrs	r4, r4, #2
 800ad98:	2600      	movs	r6, #0
 800ad9a:	42a6      	cmp	r6, r4
 800ad9c:	d105      	bne.n	800adaa <__libc_init_array+0x2e>
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}
 800ada0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada4:	4798      	blx	r3
 800ada6:	3601      	adds	r6, #1
 800ada8:	e7ee      	b.n	800ad88 <__libc_init_array+0xc>
 800adaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800adae:	4798      	blx	r3
 800adb0:	3601      	adds	r6, #1
 800adb2:	e7f2      	b.n	800ad9a <__libc_init_array+0x1e>
 800adb4:	0800b7d0 	.word	0x0800b7d0
 800adb8:	0800b7d0 	.word	0x0800b7d0
 800adbc:	0800b7d0 	.word	0x0800b7d0
 800adc0:	0800b7d4 	.word	0x0800b7d4

0800adc4 <__retarget_lock_acquire_recursive>:
 800adc4:	4770      	bx	lr

0800adc6 <__retarget_lock_release_recursive>:
 800adc6:	4770      	bx	lr

0800adc8 <_free_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4605      	mov	r5, r0
 800adcc:	2900      	cmp	r1, #0
 800adce:	d041      	beq.n	800ae54 <_free_r+0x8c>
 800add0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add4:	1f0c      	subs	r4, r1, #4
 800add6:	2b00      	cmp	r3, #0
 800add8:	bfb8      	it	lt
 800adda:	18e4      	addlt	r4, r4, r3
 800addc:	f000 f8e0 	bl	800afa0 <__malloc_lock>
 800ade0:	4a1d      	ldr	r2, [pc, #116]	@ (800ae58 <_free_r+0x90>)
 800ade2:	6813      	ldr	r3, [r2, #0]
 800ade4:	b933      	cbnz	r3, 800adf4 <_free_r+0x2c>
 800ade6:	6063      	str	r3, [r4, #4]
 800ade8:	6014      	str	r4, [r2, #0]
 800adea:	4628      	mov	r0, r5
 800adec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adf0:	f000 b8dc 	b.w	800afac <__malloc_unlock>
 800adf4:	42a3      	cmp	r3, r4
 800adf6:	d908      	bls.n	800ae0a <_free_r+0x42>
 800adf8:	6820      	ldr	r0, [r4, #0]
 800adfa:	1821      	adds	r1, r4, r0
 800adfc:	428b      	cmp	r3, r1
 800adfe:	bf01      	itttt	eq
 800ae00:	6819      	ldreq	r1, [r3, #0]
 800ae02:	685b      	ldreq	r3, [r3, #4]
 800ae04:	1809      	addeq	r1, r1, r0
 800ae06:	6021      	streq	r1, [r4, #0]
 800ae08:	e7ed      	b.n	800ade6 <_free_r+0x1e>
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	b10b      	cbz	r3, 800ae14 <_free_r+0x4c>
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	d9fa      	bls.n	800ae0a <_free_r+0x42>
 800ae14:	6811      	ldr	r1, [r2, #0]
 800ae16:	1850      	adds	r0, r2, r1
 800ae18:	42a0      	cmp	r0, r4
 800ae1a:	d10b      	bne.n	800ae34 <_free_r+0x6c>
 800ae1c:	6820      	ldr	r0, [r4, #0]
 800ae1e:	4401      	add	r1, r0
 800ae20:	1850      	adds	r0, r2, r1
 800ae22:	4283      	cmp	r3, r0
 800ae24:	6011      	str	r1, [r2, #0]
 800ae26:	d1e0      	bne.n	800adea <_free_r+0x22>
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	6053      	str	r3, [r2, #4]
 800ae2e:	4408      	add	r0, r1
 800ae30:	6010      	str	r0, [r2, #0]
 800ae32:	e7da      	b.n	800adea <_free_r+0x22>
 800ae34:	d902      	bls.n	800ae3c <_free_r+0x74>
 800ae36:	230c      	movs	r3, #12
 800ae38:	602b      	str	r3, [r5, #0]
 800ae3a:	e7d6      	b.n	800adea <_free_r+0x22>
 800ae3c:	6820      	ldr	r0, [r4, #0]
 800ae3e:	1821      	adds	r1, r4, r0
 800ae40:	428b      	cmp	r3, r1
 800ae42:	bf04      	itt	eq
 800ae44:	6819      	ldreq	r1, [r3, #0]
 800ae46:	685b      	ldreq	r3, [r3, #4]
 800ae48:	6063      	str	r3, [r4, #4]
 800ae4a:	bf04      	itt	eq
 800ae4c:	1809      	addeq	r1, r1, r0
 800ae4e:	6021      	streq	r1, [r4, #0]
 800ae50:	6054      	str	r4, [r2, #4]
 800ae52:	e7ca      	b.n	800adea <_free_r+0x22>
 800ae54:	bd38      	pop	{r3, r4, r5, pc}
 800ae56:	bf00      	nop
 800ae58:	240004bc 	.word	0x240004bc

0800ae5c <sbrk_aligned>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	4e0f      	ldr	r6, [pc, #60]	@ (800ae9c <sbrk_aligned+0x40>)
 800ae60:	460c      	mov	r4, r1
 800ae62:	6831      	ldr	r1, [r6, #0]
 800ae64:	4605      	mov	r5, r0
 800ae66:	b911      	cbnz	r1, 800ae6e <sbrk_aligned+0x12>
 800ae68:	f000 fba6 	bl	800b5b8 <_sbrk_r>
 800ae6c:	6030      	str	r0, [r6, #0]
 800ae6e:	4621      	mov	r1, r4
 800ae70:	4628      	mov	r0, r5
 800ae72:	f000 fba1 	bl	800b5b8 <_sbrk_r>
 800ae76:	1c43      	adds	r3, r0, #1
 800ae78:	d103      	bne.n	800ae82 <sbrk_aligned+0x26>
 800ae7a:	f04f 34ff 	mov.w	r4, #4294967295
 800ae7e:	4620      	mov	r0, r4
 800ae80:	bd70      	pop	{r4, r5, r6, pc}
 800ae82:	1cc4      	adds	r4, r0, #3
 800ae84:	f024 0403 	bic.w	r4, r4, #3
 800ae88:	42a0      	cmp	r0, r4
 800ae8a:	d0f8      	beq.n	800ae7e <sbrk_aligned+0x22>
 800ae8c:	1a21      	subs	r1, r4, r0
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f000 fb92 	bl	800b5b8 <_sbrk_r>
 800ae94:	3001      	adds	r0, #1
 800ae96:	d1f2      	bne.n	800ae7e <sbrk_aligned+0x22>
 800ae98:	e7ef      	b.n	800ae7a <sbrk_aligned+0x1e>
 800ae9a:	bf00      	nop
 800ae9c:	240004b8 	.word	0x240004b8

0800aea0 <_malloc_r>:
 800aea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea4:	1ccd      	adds	r5, r1, #3
 800aea6:	f025 0503 	bic.w	r5, r5, #3
 800aeaa:	3508      	adds	r5, #8
 800aeac:	2d0c      	cmp	r5, #12
 800aeae:	bf38      	it	cc
 800aeb0:	250c      	movcc	r5, #12
 800aeb2:	2d00      	cmp	r5, #0
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	db01      	blt.n	800aebc <_malloc_r+0x1c>
 800aeb8:	42a9      	cmp	r1, r5
 800aeba:	d904      	bls.n	800aec6 <_malloc_r+0x26>
 800aebc:	230c      	movs	r3, #12
 800aebe:	6033      	str	r3, [r6, #0]
 800aec0:	2000      	movs	r0, #0
 800aec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aec6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af9c <_malloc_r+0xfc>
 800aeca:	f000 f869 	bl	800afa0 <__malloc_lock>
 800aece:	f8d8 3000 	ldr.w	r3, [r8]
 800aed2:	461c      	mov	r4, r3
 800aed4:	bb44      	cbnz	r4, 800af28 <_malloc_r+0x88>
 800aed6:	4629      	mov	r1, r5
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff ffbf 	bl	800ae5c <sbrk_aligned>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	4604      	mov	r4, r0
 800aee2:	d158      	bne.n	800af96 <_malloc_r+0xf6>
 800aee4:	f8d8 4000 	ldr.w	r4, [r8]
 800aee8:	4627      	mov	r7, r4
 800aeea:	2f00      	cmp	r7, #0
 800aeec:	d143      	bne.n	800af76 <_malloc_r+0xd6>
 800aeee:	2c00      	cmp	r4, #0
 800aef0:	d04b      	beq.n	800af8a <_malloc_r+0xea>
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	4639      	mov	r1, r7
 800aef6:	4630      	mov	r0, r6
 800aef8:	eb04 0903 	add.w	r9, r4, r3
 800aefc:	f000 fb5c 	bl	800b5b8 <_sbrk_r>
 800af00:	4581      	cmp	r9, r0
 800af02:	d142      	bne.n	800af8a <_malloc_r+0xea>
 800af04:	6821      	ldr	r1, [r4, #0]
 800af06:	1a6d      	subs	r5, r5, r1
 800af08:	4629      	mov	r1, r5
 800af0a:	4630      	mov	r0, r6
 800af0c:	f7ff ffa6 	bl	800ae5c <sbrk_aligned>
 800af10:	3001      	adds	r0, #1
 800af12:	d03a      	beq.n	800af8a <_malloc_r+0xea>
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	442b      	add	r3, r5
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	f8d8 3000 	ldr.w	r3, [r8]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	bb62      	cbnz	r2, 800af7c <_malloc_r+0xdc>
 800af22:	f8c8 7000 	str.w	r7, [r8]
 800af26:	e00f      	b.n	800af48 <_malloc_r+0xa8>
 800af28:	6822      	ldr	r2, [r4, #0]
 800af2a:	1b52      	subs	r2, r2, r5
 800af2c:	d420      	bmi.n	800af70 <_malloc_r+0xd0>
 800af2e:	2a0b      	cmp	r2, #11
 800af30:	d917      	bls.n	800af62 <_malloc_r+0xc2>
 800af32:	1961      	adds	r1, r4, r5
 800af34:	42a3      	cmp	r3, r4
 800af36:	6025      	str	r5, [r4, #0]
 800af38:	bf18      	it	ne
 800af3a:	6059      	strne	r1, [r3, #4]
 800af3c:	6863      	ldr	r3, [r4, #4]
 800af3e:	bf08      	it	eq
 800af40:	f8c8 1000 	streq.w	r1, [r8]
 800af44:	5162      	str	r2, [r4, r5]
 800af46:	604b      	str	r3, [r1, #4]
 800af48:	4630      	mov	r0, r6
 800af4a:	f000 f82f 	bl	800afac <__malloc_unlock>
 800af4e:	f104 000b 	add.w	r0, r4, #11
 800af52:	1d23      	adds	r3, r4, #4
 800af54:	f020 0007 	bic.w	r0, r0, #7
 800af58:	1ac2      	subs	r2, r0, r3
 800af5a:	bf1c      	itt	ne
 800af5c:	1a1b      	subne	r3, r3, r0
 800af5e:	50a3      	strne	r3, [r4, r2]
 800af60:	e7af      	b.n	800aec2 <_malloc_r+0x22>
 800af62:	6862      	ldr	r2, [r4, #4]
 800af64:	42a3      	cmp	r3, r4
 800af66:	bf0c      	ite	eq
 800af68:	f8c8 2000 	streq.w	r2, [r8]
 800af6c:	605a      	strne	r2, [r3, #4]
 800af6e:	e7eb      	b.n	800af48 <_malloc_r+0xa8>
 800af70:	4623      	mov	r3, r4
 800af72:	6864      	ldr	r4, [r4, #4]
 800af74:	e7ae      	b.n	800aed4 <_malloc_r+0x34>
 800af76:	463c      	mov	r4, r7
 800af78:	687f      	ldr	r7, [r7, #4]
 800af7a:	e7b6      	b.n	800aeea <_malloc_r+0x4a>
 800af7c:	461a      	mov	r2, r3
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	42a3      	cmp	r3, r4
 800af82:	d1fb      	bne.n	800af7c <_malloc_r+0xdc>
 800af84:	2300      	movs	r3, #0
 800af86:	6053      	str	r3, [r2, #4]
 800af88:	e7de      	b.n	800af48 <_malloc_r+0xa8>
 800af8a:	230c      	movs	r3, #12
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	4630      	mov	r0, r6
 800af90:	f000 f80c 	bl	800afac <__malloc_unlock>
 800af94:	e794      	b.n	800aec0 <_malloc_r+0x20>
 800af96:	6005      	str	r5, [r0, #0]
 800af98:	e7d6      	b.n	800af48 <_malloc_r+0xa8>
 800af9a:	bf00      	nop
 800af9c:	240004bc 	.word	0x240004bc

0800afa0 <__malloc_lock>:
 800afa0:	4801      	ldr	r0, [pc, #4]	@ (800afa8 <__malloc_lock+0x8>)
 800afa2:	f7ff bf0f 	b.w	800adc4 <__retarget_lock_acquire_recursive>
 800afa6:	bf00      	nop
 800afa8:	240004b4 	.word	0x240004b4

0800afac <__malloc_unlock>:
 800afac:	4801      	ldr	r0, [pc, #4]	@ (800afb4 <__malloc_unlock+0x8>)
 800afae:	f7ff bf0a 	b.w	800adc6 <__retarget_lock_release_recursive>
 800afb2:	bf00      	nop
 800afb4:	240004b4 	.word	0x240004b4

0800afb8 <__ssputs_r>:
 800afb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afbc:	688e      	ldr	r6, [r1, #8]
 800afbe:	461f      	mov	r7, r3
 800afc0:	42be      	cmp	r6, r7
 800afc2:	680b      	ldr	r3, [r1, #0]
 800afc4:	4682      	mov	sl, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	4690      	mov	r8, r2
 800afca:	d82d      	bhi.n	800b028 <__ssputs_r+0x70>
 800afcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afd4:	d026      	beq.n	800b024 <__ssputs_r+0x6c>
 800afd6:	6965      	ldr	r5, [r4, #20]
 800afd8:	6909      	ldr	r1, [r1, #16]
 800afda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afde:	eba3 0901 	sub.w	r9, r3, r1
 800afe2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afe6:	1c7b      	adds	r3, r7, #1
 800afe8:	444b      	add	r3, r9
 800afea:	106d      	asrs	r5, r5, #1
 800afec:	429d      	cmp	r5, r3
 800afee:	bf38      	it	cc
 800aff0:	461d      	movcc	r5, r3
 800aff2:	0553      	lsls	r3, r2, #21
 800aff4:	d527      	bpl.n	800b046 <__ssputs_r+0x8e>
 800aff6:	4629      	mov	r1, r5
 800aff8:	f7ff ff52 	bl	800aea0 <_malloc_r>
 800affc:	4606      	mov	r6, r0
 800affe:	b360      	cbz	r0, 800b05a <__ssputs_r+0xa2>
 800b000:	6921      	ldr	r1, [r4, #16]
 800b002:	464a      	mov	r2, r9
 800b004:	f000 fae8 	bl	800b5d8 <memcpy>
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b00e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b012:	81a3      	strh	r3, [r4, #12]
 800b014:	6126      	str	r6, [r4, #16]
 800b016:	6165      	str	r5, [r4, #20]
 800b018:	444e      	add	r6, r9
 800b01a:	eba5 0509 	sub.w	r5, r5, r9
 800b01e:	6026      	str	r6, [r4, #0]
 800b020:	60a5      	str	r5, [r4, #8]
 800b022:	463e      	mov	r6, r7
 800b024:	42be      	cmp	r6, r7
 800b026:	d900      	bls.n	800b02a <__ssputs_r+0x72>
 800b028:	463e      	mov	r6, r7
 800b02a:	6820      	ldr	r0, [r4, #0]
 800b02c:	4632      	mov	r2, r6
 800b02e:	4641      	mov	r1, r8
 800b030:	f000 faa8 	bl	800b584 <memmove>
 800b034:	68a3      	ldr	r3, [r4, #8]
 800b036:	1b9b      	subs	r3, r3, r6
 800b038:	60a3      	str	r3, [r4, #8]
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	4433      	add	r3, r6
 800b03e:	6023      	str	r3, [r4, #0]
 800b040:	2000      	movs	r0, #0
 800b042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b046:	462a      	mov	r2, r5
 800b048:	f000 fad4 	bl	800b5f4 <_realloc_r>
 800b04c:	4606      	mov	r6, r0
 800b04e:	2800      	cmp	r0, #0
 800b050:	d1e0      	bne.n	800b014 <__ssputs_r+0x5c>
 800b052:	6921      	ldr	r1, [r4, #16]
 800b054:	4650      	mov	r0, sl
 800b056:	f7ff feb7 	bl	800adc8 <_free_r>
 800b05a:	230c      	movs	r3, #12
 800b05c:	f8ca 3000 	str.w	r3, [sl]
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b066:	81a3      	strh	r3, [r4, #12]
 800b068:	f04f 30ff 	mov.w	r0, #4294967295
 800b06c:	e7e9      	b.n	800b042 <__ssputs_r+0x8a>
	...

0800b070 <_svfiprintf_r>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	4698      	mov	r8, r3
 800b076:	898b      	ldrh	r3, [r1, #12]
 800b078:	061b      	lsls	r3, r3, #24
 800b07a:	b09d      	sub	sp, #116	@ 0x74
 800b07c:	4607      	mov	r7, r0
 800b07e:	460d      	mov	r5, r1
 800b080:	4614      	mov	r4, r2
 800b082:	d510      	bpl.n	800b0a6 <_svfiprintf_r+0x36>
 800b084:	690b      	ldr	r3, [r1, #16]
 800b086:	b973      	cbnz	r3, 800b0a6 <_svfiprintf_r+0x36>
 800b088:	2140      	movs	r1, #64	@ 0x40
 800b08a:	f7ff ff09 	bl	800aea0 <_malloc_r>
 800b08e:	6028      	str	r0, [r5, #0]
 800b090:	6128      	str	r0, [r5, #16]
 800b092:	b930      	cbnz	r0, 800b0a2 <_svfiprintf_r+0x32>
 800b094:	230c      	movs	r3, #12
 800b096:	603b      	str	r3, [r7, #0]
 800b098:	f04f 30ff 	mov.w	r0, #4294967295
 800b09c:	b01d      	add	sp, #116	@ 0x74
 800b09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a2:	2340      	movs	r3, #64	@ 0x40
 800b0a4:	616b      	str	r3, [r5, #20]
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0aa:	2320      	movs	r3, #32
 800b0ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0b4:	2330      	movs	r3, #48	@ 0x30
 800b0b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b254 <_svfiprintf_r+0x1e4>
 800b0ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0be:	f04f 0901 	mov.w	r9, #1
 800b0c2:	4623      	mov	r3, r4
 800b0c4:	469a      	mov	sl, r3
 800b0c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0ca:	b10a      	cbz	r2, 800b0d0 <_svfiprintf_r+0x60>
 800b0cc:	2a25      	cmp	r2, #37	@ 0x25
 800b0ce:	d1f9      	bne.n	800b0c4 <_svfiprintf_r+0x54>
 800b0d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b0d4:	d00b      	beq.n	800b0ee <_svfiprintf_r+0x7e>
 800b0d6:	465b      	mov	r3, fp
 800b0d8:	4622      	mov	r2, r4
 800b0da:	4629      	mov	r1, r5
 800b0dc:	4638      	mov	r0, r7
 800b0de:	f7ff ff6b 	bl	800afb8 <__ssputs_r>
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	f000 80a7 	beq.w	800b236 <_svfiprintf_r+0x1c6>
 800b0e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0ea:	445a      	add	r2, fp
 800b0ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 809f 	beq.w	800b236 <_svfiprintf_r+0x1c6>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b0fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b102:	f10a 0a01 	add.w	sl, sl, #1
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	9307      	str	r3, [sp, #28]
 800b10a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b10e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b110:	4654      	mov	r4, sl
 800b112:	2205      	movs	r2, #5
 800b114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b118:	484e      	ldr	r0, [pc, #312]	@ (800b254 <_svfiprintf_r+0x1e4>)
 800b11a:	f7f5 f8e9 	bl	80002f0 <memchr>
 800b11e:	9a04      	ldr	r2, [sp, #16]
 800b120:	b9d8      	cbnz	r0, 800b15a <_svfiprintf_r+0xea>
 800b122:	06d0      	lsls	r0, r2, #27
 800b124:	bf44      	itt	mi
 800b126:	2320      	movmi	r3, #32
 800b128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b12c:	0711      	lsls	r1, r2, #28
 800b12e:	bf44      	itt	mi
 800b130:	232b      	movmi	r3, #43	@ 0x2b
 800b132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b136:	f89a 3000 	ldrb.w	r3, [sl]
 800b13a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b13c:	d015      	beq.n	800b16a <_svfiprintf_r+0xfa>
 800b13e:	9a07      	ldr	r2, [sp, #28]
 800b140:	4654      	mov	r4, sl
 800b142:	2000      	movs	r0, #0
 800b144:	f04f 0c0a 	mov.w	ip, #10
 800b148:	4621      	mov	r1, r4
 800b14a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b14e:	3b30      	subs	r3, #48	@ 0x30
 800b150:	2b09      	cmp	r3, #9
 800b152:	d94b      	bls.n	800b1ec <_svfiprintf_r+0x17c>
 800b154:	b1b0      	cbz	r0, 800b184 <_svfiprintf_r+0x114>
 800b156:	9207      	str	r2, [sp, #28]
 800b158:	e014      	b.n	800b184 <_svfiprintf_r+0x114>
 800b15a:	eba0 0308 	sub.w	r3, r0, r8
 800b15e:	fa09 f303 	lsl.w	r3, r9, r3
 800b162:	4313      	orrs	r3, r2
 800b164:	9304      	str	r3, [sp, #16]
 800b166:	46a2      	mov	sl, r4
 800b168:	e7d2      	b.n	800b110 <_svfiprintf_r+0xa0>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	1d19      	adds	r1, r3, #4
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	9103      	str	r1, [sp, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfbb      	ittet	lt
 800b176:	425b      	neglt	r3, r3
 800b178:	f042 0202 	orrlt.w	r2, r2, #2
 800b17c:	9307      	strge	r3, [sp, #28]
 800b17e:	9307      	strlt	r3, [sp, #28]
 800b180:	bfb8      	it	lt
 800b182:	9204      	strlt	r2, [sp, #16]
 800b184:	7823      	ldrb	r3, [r4, #0]
 800b186:	2b2e      	cmp	r3, #46	@ 0x2e
 800b188:	d10a      	bne.n	800b1a0 <_svfiprintf_r+0x130>
 800b18a:	7863      	ldrb	r3, [r4, #1]
 800b18c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b18e:	d132      	bne.n	800b1f6 <_svfiprintf_r+0x186>
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	1d1a      	adds	r2, r3, #4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	9203      	str	r2, [sp, #12]
 800b198:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b19c:	3402      	adds	r4, #2
 800b19e:	9305      	str	r3, [sp, #20]
 800b1a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b264 <_svfiprintf_r+0x1f4>
 800b1a4:	7821      	ldrb	r1, [r4, #0]
 800b1a6:	2203      	movs	r2, #3
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	f7f5 f8a1 	bl	80002f0 <memchr>
 800b1ae:	b138      	cbz	r0, 800b1c0 <_svfiprintf_r+0x150>
 800b1b0:	9b04      	ldr	r3, [sp, #16]
 800b1b2:	eba0 000a 	sub.w	r0, r0, sl
 800b1b6:	2240      	movs	r2, #64	@ 0x40
 800b1b8:	4082      	lsls	r2, r0
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	3401      	adds	r4, #1
 800b1be:	9304      	str	r3, [sp, #16]
 800b1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c4:	4824      	ldr	r0, [pc, #144]	@ (800b258 <_svfiprintf_r+0x1e8>)
 800b1c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1ca:	2206      	movs	r2, #6
 800b1cc:	f7f5 f890 	bl	80002f0 <memchr>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d036      	beq.n	800b242 <_svfiprintf_r+0x1d2>
 800b1d4:	4b21      	ldr	r3, [pc, #132]	@ (800b25c <_svfiprintf_r+0x1ec>)
 800b1d6:	bb1b      	cbnz	r3, 800b220 <_svfiprintf_r+0x1b0>
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	3307      	adds	r3, #7
 800b1dc:	f023 0307 	bic.w	r3, r3, #7
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	9303      	str	r3, [sp, #12]
 800b1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1e6:	4433      	add	r3, r6
 800b1e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ea:	e76a      	b.n	800b0c2 <_svfiprintf_r+0x52>
 800b1ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	e7a8      	b.n	800b148 <_svfiprintf_r+0xd8>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	3401      	adds	r4, #1
 800b1fa:	9305      	str	r3, [sp, #20]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f04f 0c0a 	mov.w	ip, #10
 800b202:	4620      	mov	r0, r4
 800b204:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b208:	3a30      	subs	r2, #48	@ 0x30
 800b20a:	2a09      	cmp	r2, #9
 800b20c:	d903      	bls.n	800b216 <_svfiprintf_r+0x1a6>
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0c6      	beq.n	800b1a0 <_svfiprintf_r+0x130>
 800b212:	9105      	str	r1, [sp, #20]
 800b214:	e7c4      	b.n	800b1a0 <_svfiprintf_r+0x130>
 800b216:	fb0c 2101 	mla	r1, ip, r1, r2
 800b21a:	4604      	mov	r4, r0
 800b21c:	2301      	movs	r3, #1
 800b21e:	e7f0      	b.n	800b202 <_svfiprintf_r+0x192>
 800b220:	ab03      	add	r3, sp, #12
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	462a      	mov	r2, r5
 800b226:	4b0e      	ldr	r3, [pc, #56]	@ (800b260 <_svfiprintf_r+0x1f0>)
 800b228:	a904      	add	r1, sp, #16
 800b22a:	4638      	mov	r0, r7
 800b22c:	f3af 8000 	nop.w
 800b230:	1c42      	adds	r2, r0, #1
 800b232:	4606      	mov	r6, r0
 800b234:	d1d6      	bne.n	800b1e4 <_svfiprintf_r+0x174>
 800b236:	89ab      	ldrh	r3, [r5, #12]
 800b238:	065b      	lsls	r3, r3, #25
 800b23a:	f53f af2d 	bmi.w	800b098 <_svfiprintf_r+0x28>
 800b23e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b240:	e72c      	b.n	800b09c <_svfiprintf_r+0x2c>
 800b242:	ab03      	add	r3, sp, #12
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	462a      	mov	r2, r5
 800b248:	4b05      	ldr	r3, [pc, #20]	@ (800b260 <_svfiprintf_r+0x1f0>)
 800b24a:	a904      	add	r1, sp, #16
 800b24c:	4638      	mov	r0, r7
 800b24e:	f000 f879 	bl	800b344 <_printf_i>
 800b252:	e7ed      	b.n	800b230 <_svfiprintf_r+0x1c0>
 800b254:	0800b794 	.word	0x0800b794
 800b258:	0800b79e 	.word	0x0800b79e
 800b25c:	00000000 	.word	0x00000000
 800b260:	0800afb9 	.word	0x0800afb9
 800b264:	0800b79a 	.word	0x0800b79a

0800b268 <_printf_common>:
 800b268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b26c:	4616      	mov	r6, r2
 800b26e:	4698      	mov	r8, r3
 800b270:	688a      	ldr	r2, [r1, #8]
 800b272:	690b      	ldr	r3, [r1, #16]
 800b274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b278:	4293      	cmp	r3, r2
 800b27a:	bfb8      	it	lt
 800b27c:	4613      	movlt	r3, r2
 800b27e:	6033      	str	r3, [r6, #0]
 800b280:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b284:	4607      	mov	r7, r0
 800b286:	460c      	mov	r4, r1
 800b288:	b10a      	cbz	r2, 800b28e <_printf_common+0x26>
 800b28a:	3301      	adds	r3, #1
 800b28c:	6033      	str	r3, [r6, #0]
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	0699      	lsls	r1, r3, #26
 800b292:	bf42      	ittt	mi
 800b294:	6833      	ldrmi	r3, [r6, #0]
 800b296:	3302      	addmi	r3, #2
 800b298:	6033      	strmi	r3, [r6, #0]
 800b29a:	6825      	ldr	r5, [r4, #0]
 800b29c:	f015 0506 	ands.w	r5, r5, #6
 800b2a0:	d106      	bne.n	800b2b0 <_printf_common+0x48>
 800b2a2:	f104 0a19 	add.w	sl, r4, #25
 800b2a6:	68e3      	ldr	r3, [r4, #12]
 800b2a8:	6832      	ldr	r2, [r6, #0]
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	42ab      	cmp	r3, r5
 800b2ae:	dc26      	bgt.n	800b2fe <_printf_common+0x96>
 800b2b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2b4:	6822      	ldr	r2, [r4, #0]
 800b2b6:	3b00      	subs	r3, #0
 800b2b8:	bf18      	it	ne
 800b2ba:	2301      	movne	r3, #1
 800b2bc:	0692      	lsls	r2, r2, #26
 800b2be:	d42b      	bmi.n	800b318 <_printf_common+0xb0>
 800b2c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2c4:	4641      	mov	r1, r8
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	47c8      	blx	r9
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	d01e      	beq.n	800b30c <_printf_common+0xa4>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	6922      	ldr	r2, [r4, #16]
 800b2d2:	f003 0306 	and.w	r3, r3, #6
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	bf02      	ittt	eq
 800b2da:	68e5      	ldreq	r5, [r4, #12]
 800b2dc:	6833      	ldreq	r3, [r6, #0]
 800b2de:	1aed      	subeq	r5, r5, r3
 800b2e0:	68a3      	ldr	r3, [r4, #8]
 800b2e2:	bf0c      	ite	eq
 800b2e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2e8:	2500      	movne	r5, #0
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	bfc4      	itt	gt
 800b2ee:	1a9b      	subgt	r3, r3, r2
 800b2f0:	18ed      	addgt	r5, r5, r3
 800b2f2:	2600      	movs	r6, #0
 800b2f4:	341a      	adds	r4, #26
 800b2f6:	42b5      	cmp	r5, r6
 800b2f8:	d11a      	bne.n	800b330 <_printf_common+0xc8>
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	e008      	b.n	800b310 <_printf_common+0xa8>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4652      	mov	r2, sl
 800b302:	4641      	mov	r1, r8
 800b304:	4638      	mov	r0, r7
 800b306:	47c8      	blx	r9
 800b308:	3001      	adds	r0, #1
 800b30a:	d103      	bne.n	800b314 <_printf_common+0xac>
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295
 800b310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b314:	3501      	adds	r5, #1
 800b316:	e7c6      	b.n	800b2a6 <_printf_common+0x3e>
 800b318:	18e1      	adds	r1, r4, r3
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	2030      	movs	r0, #48	@ 0x30
 800b31e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b322:	4422      	add	r2, r4
 800b324:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b328:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b32c:	3302      	adds	r3, #2
 800b32e:	e7c7      	b.n	800b2c0 <_printf_common+0x58>
 800b330:	2301      	movs	r3, #1
 800b332:	4622      	mov	r2, r4
 800b334:	4641      	mov	r1, r8
 800b336:	4638      	mov	r0, r7
 800b338:	47c8      	blx	r9
 800b33a:	3001      	adds	r0, #1
 800b33c:	d0e6      	beq.n	800b30c <_printf_common+0xa4>
 800b33e:	3601      	adds	r6, #1
 800b340:	e7d9      	b.n	800b2f6 <_printf_common+0x8e>
	...

0800b344 <_printf_i>:
 800b344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b348:	7e0f      	ldrb	r7, [r1, #24]
 800b34a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b34c:	2f78      	cmp	r7, #120	@ 0x78
 800b34e:	4691      	mov	r9, r2
 800b350:	4680      	mov	r8, r0
 800b352:	460c      	mov	r4, r1
 800b354:	469a      	mov	sl, r3
 800b356:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b35a:	d807      	bhi.n	800b36c <_printf_i+0x28>
 800b35c:	2f62      	cmp	r7, #98	@ 0x62
 800b35e:	d80a      	bhi.n	800b376 <_printf_i+0x32>
 800b360:	2f00      	cmp	r7, #0
 800b362:	f000 80d2 	beq.w	800b50a <_printf_i+0x1c6>
 800b366:	2f58      	cmp	r7, #88	@ 0x58
 800b368:	f000 80b9 	beq.w	800b4de <_printf_i+0x19a>
 800b36c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b370:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b374:	e03a      	b.n	800b3ec <_printf_i+0xa8>
 800b376:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b37a:	2b15      	cmp	r3, #21
 800b37c:	d8f6      	bhi.n	800b36c <_printf_i+0x28>
 800b37e:	a101      	add	r1, pc, #4	@ (adr r1, 800b384 <_printf_i+0x40>)
 800b380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b384:	0800b3dd 	.word	0x0800b3dd
 800b388:	0800b3f1 	.word	0x0800b3f1
 800b38c:	0800b36d 	.word	0x0800b36d
 800b390:	0800b36d 	.word	0x0800b36d
 800b394:	0800b36d 	.word	0x0800b36d
 800b398:	0800b36d 	.word	0x0800b36d
 800b39c:	0800b3f1 	.word	0x0800b3f1
 800b3a0:	0800b36d 	.word	0x0800b36d
 800b3a4:	0800b36d 	.word	0x0800b36d
 800b3a8:	0800b36d 	.word	0x0800b36d
 800b3ac:	0800b36d 	.word	0x0800b36d
 800b3b0:	0800b4f1 	.word	0x0800b4f1
 800b3b4:	0800b41b 	.word	0x0800b41b
 800b3b8:	0800b4ab 	.word	0x0800b4ab
 800b3bc:	0800b36d 	.word	0x0800b36d
 800b3c0:	0800b36d 	.word	0x0800b36d
 800b3c4:	0800b513 	.word	0x0800b513
 800b3c8:	0800b36d 	.word	0x0800b36d
 800b3cc:	0800b41b 	.word	0x0800b41b
 800b3d0:	0800b36d 	.word	0x0800b36d
 800b3d4:	0800b36d 	.word	0x0800b36d
 800b3d8:	0800b4b3 	.word	0x0800b4b3
 800b3dc:	6833      	ldr	r3, [r6, #0]
 800b3de:	1d1a      	adds	r2, r3, #4
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6032      	str	r2, [r6, #0]
 800b3e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e09d      	b.n	800b52c <_printf_i+0x1e8>
 800b3f0:	6833      	ldr	r3, [r6, #0]
 800b3f2:	6820      	ldr	r0, [r4, #0]
 800b3f4:	1d19      	adds	r1, r3, #4
 800b3f6:	6031      	str	r1, [r6, #0]
 800b3f8:	0606      	lsls	r6, r0, #24
 800b3fa:	d501      	bpl.n	800b400 <_printf_i+0xbc>
 800b3fc:	681d      	ldr	r5, [r3, #0]
 800b3fe:	e003      	b.n	800b408 <_printf_i+0xc4>
 800b400:	0645      	lsls	r5, r0, #25
 800b402:	d5fb      	bpl.n	800b3fc <_printf_i+0xb8>
 800b404:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b408:	2d00      	cmp	r5, #0
 800b40a:	da03      	bge.n	800b414 <_printf_i+0xd0>
 800b40c:	232d      	movs	r3, #45	@ 0x2d
 800b40e:	426d      	negs	r5, r5
 800b410:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b414:	4859      	ldr	r0, [pc, #356]	@ (800b57c <_printf_i+0x238>)
 800b416:	230a      	movs	r3, #10
 800b418:	e011      	b.n	800b43e <_printf_i+0xfa>
 800b41a:	6821      	ldr	r1, [r4, #0]
 800b41c:	6833      	ldr	r3, [r6, #0]
 800b41e:	0608      	lsls	r0, r1, #24
 800b420:	f853 5b04 	ldr.w	r5, [r3], #4
 800b424:	d402      	bmi.n	800b42c <_printf_i+0xe8>
 800b426:	0649      	lsls	r1, r1, #25
 800b428:	bf48      	it	mi
 800b42a:	b2ad      	uxthmi	r5, r5
 800b42c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b42e:	4853      	ldr	r0, [pc, #332]	@ (800b57c <_printf_i+0x238>)
 800b430:	6033      	str	r3, [r6, #0]
 800b432:	bf14      	ite	ne
 800b434:	230a      	movne	r3, #10
 800b436:	2308      	moveq	r3, #8
 800b438:	2100      	movs	r1, #0
 800b43a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b43e:	6866      	ldr	r6, [r4, #4]
 800b440:	60a6      	str	r6, [r4, #8]
 800b442:	2e00      	cmp	r6, #0
 800b444:	bfa2      	ittt	ge
 800b446:	6821      	ldrge	r1, [r4, #0]
 800b448:	f021 0104 	bicge.w	r1, r1, #4
 800b44c:	6021      	strge	r1, [r4, #0]
 800b44e:	b90d      	cbnz	r5, 800b454 <_printf_i+0x110>
 800b450:	2e00      	cmp	r6, #0
 800b452:	d04b      	beq.n	800b4ec <_printf_i+0x1a8>
 800b454:	4616      	mov	r6, r2
 800b456:	fbb5 f1f3 	udiv	r1, r5, r3
 800b45a:	fb03 5711 	mls	r7, r3, r1, r5
 800b45e:	5dc7      	ldrb	r7, [r0, r7]
 800b460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b464:	462f      	mov	r7, r5
 800b466:	42bb      	cmp	r3, r7
 800b468:	460d      	mov	r5, r1
 800b46a:	d9f4      	bls.n	800b456 <_printf_i+0x112>
 800b46c:	2b08      	cmp	r3, #8
 800b46e:	d10b      	bne.n	800b488 <_printf_i+0x144>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	07df      	lsls	r7, r3, #31
 800b474:	d508      	bpl.n	800b488 <_printf_i+0x144>
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	6861      	ldr	r1, [r4, #4]
 800b47a:	4299      	cmp	r1, r3
 800b47c:	bfde      	ittt	le
 800b47e:	2330      	movle	r3, #48	@ 0x30
 800b480:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b484:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b488:	1b92      	subs	r2, r2, r6
 800b48a:	6122      	str	r2, [r4, #16]
 800b48c:	f8cd a000 	str.w	sl, [sp]
 800b490:	464b      	mov	r3, r9
 800b492:	aa03      	add	r2, sp, #12
 800b494:	4621      	mov	r1, r4
 800b496:	4640      	mov	r0, r8
 800b498:	f7ff fee6 	bl	800b268 <_printf_common>
 800b49c:	3001      	adds	r0, #1
 800b49e:	d14a      	bne.n	800b536 <_printf_i+0x1f2>
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a4:	b004      	add	sp, #16
 800b4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	f043 0320 	orr.w	r3, r3, #32
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	4833      	ldr	r0, [pc, #204]	@ (800b580 <_printf_i+0x23c>)
 800b4b4:	2778      	movs	r7, #120	@ 0x78
 800b4b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	6831      	ldr	r1, [r6, #0]
 800b4be:	061f      	lsls	r7, r3, #24
 800b4c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4c4:	d402      	bmi.n	800b4cc <_printf_i+0x188>
 800b4c6:	065f      	lsls	r7, r3, #25
 800b4c8:	bf48      	it	mi
 800b4ca:	b2ad      	uxthmi	r5, r5
 800b4cc:	6031      	str	r1, [r6, #0]
 800b4ce:	07d9      	lsls	r1, r3, #31
 800b4d0:	bf44      	itt	mi
 800b4d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b4d6:	6023      	strmi	r3, [r4, #0]
 800b4d8:	b11d      	cbz	r5, 800b4e2 <_printf_i+0x19e>
 800b4da:	2310      	movs	r3, #16
 800b4dc:	e7ac      	b.n	800b438 <_printf_i+0xf4>
 800b4de:	4827      	ldr	r0, [pc, #156]	@ (800b57c <_printf_i+0x238>)
 800b4e0:	e7e9      	b.n	800b4b6 <_printf_i+0x172>
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	f023 0320 	bic.w	r3, r3, #32
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	e7f6      	b.n	800b4da <_printf_i+0x196>
 800b4ec:	4616      	mov	r6, r2
 800b4ee:	e7bd      	b.n	800b46c <_printf_i+0x128>
 800b4f0:	6833      	ldr	r3, [r6, #0]
 800b4f2:	6825      	ldr	r5, [r4, #0]
 800b4f4:	6961      	ldr	r1, [r4, #20]
 800b4f6:	1d18      	adds	r0, r3, #4
 800b4f8:	6030      	str	r0, [r6, #0]
 800b4fa:	062e      	lsls	r6, r5, #24
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	d501      	bpl.n	800b504 <_printf_i+0x1c0>
 800b500:	6019      	str	r1, [r3, #0]
 800b502:	e002      	b.n	800b50a <_printf_i+0x1c6>
 800b504:	0668      	lsls	r0, r5, #25
 800b506:	d5fb      	bpl.n	800b500 <_printf_i+0x1bc>
 800b508:	8019      	strh	r1, [r3, #0]
 800b50a:	2300      	movs	r3, #0
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	4616      	mov	r6, r2
 800b510:	e7bc      	b.n	800b48c <_printf_i+0x148>
 800b512:	6833      	ldr	r3, [r6, #0]
 800b514:	1d1a      	adds	r2, r3, #4
 800b516:	6032      	str	r2, [r6, #0]
 800b518:	681e      	ldr	r6, [r3, #0]
 800b51a:	6862      	ldr	r2, [r4, #4]
 800b51c:	2100      	movs	r1, #0
 800b51e:	4630      	mov	r0, r6
 800b520:	f7f4 fee6 	bl	80002f0 <memchr>
 800b524:	b108      	cbz	r0, 800b52a <_printf_i+0x1e6>
 800b526:	1b80      	subs	r0, r0, r6
 800b528:	6060      	str	r0, [r4, #4]
 800b52a:	6863      	ldr	r3, [r4, #4]
 800b52c:	6123      	str	r3, [r4, #16]
 800b52e:	2300      	movs	r3, #0
 800b530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b534:	e7aa      	b.n	800b48c <_printf_i+0x148>
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	4632      	mov	r2, r6
 800b53a:	4649      	mov	r1, r9
 800b53c:	4640      	mov	r0, r8
 800b53e:	47d0      	blx	sl
 800b540:	3001      	adds	r0, #1
 800b542:	d0ad      	beq.n	800b4a0 <_printf_i+0x15c>
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	079b      	lsls	r3, r3, #30
 800b548:	d413      	bmi.n	800b572 <_printf_i+0x22e>
 800b54a:	68e0      	ldr	r0, [r4, #12]
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	4298      	cmp	r0, r3
 800b550:	bfb8      	it	lt
 800b552:	4618      	movlt	r0, r3
 800b554:	e7a6      	b.n	800b4a4 <_printf_i+0x160>
 800b556:	2301      	movs	r3, #1
 800b558:	4632      	mov	r2, r6
 800b55a:	4649      	mov	r1, r9
 800b55c:	4640      	mov	r0, r8
 800b55e:	47d0      	blx	sl
 800b560:	3001      	adds	r0, #1
 800b562:	d09d      	beq.n	800b4a0 <_printf_i+0x15c>
 800b564:	3501      	adds	r5, #1
 800b566:	68e3      	ldr	r3, [r4, #12]
 800b568:	9903      	ldr	r1, [sp, #12]
 800b56a:	1a5b      	subs	r3, r3, r1
 800b56c:	42ab      	cmp	r3, r5
 800b56e:	dcf2      	bgt.n	800b556 <_printf_i+0x212>
 800b570:	e7eb      	b.n	800b54a <_printf_i+0x206>
 800b572:	2500      	movs	r5, #0
 800b574:	f104 0619 	add.w	r6, r4, #25
 800b578:	e7f5      	b.n	800b566 <_printf_i+0x222>
 800b57a:	bf00      	nop
 800b57c:	0800b7a5 	.word	0x0800b7a5
 800b580:	0800b7b6 	.word	0x0800b7b6

0800b584 <memmove>:
 800b584:	4288      	cmp	r0, r1
 800b586:	b510      	push	{r4, lr}
 800b588:	eb01 0402 	add.w	r4, r1, r2
 800b58c:	d902      	bls.n	800b594 <memmove+0x10>
 800b58e:	4284      	cmp	r4, r0
 800b590:	4623      	mov	r3, r4
 800b592:	d807      	bhi.n	800b5a4 <memmove+0x20>
 800b594:	1e43      	subs	r3, r0, #1
 800b596:	42a1      	cmp	r1, r4
 800b598:	d008      	beq.n	800b5ac <memmove+0x28>
 800b59a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b59e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5a2:	e7f8      	b.n	800b596 <memmove+0x12>
 800b5a4:	4402      	add	r2, r0
 800b5a6:	4601      	mov	r1, r0
 800b5a8:	428a      	cmp	r2, r1
 800b5aa:	d100      	bne.n	800b5ae <memmove+0x2a>
 800b5ac:	bd10      	pop	{r4, pc}
 800b5ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5b6:	e7f7      	b.n	800b5a8 <memmove+0x24>

0800b5b8 <_sbrk_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d06      	ldr	r5, [pc, #24]	@ (800b5d4 <_sbrk_r+0x1c>)
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4604      	mov	r4, r0
 800b5c0:	4608      	mov	r0, r1
 800b5c2:	602b      	str	r3, [r5, #0]
 800b5c4:	f7f6 fd7a 	bl	80020bc <_sbrk>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d102      	bne.n	800b5d2 <_sbrk_r+0x1a>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	b103      	cbz	r3, 800b5d2 <_sbrk_r+0x1a>
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	240004b0 	.word	0x240004b0

0800b5d8 <memcpy>:
 800b5d8:	440a      	add	r2, r1
 800b5da:	4291      	cmp	r1, r2
 800b5dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5e0:	d100      	bne.n	800b5e4 <memcpy+0xc>
 800b5e2:	4770      	bx	lr
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ee:	4291      	cmp	r1, r2
 800b5f0:	d1f9      	bne.n	800b5e6 <memcpy+0xe>
 800b5f2:	bd10      	pop	{r4, pc}

0800b5f4 <_realloc_r>:
 800b5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f8:	4680      	mov	r8, r0
 800b5fa:	4615      	mov	r5, r2
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	b921      	cbnz	r1, 800b60a <_realloc_r+0x16>
 800b600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b604:	4611      	mov	r1, r2
 800b606:	f7ff bc4b 	b.w	800aea0 <_malloc_r>
 800b60a:	b92a      	cbnz	r2, 800b618 <_realloc_r+0x24>
 800b60c:	f7ff fbdc 	bl	800adc8 <_free_r>
 800b610:	2400      	movs	r4, #0
 800b612:	4620      	mov	r0, r4
 800b614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b618:	f000 f81a 	bl	800b650 <_malloc_usable_size_r>
 800b61c:	4285      	cmp	r5, r0
 800b61e:	4606      	mov	r6, r0
 800b620:	d802      	bhi.n	800b628 <_realloc_r+0x34>
 800b622:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b626:	d8f4      	bhi.n	800b612 <_realloc_r+0x1e>
 800b628:	4629      	mov	r1, r5
 800b62a:	4640      	mov	r0, r8
 800b62c:	f7ff fc38 	bl	800aea0 <_malloc_r>
 800b630:	4607      	mov	r7, r0
 800b632:	2800      	cmp	r0, #0
 800b634:	d0ec      	beq.n	800b610 <_realloc_r+0x1c>
 800b636:	42b5      	cmp	r5, r6
 800b638:	462a      	mov	r2, r5
 800b63a:	4621      	mov	r1, r4
 800b63c:	bf28      	it	cs
 800b63e:	4632      	movcs	r2, r6
 800b640:	f7ff ffca 	bl	800b5d8 <memcpy>
 800b644:	4621      	mov	r1, r4
 800b646:	4640      	mov	r0, r8
 800b648:	f7ff fbbe 	bl	800adc8 <_free_r>
 800b64c:	463c      	mov	r4, r7
 800b64e:	e7e0      	b.n	800b612 <_realloc_r+0x1e>

0800b650 <_malloc_usable_size_r>:
 800b650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b654:	1f18      	subs	r0, r3, #4
 800b656:	2b00      	cmp	r3, #0
 800b658:	bfbc      	itt	lt
 800b65a:	580b      	ldrlt	r3, [r1, r0]
 800b65c:	18c0      	addlt	r0, r0, r3
 800b65e:	4770      	bx	lr

0800b660 <_init>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	bf00      	nop
 800b664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b666:	bc08      	pop	{r3}
 800b668:	469e      	mov	lr, r3
 800b66a:	4770      	bx	lr

0800b66c <_fini>:
 800b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66e:	bf00      	nop
 800b670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b672:	bc08      	pop	{r3}
 800b674:	469e      	mov	lr, r3
 800b676:	4770      	bx	lr
