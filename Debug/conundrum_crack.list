
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af90  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800b230  0800b230  0000c230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b600  0800b600  0000c600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b608  0800b608  0000c608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b60c  0800b60c  0000c60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800b610  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000364  24000088  0800b698  0000d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003ec  0800b698  0000d3ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016903  00000000  00000000  0000d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033b3  00000000  00000000  000239b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001490  00000000  00000000  00026d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fcf  00000000  00000000  00028200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a064  00000000  00000000  000291cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019752  00000000  00000000  00063233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165d3e  00000000  00000000  0007c985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e26c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006300  00000000  00000000  001e2708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001e8a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b218 	.word	0x0800b218

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800b218 	.word	0x0800b218

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:
//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)
//#define LCD_WAIT_STATUS 1

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_soft_reset>:
/*!
 Performs a SW-based reset of the RA8875
 */
/**************************************************************************/
void RA8875_soft_reset (void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_SOFTRESET);
 80003c0:	2101      	movs	r1, #1
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fa12 	bl	80007ec <RA8875_write_reg>
  HAL_Delay (10);
 80003c8:	200a      	movs	r0, #10
 80003ca:	f002 fdf3 	bl	8002fb4 <HAL_Delay>
  RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL);
 80003ce:	2100      	movs	r1, #0
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fa0b 	bl	80007ec <RA8875_write_reg>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <RA885_pll_init>:
/*!
 Initialise the PLL
 */
/**************************************************************************/
static void RA885_pll_init (void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  if (_size == RA8875_480x80 || _size == RA8875_480x128 || _size == RA8875_480x272)
 80003e0:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <RA885_pll_init+0x5c>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d007      	beq.n	80003f8 <RA885_pll_init+0x1c>
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <RA885_pll_init+0x5c>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d003      	beq.n	80003f8 <RA885_pll_init+0x1c>
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <RA885_pll_init+0x5c>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d10e      	bne.n	8000416 <RA885_pll_init+0x3a>
  {
    RA8875_write_reg (RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 8);
 80003f8:	2108      	movs	r1, #8
 80003fa:	2088      	movs	r0, #136	@ 0x88
 80003fc:	f000 f9f6 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 8000400:	2001      	movs	r0, #1
 8000402:	f002 fdd7 	bl	8002fb4 <HAL_Delay>
    RA8875_write_reg (RA8875_PLLC2, RA8875_PLLC2_DIV4);
 8000406:	2102      	movs	r1, #2
 8000408:	2089      	movs	r0, #137	@ 0x89
 800040a:	f000 f9ef 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 800040e:	2001      	movs	r0, #1
 8000410:	f002 fdd0 	bl	8002fb4 <HAL_Delay>
 8000414:	e00e      	b.n	8000434 <RA885_pll_init+0x58>
  }
  else /* (_size == RA8875_800x480) */
  {
    RA8875_write_reg (RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 11);
 8000416:	210b      	movs	r1, #11
 8000418:	2088      	movs	r0, #136	@ 0x88
 800041a:	f000 f9e7 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 800041e:	2001      	movs	r0, #1
 8000420:	f002 fdc8 	bl	8002fb4 <HAL_Delay>
    RA8875_write_reg (RA8875_PLLC2, RA8875_PLLC2_DIV4);
 8000424:	2102      	movs	r1, #2
 8000426:	2089      	movs	r0, #137	@ 0x89
 8000428:	f000 f9e0 	bl	80007ec <RA8875_write_reg>
    HAL_Delay (1);
 800042c:	2001      	movs	r0, #1
 800042e:	f002 fdc1 	bl	8002fb4 <HAL_Delay>
  }
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	240000a4 	.word	0x240000a4

0800043c <RA8875_init>:
/*!
 Initialises the driver IC (clock setup, etc.)
 */
/**************************************************************************/
static void RA8875_init (uint16_t color_depth, uint16_t mcu_bus)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	460a      	mov	r2, r1
 8000446:	80fb      	strh	r3, [r7, #6]
 8000448:	4613      	mov	r3, r2
 800044a:	80bb      	strh	r3, [r7, #4]

  RA885_pll_init ();
 800044c:	f7ff ffc6 	bl	80003dc <RA885_pll_init>
  RA8875_write_reg (RA8875_SYSR, RA8875_SYSR_16BPP | RA8875_SYSR_MCU8);
 8000450:	210c      	movs	r1, #12
 8000452:	2010      	movs	r0, #16
 8000454:	f000 f9ca 	bl	80007ec <RA8875_write_reg>
  uint8_t vsync_pw;
  uint16_t vsync_nondisp;
  uint16_t vsync_start;

  /* Set the correct values for the display being used */
  if (_size == RA8875_480x80)
 8000458:	4b8e      	ldr	r3, [pc, #568]	@ (8000694 <RA8875_init+0x258>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d113      	bne.n	8000488 <RA8875_init+0x4c>
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000460:	2382      	movs	r3, #130	@ 0x82
 8000462:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 8000464:	230a      	movs	r3, #10
 8000466:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 8000468:	2308      	movs	r3, #8
 800046a:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 800046c:	2330      	movs	r3, #48	@ 0x30
 800046e:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 8000474:	2303      	movs	r3, #3
 8000476:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 8000478:	2308      	movs	r3, #8
 800047a:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 800047c:	230a      	movs	r3, #10
 800047e:	74bb      	strb	r3, [r7, #18]
    _voffset = 192; // This uses the bottom 80 pixels of a 272 pixel controller
 8000480:	4b85      	ldr	r3, [pc, #532]	@ (8000698 <RA8875_init+0x25c>)
 8000482:	22c0      	movs	r2, #192	@ 0xc0
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	e02e      	b.n	80004e6 <RA8875_init+0xaa>
  }
  else if (_size == RA8875_480x128 || _size == RA8875_480x272)
 8000488:	4b82      	ldr	r3, [pc, #520]	@ (8000694 <RA8875_init+0x258>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <RA8875_init+0x5c>
 8000490:	4b80      	ldr	r3, [pc, #512]	@ (8000694 <RA8875_init+0x258>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d113      	bne.n	80004c0 <RA8875_init+0x84>
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000498:	2382      	movs	r3, #130	@ 0x82
 800049a:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 800049c:	230a      	movs	r3, #10
 800049e:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 80004a0:	2308      	movs	r3, #8
 80004a2:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 80004a4:	2330      	movs	r3, #48	@ 0x30
 80004a6:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 80004ac:	2303      	movs	r3, #3
 80004ae:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 80004b0:	2308      	movs	r3, #8
 80004b2:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 80004b4:	230a      	movs	r3, #10
 80004b6:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 80004b8:	4b77      	ldr	r3, [pc, #476]	@ (8000698 <RA8875_init+0x25c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
 80004be:	e012      	b.n	80004e6 <RA8875_init+0xaa>
  }
  else // (_size == RA8875_800x480)
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_2CLK;
 80004c0:	2381      	movs	r3, #129	@ 0x81
 80004c2:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 26;
 80004c4:	231a      	movs	r3, #26
 80004c6:	74fb      	strb	r3, [r7, #19]
    hsync_start = 32;
 80004c8:	2320      	movs	r3, #32
 80004ca:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 96;
 80004cc:	2360      	movs	r3, #96	@ 0x60
 80004ce:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 32;
 80004d4:	2320      	movs	r3, #32
 80004d6:	823b      	strh	r3, [r7, #16]
    vsync_start = 23;
 80004d8:	2317      	movs	r3, #23
 80004da:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 2;
 80004dc:	2302      	movs	r3, #2
 80004de:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 80004e0:	4b6d      	ldr	r3, [pc, #436]	@ (8000698 <RA8875_init+0x25c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Set color dept and MCU Bus
   */
  RA8875_write_reg (RA8875_SYSR, color_depth | mcu_bus);
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	88bb      	ldrh	r3, [r7, #4]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	2010      	movs	r0, #16
 80004f6:	f000 f979 	bl	80007ec <RA8875_write_reg>

  RA8875_write_reg (RA8875_PCSR, pixclk);
 80004fa:	7dfb      	ldrb	r3, [r7, #23]
 80004fc:	4619      	mov	r1, r3
 80004fe:	2004      	movs	r0, #4
 8000500:	f000 f974 	bl	80007ec <RA8875_write_reg>
  HAL_Delay (1);
 8000504:	2001      	movs	r0, #1
 8000506:	f002 fd55 	bl	8002fb4 <HAL_Delay>

  /* Horizontal settings registers */
  RA8875_write_reg (RA8875_HDWR, (_width / 8) - 1); // H width: (HDWR + 1) * 8 = 480
 800050a:	4b64      	ldr	r3, [pc, #400]	@ (800069c <RA8875_init+0x260>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	08db      	lsrs	r3, r3, #3
 8000510:	b29b      	uxth	r3, r3
 8000512:	b2db      	uxtb	r3, r3
 8000514:	3b01      	subs	r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	2014      	movs	r0, #20
 800051c:	f000 f966 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HNDFTR, RA8875_HNDFTR_DE_HIGH + hsync_finetune);
 8000520:	7d3b      	ldrb	r3, [r7, #20]
 8000522:	4619      	mov	r1, r3
 8000524:	2015      	movs	r0, #21
 8000526:	f000 f961 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HNDR, (hsync_nondisp - hsync_finetune - 2) / 8); // H non-display: HNDR * 8 + HNDFTR + 2 = 10
 800052a:	7cfa      	ldrb	r2, [r7, #19]
 800052c:	7d3b      	ldrb	r3, [r7, #20]
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	3b02      	subs	r3, #2
 8000532:	2b00      	cmp	r3, #0
 8000534:	da00      	bge.n	8000538 <RA8875_init+0xfc>
 8000536:	3307      	adds	r3, #7
 8000538:	10db      	asrs	r3, r3, #3
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	2016      	movs	r0, #22
 8000540:	f000 f954 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HSTR, hsync_start / 8 - 1); // Hsync start: (HSTR + 1)*8
 8000544:	7dbb      	ldrb	r3, [r7, #22]
 8000546:	08db      	lsrs	r3, r3, #3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	3b01      	subs	r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	2017      	movs	r0, #23
 8000552:	f000 f94b 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HPWR,
 8000556:	7d7b      	ldrb	r3, [r7, #21]
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	b2db      	uxtb	r3, r3
 800055c:	3b01      	subs	r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4619      	mov	r1, r3
 8000562:	2018      	movs	r0, #24
 8000564:	f000 f942 	bl	80007ec <RA8875_write_reg>
  RA8875_HPWR_LOW + (hsync_pw / 8 - 1)); // HSync pulse width = (HPWR+1) * 8

  /* Vertical settings registers */
  RA8875_write_reg (RA8875_VDHR0, (uint16_t) (_height - 1 + _voffset) & 0xFF);
 8000568:	4b4d      	ldr	r3, [pc, #308]	@ (80006a0 <RA8875_init+0x264>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b4a      	ldr	r3, [pc, #296]	@ (8000698 <RA8875_init+0x25c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	3b01      	subs	r3, #1
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	2019      	movs	r0, #25
 800057e:	f000 f935 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VDHR1, (uint16_t) (_height - 1 + _voffset) >> 8);
 8000582:	4b45      	ldr	r3, [pc, #276]	@ (8000698 <RA8875_init+0x25c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b45      	ldr	r3, [pc, #276]	@ (80006a0 <RA8875_init+0x264>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	4413      	add	r3, r2
 800058e:	b29b      	uxth	r3, r3
 8000590:	3b01      	subs	r3, #1
 8000592:	b29b      	uxth	r3, r3
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	201a      	movs	r0, #26
 800059e:	f000 f925 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VNDR0, vsync_nondisp - 1); // V non-display period = VNDR + 1
 80005a2:	8a3b      	ldrh	r3, [r7, #16]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	3b01      	subs	r3, #1
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	201b      	movs	r0, #27
 80005ae:	f000 f91d 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VNDR1, vsync_nondisp >> 8);
 80005b2:	8a3b      	ldrh	r3, [r7, #16]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	201c      	movs	r0, #28
 80005be:	f000 f915 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSTR0, vsync_start - 1); // Vsync start position = VSTR + 1
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	3b01      	subs	r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	201d      	movs	r0, #29
 80005ce:	f000 f90d 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSTR1, vsync_start >> 8);
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	201e      	movs	r0, #30
 80005de:	f000 f905 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VPWR,
 80005e2:	7cbb      	ldrb	r3, [r7, #18]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4619      	mov	r1, r3
 80005ea:	201f      	movs	r0, #31
 80005ec:	f000 f8fe 	bl	80007ec <RA8875_write_reg>
  RA8875_VPWR_LOW + vsync_pw - 1); // Vsync pulse width = VPWR + 1

  /* Set active window X */
  RA8875_write_reg (RA8875_HSAW0, 0); // horizontal start point
 80005f0:	2100      	movs	r1, #0
 80005f2:	2030      	movs	r0, #48	@ 0x30
 80005f4:	f000 f8fa 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HSAW1, 0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2031      	movs	r0, #49	@ 0x31
 80005fc:	f000 f8f6 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HEAW0, (uint16_t) (_width - 1) & 0xFF); // horizontal end point
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <RA8875_init+0x260>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	3b01      	subs	r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4619      	mov	r1, r3
 800060c:	2034      	movs	r0, #52	@ 0x34
 800060e:	f000 f8ed 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_HEAW1, (uint16_t) (_width - 1) >> 8);
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <RA8875_init+0x260>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	b29b      	uxth	r3, r3
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b29b      	uxth	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	2035      	movs	r0, #53	@ 0x35
 8000624:	f000 f8e2 	bl	80007ec <RA8875_write_reg>

  /* Set active window Y */
  RA8875_write_reg (RA8875_VSAW0, 0 + _voffset); // vertical start point
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <RA8875_init+0x25c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	2032      	movs	r0, #50	@ 0x32
 8000630:	f000 f8dc 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VSAW1, 0 + _voffset);
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <RA8875_init+0x25c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	2033      	movs	r0, #51	@ 0x33
 800063c:	f000 f8d6 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VEAW0, (uint16_t) (_height - 1 + _voffset) & 0xFF); // vertical end point
 8000640:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <RA8875_init+0x264>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <RA8875_init+0x25c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	3b01      	subs	r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	2036      	movs	r0, #54	@ 0x36
 8000656:	f000 f8c9 	bl	80007ec <RA8875_write_reg>
  RA8875_write_reg (RA8875_VEAW1, (uint16_t) (_height - 1 + _voffset) >> 8);
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <RA8875_init+0x25c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <RA8875_init+0x264>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	4413      	add	r3, r2
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b01      	subs	r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	b29b      	uxth	r3, r3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	2037      	movs	r0, #55	@ 0x37
 8000676:	f000 f8b9 	bl	80007ec <RA8875_write_reg>
   */
//  RA8875_write_reg (RA8875_DPCR, RA8875_DPCR_2_LAYER);
  /* ToDo: Setup touch panel? */

  /* Clear the entire window */
  RA8875_write_reg (RA8875_MCLR, RA8875_MCLR_START | RA8875_MCLR_FULL);
 800067a:	2180      	movs	r1, #128	@ 0x80
 800067c:	208e      	movs	r0, #142	@ 0x8e
 800067e:	f000 f8b5 	bl	80007ec <RA8875_write_reg>
  HAL_Delay (500);
 8000682:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000686:	f002 fc95 	bl	8002fb4 <HAL_Delay>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	240000a4 	.word	0x240000a4
 8000698:	240000ac 	.word	0x240000ac
 800069c:	240000a6 	.word	0x240000a6
 80006a0:	240000a8 	.word	0x240000a8

080006a4 <RA8875_begin>:
 'RA8875_800x480' (5" and 7" displays)
 @return 1 if we reached the end 0 if some error occurs
 */
/**************************************************************************/
uint8_t RA8875_begin (GPIO_TypeDef *reset_port, uint16_t reset_pin, GPIO_TypeDef *wait_port, uint16_t wait_pin, RA8875_sizes_e s, RA8875_bpp_e bpp)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	461a      	mov	r2, r3
 80006b0:	460b      	mov	r3, r1
 80006b2:	817b      	strh	r3, [r7, #10]
 80006b4:	4613      	mov	r3, r2
 80006b6:	813b      	strh	r3, [r7, #8]
  _reset_port = reset_port;
 80006b8:	4a38      	ldr	r2, [pc, #224]	@ (800079c <RA8875_begin+0xf8>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6013      	str	r3, [r2, #0]
  _reset_pin = reset_pin;
 80006be:	4a38      	ldr	r2, [pc, #224]	@ (80007a0 <RA8875_begin+0xfc>)
 80006c0:	897b      	ldrh	r3, [r7, #10]
 80006c2:	8013      	strh	r3, [r2, #0]
  _size = s;
 80006c4:	4a37      	ldr	r2, [pc, #220]	@ (80007a4 <RA8875_begin+0x100>)
 80006c6:	7e3b      	ldrb	r3, [r7, #24]
 80006c8:	7013      	strb	r3, [r2, #0]
  _wait_port = wait_port;
 80006ca:	4a37      	ldr	r2, [pc, #220]	@ (80007a8 <RA8875_begin+0x104>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6013      	str	r3, [r2, #0]
  _wait_pin = wait_pin;
 80006d0:	4a36      	ldr	r2, [pc, #216]	@ (80007ac <RA8875_begin+0x108>)
 80006d2:	893b      	ldrh	r3, [r7, #8]
 80006d4:	8013      	strh	r3, [r2, #0]
  _color_depth = bpp;
 80006d6:	4a36      	ldr	r2, [pc, #216]	@ (80007b0 <RA8875_begin+0x10c>)
 80006d8:	7f3b      	ldrb	r3, [r7, #28]
 80006da:	7013      	strb	r3, [r2, #0]
  //Wait 50 ms
  HAL_Delay (50);
 80006dc:	2032      	movs	r0, #50	@ 0x32
 80006de:	f002 fc69 	bl	8002fb4 <HAL_Delay>

  if (_size == RA8875_480x80)
 80006e2:	4b30      	ldr	r3, [pc, #192]	@ (80007a4 <RA8875_begin+0x100>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d107      	bne.n	80006fa <RA8875_begin+0x56>
  {
    _width = 480;
 80006ea:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <RA8875_begin+0x110>)
 80006ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80006f0:	801a      	strh	r2, [r3, #0]
    _height = 80;
 80006f2:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <RA8875_begin+0x114>)
 80006f4:	2250      	movs	r2, #80	@ 0x50
 80006f6:	801a      	strh	r2, [r3, #0]
 80006f8:	e027      	b.n	800074a <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_480x128)
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <RA8875_begin+0x100>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d107      	bne.n	8000712 <RA8875_begin+0x6e>
  {
    _width = 480;
 8000702:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <RA8875_begin+0x110>)
 8000704:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000708:	801a      	strh	r2, [r3, #0]
    _height = 128;
 800070a:	4b2b      	ldr	r3, [pc, #172]	@ (80007b8 <RA8875_begin+0x114>)
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	801a      	strh	r2, [r3, #0]
 8000710:	e01b      	b.n	800074a <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_480x272)
 8000712:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <RA8875_begin+0x100>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d108      	bne.n	800072c <RA8875_begin+0x88>
  {
    _width = 480;
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <RA8875_begin+0x110>)
 800071c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000720:	801a      	strh	r2, [r3, #0]
    _height = 272;
 8000722:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <RA8875_begin+0x114>)
 8000724:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000728:	801a      	strh	r2, [r3, #0]
 800072a:	e00e      	b.n	800074a <RA8875_begin+0xa6>
  }
  else if (_size == RA8875_800x480)
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <RA8875_begin+0x100>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b03      	cmp	r3, #3
 8000732:	d108      	bne.n	8000746 <RA8875_begin+0xa2>
  {
    _width = 800;
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <RA8875_begin+0x110>)
 8000736:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800073a:	801a      	strh	r2, [r3, #0]
    _height = 480;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <RA8875_begin+0x114>)
 800073e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000742:	801a      	strh	r2, [r3, #0]
 8000744:	e001      	b.n	800074a <RA8875_begin+0xa6>
  }
  else
  {
    return 0;
 8000746:	2300      	movs	r3, #0
 8000748:	e024      	b.n	8000794 <RA8875_begin+0xf0>
  }
  _rotation = 0;
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <RA8875_begin+0x118>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]

  //Display hardware reset. Reset is active LOW
  LCD_RESET_OFF
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <RA8875_begin+0xfc>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <RA8875_begin+0xf8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	0412      	lsls	r2, r2, #16
 800075c:	619a      	str	r2, [r3, #24]
  ;
  HAL_Delay (10);
 800075e:	200a      	movs	r0, #10
 8000760:	f002 fc28 	bl	8002fb4 <HAL_Delay>
  LCD_RESET_ON
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <RA8875_begin+0xfc>)
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <RA8875_begin+0xf8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	619a      	str	r2, [r3, #24]
  ;
  HAL_Delay (10);
 800076e:	200a      	movs	r0, #10
 8000770:	f002 fc20 	bl	8002fb4 <HAL_Delay>
  RA8875_soft_reset ();
 8000774:	f7ff fe22 	bl	80003bc <RA8875_soft_reset>
  HAL_Delay (10);
 8000778:	200a      	movs	r0, #10
 800077a:	f002 fc1b 	bl	8002fb4 <HAL_Delay>
  RA8875_init (((bpp == RA8875_8BPP) ? RA8875_SYSR_8BPP : RA8875_SYSR_16BPP), RA8875_SYSR_MCU8);
 800077e:	7f3b      	ldrb	r3, [r7, #28]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <RA8875_begin+0xe4>
 8000784:	2300      	movs	r3, #0
 8000786:	e000      	b.n	800078a <RA8875_begin+0xe6>
 8000788:	230c      	movs	r3, #12
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe55 	bl	800043c <RA8875_init>

  return 1;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	240000b0 	.word	0x240000b0
 80007a0:	240000b4 	.word	0x240000b4
 80007a4:	240000a4 	.word	0x240000a4
 80007a8:	240000b8 	.word	0x240000b8
 80007ac:	240000bc 	.word	0x240000bc
 80007b0:	240000be 	.word	0x240000be
 80007b4:	240000a6 	.word	0x240000a6
 80007b8:	240000a8 	.word	0x240000a8
 80007bc:	240000ab 	.word	0x240000ab

080007c0 <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80007c4:	bf00      	nop
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <RA8875_BUS_FREE+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	4a06      	ldr	r2, [pc, #24]	@ (80007e8 <RA8875_BUS_FREE+0x28>)
 80007ce:	8812      	ldrh	r2, [r2, #0]
 80007d0:	4013      	ands	r3, r2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f7      	beq.n	80007c6 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	240000b8 	.word	0x240000b8
 80007e8:	240000bc 	.word	0x240000bc

080007ec <RA8875_write_reg>:
 @param reg Register to write to
 @param val Value to write
 */
/**************************************************************************/
void RA8875_write_reg (uint8_t reg, uint8_t val)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
  RA8875_write_command (reg);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f862 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (val);
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f814 	bl	8000834 <RA8875_write_data>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f851 	bl	80008c8 <RA8875_write_command>
  return RA8875_read_data ();
 8000826:	f000 f843 	bl	80008b0 <RA8875_read_data>
 800082a:	4603      	mov	r3, r0
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if (LCD_WAIT_STATUS == 0)
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <RA8875_write_data+0x6c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <RA8875_write_data+0x70>)
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	4013      	ands	r3, r2
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ffb6 	bl	80007c0 <RA8875_BUS_FREE>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d01d      	beq.n	8000896 <RA8875_write_data+0x62>
  }
  uint8_t rs_rw_info = 0b00000000;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
//  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000864:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <RA8875_write_data+0x74>)
 8000866:	f002 fe95 	bl	8003594 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800086a:	f107 010f 	add.w	r1, r7, #15
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	2201      	movs	r2, #1
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <RA8875_write_data+0x78>)
 8000876:	f006 fdf5 	bl	8007464 <HAL_SPI_Transmit>
//  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800087a:	1df9      	adds	r1, r7, #7
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	2201      	movs	r2, #1
 8000882:	480a      	ldr	r0, [pc, #40]	@ (80008ac <RA8875_write_data+0x78>)
 8000884:	f006 fdee 	bl	8007464 <HAL_SPI_Transmit>

//  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800088e:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <RA8875_write_data+0x74>)
 8000890:	f002 fe80 	bl	8003594 <HAL_GPIO_WritePin>
 8000894:	e000      	b.n	8000898 <RA8875_write_data+0x64>
    if (!(RA8875_BUS_FREE (1))) return;
 8000896:	bf00      	nop
}
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	240000b8 	.word	0x240000b8
 80008a4:	240000bc 	.word	0x240000bc
 80008a8:	58020c00 	.word	0x58020c00
 80008ac:	2400011c 	.word	0x2400011c

080008b0 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
//
//  HAL_SPI_Transmit(&hspi2, &rs_rw_info, 1, 1000);
//  HAL_SPI_Receive(&hspi2, &data, 1, 1000);
//
//  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
  return data;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <RA8875_write_command+0x6c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	4a17      	ldr	r2, [pc, #92]	@ (8000938 <RA8875_write_command+0x70>)
 80008da:	8812      	ldrh	r2, [r2, #0]
 80008dc:	4013      	ands	r3, r2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d105      	bne.n	80008ee <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff ff6c 	bl	80007c0 <RA8875_BUS_FREE>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d01d      	beq.n	800092a <RA8875_write_command+0x62>
  }
  uint8_t rs_rw_info = 0b10000000;
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	73fb      	strb	r3, [r7, #15]
//  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f8:	4810      	ldr	r0, [pc, #64]	@ (800093c <RA8875_write_command+0x74>)
 80008fa:	f002 fe4b 	bl	8003594 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 80008fe:	f107 010f 	add.w	r1, r7, #15
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	2201      	movs	r2, #1
 8000908:	480d      	ldr	r0, [pc, #52]	@ (8000940 <RA8875_write_command+0x78>)
 800090a:	f006 fdab 	bl	8007464 <HAL_SPI_Transmit>
//  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800090e:	1df9      	adds	r1, r7, #7
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	2201      	movs	r2, #1
 8000916:	480a      	ldr	r0, [pc, #40]	@ (8000940 <RA8875_write_command+0x78>)
 8000918:	f006 fda4 	bl	8007464 <HAL_SPI_Transmit>

//  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000922:	4806      	ldr	r0, [pc, #24]	@ (800093c <RA8875_write_command+0x74>)
 8000924:	f002 fe36 	bl	8003594 <HAL_GPIO_WritePin>
 8000928:	e000      	b.n	800092c <RA8875_write_command+0x64>
    if (!(RA8875_BUS_FREE (1))) return;
 800092a:	bf00      	nop
}
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	240000b8 	.word	0x240000b8
 8000938:	240000bc 	.word	0x240000bc
 800093c:	58020c00 	.word	0x58020c00
 8000940:	2400011c 	.word	0x2400011c

08000944 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 800094a:	2040      	movs	r0, #64	@ 0x40
 800094c:	f7ff ffbc 	bl	80008c8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000950:	f7ff ffae 	bl	80008b0 <RA8875_read_data>
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800095e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff66 	bl	8000834 <RA8875_write_data>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	4613      	mov	r3, r2
 800097e:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff46 	bl	8000814 <RA8875_read_reg>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	4013      	ands	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1f3      	bne.n	8000980 <RA8875_wait_poll+0x10>
 8000998:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <RA8875_apply_rotation_x+0x34>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d108      	bne.n	80009c8 <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <RA8875_apply_rotation_x+0x38>)
 80009b8:	881a      	ldrh	r2, [r3, #0]
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	b29b      	uxth	r3, r3
 80009c0:	3b01      	subs	r3, #1
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	80fb      	strh	r3, [r7, #6]
      break;
 80009c6:	bf00      	nop
  }

  return x;
 80009c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	240000ab 	.word	0x240000ab
 80009dc:	240000a6 	.word	0x240000a6

080009e0 <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <RA8875_apply_rotation_y+0x40>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d108      	bne.n	8000a04 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <RA8875_apply_rotation_y+0x44>)
 80009f4:	881a      	ldrh	r2, [r3, #0]
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	3b01      	subs	r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	80fb      	strh	r3, [r7, #6]
      break;
 8000a02:	bf00      	nop
  }

  return y + _voffset;
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <RA8875_apply_rotation_y+0x48>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	b21b      	sxth	r3, r3
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	240000ab 	.word	0x240000ab
 8000a24:	240000a8 	.word	0x240000a8
 8000a28:	240000ac 	.word	0x240000ac

08000a2c <circleHelper>:
/*!
 Helper function for higher level circle drawing code
 */
/**************************************************************************/
static void circleHelper (int16_t x, int16_t y, int16_t r, uint16_t color, uint8_t filled)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	80fb      	strh	r3, [r7, #6]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80bb      	strh	r3, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	807b      	strh	r3, [r7, #2]
 8000a46:	4613      	mov	r3, r2
 8000a48:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffa8 	bl	80009a4 <RA8875_apply_rotation_x>
 8000a54:	4603      	mov	r3, r0
 8000a56:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000a58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffbf 	bl	80009e0 <RA8875_apply_rotation_y>
 8000a62:	4603      	mov	r3, r0
 8000a64:	80bb      	strh	r3, [r7, #4]

  /* Set X */
  RA8875_write_command (0x99);
 8000a66:	2099      	movs	r0, #153	@ 0x99
 8000a68:	f7ff ff2e 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x);
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fedf 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x9a);
 8000a76:	209a      	movs	r0, #154	@ 0x9a
 8000a78:	f7ff ff26 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a80:	121b      	asrs	r3, r3, #8
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fed4 	bl	8000834 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x9b);
 8000a8c:	209b      	movs	r0, #155	@ 0x9b
 8000a8e:	f7ff ff1b 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y);
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fecc 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x9c);
 8000a9c:	209c      	movs	r0, #156	@ 0x9c
 8000a9e:	f7ff ff13 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000aa2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aa6:	121b      	asrs	r3, r3, #8
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fec1 	bl	8000834 <RA8875_write_data>

  /* Set Radius */
  RA8875_write_command (0x9d);
 8000ab2:	209d      	movs	r0, #157	@ 0x9d
 8000ab4:	f7ff ff08 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (r);
 8000ab8:	887b      	ldrh	r3, [r7, #2]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff feb9 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000ac2:	2063      	movs	r0, #99	@ 0x63
 8000ac4:	f7ff ff00 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000ac8:	883b      	ldrh	r3, [r7, #0]
 8000aca:	0adb      	lsrs	r3, r3, #11
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff feaf 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000ad6:	2064      	movs	r0, #100	@ 0x64
 8000ad8:	f7ff fef6 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000adc:	883b      	ldrh	r3, [r7, #0]
 8000ade:	115b      	asrs	r3, r3, #5
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fea3 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000aee:	2065      	movs	r0, #101	@ 0x65
 8000af0:	f7ff feea 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000af4:	883b      	ldrh	r3, [r7, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	f003 031f 	and.w	r3, r3, #31
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fe98 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000b04:	2090      	movs	r0, #144	@ 0x90
 8000b06:	f7ff fedf 	bl	80008c8 <RA8875_write_command>
  if (filled)
 8000b0a:	7e3b      	ldrb	r3, [r7, #24]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <circleHelper+0xec>
  {
    RA8875_write_data (RA8875_DCR_CIRCLE_START | RA8875_DCR_FILL);
 8000b10:	2060      	movs	r0, #96	@ 0x60
 8000b12:	f7ff fe8f 	bl	8000834 <RA8875_write_data>
 8000b16:	e002      	b.n	8000b1e <circleHelper+0xf2>
  }
  else
  {
    RA8875_write_data (RA8875_DCR_CIRCLE_START | RA8875_DCR_NOFILL);
 8000b18:	2040      	movs	r0, #64	@ 0x40
 8000b1a:	f7ff fe8b 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_CIRCLE_STATUS);
 8000b1e:	2140      	movs	r1, #64	@ 0x40
 8000b20:	2090      	movs	r0, #144	@ 0x90
 8000b22:	f7ff ff25 	bl	8000970 <RA8875_wait_poll>
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}

08000b2e <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4604      	mov	r4, r0
 8000b36:	4608      	mov	r0, r1
 8000b38:	4611      	mov	r1, r2
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4623      	mov	r3, r4
 8000b3e:	80fb      	strh	r3, [r7, #6]
 8000b40:	4603      	mov	r3, r0
 8000b42:	80bb      	strh	r3, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff27 	bl	80009a4 <RA8875_apply_rotation_x>
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000b5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff3e 	bl	80009e0 <RA8875_apply_rotation_y>
 8000b64:	4603      	mov	r3, r0
 8000b66:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000b68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff19 	bl	80009a4 <RA8875_apply_rotation_x>
 8000b72:	4603      	mov	r3, r0
 8000b74:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000b76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff30 	bl	80009e0 <RA8875_apply_rotation_y>
 8000b80:	4603      	mov	r3, r0
 8000b82:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 8000b84:	2091      	movs	r0, #145	@ 0x91
 8000b86:	f7ff fe9f 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x);
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fe50 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000b94:	2092      	movs	r0, #146	@ 0x92
 8000b96:	f7ff fe97 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9e:	121b      	asrs	r3, r3, #8
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe45 	bl	8000834 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000baa:	2093      	movs	r0, #147	@ 0x93
 8000bac:	f7ff fe8c 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y);
 8000bb0:	88bb      	ldrh	r3, [r7, #4]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fe3d 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000bba:	2094      	movs	r0, #148	@ 0x94
 8000bbc:	f7ff fe84 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000bc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bc4:	121b      	asrs	r3, r3, #8
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fe32 	bl	8000834 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000bd0:	2095      	movs	r0, #149	@ 0x95
 8000bd2:	f7ff fe79 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (w);
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe2a 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000be0:	2096      	movs	r0, #150	@ 0x96
 8000be2:	f7ff fe71 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000be6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bea:	121b      	asrs	r3, r3, #8
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe1f 	bl	8000834 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000bf6:	2097      	movs	r0, #151	@ 0x97
 8000bf8:	f7ff fe66 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (h);
 8000bfc:	883b      	ldrh	r3, [r7, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe17 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000c06:	2098      	movs	r0, #152	@ 0x98
 8000c08:	f7ff fe5e 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000c0c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c10:	121b      	asrs	r3, r3, #8
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe0c 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c1c:	2063      	movs	r0, #99	@ 0x63
 8000c1e:	f7ff fe53 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c22:	8b3b      	ldrh	r3, [r7, #24]
 8000c24:	0adb      	lsrs	r3, r3, #11
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fe02 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c30:	2064      	movs	r0, #100	@ 0x64
 8000c32:	f7ff fe49 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c36:	8b3b      	ldrh	r3, [r7, #24]
 8000c38:	115b      	asrs	r3, r3, #5
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fdf6 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000c48:	2065      	movs	r0, #101	@ 0x65
 8000c4a:	f7ff fe3d 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000c4e:	8b3b      	ldrh	r3, [r7, #24]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f003 031f 	and.w	r3, r3, #31
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fdeb 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000c5e:	2090      	movs	r0, #144	@ 0x90
 8000c60:	f7ff fe32 	bl	80008c8 <RA8875_write_command>
  if (filled)
 8000c64:	7f3b      	ldrb	r3, [r7, #28]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000c6a:	20b0      	movs	r0, #176	@ 0xb0
 8000c6c:	f7ff fde2 	bl	8000834 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 8000c70:	e002      	b.n	8000c78 <rectHelper+0x14a>
    RA8875_write_data (0x90);
 8000c72:	2090      	movs	r0, #144	@ 0x90
 8000c74:	f7ff fdde 	bl	8000834 <RA8875_write_data>
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd90      	pop	{r4, r7, pc}

08000c80 <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	4608      	mov	r0, r1
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4623      	mov	r3, r4
 8000c90:	80fb      	strh	r3, [r7, #6]
 8000c92:	4603      	mov	r3, r0
 8000c94:	80bb      	strh	r3, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	807b      	strh	r3, [r7, #2]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 8000c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fe7e 	bl	80009a4 <RA8875_apply_rotation_x>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 8000cac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fe95 	bl	80009e0 <RA8875_apply_rotation_y>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 8000cba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fe70 	bl	80009a4 <RA8875_apply_rotation_x>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 8000cc8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fe87 	bl	80009e0 <RA8875_apply_rotation_y>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000cd6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fe62 	bl	80009a4 <RA8875_apply_rotation_x>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 8000ce4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fe79 	bl	80009e0 <RA8875_apply_rotation_y>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 8000cf2:	2091      	movs	r0, #145	@ 0x91
 8000cf4:	f7ff fde8 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x0);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fd99 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000d02:	2092      	movs	r0, #146	@ 0x92
 8000d04:	f7ff fde0 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0c:	121b      	asrs	r3, r3, #8
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fd8e 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000d18:	2093      	movs	r0, #147	@ 0x93
 8000d1a:	f7ff fdd5 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y0);
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fd86 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000d28:	2094      	movs	r0, #148	@ 0x94
 8000d2a:	f7ff fdcd 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 8000d2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d32:	121b      	asrs	r3, r3, #8
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fd7b 	bl	8000834 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 8000d3e:	2095      	movs	r0, #149	@ 0x95
 8000d40:	f7ff fdc2 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x1);
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fd73 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000d4e:	2096      	movs	r0, #150	@ 0x96
 8000d50:	f7ff fdba 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 8000d54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d58:	121b      	asrs	r3, r3, #8
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fd68 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x97);
 8000d64:	2097      	movs	r0, #151	@ 0x97
 8000d66:	f7ff fdaf 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y1);
 8000d6a:	883b      	ldrh	r3, [r7, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fd60 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000d74:	2098      	movs	r0, #152	@ 0x98
 8000d76:	f7ff fda7 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 8000d7a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d7e:	121b      	asrs	r3, r3, #8
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fd55 	bl	8000834 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 8000d8a:	20a9      	movs	r0, #169	@ 0xa9
 8000d8c:	f7ff fd9c 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x2);
 8000d90:	8b3b      	ldrh	r3, [r7, #24]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd4d 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xAA);
 8000d9a:	20aa      	movs	r0, #170	@ 0xaa
 8000d9c:	f7ff fd94 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 8000da0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000da4:	121b      	asrs	r3, r3, #8
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fd42 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xAB);
 8000db0:	20ab      	movs	r0, #171	@ 0xab
 8000db2:	f7ff fd89 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y2);
 8000db6:	8bbb      	ldrh	r3, [r7, #28]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fd3a 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xAC);
 8000dc0:	20ac      	movs	r0, #172	@ 0xac
 8000dc2:	f7ff fd81 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 8000dc6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000dca:	121b      	asrs	r3, r3, #8
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fd2f 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000dd6:	2063      	movs	r0, #99	@ 0x63
 8000dd8:	f7ff fd76 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000ddc:	8c3b      	ldrh	r3, [r7, #32]
 8000dde:	0adb      	lsrs	r3, r3, #11
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fd25 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000dea:	2064      	movs	r0, #100	@ 0x64
 8000dec:	f7ff fd6c 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000df0:	8c3b      	ldrh	r3, [r7, #32]
 8000df2:	115b      	asrs	r3, r3, #5
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fd19 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000e02:	2065      	movs	r0, #101	@ 0x65
 8000e04:	f7ff fd60 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000e08:	8c3b      	ldrh	r3, [r7, #32]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 031f 	and.w	r3, r3, #31
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fd0e 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000e18:	2090      	movs	r0, #144	@ 0x90
 8000e1a:	f7ff fd55 	bl	80008c8 <RA8875_write_command>
  if (filled)
 8000e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000e26:	20a1      	movs	r0, #161	@ 0xa1
 8000e28:	f7ff fd04 	bl	8000834 <RA8875_write_data>
 8000e2c:	e002      	b.n	8000e34 <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 8000e2e:	2081      	movs	r0, #129	@ 0x81
 8000e30:	f7ff fd00 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 8000e34:	2180      	movs	r1, #128	@ 0x80
 8000e36:	2090      	movs	r0, #144	@ 0x90
 8000e38:	f7ff fd9a 	bl	8000970 <RA8875_wait_poll>
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}

08000e44 <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	4623      	mov	r3, r4
 8000e54:	80fb      	strh	r3, [r7, #6]
 8000e56:	4603      	mov	r3, r0
 8000e58:	80bb      	strh	r3, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	807b      	strh	r3, [r7, #2]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 8000e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fd9c 	bl	80009a4 <RA8875_apply_rotation_x>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 8000e70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fdb3 	bl	80009e0 <RA8875_apply_rotation_y>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 8000e7e:	20a5      	movs	r0, #165	@ 0xa5
 8000e80:	f7ff fd22 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (xCenter);
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fcd3 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA6);
 8000e8e:	20a6      	movs	r0, #166	@ 0xa6
 8000e90:	f7ff fd1a 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 8000e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e98:	121b      	asrs	r3, r3, #8
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fcc8 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA7);
 8000ea4:	20a7      	movs	r0, #167	@ 0xa7
 8000ea6:	f7ff fd0f 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (yCenter);
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fcc0 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA8);
 8000eb4:	20a8      	movs	r0, #168	@ 0xa8
 8000eb6:	f7ff fd07 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 8000eba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ebe:	121b      	asrs	r3, r3, #8
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fcb5 	bl	8000834 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 8000eca:	20a1      	movs	r0, #161	@ 0xa1
 8000ecc:	f7ff fcfc 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (longAxis);
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fcad 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000eda:	20a2      	movs	r0, #162	@ 0xa2
 8000edc:	f7ff fcf4 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000ee0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ee4:	121b      	asrs	r3, r3, #8
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fca2 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000ef0:	20a3      	movs	r0, #163	@ 0xa3
 8000ef2:	f7ff fce9 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000ef6:	883b      	ldrh	r3, [r7, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fc9a 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000f00:	20a4      	movs	r0, #164	@ 0xa4
 8000f02:	f7ff fce1 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000f06:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f0a:	121b      	asrs	r3, r3, #8
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fc8f 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000f16:	2063      	movs	r0, #99	@ 0x63
 8000f18:	f7ff fcd6 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000f1c:	8b3b      	ldrh	r3, [r7, #24]
 8000f1e:	0adb      	lsrs	r3, r3, #11
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fc85 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000f2a:	2064      	movs	r0, #100	@ 0x64
 8000f2c:	f7ff fccc 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000f30:	8b3b      	ldrh	r3, [r7, #24]
 8000f32:	115b      	asrs	r3, r3, #5
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fc79 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000f42:	2065      	movs	r0, #101	@ 0x65
 8000f44:	f7ff fcc0 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000f48:	8b3b      	ldrh	r3, [r7, #24]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fc6e 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000f58:	20a0      	movs	r0, #160	@ 0xa0
 8000f5a:	f7ff fcb5 	bl	80008c8 <RA8875_write_command>
  if (filled)
 8000f5e:	7f3b      	ldrb	r3, [r7, #28]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000f64:	20c0      	movs	r0, #192	@ 0xc0
 8000f66:	f7ff fc65 	bl	8000834 <RA8875_write_data>
 8000f6a:	e002      	b.n	8000f72 <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000f6c:	2080      	movs	r0, #128	@ 0x80
 8000f6e:	f7ff fc61 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000f72:	2180      	movs	r1, #128	@ 0x80
 8000f74:	20a0      	movs	r0, #160	@ 0xa0
 8000f76:	f7ff fcfb 	bl	8000970 <RA8875_wait_poll>
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}

08000f82 <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000f82:	b590      	push	{r4, r7, lr}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4604      	mov	r4, r0
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4623      	mov	r3, r4
 8000f92:	80fb      	strh	r3, [r7, #6]
 8000f94:	4603      	mov	r3, r0
 8000f96:	80bb      	strh	r3, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fcfd 	bl	80009a4 <RA8875_apply_rotation_x>
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000fae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fd14 	bl	80009e0 <RA8875_apply_rotation_y>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000fbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fcef 	bl	80009a4 <RA8875_apply_rotation_x>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000fca:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fd06 	bl	80009e0 <RA8875_apply_rotation_y>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 8000fd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dd05      	ble.n	8000ff0 <roundRectHelper+0x6e>
 8000fe4:	1cba      	adds	r2, r7, #2
 8000fe6:	1dbb      	adds	r3, r7, #6
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff f9d0 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8000ff0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ff4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dd05      	ble.n	8001008 <roundRectHelper+0x86>
 8000ffc:	463a      	mov	r2, r7
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f9c4 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 8001008:	2091      	movs	r0, #145	@ 0x91
 800100a:	f7ff fc5d 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x);
 800100e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fc0d 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x92);
 800101a:	2092      	movs	r0, #146	@ 0x92
 800101c:	f7ff fc54 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8001020:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001024:	121b      	asrs	r3, r3, #8
 8001026:	b21b      	sxth	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fc02 	bl	8000834 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8001030:	2093      	movs	r0, #147	@ 0x93
 8001032:	f7ff fc49 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y);
 8001036:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fbf9 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x94);
 8001042:	2094      	movs	r0, #148	@ 0x94
 8001044:	f7ff fc40 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8001048:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800104c:	121b      	asrs	r3, r3, #8
 800104e:	b21b      	sxth	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fbee 	bl	8000834 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8001058:	2095      	movs	r0, #149	@ 0x95
 800105a:	f7ff fc35 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (w);
 800105e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fbe5 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x96);
 800106a:	2096      	movs	r0, #150	@ 0x96
 800106c:	f7ff fc2c 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8001070:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001074:	121b      	asrs	r3, r3, #8
 8001076:	b21b      	sxth	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fbda 	bl	8000834 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8001080:	2097      	movs	r0, #151	@ 0x97
 8001082:	f7ff fc21 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (h);
 8001086:	f9b7 3000 	ldrsh.w	r3, [r7]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fbd1 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x98);
 8001092:	2098      	movs	r0, #152	@ 0x98
 8001094:	f7ff fc18 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8001098:	f9b7 3000 	ldrsh.w	r3, [r7]
 800109c:	121b      	asrs	r3, r3, #8
 800109e:	b21b      	sxth	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fbc6 	bl	8000834 <RA8875_write_data>

  RA8875_write_command (0xA1);
 80010a8:	20a1      	movs	r0, #161	@ 0xa1
 80010aa:	f7ff fc0d 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (r);
 80010ae:	8b3b      	ldrh	r3, [r7, #24]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fbbe 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA2);
 80010b8:	20a2      	movs	r0, #162	@ 0xa2
 80010ba:	f7ff fc05 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 80010be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010c2:	121b      	asrs	r3, r3, #8
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fbb3 	bl	8000834 <RA8875_write_data>

  RA8875_write_command (0xA3);
 80010ce:	20a3      	movs	r0, #163	@ 0xa3
 80010d0:	f7ff fbfa 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (r);
 80010d4:	8b3b      	ldrh	r3, [r7, #24]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fbab 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0xA4);
 80010de:	20a4      	movs	r0, #164	@ 0xa4
 80010e0:	f7ff fbf2 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 80010e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010e8:	121b      	asrs	r3, r3, #8
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fba0 	bl	8000834 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 80010f4:	2063      	movs	r0, #99	@ 0x63
 80010f6:	f7ff fbe7 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 80010fa:	8bbb      	ldrh	r3, [r7, #28]
 80010fc:	0adb      	lsrs	r3, r3, #11
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fb96 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 8001108:	2064      	movs	r0, #100	@ 0x64
 800110a:	f7ff fbdd 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800110e:	8bbb      	ldrh	r3, [r7, #28]
 8001110:	115b      	asrs	r3, r3, #5
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fb8a 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8001120:	2065      	movs	r0, #101	@ 0x65
 8001122:	f7ff fbd1 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8001126:	8bbb      	ldrh	r3, [r7, #28]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fb7f 	bl	8000834 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 8001136:	20a0      	movs	r0, #160	@ 0xa0
 8001138:	f7ff fbc6 	bl	80008c8 <RA8875_write_command>
  if (filled)
 800113c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 8001144:	20e0      	movs	r0, #224	@ 0xe0
 8001146:	f7ff fb75 	bl	8000834 <RA8875_write_data>
 800114a:	e002      	b.n	8001152 <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 800114c:	20a0      	movs	r0, #160	@ 0xa0
 800114e:	f7ff fb71 	bl	8000834 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 8001152:	2180      	movs	r1, #128	@ 0x80
 8001154:	20a0      	movs	r0, #160	@ 0xa0
 8001156:	f7ff fc0b 	bl	8000970 <RA8875_wait_poll>
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}

08001162 <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001162:	b590      	push	{r4, r7, lr}
 8001164:	b085      	sub	sp, #20
 8001166:	af02      	add	r7, sp, #8
 8001168:	4604      	mov	r4, r0
 800116a:	4608      	mov	r0, r1
 800116c:	4611      	mov	r1, r2
 800116e:	461a      	mov	r2, r3
 8001170:	4623      	mov	r3, r4
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4603      	mov	r3, r0
 8001176:	80bb      	strh	r3, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	4413      	add	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	3b01      	subs	r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	b21c      	sxth	r4, r3
 800118e:	88ba      	ldrh	r2, [r7, #4]
 8001190:	883b      	ldrh	r3, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	b29b      	uxth	r3, r3
 8001196:	3b01      	subs	r3, #1
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21a      	sxth	r2, r3
 800119c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011a0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80011a4:	2301      	movs	r3, #1
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	8b3b      	ldrh	r3, [r7, #24]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	4622      	mov	r2, r4
 80011b0:	f7ff fcbd 	bl	8000b2e <rectHelper>
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}

080011bc <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <RA8875_fill_screen+0x38>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <RA8875_fill_screen+0x3c>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	b219      	sxth	r1, r3
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	460b      	mov	r3, r1
 80011e4:	2100      	movs	r1, #0
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fca1 	bl	8000b2e <rectHelper>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	240000a6 	.word	0x240000a6
 80011f8:	240000a8 	.word	0x240000a8

080011fc <RA8875_draw_fill_circle>:
 @param r     The circle's radius
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_circle (int16_t x, int16_t y, int16_t r, uint16_t color)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af02      	add	r7, sp, #8
 8001202:	4604      	mov	r4, r0
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4623      	mov	r3, r4
 800120c:	80fb      	strh	r3, [r7, #6]
 800120e:	4603      	mov	r3, r0
 8001210:	80bb      	strh	r3, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]
 8001216:	4613      	mov	r3, r2
 8001218:	803b      	strh	r3, [r7, #0]
  circleHelper (x, y, r, color, 1);
 800121a:	883b      	ldrh	r3, [r7, #0]
 800121c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001220:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001224:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001228:	2401      	movs	r4, #1
 800122a:	9400      	str	r4, [sp, #0]
 800122c:	f7ff fbfe 	bl	8000a2c <circleHelper>
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bd90      	pop	{r4, r7, pc}

08001238 <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b087      	sub	sp, #28
 800123c:	af04      	add	r7, sp, #16
 800123e:	4604      	mov	r4, r0
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	80fb      	strh	r3, [r7, #6]
 800124a:	4603      	mov	r3, r0
 800124c:	80bb      	strh	r3, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 8001256:	f9b7 4000 	ldrsh.w	r4, [r7]
 800125a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800125e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001262:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001266:	2301      	movs	r3, #1
 8001268:	9303      	str	r3, [sp, #12]
 800126a:	8c3b      	ldrh	r3, [r7, #32]
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4623      	mov	r3, r4
 800127c:	f7ff fd00 	bl	8000c80 <triangleHelper>
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}

08001288 <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b085      	sub	sp, #20
 800128c:	af02      	add	r7, sp, #8
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	4603      	mov	r3, r0
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	807b      	strh	r3, [r7, #2]
 80012a2:	4613      	mov	r3, r2
 80012a4:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 80012a6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80012aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	8b3b      	ldrh	r3, [r7, #24]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	4623      	mov	r3, r4
 80012c0:	f7ff fdc0 	bl	8000e44 <ellipseHelper>
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}

080012cc <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	80fb      	strh	r3, [r7, #6]
 80012de:	4603      	mov	r3, r0
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	807b      	strh	r3, [r7, #2]
 80012e6:	4613      	mov	r3, r2
 80012e8:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4413      	add	r3, r2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b21c      	sxth	r4, r3
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	883b      	ldrh	r3, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001302:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001306:	2301      	movs	r3, #1
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	8bbb      	ldrh	r3, [r7, #28]
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4613      	mov	r3, r2
 8001316:	4622      	mov	r2, r4
 8001318:	f7ff fe33 	bl	8000f82 <roundRectHelper>
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	0000      	movs	r0, r0
	...

08001328 <RA8875_draw_hexagon>:

/**************************************************************************/
void RA8875_draw_hexagon(int16_t centerX, int16_t centerY, int16_t radius, uint16_t color) {
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	ed2d 8b04 	vpush	{d8-d9}
 800132e:	b099      	sub	sp, #100	@ 0x64
 8001330:	af04      	add	r7, sp, #16
 8001332:	4604      	mov	r4, r0
 8001334:	4608      	mov	r0, r1
 8001336:	4611      	mov	r1, r2
 8001338:	461a      	mov	r2, r3
 800133a:	4623      	mov	r3, r4
 800133c:	80fb      	strh	r3, [r7, #6]
 800133e:	4603      	mov	r3, r0
 8001340:	80bb      	strh	r3, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	807b      	strh	r3, [r7, #2]
 8001346:	4613      	mov	r3, r2
 8001348:	803b      	strh	r3, [r7, #0]
    int x[6], y[6];
    for (int i = 0; i < 6; ++i) {
 800134a:	2300      	movs	r3, #0
 800134c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800134e:	e051      	b.n	80013f4 <RA8875_draw_hexagon+0xcc>
        double angle = 2 * M_PI * i / 6;
 8001350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800135a:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001488 <RA8875_draw_hexagon+0x160>
 800135e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001362:	eeb1 5b08 	vmov.f64	d5, #24	@ 0x40c00000  6.0
 8001366:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800136a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
        x[i] = centerX + radius * cos(angle);
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800137a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8001386:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800138a:	f009 f92d 	bl	800a5e8 <cos>
 800138e:	eeb0 7b40 	vmov.f64	d7, d0
 8001392:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001396:	ee38 7b07 	vadd.f64	d7, d8, d7
 800139a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800139e:	ee17 2a90 	vmov	r2, s15
 80013a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	3350      	adds	r3, #80	@ 0x50
 80013a8:	443b      	add	r3, r7
 80013aa:	f843 2c30 	str.w	r2, [r3, #-48]
        y[i] = centerY + radius * sin(angle);
 80013ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80013ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 80013c6:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80013ca:	f009 f959 	bl	800a680 <sin>
 80013ce:	eeb0 7b40 	vmov.f64	d7, d0
 80013d2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80013d6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013da:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013de:	ee17 2a90 	vmov	r2, s15
 80013e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3350      	adds	r3, #80	@ 0x50
 80013e8:	443b      	add	r3, r7
 80013ea:	f843 2c48 	str.w	r2, [r3, #-72]
    for (int i = 0; i < 6; ++i) {
 80013ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013f0:	3301      	adds	r3, #1
 80013f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	ddaa      	ble.n	8001350 <RA8875_draw_hexagon+0x28>
    }

    for (int i = 0; i < 6; ++i) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013fe:	e038      	b.n	8001472 <RA8875_draw_hexagon+0x14a>
        int next = (i + 1) % 6;
 8001400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <RA8875_draw_hexagon+0x168>)
 8001406:	fb83 3102 	smull	r3, r1, r3, r2
 800140a:	17d3      	asrs	r3, r2, #31
 800140c:	1ac9      	subs	r1, r1, r3
 800140e:	460b      	mov	r3, r1
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	440b      	add	r3, r1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	647b      	str	r3, [r7, #68]	@ 0x44
        // Draw triangles to form the hexagon
        RA8875_draw_fill_triangle(centerX, centerY, x[i], y[i], x[next], y[next], color);
 800141a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3350      	adds	r3, #80	@ 0x50
 8001420:	443b      	add	r3, r7
 8001422:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001426:	b21d      	sxth	r5, r3
 8001428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	3350      	adds	r3, #80	@ 0x50
 800142e:	443b      	add	r3, r7
 8001430:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001434:	b21e      	sxth	r6, r3
 8001436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	3350      	adds	r3, #80	@ 0x50
 800143c:	443b      	add	r3, r7
 800143e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001442:	b21a      	sxth	r2, r3
 8001444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	3350      	adds	r3, #80	@ 0x50
 800144a:	443b      	add	r3, r7
 800144c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001450:	b21b      	sxth	r3, r3
 8001452:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001456:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800145a:	8839      	ldrh	r1, [r7, #0]
 800145c:	9102      	str	r1, [sp, #8]
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	9200      	str	r2, [sp, #0]
 8001462:	4633      	mov	r3, r6
 8001464:	462a      	mov	r2, r5
 8001466:	4621      	mov	r1, r4
 8001468:	f7ff fee6 	bl	8001238 <RA8875_draw_fill_triangle>
    for (int i = 0; i < 6; ++i) {
 800146c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800146e:	3301      	adds	r3, #1
 8001470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001474:	2b05      	cmp	r3, #5
 8001476:	ddc3      	ble.n	8001400 <RA8875_draw_hexagon+0xd8>
    }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3754      	adds	r7, #84	@ 0x54
 800147e:	46bd      	mov	sp, r7
 8001480:	ecbd 8b04 	vpop	{d8-d9}
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001486:	bf00      	nop
 8001488:	54442d18 	.word	0x54442d18
 800148c:	401921fb 	.word	0x401921fb
 8001490:	2aaaaaab 	.word	0x2aaaaaab

08001494 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 800149a:	2040      	movs	r0, #64	@ 0x40
 800149c:	f7ff fa14 	bl	80008c8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 80014a0:	f7ff fa06 	bl	80008b0 <RA8875_read_data>
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014ae:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f9be 	bl	8000834 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 80014b8:	2021      	movs	r0, #33	@ 0x21
 80014ba:	f7ff fa05 	bl	80008c8 <RA8875_write_command>
  temp = RA8875_read_data ();
 80014be:	f7ff f9f7 	bl	80008b0 <RA8875_read_data>
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 80014cc:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f9af 	bl	8000834 <RA8875_write_data>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	460a      	mov	r2, r1
 80014e8:	80fb      	strh	r3, [r7, #6]
 80014ea:	4613      	mov	r3, r2
 80014ec:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 80014ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fa56 	bl	80009a4 <RA8875_apply_rotation_x>
 80014f8:	4603      	mov	r3, r0
 80014fa:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 80014fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fa6d 	bl	80009e0 <RA8875_apply_rotation_y>
 8001506:	4603      	mov	r3, r0
 8001508:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 800150a:	202a      	movs	r0, #42	@ 0x2a
 800150c:	f7ff f9dc 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f98d 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x2B);
 800151a:	202b      	movs	r0, #43	@ 0x2b
 800151c:	f7ff f9d4 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f983 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x2C);
 800152e:	202c      	movs	r0, #44	@ 0x2c
 8001530:	f7ff f9ca 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8001534:	88bb      	ldrh	r3, [r7, #4]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f97b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x2D);
 800153e:	202d      	movs	r0, #45	@ 0x2d
 8001540:	f7ff f9c2 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8001544:	88bb      	ldrh	r3, [r7, #4]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	b29b      	uxth	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f971 	bl	8000834 <RA8875_write_data>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	460a      	mov	r2, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 800156a:	2063      	movs	r0, #99	@ 0x63
 800156c:	f7ff f9ac 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	0adb      	lsrs	r3, r3, #11
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f95b 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x64);
 800157e:	2064      	movs	r0, #100	@ 0x64
 8001580:	f7ff f9a2 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	115b      	asrs	r3, r3, #5
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff f94f 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x65);
 8001596:	2065      	movs	r0, #101	@ 0x65
 8001598:	f7ff f996 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f944 	bl	8000834 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 80015ac:	2060      	movs	r0, #96	@ 0x60
 80015ae:	f7ff f98b 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	0adb      	lsrs	r3, r3, #11
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f93a 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x61);
 80015c0:	2061      	movs	r0, #97	@ 0x61
 80015c2:	f7ff f981 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	115b      	asrs	r3, r3, #5
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f92e 	bl	8000834 <RA8875_write_data>
  RA8875_write_command (0x62);
 80015d8:	2062      	movs	r0, #98	@ 0x62
 80015da:	f7ff f975 	bl	80008c8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 80015de:	88bb      	ldrh	r3, [r7, #4]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff f923 	bl	8000834 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 80015ee:	2022      	movs	r0, #34	@ 0x22
 80015f0:	f7ff f96a 	bl	80008c8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 80015f4:	f7ff f95c 	bl	80008b0 <RA8875_read_data>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001602:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f914 	bl	8000834 <RA8875_write_data>
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d901      	bls.n	8001628 <RA8875_text_scale+0x14>
 8001624:	2303      	movs	r3, #3
 8001626:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8001628:	2022      	movs	r0, #34	@ 0x22
 800162a:	f7ff f94d 	bl	80008c8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 800162e:	f7ff f93f 	bl	80008b0 <RA8875_read_data>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	f023 030f 	bic.w	r3, r3, #15
 800163c:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4313      	orrs	r3, r2
 800164a:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f8f0 	bl	8000834 <RA8875_write_data>

  _textScale = scale;
 8001654:	4a03      	ldr	r2, [pc, #12]	@ (8001664 <RA8875_text_scale+0x50>)
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	7013      	strb	r3, [r2, #0]
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	240000aa 	.word	0x240000aa

08001668 <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <RA8875_text_write+0x1c>
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe fe30 	bl	80002e0 <strlen>
 8001680:	4603      	mov	r3, r0
 8001682:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 8001684:	2002      	movs	r0, #2
 8001686:	f7ff f91f 	bl	80008c8 <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	81fb      	strh	r3, [r7, #14]
 800168e:	e010      	b.n	80016b2 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff f8cb 	bl	8000834 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <RA8875_text_write+0x5c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <RA8875_text_write+0x44>
 80016a6:	2001      	movs	r0, #1
 80016a8:	f001 fc84 	bl	8002fb4 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	3301      	adds	r3, #1
 80016b0:	81fb      	strh	r3, [r7, #14]
 80016b2:	89fa      	ldrh	r2, [r7, #14]
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d3ea      	bcc.n	8001690 <RA8875_text_write+0x28>
  }
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	240000aa 	.word	0x240000aa

080016c8 <RA8875_pwm1_out>:
 Set the duty cycle of the PWM 1 Clock
 @param p The duty Cycle (0-255)
 */
/**************************************************************************/
void RA8875_pwm1_out (uint8_t p)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  RA8875_write_reg (RA8875_P1DCR, p);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	4619      	mov	r1, r3
 80016d6:	208b      	movs	r0, #139	@ 0x8b
 80016d8:	f7ff f888 	bl	80007ec <RA8875_write_reg>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <RA8875_pwm1_config>:
 @param on Whether to enable the clock
 @param clock The Clock Divider
 */
/**************************************************************************/
void RA8875_pwm1_config (uint8_t on, uint8_t clock)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71bb      	strb	r3, [r7, #6]
  if (on)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00d      	beq.n	8001716 <RA8875_pwm1_config+0x32>
  {
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_ENABLE | (clock & 0xF));
 80016fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	b25b      	sxtb	r3, r3
 8001704:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	208a      	movs	r0, #138	@ 0x8a
 8001710:	f7ff f86c 	bl	80007ec <RA8875_write_reg>
  }
  else
  {
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
  }
}
 8001714:	e007      	b.n	8001726 <RA8875_pwm1_config+0x42>
    RA8875_write_reg (RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	b2db      	uxtb	r3, r3
 800171e:	4619      	mov	r1, r3
 8001720:	208a      	movs	r0, #138	@ 0x8a
 8001722:	f7ff f863 	bl	80007ec <RA8875_write_reg>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <RA8875_display_on>:
 Turns the display on or off
 @param on Whether to turn the display on or not
 */
/**************************************************************************/
void RA8875_display_on (uint8_t on)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
  if (on) RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPON);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <RA8875_display_on+0x1a>
 800173e:	2180      	movs	r1, #128	@ 0x80
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff f853 	bl	80007ec <RA8875_write_reg>
  else RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
}
 8001746:	e003      	b.n	8001750 <RA8875_display_on+0x22>
  else RA8875_write_reg (RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
 8001748:	2100      	movs	r1, #0
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff f84e 	bl	80007ec <RA8875_write_reg>
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <generate_random_letters>:
int guess_remain = 2;
int score = 0;
int hi_score = 0;
int picked = -1;

void generate_random_letters(char* buffer, size_t length) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
	srand(HAL_GetTick());
 8001762:	f001 fc1b 	bl	8002f9c <HAL_GetTick>
 8001766:	4603      	mov	r3, r0
 8001768:	4618      	mov	r0, r3
 800176a:	f007 fd5b 	bl	8009224 <srand>

	for (size_t i = 0; i < length; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e016      	b.n	80017a2 <generate_random_letters+0x4a>
		buffer[i] = (rand() % 26) + 65;
 8001774:	f007 fd84 	bl	8009280 <rand>
 8001778:	4603      	mov	r3, r0
 800177a:	4a10      	ldr	r2, [pc, #64]	@ (80017bc <generate_random_letters+0x64>)
 800177c:	fb82 1203 	smull	r1, r2, r2, r3
 8001780:	10d1      	asrs	r1, r2, #3
 8001782:	17da      	asrs	r2, r3, #31
 8001784:	1a8a      	subs	r2, r1, r2
 8001786:	211a      	movs	r1, #26
 8001788:	fb01 f202 	mul.w	r2, r1, r2
 800178c:	1a9a      	subs	r2, r3, r2
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	440b      	add	r3, r1
 8001796:	3241      	adds	r2, #65	@ 0x41
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; i++) {
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d3e4      	bcc.n	8001774 <generate_random_letters+0x1c>
	}
	buffer[length] = '\0';
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	4ec4ec4f 	.word	0x4ec4ec4f

080017c0 <title_screen>:

void title_screen(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af04      	add	r7, sp, #16
	mode = GAME_MODE_TITLE;
 80017c6:	4b65      	ldr	r3, [pc, #404]	@ (800195c <title_screen+0x19c>)
 80017c8:	2204      	movs	r2, #4
 80017ca:	701a      	strb	r2, [r3, #0]

	//background
	RA8875_pwm1_out(255);
 80017cc:	20ff      	movs	r0, #255	@ 0xff
 80017ce:	f7ff ff7b 	bl	80016c8 <RA8875_pwm1_out>
	RA8875_fill_screen(RA8875_BLACK);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f7ff fcf2 	bl	80011bc <RA8875_fill_screen>
	//corner text
	RA8875_text_mode();
 80017d8:	f7ff fe5c 	bl	8001494 <RA8875_text_mode>
	RA8875_text_color (RA8875_BLUE, RA8875_BLACK);
 80017dc:	2100      	movs	r1, #0
 80017de:	201f      	movs	r0, #31
 80017e0:	f7ff febb 	bl	800155a <RA8875_text_color>
	RA8875_text_scale(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff ff15 	bl	8001614 <RA8875_text_scale>
	RA8875_text_cursor_position(80, 0);
 80017ea:	2100      	movs	r1, #0
 80017ec:	2050      	movs	r0, #80	@ 0x50
 80017ee:	f7ff fe76 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("Beat", 5);
 80017f2:	2105      	movs	r1, #5
 80017f4:	485a      	ldr	r0, [pc, #360]	@ (8001960 <title_screen+0x1a0>)
 80017f6:	f7ff ff37 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(80, 55);
 80017fa:	2137      	movs	r1, #55	@ 0x37
 80017fc:	2050      	movs	r0, #80	@ 0x50
 80017fe:	f7ff fe6e 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("The", 4);
 8001802:	2104      	movs	r1, #4
 8001804:	4857      	ldr	r0, [pc, #348]	@ (8001964 <title_screen+0x1a4>)
 8001806:	f7ff ff2f 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(80, 110);
 800180a:	216e      	movs	r1, #110	@ 0x6e
 800180c:	2050      	movs	r0, #80	@ 0x50
 800180e:	f7ff fe66 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("Clock", 6);
 8001812:	2106      	movs	r1, #6
 8001814:	4854      	ldr	r0, [pc, #336]	@ (8001968 <title_screen+0x1a8>)
 8001816:	f7ff ff27 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-150, SCREEN_HEIGHT-150);
 800181a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800181e:	f240 208a 	movw	r0, #650	@ 0x28a
 8001822:	f7ff fe5c 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("Crack", 6);
 8001826:	2106      	movs	r1, #6
 8001828:	4850      	ldr	r0, [pc, #320]	@ (800196c <title_screen+0x1ac>)
 800182a:	f7ff ff1d 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-150, SCREEN_HEIGHT-95);
 800182e:	f240 1181 	movw	r1, #385	@ 0x181
 8001832:	f240 208a 	movw	r0, #650	@ 0x28a
 8001836:	f7ff fe52 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("The", 4);
 800183a:	2104      	movs	r1, #4
 800183c:	4849      	ldr	r0, [pc, #292]	@ (8001964 <title_screen+0x1a4>)
 800183e:	f7ff ff13 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-150, SCREEN_HEIGHT-40);
 8001842:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8001846:	f240 208a 	movw	r0, #650	@ 0x28a
 800184a:	f7ff fe48 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("Code", 5);
 800184e:	2105      	movs	r1, #5
 8001850:	4847      	ldr	r0, [pc, #284]	@ (8001970 <title_screen+0x1b0>)
 8001852:	f7ff ff09 	bl	8001668 <RA8875_text_write>
	RA8875_graphic_mode();
 8001856:	f7ff f875 	bl	8000944 <RA8875_graphic_mode>
	//center emblem
	RA8875_draw_fill_circle(CENTER_X, CENTER_Y, 250, 0x8C4F);	// blue
 800185a:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 800185e:	22fa      	movs	r2, #250	@ 0xfa
 8001860:	21f0      	movs	r1, #240	@ 0xf0
 8001862:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001866:	f7ff fcc9 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(CENTER_X, CENTER_Y, 225, 0x94b3);	// light blue
 800186a:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800186e:	22e1      	movs	r2, #225	@ 0xe1
 8001870:	21f0      	movs	r1, #240	@ 0xf0
 8001872:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001876:	f7ff fcc1 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_rect(CENTER_X - 170, CENTER_Y - 90, 340, 160, RA8875_YELLOW);
 800187a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	23a0      	movs	r3, #160	@ 0xa0
 8001882:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8001886:	2196      	movs	r1, #150	@ 0x96
 8001888:	20e6      	movs	r0, #230	@ 0xe6
 800188a:	f7ff fc6a 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_hexagon(CENTER_X, CENTER_Y, 160, RA8875_YELLOW);
 800188e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001892:	22a0      	movs	r2, #160	@ 0xa0
 8001894:	21f0      	movs	r1, #240	@ 0xf0
 8001896:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800189a:	f7ff fd45 	bl	8001328 <RA8875_draw_hexagon>
	RA8875_draw_hexagon(CENTER_X, CENTER_Y, 150, RA8875_BLACK);
 800189e:	2300      	movs	r3, #0
 80018a0:	2296      	movs	r2, #150	@ 0x96
 80018a2:	21f0      	movs	r1, #240	@ 0xf0
 80018a4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80018a8:	f7ff fd3e 	bl	8001328 <RA8875_draw_hexagon>
	RA8875_draw_fill_rect(CENTER_X - 160, CENTER_Y - 80, 320, 140, RA8875_BLACK);
 80018ac:	2300      	movs	r3, #0
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	238c      	movs	r3, #140	@ 0x8c
 80018b2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80018b6:	21a0      	movs	r1, #160	@ 0xa0
 80018b8:	20f0      	movs	r0, #240	@ 0xf0
 80018ba:	f7ff fc52 	bl	8001162 <RA8875_draw_fill_rect>
	//side graphics
	RA8875_draw_fill_rect(50, 0, 10, SCREEN_HEIGHT, RA8875_WHITE);
 80018be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018c8:	220a      	movs	r2, #10
 80018ca:	2100      	movs	r1, #0
 80018cc:	2032      	movs	r0, #50	@ 0x32
 80018ce:	f7ff fc48 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-50, 0, 10, SCREEN_HEIGHT, RA8875_WHITE);
 80018d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018dc:	220a      	movs	r2, #10
 80018de:	2100      	movs	r1, #0
 80018e0:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80018e4:	f7ff fc3d 	bl	8001162 <RA8875_draw_fill_rect>

	RA8875_text_mode();
 80018e8:	f7ff fdd4 	bl	8001494 <RA8875_text_mode>
	//center text
	RA8875_text_cursor_position(CENTER_X-144, CENTER_Y-75);
 80018ec:	21a5      	movs	r1, #165	@ 0xa5
 80018ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80018f2:	f7ff fdf4 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 80018f6:	2100      	movs	r1, #0
 80018f8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80018fc:	f7ff fe2d 	bl	800155a <RA8875_text_color>
	RA8875_text_scale(3);
 8001900:	2003      	movs	r0, #3
 8001902:	f7ff fe87 	bl	8001614 <RA8875_text_scale>
	RA8875_text_write("Conundrum", 9);
 8001906:	2109      	movs	r1, #9
 8001908:	481a      	ldr	r0, [pc, #104]	@ (8001974 <title_screen+0x1b4>)
 800190a:	f7ff fead 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-75, CENTER_Y-5);
 800190e:	21eb      	movs	r1, #235	@ 0xeb
 8001910:	f240 1045 	movw	r0, #325	@ 0x145
 8001914:	f7ff fde3 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("Crack", 6);
 8001918:	2106      	movs	r1, #6
 800191a:	4814      	ldr	r0, [pc, #80]	@ (800196c <title_screen+0x1ac>)
 800191c:	f7ff fea4 	bl	8001668 <RA8875_text_write>
	//side text
	char letters[16];
	generate_random_letters(letters, 16);
 8001920:	463b      	mov	r3, r7
 8001922:	2110      	movs	r1, #16
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff17 	bl	8001758 <generate_random_letters>
	for(size_t i = 0; i < 16; i++) {
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e03c      	b.n	80019aa <title_screen+0x1ea>
		if(i<8) {
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b07      	cmp	r3, #7
 8001934:	d820      	bhi.n	8001978 <title_screen+0x1b8>
			RA8875_text_cursor_position(10, i*60);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	b29b      	uxth	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	b29b      	uxth	r3, r3
 8001944:	4619      	mov	r1, r3
 8001946:	200a      	movs	r0, #10
 8001948:	f7ff fdc9 	bl	80014de <RA8875_text_cursor_position>
			RA8875_text_write(&letters[i], 1);
 800194c:	463a      	mov	r2, r7
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	4413      	add	r3, r2
 8001952:	2101      	movs	r1, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fe87 	bl	8001668 <RA8875_text_write>
 800195a:	e023      	b.n	80019a4 <title_screen+0x1e4>
 800195c:	240000bf 	.word	0x240000bf
 8001960:	0800b230 	.word	0x0800b230
 8001964:	0800b238 	.word	0x0800b238
 8001968:	0800b23c 	.word	0x0800b23c
 800196c:	0800b244 	.word	0x0800b244
 8001970:	0800b24c 	.word	0x0800b24c
 8001974:	0800b254 	.word	0x0800b254
		}
		else {
			RA8875_text_cursor_position(SCREEN_WIDTH-35, (i-8)*60);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	b29b      	uxth	r3, r3
 8001986:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800198a:	b29b      	uxth	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	f240 20fd 	movw	r0, #765	@ 0x2fd
 8001992:	f7ff fda4 	bl	80014de <RA8875_text_cursor_position>
			RA8875_text_write(&letters[i], 1);
 8001996:	463a      	mov	r2, r7
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	4413      	add	r3, r2
 800199c:	2101      	movs	r1, #1
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fe62 	bl	8001668 <RA8875_text_write>
	for(size_t i = 0; i < 16; i++) {
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d9bf      	bls.n	8001930 <title_screen+0x170>
		}
	}
	RA8875_graphic_mode();
 80019b0:	f7fe ffc8 	bl	8000944 <RA8875_graphic_mode>

	//cracks
	RA8875_draw_fill_rect(200, 0, 5, 160, RA8875_YELLOW);
 80019b4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	23a0      	movs	r3, #160	@ 0xa0
 80019bc:	2205      	movs	r2, #5
 80019be:	2100      	movs	r1, #0
 80019c0:	20c8      	movs	r0, #200	@ 0xc8
 80019c2:	f7ff fbce 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(150, 80, 150, 5, RA8875_YELLOW);
 80019c6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2305      	movs	r3, #5
 80019ce:	2296      	movs	r2, #150	@ 0x96
 80019d0:	2150      	movs	r1, #80	@ 0x50
 80019d2:	2096      	movs	r0, #150	@ 0x96
 80019d4:	f7ff fbc5 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(130, SCREEN_HEIGHT-220, 5, 220, RA8875_YELLOW);
 80019d8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	23dc      	movs	r3, #220	@ 0xdc
 80019e0:	2205      	movs	r2, #5
 80019e2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80019e6:	2082      	movs	r0, #130	@ 0x82
 80019e8:	f7ff fbbb 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-300, 0, 5, 100, RA8875_YELLOW);
 80019ec:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2364      	movs	r3, #100	@ 0x64
 80019f4:	2205      	movs	r2, #5
 80019f6:	2100      	movs	r1, #0
 80019f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019fc:	f7ff fbb1 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-300, 100, 200, 5, RA8875_YELLOW);
 8001a00:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2305      	movs	r3, #5
 8001a08:	22c8      	movs	r2, #200	@ 0xc8
 8001a0a:	2164      	movs	r1, #100	@ 0x64
 8001a0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a10:	f7ff fba7 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-100, 0, 5, 280, RA8875_YELLOW);
 8001a14:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001a1e:	2205      	movs	r2, #5
 8001a20:	2100      	movs	r1, #0
 8001a22:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001a26:	f7ff fb9c 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-200, SCREEN_HEIGHT-200, 100, 5, RA8875_YELLOW);
 8001a2a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2305      	movs	r3, #5
 8001a32:	2264      	movs	r2, #100	@ 0x64
 8001a34:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001a38:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a3c:	f7ff fb91 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(SCREEN_WIDTH-180, SCREEN_HEIGHT-250, 5, 250, RA8875_YELLOW);
 8001a40:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	23fa      	movs	r3, #250	@ 0xfa
 8001a48:	2205      	movs	r2, #5
 8001a4a:	21e6      	movs	r1, #230	@ 0xe6
 8001a4c:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001a50:	f7ff fb87 	bl	8001162 <RA8875_draw_fill_rect>
	//intersects
	RA8875_draw_fill_circle(202, 82, 7, RA8875_YELLOW);
 8001a54:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a58:	2207      	movs	r2, #7
 8001a5a:	2152      	movs	r1, #82	@ 0x52
 8001a5c:	20ca      	movs	r0, #202	@ 0xca
 8001a5e:	f7ff fbcd 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(202, 82, 5, RA8875_BLUE);
 8001a62:	231f      	movs	r3, #31
 8001a64:	2205      	movs	r2, #5
 8001a66:	2152      	movs	r1, #82	@ 0x52
 8001a68:	20ca      	movs	r0, #202	@ 0xca
 8001a6a:	f7ff fbc7 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(202, 82, 3, RA8875_YELLOW);
 8001a6e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a72:	2203      	movs	r2, #3
 8001a74:	2152      	movs	r1, #82	@ 0x52
 8001a76:	20ca      	movs	r0, #202	@ 0xca
 8001a78:	f7ff fbc0 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(132, SCREEN_HEIGHT-218, 7, RA8875_YELLOW);
 8001a7c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a80:	2207      	movs	r2, #7
 8001a82:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001a86:	2084      	movs	r0, #132	@ 0x84
 8001a88:	f7ff fbb8 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(132, SCREEN_HEIGHT-218, 5, RA8875_BLUE);
 8001a8c:	231f      	movs	r3, #31
 8001a8e:	2205      	movs	r2, #5
 8001a90:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001a94:	2084      	movs	r0, #132	@ 0x84
 8001a96:	f7ff fbb1 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(132, SCREEN_HEIGHT-218, 3, RA8875_YELLOW);
 8001a9a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001aa4:	2084      	movs	r0, #132	@ 0x84
 8001aa6:	f7ff fba9 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-98, 100, 7, RA8875_YELLOW);
 8001aaa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001aae:	2207      	movs	r2, #7
 8001ab0:	2164      	movs	r1, #100	@ 0x64
 8001ab2:	f240 20be 	movw	r0, #702	@ 0x2be
 8001ab6:	f7ff fba1 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-98, 100, 5, RA8875_BLUE);
 8001aba:	231f      	movs	r3, #31
 8001abc:	2205      	movs	r2, #5
 8001abe:	2164      	movs	r1, #100	@ 0x64
 8001ac0:	f240 20be 	movw	r0, #702	@ 0x2be
 8001ac4:	f7ff fb9a 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-98, 100, 3, RA8875_YELLOW);
 8001ac8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001acc:	2203      	movs	r2, #3
 8001ace:	2164      	movs	r1, #100	@ 0x64
 8001ad0:	f240 20be 	movw	r0, #702	@ 0x2be
 8001ad4:	f7ff fb92 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-100, SCREEN_HEIGHT-200, 7, RA8875_YELLOW);
 8001ad8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001adc:	2207      	movs	r2, #7
 8001ade:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001ae2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001ae6:	f7ff fb89 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-100, SCREEN_HEIGHT-200, 5, RA8875_BLUE);
 8001aea:	231f      	movs	r3, #31
 8001aec:	2205      	movs	r2, #5
 8001aee:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001af2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001af6:	f7ff fb81 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-100, SCREEN_HEIGHT-200, 3, RA8875_YELLOW);
 8001afa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001afe:	2203      	movs	r2, #3
 8001b00:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001b04:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001b08:	f7ff fb78 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-178, SCREEN_HEIGHT-198, 7, RA8875_YELLOW);
 8001b0c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b10:	2207      	movs	r2, #7
 8001b12:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001b16:	f240 206e 	movw	r0, #622	@ 0x26e
 8001b1a:	f7ff fb6f 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-178, SCREEN_HEIGHT-198, 5, RA8875_BLUE);
 8001b1e:	231f      	movs	r3, #31
 8001b20:	2205      	movs	r2, #5
 8001b22:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001b26:	f240 206e 	movw	r0, #622	@ 0x26e
 8001b2a:	f7ff fb67 	bl	80011fc <RA8875_draw_fill_circle>
	RA8875_draw_fill_circle(SCREEN_WIDTH-178, SCREEN_HEIGHT-198, 3, RA8875_YELLOW);
 8001b2e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b32:	2203      	movs	r2, #3
 8001b34:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001b38:	f240 206e 	movw	r0, #622	@ 0x26e
 8001b3c:	f7ff fb5e 	bl	80011fc <RA8875_draw_fill_circle>
	//hour glass
	RA8875_draw_fill_triangle(CENTER_X-40, CENTER_Y+100, CENTER_X+40, CENTER_Y+100, CENTER_X, CENTER_Y+160, RA8875_WHITE);
 8001b40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 8001b56:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8001b5a:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001b5e:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001b62:	f7ff fb69 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-40, CENTER_Y+210, CENTER_X+40, CENTER_Y+210, CENTER_X, CENTER_Y+140, RA8875_WHITE);
 8001b66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001b7c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8001b80:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001b84:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001b88:	f7ff fb56 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_round_rect(CENTER_X-40, CENTER_Y+90, 80, 20, 10, 0xbc20);
 8001b8c:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	230a      	movs	r3, #10
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2314      	movs	r3, #20
 8001b98:	2250      	movs	r2, #80	@ 0x50
 8001b9a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001b9e:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001ba2:	f7ff fb93 	bl	80012cc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-40, CENTER_Y+200, 80, 20, 10, 0xbc20);	//orange
 8001ba6:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	230a      	movs	r3, #10
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2314      	movs	r3, #20
 8001bb2:	2250      	movs	r2, #80	@ 0x50
 8001bb4:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8001bb8:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 8001bbc:	f7ff fb86 	bl	80012cc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_rect(CENTER_X-34, CENTER_Y+100, 7, 110, 0xbc20);
 8001bc0:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	236e      	movs	r3, #110	@ 0x6e
 8001bc8:	2207      	movs	r2, #7
 8001bca:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001bce:	f44f 70b7 	mov.w	r0, #366	@ 0x16e
 8001bd2:	f7ff fac6 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(CENTER_X+26, CENTER_Y+100, 7, 110, 0xbc20);
 8001bd6:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	236e      	movs	r3, #110	@ 0x6e
 8001bde:	2207      	movs	r2, #7
 8001be0:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001be4:	f44f 70d5 	mov.w	r0, #426	@ 0x1aa
 8001be8:	f7ff fabb 	bl	8001162 <RA8875_draw_fill_rect>

	HAL_Delay(5000);
 8001bec:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001bf0:	f001 f9e0 	bl	8002fb4 <HAL_Delay>
	for(int p = 200; p >= 0; p -= 20) {
 8001bf4:	23c8      	movs	r3, #200	@ 0xc8
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	e00a      	b.n	8001c10 <title_screen+0x450>
		RA8875_pwm1_out(p);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fd62 	bl	80016c8 <RA8875_pwm1_out>
		HAL_Delay(100);
 8001c04:	2064      	movs	r0, #100	@ 0x64
 8001c06:	f001 f9d5 	bl	8002fb4 <HAL_Delay>
	for(int p = 200; p >= 0; p -= 20) {
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	3b14      	subs	r3, #20
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	daf1      	bge.n	8001bfa <title_screen+0x43a>
	}
	RA8875_fill_screen(RA8875_BLACK);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fad0 	bl	80011bc <RA8875_fill_screen>

	return;
 8001c1c:	bf00      	nop
}
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <end_game>:
			}
			break;
	}
}

void end_game(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af04      	add	r7, sp, #16
	mode = GAME_MODE_END;
 8001c2a:	4bdb      	ldr	r3, [pc, #876]	@ (8001f98 <end_game+0x374>)
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 8001c30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c34:	f001 f9be 	bl	8002fb4 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 8001c38:	201f      	movs	r0, #31
 8001c3a:	f7ff fabf 	bl	80011bc <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 8001c3e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	230a      	movs	r3, #10
 8001c46:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001c4a:	215a      	movs	r1, #90	@ 0x5a
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f7ff fa88 	bl	8001162 <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8001c52:	2300      	movs	r3, #0
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	230a      	movs	r3, #10
 8001c58:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001c5c:	2164      	movs	r1, #100	@ 0x64
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fa7f 	bl	8001162 <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 8001c64:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001c7a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001c7e:	21b4      	movs	r1, #180	@ 0xb4
 8001c80:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001c84:	f7ff fad8 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 8001c88:	231f      	movs	r3, #31
 8001c8a:	9302      	str	r3, [sp, #8]
 8001c8c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001c9c:	f240 22da 	movw	r2, #730	@ 0x2da
 8001ca0:	21b4      	movs	r1, #180	@ 0xb4
 8001ca2:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8001ca6:	f7ff fac7 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 8001caa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f240 238a 	movw	r3, #650	@ 0x28a
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001cc0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001cc4:	21b4      	movs	r1, #180	@ 0xb4
 8001cc6:	f240 208a 	movw	r0, #650	@ 0x28a
 8001cca:	f7ff fab5 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 8001cce:	231f      	movs	r3, #31
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	f240 2376 	movw	r3, #630	@ 0x276
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001ce2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8001ce6:	21b4      	movs	r1, #180	@ 0xb4
 8001ce8:	f240 2076 	movw	r0, #630	@ 0x276
 8001cec:	f7ff faa4 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 8001cf0:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8001cf4:	9302      	str	r3, [sp, #8]
 8001cf6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2346      	movs	r3, #70	@ 0x46
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001d04:	2214      	movs	r2, #20
 8001d06:	21b4      	movs	r1, #180	@ 0xb4
 8001d08:	2046      	movs	r0, #70	@ 0x46
 8001d0a:	f7ff fa95 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 8001d0e:	231f      	movs	r3, #31
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	235a      	movs	r3, #90	@ 0x5a
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001d20:	2228      	movs	r2, #40	@ 0x28
 8001d22:	21b4      	movs	r1, #180	@ 0xb4
 8001d24:	205a      	movs	r0, #90	@ 0x5a
 8001d26:	f7ff fa87 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 8001d2a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	2378      	movs	r3, #120	@ 0x78
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001d3e:	2246      	movs	r2, #70	@ 0x46
 8001d40:	21b4      	movs	r1, #180	@ 0xb4
 8001d42:	2078      	movs	r0, #120	@ 0x78
 8001d44:	f7ff fa78 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 8001d48:	231f      	movs	r3, #31
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	238c      	movs	r3, #140	@ 0x8c
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001d5a:	225a      	movs	r2, #90	@ 0x5a
 8001d5c:	21b4      	movs	r1, #180	@ 0xb4
 8001d5e:	208c      	movs	r0, #140	@ 0x8c
 8001d60:	f7ff fa6a 	bl	8001238 <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 8001d64:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2378      	movs	r3, #120	@ 0x78
 8001d6c:	22c8      	movs	r2, #200	@ 0xc8
 8001d6e:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001d72:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001d76:	f7ff fa87 	bl	8001288 <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 8001d7a:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	f240 237e 	movw	r3, #638	@ 0x27e
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001d90:	f240 224e 	movw	r2, #590	@ 0x24e
 8001d94:	21fa      	movs	r1, #250	@ 0xfa
 8001d96:	f240 204e 	movw	r0, #590	@ 0x24e
 8001d9a:	f7ff fa4d 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 8001d9e:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	23ae      	movs	r3, #174	@ 0xae
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001db2:	22d4      	movs	r2, #212	@ 0xd4
 8001db4:	21fa      	movs	r1, #250	@ 0xfa
 8001db6:	20d4      	movs	r0, #212	@ 0xd4
 8001db8:	f7ff fa3e 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 8001dbc:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	2382      	movs	r3, #130	@ 0x82
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	f240 13db 	movw	r3, #475	@ 0x1db
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	23c0      	movs	r3, #192	@ 0xc0
 8001dce:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8001dd2:	21af      	movs	r1, #175	@ 0xaf
 8001dd4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001dd8:	f7ff fa2e 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 8001ddc:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	2382      	movs	r3, #130	@ 0x82
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	f240 1345 	movw	r3, #325	@ 0x145
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	23c0      	movs	r3, #192	@ 0xc0
 8001dee:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001df2:	21af      	movs	r1, #175	@ 0xaf
 8001df4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001df8:	f7ff fa1e 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 8001dfc:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001e00:	9302      	str	r3, [sp, #8]
 8001e02:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001e12:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001e16:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001e1a:	f240 200a 	movw	r0, #522	@ 0x20a
 8001e1e:	f7ff fa0b 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 8001e22:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001e38:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001e3c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001e40:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001e44:	f7ff f9f8 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 8001e48:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	23be      	movs	r3, #190	@ 0xbe
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	23c0      	movs	r3, #192	@ 0xc0
 8001e5a:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8001e5e:	21fa      	movs	r1, #250	@ 0xfa
 8001e60:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8001e64:	f7ff f9e8 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 8001e68:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	23be      	movs	r3, #190	@ 0xbe
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	23dc      	movs	r3, #220	@ 0xdc
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	23c0      	movs	r3, #192	@ 0xc0
 8001e78:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001e7c:	21fa      	movs	r1, #250	@ 0xfa
 8001e7e:	20d4      	movs	r0, #212	@ 0xd4
 8001e80:	f7ff f9da 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 8001e84:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8001e9a:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001e9e:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001ea2:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8001ea6:	f7ff f9c7 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 8001eaa:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001ec0:	22d4      	movs	r2, #212	@ 0xd4
 8001ec2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001ec6:	20dc      	movs	r0, #220	@ 0xdc
 8001ec8:	f7ff f9b6 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 8001ecc:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8001ed0:	9302      	str	r3, [sp, #8]
 8001ed2:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	237c      	movs	r3, #124	@ 0x7c
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001ee0:	22e8      	movs	r2, #232	@ 0xe8
 8001ee2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001ee6:	20ca      	movs	r0, #202	@ 0xca
 8001ee8:	f7ff f9a6 	bl	8001238 <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 8001eec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2346      	movs	r3, #70	@ 0x46
 8001ef8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001efc:	21cd      	movs	r1, #205	@ 0xcd
 8001efe:	20fa      	movs	r0, #250	@ 0xfa
 8001f00:	f7ff f9e4 	bl	80012cc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 8001f04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2346      	movs	r3, #70	@ 0x46
 8001f10:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f14:	f240 1127 	movw	r1, #295	@ 0x127
 8001f18:	20fa      	movs	r0, #250	@ 0xfa
 8001f1a:	f7ff f9d7 	bl	80012cc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	2307      	movs	r3, #7
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2332      	movs	r3, #50	@ 0x32
 8001f28:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001f2c:	21d7      	movs	r1, #215	@ 0xd7
 8001f2e:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001f32:	f7ff f9cb 	bl	80012cc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 8001f36:	2300      	movs	r3, #0
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2332      	movs	r3, #50	@ 0x32
 8001f40:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001f44:	f240 1131 	movw	r1, #305	@ 0x131
 8001f48:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001f4c:	f7ff f9be 	bl	80012cc <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 8001f50:	f7ff faa0 	bl	8001494 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8001f54:	2100      	movs	r1, #0
 8001f56:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001f5a:	f7ff fafe 	bl	800155a <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 8001f5e:	21d7      	movs	r1, #215	@ 0xd7
 8001f60:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001f64:	f7ff fabb 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8001f68:	2002      	movs	r0, #2
 8001f6a:	f7ff fb53 	bl	8001614 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 8001f6e:	210a      	movs	r1, #10
 8001f70:	480a      	ldr	r0, [pc, #40]	@ (8001f9c <end_game+0x378>)
 8001f72:	f7ff fb79 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 8001f76:	f240 1131 	movw	r1, #305	@ 0x131
 8001f7a:	f240 1063 	movw	r0, #355	@ 0x163
 8001f7e:	f7ff faae 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 8001f82:	2104      	movs	r1, #4
 8001f84:	4806      	ldr	r0, [pc, #24]	@ (8001fa0 <end_game+0x37c>)
 8001f86:	f7ff fb6f 	bl	8001668 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 8001f8a:	211f      	movs	r1, #31
 8001f8c:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001f90:	f7ff fae3 	bl	800155a <RA8875_text_color>
 8001f94:	e006      	b.n	8001fa4 <end_game+0x380>
 8001f96:	bf00      	nop
 8001f98:	240000bf 	.word	0x240000bf
 8001f9c:	0800b2a8 	.word	0x0800b2a8
 8001fa0:	0800b2b4 	.word	0x0800b2b4
	RA8875_text_cursor_position(CENTER_X-143, 20);
 8001fa4:	2114      	movs	r1, #20
 8001fa6:	f240 1001 	movw	r0, #257	@ 0x101
 8001faa:	f7ff fa98 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 8001fae:	2003      	movs	r0, #3
 8001fb0:	f7ff fb30 	bl	8001614 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	4849      	ldr	r0, [pc, #292]	@ (80020dc <end_game+0x4b8>)
 8001fb8:	f7ff fb56 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 8001fbc:	2114      	movs	r1, #20
 8001fbe:	f240 1095 	movw	r0, #405	@ 0x195
 8001fc2:	f7ff fa8c 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	4845      	ldr	r0, [pc, #276]	@ (80020e0 <end_game+0x4bc>)
 8001fca:	f7ff fb4d 	bl	8001668 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8001fce:	211f      	movs	r1, #31
 8001fd0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fd4:	f7ff fac1 	bl	800155a <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	200a      	movs	r0, #10
 8001fdc:	f7ff fa7f 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f7ff fb17 	bl	8001614 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 8001fe6:	2106      	movs	r1, #6
 8001fe8:	483e      	ldr	r0, [pc, #248]	@ (80020e4 <end_game+0x4c0>)
 8001fea:	f7ff fb3d 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 8001fee:	2100      	movs	r1, #0
 8001ff0:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001ff4:	f7ff fa73 	bl	80014de <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 8001ff8:	210b      	movs	r1, #11
 8001ffa:	483b      	ldr	r0, [pc, #236]	@ (80020e8 <end_game+0x4c4>)
 8001ffc:	f7ff fb34 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8002000:	2137      	movs	r1, #55	@ 0x37
 8002002:	200a      	movs	r0, #10
 8002004:	f7ff fa6b 	bl	80014de <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%d", score);
 8002008:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <end_game+0x4c8>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4938      	ldr	r1, [pc, #224]	@ (80020f0 <end_game+0x4cc>)
 8002010:	4618      	mov	r0, r3
 8002012:	f007 fa35 	bl	8009480 <siprintf>
	RA8875_text_write(buffer, 3);
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2103      	movs	r1, #3
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fb24 	bl	8001668 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 8002020:	2137      	movs	r1, #55	@ 0x37
 8002022:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8002026:	f7ff fa5a 	bl	80014de <RA8875_text_cursor_position>
	if(score > hi_score) hi_score = score;
 800202a:	4b30      	ldr	r3, [pc, #192]	@ (80020ec <end_game+0x4c8>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b31      	ldr	r3, [pc, #196]	@ (80020f4 <end_game+0x4d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	dd03      	ble.n	800203e <end_game+0x41a>
 8002036:	4b2d      	ldr	r3, [pc, #180]	@ (80020ec <end_game+0x4c8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2e      	ldr	r2, [pc, #184]	@ (80020f4 <end_game+0x4d0>)
 800203c:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%d", hi_score);
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <end_game+0x4d0>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	492a      	ldr	r1, [pc, #168]	@ (80020f0 <end_game+0x4cc>)
 8002046:	4618      	mov	r0, r3
 8002048:	f007 fa1a 	bl	8009480 <siprintf>
	RA8875_text_write(buffer, 3);
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2103      	movs	r1, #3
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb09 	bl	8001668 <RA8875_text_write>
	RA8875_graphic_mode();
 8002056:	f7fe fc75 	bl	8000944 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 800205a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	2332      	movs	r3, #50	@ 0x32
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	23df      	movs	r3, #223	@ 0xdf
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2332      	movs	r3, #50	@ 0x32
 800206a:	22ee      	movs	r2, #238	@ 0xee
 800206c:	210a      	movs	r1, #10
 800206e:	20e7      	movs	r0, #231	@ 0xe7
 8002070:	f7ff f8e2 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 8002074:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	2332      	movs	r3, #50	@ 0x32
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	23e6      	movs	r3, #230	@ 0xe6
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2332      	movs	r3, #50	@ 0x32
 8002084:	22f5      	movs	r2, #245	@ 0xf5
 8002086:	2155      	movs	r1, #85	@ 0x55
 8002088:	20ee      	movs	r0, #238	@ 0xee
 800208a:	f7ff f8d5 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 800208e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002092:	9302      	str	r3, [sp, #8]
 8002094:	2332      	movs	r3, #50	@ 0x32
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	f240 2337 	movw	r3, #567	@ 0x237
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2332      	movs	r3, #50	@ 0x32
 80020a0:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80020a4:	210a      	movs	r1, #10
 80020a6:	f240 202f 	movw	r0, #559	@ 0x22f
 80020aa:	f7ff f8c5 	bl	8001238 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 80020ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	2332      	movs	r3, #50	@ 0x32
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2332      	movs	r3, #50	@ 0x32
 80020c0:	f240 2221 	movw	r2, #545	@ 0x221
 80020c4:	2155      	movs	r1, #85	@ 0x55
 80020c6:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80020ca:	f7ff f8b5 	bl	8001238 <RA8875_draw_fill_triangle>

	score = 0;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <end_game+0x4c8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

	return;
 80020d4:	bf00      	nop
}
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0800b2e4 	.word	0x0800b2e4
 80020e0:	0800b2ec 	.word	0x0800b2ec
 80020e4:	0800b2f4 	.word	0x0800b2f4
 80020e8:	0800b2fc 	.word	0x0800b2fc
 80020ec:	240000c0 	.word	0x240000c0
 80020f0:	0800b308 	.word	0x0800b308
 80020f4:	240000c4 	.word	0x240000c4

080020f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020fe:	f000 fec7 	bl	8002e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002102:	f000 f835 	bl	8002170 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002106:	f000 f89d 	bl	8002244 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210a:	f000 f9d1 	bl	80024b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800210e:	f000 f8e9 	bl	80022e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002112:	f000 f93f 	bl	8002394 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002116:	f006 fac7 	bl	80086a8 <MX_FATFS_Init>
  MX_TIM6_Init();
 800211a:	f000 f991 	bl	8002440 <MX_TIM6_Init>
  MX_I2S3_Init();
 800211e:	f000 f8af 	bl	8002280 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  //Init display with 480x272 and set color as 16-bit per pixel
  RA8875_begin(LCD_RESET_GPIO_Port,LCD_RESET_Pin,LCD_WAIT_GPIO_Port,LCD_WAIT_Pin,RA8875_800x480,RA8875_16BPP);
 8002122:	2301      	movs	r3, #1
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2303      	movs	r3, #3
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2310      	movs	r3, #16
 800212c:	4a0e      	ldr	r2, [pc, #56]	@ (8002168 <main+0x70>)
 800212e:	2120      	movs	r1, #32
 8002130:	480d      	ldr	r0, [pc, #52]	@ (8002168 <main+0x70>)
 8002132:	f7fe fab7 	bl	80006a4 <RA8875_begin>

  //Power on the dispaly
  RA8875_display_on(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f7ff faf9 	bl	800172e <RA8875_display_on>

  //Backlight on
  RA8875_pwm1_config(1,RA8875_PWM_CLK_DIV1);
 800213c:	2100      	movs	r1, #0
 800213e:	2001      	movs	r0, #1
 8002140:	f7ff fad0 	bl	80016e4 <RA8875_pwm1_config>

  RA8875_pwm1_out(255);
 8002144:	20ff      	movs	r0, #255	@ 0xff
 8002146:	f7ff fabf 	bl	80016c8 <RA8875_pwm1_out>
  RA8875_fill_screen(RA8875_RED);
 800214a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800214e:	f7ff f835 	bl	80011bc <RA8875_fill_screen>
//
  title_screen();
 8002152:	f7ff fb35 	bl	80017c0 <title_screen>
//  game_matrix();
  HAL_GPIO_WritePin(LEDY_GPIO_Port, LEDY_Pin, 1);
 8002156:	2201      	movs	r2, #1
 8002158:	2101      	movs	r1, #1
 800215a:	4804      	ldr	r0, [pc, #16]	@ (800216c <main+0x74>)
 800215c:	f001 fa1a 	bl	8003594 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  int data;
//  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
  uint8_t pdata = 0x55;
 8002160:	2355      	movs	r3, #85	@ 0x55
 8002162:	71fb      	strb	r3, [r7, #7]
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <main+0x6c>
 8002168:	58020800 	.word	0x58020800
 800216c:	58021000 	.word	0x58021000

08002170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b09c      	sub	sp, #112	@ 0x70
 8002174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002176:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800217a:	224c      	movs	r2, #76	@ 0x4c
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f007 f9e1 	bl	8009546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	2220      	movs	r2, #32
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f007 f9db 	bl	8009546 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002190:	2002      	movs	r0, #2
 8002192:	f001 fb3b 	bl	800380c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4b28      	ldr	r3, [pc, #160]	@ (800223c <SystemClock_Config+0xcc>)
 800219c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219e:	4a27      	ldr	r2, [pc, #156]	@ (800223c <SystemClock_Config+0xcc>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80021a6:	4b25      	ldr	r3, [pc, #148]	@ (800223c <SystemClock_Config+0xcc>)
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	4b23      	ldr	r3, [pc, #140]	@ (8002240 <SystemClock_Config+0xd0>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80021b8:	4a21      	ldr	r2, [pc, #132]	@ (8002240 <SystemClock_Config+0xd0>)
 80021ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <SystemClock_Config+0xd0>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80021cc:	bf00      	nop
 80021ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <SystemClock_Config+0xd0>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021da:	d1f8      	bne.n	80021ce <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021dc:	2302      	movs	r3, #2
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 80021e0:	2311      	movs	r3, #17
 80021e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021e4:	2340      	movs	r3, #64	@ 0x40
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 fb45 	bl	8003880 <HAL_RCC_OscConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80021fc:	f000 fa5a 	bl	80026b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002200:	233f      	movs	r3, #63	@ 0x3f
 8002202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f001 ff85 	bl	8004134 <HAL_RCC_ClockConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002230:	f000 fa40 	bl	80026b4 <Error_Handler>
  }
}
 8002234:	bf00      	nop
 8002236:	3770      	adds	r7, #112	@ 0x70
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	58000400 	.word	0x58000400
 8002240:	58024800 	.word	0x58024800

08002244 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0b0      	sub	sp, #192	@ 0xc0
 8002248:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800224a:	463b      	mov	r3, r7
 800224c:	22c0      	movs	r2, #192	@ 0xc0
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f007 f978 	bl	8009546 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8002256:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002262:	2300      	movs	r3, #0
 8002264:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002266:	463b      	mov	r3, r7
 8002268:	4618      	mov	r0, r3
 800226a:	f002 fad9 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8002274:	f000 fa1e 	bl	80026b4 <Error_Handler>
  }
}
 8002278:	bf00      	nop
 800227a:	37c0      	adds	r7, #192	@ 0xc0
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002284:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <MX_I2S3_Init+0x5c>)
 8002286:	4a16      	ldr	r2, [pc, #88]	@ (80022e0 <MX_I2S3_Init+0x60>)
 8002288:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800228a:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <MX_I2S3_Init+0x5c>)
 800228c:	220a      	movs	r2, #10
 800228e:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <MX_I2S3_Init+0x5c>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002296:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <MX_I2S3_Init+0x5c>)
 8002298:	2200      	movs	r2, #0
 800229a:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800229c:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <MX_I2S3_Init+0x5c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <MX_I2S3_Init+0x5c>)
 80022a4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80022a8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <MX_I2S3_Init+0x5c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <MX_I2S3_Init+0x5c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <MX_I2S3_Init+0x5c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80022bc:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <MX_I2S3_Init+0x5c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <MX_I2S3_Init+0x5c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	@ (80022dc <MX_I2S3_Init+0x5c>)
 80022ca:	f001 f97d 	bl	80035c8 <HAL_I2S_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 80022d4:	f000 f9ee 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	240000c8 	.word	0x240000c8
 80022e0:	40003c00 	.word	0x40003c00

080022e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022e8:	4b28      	ldr	r3, [pc, #160]	@ (800238c <MX_SPI1_Init+0xa8>)
 80022ea:	4a29      	ldr	r2, [pc, #164]	@ (8002390 <MX_SPI1_Init+0xac>)
 80022ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022ee:	4b27      	ldr	r3, [pc, #156]	@ (800238c <MX_SPI1_Init+0xa8>)
 80022f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022f6:	4b25      	ldr	r3, [pc, #148]	@ (800238c <MX_SPI1_Init+0xa8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022fc:	4b23      	ldr	r3, [pc, #140]	@ (800238c <MX_SPI1_Init+0xa8>)
 80022fe:	2207      	movs	r2, #7
 8002300:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002308:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <MX_SPI1_Init+0xa8>)
 800230c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002312:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002314:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800231a:	4b1c      	ldr	r3, [pc, #112]	@ (800238c <MX_SPI1_Init+0xa8>)
 800231c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002320:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002322:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002324:	2200      	movs	r2, #0
 8002326:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002328:	4b18      	ldr	r3, [pc, #96]	@ (800238c <MX_SPI1_Init+0xa8>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232e:	4b17      	ldr	r3, [pc, #92]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002330:	2200      	movs	r2, #0
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002334:	4b15      	ldr	r3, [pc, #84]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002336:	2200      	movs	r2, #0
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800233a:	4b14      	ldr	r3, [pc, #80]	@ (800238c <MX_SPI1_Init+0xa8>)
 800233c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002340:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002342:	4b12      	ldr	r3, [pc, #72]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002344:	2200      	movs	r2, #0
 8002346:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002348:	4b10      	ldr	r3, [pc, #64]	@ (800238c <MX_SPI1_Init+0xa8>)
 800234a:	2200      	movs	r2, #0
 800234c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800234e:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002350:	2200      	movs	r2, #0
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002354:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800235a:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <MX_SPI1_Init+0xa8>)
 800235c:	2200      	movs	r2, #0
 800235e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002360:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002362:	2200      	movs	r2, #0
 8002364:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002366:	4b09      	ldr	r3, [pc, #36]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002368:	2200      	movs	r2, #0
 800236a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <MX_SPI1_Init+0xa8>)
 800236e:	2200      	movs	r2, #0
 8002370:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <MX_SPI1_Init+0xa8>)
 8002374:	2200      	movs	r2, #0
 8002376:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	@ (800238c <MX_SPI1_Init+0xa8>)
 800237a:	f004 ff4f 	bl	800721c <HAL_SPI_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8002384:	f000 f996 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2400011c 	.word	0x2400011c
 8002390:	40013000 	.word	0x40013000

08002394 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002398:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <MX_SPI2_Init+0xa4>)
 800239a:	4a28      	ldr	r2, [pc, #160]	@ (800243c <MX_SPI2_Init+0xa8>)
 800239c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800239e:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023a6:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ac:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023ae:	2207      	movs	r2, #7
 80023b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b2:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023be:	4b1e      	ldr	r3, [pc, #120]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d4:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023f4:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <MX_SPI2_Init+0xa4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002400:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <MX_SPI2_Init+0xa4>)
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002406:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <MX_SPI2_Init+0xa4>)
 8002408:	2200      	movs	r2, #0
 800240a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <MX_SPI2_Init+0xa4>)
 800240e:	2200      	movs	r2, #0
 8002410:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <MX_SPI2_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002418:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <MX_SPI2_Init+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <MX_SPI2_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002424:	4804      	ldr	r0, [pc, #16]	@ (8002438 <MX_SPI2_Init+0xa4>)
 8002426:	f004 fef9 	bl	800721c <HAL_SPI_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002430:	f000 f940 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	240001a4 	.word	0x240001a4
 800243c:	40003800 	.word	0x40003800

08002440 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002450:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <MX_TIM6_Init+0x68>)
 8002452:	4a16      	ldr	r2, [pc, #88]	@ (80024ac <MX_TIM6_Init+0x6c>)
 8002454:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8002456:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <MX_TIM6_Init+0x68>)
 8002458:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800245c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <MX_TIM6_Init+0x68>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002464:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <MX_TIM6_Init+0x68>)
 8002466:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800246a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <MX_TIM6_Init+0x68>)
 800246e:	2280      	movs	r2, #128	@ 0x80
 8002470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002472:	480d      	ldr	r0, [pc, #52]	@ (80024a8 <MX_TIM6_Init+0x68>)
 8002474:	f005 fe07 	bl	8008086 <HAL_TIM_Base_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800247e:	f000 f919 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002482:	2320      	movs	r3, #32
 8002484:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	@ (80024a8 <MX_TIM6_Init+0x68>)
 8002490:	f006 f85e 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800249a:	f000 f90b 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2400022c 	.word	0x2400022c
 80024ac:	40001000 	.word	0x40001000

080024b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	4b75      	ldr	r3, [pc, #468]	@ (800269c <MX_GPIO_Init+0x1ec>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024cc:	4a73      	ldr	r2, [pc, #460]	@ (800269c <MX_GPIO_Init+0x1ec>)
 80024ce:	f043 0304 	orr.w	r3, r3, #4
 80024d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d6:	4b71      	ldr	r3, [pc, #452]	@ (800269c <MX_GPIO_Init+0x1ec>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4b6d      	ldr	r3, [pc, #436]	@ (800269c <MX_GPIO_Init+0x1ec>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ea:	4a6c      	ldr	r2, [pc, #432]	@ (800269c <MX_GPIO_Init+0x1ec>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f4:	4b69      	ldr	r3, [pc, #420]	@ (800269c <MX_GPIO_Init+0x1ec>)
 80024f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	4b66      	ldr	r3, [pc, #408]	@ (800269c <MX_GPIO_Init+0x1ec>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002508:	4a64      	ldr	r2, [pc, #400]	@ (800269c <MX_GPIO_Init+0x1ec>)
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002512:	4b62      	ldr	r3, [pc, #392]	@ (800269c <MX_GPIO_Init+0x1ec>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002520:	4b5e      	ldr	r3, [pc, #376]	@ (800269c <MX_GPIO_Init+0x1ec>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002526:	4a5d      	ldr	r2, [pc, #372]	@ (800269c <MX_GPIO_Init+0x1ec>)
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002530:	4b5a      	ldr	r3, [pc, #360]	@ (800269c <MX_GPIO_Init+0x1ec>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800253e:	4b57      	ldr	r3, [pc, #348]	@ (800269c <MX_GPIO_Init+0x1ec>)
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002544:	4a55      	ldr	r2, [pc, #340]	@ (800269c <MX_GPIO_Init+0x1ec>)
 8002546:	f043 0310 	orr.w	r3, r3, #16
 800254a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800254e:	4b53      	ldr	r3, [pc, #332]	@ (800269c <MX_GPIO_Init+0x1ec>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800255c:	2200      	movs	r2, #0
 800255e:	2120      	movs	r1, #32
 8002560:	484f      	ldr	r0, [pc, #316]	@ (80026a0 <MX_GPIO_Init+0x1f0>)
 8002562:	f001 f817 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800256c:	484d      	ldr	r0, [pc, #308]	@ (80026a4 <MX_GPIO_Init+0x1f4>)
 800256e:	f001 f811 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 8002572:	2201      	movs	r2, #1
 8002574:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002578:	484b      	ldr	r0, [pc, #300]	@ (80026a8 <MX_GPIO_Init+0x1f8>)
 800257a:	f001 f80b 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	21e0      	movs	r1, #224	@ 0xe0
 8002582:	4849      	ldr	r0, [pc, #292]	@ (80026a8 <MX_GPIO_Init+0x1f8>)
 8002584:	f001 f806 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800258e:	4845      	ldr	r0, [pc, #276]	@ (80026a4 <MX_GPIO_Init+0x1f4>)
 8002590:	f001 f800 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	2103      	movs	r1, #3
 8002598:	4844      	ldr	r0, [pc, #272]	@ (80026ac <MX_GPIO_Init+0x1fc>)
 800259a:	f000 fffb 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800259e:	2310      	movs	r3, #16
 80025a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	483f      	ldr	r0, [pc, #252]	@ (80026b0 <MX_GPIO_Init+0x200>)
 80025b2:	f000 fe3f 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 80025b6:	2310      	movs	r3, #16
 80025b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	4835      	ldr	r0, [pc, #212]	@ (80026a0 <MX_GPIO_Init+0x1f0>)
 80025ca:	f000 fe33 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80025ce:	2320      	movs	r3, #32
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025d6:	2302      	movs	r3, #2
 80025d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	482e      	ldr	r0, [pc, #184]	@ (80026a0 <MX_GPIO_Init+0x1f0>)
 80025e6:	f000 fe25 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80025ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4828      	ldr	r0, [pc, #160]	@ (80026a4 <MX_GPIO_Init+0x1f4>)
 8002604:	f000 fe16 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8002608:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800260c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260e:	2301      	movs	r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	4821      	ldr	r0, [pc, #132]	@ (80026a8 <MX_GPIO_Init+0x1f8>)
 8002622:	f000 fe07 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8002626:	231f      	movs	r3, #31
 8002628:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262e:	2301      	movs	r3, #1
 8002630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	481b      	ldr	r0, [pc, #108]	@ (80026a8 <MX_GPIO_Init+0x1f8>)
 800263a:	f000 fdfb 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 800263e:	23e0      	movs	r3, #224	@ 0xe0
 8002640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002642:	2301      	movs	r3, #1
 8002644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	4814      	ldr	r0, [pc, #80]	@ (80026a8 <MX_GPIO_Init+0x1f8>)
 8002656:	f000 fded 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDG_Pin */
  GPIO_InitStruct.Pin = LEDG_Pin;
 800265a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800265e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002660:	2301      	movs	r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDG_GPIO_Port, &GPIO_InitStruct);
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4619      	mov	r1, r3
 8002672:	480c      	ldr	r0, [pc, #48]	@ (80026a4 <MX_GPIO_Init+0x1f4>)
 8002674:	f000 fdde 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 8002678:	2303      	movs	r3, #3
 800267a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267c:	2301      	movs	r3, #1
 800267e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4619      	mov	r1, r3
 800268e:	4807      	ldr	r0, [pc, #28]	@ (80026ac <MX_GPIO_Init+0x1fc>)
 8002690:	f000 fdd0 	bl	8003234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002694:	bf00      	nop
 8002696:	3728      	adds	r7, #40	@ 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	58024400 	.word	0x58024400
 80026a0:	58020800 	.word	0x58020800
 80026a4:	58020400 	.word	0x58020400
 80026a8:	58020c00 	.word	0x58020c00
 80026ac:	58021000 	.word	0x58021000
 80026b0:	58020000 	.word	0x58020000

080026b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b8:	b672      	cpsid	i
}
 80026ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <Error_Handler+0x8>

080026c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_MspInit+0x30>)
 80026c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026cc:	4a08      	ldr	r2, [pc, #32]	@ (80026f0 <HAL_MspInit+0x30>)
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_MspInit+0x30>)
 80026d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	58024400 	.word	0x58024400

080026f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b0bc      	sub	sp, #240	@ 0xf0
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800270c:	f107 0318 	add.w	r3, r7, #24
 8002710:	22c0      	movs	r2, #192	@ 0xc0
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f006 ff16 	bl	8009546 <memset>
  if(hi2s->Instance==SPI3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a4c      	ldr	r2, [pc, #304]	@ (8002850 <HAL_I2S_MspInit+0x15c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	f040 8090 	bne.w	8002846 <HAL_I2S_MspInit+0x152>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002726:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002732:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002736:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002738:	f107 0318 	add.w	r3, r7, #24
 800273c:	4618      	mov	r0, r3
 800273e:	f002 f86f 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8002748:	f7ff ffb4 	bl	80026b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800274c:	4b41      	ldr	r3, [pc, #260]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 800274e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002752:	4a40      	ldr	r2, [pc, #256]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 8002754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002758:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800275c:	4b3d      	ldr	r3, [pc, #244]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 800275e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276a:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002770:	4a38      	ldr	r2, [pc, #224]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800277a:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 800277c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	4b32      	ldr	r3, [pc, #200]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 800278a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278e:	4a31      	ldr	r2, [pc, #196]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002798:	4b2e      	ldr	r3, [pc, #184]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ac:	4a29      	ldr	r2, [pc, #164]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027b6:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <HAL_I2S_MspInit+0x160>)
 80027b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027c4:	2304      	movs	r3, #4
 80027c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80027dc:	2307      	movs	r3, #7
 80027de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027e6:	4619      	mov	r1, r3
 80027e8:	481b      	ldr	r0, [pc, #108]	@ (8002858 <HAL_I2S_MspInit+0x164>)
 80027ea:	f000 fd23 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002808:	2306      	movs	r3, #6
 800280a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002812:	4619      	mov	r1, r3
 8002814:	4811      	ldr	r0, [pc, #68]	@ (800285c <HAL_I2S_MspInit+0x168>)
 8002816:	f000 fd0d 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800281a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800281e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002834:	2306      	movs	r3, #6
 8002836:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800283e:	4619      	mov	r1, r3
 8002840:	4807      	ldr	r0, [pc, #28]	@ (8002860 <HAL_I2S_MspInit+0x16c>)
 8002842:	f000 fcf7 	bl	8003234 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002846:	bf00      	nop
 8002848:	37f0      	adds	r7, #240	@ 0xf0
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40003c00 	.word	0x40003c00
 8002854:	58024400 	.word	0x58024400
 8002858:	58020400 	.word	0x58020400
 800285c:	58020000 	.word	0x58020000
 8002860:	58020800 	.word	0x58020800

08002864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0be      	sub	sp, #248	@ 0xf8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800287c:	f107 0320 	add.w	r3, r7, #32
 8002880:	22c0      	movs	r2, #192	@ 0xc0
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f006 fe5e 	bl	8009546 <memset>
  if(hspi->Instance==SPI1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a72      	ldr	r2, [pc, #456]	@ (8002a58 <HAL_SPI_MspInit+0x1f4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d16b      	bne.n	800296c <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002894:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80028a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028a8:	f107 0320 	add.w	r3, r7, #32
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 ffb7 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80028b8:	f7ff fefc 	bl	80026b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028bc:	4b67      	ldr	r3, [pc, #412]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80028be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c2:	4a66      	ldr	r2, [pc, #408]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80028c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028cc:	4b63      	ldr	r3, [pc, #396]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80028ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	4b60      	ldr	r3, [pc, #384]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80028dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e0:	4a5e      	ldr	r2, [pc, #376]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ea:	4b5c      	ldr	r3, [pc, #368]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80028ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f8:	4b58      	ldr	r3, [pc, #352]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80028fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fe:	4a57      	ldr	r2, [pc, #348]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002908:	4b54      	ldr	r3, [pc, #336]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 800290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002916:	23c0      	movs	r3, #192	@ 0xc0
 8002918:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800292e:	2305      	movs	r3, #5
 8002930:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002938:	4619      	mov	r1, r3
 800293a:	4849      	ldr	r0, [pc, #292]	@ (8002a60 <HAL_SPI_MspInit+0x1fc>)
 800293c:	f000 fc7a 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002940:	2308      	movs	r3, #8
 8002942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002952:	2303      	movs	r3, #3
 8002954:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002958:	2305      	movs	r3, #5
 800295a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002962:	4619      	mov	r1, r3
 8002964:	483f      	ldr	r0, [pc, #252]	@ (8002a64 <HAL_SPI_MspInit+0x200>)
 8002966:	f000 fc65 	bl	8003234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800296a:	e070      	b.n	8002a4e <HAL_SPI_MspInit+0x1ea>
  else if(hspi->Instance==SPI2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a3d      	ldr	r2, [pc, #244]	@ (8002a68 <HAL_SPI_MspInit+0x204>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d16b      	bne.n	8002a4e <HAL_SPI_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002976:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002982:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002986:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800298a:	f107 0320 	add.w	r3, r7, #32
 800298e:	4618      	mov	r0, r3
 8002990:	f001 ff46 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 800299a:	f7ff fe8b 	bl	80026b4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800299e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80029a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029a4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029ae:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80029b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029bc:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80029be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c2:	4a26      	ldr	r2, [pc, #152]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029cc:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80029dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029ea:	4b1c      	ldr	r3, [pc, #112]	@ (8002a5c <HAL_SPI_MspInit+0x1f8>)
 80029ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80029f8:	2306      	movs	r3, #6
 80029fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a10:	2305      	movs	r3, #5
 8002a12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a16:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4813      	ldr	r0, [pc, #76]	@ (8002a6c <HAL_SPI_MspInit+0x208>)
 8002a1e:	f000 fc09 	bl	8003234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a3c:	2305      	movs	r3, #5
 8002a3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4806      	ldr	r0, [pc, #24]	@ (8002a64 <HAL_SPI_MspInit+0x200>)
 8002a4a:	f000 fbf3 	bl	8003234 <HAL_GPIO_Init>
}
 8002a4e:	bf00      	nop
 8002a50:	37f8      	adds	r7, #248	@ 0xf8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40013000 	.word	0x40013000
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	58020000 	.word	0x58020000
 8002a64:	58020400 	.word	0x58020400
 8002a68:	40003800 	.word	0x40003800
 8002a6c:	58020800 	.word	0x58020800

08002a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab8 <HAL_TIM_Base_MspInit+0x48>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d116      	bne.n	8002ab0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a82:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <HAL_TIM_Base_MspInit+0x4c>)
 8002a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a88:	4a0c      	ldr	r2, [pc, #48]	@ (8002abc <HAL_TIM_Base_MspInit+0x4c>)
 8002a8a:	f043 0310 	orr.w	r3, r3, #16
 8002a8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <HAL_TIM_Base_MspInit+0x4c>)
 8002a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	2036      	movs	r0, #54	@ 0x36
 8002aa6:	f000 fb90 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002aaa:	2036      	movs	r0, #54	@ 0x36
 8002aac:	f000 fba7 	bl	80031fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40001000 	.word	0x40001000
 8002abc:	58024400 	.word	0x58024400

08002ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <NMI_Handler+0x4>

08002ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <HardFault_Handler+0x4>

08002ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <MemManage_Handler+0x4>

08002ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <BusFault_Handler+0x4>

08002ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <UsageFault_Handler+0x4>

08002ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	af00      	add	r7, sp, #0
//  }
//  if (Timer2) {
//	Timer2--;
//  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b16:	f000 fa2d 	bl	8002f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b26:	481b      	ldr	r0, [pc, #108]	@ (8002b94 <TIM6_DAC_IRQHandler+0x74>)
 8002b28:	f005 fb33 	bl	8008192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  game_timer--;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b98 <TIM6_DAC_IRQHandler+0x78>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	4b18      	ldr	r3, [pc, #96]	@ (8002b98 <TIM6_DAC_IRQHandler+0x78>)
 8002b36:	701a      	strb	r2, [r3, #0]
  sprintf(print_timer, "%d", game_timer);
 8002b38:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <TIM6_DAC_IRQHandler+0x78>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4916      	ldr	r1, [pc, #88]	@ (8002b9c <TIM6_DAC_IRQHandler+0x7c>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f006 fc9c 	bl	8009480 <siprintf>
  RA8875_text_mode();
 8002b48:	f7fe fca4 	bl	8001494 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 8002b4c:	2132      	movs	r1, #50	@ 0x32
 8002b4e:	20c8      	movs	r0, #200	@ 0xc8
 8002b50:	f7fe fcc5 	bl	80014de <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8002b54:	211f      	movs	r1, #31
 8002b56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b5a:	f7fe fcfe 	bl	800155a <RA8875_text_color>
  RA8875_text_scale(1);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f7fe fd58 	bl	8001614 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	2102      	movs	r1, #2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fd7d 	bl	8001668 <RA8875_text_write>
  RA8875_graphic_mode();
 8002b6e:	f7fd fee9 	bl	8000944 <RA8875_graphic_mode>
  if(game_timer <= 0) {
 8002b72:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <TIM6_DAC_IRQHandler+0x78>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d107      	bne.n	8002b8a <TIM6_DAC_IRQHandler+0x6a>
	  game_timer = 10;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <TIM6_DAC_IRQHandler+0x78>)
 8002b7c:	220a      	movs	r2, #10
 8002b7e:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim6);
 8002b80:	4804      	ldr	r0, [pc, #16]	@ (8002b94 <TIM6_DAC_IRQHandler+0x74>)
 8002b82:	f005 fad7 	bl	8008134 <HAL_TIM_Base_Stop_IT>
	  end_game();
 8002b86:	f7ff f84d 	bl	8001c24 <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	2400022c 	.word	0x2400022c
 8002b98:	24000000 	.word	0x24000000
 8002b9c:	0800b334 	.word	0x0800b334

08002ba0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return 1;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <_kill>:

int _kill(int pid, int sig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bba:	f006 fd13 	bl	80095e4 <__errno>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2216      	movs	r2, #22
 8002bc2:	601a      	str	r2, [r3, #0]
  return -1;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_exit>:

void _exit (int status)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ffe7 	bl	8002bb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002be2:	bf00      	nop
 8002be4:	e7fd      	b.n	8002be2 <_exit+0x12>

08002be6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e00a      	b.n	8002c0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bf8:	f3af 8000 	nop.w
 8002bfc:	4601      	mov	r1, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	60ba      	str	r2, [r7, #8]
 8002c04:	b2ca      	uxtb	r2, r1
 8002c06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	dbf0      	blt.n	8002bf8 <_read+0x12>
  }

  return len;
 8002c16:	687b      	ldr	r3, [r7, #4]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e009      	b.n	8002c46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	60ba      	str	r2, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3301      	adds	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	dbf1      	blt.n	8002c32 <_write+0x12>
  }
  return len;
 8002c4e:	687b      	ldr	r3, [r7, #4]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_close>:

int _close(int file)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c80:	605a      	str	r2, [r3, #4]
  return 0;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_isatty>:

int _isatty(int file)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c98:	2301      	movs	r3, #1
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc8:	4a14      	ldr	r2, [pc, #80]	@ (8002d1c <_sbrk+0x5c>)
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <_sbrk+0x60>)
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd4:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <_sbrk+0x64>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <_sbrk+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d207      	bcs.n	8002d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf0:	f006 fc78 	bl	80095e4 <__errno>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e009      	b.n	8002d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d00:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a05      	ldr	r2, [pc, #20]	@ (8002d24 <_sbrk+0x64>)
 8002d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	24080000 	.word	0x24080000
 8002d20:	00000400 	.word	0x00000400
 8002d24:	24000278 	.word	0x24000278
 8002d28:	240003f0 	.word	0x240003f0

08002d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d30:	4b37      	ldr	r3, [pc, #220]	@ (8002e10 <SystemInit+0xe4>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	4a36      	ldr	r2, [pc, #216]	@ (8002e10 <SystemInit+0xe4>)
 8002d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d40:	4b34      	ldr	r3, [pc, #208]	@ (8002e14 <SystemInit+0xe8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	2b06      	cmp	r3, #6
 8002d4a:	d807      	bhi.n	8002d5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d4c:	4b31      	ldr	r3, [pc, #196]	@ (8002e14 <SystemInit+0xe8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 030f 	bic.w	r3, r3, #15
 8002d54:	4a2f      	ldr	r2, [pc, #188]	@ (8002e14 <SystemInit+0xe8>)
 8002d56:	f043 0307 	orr.w	r3, r3, #7
 8002d5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e18 <SystemInit+0xec>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2d      	ldr	r2, [pc, #180]	@ (8002e18 <SystemInit+0xec>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d68:	4b2b      	ldr	r3, [pc, #172]	@ (8002e18 <SystemInit+0xec>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e18 <SystemInit+0xec>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4929      	ldr	r1, [pc, #164]	@ (8002e18 <SystemInit+0xec>)
 8002d74:	4b29      	ldr	r3, [pc, #164]	@ (8002e1c <SystemInit+0xf0>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d7a:	4b26      	ldr	r3, [pc, #152]	@ (8002e14 <SystemInit+0xe8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d86:	4b23      	ldr	r3, [pc, #140]	@ (8002e14 <SystemInit+0xe8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 030f 	bic.w	r3, r3, #15
 8002d8e:	4a21      	ldr	r2, [pc, #132]	@ (8002e14 <SystemInit+0xe8>)
 8002d90:	f043 0307 	orr.w	r3, r3, #7
 8002d94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <SystemInit+0xec>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e18 <SystemInit+0xec>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002da2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <SystemInit+0xec>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <SystemInit+0xec>)
 8002daa:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <SystemInit+0xf4>)
 8002dac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dae:	4b1a      	ldr	r3, [pc, #104]	@ (8002e18 <SystemInit+0xec>)
 8002db0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e24 <SystemInit+0xf8>)
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002db4:	4b18      	ldr	r3, [pc, #96]	@ (8002e18 <SystemInit+0xec>)
 8002db6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e28 <SystemInit+0xfc>)
 8002db8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dba:	4b17      	ldr	r3, [pc, #92]	@ (8002e18 <SystemInit+0xec>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002dc0:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <SystemInit+0xec>)
 8002dc2:	4a19      	ldr	r2, [pc, #100]	@ (8002e28 <SystemInit+0xfc>)
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002dc6:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <SystemInit+0xec>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <SystemInit+0xec>)
 8002dce:	4a16      	ldr	r2, [pc, #88]	@ (8002e28 <SystemInit+0xfc>)
 8002dd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002dd2:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <SystemInit+0xec>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <SystemInit+0xec>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e18 <SystemInit+0xec>)
 8002dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <SystemInit+0xec>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <SystemInit+0x100>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <SystemInit+0x104>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002df6:	d202      	bcs.n	8002dfe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <SystemInit+0x108>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <SystemInit+0x10c>)
 8002e00:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e04:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00
 8002e14:	52002000 	.word	0x52002000
 8002e18:	58024400 	.word	0x58024400
 8002e1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e20:	02020200 	.word	0x02020200
 8002e24:	01ff0000 	.word	0x01ff0000
 8002e28:	01010280 	.word	0x01010280
 8002e2c:	5c001000 	.word	0x5c001000
 8002e30:	ffff0000 	.word	0xffff0000
 8002e34:	51008108 	.word	0x51008108
 8002e38:	52004000 	.word	0x52004000

08002e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e40:	f7ff ff74 	bl	8002d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e44:	480c      	ldr	r0, [pc, #48]	@ (8002e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e46:	490d      	ldr	r1, [pc, #52]	@ (8002e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e48:	4a0d      	ldr	r2, [pc, #52]	@ (8002e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e4c:	e002      	b.n	8002e54 <LoopCopyDataInit>

08002e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e52:	3304      	adds	r3, #4

08002e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e58:	d3f9      	bcc.n	8002e4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e60:	e001      	b.n	8002e66 <LoopFillZerobss>

08002e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e64:	3204      	adds	r2, #4

08002e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e68:	d3fb      	bcc.n	8002e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e6a:	f006 fbc1 	bl	80095f0 <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 8002e6e:	f7ff f943 	bl	80020f8 <main>
  bx  lr
 8002e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e7c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8002e80:	0800b610 	.word	0x0800b610
  ldr r2, =_sbss
 8002e84:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8002e88:	240003ec 	.word	0x240003ec

08002e8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e8c:	e7fe      	b.n	8002e8c <ADC3_IRQHandler>
	...

08002e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e96:	2003      	movs	r0, #3
 8002e98:	f000 f98c 	bl	80031b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e9c:	f001 fb00 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_Init+0x68>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	4913      	ldr	r1, [pc, #76]	@ (8002efc <HAL_Init+0x6c>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eba:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <HAL_Init+0x68>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8002efc <HAL_Init+0x6c>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8002f00 <HAL_Init+0x70>)
 8002ed2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f04 <HAL_Init+0x74>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eda:	200f      	movs	r0, #15
 8002edc:	f000 f814 	bl	8002f08 <HAL_InitTick>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e002      	b.n	8002ef0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002eea:	f7ff fbe9 	bl	80026c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	0800b338 	.word	0x0800b338
 8002f00:	24000008 	.word	0x24000008
 8002f04:	24000004 	.word	0x24000004

08002f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f10:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_InitTick+0x60>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e021      	b.n	8002f60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f1c:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <HAL_InitTick+0x64>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <HAL_InitTick+0x60>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f971 	bl	800321a <HAL_SYSTICK_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00e      	b.n	8002f60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d80a      	bhi.n	8002f5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f000 f93b 	bl	80031ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f54:	4a06      	ldr	r2, [pc, #24]	@ (8002f70 <HAL_InitTick+0x68>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	24000010 	.word	0x24000010
 8002f6c:	24000004 	.word	0x24000004
 8002f70:	2400000c 	.word	0x2400000c

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	24000010 	.word	0x24000010
 8002f98:	2400027c 	.word	0x2400027c

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	2400027c 	.word	0x2400027c

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff ffee 	bl	8002f9c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	24000010 	.word	0x24000010

08002ffc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003000:	4b03      	ldr	r3, [pc, #12]	@ (8003010 <HAL_GetREVID+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0c1b      	lsrs	r3, r3, #16
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	5c001000 	.word	0x5c001000

08003014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003030:	4013      	ands	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	4313      	orrs	r3, r2
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	@ (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	05fa0000 	.word	0x05fa0000

0800305c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <__NVIC_GetPriorityGrouping+0x18>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0307 	and.w	r3, r3, #7
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0b      	blt.n	80030a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4907      	ldr	r1, [pc, #28]	@ (80030b0 <__NVIC_EnableIRQ+0x38>)
 8003092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	@ (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	@ (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
         );
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	@ 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003180:	d301      	bcc.n	8003186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003182:	2301      	movs	r3, #1
 8003184:	e00f      	b.n	80031a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003186:	4a0a      	ldr	r2, [pc, #40]	@ (80031b0 <SysTick_Config+0x40>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318e:	210f      	movs	r1, #15
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	f7ff ff8e 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <SysTick_Config+0x40>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319e:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <SysTick_Config+0x40>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	e000e010 	.word	0xe000e010

080031b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff29 	bl	8003014 <__NVIC_SetPriorityGrouping>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031d8:	f7ff ff40 	bl	800305c <__NVIC_GetPriorityGrouping>
 80031dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f7ff ff90 	bl	8003108 <NVIC_EncodePriority>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff5f 	bl	80030b4 <__NVIC_SetPriority>
}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff33 	bl	8003078 <__NVIC_EnableIRQ>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffa4 	bl	8003170 <SysTick_Config>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	@ 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003242:	4b89      	ldr	r3, [pc, #548]	@ (8003468 <HAL_GPIO_Init+0x234>)
 8003244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003246:	e194      	b.n	8003572 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2101      	movs	r1, #1
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8186 	beq.w	800356c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d005      	beq.n	8003278 <HAL_GPIO_Init+0x44>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d130      	bne.n	80032da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ae:	2201      	movs	r2, #1
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	f003 0201 	and.w	r2, r3, #1
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d017      	beq.n	8003316 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d123      	bne.n	800336a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	08da      	lsrs	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3208      	adds	r2, #8
 800332a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	220f      	movs	r2, #15
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	69b9      	ldr	r1, [r7, #24]
 8003366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0203 	and.w	r2, r3, #3
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80e0 	beq.w	800356c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ac:	4b2f      	ldr	r3, [pc, #188]	@ (800346c <HAL_GPIO_Init+0x238>)
 80033ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033b2:	4a2e      	ldr	r2, [pc, #184]	@ (800346c <HAL_GPIO_Init+0x238>)
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80033bc:	4b2b      	ldr	r3, [pc, #172]	@ (800346c <HAL_GPIO_Init+0x238>)
 80033be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ca:	4a29      	ldr	r2, [pc, #164]	@ (8003470 <HAL_GPIO_Init+0x23c>)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	089b      	lsrs	r3, r3, #2
 80033d0:	3302      	adds	r3, #2
 80033d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	220f      	movs	r2, #15
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a20      	ldr	r2, [pc, #128]	@ (8003474 <HAL_GPIO_Init+0x240>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d052      	beq.n	800349c <HAL_GPIO_Init+0x268>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003478 <HAL_GPIO_Init+0x244>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d031      	beq.n	8003462 <HAL_GPIO_Init+0x22e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1e      	ldr	r2, [pc, #120]	@ (800347c <HAL_GPIO_Init+0x248>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02b      	beq.n	800345e <HAL_GPIO_Init+0x22a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <HAL_GPIO_Init+0x24c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d025      	beq.n	800345a <HAL_GPIO_Init+0x226>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1c      	ldr	r2, [pc, #112]	@ (8003484 <HAL_GPIO_Init+0x250>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01f      	beq.n	8003456 <HAL_GPIO_Init+0x222>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1b      	ldr	r2, [pc, #108]	@ (8003488 <HAL_GPIO_Init+0x254>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d019      	beq.n	8003452 <HAL_GPIO_Init+0x21e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1a      	ldr	r2, [pc, #104]	@ (800348c <HAL_GPIO_Init+0x258>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0x21a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a19      	ldr	r2, [pc, #100]	@ (8003490 <HAL_GPIO_Init+0x25c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00d      	beq.n	800344a <HAL_GPIO_Init+0x216>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a18      	ldr	r2, [pc, #96]	@ (8003494 <HAL_GPIO_Init+0x260>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <HAL_GPIO_Init+0x212>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a17      	ldr	r2, [pc, #92]	@ (8003498 <HAL_GPIO_Init+0x264>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_GPIO_Init+0x20e>
 800343e:	2309      	movs	r3, #9
 8003440:	e02d      	b.n	800349e <HAL_GPIO_Init+0x26a>
 8003442:	230a      	movs	r3, #10
 8003444:	e02b      	b.n	800349e <HAL_GPIO_Init+0x26a>
 8003446:	2308      	movs	r3, #8
 8003448:	e029      	b.n	800349e <HAL_GPIO_Init+0x26a>
 800344a:	2307      	movs	r3, #7
 800344c:	e027      	b.n	800349e <HAL_GPIO_Init+0x26a>
 800344e:	2306      	movs	r3, #6
 8003450:	e025      	b.n	800349e <HAL_GPIO_Init+0x26a>
 8003452:	2305      	movs	r3, #5
 8003454:	e023      	b.n	800349e <HAL_GPIO_Init+0x26a>
 8003456:	2304      	movs	r3, #4
 8003458:	e021      	b.n	800349e <HAL_GPIO_Init+0x26a>
 800345a:	2303      	movs	r3, #3
 800345c:	e01f      	b.n	800349e <HAL_GPIO_Init+0x26a>
 800345e:	2302      	movs	r3, #2
 8003460:	e01d      	b.n	800349e <HAL_GPIO_Init+0x26a>
 8003462:	2301      	movs	r3, #1
 8003464:	e01b      	b.n	800349e <HAL_GPIO_Init+0x26a>
 8003466:	bf00      	nop
 8003468:	58000080 	.word	0x58000080
 800346c:	58024400 	.word	0x58024400
 8003470:	58000400 	.word	0x58000400
 8003474:	58020000 	.word	0x58020000
 8003478:	58020400 	.word	0x58020400
 800347c:	58020800 	.word	0x58020800
 8003480:	58020c00 	.word	0x58020c00
 8003484:	58021000 	.word	0x58021000
 8003488:	58021400 	.word	0x58021400
 800348c:	58021800 	.word	0x58021800
 8003490:	58021c00 	.word	0x58021c00
 8003494:	58022000 	.word	0x58022000
 8003498:	58022400 	.word	0x58022400
 800349c:	2300      	movs	r3, #0
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	f002 0203 	and.w	r2, r2, #3
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	4093      	lsls	r3, r2
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034ae:	4938      	ldr	r1, [pc, #224]	@ (8003590 <HAL_GPIO_Init+0x35c>)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	3302      	adds	r3, #2
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003510:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3301      	adds	r3, #1
 8003570:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	f47f ae63 	bne.w	8003248 <HAL_GPIO_Init+0x14>
  }
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	3724      	adds	r7, #36	@ 0x24
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	58000400 	.word	0x58000400

08003594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
 80035a0:	4613      	mov	r3, r2
 80035a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035a4:	787b      	ldrb	r3, [r7, #1]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035b0:	e003      	b.n	80035ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	041a      	lsls	r2, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	619a      	str	r2, [r3, #24]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e10d      	b.n	80037f6 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff f880 	bl	80026f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2200      	movs	r2, #0
 8003620:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b04      	cmp	r3, #4
 8003628:	d008      	beq.n	800363c <HAL_I2S_Init+0x74>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b06      	cmp	r3, #6
 8003630:	d004      	beq.n	800363c <HAL_I2S_Init+0x74>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b0a      	cmp	r3, #10
 8003638:	f040 8087 	bne.w	800374a <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d05a      	beq.n	80036fa <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800364c:	2302      	movs	r3, #2
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e001      	b.n	8003656 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003652:	2301      	movs	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b30      	cmp	r3, #48	@ 0x30
 800365c:	d003      	beq.n	8003666 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003662:	2bb0      	cmp	r3, #176	@ 0xb0
 8003664:	d102      	bne.n	800366c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8003666:	2301      	movs	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	e001      	b.n	8003670 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003670:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003674:	f04f 0100 	mov.w	r1, #0
 8003678:	f002 fadc 	bl	8005c34 <HAL_RCCEx_GetPeriphCLKFreq>
 800367c:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003686:	d113      	bne.n	80036b0 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	fbb2 f2f3 	udiv	r2, r2, r3
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	461a      	mov	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	3305      	adds	r3, #5
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	e014      	b.n	80036da <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80036b0:	2220      	movs	r2, #32
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	461a      	mov	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	3305      	adds	r3, #5
 80036d8:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4a48      	ldr	r2, [pc, #288]	@ (8003800 <HAL_I2S_Init+0x238>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	08db      	lsrs	r3, r3, #3
 80036e4:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e003      	b.n	8003702 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80036fa:	2302      	movs	r3, #2
 80036fc:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d102      	bne.n	800370e <HAL_I2S_Init+0x146>
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d002      	beq.n	8003714 <HAL_I2S_Init+0x14c>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2bff      	cmp	r3, #255	@ 0xff
 8003712:	d907      	bls.n	8003724 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003718:	f043 0210 	orr.w	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e068      	b.n	80037f6 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 800372a:	2301      	movs	r3, #1
 800372c:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003734:	4b33      	ldr	r3, [pc, #204]	@ (8003804 <HAL_I2S_Init+0x23c>)
 8003736:	4013      	ands	r3, r2
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	0411      	lsls	r1, r2, #16
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	0612      	lsls	r2, r2, #24
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	430b      	orrs	r3, r1
 8003748:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003750:	4b2d      	ldr	r3, [pc, #180]	@ (8003808 <HAL_I2S_Init+0x240>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6851      	ldr	r1, [r2, #4]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6892      	ldr	r2, [r2, #8]
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6992      	ldr	r2, [r2, #24]
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6a12      	ldr	r2, [r2, #32]
 800376e:	4311      	orrs	r1, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6912      	ldr	r2, [r2, #16]
 800377a:	430a      	orrs	r2, r1
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8003790:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80037a0:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d007      	beq.n	80037d0 <HAL_I2S_Init+0x208>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b06      	cmp	r3, #6
 80037c6:	d003      	beq.n	80037d0 <HAL_I2S_Init+0x208>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b0a      	cmp	r3, #10
 80037ce:	d10a      	bne.n	80037e6 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	cccccccd 	.word	0xcccccccd
 8003804:	fe00ffff 	.word	0xfe00ffff
 8003808:	fdff9040 	.word	0xfdff9040

0800380c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <HAL_PWREx_ConfigSupply+0x70>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d00a      	beq.n	8003836 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003820:	4b16      	ldr	r3, [pc, #88]	@ (800387c <HAL_PWREx_ConfigSupply+0x70>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	d001      	beq.n	8003832 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e01f      	b.n	8003872 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e01d      	b.n	8003872 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003836:	4b11      	ldr	r3, [pc, #68]	@ (800387c <HAL_PWREx_ConfigSupply+0x70>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 0207 	bic.w	r2, r3, #7
 800383e:	490f      	ldr	r1, [pc, #60]	@ (800387c <HAL_PWREx_ConfigSupply+0x70>)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4313      	orrs	r3, r2
 8003844:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003846:	f7ff fba9 	bl	8002f9c <HAL_GetTick>
 800384a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800384c:	e009      	b.n	8003862 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800384e:	f7ff fba5 	bl	8002f9c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800385c:	d901      	bls.n	8003862 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e007      	b.n	8003872 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003862:	4b06      	ldr	r3, [pc, #24]	@ (800387c <HAL_PWREx_ConfigSupply+0x70>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386e:	d1ee      	bne.n	800384e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	58024800 	.word	0x58024800

08003880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08c      	sub	sp, #48	@ 0x30
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f000 bc48 	b.w	8004124 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8088 	beq.w	80039b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a2:	4b99      	ldr	r3, [pc, #612]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038ac:	4b96      	ldr	r3, [pc, #600]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d007      	beq.n	80038c8 <HAL_RCC_OscConfig+0x48>
 80038b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ba:	2b18      	cmp	r3, #24
 80038bc:	d111      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62>
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d10c      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d06d      	beq.n	80039b0 <HAL_RCC_OscConfig+0x130>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d169      	bne.n	80039b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f000 bc21 	b.w	8004124 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x7a>
 80038ec:	4b86      	ldr	r3, [pc, #536]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a85      	ldr	r2, [pc, #532]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 80038f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	e02e      	b.n	8003958 <HAL_RCC_OscConfig+0xd8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x9c>
 8003902:	4b81      	ldr	r3, [pc, #516]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a80      	ldr	r2, [pc, #512]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7d      	ldr	r2, [pc, #500]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e01d      	b.n	8003958 <HAL_RCC_OscConfig+0xd8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0xc0>
 8003926:	4b78      	ldr	r3, [pc, #480]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a77      	ldr	r2, [pc, #476]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b75      	ldr	r3, [pc, #468]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a74      	ldr	r2, [pc, #464]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0xd8>
 8003940:	4b71      	ldr	r3, [pc, #452]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a70      	ldr	r2, [pc, #448]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b6e      	ldr	r3, [pc, #440]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6d      	ldr	r2, [pc, #436]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7ff fb1c 	bl	8002f9c <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003968:	f7ff fb18 	bl	8002f9c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	@ 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e3d4      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800397a:	4b63      	ldr	r3, [pc, #396]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0xe8>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7ff fb08 	bl	8002f9c <HAL_GetTick>
 800398c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7ff fb04 	bl	8002f9c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	@ 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e3c0      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039a2:	4b59      	ldr	r3, [pc, #356]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x110>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80ca 	beq.w	8003b54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c0:	4b51      	ldr	r3, [pc, #324]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <HAL_RCC_OscConfig+0x166>
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	2b18      	cmp	r3, #24
 80039da:	d156      	bne.n	8003a8a <HAL_RCC_OscConfig+0x20a>
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d151      	bne.n	8003a8a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e6:	4b48      	ldr	r3, [pc, #288]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_RCC_OscConfig+0x17e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e392      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039fe:	4b42      	ldr	r3, [pc, #264]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 0219 	bic.w	r2, r3, #25
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	493f      	ldr	r1, [pc, #252]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7ff fac4 	bl	8002f9c <HAL_GetTick>
 8003a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a18:	f7ff fac0 	bl	8002f9c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e37c      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a2a:	4b37      	ldr	r3, [pc, #220]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a36:	f7ff fae1 	bl	8002ffc <HAL_GetREVID>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d817      	bhi.n	8003a74 <HAL_RCC_OscConfig+0x1f4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b40      	cmp	r3, #64	@ 0x40
 8003a4a:	d108      	bne.n	8003a5e <HAL_RCC_OscConfig+0x1de>
 8003a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003a54:	4a2c      	ldr	r2, [pc, #176]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a5a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a5c:	e07a      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	031b      	lsls	r3, r3, #12
 8003a6c:	4926      	ldr	r1, [pc, #152]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a72:	e06f      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	4921      	ldr	r1, [pc, #132]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a88:	e064      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d047      	beq.n	8003b22 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a92:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 0219 	bic.w	r2, r3, #25
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	491a      	ldr	r1, [pc, #104]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7ff fa7a 	bl	8002f9c <HAL_GetTick>
 8003aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aac:	f7ff fa76 	bl	8002f9c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e332      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003abe:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aca:	f7ff fa97 	bl	8002ffc <HAL_GetREVID>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d819      	bhi.n	8003b0c <HAL_RCC_OscConfig+0x28c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b40      	cmp	r3, #64	@ 0x40
 8003ade:	d108      	bne.n	8003af2 <HAL_RCC_OscConfig+0x272>
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ae8:	4a07      	ldr	r2, [pc, #28]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aee:	6053      	str	r3, [r2, #4]
 8003af0:	e030      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	4901      	ldr	r1, [pc, #4]	@ (8003b08 <HAL_RCC_OscConfig+0x288>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
 8003b06:	e025      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	4b9a      	ldr	r3, [pc, #616]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	4997      	ldr	r1, [pc, #604]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
 8003b20:	e018      	b.n	8003b54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b22:	4b95      	ldr	r3, [pc, #596]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a94      	ldr	r2, [pc, #592]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7ff fa35 	bl	8002f9c <HAL_GetTick>
 8003b32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b36:	f7ff fa31 	bl	8002f9c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e2ed      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b48:	4b8b      	ldr	r3, [pc, #556]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a9 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b62:	4b85      	ldr	r3, [pc, #532]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b6c:	4b82      	ldr	r3, [pc, #520]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d007      	beq.n	8003b88 <HAL_RCC_OscConfig+0x308>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b18      	cmp	r3, #24
 8003b7c:	d13a      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x374>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d135      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b88:	4b7b      	ldr	r3, [pc, #492]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x320>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b80      	cmp	r3, #128	@ 0x80
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e2c1      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba0:	f7ff fa2c 	bl	8002ffc <HAL_GetREVID>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d817      	bhi.n	8003bde <HAL_RCC_OscConfig+0x35e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d108      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x348>
 8003bb6:	4b70      	ldr	r3, [pc, #448]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003bbe:	4a6e      	ldr	r2, [pc, #440]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bc4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bc6:	e075      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bc8:	4b6b      	ldr	r3, [pc, #428]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	069b      	lsls	r3, r3, #26
 8003bd6:	4968      	ldr	r1, [pc, #416]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bdc:	e06a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bde:	4b66      	ldr	r3, [pc, #408]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	061b      	lsls	r3, r3, #24
 8003bec:	4962      	ldr	r1, [pc, #392]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bf2:	e05f      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d042      	beq.n	8003c82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a5d      	ldr	r2, [pc, #372]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7ff f9c8 	bl	8002f9c <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c10:	f7ff f9c4 	bl	8002f9c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e280      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c22:	4b55      	ldr	r3, [pc, #340]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c2e:	f7ff f9e5 	bl	8002ffc <HAL_GetREVID>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d817      	bhi.n	8003c6c <HAL_RCC_OscConfig+0x3ec>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d108      	bne.n	8003c56 <HAL_RCC_OscConfig+0x3d6>
 8003c44:	4b4c      	ldr	r3, [pc, #304]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c4c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c52:	6053      	str	r3, [r2, #4]
 8003c54:	e02e      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
 8003c56:	4b48      	ldr	r3, [pc, #288]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	069b      	lsls	r3, r3, #26
 8003c64:	4944      	ldr	r1, [pc, #272]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
 8003c6a:	e023      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
 8003c6c:	4b42      	ldr	r3, [pc, #264]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	493f      	ldr	r1, [pc, #252]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60cb      	str	r3, [r1, #12]
 8003c80:	e018      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c82:	4b3d      	ldr	r3, [pc, #244]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3c      	ldr	r2, [pc, #240]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7ff f985 	bl	8002f9c <HAL_GetTick>
 8003c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c96:	f7ff f981 	bl	8002f9c <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e23d      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ca8:	4b33      	ldr	r3, [pc, #204]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d036      	beq.n	8003d2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d019      	beq.n	8003cfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7ff f962 	bl	8002f9c <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7ff f95e 	bl	8002f9c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e21a      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cee:	4b22      	ldr	r3, [pc, #136]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x45c>
 8003cfa:	e018      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d00:	4a1d      	ldr	r2, [pc, #116]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7ff f948 	bl	8002f9c <HAL_GetTick>
 8003d0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d10:	f7ff f944 	bl	8002f9c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e200      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d22:	4b15      	ldr	r3, [pc, #84]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d039      	beq.n	8003dae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d42:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a0c      	ldr	r2, [pc, #48]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d4e:	f7ff f925 	bl	8002f9c <HAL_GetTick>
 8003d52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d56:	f7ff f921 	bl	8002f9c <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1dd      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d68:	4b03      	ldr	r3, [pc, #12]	@ (8003d78 <HAL_RCC_OscConfig+0x4f8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x4d6>
 8003d74:	e01b      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d7c:	4b9b      	ldr	r3, [pc, #620]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a9a      	ldr	r2, [pc, #616]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003d82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d88:	f7ff f908 	bl	8002f9c <HAL_GetTick>
 8003d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d90:	f7ff f904 	bl	8002f9c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e1c0      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003da2:	4b92      	ldr	r3, [pc, #584]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8081 	beq.w	8003ebe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dbc:	4b8c      	ldr	r3, [pc, #560]	@ (8003ff0 <HAL_RCC_OscConfig+0x770>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a8b      	ldr	r2, [pc, #556]	@ (8003ff0 <HAL_RCC_OscConfig+0x770>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc8:	f7ff f8e8 	bl	8002f9c <HAL_GetTick>
 8003dcc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7ff f8e4 	bl	8002f9c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	@ 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1a0      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de2:	4b83      	ldr	r3, [pc, #524]	@ (8003ff0 <HAL_RCC_OscConfig+0x770>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d106      	bne.n	8003e04 <HAL_RCC_OscConfig+0x584>
 8003df6:	4b7d      	ldr	r3, [pc, #500]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e02:	e02d      	b.n	8003e60 <HAL_RCC_OscConfig+0x5e0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10c      	bne.n	8003e26 <HAL_RCC_OscConfig+0x5a6>
 8003e0c:	4b77      	ldr	r3, [pc, #476]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e10:	4a76      	ldr	r2, [pc, #472]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e18:	4b74      	ldr	r3, [pc, #464]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1c:	4a73      	ldr	r2, [pc, #460]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e1e:	f023 0304 	bic.w	r3, r3, #4
 8003e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e24:	e01c      	b.n	8003e60 <HAL_RCC_OscConfig+0x5e0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5c8>
 8003e2e:	4b6f      	ldr	r3, [pc, #444]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e32:	4a6e      	ldr	r2, [pc, #440]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a6b      	ldr	r2, [pc, #428]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0x5e0>
 8003e48:	4b68      	ldr	r3, [pc, #416]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4c:	4a67      	ldr	r2, [pc, #412]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e54:	4b65      	ldr	r3, [pc, #404]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	4a64      	ldr	r2, [pc, #400]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e5a:	f023 0304 	bic.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7ff f898 	bl	8002f9c <HAL_GetTick>
 8003e6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7ff f894 	bl	8002f9c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e14e      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e86:	4b59      	ldr	r3, [pc, #356]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ee      	beq.n	8003e70 <HAL_RCC_OscConfig+0x5f0>
 8003e92:	e014      	b.n	8003ebe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7ff f882 	bl	8002f9c <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7ff f87e 	bl	8002f9c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e138      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ee      	bne.n	8003e9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 812d 	beq.w	8004122 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ec8:	4b48      	ldr	r3, [pc, #288]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ed0:	2b18      	cmp	r3, #24
 8003ed2:	f000 80bd 	beq.w	8004050 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	f040 809e 	bne.w	800401c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b42      	ldr	r3, [pc, #264]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a41      	ldr	r2, [pc, #260]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7ff f856 	bl	8002f9c <HAL_GetTick>
 8003ef0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7ff f852 	bl	8002f9c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e10e      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f06:	4b39      	ldr	r3, [pc, #228]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f12:	4b36      	ldr	r3, [pc, #216]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f16:	4b37      	ldr	r3, [pc, #220]	@ (8003ff4 <HAL_RCC_OscConfig+0x774>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f22:	0112      	lsls	r2, r2, #4
 8003f24:	430a      	orrs	r2, r1
 8003f26:	4931      	ldr	r1, [pc, #196]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	3b01      	subs	r3, #1
 8003f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	025b      	lsls	r3, r3, #9
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f46:	3b01      	subs	r3, #1
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	3b01      	subs	r3, #1
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f5c:	4923      	ldr	r1, [pc, #140]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f62:	4b22      	ldr	r3, [pc, #136]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f72:	4b21      	ldr	r3, [pc, #132]	@ (8003ff8 <HAL_RCC_OscConfig+0x778>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f7a:	00d2      	lsls	r2, r2, #3
 8003f7c:	491b      	ldr	r1, [pc, #108]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f82:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	f023 020c 	bic.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	4917      	ldr	r1, [pc, #92]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f94:	4b15      	ldr	r3, [pc, #84]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	f023 0202 	bic.w	r2, r3, #2
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa0:	4912      	ldr	r1, [pc, #72]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fa6:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	4a10      	ldr	r2, [pc, #64]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fca:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	4a07      	ldr	r2, [pc, #28]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd6:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <HAL_RCC_OscConfig+0x76c>)
 8003fdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fe ffdb 	bl	8002f9c <HAL_GetTick>
 8003fe6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fe8:	e011      	b.n	800400e <HAL_RCC_OscConfig+0x78e>
 8003fea:	bf00      	nop
 8003fec:	58024400 	.word	0x58024400
 8003ff0:	58024800 	.word	0x58024800
 8003ff4:	fffffc0c 	.word	0xfffffc0c
 8003ff8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe ffce 	bl	8002f9c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e08a      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800400e:	4b47      	ldr	r3, [pc, #284]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x77c>
 800401a:	e082      	b.n	8004122 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b43      	ldr	r3, [pc, #268]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a42      	ldr	r2, [pc, #264]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe ffb8 	bl	8002f9c <HAL_GetTick>
 800402c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe ffb4 	bl	8002f9c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e070      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004042:	4b3a      	ldr	r3, [pc, #232]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x7b0>
 800404e:	e068      	b.n	8004122 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004050:	4b36      	ldr	r3, [pc, #216]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004056:	4b35      	ldr	r3, [pc, #212]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	2b01      	cmp	r3, #1
 8004062:	d031      	beq.n	80040c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0203 	and.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d12a      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d122      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d11a      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	0a5b      	lsrs	r3, r3, #9
 8004096:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d111      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d108      	bne.n	80040c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e02b      	b.n	8004124 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040cc:	4b17      	ldr	r3, [pc, #92]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 80040ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d0:	08db      	lsrs	r3, r3, #3
 80040d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d01f      	beq.n	8004122 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	4a11      	ldr	r2, [pc, #68]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ee:	f7fe ff55 	bl	8002f9c <HAL_GetTick>
 80040f2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040f4:	bf00      	nop
 80040f6:	f7fe ff51 	bl	8002f9c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	4293      	cmp	r3, r2
 8004100:	d0f9      	beq.n	80040f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004102:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 8004104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004106:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <HAL_RCC_OscConfig+0x8b0>)
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800410e:	00d2      	lsls	r2, r2, #3
 8004110:	4906      	ldr	r1, [pc, #24]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 8004112:	4313      	orrs	r3, r2
 8004114:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004116:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	4a04      	ldr	r2, [pc, #16]	@ (800412c <HAL_RCC_OscConfig+0x8ac>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3730      	adds	r7, #48	@ 0x30
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	58024400 	.word	0x58024400
 8004130:	ffff0007 	.word	0xffff0007

08004134 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e19c      	b.n	8004482 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b8a      	ldr	r3, [pc, #552]	@ (8004374 <HAL_RCC_ClockConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b87      	ldr	r3, [pc, #540]	@ (8004374 <HAL_RCC_ClockConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 020f 	bic.w	r2, r3, #15
 800415e:	4985      	ldr	r1, [pc, #532]	@ (8004374 <HAL_RCC_ClockConfig+0x240>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b83      	ldr	r3, [pc, #524]	@ (8004374 <HAL_RCC_ClockConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e184      	b.n	8004482 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	4b7b      	ldr	r3, [pc, #492]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004190:	429a      	cmp	r2, r3
 8004192:	d908      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004194:	4b78      	ldr	r3, [pc, #480]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	4975      	ldr	r1, [pc, #468]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d010      	beq.n	80041d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	4b70      	ldr	r3, [pc, #448]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041be:	429a      	cmp	r2, r3
 80041c0:	d908      	bls.n	80041d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	496a      	ldr	r1, [pc, #424]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699a      	ldr	r2, [r3, #24]
 80041e4:	4b64      	ldr	r3, [pc, #400]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d908      	bls.n	8004202 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041f0:	4b61      	ldr	r3, [pc, #388]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	495e      	ldr	r1, [pc, #376]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	4b59      	ldr	r3, [pc, #356]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800421a:	429a      	cmp	r2, r3
 800421c:	d908      	bls.n	8004230 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800421e:	4b56      	ldr	r3, [pc, #344]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4953      	ldr	r1, [pc, #332]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 800422c:	4313      	orrs	r3, r2
 800422e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	4b4d      	ldr	r3, [pc, #308]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	429a      	cmp	r2, r3
 800424a:	d908      	bls.n	800425e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424c:	4b4a      	ldr	r3, [pc, #296]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f023 020f 	bic.w	r2, r3, #15
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4947      	ldr	r1, [pc, #284]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 800425a:	4313      	orrs	r3, r2
 800425c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d055      	beq.n	8004316 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800426a:	4b43      	ldr	r3, [pc, #268]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	4940      	ldr	r1, [pc, #256]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004278:	4313      	orrs	r3, r2
 800427a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d107      	bne.n	8004294 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004284:	4b3c      	ldr	r3, [pc, #240]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d121      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0f6      	b.n	8004482 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d107      	bne.n	80042ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800429c:	4b36      	ldr	r3, [pc, #216]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d115      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0ea      	b.n	8004482 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042b4:	4b30      	ldr	r3, [pc, #192]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0de      	b.n	8004482 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0d6      	b.n	8004482 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d4:	4b28      	ldr	r3, [pc, #160]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f023 0207 	bic.w	r2, r3, #7
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4925      	ldr	r1, [pc, #148]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e6:	f7fe fe59 	bl	8002f9c <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ec:	e00a      	b.n	8004304 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ee:	f7fe fe55 	bl	8002f9c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0be      	b.n	8004482 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004304:	4b1c      	ldr	r3, [pc, #112]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	429a      	cmp	r2, r3
 8004314:	d1eb      	bne.n	80042ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d010      	beq.n	8004344 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	429a      	cmp	r2, r3
 8004330:	d208      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004332:	4b11      	ldr	r3, [pc, #68]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f023 020f 	bic.w	r2, r3, #15
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	490e      	ldr	r1, [pc, #56]	@ (8004378 <HAL_RCC_ClockConfig+0x244>)
 8004340:	4313      	orrs	r3, r2
 8004342:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <HAL_RCC_ClockConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d214      	bcs.n	800437c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b08      	ldr	r3, [pc, #32]	@ (8004374 <HAL_RCC_ClockConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 020f 	bic.w	r2, r3, #15
 800435a:	4906      	ldr	r1, [pc, #24]	@ (8004374 <HAL_RCC_ClockConfig+0x240>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b04      	ldr	r3, [pc, #16]	@ (8004374 <HAL_RCC_ClockConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e086      	b.n	8004482 <HAL_RCC_ClockConfig+0x34e>
 8004374:	52002000 	.word	0x52002000
 8004378:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d010      	beq.n	80043aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	4b3f      	ldr	r3, [pc, #252]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004394:	429a      	cmp	r2, r3
 8004396:	d208      	bcs.n	80043aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004398:	4b3c      	ldr	r3, [pc, #240]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	4939      	ldr	r1, [pc, #228]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d010      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	4b34      	ldr	r3, [pc, #208]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d208      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043c6:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	492e      	ldr	r1, [pc, #184]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	4b28      	ldr	r3, [pc, #160]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d208      	bcs.n	8004406 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043f4:	4b25      	ldr	r3, [pc, #148]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	4922      	ldr	r1, [pc, #136]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 8004402:	4313      	orrs	r3, r2
 8004404:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800441e:	429a      	cmp	r2, r3
 8004420:	d208      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004422:	4b1a      	ldr	r3, [pc, #104]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4917      	ldr	r1, [pc, #92]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 8004430:	4313      	orrs	r3, r2
 8004432:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004434:	f000 f834 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b14      	ldr	r3, [pc, #80]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	4912      	ldr	r1, [pc, #72]	@ (8004490 <HAL_RCC_ClockConfig+0x35c>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
 8004450:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004452:	4b0e      	ldr	r3, [pc, #56]	@ (800448c <HAL_RCC_ClockConfig+0x358>)
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	4a0d      	ldr	r2, [pc, #52]	@ (8004490 <HAL_RCC_ClockConfig+0x35c>)
 800445c:	5cd3      	ldrb	r3, [r2, r3]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	4a0a      	ldr	r2, [pc, #40]	@ (8004494 <HAL_RCC_ClockConfig+0x360>)
 800446a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800446c:	4a0a      	ldr	r2, [pc, #40]	@ (8004498 <HAL_RCC_ClockConfig+0x364>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004472:	4b0a      	ldr	r3, [pc, #40]	@ (800449c <HAL_RCC_ClockConfig+0x368>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fd46 	bl	8002f08 <HAL_InitTick>
 800447c:	4603      	mov	r3, r0
 800447e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	58024400 	.word	0x58024400
 8004490:	0800b338 	.word	0x0800b338
 8004494:	24000008 	.word	0x24000008
 8004498:	24000004 	.word	0x24000004
 800449c:	2400000c 	.word	0x2400000c

080044a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b089      	sub	sp, #36	@ 0x24
 80044a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a6:	4bb3      	ldr	r3, [pc, #716]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ae:	2b18      	cmp	r3, #24
 80044b0:	f200 8155 	bhi.w	800475e <HAL_RCC_GetSysClockFreq+0x2be>
 80044b4:	a201      	add	r2, pc, #4	@ (adr r2, 80044bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	08004521 	.word	0x08004521
 80044c0:	0800475f 	.word	0x0800475f
 80044c4:	0800475f 	.word	0x0800475f
 80044c8:	0800475f 	.word	0x0800475f
 80044cc:	0800475f 	.word	0x0800475f
 80044d0:	0800475f 	.word	0x0800475f
 80044d4:	0800475f 	.word	0x0800475f
 80044d8:	0800475f 	.word	0x0800475f
 80044dc:	08004547 	.word	0x08004547
 80044e0:	0800475f 	.word	0x0800475f
 80044e4:	0800475f 	.word	0x0800475f
 80044e8:	0800475f 	.word	0x0800475f
 80044ec:	0800475f 	.word	0x0800475f
 80044f0:	0800475f 	.word	0x0800475f
 80044f4:	0800475f 	.word	0x0800475f
 80044f8:	0800475f 	.word	0x0800475f
 80044fc:	0800454d 	.word	0x0800454d
 8004500:	0800475f 	.word	0x0800475f
 8004504:	0800475f 	.word	0x0800475f
 8004508:	0800475f 	.word	0x0800475f
 800450c:	0800475f 	.word	0x0800475f
 8004510:	0800475f 	.word	0x0800475f
 8004514:	0800475f 	.word	0x0800475f
 8004518:	0800475f 	.word	0x0800475f
 800451c:	08004553 	.word	0x08004553
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004520:	4b94      	ldr	r3, [pc, #592]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800452c:	4b91      	ldr	r3, [pc, #580]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	08db      	lsrs	r3, r3, #3
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	4a90      	ldr	r2, [pc, #576]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
 800453c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800453e:	e111      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004540:	4b8d      	ldr	r3, [pc, #564]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004542:	61bb      	str	r3, [r7, #24]
      break;
 8004544:	e10e      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004546:	4b8d      	ldr	r3, [pc, #564]	@ (800477c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004548:	61bb      	str	r3, [r7, #24]
      break;
 800454a:	e10b      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800454c:	4b8c      	ldr	r3, [pc, #560]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800454e:	61bb      	str	r3, [r7, #24]
      break;
 8004550:	e108      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004552:	4b88      	ldr	r3, [pc, #544]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800455c:	4b85      	ldr	r3, [pc, #532]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004566:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004568:	4b82      	ldr	r3, [pc, #520]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004572:	4b80      	ldr	r3, [pc, #512]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004576:	08db      	lsrs	r3, r3, #3
 8004578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80e1 	beq.w	8004758 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b02      	cmp	r3, #2
 800459a:	f000 8083 	beq.w	80046a4 <HAL_RCC_GetSysClockFreq+0x204>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	f200 80a1 	bhi.w	80046e8 <HAL_RCC_GetSysClockFreq+0x248>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x114>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d056      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x1c0>
 80045b2:	e099      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02d      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045c0:	4b6c      	ldr	r3, [pc, #432]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	08db      	lsrs	r3, r3, #3
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	4a6b      	ldr	r2, [pc, #428]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
 80045d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ea:	4b62      	ldr	r3, [pc, #392]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80045fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800460e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004616:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800461a:	e087      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004788 <HAL_RCC_GetSysClockFreq+0x2e8>
 800462a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462e:	4b51      	ldr	r3, [pc, #324]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004642:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800465e:	e065      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800478c <HAL_RCC_GetSysClockFreq+0x2ec>
 800466e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004672:	4b40      	ldr	r3, [pc, #256]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004682:	ed97 6a02 	vldr	s12, [r7, #8]
 8004686:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004784 <HAL_RCC_GetSysClockFreq+0x2e4>
 800468a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046a2:	e043      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004790 <HAL_RCC_GetSysClockFreq+0x2f0>
 80046b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004784 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046e6:	e021      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800478c <HAL_RCC_GetSysClockFreq+0x2ec>
 80046f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470a:	ed97 6a02 	vldr	s12, [r7, #8]
 800470e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800472a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800472c:	4b11      	ldr	r3, [pc, #68]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004736:	3301      	adds	r3, #1
 8004738:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	ee07 3a90 	vmov	s15, r3
 8004740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004744:	edd7 6a07 	vldr	s13, [r7, #28]
 8004748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004750:	ee17 3a90 	vmov	r3, s15
 8004754:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004756:	e005      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	61bb      	str	r3, [r7, #24]
      break;
 800475c:	e002      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800475e:	4b07      	ldr	r3, [pc, #28]	@ (800477c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004760:	61bb      	str	r3, [r7, #24]
      break;
 8004762:	bf00      	nop
  }

  return sysclockfreq;
 8004764:	69bb      	ldr	r3, [r7, #24]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3724      	adds	r7, #36	@ 0x24
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	58024400 	.word	0x58024400
 8004778:	03d09000 	.word	0x03d09000
 800477c:	003d0900 	.word	0x003d0900
 8004780:	00f42400 	.word	0x00f42400
 8004784:	46000000 	.word	0x46000000
 8004788:	4c742400 	.word	0x4c742400
 800478c:	4a742400 	.word	0x4a742400
 8004790:	4b742400 	.word	0x4b742400

08004794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800479a:	f7ff fe81 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800479e:	4602      	mov	r2, r0
 80047a0:	4b10      	ldr	r3, [pc, #64]	@ (80047e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	490f      	ldr	r1, [pc, #60]	@ (80047e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80047ac:	5ccb      	ldrb	r3, [r1, r3]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	fa22 f303 	lsr.w	r3, r2, r3
 80047b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047b8:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	4a09      	ldr	r2, [pc, #36]	@ (80047e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80047c2:	5cd3      	ldrb	r3, [r2, r3]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	4a07      	ldr	r2, [pc, #28]	@ (80047ec <HAL_RCC_GetHCLKFreq+0x58>)
 80047d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047d2:	4a07      	ldr	r2, [pc, #28]	@ (80047f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047d8:	4b04      	ldr	r3, [pc, #16]	@ (80047ec <HAL_RCC_GetHCLKFreq+0x58>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	58024400 	.word	0x58024400
 80047e8:	0800b338 	.word	0x0800b338
 80047ec:	24000008 	.word	0x24000008
 80047f0:	24000004 	.word	0x24000004

080047f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047f8:	f7ff ffcc 	bl	8004794 <HAL_RCC_GetHCLKFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	4904      	ldr	r1, [pc, #16]	@ (800481c <HAL_RCC_GetPCLK1Freq+0x28>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	58024400 	.word	0x58024400
 800481c:	0800b338 	.word	0x0800b338

08004820 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004824:	b0ca      	sub	sp, #296	@ 0x128
 8004826:	af00      	add	r7, sp, #0
 8004828:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004832:	2300      	movs	r3, #0
 8004834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004844:	2500      	movs	r5, #0
 8004846:	ea54 0305 	orrs.w	r3, r4, r5
 800484a:	d049      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004852:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004856:	d02f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004858:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800485c:	d828      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800485e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004862:	d01a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004868:	d822      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004872:	d007      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004874:	e01c      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004876:	4bb8      	ldr	r3, [pc, #736]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	4ab7      	ldr	r2, [pc, #732]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800487c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004882:	e01a      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	3308      	adds	r3, #8
 800488a:	2102      	movs	r1, #2
 800488c:	4618      	mov	r0, r3
 800488e:	f002 fb61 	bl	8006f54 <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004898:	e00f      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	3328      	adds	r3, #40	@ 0x28
 80048a0:	2102      	movs	r1, #2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f002 fc08 	bl	80070b8 <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ae:	e004      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048b6:	e000      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048c2:	4ba5      	ldr	r3, [pc, #660]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048d0:	4aa1      	ldr	r2, [pc, #644]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80048ec:	f04f 0900 	mov.w	r9, #0
 80048f0:	ea58 0309 	orrs.w	r3, r8, r9
 80048f4:	d047      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d82a      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004900:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800491d 	.word	0x0800491d
 800490c:	0800492b 	.word	0x0800492b
 8004910:	08004941 	.word	0x08004941
 8004914:	0800495f 	.word	0x0800495f
 8004918:	0800495f 	.word	0x0800495f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491c:	4b8e      	ldr	r3, [pc, #568]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	4a8d      	ldr	r2, [pc, #564]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004928:	e01a      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	3308      	adds	r3, #8
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f002 fb0e 	bl	8006f54 <RCCEx_PLL2_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800493e:	e00f      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004944:	3328      	adds	r3, #40	@ 0x28
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f002 fbb5 	bl	80070b8 <RCCEx_PLL3_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004954:	e004      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800495c:	e000      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800495e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004968:	4b7b      	ldr	r3, [pc, #492]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800496a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800496c:	f023 0107 	bic.w	r1, r3, #7
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004976:	4a78      	ldr	r2, [pc, #480]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004978:	430b      	orrs	r3, r1
 800497a:	6513      	str	r3, [r2, #80]	@ 0x50
 800497c:	e003      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004992:	f04f 0b00 	mov.w	fp, #0
 8004996:	ea5a 030b 	orrs.w	r3, sl, fp
 800499a:	d04c      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a6:	d030      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80049a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ac:	d829      	bhi.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80049b0:	d02d      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80049b4:	d825      	bhi.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049b6:	2b80      	cmp	r3, #128	@ 0x80
 80049b8:	d018      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80049ba:	2b80      	cmp	r3, #128	@ 0x80
 80049bc:	d821      	bhi.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80049c2:	2b40      	cmp	r3, #64	@ 0x40
 80049c4:	d007      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80049c6:	e01c      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c8:	4b63      	ldr	r3, [pc, #396]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	4a62      	ldr	r2, [pc, #392]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80049d4:	e01c      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049da:	3308      	adds	r3, #8
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f002 fab8 	bl	8006f54 <RCCEx_PLL2_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80049ea:	e011      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f0:	3328      	adds	r3, #40	@ 0x28
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f002 fb5f 	bl	80070b8 <RCCEx_PLL3_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a00:	e006      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a08:	e002      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a0a:	bf00      	nop
 8004a0c:	e000      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a18:	4b4f      	ldr	r3, [pc, #316]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a26:	4a4c      	ldr	r2, [pc, #304]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a2c:	e003      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004a46:	2300      	movs	r3, #0
 8004a48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004a4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004a50:	460b      	mov	r3, r1
 8004a52:	4313      	orrs	r3, r2
 8004a54:	d053      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a62:	d035      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004a64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a68:	d82e      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a6e:	d031      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004a70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a74:	d828      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a7a:	d01a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a80:	d822      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a8a:	d007      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004a8c:	e01c      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8e:	4b32      	ldr	r3, [pc, #200]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	4a31      	ldr	r2, [pc, #196]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a9a:	e01c      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f002 fa55 	bl	8006f54 <RCCEx_PLL2_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ab0:	e011      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	3328      	adds	r3, #40	@ 0x28
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f002 fafc 	bl	80070b8 <RCCEx_PLL3_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ac6:	e006      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ace:	e002      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ad0:	bf00      	nop
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10b      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ade:	4b1e      	ldr	r3, [pc, #120]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004aee:	4a1a      	ldr	r2, [pc, #104]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004af4:	e003      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	d056      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b2a:	d038      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b30:	d831      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b36:	d034      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004b38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b3c:	d82b      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b42:	d01d      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b48:	d825      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004b4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b54:	e01f      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b56:	bf00      	nop
 8004b58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5c:	4ba2      	ldr	r3, [pc, #648]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	4aa1      	ldr	r2, [pc, #644]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b68:	e01c      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	3308      	adds	r3, #8
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f002 f9ee 	bl	8006f54 <RCCEx_PLL2_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b7e:	e011      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b84:	3328      	adds	r3, #40	@ 0x28
 8004b86:	2100      	movs	r1, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f002 fa95 	bl	80070b8 <RCCEx_PLL3_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b94:	e006      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b9c:	e002      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bac:	4b8e      	ldr	r3, [pc, #568]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004bbc:	4a8a      	ldr	r2, [pc, #552]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bc2:	e003      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004be2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004be6:	460b      	mov	r3, r1
 8004be8:	4313      	orrs	r3, r2
 8004bea:	d03a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf2:	2b30      	cmp	r3, #48	@ 0x30
 8004bf4:	d01f      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004bf6:	2b30      	cmp	r3, #48	@ 0x30
 8004bf8:	d819      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d00c      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d815      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d019      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d111      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0a:	4b77      	ldr	r3, [pc, #476]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	4a76      	ldr	r2, [pc, #472]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c16:	e011      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	2102      	movs	r1, #2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f002 f997 	bl	8006f54 <RCCEx_PLL2_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c2c:	e006      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c34:	e002      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c44:	4b68      	ldr	r3, [pc, #416]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c52:	4a65      	ldr	r2, [pc, #404]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c54:	430b      	orrs	r3, r1
 8004c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c58:	e003      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c72:	2300      	movs	r3, #0
 8004c74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	d051      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c8c:	d035      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c92:	d82e      	bhi.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c98:	d031      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c9e:	d828      	bhi.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca4:	d01a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004caa:	d822      	bhi.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb4:	d007      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004cb6:	e01c      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cc4:	e01c      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	3308      	adds	r3, #8
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f002 f940 	bl	8006f54 <RCCEx_PLL2_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cda:	e011      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce0:	3328      	adds	r3, #40	@ 0x28
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f002 f9e7 	bl	80070b8 <RCCEx_PLL3_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cf0:	e006      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cf8:	e002      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d08:	4b37      	ldr	r3, [pc, #220]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d16:	4a34      	ldr	r2, [pc, #208]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d1c:	e003      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d36:	2300      	movs	r3, #0
 8004d38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d40:	460b      	mov	r3, r1
 8004d42:	4313      	orrs	r3, r2
 8004d44:	d056      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d50:	d033      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d56:	d82c      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d5c:	d02f      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004d5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d62:	d826      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d68:	d02b      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004d6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d6e:	d820      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d74:	d012      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d7a:	d81a      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d022      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d84:	d115      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f002 f8e0 	bl	8006f54 <RCCEx_PLL2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d9a:	e015      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da0:	3328      	adds	r3, #40	@ 0x28
 8004da2:	2101      	movs	r1, #1
 8004da4:	4618      	mov	r0, r3
 8004da6:	f002 f987 	bl	80070b8 <RCCEx_PLL3_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004db8:	e006      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dba:	bf00      	nop
 8004dbc:	e004      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dbe:	bf00      	nop
 8004dc0:	e002      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10d      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dde:	4a02      	ldr	r2, [pc, #8]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004de4:	e006      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004de6:	bf00      	nop
 8004de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e04:	2300      	movs	r3, #0
 8004e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e0a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	d055      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e20:	d033      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e26:	d82c      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2c:	d02f      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e32:	d826      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e38:	d02b      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e3e:	d820      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e44:	d012      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e4a:	d81a      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d022      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e54:	d115      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f002 f878 	bl	8006f54 <RCCEx_PLL2_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e6a:	e015      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e70:	3328      	adds	r3, #40	@ 0x28
 8004e72:	2101      	movs	r1, #1
 8004e74:	4618      	mov	r0, r3
 8004e76:	f002 f91f 	bl	80070b8 <RCCEx_PLL3_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e80:	e00a      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e88:	e006      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e8a:	bf00      	nop
 8004e8c:	e004      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e8e:	bf00      	nop
 8004e90:	e002      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e92:	bf00      	nop
 8004e94:	e000      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ea0:	4ba3      	ldr	r3, [pc, #652]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004eb0:	4a9f      	ldr	r2, [pc, #636]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eb6:	e003      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ebc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004eda:	460b      	mov	r3, r1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	d037      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eea:	d00e      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ef0:	d816      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004efa:	d111      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efc:	4b8c      	ldr	r3, [pc, #560]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	4a8b      	ldr	r2, [pc, #556]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f08:	e00f      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	3308      	adds	r3, #8
 8004f10:	2101      	movs	r1, #1
 8004f12:	4618      	mov	r0, r3
 8004f14:	f002 f81e 	bl	8006f54 <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f1e:	e004      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f26:	e000      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f32:	4b7f      	ldr	r3, [pc, #508]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f40:	4a7b      	ldr	r2, [pc, #492]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f46:	e003      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f60:	2300      	movs	r3, #0
 8004f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	d039      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d81c      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004fbd 	.word	0x08004fbd
 8004f84:	08004f91 	.word	0x08004f91
 8004f88:	08004f9f 	.word	0x08004f9f
 8004f8c:	08004fbd 	.word	0x08004fbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f90:	4b67      	ldr	r3, [pc, #412]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	4a66      	ldr	r2, [pc, #408]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f9c:	e00f      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 ffd4 	bl	8006f54 <RCCEx_PLL2_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fb2:	e004      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fca:	f023 0103 	bic.w	r1, r3, #3
 8004fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd4:	4a56      	ldr	r2, [pc, #344]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fda:	e003      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ffa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ffe:	460b      	mov	r3, r1
 8005000:	4313      	orrs	r3, r2
 8005002:	f000 809f 	beq.w	8005144 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005006:	4b4b      	ldr	r3, [pc, #300]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a4a      	ldr	r2, [pc, #296]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005012:	f7fd ffc3 	bl	8002f9c <HAL_GetTick>
 8005016:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800501a:	e00b      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501c:	f7fd ffbe 	bl	8002f9c <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b64      	cmp	r3, #100	@ 0x64
 800502a:	d903      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005032:	e005      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005034:	4b3f      	ldr	r3, [pc, #252]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ed      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005044:	2b00      	cmp	r3, #0
 8005046:	d179      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005048:	4b39      	ldr	r3, [pc, #228]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800504a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800504c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005054:	4053      	eors	r3, r2
 8005056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505a:	2b00      	cmp	r3, #0
 800505c:	d015      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800505e:	4b34      	ldr	r3, [pc, #208]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005066:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800506a:	4b31      	ldr	r3, [pc, #196]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	4a30      	ldr	r2, [pc, #192]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005074:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005076:	4b2e      	ldr	r3, [pc, #184]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507a:	4a2d      	ldr	r2, [pc, #180]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800507c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005080:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005082:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005088:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800508a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005096:	d118      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fd ff80 	bl	8002f9c <HAL_GetTick>
 800509c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050a0:	e00d      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a2:	f7fd ff7b 	bl	8002f9c <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80050ac:	1ad2      	subs	r2, r2, r3
 80050ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d903      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80050bc:	e005      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050be:	4b1c      	ldr	r3, [pc, #112]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0eb      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d129      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050e2:	d10e      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80050e4:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80050ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050f4:	091a      	lsrs	r2, r3, #4
 80050f6:	4b10      	ldr	r3, [pc, #64]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6113      	str	r3, [r2, #16]
 8005100:	e005      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005102:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005108:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800510c:	6113      	str	r3, [r2, #16]
 800510e:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005110:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800511a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800511e:	4a04      	ldr	r2, [pc, #16]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005120:	430b      	orrs	r3, r1
 8005122:	6713      	str	r3, [r2, #112]	@ 0x70
 8005124:	e00e      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800512a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800512e:	e009      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005130:	58024400 	.word	0x58024400
 8005134:	58024800 	.word	0x58024800
 8005138:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f002 0301 	and.w	r3, r2, #1
 8005150:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005154:	2300      	movs	r3, #0
 8005156:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800515a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800515e:	460b      	mov	r3, r1
 8005160:	4313      	orrs	r3, r2
 8005162:	f000 8089 	beq.w	8005278 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800516c:	2b28      	cmp	r3, #40	@ 0x28
 800516e:	d86b      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005170:	a201      	add	r2, pc, #4	@ (adr r2, 8005178 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	08005251 	.word	0x08005251
 800517c:	08005249 	.word	0x08005249
 8005180:	08005249 	.word	0x08005249
 8005184:	08005249 	.word	0x08005249
 8005188:	08005249 	.word	0x08005249
 800518c:	08005249 	.word	0x08005249
 8005190:	08005249 	.word	0x08005249
 8005194:	08005249 	.word	0x08005249
 8005198:	0800521d 	.word	0x0800521d
 800519c:	08005249 	.word	0x08005249
 80051a0:	08005249 	.word	0x08005249
 80051a4:	08005249 	.word	0x08005249
 80051a8:	08005249 	.word	0x08005249
 80051ac:	08005249 	.word	0x08005249
 80051b0:	08005249 	.word	0x08005249
 80051b4:	08005249 	.word	0x08005249
 80051b8:	08005233 	.word	0x08005233
 80051bc:	08005249 	.word	0x08005249
 80051c0:	08005249 	.word	0x08005249
 80051c4:	08005249 	.word	0x08005249
 80051c8:	08005249 	.word	0x08005249
 80051cc:	08005249 	.word	0x08005249
 80051d0:	08005249 	.word	0x08005249
 80051d4:	08005249 	.word	0x08005249
 80051d8:	08005251 	.word	0x08005251
 80051dc:	08005249 	.word	0x08005249
 80051e0:	08005249 	.word	0x08005249
 80051e4:	08005249 	.word	0x08005249
 80051e8:	08005249 	.word	0x08005249
 80051ec:	08005249 	.word	0x08005249
 80051f0:	08005249 	.word	0x08005249
 80051f4:	08005249 	.word	0x08005249
 80051f8:	08005251 	.word	0x08005251
 80051fc:	08005249 	.word	0x08005249
 8005200:	08005249 	.word	0x08005249
 8005204:	08005249 	.word	0x08005249
 8005208:	08005249 	.word	0x08005249
 800520c:	08005249 	.word	0x08005249
 8005210:	08005249 	.word	0x08005249
 8005214:	08005249 	.word	0x08005249
 8005218:	08005251 	.word	0x08005251
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	3308      	adds	r3, #8
 8005222:	2101      	movs	r1, #1
 8005224:	4618      	mov	r0, r3
 8005226:	f001 fe95 	bl	8006f54 <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005230:	e00f      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005236:	3328      	adds	r3, #40	@ 0x28
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f001 ff3c 	bl	80070b8 <RCCEx_PLL3_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005246:	e004      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800524e:	e000      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800525a:	4bbf      	ldr	r3, [pc, #764]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800525c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005268:	4abb      	ldr	r2, [pc, #748]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800526a:	430b      	orrs	r3, r1
 800526c:	6553      	str	r3, [r2, #84]	@ 0x54
 800526e:	e003      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f002 0302 	and.w	r3, r2, #2
 8005284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800528e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d041      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800529e:	2b05      	cmp	r3, #5
 80052a0:	d824      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80052a2:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052f5 	.word	0x080052f5
 80052ac:	080052c1 	.word	0x080052c1
 80052b0:	080052d7 	.word	0x080052d7
 80052b4:	080052f5 	.word	0x080052f5
 80052b8:	080052f5 	.word	0x080052f5
 80052bc:	080052f5 	.word	0x080052f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c4:	3308      	adds	r3, #8
 80052c6:	2101      	movs	r1, #1
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 fe43 	bl	8006f54 <RCCEx_PLL2_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052d4:	e00f      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052da:	3328      	adds	r3, #40	@ 0x28
 80052dc:	2101      	movs	r1, #1
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 feea 	bl	80070b8 <RCCEx_PLL3_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052ea:	e004      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80052f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052fe:	4b96      	ldr	r3, [pc, #600]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	f023 0107 	bic.w	r1, r3, #7
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800530c:	4a92      	ldr	r2, [pc, #584]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800530e:	430b      	orrs	r3, r1
 8005310:	6553      	str	r3, [r2, #84]	@ 0x54
 8005312:	e003      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f002 0304 	and.w	r3, r2, #4
 8005328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005332:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005336:	460b      	mov	r3, r1
 8005338:	4313      	orrs	r3, r2
 800533a:	d044      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800533c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005344:	2b05      	cmp	r3, #5
 8005346:	d825      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005348:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	0800539d 	.word	0x0800539d
 8005354:	08005369 	.word	0x08005369
 8005358:	0800537f 	.word	0x0800537f
 800535c:	0800539d 	.word	0x0800539d
 8005360:	0800539d 	.word	0x0800539d
 8005364:	0800539d 	.word	0x0800539d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536c:	3308      	adds	r3, #8
 800536e:	2101      	movs	r1, #1
 8005370:	4618      	mov	r0, r3
 8005372:	f001 fdef 	bl	8006f54 <RCCEx_PLL2_Config>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800537c:	e00f      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	3328      	adds	r3, #40	@ 0x28
 8005384:	2101      	movs	r1, #1
 8005386:	4618      	mov	r0, r3
 8005388:	f001 fe96 	bl	80070b8 <RCCEx_PLL3_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005392:	e004      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800539c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10b      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053a6:	4b6c      	ldr	r3, [pc, #432]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053aa:	f023 0107 	bic.w	r1, r3, #7
 80053ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b6:	4a68      	ldr	r2, [pc, #416]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80053bc:	e003      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f002 0320 	and.w	r3, r2, #32
 80053d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053d6:	2300      	movs	r3, #0
 80053d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053e0:	460b      	mov	r3, r1
 80053e2:	4313      	orrs	r3, r2
 80053e4:	d055      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80053e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053f2:	d033      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80053f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053f8:	d82c      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fe:	d02f      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005404:	d826      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800540a:	d02b      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800540c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005410:	d820      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005416:	d012      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800541c:	d81a      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d022      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005426:	d115      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542c:	3308      	adds	r3, #8
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f001 fd8f 	bl	8006f54 <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800543c:	e015      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	3328      	adds	r3, #40	@ 0x28
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f001 fe36 	bl	80070b8 <RCCEx_PLL3_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005452:	e00a      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800545a:	e006      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800545c:	bf00      	nop
 800545e:	e004      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005460:	bf00      	nop
 8005462:	e002      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005464:	bf00      	nop
 8005466:	e000      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005472:	4b39      	ldr	r3, [pc, #228]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005482:	4a35      	ldr	r2, [pc, #212]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005484:	430b      	orrs	r3, r1
 8005486:	6553      	str	r3, [r2, #84]	@ 0x54
 8005488:	e003      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800548e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800549e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054a2:	2300      	movs	r3, #0
 80054a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4313      	orrs	r3, r2
 80054b0:	d058      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054be:	d033      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80054c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054c4:	d82c      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ca:	d02f      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80054cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d0:	d826      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054d6:	d02b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80054d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054dc:	d820      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054e2:	d012      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80054e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054e8:	d81a      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d022      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80054ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054f2:	d115      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f8:	3308      	adds	r3, #8
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 fd29 	bl	8006f54 <RCCEx_PLL2_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005508:	e015      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550e:	3328      	adds	r3, #40	@ 0x28
 8005510:	2102      	movs	r1, #2
 8005512:	4618      	mov	r0, r3
 8005514:	f001 fdd0 	bl	80070b8 <RCCEx_PLL3_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800551e:	e00a      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005526:	e006      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005528:	bf00      	nop
 800552a:	e004      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800552c:	bf00      	nop
 800552e:	e002      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005530:	bf00      	nop
 8005532:	e000      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10e      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800553e:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005542:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800554e:	4a02      	ldr	r2, [pc, #8]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005550:	430b      	orrs	r3, r1
 8005552:	6593      	str	r3, [r2, #88]	@ 0x58
 8005554:	e006      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005556:	bf00      	nop
 8005558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005574:	2300      	movs	r3, #0
 8005576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800557a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800557e:	460b      	mov	r3, r1
 8005580:	4313      	orrs	r3, r2
 8005582:	d055      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005588:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800558c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005590:	d033      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005592:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005596:	d82c      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800559c:	d02f      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a2:	d826      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055a8:	d02b      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80055aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055ae:	d820      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055b4:	d012      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80055b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ba:	d81a      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d022      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80055c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055c4:	d115      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ca:	3308      	adds	r3, #8
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 fcc0 	bl	8006f54 <RCCEx_PLL2_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055da:	e015      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e0:	3328      	adds	r3, #40	@ 0x28
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 fd67 	bl	80070b8 <RCCEx_PLL3_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055f0:	e00a      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055f8:	e006      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80055fa:	bf00      	nop
 80055fc:	e004      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80055fe:	bf00      	nop
 8005600:	e002      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005602:	bf00      	nop
 8005604:	e000      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005610:	4ba1      	ldr	r3, [pc, #644]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005614:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005620:	4a9d      	ldr	r2, [pc, #628]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005622:	430b      	orrs	r3, r1
 8005624:	6593      	str	r3, [r2, #88]	@ 0x58
 8005626:	e003      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f002 0308 	and.w	r3, r2, #8
 800563c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005640:	2300      	movs	r3, #0
 8005642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005646:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800564a:	460b      	mov	r3, r1
 800564c:	4313      	orrs	r3, r2
 800564e:	d01e      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565c:	d10c      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800565e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005662:	3328      	adds	r3, #40	@ 0x28
 8005664:	2102      	movs	r1, #2
 8005666:	4618      	mov	r0, r3
 8005668:	f001 fd26 	bl	80070b8 <RCCEx_PLL3_Config>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005678:	4b87      	ldr	r3, [pc, #540]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800567a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005688:	4a83      	ldr	r2, [pc, #524]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800568a:	430b      	orrs	r3, r1
 800568c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f002 0310 	and.w	r3, r2, #16
 800569a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800569e:	2300      	movs	r3, #0
 80056a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80056a8:	460b      	mov	r3, r1
 80056aa:	4313      	orrs	r3, r2
 80056ac:	d01e      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ba:	d10c      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c0:	3328      	adds	r3, #40	@ 0x28
 80056c2:	2102      	movs	r1, #2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 fcf7 	bl	80070b8 <RCCEx_PLL3_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056d6:	4b70      	ldr	r3, [pc, #448]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e6:	4a6c      	ldr	r2, [pc, #432]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80056f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005702:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005706:	460b      	mov	r3, r1
 8005708:	4313      	orrs	r3, r2
 800570a:	d03e      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005710:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005718:	d022      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800571a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800571e:	d81b      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005728:	d00b      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800572a:	e015      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800572c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005730:	3308      	adds	r3, #8
 8005732:	2100      	movs	r1, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f001 fc0d 	bl	8006f54 <RCCEx_PLL2_Config>
 800573a:	4603      	mov	r3, r0
 800573c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005740:	e00f      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005746:	3328      	adds	r3, #40	@ 0x28
 8005748:	2102      	movs	r1, #2
 800574a:	4618      	mov	r0, r3
 800574c:	f001 fcb4 	bl	80070b8 <RCCEx_PLL3_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005756:	e004      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800576a:	4b4b      	ldr	r3, [pc, #300]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800577a:	4a47      	ldr	r2, [pc, #284]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800577c:	430b      	orrs	r3, r1
 800577e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005796:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005798:	2300      	movs	r3, #0
 800579a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800579c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057a0:	460b      	mov	r3, r1
 80057a2:	4313      	orrs	r3, r2
 80057a4:	d03b      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057b2:	d01f      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80057b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057b8:	d818      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80057ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057be:	d003      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80057c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057c4:	d007      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80057c6:	e011      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c8:	4b33      	ldr	r3, [pc, #204]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	4a32      	ldr	r2, [pc, #200]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80057d4:	e00f      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	3328      	adds	r3, #40	@ 0x28
 80057dc:	2101      	movs	r1, #1
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fc6a 	bl	80070b8 <RCCEx_PLL3_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80057ea:	e004      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057f2:	e000      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80057f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057fe:	4b26      	ldr	r3, [pc, #152]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005802:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580e:	4a22      	ldr	r2, [pc, #136]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005810:	430b      	orrs	r3, r1
 8005812:	6553      	str	r3, [r2, #84]	@ 0x54
 8005814:	e003      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800581a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800581e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800582a:	673b      	str	r3, [r7, #112]	@ 0x70
 800582c:	2300      	movs	r3, #0
 800582e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005830:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005834:	460b      	mov	r3, r1
 8005836:	4313      	orrs	r3, r2
 8005838:	d034      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005848:	d007      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800584a:	e011      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800584c:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	4a11      	ldr	r2, [pc, #68]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005858:	e00e      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585e:	3308      	adds	r3, #8
 8005860:	2102      	movs	r1, #2
 8005862:	4618      	mov	r0, r3
 8005864:	f001 fb76 	bl	8006f54 <RCCEx_PLL2_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800586e:	e003      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10d      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005884:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588e:	4a02      	ldr	r2, [pc, #8]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005890:	430b      	orrs	r3, r1
 8005892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005894:	e006      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80058b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058b2:	2300      	movs	r3, #0
 80058b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80058ba:	460b      	mov	r3, r1
 80058bc:	4313      	orrs	r3, r2
 80058be:	d00c      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c4:	3328      	adds	r3, #40	@ 0x28
 80058c6:	2102      	movs	r1, #2
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fbf5 	bl	80070b8 <RCCEx_PLL3_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80058e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80058e8:	2300      	movs	r3, #0
 80058ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80058ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80058f0:	460b      	mov	r3, r1
 80058f2:	4313      	orrs	r3, r2
 80058f4:	d038      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005902:	d018      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005908:	d811      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800590a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800590e:	d014      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005914:	d80b      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d011      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800591a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800591e:	d106      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005920:	4bc3      	ldr	r3, [pc, #780]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	4ac2      	ldr	r2, [pc, #776]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800592a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800592c:	e008      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005934:	e004      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005936:	bf00      	nop
 8005938:	e002      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800593a:	bf00      	nop
 800593c:	e000      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800593e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005948:	4bb9      	ldr	r3, [pc, #740]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800594a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005958:	4ab5      	ldr	r2, [pc, #724]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800595a:	430b      	orrs	r3, r1
 800595c:	6553      	str	r3, [r2, #84]	@ 0x54
 800595e:	e003      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005976:	2300      	movs	r3, #0
 8005978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800597a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800597e:	460b      	mov	r3, r1
 8005980:	4313      	orrs	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005984:	4baa      	ldr	r3, [pc, #680]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005988:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005992:	4aa7      	ldr	r2, [pc, #668]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005994:	430b      	orrs	r3, r1
 8005996:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80059a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a6:	2300      	movs	r3, #0
 80059a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80059aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80059ae:	460b      	mov	r3, r1
 80059b0:	4313      	orrs	r3, r2
 80059b2:	d00a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059b4:	4b9e      	ldr	r3, [pc, #632]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059c4:	4a9a      	ldr	r2, [pc, #616]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059c6:	430b      	orrs	r3, r1
 80059c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80059d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059d8:	2300      	movs	r3, #0
 80059da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80059e0:	460b      	mov	r3, r1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059e6:	4b92      	ldr	r3, [pc, #584]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f4:	4a8e      	ldr	r2, [pc, #568]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059f6:	430b      	orrs	r3, r1
 80059f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a08:	2300      	movs	r3, #0
 8005a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a10:	460b      	mov	r3, r1
 8005a12:	4313      	orrs	r3, r2
 8005a14:	d00e      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a16:	4b86      	ldr	r3, [pc, #536]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	4a85      	ldr	r2, [pc, #532]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a20:	6113      	str	r3, [r2, #16]
 8005a22:	4b83      	ldr	r3, [pc, #524]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a24:	6919      	ldr	r1, [r3, #16]
 8005a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a2e:	4a80      	ldr	r2, [pc, #512]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a42:	2300      	movs	r3, #0
 8005a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a50:	4b77      	ldr	r3, [pc, #476]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a54:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5e:	4a74      	ldr	r2, [pc, #464]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a72:	2300      	movs	r3, #0
 8005a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	d00a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a80:	4b6b      	ldr	r3, [pc, #428]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a84:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a90:	4a67      	ldr	r2, [pc, #412]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a92:	430b      	orrs	r3, r1
 8005a94:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aa8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005aac:	460b      	mov	r3, r1
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	d011      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 fa4a 	bl	8006f54 <RCCEx_PLL2_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	2100      	movs	r1, #0
 8005ae0:	6239      	str	r1, [r7, #32]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005aec:	460b      	mov	r3, r1
 8005aee:	4313      	orrs	r3, r2
 8005af0:	d011      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	3308      	adds	r3, #8
 8005af8:	2101      	movs	r1, #1
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 fa2a 	bl	8006f54 <RCCEx_PLL2_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	2100      	movs	r1, #0
 8005b20:	61b9      	str	r1, [r7, #24]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	d011      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	3308      	adds	r3, #8
 8005b38:	2102      	movs	r1, #2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 fa0a 	bl	8006f54 <RCCEx_PLL2_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	2100      	movs	r1, #0
 8005b60:	6139      	str	r1, [r7, #16]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	d011      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b76:	3328      	adds	r3, #40	@ 0x28
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 fa9c 	bl	80070b8 <RCCEx_PLL3_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005bac:	460b      	mov	r3, r1
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	d011      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb6:	3328      	adds	r3, #40	@ 0x28
 8005bb8:	2101      	movs	r1, #1
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f001 fa7c 	bl	80070b8 <RCCEx_PLL3_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	2100      	movs	r1, #0
 8005be0:	6039      	str	r1, [r7, #0]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005bec:	460b      	mov	r3, r1
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	d011      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf6:	3328      	adds	r3, #40	@ 0x28
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 fa5c 	bl	80070b8 <RCCEx_PLL3_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005c16:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c30:	58024400 	.word	0x58024400

08005c34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b090      	sub	sp, #64	@ 0x40
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c42:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005c46:	430b      	orrs	r3, r1
 8005c48:	f040 8094 	bne.w	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005c4c:	4b9e      	ldr	r3, [pc, #632]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	f200 8087 	bhi.w	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c79 	.word	0x08005c79
 8005c68:	08005ca1 	.word	0x08005ca1
 8005c6c:	08005cc9 	.word	0x08005cc9
 8005c70:	08005d65 	.word	0x08005d65
 8005c74:	08005cf1 	.word	0x08005cf1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c78:	4b93      	ldr	r3, [pc, #588]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c84:	d108      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 f810 	bl	8006cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c94:	f000 bd45 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c9c:	f000 bd41 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ca0:	4b89      	ldr	r3, [pc, #548]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cac:	d108      	bne.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cae:	f107 0318 	add.w	r3, r7, #24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fd54 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cbc:	f000 bd31 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cc4:	f000 bd2d 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cd4:	d108      	bne.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cd6:	f107 030c 	add.w	r3, r7, #12
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fe94 	bl	8006a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ce4:	f000 bd1d 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cec:	f000 bd19 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cf0:	4b75      	ldr	r3, [pc, #468]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005cf8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cfa:	4b73      	ldr	r3, [pc, #460]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d0c:	4b6e      	ldr	r3, [pc, #440]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	08db      	lsrs	r3, r3, #3
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	4a6d      	ldr	r2, [pc, #436]	@ (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d1e:	e01f      	b.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d20:	4b69      	ldr	r3, [pc, #420]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d2c:	d106      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d34:	d102      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d36:	4b66      	ldr	r3, [pc, #408]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d3a:	e011      	b.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d3c:	4b62      	ldr	r3, [pc, #392]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d48:	d106      	bne.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d50:	d102      	bne.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d52:	4b60      	ldr	r3, [pc, #384]	@ (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d56:	e003      	b.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d5c:	f000 bce1 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d60:	f000 bcdf 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d64:	4b5c      	ldr	r3, [pc, #368]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d68:	f000 bcdb 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d70:	f000 bcd7 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d78:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	f040 80ad 	bne.w	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005d82:	4b51      	ldr	r3, [pc, #324]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d86:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005d8a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d92:	d056      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d9a:	f200 8090 	bhi.w	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	2bc0      	cmp	r3, #192	@ 0xc0
 8005da2:	f000 8088 	beq.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005daa:	f200 8088 	bhi.w	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	2b80      	cmp	r3, #128	@ 0x80
 8005db2:	d032      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	2b80      	cmp	r3, #128	@ 0x80
 8005db8:	f200 8081 	bhi.w	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	2b40      	cmp	r3, #64	@ 0x40
 8005dc6:	d014      	beq.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005dc8:	e079      	b.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dca:	4b3f      	ldr	r3, [pc, #252]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dd6:	d108      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 ff67 	bl	8006cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005de6:	f000 bc9c 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dee:	f000 bc98 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005df2:	4b35      	ldr	r3, [pc, #212]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dfe:	d108      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e00:	f107 0318 	add.w	r3, r7, #24
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fcab 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e0e:	f000 bc88 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e16:	f000 bc84 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e26:	d108      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e28:	f107 030c 	add.w	r3, r7, #12
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fdeb 	bl	8006a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e36:	f000 bc74 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e3e:	f000 bc70 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e42:	4b21      	ldr	r3, [pc, #132]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d10c      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	08db      	lsrs	r3, r3, #3
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	4a18      	ldr	r2, [pc, #96]	@ (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e70:	e01f      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e72:	4b15      	ldr	r3, [pc, #84]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e7e:	d106      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e86:	d102      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e88:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e8c:	e011      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e9a:	d106      	bne.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ea2:	d102      	bne.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005eae:	f000 bc38 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005eb2:	f000 bc36 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005eb6:	4b08      	ldr	r3, [pc, #32]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eba:	f000 bc32 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec2:	f000 bc2e 	b.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ec6:	bf00      	nop
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	03d09000 	.word	0x03d09000
 8005ed0:	003d0900 	.word	0x003d0900
 8005ed4:	00f42400 	.word	0x00f42400
 8005ed8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	f040 809c 	bne.w	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005eea:	4b9e      	ldr	r3, [pc, #632]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eee:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005ef2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005efa:	d054      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f02:	f200 808b 	bhi.w	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f0c:	f000 8083 	beq.w	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f16:	f200 8081 	bhi.w	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f20:	d02f      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f28:	d878      	bhi.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f36:	d012      	beq.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005f38:	e070      	b.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f3a:	4b8a      	ldr	r3, [pc, #552]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f46:	d107      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 feaf 	bl	8006cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f56:	e3e4      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f5c:	e3e1      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f5e:	4b81      	ldr	r3, [pc, #516]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f6a:	d107      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f6c:	f107 0318 	add.w	r3, r7, #24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fbf5 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f7a:	e3d2      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f80:	e3cf      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f82:	4b78      	ldr	r3, [pc, #480]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f8e:	d107      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f90:	f107 030c 	add.w	r3, r7, #12
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fd37 	bl	8006a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f9e:	e3c0      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa4:	e3bd      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005faa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d10c      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d109      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fc2:	4b68      	ldr	r3, [pc, #416]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	08db      	lsrs	r3, r3, #3
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	4a66      	ldr	r2, [pc, #408]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005fce:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fd4:	e01e      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fd6:	4b63      	ldr	r3, [pc, #396]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fea:	d102      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fec:	4b5f      	ldr	r3, [pc, #380]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ff0:	e010      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ffa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ffe:	d106      	bne.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006006:	d102      	bne.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006008:	4b59      	ldr	r3, [pc, #356]	@ (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800600a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800600c:	e002      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006012:	e386      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006014:	e385      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006016:	4b57      	ldr	r3, [pc, #348]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800601a:	e382      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006020:	e37f      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006026:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800602a:	430b      	orrs	r3, r1
 800602c:	f040 80a7 	bne.w	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006030:	4b4c      	ldr	r3, [pc, #304]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006034:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006038:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006040:	d055      	beq.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006048:	f200 8096 	bhi.w	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006052:	f000 8084 	beq.w	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800605c:	f200 808c 	bhi.w	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006066:	d030      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800606e:	f200 8083 	bhi.w	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800607e:	d012      	beq.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006080:	e07a      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006082:	4b38      	ldr	r3, [pc, #224]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800608e:	d107      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fe0b 	bl	8006cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800609a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800609e:	e340      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a4:	e33d      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060b2:	d107      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060b4:	f107 0318 	add.w	r3, r7, #24
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fb51 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060c2:	e32e      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c8:	e32b      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060ca:	4b26      	ldr	r3, [pc, #152]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d6:	d107      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060d8:	f107 030c 	add.w	r3, r7, #12
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fc93 	bl	8006a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060e6:	e31c      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ec:	e319      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b04      	cmp	r3, #4
 8006102:	d10c      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800610a:	4b16      	ldr	r3, [pc, #88]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	08db      	lsrs	r3, r3, #3
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	4a14      	ldr	r2, [pc, #80]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800611c:	e01e      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800611e:	4b11      	ldr	r3, [pc, #68]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800612a:	d106      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800612c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006132:	d102      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006134:	4b0d      	ldr	r3, [pc, #52]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006138:	e010      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800613a:	4b0a      	ldr	r3, [pc, #40]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006146:	d106      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614e:	d102      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006150:	4b07      	ldr	r3, [pc, #28]	@ (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006154:	e002      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800615a:	e2e2      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800615c:	e2e1      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800615e:	4b05      	ldr	r3, [pc, #20]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006162:	e2de      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006164:	58024400 	.word	0x58024400
 8006168:	03d09000 	.word	0x03d09000
 800616c:	003d0900 	.word	0x003d0900
 8006170:	00f42400 	.word	0x00f42400
 8006174:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800617c:	e2d1      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800617e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006182:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006186:	430b      	orrs	r3, r1
 8006188:	f040 809c 	bne.w	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800618c:	4b93      	ldr	r3, [pc, #588]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800618e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006190:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006194:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800619c:	d054      	beq.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061a4:	f200 808b 	bhi.w	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80061a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061ae:	f000 8083 	beq.w	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80061b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061b8:	f200 8081 	bhi.w	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80061bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c2:	d02f      	beq.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80061c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ca:	d878      	bhi.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80061cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80061d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d8:	d012      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80061da:	e070      	b.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061dc:	4b7f      	ldr	r3, [pc, #508]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061e8:	d107      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fd5e 	bl	8006cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061f8:	e293      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fe:	e290      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006200:	4b76      	ldr	r3, [pc, #472]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006208:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800620c:	d107      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800620e:	f107 0318 	add.w	r3, r7, #24
 8006212:	4618      	mov	r0, r3
 8006214:	f000 faa4 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800621c:	e281      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006222:	e27e      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006224:	4b6d      	ldr	r3, [pc, #436]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800622c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006230:	d107      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006232:	f107 030c 	add.w	r3, r7, #12
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fbe6 	bl	8006a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006240:	e26f      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006246:	e26c      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006248:	4b64      	ldr	r3, [pc, #400]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800624a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006250:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006252:	4b62      	ldr	r3, [pc, #392]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b04      	cmp	r3, #4
 800625c:	d10c      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800625e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d109      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006264:	4b5d      	ldr	r3, [pc, #372]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	4a5c      	ldr	r2, [pc, #368]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006270:	fa22 f303 	lsr.w	r3, r2, r3
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006276:	e01e      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006278:	4b58      	ldr	r3, [pc, #352]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006284:	d106      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800628c:	d102      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800628e:	4b55      	ldr	r3, [pc, #340]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006292:	e010      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006294:	4b51      	ldr	r3, [pc, #324]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a0:	d106      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80062a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a8:	d102      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062aa:	4b4f      	ldr	r3, [pc, #316]	@ (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80062ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ae:	e002      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062b4:	e235      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062b6:	e234      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062b8:	4b4c      	ldr	r3, [pc, #304]	@ (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062bc:	e231      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062c2:	e22e      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80062c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80062cc:	430b      	orrs	r3, r1
 80062ce:	f040 808f 	bne.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80062d2:	4b42      	ldr	r3, [pc, #264]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80062da:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062e2:	d06b      	beq.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80062e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062ea:	d874      	bhi.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062f2:	d056      	beq.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80062f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062fa:	d86c      	bhi.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006302:	d03b      	beq.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006306:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800630a:	d864      	bhi.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800630c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006312:	d021      	beq.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800631a:	d85c      	bhi.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800631c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006328:	d004      	beq.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800632a:	e054      	b.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800632c:	f7fe fa62 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8006330:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006332:	e1f6      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006334:	4b29      	ldr	r3, [pc, #164]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800633c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006340:	d107      	bne.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006342:	f107 0318 	add.w	r3, r7, #24
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fa0a 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006350:	e1e7      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006356:	e1e4      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006358:	4b20      	ldr	r3, [pc, #128]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006364:	d107      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006366:	f107 030c 	add.w	r3, r7, #12
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fb4c 	bl	8006a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006374:	e1d5      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637a:	e1d2      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800637c:	4b17      	ldr	r3, [pc, #92]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d109      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006388:	4b14      	ldr	r3, [pc, #80]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	08db      	lsrs	r3, r3, #3
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	4a13      	ldr	r2, [pc, #76]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
 8006398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800639a:	e1c2      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a0:	e1bf      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80063a2:	4b0e      	ldr	r3, [pc, #56]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ae:	d102      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80063b0:	4b0c      	ldr	r3, [pc, #48]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80063b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063b4:	e1b5      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ba:	e1b2      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063bc:	4b07      	ldr	r3, [pc, #28]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063c8:	d102      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80063ca:	4b07      	ldr	r3, [pc, #28]	@ (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063ce:	e1a8      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d4:	e1a5      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063da:	e1a2      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063dc:	58024400 	.word	0x58024400
 80063e0:	03d09000 	.word	0x03d09000
 80063e4:	003d0900 	.word	0x003d0900
 80063e8:	00f42400 	.word	0x00f42400
 80063ec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80063f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80063f8:	430b      	orrs	r3, r1
 80063fa:	d173      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80063fc:	4b9c      	ldr	r3, [pc, #624]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006404:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800640c:	d02f      	beq.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006414:	d863      	bhi.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800641c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006422:	d012      	beq.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006424:	e05b      	b.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006426:	4b92      	ldr	r3, [pc, #584]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800642e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006432:	d107      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006434:	f107 0318 	add.w	r3, r7, #24
 8006438:	4618      	mov	r0, r3
 800643a:	f000 f991 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006442:	e16e      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006448:	e16b      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800644a:	4b89      	ldr	r3, [pc, #548]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006456:	d107      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006458:	f107 030c 	add.w	r3, r7, #12
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fad3 	bl	8006a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006466:	e15c      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800646c:	e159      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800646e:	4b80      	ldr	r3, [pc, #512]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006472:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006478:	4b7d      	ldr	r3, [pc, #500]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b04      	cmp	r3, #4
 8006482:	d10c      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800648a:	4b79      	ldr	r3, [pc, #484]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	08db      	lsrs	r3, r3, #3
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	4a77      	ldr	r2, [pc, #476]	@ (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800649c:	e01e      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800649e:	4b74      	ldr	r3, [pc, #464]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064aa:	d106      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80064ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064b2:	d102      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064b4:	4b70      	ldr	r3, [pc, #448]	@ (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80064b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064b8:	e010      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064ba:	4b6d      	ldr	r3, [pc, #436]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c6:	d106      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80064c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ce:	d102      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064d0:	4b6a      	ldr	r3, [pc, #424]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80064d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064d4:	e002      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80064da:	e122      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80064dc:	e121      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e2:	e11e      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80064e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80064ec:	430b      	orrs	r3, r1
 80064ee:	d133      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80064f0:	4b5f      	ldr	r3, [pc, #380]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006506:	d012      	beq.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006508:	e023      	b.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800650a:	4b59      	ldr	r3, [pc, #356]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006512:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006516:	d107      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fbc7 	bl	8006cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006526:	e0fc      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800652c:	e0f9      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800652e:	4b50      	ldr	r3, [pc, #320]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800653a:	d107      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800653c:	f107 0318 	add.w	r3, r7, #24
 8006540:	4618      	mov	r0, r3
 8006542:	f000 f90d 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800654a:	e0ea      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006550:	e0e7      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006556:	e0e4      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800655c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006560:	430b      	orrs	r3, r1
 8006562:	f040 808d 	bne.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006566:	4b42      	ldr	r3, [pc, #264]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800656e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006576:	d06b      	beq.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800657e:	d874      	bhi.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006586:	d056      	beq.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800658e:	d86c      	bhi.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006596:	d03b      	beq.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800659e:	d864      	bhi.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80065a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065a6:	d021      	beq.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ae:	d85c      	bhi.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065bc:	d004      	beq.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80065be:	e054      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80065c0:	f000 f8b8 	bl	8006734 <HAL_RCCEx_GetD3PCLK1Freq>
 80065c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065c6:	e0ac      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065c8:	4b29      	ldr	r3, [pc, #164]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065d4:	d107      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d6:	f107 0318 	add.w	r3, r7, #24
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f8c0 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e4:	e09d      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ea:	e09a      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065ec:	4b20      	ldr	r3, [pc, #128]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f8:	d107      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065fa:	f107 030c 	add.w	r3, r7, #12
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fa02 	bl	8006a08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006608:	e08b      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800660e:	e088      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006610:	4b17      	ldr	r3, [pc, #92]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b04      	cmp	r3, #4
 800661a:	d109      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800661c:	4b14      	ldr	r3, [pc, #80]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	08db      	lsrs	r3, r3, #3
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	4a13      	ldr	r2, [pc, #76]	@ (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
 800662c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800662e:	e078      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006634:	e075      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006636:	4b0e      	ldr	r3, [pc, #56]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006642:	d102      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006644:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006648:	e06b      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800664e:	e068      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006650:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800665c:	d102      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800665e:	4b07      	ldr	r3, [pc, #28]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006662:	e05e      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006668:	e05b      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800666e:	e058      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006670:	58024400 	.word	0x58024400
 8006674:	03d09000 	.word	0x03d09000
 8006678:	003d0900 	.word	0x003d0900
 800667c:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006684:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006688:	430b      	orrs	r3, r1
 800668a:	d148      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800668c:	4b27      	ldr	r3, [pc, #156]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800668e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006690:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006694:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669c:	d02a      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a4:	d838      	bhi.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80066ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b2:	d00d      	beq.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80066b4:	e030      	b.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066b6:	4b1d      	ldr	r3, [pc, #116]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c2:	d102      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80066c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066c8:	e02b      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ce:	e028      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066d0:	4b16      	ldr	r3, [pc, #88]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066dc:	d107      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fae4 	bl	8006cb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066ec:	e019      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f2:	e016      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066f4:	4b0d      	ldr	r3, [pc, #52]	@ (800672c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006700:	d107      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006702:	f107 0318 	add.w	r3, r7, #24
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f82a 	bl	8006760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006710:	e007      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006716:	e004      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800671c:	e001      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006724:	4618      	mov	r0, r3
 8006726:	3740      	adds	r7, #64	@ 0x40
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	58024400 	.word	0x58024400
 8006730:	00f42400 	.word	0x00f42400

08006734 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006738:	f7fe f82c 	bl	8004794 <HAL_RCC_GetHCLKFreq>
 800673c:	4602      	mov	r2, r0
 800673e:	4b06      	ldr	r3, [pc, #24]	@ (8006758 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	091b      	lsrs	r3, r3, #4
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	4904      	ldr	r1, [pc, #16]	@ (800675c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800674a:	5ccb      	ldrb	r3, [r1, r3]
 800674c:	f003 031f 	and.w	r3, r3, #31
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006754:	4618      	mov	r0, r3
 8006756:	bd80      	pop	{r7, pc}
 8006758:	58024400 	.word	0x58024400
 800675c:	0800b338 	.word	0x0800b338

08006760 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006760:	b480      	push	{r7}
 8006762:	b089      	sub	sp, #36	@ 0x24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006768:	4ba1      	ldr	r3, [pc, #644]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006772:	4b9f      	ldr	r3, [pc, #636]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006776:	0b1b      	lsrs	r3, r3, #12
 8006778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800677c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800677e:	4b9c      	ldr	r3, [pc, #624]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006782:	091b      	lsrs	r3, r3, #4
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800678a:	4b99      	ldr	r3, [pc, #612]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800678c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800678e:	08db      	lsrs	r3, r3, #3
 8006790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	fb02 f303 	mul.w	r3, r2, r3
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8111 	beq.w	80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	f000 8083 	beq.w	80068bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	f200 80a1 	bhi.w	8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d056      	beq.n	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067ca:	e099      	b.n	8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067cc:	4b88      	ldr	r3, [pc, #544]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02d      	beq.n	8006834 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067d8:	4b85      	ldr	r3, [pc, #532]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	08db      	lsrs	r3, r3, #3
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	4a84      	ldr	r2, [pc, #528]	@ (80069f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067e4:	fa22 f303 	lsr.w	r3, r2, r3
 80067e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006802:	4b7b      	ldr	r3, [pc, #492]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006812:	ed97 6a03 	vldr	s12, [r7, #12]
 8006816:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800681a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800682a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006832:	e087      	b.n	8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006846:	4b6a      	ldr	r3, [pc, #424]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006856:	ed97 6a03 	vldr	s12, [r7, #12]
 800685a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800685e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800686a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006876:	e065      	b.n	8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006882:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800688a:	4b59      	ldr	r3, [pc, #356]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800689a:	ed97 6a03 	vldr	s12, [r7, #12]
 800689e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ba:	e043      	b.n	8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ce:	4b48      	ldr	r3, [pc, #288]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068de:	ed97 6a03 	vldr	s12, [r7, #12]
 80068e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068fe:	e021      	b.n	8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006912:	4b37      	ldr	r3, [pc, #220]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006922:	ed97 6a03 	vldr	s12, [r7, #12]
 8006926:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006942:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006944:	4b2a      	ldr	r3, [pc, #168]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006948:	0a5b      	lsrs	r3, r3, #9
 800694a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800695a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800695e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800696a:	ee17 2a90 	vmov	r2, s15
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006972:	4b1f      	ldr	r3, [pc, #124]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006976:	0c1b      	lsrs	r3, r3, #16
 8006978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006984:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800698c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006998:	ee17 2a90 	vmov	r2, s15
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80069a0:	4b13      	ldr	r3, [pc, #76]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a4:	0e1b      	lsrs	r3, r3, #24
 80069a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80069be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069c6:	ee17 2a90 	vmov	r2, s15
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069ce:	e008      	b.n	80069e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	609a      	str	r2, [r3, #8]
}
 80069e2:	bf00      	nop
 80069e4:	3724      	adds	r7, #36	@ 0x24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	58024400 	.word	0x58024400
 80069f4:	03d09000 	.word	0x03d09000
 80069f8:	46000000 	.word	0x46000000
 80069fc:	4c742400 	.word	0x4c742400
 8006a00:	4a742400 	.word	0x4a742400
 8006a04:	4b742400 	.word	0x4b742400

08006a08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	@ 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a10:	4ba1      	ldr	r3, [pc, #644]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a1a:	4b9f      	ldr	r3, [pc, #636]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1e:	0d1b      	lsrs	r3, r3, #20
 8006a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a26:	4b9c      	ldr	r3, [pc, #624]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	0a1b      	lsrs	r3, r3, #8
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a32:	4b99      	ldr	r3, [pc, #612]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a36:	08db      	lsrs	r3, r3, #3
 8006a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8111 	beq.w	8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	f000 8083 	beq.w	8006b64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	f200 80a1 	bhi.w	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d056      	beq.n	8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a72:	e099      	b.n	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a74:	4b88      	ldr	r3, [pc, #544]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d02d      	beq.n	8006adc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a80:	4b85      	ldr	r3, [pc, #532]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	08db      	lsrs	r3, r3, #3
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	4a84      	ldr	r2, [pc, #528]	@ (8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	ee07 3a90 	vmov	s15, r3
 8006a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006abe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ada:	e087      	b.n	8006bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aee:	4b6a      	ldr	r3, [pc, #424]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b1e:	e065      	b.n	8006bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b32:	4b59      	ldr	r3, [pc, #356]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b62:	e043      	b.n	8006bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b76:	4b48      	ldr	r3, [pc, #288]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ba6:	e021      	b.n	8006bec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bba:	4b37      	ldr	r3, [pc, #220]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006bec:	4b2a      	ldr	r3, [pc, #168]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf0:	0a5b      	lsrs	r3, r3, #9
 8006bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c12:	ee17 2a90 	vmov	r2, s15
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	0c1b      	lsrs	r3, r3, #16
 8006c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c24:	ee07 3a90 	vmov	s15, r3
 8006c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c40:	ee17 2a90 	vmov	r2, s15
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c48:	4b13      	ldr	r3, [pc, #76]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4c:	0e1b      	lsrs	r3, r3, #24
 8006c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c6e:	ee17 2a90 	vmov	r2, s15
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c76:	e008      	b.n	8006c8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	609a      	str	r2, [r3, #8]
}
 8006c8a:	bf00      	nop
 8006c8c:	3724      	adds	r7, #36	@ 0x24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	03d09000 	.word	0x03d09000
 8006ca0:	46000000 	.word	0x46000000
 8006ca4:	4c742400 	.word	0x4c742400
 8006ca8:	4a742400 	.word	0x4a742400
 8006cac:	4b742400 	.word	0x4b742400

08006cb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b089      	sub	sp, #36	@ 0x24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cb8:	4ba0      	ldr	r3, [pc, #640]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006cc2:	4b9e      	ldr	r3, [pc, #632]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ccc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006cce:	4b9b      	ldr	r3, [pc, #620]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006cd8:	4b98      	ldr	r3, [pc, #608]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cdc:	08db      	lsrs	r3, r3, #3
 8006cde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	fb02 f303 	mul.w	r3, r2, r3
 8006ce8:	ee07 3a90 	vmov	s15, r3
 8006cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 8111 	beq.w	8006f1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	f000 8083 	beq.w	8006e0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	f200 80a1 	bhi.w	8006e4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d056      	beq.n	8006dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006d18:	e099      	b.n	8006e4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d1a:	4b88      	ldr	r3, [pc, #544]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d02d      	beq.n	8006d82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d26:	4b85      	ldr	r3, [pc, #532]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	08db      	lsrs	r3, r3, #3
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	4a83      	ldr	r2, [pc, #524]	@ (8006f40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006d32:	fa22 f303 	lsr.w	r3, r2, r3
 8006d36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	ee07 3a90 	vmov	s15, r3
 8006d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d50:	4b7a      	ldr	r3, [pc, #488]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d64:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d80:	e087      	b.n	8006e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	ee07 3a90 	vmov	s15, r3
 8006d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006f48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d94:	4b69      	ldr	r3, [pc, #420]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9c:	ee07 3a90 	vmov	s15, r3
 8006da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006da8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dc4:	e065      	b.n	8006e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	ee07 3a90 	vmov	s15, r3
 8006dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd8:	4b58      	ldr	r3, [pc, #352]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de0:	ee07 3a90 	vmov	s15, r3
 8006de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e08:	e043      	b.n	8006e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e14:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1c:	4b47      	ldr	r3, [pc, #284]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e24:	ee07 3a90 	vmov	s15, r3
 8006e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e30:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e4c:	e021      	b.n	8006e92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e58:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006f48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e60:	4b36      	ldr	r3, [pc, #216]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e68:	ee07 3a90 	vmov	s15, r3
 8006e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e70:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e74:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006e92:	4b2a      	ldr	r3, [pc, #168]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e96:	0a5b      	lsrs	r3, r3, #9
 8006e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e9c:	ee07 3a90 	vmov	s15, r3
 8006ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ea8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb8:	ee17 2a90 	vmov	r2, s15
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee6:	ee17 2a90 	vmov	r2, s15
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006eee:	4b13      	ldr	r3, [pc, #76]	@ (8006f3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef2:	0e1b      	lsrs	r3, r3, #24
 8006ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef8:	ee07 3a90 	vmov	s15, r3
 8006efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f14:	ee17 2a90 	vmov	r2, s15
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006f1c:	e008      	b.n	8006f30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	3724      	adds	r7, #36	@ 0x24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	58024400 	.word	0x58024400
 8006f40:	03d09000 	.word	0x03d09000
 8006f44:	46000000 	.word	0x46000000
 8006f48:	4c742400 	.word	0x4c742400
 8006f4c:	4a742400 	.word	0x4a742400
 8006f50:	4b742400 	.word	0x4b742400

08006f54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f62:	4b53      	ldr	r3, [pc, #332]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8006f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d101      	bne.n	8006f72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e099      	b.n	80070a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f72:	4b4f      	ldr	r3, [pc, #316]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a4e      	ldr	r2, [pc, #312]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f7e:	f7fc f80d 	bl	8002f9c <HAL_GetTick>
 8006f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f84:	e008      	b.n	8006f98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f86:	f7fc f809 	bl	8002f9c <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d901      	bls.n	8006f98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e086      	b.n	80070a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f98:	4b45      	ldr	r3, [pc, #276]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f0      	bne.n	8006f86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fa4:	4b42      	ldr	r3, [pc, #264]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	031b      	lsls	r3, r3, #12
 8006fb2:	493f      	ldr	r1, [pc, #252]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	025b      	lsls	r3, r3, #9
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	061b      	lsls	r3, r3, #24
 8006fe4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fe8:	4931      	ldr	r1, [pc, #196]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fee:	4b30      	ldr	r3, [pc, #192]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8006ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	492d      	ldr	r1, [pc, #180]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007000:	4b2b      	ldr	r3, [pc, #172]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	f023 0220 	bic.w	r2, r3, #32
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	4928      	ldr	r1, [pc, #160]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 800700e:	4313      	orrs	r3, r2
 8007010:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007012:	4b27      	ldr	r3, [pc, #156]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	4a26      	ldr	r2, [pc, #152]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007018:	f023 0310 	bic.w	r3, r3, #16
 800701c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800701e:	4b24      	ldr	r3, [pc, #144]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007020:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007022:	4b24      	ldr	r3, [pc, #144]	@ (80070b4 <RCCEx_PLL2_Config+0x160>)
 8007024:	4013      	ands	r3, r2
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	69d2      	ldr	r2, [r2, #28]
 800702a:	00d2      	lsls	r2, r2, #3
 800702c:	4920      	ldr	r1, [pc, #128]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 800702e:	4313      	orrs	r3, r2
 8007030:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007032:	4b1f      	ldr	r3, [pc, #124]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	4a1e      	ldr	r2, [pc, #120]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007038:	f043 0310 	orr.w	r3, r3, #16
 800703c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d106      	bne.n	8007052 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007044:	4b1a      	ldr	r3, [pc, #104]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007048:	4a19      	ldr	r2, [pc, #100]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 800704a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800704e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007050:	e00f      	b.n	8007072 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d106      	bne.n	8007066 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007058:	4b15      	ldr	r3, [pc, #84]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 800705a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705c:	4a14      	ldr	r2, [pc, #80]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 800705e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007062:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007064:	e005      	b.n	8007072 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007066:	4b12      	ldr	r3, [pc, #72]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	4a11      	ldr	r2, [pc, #68]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 800706c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007070:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007072:	4b0f      	ldr	r3, [pc, #60]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a0e      	ldr	r2, [pc, #56]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 8007078:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800707c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800707e:	f7fb ff8d 	bl	8002f9c <HAL_GetTick>
 8007082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007084:	e008      	b.n	8007098 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007086:	f7fb ff89 	bl	8002f9c <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d901      	bls.n	8007098 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e006      	b.n	80070a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007098:	4b05      	ldr	r3, [pc, #20]	@ (80070b0 <RCCEx_PLL2_Config+0x15c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0f0      	beq.n	8007086 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	58024400 	.word	0x58024400
 80070b4:	ffff0007 	.word	0xffff0007

080070b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070c6:	4b53      	ldr	r3, [pc, #332]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80070c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d101      	bne.n	80070d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e099      	b.n	800720a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070d6:	4b4f      	ldr	r3, [pc, #316]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a4e      	ldr	r2, [pc, #312]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e2:	f7fb ff5b 	bl	8002f9c <HAL_GetTick>
 80070e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070e8:	e008      	b.n	80070fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070ea:	f7fb ff57 	bl	8002f9c <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e086      	b.n	800720a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070fc:	4b45      	ldr	r3, [pc, #276]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1f0      	bne.n	80070ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007108:	4b42      	ldr	r3, [pc, #264]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 800710a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	051b      	lsls	r3, r3, #20
 8007116:	493f      	ldr	r1, [pc, #252]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 8007118:	4313      	orrs	r3, r2
 800711a:	628b      	str	r3, [r1, #40]	@ 0x28
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	3b01      	subs	r3, #1
 8007122:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	3b01      	subs	r3, #1
 800712c:	025b      	lsls	r3, r3, #9
 800712e:	b29b      	uxth	r3, r3
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	3b01      	subs	r3, #1
 8007138:	041b      	lsls	r3, r3, #16
 800713a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	3b01      	subs	r3, #1
 8007146:	061b      	lsls	r3, r3, #24
 8007148:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800714c:	4931      	ldr	r1, [pc, #196]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 800714e:	4313      	orrs	r3, r2
 8007150:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007152:	4b30      	ldr	r3, [pc, #192]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	492d      	ldr	r1, [pc, #180]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 8007160:	4313      	orrs	r3, r2
 8007162:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007164:	4b2b      	ldr	r3, [pc, #172]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 8007166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007168:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	4928      	ldr	r1, [pc, #160]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 8007172:	4313      	orrs	r3, r2
 8007174:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007176:	4b27      	ldr	r3, [pc, #156]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	4a26      	ldr	r2, [pc, #152]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 800717c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007180:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007182:	4b24      	ldr	r3, [pc, #144]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 8007184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007186:	4b24      	ldr	r3, [pc, #144]	@ (8007218 <RCCEx_PLL3_Config+0x160>)
 8007188:	4013      	ands	r3, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	69d2      	ldr	r2, [r2, #28]
 800718e:	00d2      	lsls	r2, r2, #3
 8007190:	4920      	ldr	r1, [pc, #128]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 8007192:	4313      	orrs	r3, r2
 8007194:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007196:	4b1f      	ldr	r3, [pc, #124]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 8007198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719a:	4a1e      	ldr	r2, [pc, #120]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 800719c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	4a19      	ldr	r2, [pc, #100]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80071ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80071b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071b4:	e00f      	b.n	80071d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d106      	bne.n	80071ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071bc:	4b15      	ldr	r3, [pc, #84]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	4a14      	ldr	r2, [pc, #80]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80071c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071c8:	e005      	b.n	80071d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071ca:	4b12      	ldr	r3, [pc, #72]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	4a11      	ldr	r2, [pc, #68]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80071d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a0e      	ldr	r2, [pc, #56]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80071dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e2:	f7fb fedb 	bl	8002f9c <HAL_GetTick>
 80071e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071e8:	e008      	b.n	80071fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071ea:	f7fb fed7 	bl	8002f9c <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e006      	b.n	800720a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071fc:	4b05      	ldr	r3, [pc, #20]	@ (8007214 <RCCEx_PLL3_Config+0x15c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0f0      	beq.n	80071ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	58024400 	.word	0x58024400
 8007218:	ffff0007 	.word	0xffff0007

0800721c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e10f      	b.n	800744e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a87      	ldr	r2, [pc, #540]	@ (8007458 <HAL_SPI_Init+0x23c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00f      	beq.n	800725e <HAL_SPI_Init+0x42>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a86      	ldr	r2, [pc, #536]	@ (800745c <HAL_SPI_Init+0x240>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00a      	beq.n	800725e <HAL_SPI_Init+0x42>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a84      	ldr	r2, [pc, #528]	@ (8007460 <HAL_SPI_Init+0x244>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d005      	beq.n	800725e <HAL_SPI_Init+0x42>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b0f      	cmp	r3, #15
 8007258:	d901      	bls.n	800725e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e0f7      	b.n	800744e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fef6 	bl	8008050 <SPI_GetPacketSize>
 8007264:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a7b      	ldr	r2, [pc, #492]	@ (8007458 <HAL_SPI_Init+0x23c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00c      	beq.n	800728a <HAL_SPI_Init+0x6e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a79      	ldr	r2, [pc, #484]	@ (800745c <HAL_SPI_Init+0x240>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <HAL_SPI_Init+0x6e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a78      	ldr	r2, [pc, #480]	@ (8007460 <HAL_SPI_Init+0x244>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d002      	beq.n	800728a <HAL_SPI_Init+0x6e>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b08      	cmp	r3, #8
 8007288:	d811      	bhi.n	80072ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800728e:	4a72      	ldr	r2, [pc, #456]	@ (8007458 <HAL_SPI_Init+0x23c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d009      	beq.n	80072a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a70      	ldr	r2, [pc, #448]	@ (800745c <HAL_SPI_Init+0x240>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d004      	beq.n	80072a8 <HAL_SPI_Init+0x8c>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a6f      	ldr	r2, [pc, #444]	@ (8007460 <HAL_SPI_Init+0x244>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d104      	bne.n	80072b2 <HAL_SPI_Init+0x96>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d901      	bls.n	80072b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e0cd      	b.n	800744e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fb facc 	bl	8002864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0201 	bic.w	r2, r2, #1
 80072e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80072ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072f8:	d119      	bne.n	800732e <HAL_SPI_Init+0x112>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007302:	d103      	bne.n	800730c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10c      	bne.n	800732e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800731c:	d107      	bne.n	800732e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800732c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00f      	beq.n	800735a <HAL_SPI_Init+0x13e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	2b06      	cmp	r3, #6
 8007340:	d90b      	bls.n	800735a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	e007      	b.n	800736a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007368:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69da      	ldr	r2, [r3, #28]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007372:	431a      	orrs	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737c:	ea42 0103 	orr.w	r1, r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	431a      	orrs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ca:	ea42 0103 	orr.w	r1, r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d113      	bne.n	800740a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007408:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40013000 	.word	0x40013000
 800745c:	40003800 	.word	0x40003800
 8007460:	40003c00 	.word	0x40003c00

08007464 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b088      	sub	sp, #32
 8007468:	af02      	add	r7, sp, #8
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3320      	adds	r3, #32
 800747a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800747c:	f7fb fd8e 	bl	8002f9c <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b01      	cmp	r3, #1
 800748c:	d001      	beq.n	8007492 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800748e:	2302      	movs	r3, #2
 8007490:	e1d1      	b.n	8007836 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_SPI_Transmit+0x3a>
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e1c9      	b.n	8007836 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_SPI_Transmit+0x4c>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e1c2      	b.n	8007836 <HAL_SPI_Transmit+0x3d2>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2203      	movs	r2, #3
 80074bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	88fa      	ldrh	r2, [r7, #6]
 80074d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	88fa      	ldrh	r2, [r7, #6]
 80074da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007508:	d108      	bne.n	800751c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e009      	b.n	8007530 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800752e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	4b96      	ldr	r3, [pc, #600]	@ (8007790 <HAL_SPI_Transmit+0x32c>)
 8007538:	4013      	ands	r3, r2
 800753a:	88f9      	ldrh	r1, [r7, #6]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	430b      	orrs	r3, r1
 8007542:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800755c:	d107      	bne.n	800756e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800756c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b0f      	cmp	r3, #15
 8007574:	d947      	bls.n	8007606 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007576:	e03f      	b.n	80075f8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d114      	bne.n	80075b0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6812      	ldr	r2, [r2, #0]
 8007590:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007596:	1d1a      	adds	r2, r3, #4
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80075ae:	e023      	b.n	80075f8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b0:	f7fb fcf4 	bl	8002f9c <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d803      	bhi.n	80075c8 <HAL_SPI_Transmit+0x164>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d102      	bne.n	80075ce <HAL_SPI_Transmit+0x16a>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d114      	bne.n	80075f8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fc70 	bl	8007eb4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e11e      	b.n	8007836 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1b9      	bne.n	8007578 <HAL_SPI_Transmit+0x114>
 8007604:	e0f1      	b.n	80077ea <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	2b07      	cmp	r3, #7
 800760c:	f240 80e6 	bls.w	80077dc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007610:	e05d      	b.n	80076ce <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b02      	cmp	r3, #2
 800761e:	d132      	bne.n	8007686 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b01      	cmp	r3, #1
 800762a:	d918      	bls.n	800765e <HAL_SPI_Transmit+0x1fa>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d014      	beq.n	800765e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007644:	1d1a      	adds	r2, r3, #4
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b02      	subs	r3, #2
 8007654:	b29a      	uxth	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800765c:	e037      	b.n	80076ce <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800766c:	1c9a      	adds	r2, r3, #2
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007684:	e023      	b.n	80076ce <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007686:	f7fb fc89 	bl	8002f9c <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d803      	bhi.n	800769e <HAL_SPI_Transmit+0x23a>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d102      	bne.n	80076a4 <HAL_SPI_Transmit+0x240>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d114      	bne.n	80076ce <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 fc05 	bl	8007eb4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e0b3      	b.n	8007836 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d19b      	bne.n	8007612 <HAL_SPI_Transmit+0x1ae>
 80076da:	e086      	b.n	80077ea <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d154      	bne.n	8007794 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d918      	bls.n	8007728 <HAL_SPI_Transmit+0x2c4>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fa:	2b40      	cmp	r3, #64	@ 0x40
 80076fc:	d914      	bls.n	8007728 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6812      	ldr	r2, [r2, #0]
 8007708:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b04      	subs	r3, #4
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007726:	e059      	b.n	80077dc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800772e:	b29b      	uxth	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d917      	bls.n	8007764 <HAL_SPI_Transmit+0x300>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d013      	beq.n	8007764 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007740:	881a      	ldrh	r2, [r3, #0]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774a:	1c9a      	adds	r2, r3, #2
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b02      	subs	r3, #2
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007762:	e03b      	b.n	80077dc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3320      	adds	r3, #32
 800776e:	7812      	ldrb	r2, [r2, #0]
 8007770:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800778e:	e025      	b.n	80077dc <HAL_SPI_Transmit+0x378>
 8007790:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007794:	f7fb fc02 	bl	8002f9c <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d803      	bhi.n	80077ac <HAL_SPI_Transmit+0x348>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077aa:	d102      	bne.n	80077b2 <HAL_SPI_Transmit+0x34e>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d114      	bne.n	80077dc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fb7e 	bl	8007eb4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e02c      	b.n	8007836 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f47f af79 	bne.w	80076dc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2200      	movs	r2, #0
 80077f2:	2108      	movs	r1, #8
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fbfd 	bl	8007ff4 <SPI_WaitOnFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d007      	beq.n	8007810 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007806:	f043 0220 	orr.w	r2, r3, #32
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fb4f 	bl	8007eb4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007834:	2300      	movs	r3, #0
  }
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop

08007840 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08e      	sub	sp, #56	@ 0x38
 8007844:	af02      	add	r7, sp, #8
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3320      	adds	r3, #32
 8007854:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3330      	adds	r3, #48	@ 0x30
 800785c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	b29b      	uxth	r3, r3
 8007866:	3301      	adds	r3, #1
 8007868:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800786a:	f7fb fb97 	bl	8002f9c <HAL_GetTick>
 800786e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8007870:	887b      	ldrh	r3, [r7, #2]
 8007872:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8007874:	887b      	ldrh	r3, [r7, #2]
 8007876:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	d001      	beq.n	8007888 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8007884:	2302      	movs	r3, #2
 8007886:	e310      	b.n	8007eaa <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <HAL_SPI_TransmitReceive+0x5a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <HAL_SPI_TransmitReceive+0x5a>
 8007894:	887b      	ldrh	r3, [r7, #2]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e305      	b.n	8007eaa <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_SPI_TransmitReceive+0x6c>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e2fe      	b.n	8007eaa <HAL_SPI_TransmitReceive+0x66a>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2205      	movs	r2, #5
 80078b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	887a      	ldrh	r2, [r7, #2]
 80078ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	887a      	ldrh	r2, [r7, #2]
 80078d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	887a      	ldrh	r2, [r7, #2]
 80078e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	887a      	ldrh	r2, [r7, #2]
 80078ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800790a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a70      	ldr	r2, [pc, #448]	@ (8007ad4 <HAL_SPI_TransmitReceive+0x294>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d009      	beq.n	800792a <HAL_SPI_TransmitReceive+0xea>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a6f      	ldr	r2, [pc, #444]	@ (8007ad8 <HAL_SPI_TransmitReceive+0x298>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d004      	beq.n	800792a <HAL_SPI_TransmitReceive+0xea>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a6d      	ldr	r2, [pc, #436]	@ (8007adc <HAL_SPI_TransmitReceive+0x29c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d102      	bne.n	8007930 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800792a:	2310      	movs	r3, #16
 800792c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800792e:	e001      	b.n	8007934 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007930:	2308      	movs	r3, #8
 8007932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	4b69      	ldr	r3, [pc, #420]	@ (8007ae0 <HAL_SPI_TransmitReceive+0x2a0>)
 800793c:	4013      	ands	r3, r2
 800793e:	8879      	ldrh	r1, [r7, #2]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	430b      	orrs	r3, r1
 8007946:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007960:	d107      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	2b0f      	cmp	r3, #15
 8007978:	f240 80a2 	bls.w	8007ac0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800797c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797e:	089b      	lsrs	r3, r3, #2
 8007980:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007982:	e094      	b.n	8007aae <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b02      	cmp	r3, #2
 8007990:	d120      	bne.n	80079d4 <HAL_SPI_TransmitReceive+0x194>
 8007992:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01d      	beq.n	80079d4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007998:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800799a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d217      	bcs.n	80079d4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079b4:	1d1a      	adds	r2, r3, #4
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80079dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d065      	beq.n	8007aae <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d118      	bne.n	8007a22 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80079fa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a00:	1d1a      	adds	r2, r3, #4
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007a20:	e045      	b.n	8007aae <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007a22:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007a24:	8bfb      	ldrh	r3, [r7, #30]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d21d      	bcs.n	8007a66 <HAL_SPI_TransmitReceive+0x226>
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d018      	beq.n	8007a66 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a3e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a44:	1d1a      	adds	r2, r3, #4
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007a64:	e023      	b.n	8007aae <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a66:	f7fb fa99 	bl	8002f9c <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d803      	bhi.n	8007a7e <HAL_SPI_TransmitReceive+0x23e>
 8007a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7c:	d102      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x244>
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d114      	bne.n	8007aae <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 fa15 	bl	8007eb4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e1fd      	b.n	8007eaa <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007aae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f47f af67 	bne.w	8007984 <HAL_SPI_TransmitReceive+0x144>
 8007ab6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f47f af63 	bne.w	8007984 <HAL_SPI_TransmitReceive+0x144>
 8007abe:	e1ce      	b.n	8007e5e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b07      	cmp	r3, #7
 8007ac6:	f240 81c2 	bls.w	8007e4e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007ad0:	e0c9      	b.n	8007c66 <HAL_SPI_TransmitReceive+0x426>
 8007ad2:	bf00      	nop
 8007ad4:	40013000 	.word	0x40013000
 8007ad8:	40003800 	.word	0x40003800
 8007adc:	40003c00 	.word	0x40003c00
 8007ae0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d11f      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x2f2>
 8007af2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01c      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007af8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007afa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007afe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d216      	bcs.n	8007b32 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b08:	881a      	ldrh	r2, [r3, #0]
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b12:	1c9a      	adds	r2, r3, #2
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b30:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007b3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8092 	beq.w	8007c66 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d118      	bne.n	8007b82 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b54:	6a3a      	ldr	r2, [r7, #32]
 8007b56:	8812      	ldrh	r2, [r2, #0]
 8007b58:	b292      	uxth	r2, r2
 8007b5a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b60:	1c9a      	adds	r2, r3, #2
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007b80:	e071      	b.n	8007c66 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007b82:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007b84:	8bfb      	ldrh	r3, [r7, #30]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d228      	bcs.n	8007bdc <HAL_SPI_TransmitReceive+0x39c>
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d023      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b98:	6a3a      	ldr	r2, [r7, #32]
 8007b9a:	8812      	ldrh	r2, [r2, #0]
 8007b9c:	b292      	uxth	r2, r2
 8007b9e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ba4:	1c9a      	adds	r2, r3, #2
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bae:	6a3a      	ldr	r2, [r7, #32]
 8007bb0:	8812      	ldrh	r2, [r2, #0]
 8007bb2:	b292      	uxth	r2, r2
 8007bb4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bba:	1c9a      	adds	r2, r3, #2
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b02      	subs	r3, #2
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bd8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007bda:	e044      	b.n	8007c66 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007bdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d11d      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x3de>
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d018      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf0:	6a3a      	ldr	r2, [r7, #32]
 8007bf2:	8812      	ldrh	r2, [r2, #0]
 8007bf4:	b292      	uxth	r2, r2
 8007bf6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bfc:	1c9a      	adds	r2, r3, #2
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c1a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007c1c:	e023      	b.n	8007c66 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c1e:	f7fb f9bd 	bl	8002f9c <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d803      	bhi.n	8007c36 <HAL_SPI_TransmitReceive+0x3f6>
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d102      	bne.n	8007c3c <HAL_SPI_TransmitReceive+0x3fc>
 8007c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d114      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f939 	bl	8007eb4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e121      	b.n	8007eaa <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007c66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f47f af3b 	bne.w	8007ae4 <HAL_SPI_TransmitReceive+0x2a4>
 8007c6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f47f af37 	bne.w	8007ae4 <HAL_SPI_TransmitReceive+0x2a4>
 8007c76:	e0f2      	b.n	8007e5e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d121      	bne.n	8007cca <HAL_SPI_TransmitReceive+0x48a>
 8007c86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01e      	beq.n	8007cca <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007c8c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007c8e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c92:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d218      	bcs.n	8007cca <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3320      	adds	r3, #32
 8007ca2:	7812      	ldrb	r2, [r2, #0]
 8007ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cc8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007cd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 80ba 	beq.w	8007e4e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d11b      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cf4:	7812      	ldrb	r2, [r2, #0]
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d1c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007d1e:	e096      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007d20:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007d22:	8bfb      	ldrh	r3, [r7, #30]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d24a      	bcs.n	8007dbe <HAL_SPI_TransmitReceive+0x57e>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d045      	beq.n	8007dbe <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	b2d2      	uxtb	r2, r2
 8007d42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d5a:	7812      	ldrb	r2, [r2, #0]
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d92:	7812      	ldrb	r2, [r2, #0]
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b04      	subs	r3, #4
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007dbc:	e047      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007dbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d820      	bhi.n	8007e06 <HAL_SPI_TransmitReceive+0x5c6>
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d01b      	beq.n	8007e06 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007e04:	e023      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e06:	f7fb f8c9 	bl	8002f9c <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d803      	bhi.n	8007e1e <HAL_SPI_TransmitReceive+0x5de>
 8007e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d102      	bne.n	8007e24 <HAL_SPI_TransmitReceive+0x5e4>
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d114      	bne.n	8007e4e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f845 	bl	8007eb4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e02d      	b.n	8007eaa <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f47f af11 	bne.w	8007c78 <HAL_SPI_TransmitReceive+0x438>
 8007e56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f47f af0d 	bne.w	8007c78 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	2200      	movs	r2, #0
 8007e66:	2108      	movs	r1, #8
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f8c3 	bl	8007ff4 <SPI_WaitOnFlagUntilTimeout>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d007      	beq.n	8007e84 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e7a:	f043 0220 	orr.w	r2, r3, #32
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f815 	bl	8007eb4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e000      	b.n	8007eaa <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3730      	adds	r7, #48	@ 0x30
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop

08007eb4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699a      	ldr	r2, [r3, #24]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0208 	orr.w	r2, r2, #8
 8007ed2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0210 	orr.w	r2, r2, #16
 8007ee2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0201 	bic.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6919      	ldr	r1, [r3, #16]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b3c      	ldr	r3, [pc, #240]	@ (8007ff0 <SPI_CloseTransfer+0x13c>)
 8007f00:	400b      	ands	r3, r1
 8007f02:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007f12:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d014      	beq.n	8007f4a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699a      	ldr	r2, [r3, #24]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0220 	orr.w	r2, r2, #32
 8007f48:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d014      	beq.n	8007f80 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00f      	beq.n	8007f80 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f66:	f043 0204 	orr.w	r2, r3, #4
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f7e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00f      	beq.n	8007faa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f90:	f043 0201 	orr.w	r2, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	699a      	ldr	r2, [r3, #24]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fa8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00f      	beq.n	8007fd4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fba:	f043 0208 	orr.w	r2, r3, #8
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	699a      	ldr	r2, [r3, #24]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fd2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	fffffc90 	.word	0xfffffc90

08007ff4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	4613      	mov	r3, r2
 8008002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008004:	e010      	b.n	8008028 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008006:	f7fa ffc9 	bl	8002f9c <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d803      	bhi.n	800801e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801c:	d102      	bne.n	8008024 <SPI_WaitOnFlagUntilTimeout+0x30>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e00f      	b.n	8008048 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695a      	ldr	r2, [r3, #20]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	4013      	ands	r3, r2
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	429a      	cmp	r2, r3
 8008036:	bf0c      	ite	eq
 8008038:	2301      	moveq	r3, #1
 800803a:	2300      	movne	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	461a      	mov	r2, r3
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	429a      	cmp	r2, r3
 8008044:	d0df      	beq.n	8008006 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	3301      	adds	r3, #1
 8008068:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	3307      	adds	r3, #7
 800806e:	08db      	lsrs	r3, r3, #3
 8008070:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	fb02 f303 	mul.w	r3, r2, r3
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e049      	b.n	800812c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d106      	bne.n	80080b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7fa fcdf 	bl	8002a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f000 f99d 	bl	8008404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0201 	bic.w	r2, r2, #1
 800814a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6a1a      	ldr	r2, [r3, #32]
 8008152:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008156:	4013      	ands	r3, r2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10f      	bne.n	800817c <HAL_TIM_Base_Stop_IT+0x48>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6a1a      	ldr	r2, [r3, #32]
 8008162:	f240 4344 	movw	r3, #1092	@ 0x444
 8008166:	4013      	ands	r3, r2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d107      	bne.n	800817c <HAL_TIM_Base_Stop_IT+0x48>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d020      	beq.n	80081f6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01b      	beq.n	80081f6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f06f 0202 	mvn.w	r2, #2
 80081c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f8f3 	bl	80083c8 <HAL_TIM_IC_CaptureCallback>
 80081e2:	e005      	b.n	80081f0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f8e5 	bl	80083b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f8f6 	bl	80083dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d020      	beq.n	8008242 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	d01b      	beq.n	8008242 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f06f 0204 	mvn.w	r2, #4
 8008212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f8cd 	bl	80083c8 <HAL_TIM_IC_CaptureCallback>
 800822e:	e005      	b.n	800823c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f8bf 	bl	80083b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f8d0 	bl	80083dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f003 0308 	and.w	r3, r3, #8
 8008248:	2b00      	cmp	r3, #0
 800824a:	d020      	beq.n	800828e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d01b      	beq.n	800828e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f06f 0208 	mvn.w	r2, #8
 800825e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2204      	movs	r2, #4
 8008264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	f003 0303 	and.w	r3, r3, #3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f8a7 	bl	80083c8 <HAL_TIM_IC_CaptureCallback>
 800827a:	e005      	b.n	8008288 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f899 	bl	80083b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f8aa 	bl	80083dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b00      	cmp	r3, #0
 8008296:	d020      	beq.n	80082da <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f003 0310 	and.w	r3, r3, #16
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01b      	beq.n	80082da <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f06f 0210 	mvn.w	r2, #16
 80082aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2208      	movs	r2, #8
 80082b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f881 	bl	80083c8 <HAL_TIM_IC_CaptureCallback>
 80082c6:	e005      	b.n	80082d4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f873 	bl	80083b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f884 	bl	80083dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00c      	beq.n	80082fe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f06f 0201 	mvn.w	r2, #1
 80082f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f851 	bl	80083a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008304:	2b00      	cmp	r3, #0
 8008306:	d104      	bne.n	8008312 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00c      	beq.n	800832c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f9aa 	bl	8008680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00c      	beq.n	8008350 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f9a2 	bl	8008694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00c      	beq.n	8008374 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800836c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f83e 	bl	80083f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00c      	beq.n	8008398 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	d007      	beq.n	8008398 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0220 	mvn.w	r2, #32
 8008390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f96a 	bl	800866c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a46      	ldr	r2, [pc, #280]	@ (8008530 <TIM_Base_SetConfig+0x12c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d013      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008422:	d00f      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a43      	ldr	r2, [pc, #268]	@ (8008534 <TIM_Base_SetConfig+0x130>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d00b      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a42      	ldr	r2, [pc, #264]	@ (8008538 <TIM_Base_SetConfig+0x134>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d007      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a41      	ldr	r2, [pc, #260]	@ (800853c <TIM_Base_SetConfig+0x138>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d003      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a40      	ldr	r2, [pc, #256]	@ (8008540 <TIM_Base_SetConfig+0x13c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d108      	bne.n	8008456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800844a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a35      	ldr	r2, [pc, #212]	@ (8008530 <TIM_Base_SetConfig+0x12c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d01f      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008464:	d01b      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a32      	ldr	r2, [pc, #200]	@ (8008534 <TIM_Base_SetConfig+0x130>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d017      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a31      	ldr	r2, [pc, #196]	@ (8008538 <TIM_Base_SetConfig+0x134>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d013      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a30      	ldr	r2, [pc, #192]	@ (800853c <TIM_Base_SetConfig+0x138>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d00f      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a2f      	ldr	r2, [pc, #188]	@ (8008540 <TIM_Base_SetConfig+0x13c>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00b      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a2e      	ldr	r2, [pc, #184]	@ (8008544 <TIM_Base_SetConfig+0x140>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d007      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a2d      	ldr	r2, [pc, #180]	@ (8008548 <TIM_Base_SetConfig+0x144>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d003      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a2c      	ldr	r2, [pc, #176]	@ (800854c <TIM_Base_SetConfig+0x148>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d108      	bne.n	80084b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a16      	ldr	r2, [pc, #88]	@ (8008530 <TIM_Base_SetConfig+0x12c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00f      	beq.n	80084fc <TIM_Base_SetConfig+0xf8>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a18      	ldr	r2, [pc, #96]	@ (8008540 <TIM_Base_SetConfig+0x13c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00b      	beq.n	80084fc <TIM_Base_SetConfig+0xf8>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a17      	ldr	r2, [pc, #92]	@ (8008544 <TIM_Base_SetConfig+0x140>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d007      	beq.n	80084fc <TIM_Base_SetConfig+0xf8>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a16      	ldr	r2, [pc, #88]	@ (8008548 <TIM_Base_SetConfig+0x144>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d003      	beq.n	80084fc <TIM_Base_SetConfig+0xf8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a15      	ldr	r2, [pc, #84]	@ (800854c <TIM_Base_SetConfig+0x148>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d103      	bne.n	8008504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b01      	cmp	r3, #1
 8008514:	d105      	bne.n	8008522 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f023 0201 	bic.w	r2, r3, #1
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]
  }
}
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	40010000 	.word	0x40010000
 8008534:	40000400 	.word	0x40000400
 8008538:	40000800 	.word	0x40000800
 800853c:	40000c00 	.word	0x40000c00
 8008540:	40010400 	.word	0x40010400
 8008544:	40014000 	.word	0x40014000
 8008548:	40014400 	.word	0x40014400
 800854c:	40014800 	.word	0x40014800

08008550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008564:	2302      	movs	r3, #2
 8008566:	e06d      	b.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a30      	ldr	r2, [pc, #192]	@ (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a2f      	ldr	r2, [pc, #188]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d108      	bne.n	80085ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80085a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a20      	ldr	r2, [pc, #128]	@ (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d022      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085da:	d01d      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008658 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d018      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a1c      	ldr	r2, [pc, #112]	@ (800865c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d013      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00e      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a15      	ldr	r2, [pc, #84]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d009      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a16      	ldr	r2, [pc, #88]	@ (8008664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d004      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a15      	ldr	r2, [pc, #84]	@ (8008668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d10c      	bne.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800861e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	4313      	orrs	r3, r2
 8008628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	40010000 	.word	0x40010000
 8008654:	40010400 	.word	0x40010400
 8008658:	40000400 	.word	0x40000400
 800865c:	40000800 	.word	0x40000800
 8008660:	40000c00 	.word	0x40000c00
 8008664:	40001800 	.word	0x40001800
 8008668:	40014000 	.word	0x40014000

0800866c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80086ac:	4904      	ldr	r1, [pc, #16]	@ (80086c0 <MX_FATFS_Init+0x18>)
 80086ae:	4805      	ldr	r0, [pc, #20]	@ (80086c4 <MX_FATFS_Init+0x1c>)
 80086b0:	f000 fda8 	bl	8009204 <FATFS_LinkDriver>
 80086b4:	4603      	mov	r3, r0
 80086b6:	461a      	mov	r2, r3
 80086b8:	4b03      	ldr	r3, [pc, #12]	@ (80086c8 <MX_FATFS_Init+0x20>)
 80086ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80086bc:	bf00      	nop
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	24000284 	.word	0x24000284
 80086c4:	24000014 	.word	0x24000014
 80086c8:	24000280 	.word	0x24000280

080086cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f9fd 	bl	8008ad8 <USER_SPI_initialize>
 80086de:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 fad1 	bl	8008c9c <USER_SPI_status>
 80086fa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008714:	7bf8      	ldrb	r0, [r7, #15]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	f000 fad4 	bl	8008cc8 <USER_SPI_read>
 8008720:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
 8008736:	4603      	mov	r3, r0
 8008738:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800873a:	7bf8      	ldrb	r0, [r7, #15]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	f000 fb27 	bl	8008d94 <USER_SPI_write>
 8008746:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	603a      	str	r2, [r7, #0]
 800875a:	71fb      	strb	r3, [r7, #7]
 800875c:	460b      	mov	r3, r1
 800875e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008760:	79b9      	ldrb	r1, [r7, #6]
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fb90 	bl	8008e8c <USER_SPI_ioctl>
 800876c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f022 0201 	bic.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	071a      	lsls	r2, r3, #28
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0201 	orr.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80087cc:	f7fa fbe6 	bl	8002f9c <HAL_GetTick>
 80087d0:	4603      	mov	r3, r0
 80087d2:	4a04      	ldr	r2, [pc, #16]	@ (80087e4 <SPI_Timer_On+0x20>)
 80087d4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80087d6:	4a04      	ldr	r2, [pc, #16]	@ (80087e8 <SPI_Timer_On+0x24>)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6013      	str	r3, [r2, #0]
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	2400028c 	.word	0x2400028c
 80087e8:	24000290 	.word	0x24000290

080087ec <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80087f0:	f7fa fbd4 	bl	8002f9c <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <SPI_Timer_Status+0x24>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	4b05      	ldr	r3, [pc, #20]	@ (8008814 <SPI_Timer_Status+0x28>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	bf34      	ite	cc
 8008804:	2301      	movcc	r3, #1
 8008806:	2300      	movcs	r3, #0
 8008808:	b2db      	uxtb	r3, r3
}
 800880a:	4618      	mov	r0, r3
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	2400028c 	.word	0x2400028c
 8008814:	24000290 	.word	0x24000290

08008818 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af02      	add	r7, sp, #8
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008822:	f107 020f 	add.w	r2, r7, #15
 8008826:	1df9      	adds	r1, r7, #7
 8008828:	2332      	movs	r3, #50	@ 0x32
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	2301      	movs	r3, #1
 800882e:	4804      	ldr	r0, [pc, #16]	@ (8008840 <xchg_spi+0x28>)
 8008830:	f7ff f806 	bl	8007840 <HAL_SPI_TransmitReceive>

    return rxDat;
 8008834:	7bfb      	ldrb	r3, [r7, #15]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	240001a4 	.word	0x240001a4

08008844 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008844:	b590      	push	{r4, r7, lr}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	e00a      	b.n	800886a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	18d4      	adds	r4, r2, r3
 800885a:	20ff      	movs	r0, #255	@ 0xff
 800885c:	f7ff ffdc 	bl	8008818 <xchg_spi>
 8008860:	4603      	mov	r3, r0
 8008862:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3301      	adds	r3, #1
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d3f0      	bcc.n	8008854 <rcvr_spi_multi+0x10>
	}
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	bd90      	pop	{r4, r7, pc}

0800887c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	b29a      	uxth	r2, r3
 800888a:	f04f 33ff 	mov.w	r3, #4294967295
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	4803      	ldr	r0, [pc, #12]	@ (80088a0 <xmit_spi_multi+0x24>)
 8008892:	f7fe fde7 	bl	8007464 <HAL_SPI_Transmit>
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	240001a4 	.word	0x240001a4

080088a4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80088ac:	f7fa fb76 	bl	8002f9c <HAL_GetTick>
 80088b0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80088b6:	20ff      	movs	r0, #255	@ 0xff
 80088b8:	f7ff ffae 	bl	8008818 <xchg_spi>
 80088bc:	4603      	mov	r3, r0
 80088be:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	2bff      	cmp	r3, #255	@ 0xff
 80088c4:	d007      	beq.n	80088d6 <wait_ready+0x32>
 80088c6:	f7fa fb69 	bl	8002f9c <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d8ef      	bhi.n	80088b6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2bff      	cmp	r3, #255	@ 0xff
 80088da:	bf0c      	ite	eq
 80088dc:	2301      	moveq	r3, #1
 80088de:	2300      	movne	r3, #0
 80088e0:	b2db      	uxtb	r3, r3
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80088f0:	2201      	movs	r2, #1
 80088f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80088f6:	4804      	ldr	r0, [pc, #16]	@ (8008908 <despiselect+0x1c>)
 80088f8:	f7fa fe4c 	bl	8003594 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80088fc:	20ff      	movs	r0, #255	@ 0xff
 80088fe:	f7ff ff8b 	bl	8008818 <xchg_spi>

}
 8008902:	bf00      	nop
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	58020400 	.word	0x58020400

0800890c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800890c:	b580      	push	{r7, lr}
 800890e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008910:	2200      	movs	r2, #0
 8008912:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008916:	480a      	ldr	r0, [pc, #40]	@ (8008940 <spiselect+0x34>)
 8008918:	f7fa fe3c 	bl	8003594 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800891c:	20ff      	movs	r0, #255	@ 0xff
 800891e:	f7ff ff7b 	bl	8008818 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008922:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008926:	f7ff ffbd 	bl	80088a4 <wait_ready>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <spiselect+0x28>
 8008930:	2301      	movs	r3, #1
 8008932:	e002      	b.n	800893a <spiselect+0x2e>

	despiselect();
 8008934:	f7ff ffda 	bl	80088ec <despiselect>
	return 0;	/* Timeout */
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	58020400 	.word	0x58020400

08008944 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800894e:	20c8      	movs	r0, #200	@ 0xc8
 8008950:	f7ff ff38 	bl	80087c4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008954:	20ff      	movs	r0, #255	@ 0xff
 8008956:	f7ff ff5f 	bl	8008818 <xchg_spi>
 800895a:	4603      	mov	r3, r0
 800895c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	2bff      	cmp	r3, #255	@ 0xff
 8008962:	d104      	bne.n	800896e <rcvr_datablock+0x2a>
 8008964:	f7ff ff42 	bl	80087ec <SPI_Timer_Status>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1f2      	bne.n	8008954 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2bfe      	cmp	r3, #254	@ 0xfe
 8008972:	d001      	beq.n	8008978 <rcvr_datablock+0x34>
 8008974:	2300      	movs	r3, #0
 8008976:	e00a      	b.n	800898e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7ff ff62 	bl	8008844 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008980:	20ff      	movs	r0, #255	@ 0xff
 8008982:	f7ff ff49 	bl	8008818 <xchg_spi>
 8008986:	20ff      	movs	r0, #255	@ 0xff
 8008988:	f7ff ff46 	bl	8008818 <xchg_spi>

	return 1;						/* Function succeeded */
 800898c:	2301      	movs	r3, #1
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80089a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80089a6:	f7ff ff7d 	bl	80088a4 <wait_ready>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <xmit_datablock+0x1e>
 80089b0:	2300      	movs	r3, #0
 80089b2:	e01e      	b.n	80089f2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff ff2e 	bl	8008818 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	2bfd      	cmp	r3, #253	@ 0xfd
 80089c0:	d016      	beq.n	80089f0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80089c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff ff58 	bl	800887c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80089cc:	20ff      	movs	r0, #255	@ 0xff
 80089ce:	f7ff ff23 	bl	8008818 <xchg_spi>
 80089d2:	20ff      	movs	r0, #255	@ 0xff
 80089d4:	f7ff ff20 	bl	8008818 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80089d8:	20ff      	movs	r0, #255	@ 0xff
 80089da:	f7ff ff1d 	bl	8008818 <xchg_spi>
 80089de:	4603      	mov	r3, r0
 80089e0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	f003 031f 	and.w	r3, r3, #31
 80089e8:	2b05      	cmp	r3, #5
 80089ea:	d001      	beq.n	80089f0 <xmit_datablock+0x5a>
 80089ec:	2300      	movs	r3, #0
 80089ee:	e000      	b.n	80089f2 <xmit_datablock+0x5c>
	}
	return 1;
 80089f0:	2301      	movs	r3, #1
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	4603      	mov	r3, r0
 8008a02:	6039      	str	r1, [r7, #0]
 8008a04:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	da0e      	bge.n	8008a2c <send_cmd+0x32>
		cmd &= 0x7F;
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a14:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008a16:	2100      	movs	r1, #0
 8008a18:	2037      	movs	r0, #55	@ 0x37
 8008a1a:	f7ff ffee 	bl	80089fa <send_cmd>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d901      	bls.n	8008a2c <send_cmd+0x32>
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	e051      	b.n	8008ad0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	2b0c      	cmp	r3, #12
 8008a30:	d008      	beq.n	8008a44 <send_cmd+0x4a>
		despiselect();
 8008a32:	f7ff ff5b 	bl	80088ec <despiselect>
		if (!spiselect()) return 0xFF;
 8008a36:	f7ff ff69 	bl	800890c <spiselect>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <send_cmd+0x4a>
 8008a40:	23ff      	movs	r3, #255	@ 0xff
 8008a42:	e045      	b.n	8008ad0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fee3 	bl	8008818 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	0e1b      	lsrs	r3, r3, #24
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff fedd 	bl	8008818 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	0c1b      	lsrs	r3, r3, #16
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fed7 	bl	8008818 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	0a1b      	lsrs	r3, r3, #8
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff fed1 	bl	8008818 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff fecc 	bl	8008818 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008a80:	2301      	movs	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <send_cmd+0x94>
 8008a8a:	2395      	movs	r3, #149	@ 0x95
 8008a8c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d101      	bne.n	8008a98 <send_cmd+0x9e>
 8008a94:	2387      	movs	r3, #135	@ 0x87
 8008a96:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff febc 	bl	8008818 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	2b0c      	cmp	r3, #12
 8008aa4:	d102      	bne.n	8008aac <send_cmd+0xb2>
 8008aa6:	20ff      	movs	r0, #255	@ 0xff
 8008aa8:	f7ff feb6 	bl	8008818 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008aac:	230a      	movs	r3, #10
 8008aae:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008ab0:	20ff      	movs	r0, #255	@ 0xff
 8008ab2:	f7ff feb1 	bl	8008818 <xchg_spi>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008aba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	da05      	bge.n	8008ace <send_cmd+0xd4>
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	73fb      	strb	r3, [r7, #15]
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f0      	bne.n	8008ab0 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <USER_SPI_initialize+0x14>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e0cc      	b.n	8008c86 <USER_SPI_initialize+0x1ae>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008aec:	4b68      	ldr	r3, [pc, #416]	@ (8008c90 <USER_SPI_initialize+0x1b8>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <USER_SPI_initialize+0x2a>
 8008afa:	4b65      	ldr	r3, [pc, #404]	@ (8008c90 <USER_SPI_initialize+0x1b8>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	e0c1      	b.n	8008c86 <USER_SPI_initialize+0x1ae>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_64);
 8008b02:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8008b06:	4863      	ldr	r0, [pc, #396]	@ (8008c94 <USER_SPI_initialize+0x1bc>)
 8008b08:	f7ff fe35 	bl	8008776 <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008b0c:	230a      	movs	r3, #10
 8008b0e:	73fb      	strb	r3, [r7, #15]
 8008b10:	e005      	b.n	8008b1e <USER_SPI_initialize+0x46>
 8008b12:	20ff      	movs	r0, #255	@ 0xff
 8008b14:	f7ff fe80 	bl	8008818 <xchg_spi>
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	73fb      	strb	r3, [r7, #15]
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f6      	bne.n	8008b12 <USER_SPI_initialize+0x3a>

	ty = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008b28:	2100      	movs	r1, #0
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	f7ff ff65 	bl	80089fa <send_cmd>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	f040 808b 	bne.w	8008c4e <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008b38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008b3c:	f7ff fe42 	bl	80087c4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008b40:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008b44:	2008      	movs	r0, #8
 8008b46:	f7ff ff58 	bl	80089fa <send_cmd>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d151      	bne.n	8008bf4 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008b50:	2300      	movs	r3, #0
 8008b52:	73fb      	strb	r3, [r7, #15]
 8008b54:	e00d      	b.n	8008b72 <USER_SPI_initialize+0x9a>
 8008b56:	7bfc      	ldrb	r4, [r7, #15]
 8008b58:	20ff      	movs	r0, #255	@ 0xff
 8008b5a:	f7ff fe5d 	bl	8008818 <xchg_spi>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	461a      	mov	r2, r3
 8008b62:	f104 0310 	add.w	r3, r4, #16
 8008b66:	443b      	add	r3, r7
 8008b68:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	73fb      	strb	r3, [r7, #15]
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d9ee      	bls.n	8008b56 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008b78:	7abb      	ldrb	r3, [r7, #10]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d167      	bne.n	8008c4e <USER_SPI_initialize+0x176>
 8008b7e:	7afb      	ldrb	r3, [r7, #11]
 8008b80:	2baa      	cmp	r3, #170	@ 0xaa
 8008b82:	d164      	bne.n	8008c4e <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008b84:	bf00      	nop
 8008b86:	f7ff fe31 	bl	80087ec <SPI_Timer_Status>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d007      	beq.n	8008ba0 <USER_SPI_initialize+0xc8>
 8008b90:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008b94:	20a9      	movs	r0, #169	@ 0xa9
 8008b96:	f7ff ff30 	bl	80089fa <send_cmd>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1f2      	bne.n	8008b86 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008ba0:	f7ff fe24 	bl	80087ec <SPI_Timer_Status>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d051      	beq.n	8008c4e <USER_SPI_initialize+0x176>
 8008baa:	2100      	movs	r1, #0
 8008bac:	203a      	movs	r0, #58	@ 0x3a
 8008bae:	f7ff ff24 	bl	80089fa <send_cmd>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d14a      	bne.n	8008c4e <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]
 8008bbc:	e00d      	b.n	8008bda <USER_SPI_initialize+0x102>
 8008bbe:	7bfc      	ldrb	r4, [r7, #15]
 8008bc0:	20ff      	movs	r0, #255	@ 0xff
 8008bc2:	f7ff fe29 	bl	8008818 <xchg_spi>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	461a      	mov	r2, r3
 8008bca:	f104 0310 	add.w	r3, r4, #16
 8008bce:	443b      	add	r3, r7
 8008bd0:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	73fb      	strb	r3, [r7, #15]
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d9ee      	bls.n	8008bbe <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008be0:	7a3b      	ldrb	r3, [r7, #8]
 8008be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <USER_SPI_initialize+0x116>
 8008bea:	230c      	movs	r3, #12
 8008bec:	e000      	b.n	8008bf0 <USER_SPI_initialize+0x118>
 8008bee:	2304      	movs	r3, #4
 8008bf0:	737b      	strb	r3, [r7, #13]
 8008bf2:	e02c      	b.n	8008c4e <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	20a9      	movs	r0, #169	@ 0xa9
 8008bf8:	f7ff feff 	bl	80089fa <send_cmd>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d804      	bhi.n	8008c0c <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008c02:	2302      	movs	r3, #2
 8008c04:	737b      	strb	r3, [r7, #13]
 8008c06:	23a9      	movs	r3, #169	@ 0xa9
 8008c08:	73bb      	strb	r3, [r7, #14]
 8008c0a:	e003      	b.n	8008c14 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	737b      	strb	r3, [r7, #13]
 8008c10:	2301      	movs	r3, #1
 8008c12:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008c14:	bf00      	nop
 8008c16:	f7ff fde9 	bl	80087ec <SPI_Timer_Status>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d007      	beq.n	8008c30 <USER_SPI_initialize+0x158>
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	2100      	movs	r1, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff fee8 	bl	80089fa <send_cmd>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1f2      	bne.n	8008c16 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008c30:	f7ff fddc 	bl	80087ec <SPI_Timer_Status>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <USER_SPI_initialize+0x172>
 8008c3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c3e:	2010      	movs	r0, #16
 8008c40:	f7ff fedb 	bl	80089fa <send_cmd>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <USER_SPI_initialize+0x176>
				ty = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008c4e:	4a12      	ldr	r2, [pc, #72]	@ (8008c98 <USER_SPI_initialize+0x1c0>)
 8008c50:	7b7b      	ldrb	r3, [r7, #13]
 8008c52:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008c54:	f7ff fe4a 	bl	80088ec <despiselect>

	if (ty) {			/* OK */
 8008c58:	7b7b      	ldrb	r3, [r7, #13]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00d      	beq.n	8008c7a <USER_SPI_initialize+0x1a2>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_4);	/* Set fast clock */
 8008c5e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8008c62:	480c      	ldr	r0, [pc, #48]	@ (8008c94 <USER_SPI_initialize+0x1bc>)
 8008c64:	f7ff fd87 	bl	8008776 <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008c68:	4b09      	ldr	r3, [pc, #36]	@ (8008c90 <USER_SPI_initialize+0x1b8>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	f023 0301 	bic.w	r3, r3, #1
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	4b06      	ldr	r3, [pc, #24]	@ (8008c90 <USER_SPI_initialize+0x1b8>)
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	e002      	b.n	8008c80 <USER_SPI_initialize+0x1a8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008c7a:	4b05      	ldr	r3, [pc, #20]	@ (8008c90 <USER_SPI_initialize+0x1b8>)
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008c80:	4b03      	ldr	r3, [pc, #12]	@ (8008c90 <USER_SPI_initialize+0x1b8>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	b2db      	uxtb	r3, r3
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd90      	pop	{r4, r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	24000028 	.word	0x24000028
 8008c94:	240001a4 	.word	0x240001a4
 8008c98:	24000288 	.word	0x24000288

08008c9c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <USER_SPI_status+0x14>
 8008cac:	2301      	movs	r3, #1
 8008cae:	e002      	b.n	8008cb6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008cb0:	4b04      	ldr	r3, [pc, #16]	@ (8008cc4 <USER_SPI_status+0x28>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	b2db      	uxtb	r3, r3
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	24000028 	.word	0x24000028

08008cc8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	607a      	str	r2, [r7, #4]
 8008cd2:	603b      	str	r3, [r7, #0]
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <USER_SPI_read+0x1c>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <USER_SPI_read+0x20>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	e04d      	b.n	8008d84 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008ce8:	4b28      	ldr	r3, [pc, #160]	@ (8008d8c <USER_SPI_read+0xc4>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <USER_SPI_read+0x32>
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e044      	b.n	8008d84 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008cfa:	4b25      	ldr	r3, [pc, #148]	@ (8008d90 <USER_SPI_read+0xc8>)
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d102      	bne.n	8008d0c <USER_SPI_read+0x44>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	025b      	lsls	r3, r3, #9
 8008d0a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d111      	bne.n	8008d36 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	2011      	movs	r0, #17
 8008d16:	f7ff fe70 	bl	80089fa <send_cmd>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d129      	bne.n	8008d74 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008d20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d24:	68b8      	ldr	r0, [r7, #8]
 8008d26:	f7ff fe0d 	bl	8008944 <rcvr_datablock>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d021      	beq.n	8008d74 <USER_SPI_read+0xac>
			count = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	e01e      	b.n	8008d74 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	2012      	movs	r0, #18
 8008d3a:	f7ff fe5e 	bl	80089fa <send_cmd>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d117      	bne.n	8008d74 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008d44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d48:	68b8      	ldr	r0, [r7, #8]
 8008d4a:	f7ff fdfb 	bl	8008944 <rcvr_datablock>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00a      	beq.n	8008d6a <USER_SPI_read+0xa2>
				buff += 512;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008d5a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	603b      	str	r3, [r7, #0]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1ed      	bne.n	8008d44 <USER_SPI_read+0x7c>
 8008d68:	e000      	b.n	8008d6c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8008d6a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	200c      	movs	r0, #12
 8008d70:	f7ff fe43 	bl	80089fa <send_cmd>
		}
	}
	despiselect();
 8008d74:	f7ff fdba 	bl	80088ec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	bf14      	ite	ne
 8008d7e:	2301      	movne	r3, #1
 8008d80:	2300      	moveq	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	24000028 	.word	0x24000028
 8008d90:	24000288 	.word	0x24000288

08008d94 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	4603      	mov	r3, r0
 8008da2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d102      	bne.n	8008db0 <USER_SPI_write+0x1c>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <USER_SPI_write+0x20>
 8008db0:	2304      	movs	r3, #4
 8008db2:	e063      	b.n	8008e7c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008db4:	4b33      	ldr	r3, [pc, #204]	@ (8008e84 <USER_SPI_write+0xf0>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <USER_SPI_write+0x32>
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e05a      	b.n	8008e7c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8008e84 <USER_SPI_write+0xf0>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	f003 0304 	and.w	r3, r3, #4
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <USER_SPI_write+0x44>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e051      	b.n	8008e7c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8008e88 <USER_SPI_write+0xf4>)
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 0308 	and.w	r3, r3, #8
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d102      	bne.n	8008dea <USER_SPI_write+0x56>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	025b      	lsls	r3, r3, #9
 8008de8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d110      	bne.n	8008e12 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008df0:	6879      	ldr	r1, [r7, #4]
 8008df2:	2018      	movs	r0, #24
 8008df4:	f7ff fe01 	bl	80089fa <send_cmd>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d136      	bne.n	8008e6c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008dfe:	21fe      	movs	r1, #254	@ 0xfe
 8008e00:	68b8      	ldr	r0, [r7, #8]
 8008e02:	f7ff fdc8 	bl	8008996 <xmit_datablock>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d02f      	beq.n	8008e6c <USER_SPI_write+0xd8>
			count = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	e02c      	b.n	8008e6c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8008e12:	4b1d      	ldr	r3, [pc, #116]	@ (8008e88 <USER_SPI_write+0xf4>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 0306 	and.w	r3, r3, #6
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <USER_SPI_write+0x92>
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	2097      	movs	r0, #151	@ 0x97
 8008e22:	f7ff fdea 	bl	80089fa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	2019      	movs	r0, #25
 8008e2a:	f7ff fde6 	bl	80089fa <send_cmd>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d11b      	bne.n	8008e6c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8008e34:	21fc      	movs	r1, #252	@ 0xfc
 8008e36:	68b8      	ldr	r0, [r7, #8]
 8008e38:	f7ff fdad 	bl	8008996 <xmit_datablock>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <USER_SPI_write+0xc4>
				buff += 512;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008e48:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1ee      	bne.n	8008e34 <USER_SPI_write+0xa0>
 8008e56:	e000      	b.n	8008e5a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008e58:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008e5a:	21fd      	movs	r1, #253	@ 0xfd
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f7ff fd9a 	bl	8008996 <xmit_datablock>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <USER_SPI_write+0xd8>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008e6c:	f7ff fd3e 	bl	80088ec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf14      	ite	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	2300      	moveq	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	24000028 	.word	0x24000028
 8008e88:	24000288 	.word	0x24000288

08008e8c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08c      	sub	sp, #48	@ 0x30
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	603a      	str	r2, [r7, #0]
 8008e96:	71fb      	strb	r3, [r7, #7]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008e9c:	79fb      	ldrb	r3, [r7, #7]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <USER_SPI_ioctl+0x1a>
 8008ea2:	2304      	movs	r3, #4
 8008ea4:	e15a      	b.n	800915c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008ea6:	4baf      	ldr	r3, [pc, #700]	@ (8009164 <USER_SPI_ioctl+0x2d8>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <USER_SPI_ioctl+0x2c>
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e151      	b.n	800915c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8008ebe:	79bb      	ldrb	r3, [r7, #6]
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	f200 8136 	bhi.w	8009132 <USER_SPI_ioctl+0x2a6>
 8008ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <USER_SPI_ioctl+0x40>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008ee1 	.word	0x08008ee1
 8008ed0:	08008ef5 	.word	0x08008ef5
 8008ed4:	08009133 	.word	0x08009133
 8008ed8:	08008fa1 	.word	0x08008fa1
 8008edc:	08009097 	.word	0x08009097
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008ee0:	f7ff fd14 	bl	800890c <spiselect>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 8127 	beq.w	800913a <USER_SPI_ioctl+0x2ae>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008ef2:	e122      	b.n	800913a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	2009      	movs	r0, #9
 8008ef8:	f7ff fd7f 	bl	80089fa <send_cmd>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f040 811d 	bne.w	800913e <USER_SPI_ioctl+0x2b2>
 8008f04:	f107 030c 	add.w	r3, r7, #12
 8008f08:	2110      	movs	r1, #16
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff fd1a 	bl	8008944 <rcvr_datablock>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8113 	beq.w	800913e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008f18:	7b3b      	ldrb	r3, [r7, #12]
 8008f1a:	099b      	lsrs	r3, r3, #6
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d111      	bne.n	8008f46 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8008f22:	7d7b      	ldrb	r3, [r7, #21]
 8008f24:	461a      	mov	r2, r3
 8008f26:	7d3b      	ldrb	r3, [r7, #20]
 8008f28:	021b      	lsls	r3, r3, #8
 8008f2a:	4413      	add	r3, r2
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	7cfb      	ldrb	r3, [r7, #19]
 8008f30:	041b      	lsls	r3, r3, #16
 8008f32:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8008f36:	4413      	add	r3, r2
 8008f38:	3301      	adds	r3, #1
 8008f3a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	029a      	lsls	r2, r3, #10
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	e028      	b.n	8008f98 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008f46:	7c7b      	ldrb	r3, [r7, #17]
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	7dbb      	ldrb	r3, [r7, #22]
 8008f50:	09db      	lsrs	r3, r3, #7
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	4413      	add	r3, r2
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	7d7b      	ldrb	r3, [r7, #21]
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	f003 0306 	and.w	r3, r3, #6
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	4413      	add	r3, r2
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	3302      	adds	r3, #2
 8008f6a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8008f6e:	7d3b      	ldrb	r3, [r7, #20]
 8008f70:	099b      	lsrs	r3, r3, #6
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	461a      	mov	r2, r3
 8008f76:	7cfb      	ldrb	r3, [r7, #19]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	441a      	add	r2, r3
 8008f7c:	7cbb      	ldrb	r3, [r7, #18]
 8008f7e:	029b      	lsls	r3, r3, #10
 8008f80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f84:	4413      	add	r3, r2
 8008f86:	3301      	adds	r3, #1
 8008f88:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008f8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008f8e:	3b09      	subs	r3, #9
 8008f90:	69fa      	ldr	r2, [r7, #28]
 8008f92:	409a      	lsls	r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008f9e:	e0ce      	b.n	800913e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008fa0:	4b71      	ldr	r3, [pc, #452]	@ (8009168 <USER_SPI_ioctl+0x2dc>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d031      	beq.n	8009010 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008fac:	2100      	movs	r1, #0
 8008fae:	208d      	movs	r0, #141	@ 0x8d
 8008fb0:	f7ff fd23 	bl	80089fa <send_cmd>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f040 80c3 	bne.w	8009142 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008fbc:	20ff      	movs	r0, #255	@ 0xff
 8008fbe:	f7ff fc2b 	bl	8008818 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008fc2:	f107 030c 	add.w	r3, r7, #12
 8008fc6:	2110      	movs	r1, #16
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fcbb 	bl	8008944 <rcvr_datablock>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 80b6 	beq.w	8009142 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008fd6:	2330      	movs	r3, #48	@ 0x30
 8008fd8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008fdc:	e007      	b.n	8008fee <USER_SPI_ioctl+0x162>
 8008fde:	20ff      	movs	r0, #255	@ 0xff
 8008fe0:	f7ff fc1a 	bl	8008818 <xchg_spi>
 8008fe4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008fee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1f3      	bne.n	8008fde <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008ff6:	7dbb      	ldrb	r3, [r7, #22]
 8008ff8:	091b      	lsrs	r3, r3, #4
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	2310      	movs	r3, #16
 8009000:	fa03 f202 	lsl.w	r2, r3, r2
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800900e:	e098      	b.n	8009142 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009010:	2100      	movs	r1, #0
 8009012:	2009      	movs	r0, #9
 8009014:	f7ff fcf1 	bl	80089fa <send_cmd>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	f040 8091 	bne.w	8009142 <USER_SPI_ioctl+0x2b6>
 8009020:	f107 030c 	add.w	r3, r7, #12
 8009024:	2110      	movs	r1, #16
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff fc8c 	bl	8008944 <rcvr_datablock>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 8087 	beq.w	8009142 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009034:	4b4c      	ldr	r3, [pc, #304]	@ (8009168 <USER_SPI_ioctl+0x2dc>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	f003 0302 	and.w	r3, r3, #2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d012      	beq.n	8009066 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009040:	7dbb      	ldrb	r3, [r7, #22]
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8009048:	7dfa      	ldrb	r2, [r7, #23]
 800904a:	09d2      	lsrs	r2, r2, #7
 800904c:	b2d2      	uxtb	r2, r2
 800904e:	4413      	add	r3, r2
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	7e7b      	ldrb	r3, [r7, #25]
 8009054:	099b      	lsrs	r3, r3, #6
 8009056:	b2db      	uxtb	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	fa02 f303 	lsl.w	r3, r2, r3
 800905e:	461a      	mov	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	e013      	b.n	800908e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009066:	7dbb      	ldrb	r3, [r7, #22]
 8009068:	109b      	asrs	r3, r3, #2
 800906a:	b29b      	uxth	r3, r3
 800906c:	f003 031f 	and.w	r3, r3, #31
 8009070:	3301      	adds	r3, #1
 8009072:	7dfa      	ldrb	r2, [r7, #23]
 8009074:	00d2      	lsls	r2, r2, #3
 8009076:	f002 0218 	and.w	r2, r2, #24
 800907a:	7df9      	ldrb	r1, [r7, #23]
 800907c:	0949      	lsrs	r1, r1, #5
 800907e:	b2c9      	uxtb	r1, r1
 8009080:	440a      	add	r2, r1
 8009082:	3201      	adds	r2, #1
 8009084:	fb02 f303 	mul.w	r3, r2, r3
 8009088:	461a      	mov	r2, r3
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009094:	e055      	b.n	8009142 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009096:	4b34      	ldr	r3, [pc, #208]	@ (8009168 <USER_SPI_ioctl+0x2dc>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	f003 0306 	and.w	r3, r3, #6
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d051      	beq.n	8009146 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80090a2:	f107 020c 	add.w	r2, r7, #12
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	210b      	movs	r1, #11
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff feee 	bl	8008e8c <USER_SPI_ioctl>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d149      	bne.n	800914a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80090b6:	7b3b      	ldrb	r3, [r7, #12]
 80090b8:	099b      	lsrs	r3, r3, #6
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <USER_SPI_ioctl+0x23e>
 80090c0:	7dbb      	ldrb	r3, [r7, #22]
 80090c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d041      	beq.n	800914e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	623b      	str	r3, [r7, #32]
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80090da:	4b23      	ldr	r3, [pc, #140]	@ (8009168 <USER_SPI_ioctl+0x2dc>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	f003 0308 	and.w	r3, r3, #8
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80090e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e8:	025b      	lsls	r3, r3, #9
 80090ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ee:	025b      	lsls	r3, r3, #9
 80090f0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80090f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090f4:	2020      	movs	r0, #32
 80090f6:	f7ff fc80 	bl	80089fa <send_cmd>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d128      	bne.n	8009152 <USER_SPI_ioctl+0x2c6>
 8009100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009102:	2021      	movs	r0, #33	@ 0x21
 8009104:	f7ff fc79 	bl	80089fa <send_cmd>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d121      	bne.n	8009152 <USER_SPI_ioctl+0x2c6>
 800910e:	2100      	movs	r1, #0
 8009110:	2026      	movs	r0, #38	@ 0x26
 8009112:	f7ff fc72 	bl	80089fa <send_cmd>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d11a      	bne.n	8009152 <USER_SPI_ioctl+0x2c6>
 800911c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009120:	f7ff fbc0 	bl	80088a4 <wait_ready>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d013      	beq.n	8009152 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800912a:	2300      	movs	r3, #0
 800912c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009130:	e00f      	b.n	8009152 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009132:	2304      	movs	r3, #4
 8009134:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009138:	e00c      	b.n	8009154 <USER_SPI_ioctl+0x2c8>
		break;
 800913a:	bf00      	nop
 800913c:	e00a      	b.n	8009154 <USER_SPI_ioctl+0x2c8>
		break;
 800913e:	bf00      	nop
 8009140:	e008      	b.n	8009154 <USER_SPI_ioctl+0x2c8>
		break;
 8009142:	bf00      	nop
 8009144:	e006      	b.n	8009154 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009146:	bf00      	nop
 8009148:	e004      	b.n	8009154 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800914a:	bf00      	nop
 800914c:	e002      	b.n	8009154 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800914e:	bf00      	nop
 8009150:	e000      	b.n	8009154 <USER_SPI_ioctl+0x2c8>
		break;
 8009152:	bf00      	nop
	}

	despiselect();
 8009154:	f7ff fbca 	bl	80088ec <despiselect>

	return res;
 8009158:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800915c:	4618      	mov	r0, r3
 800915e:	3730      	adds	r7, #48	@ 0x30
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	24000028 	.word	0x24000028
 8009168:	24000288 	.word	0x24000288

0800916c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800916c:	b480      	push	{r7}
 800916e:	b087      	sub	sp, #28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800917a:	2301      	movs	r3, #1
 800917c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009182:	4b1f      	ldr	r3, [pc, #124]	@ (8009200 <FATFS_LinkDriverEx+0x94>)
 8009184:	7a5b      	ldrb	r3, [r3, #9]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	d131      	bne.n	80091f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800918c:	4b1c      	ldr	r3, [pc, #112]	@ (8009200 <FATFS_LinkDriverEx+0x94>)
 800918e:	7a5b      	ldrb	r3, [r3, #9]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	461a      	mov	r2, r3
 8009194:	4b1a      	ldr	r3, [pc, #104]	@ (8009200 <FATFS_LinkDriverEx+0x94>)
 8009196:	2100      	movs	r1, #0
 8009198:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800919a:	4b19      	ldr	r3, [pc, #100]	@ (8009200 <FATFS_LinkDriverEx+0x94>)
 800919c:	7a5b      	ldrb	r3, [r3, #9]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	4a17      	ldr	r2, [pc, #92]	@ (8009200 <FATFS_LinkDriverEx+0x94>)
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80091aa:	4b15      	ldr	r3, [pc, #84]	@ (8009200 <FATFS_LinkDriverEx+0x94>)
 80091ac:	7a5b      	ldrb	r3, [r3, #9]
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	461a      	mov	r2, r3
 80091b2:	4b13      	ldr	r3, [pc, #76]	@ (8009200 <FATFS_LinkDriverEx+0x94>)
 80091b4:	4413      	add	r3, r2
 80091b6:	79fa      	ldrb	r2, [r7, #7]
 80091b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80091ba:	4b11      	ldr	r3, [pc, #68]	@ (8009200 <FATFS_LinkDriverEx+0x94>)
 80091bc:	7a5b      	ldrb	r3, [r3, #9]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	b2d1      	uxtb	r1, r2
 80091c4:	4a0e      	ldr	r2, [pc, #56]	@ (8009200 <FATFS_LinkDriverEx+0x94>)
 80091c6:	7251      	strb	r1, [r2, #9]
 80091c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80091ca:	7dbb      	ldrb	r3, [r7, #22]
 80091cc:	3330      	adds	r3, #48	@ 0x30
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	3301      	adds	r3, #1
 80091d8:	223a      	movs	r2, #58	@ 0x3a
 80091da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	3302      	adds	r3, #2
 80091e0:	222f      	movs	r2, #47	@ 0x2f
 80091e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	3303      	adds	r3, #3
 80091e8:	2200      	movs	r2, #0
 80091ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	24000294 	.word	0x24000294

08009204 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800920e:	2200      	movs	r2, #0
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7ff ffaa 	bl	800916c <FATFS_LinkDriverEx>
 8009218:	4603      	mov	r3, r0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <srand>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4b10      	ldr	r3, [pc, #64]	@ (8009268 <srand+0x44>)
 8009228:	681d      	ldr	r5, [r3, #0]
 800922a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800922c:	4604      	mov	r4, r0
 800922e:	b9b3      	cbnz	r3, 800925e <srand+0x3a>
 8009230:	2018      	movs	r0, #24
 8009232:	f000 fa7b 	bl	800972c <malloc>
 8009236:	4602      	mov	r2, r0
 8009238:	6328      	str	r0, [r5, #48]	@ 0x30
 800923a:	b920      	cbnz	r0, 8009246 <srand+0x22>
 800923c:	4b0b      	ldr	r3, [pc, #44]	@ (800926c <srand+0x48>)
 800923e:	480c      	ldr	r0, [pc, #48]	@ (8009270 <srand+0x4c>)
 8009240:	2146      	movs	r1, #70	@ 0x46
 8009242:	f000 fa0b 	bl	800965c <__assert_func>
 8009246:	490b      	ldr	r1, [pc, #44]	@ (8009274 <srand+0x50>)
 8009248:	4b0b      	ldr	r3, [pc, #44]	@ (8009278 <srand+0x54>)
 800924a:	e9c0 1300 	strd	r1, r3, [r0]
 800924e:	4b0b      	ldr	r3, [pc, #44]	@ (800927c <srand+0x58>)
 8009250:	6083      	str	r3, [r0, #8]
 8009252:	230b      	movs	r3, #11
 8009254:	8183      	strh	r3, [r0, #12]
 8009256:	2100      	movs	r1, #0
 8009258:	2001      	movs	r0, #1
 800925a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800925e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009260:	2200      	movs	r2, #0
 8009262:	611c      	str	r4, [r3, #16]
 8009264:	615a      	str	r2, [r3, #20]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	24000038 	.word	0x24000038
 800926c:	0800b348 	.word	0x0800b348
 8009270:	0800b35f 	.word	0x0800b35f
 8009274:	abcd330e 	.word	0xabcd330e
 8009278:	e66d1234 	.word	0xe66d1234
 800927c:	0005deec 	.word	0x0005deec

08009280 <rand>:
 8009280:	4b16      	ldr	r3, [pc, #88]	@ (80092dc <rand+0x5c>)
 8009282:	b510      	push	{r4, lr}
 8009284:	681c      	ldr	r4, [r3, #0]
 8009286:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009288:	b9b3      	cbnz	r3, 80092b8 <rand+0x38>
 800928a:	2018      	movs	r0, #24
 800928c:	f000 fa4e 	bl	800972c <malloc>
 8009290:	4602      	mov	r2, r0
 8009292:	6320      	str	r0, [r4, #48]	@ 0x30
 8009294:	b920      	cbnz	r0, 80092a0 <rand+0x20>
 8009296:	4b12      	ldr	r3, [pc, #72]	@ (80092e0 <rand+0x60>)
 8009298:	4812      	ldr	r0, [pc, #72]	@ (80092e4 <rand+0x64>)
 800929a:	2152      	movs	r1, #82	@ 0x52
 800929c:	f000 f9de 	bl	800965c <__assert_func>
 80092a0:	4911      	ldr	r1, [pc, #68]	@ (80092e8 <rand+0x68>)
 80092a2:	4b12      	ldr	r3, [pc, #72]	@ (80092ec <rand+0x6c>)
 80092a4:	e9c0 1300 	strd	r1, r3, [r0]
 80092a8:	4b11      	ldr	r3, [pc, #68]	@ (80092f0 <rand+0x70>)
 80092aa:	6083      	str	r3, [r0, #8]
 80092ac:	230b      	movs	r3, #11
 80092ae:	8183      	strh	r3, [r0, #12]
 80092b0:	2100      	movs	r1, #0
 80092b2:	2001      	movs	r0, #1
 80092b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80092b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80092ba:	480e      	ldr	r0, [pc, #56]	@ (80092f4 <rand+0x74>)
 80092bc:	690b      	ldr	r3, [r1, #16]
 80092be:	694c      	ldr	r4, [r1, #20]
 80092c0:	4a0d      	ldr	r2, [pc, #52]	@ (80092f8 <rand+0x78>)
 80092c2:	4358      	muls	r0, r3
 80092c4:	fb02 0004 	mla	r0, r2, r4, r0
 80092c8:	fba3 3202 	umull	r3, r2, r3, r2
 80092cc:	3301      	adds	r3, #1
 80092ce:	eb40 0002 	adc.w	r0, r0, r2
 80092d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80092d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80092da:	bd10      	pop	{r4, pc}
 80092dc:	24000038 	.word	0x24000038
 80092e0:	0800b348 	.word	0x0800b348
 80092e4:	0800b35f 	.word	0x0800b35f
 80092e8:	abcd330e 	.word	0xabcd330e
 80092ec:	e66d1234 	.word	0xe66d1234
 80092f0:	0005deec 	.word	0x0005deec
 80092f4:	5851f42d 	.word	0x5851f42d
 80092f8:	4c957f2d 	.word	0x4c957f2d

080092fc <std>:
 80092fc:	2300      	movs	r3, #0
 80092fe:	b510      	push	{r4, lr}
 8009300:	4604      	mov	r4, r0
 8009302:	e9c0 3300 	strd	r3, r3, [r0]
 8009306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800930a:	6083      	str	r3, [r0, #8]
 800930c:	8181      	strh	r1, [r0, #12]
 800930e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009310:	81c2      	strh	r2, [r0, #14]
 8009312:	6183      	str	r3, [r0, #24]
 8009314:	4619      	mov	r1, r3
 8009316:	2208      	movs	r2, #8
 8009318:	305c      	adds	r0, #92	@ 0x5c
 800931a:	f000 f914 	bl	8009546 <memset>
 800931e:	4b0d      	ldr	r3, [pc, #52]	@ (8009354 <std+0x58>)
 8009320:	6263      	str	r3, [r4, #36]	@ 0x24
 8009322:	4b0d      	ldr	r3, [pc, #52]	@ (8009358 <std+0x5c>)
 8009324:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009326:	4b0d      	ldr	r3, [pc, #52]	@ (800935c <std+0x60>)
 8009328:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800932a:	4b0d      	ldr	r3, [pc, #52]	@ (8009360 <std+0x64>)
 800932c:	6323      	str	r3, [r4, #48]	@ 0x30
 800932e:	4b0d      	ldr	r3, [pc, #52]	@ (8009364 <std+0x68>)
 8009330:	6224      	str	r4, [r4, #32]
 8009332:	429c      	cmp	r4, r3
 8009334:	d006      	beq.n	8009344 <std+0x48>
 8009336:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800933a:	4294      	cmp	r4, r2
 800933c:	d002      	beq.n	8009344 <std+0x48>
 800933e:	33d0      	adds	r3, #208	@ 0xd0
 8009340:	429c      	cmp	r4, r3
 8009342:	d105      	bne.n	8009350 <std+0x54>
 8009344:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800934c:	f000 b974 	b.w	8009638 <__retarget_lock_init_recursive>
 8009350:	bd10      	pop	{r4, pc}
 8009352:	bf00      	nop
 8009354:	080094c1 	.word	0x080094c1
 8009358:	080094e3 	.word	0x080094e3
 800935c:	0800951b 	.word	0x0800951b
 8009360:	0800953f 	.word	0x0800953f
 8009364:	240002a0 	.word	0x240002a0

08009368 <stdio_exit_handler>:
 8009368:	4a02      	ldr	r2, [pc, #8]	@ (8009374 <stdio_exit_handler+0xc>)
 800936a:	4903      	ldr	r1, [pc, #12]	@ (8009378 <stdio_exit_handler+0x10>)
 800936c:	4803      	ldr	r0, [pc, #12]	@ (800937c <stdio_exit_handler+0x14>)
 800936e:	f000 b869 	b.w	8009444 <_fwalk_sglue>
 8009372:	bf00      	nop
 8009374:	2400002c 	.word	0x2400002c
 8009378:	08009f6d 	.word	0x08009f6d
 800937c:	2400003c 	.word	0x2400003c

08009380 <cleanup_stdio>:
 8009380:	6841      	ldr	r1, [r0, #4]
 8009382:	4b0c      	ldr	r3, [pc, #48]	@ (80093b4 <cleanup_stdio+0x34>)
 8009384:	4299      	cmp	r1, r3
 8009386:	b510      	push	{r4, lr}
 8009388:	4604      	mov	r4, r0
 800938a:	d001      	beq.n	8009390 <cleanup_stdio+0x10>
 800938c:	f000 fdee 	bl	8009f6c <_fflush_r>
 8009390:	68a1      	ldr	r1, [r4, #8]
 8009392:	4b09      	ldr	r3, [pc, #36]	@ (80093b8 <cleanup_stdio+0x38>)
 8009394:	4299      	cmp	r1, r3
 8009396:	d002      	beq.n	800939e <cleanup_stdio+0x1e>
 8009398:	4620      	mov	r0, r4
 800939a:	f000 fde7 	bl	8009f6c <_fflush_r>
 800939e:	68e1      	ldr	r1, [r4, #12]
 80093a0:	4b06      	ldr	r3, [pc, #24]	@ (80093bc <cleanup_stdio+0x3c>)
 80093a2:	4299      	cmp	r1, r3
 80093a4:	d004      	beq.n	80093b0 <cleanup_stdio+0x30>
 80093a6:	4620      	mov	r0, r4
 80093a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ac:	f000 bdde 	b.w	8009f6c <_fflush_r>
 80093b0:	bd10      	pop	{r4, pc}
 80093b2:	bf00      	nop
 80093b4:	240002a0 	.word	0x240002a0
 80093b8:	24000308 	.word	0x24000308
 80093bc:	24000370 	.word	0x24000370

080093c0 <global_stdio_init.part.0>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	4b0b      	ldr	r3, [pc, #44]	@ (80093f0 <global_stdio_init.part.0+0x30>)
 80093c4:	4c0b      	ldr	r4, [pc, #44]	@ (80093f4 <global_stdio_init.part.0+0x34>)
 80093c6:	4a0c      	ldr	r2, [pc, #48]	@ (80093f8 <global_stdio_init.part.0+0x38>)
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	4620      	mov	r0, r4
 80093cc:	2200      	movs	r2, #0
 80093ce:	2104      	movs	r1, #4
 80093d0:	f7ff ff94 	bl	80092fc <std>
 80093d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80093d8:	2201      	movs	r2, #1
 80093da:	2109      	movs	r1, #9
 80093dc:	f7ff ff8e 	bl	80092fc <std>
 80093e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80093e4:	2202      	movs	r2, #2
 80093e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ea:	2112      	movs	r1, #18
 80093ec:	f7ff bf86 	b.w	80092fc <std>
 80093f0:	240003d8 	.word	0x240003d8
 80093f4:	240002a0 	.word	0x240002a0
 80093f8:	08009369 	.word	0x08009369

080093fc <__sfp_lock_acquire>:
 80093fc:	4801      	ldr	r0, [pc, #4]	@ (8009404 <__sfp_lock_acquire+0x8>)
 80093fe:	f000 b91c 	b.w	800963a <__retarget_lock_acquire_recursive>
 8009402:	bf00      	nop
 8009404:	240003e1 	.word	0x240003e1

08009408 <__sfp_lock_release>:
 8009408:	4801      	ldr	r0, [pc, #4]	@ (8009410 <__sfp_lock_release+0x8>)
 800940a:	f000 b917 	b.w	800963c <__retarget_lock_release_recursive>
 800940e:	bf00      	nop
 8009410:	240003e1 	.word	0x240003e1

08009414 <__sinit>:
 8009414:	b510      	push	{r4, lr}
 8009416:	4604      	mov	r4, r0
 8009418:	f7ff fff0 	bl	80093fc <__sfp_lock_acquire>
 800941c:	6a23      	ldr	r3, [r4, #32]
 800941e:	b11b      	cbz	r3, 8009428 <__sinit+0x14>
 8009420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009424:	f7ff bff0 	b.w	8009408 <__sfp_lock_release>
 8009428:	4b04      	ldr	r3, [pc, #16]	@ (800943c <__sinit+0x28>)
 800942a:	6223      	str	r3, [r4, #32]
 800942c:	4b04      	ldr	r3, [pc, #16]	@ (8009440 <__sinit+0x2c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f5      	bne.n	8009420 <__sinit+0xc>
 8009434:	f7ff ffc4 	bl	80093c0 <global_stdio_init.part.0>
 8009438:	e7f2      	b.n	8009420 <__sinit+0xc>
 800943a:	bf00      	nop
 800943c:	08009381 	.word	0x08009381
 8009440:	240003d8 	.word	0x240003d8

08009444 <_fwalk_sglue>:
 8009444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009448:	4607      	mov	r7, r0
 800944a:	4688      	mov	r8, r1
 800944c:	4614      	mov	r4, r2
 800944e:	2600      	movs	r6, #0
 8009450:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009454:	f1b9 0901 	subs.w	r9, r9, #1
 8009458:	d505      	bpl.n	8009466 <_fwalk_sglue+0x22>
 800945a:	6824      	ldr	r4, [r4, #0]
 800945c:	2c00      	cmp	r4, #0
 800945e:	d1f7      	bne.n	8009450 <_fwalk_sglue+0xc>
 8009460:	4630      	mov	r0, r6
 8009462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d907      	bls.n	800947c <_fwalk_sglue+0x38>
 800946c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009470:	3301      	adds	r3, #1
 8009472:	d003      	beq.n	800947c <_fwalk_sglue+0x38>
 8009474:	4629      	mov	r1, r5
 8009476:	4638      	mov	r0, r7
 8009478:	47c0      	blx	r8
 800947a:	4306      	orrs	r6, r0
 800947c:	3568      	adds	r5, #104	@ 0x68
 800947e:	e7e9      	b.n	8009454 <_fwalk_sglue+0x10>

08009480 <siprintf>:
 8009480:	b40e      	push	{r1, r2, r3}
 8009482:	b500      	push	{lr}
 8009484:	b09c      	sub	sp, #112	@ 0x70
 8009486:	ab1d      	add	r3, sp, #116	@ 0x74
 8009488:	9002      	str	r0, [sp, #8]
 800948a:	9006      	str	r0, [sp, #24]
 800948c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009490:	4809      	ldr	r0, [pc, #36]	@ (80094b8 <siprintf+0x38>)
 8009492:	9107      	str	r1, [sp, #28]
 8009494:	9104      	str	r1, [sp, #16]
 8009496:	4909      	ldr	r1, [pc, #36]	@ (80094bc <siprintf+0x3c>)
 8009498:	f853 2b04 	ldr.w	r2, [r3], #4
 800949c:	9105      	str	r1, [sp, #20]
 800949e:	6800      	ldr	r0, [r0, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	a902      	add	r1, sp, #8
 80094a4:	f000 fa54 	bl	8009950 <_svfiprintf_r>
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	b01c      	add	sp, #112	@ 0x70
 80094b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b4:	b003      	add	sp, #12
 80094b6:	4770      	bx	lr
 80094b8:	24000038 	.word	0x24000038
 80094bc:	ffff0208 	.word	0xffff0208

080094c0 <__sread>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	460c      	mov	r4, r1
 80094c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c8:	f000 f868 	bl	800959c <_read_r>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	bfab      	itete	ge
 80094d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094d2:	89a3      	ldrhlt	r3, [r4, #12]
 80094d4:	181b      	addge	r3, r3, r0
 80094d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094da:	bfac      	ite	ge
 80094dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094de:	81a3      	strhlt	r3, [r4, #12]
 80094e0:	bd10      	pop	{r4, pc}

080094e2 <__swrite>:
 80094e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	461f      	mov	r7, r3
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	05db      	lsls	r3, r3, #23
 80094ec:	4605      	mov	r5, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	4616      	mov	r6, r2
 80094f2:	d505      	bpl.n	8009500 <__swrite+0x1e>
 80094f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f8:	2302      	movs	r3, #2
 80094fa:	2200      	movs	r2, #0
 80094fc:	f000 f83c 	bl	8009578 <_lseek_r>
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	4632      	mov	r2, r6
 800950e:	463b      	mov	r3, r7
 8009510:	4628      	mov	r0, r5
 8009512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	f000 b853 	b.w	80095c0 <_write_r>

0800951a <__sseek>:
 800951a:	b510      	push	{r4, lr}
 800951c:	460c      	mov	r4, r1
 800951e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009522:	f000 f829 	bl	8009578 <_lseek_r>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	bf15      	itete	ne
 800952c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800952e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009532:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009536:	81a3      	strheq	r3, [r4, #12]
 8009538:	bf18      	it	ne
 800953a:	81a3      	strhne	r3, [r4, #12]
 800953c:	bd10      	pop	{r4, pc}

0800953e <__sclose>:
 800953e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009542:	f000 b809 	b.w	8009558 <_close_r>

08009546 <memset>:
 8009546:	4402      	add	r2, r0
 8009548:	4603      	mov	r3, r0
 800954a:	4293      	cmp	r3, r2
 800954c:	d100      	bne.n	8009550 <memset+0xa>
 800954e:	4770      	bx	lr
 8009550:	f803 1b01 	strb.w	r1, [r3], #1
 8009554:	e7f9      	b.n	800954a <memset+0x4>
	...

08009558 <_close_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d06      	ldr	r5, [pc, #24]	@ (8009574 <_close_r+0x1c>)
 800955c:	2300      	movs	r3, #0
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	602b      	str	r3, [r5, #0]
 8009564:	f7f9 fb78 	bl	8002c58 <_close>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_close_r+0x1a>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_close_r+0x1a>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	240003dc 	.word	0x240003dc

08009578 <_lseek_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d07      	ldr	r5, [pc, #28]	@ (8009598 <_lseek_r+0x20>)
 800957c:	4604      	mov	r4, r0
 800957e:	4608      	mov	r0, r1
 8009580:	4611      	mov	r1, r2
 8009582:	2200      	movs	r2, #0
 8009584:	602a      	str	r2, [r5, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	f7f9 fb8d 	bl	8002ca6 <_lseek>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_lseek_r+0x1e>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_lseek_r+0x1e>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	240003dc 	.word	0x240003dc

0800959c <_read_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d07      	ldr	r5, [pc, #28]	@ (80095bc <_read_r+0x20>)
 80095a0:	4604      	mov	r4, r0
 80095a2:	4608      	mov	r0, r1
 80095a4:	4611      	mov	r1, r2
 80095a6:	2200      	movs	r2, #0
 80095a8:	602a      	str	r2, [r5, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	f7f9 fb1b 	bl	8002be6 <_read>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_read_r+0x1e>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_read_r+0x1e>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	240003dc 	.word	0x240003dc

080095c0 <_write_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	@ (80095e0 <_write_r+0x20>)
 80095c4:	4604      	mov	r4, r0
 80095c6:	4608      	mov	r0, r1
 80095c8:	4611      	mov	r1, r2
 80095ca:	2200      	movs	r2, #0
 80095cc:	602a      	str	r2, [r5, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f7f9 fb26 	bl	8002c20 <_write>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_write_r+0x1e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_write_r+0x1e>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	240003dc 	.word	0x240003dc

080095e4 <__errno>:
 80095e4:	4b01      	ldr	r3, [pc, #4]	@ (80095ec <__errno+0x8>)
 80095e6:	6818      	ldr	r0, [r3, #0]
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	24000038 	.word	0x24000038

080095f0 <__libc_init_array>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	4d0d      	ldr	r5, [pc, #52]	@ (8009628 <__libc_init_array+0x38>)
 80095f4:	4c0d      	ldr	r4, [pc, #52]	@ (800962c <__libc_init_array+0x3c>)
 80095f6:	1b64      	subs	r4, r4, r5
 80095f8:	10a4      	asrs	r4, r4, #2
 80095fa:	2600      	movs	r6, #0
 80095fc:	42a6      	cmp	r6, r4
 80095fe:	d109      	bne.n	8009614 <__libc_init_array+0x24>
 8009600:	4d0b      	ldr	r5, [pc, #44]	@ (8009630 <__libc_init_array+0x40>)
 8009602:	4c0c      	ldr	r4, [pc, #48]	@ (8009634 <__libc_init_array+0x44>)
 8009604:	f001 fe08 	bl	800b218 <_init>
 8009608:	1b64      	subs	r4, r4, r5
 800960a:	10a4      	asrs	r4, r4, #2
 800960c:	2600      	movs	r6, #0
 800960e:	42a6      	cmp	r6, r4
 8009610:	d105      	bne.n	800961e <__libc_init_array+0x2e>
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	f855 3b04 	ldr.w	r3, [r5], #4
 8009618:	4798      	blx	r3
 800961a:	3601      	adds	r6, #1
 800961c:	e7ee      	b.n	80095fc <__libc_init_array+0xc>
 800961e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009622:	4798      	blx	r3
 8009624:	3601      	adds	r6, #1
 8009626:	e7f2      	b.n	800960e <__libc_init_array+0x1e>
 8009628:	0800b608 	.word	0x0800b608
 800962c:	0800b608 	.word	0x0800b608
 8009630:	0800b608 	.word	0x0800b608
 8009634:	0800b60c 	.word	0x0800b60c

08009638 <__retarget_lock_init_recursive>:
 8009638:	4770      	bx	lr

0800963a <__retarget_lock_acquire_recursive>:
 800963a:	4770      	bx	lr

0800963c <__retarget_lock_release_recursive>:
 800963c:	4770      	bx	lr

0800963e <memcpy>:
 800963e:	440a      	add	r2, r1
 8009640:	4291      	cmp	r1, r2
 8009642:	f100 33ff 	add.w	r3, r0, #4294967295
 8009646:	d100      	bne.n	800964a <memcpy+0xc>
 8009648:	4770      	bx	lr
 800964a:	b510      	push	{r4, lr}
 800964c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009650:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009654:	4291      	cmp	r1, r2
 8009656:	d1f9      	bne.n	800964c <memcpy+0xe>
 8009658:	bd10      	pop	{r4, pc}
	...

0800965c <__assert_func>:
 800965c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800965e:	4614      	mov	r4, r2
 8009660:	461a      	mov	r2, r3
 8009662:	4b09      	ldr	r3, [pc, #36]	@ (8009688 <__assert_func+0x2c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4605      	mov	r5, r0
 8009668:	68d8      	ldr	r0, [r3, #12]
 800966a:	b954      	cbnz	r4, 8009682 <__assert_func+0x26>
 800966c:	4b07      	ldr	r3, [pc, #28]	@ (800968c <__assert_func+0x30>)
 800966e:	461c      	mov	r4, r3
 8009670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009674:	9100      	str	r1, [sp, #0]
 8009676:	462b      	mov	r3, r5
 8009678:	4905      	ldr	r1, [pc, #20]	@ (8009690 <__assert_func+0x34>)
 800967a:	f000 fc9f 	bl	8009fbc <fiprintf>
 800967e:	f000 fcd9 	bl	800a034 <abort>
 8009682:	4b04      	ldr	r3, [pc, #16]	@ (8009694 <__assert_func+0x38>)
 8009684:	e7f4      	b.n	8009670 <__assert_func+0x14>
 8009686:	bf00      	nop
 8009688:	24000038 	.word	0x24000038
 800968c:	0800b3f2 	.word	0x0800b3f2
 8009690:	0800b3c4 	.word	0x0800b3c4
 8009694:	0800b3b7 	.word	0x0800b3b7

08009698 <_free_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4605      	mov	r5, r0
 800969c:	2900      	cmp	r1, #0
 800969e:	d041      	beq.n	8009724 <_free_r+0x8c>
 80096a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a4:	1f0c      	subs	r4, r1, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bfb8      	it	lt
 80096aa:	18e4      	addlt	r4, r4, r3
 80096ac:	f000 f8e8 	bl	8009880 <__malloc_lock>
 80096b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009728 <_free_r+0x90>)
 80096b2:	6813      	ldr	r3, [r2, #0]
 80096b4:	b933      	cbnz	r3, 80096c4 <_free_r+0x2c>
 80096b6:	6063      	str	r3, [r4, #4]
 80096b8:	6014      	str	r4, [r2, #0]
 80096ba:	4628      	mov	r0, r5
 80096bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096c0:	f000 b8e4 	b.w	800988c <__malloc_unlock>
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	d908      	bls.n	80096da <_free_r+0x42>
 80096c8:	6820      	ldr	r0, [r4, #0]
 80096ca:	1821      	adds	r1, r4, r0
 80096cc:	428b      	cmp	r3, r1
 80096ce:	bf01      	itttt	eq
 80096d0:	6819      	ldreq	r1, [r3, #0]
 80096d2:	685b      	ldreq	r3, [r3, #4]
 80096d4:	1809      	addeq	r1, r1, r0
 80096d6:	6021      	streq	r1, [r4, #0]
 80096d8:	e7ed      	b.n	80096b6 <_free_r+0x1e>
 80096da:	461a      	mov	r2, r3
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	b10b      	cbz	r3, 80096e4 <_free_r+0x4c>
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	d9fa      	bls.n	80096da <_free_r+0x42>
 80096e4:	6811      	ldr	r1, [r2, #0]
 80096e6:	1850      	adds	r0, r2, r1
 80096e8:	42a0      	cmp	r0, r4
 80096ea:	d10b      	bne.n	8009704 <_free_r+0x6c>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	4401      	add	r1, r0
 80096f0:	1850      	adds	r0, r2, r1
 80096f2:	4283      	cmp	r3, r0
 80096f4:	6011      	str	r1, [r2, #0]
 80096f6:	d1e0      	bne.n	80096ba <_free_r+0x22>
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	6053      	str	r3, [r2, #4]
 80096fe:	4408      	add	r0, r1
 8009700:	6010      	str	r0, [r2, #0]
 8009702:	e7da      	b.n	80096ba <_free_r+0x22>
 8009704:	d902      	bls.n	800970c <_free_r+0x74>
 8009706:	230c      	movs	r3, #12
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	e7d6      	b.n	80096ba <_free_r+0x22>
 800970c:	6820      	ldr	r0, [r4, #0]
 800970e:	1821      	adds	r1, r4, r0
 8009710:	428b      	cmp	r3, r1
 8009712:	bf04      	itt	eq
 8009714:	6819      	ldreq	r1, [r3, #0]
 8009716:	685b      	ldreq	r3, [r3, #4]
 8009718:	6063      	str	r3, [r4, #4]
 800971a:	bf04      	itt	eq
 800971c:	1809      	addeq	r1, r1, r0
 800971e:	6021      	streq	r1, [r4, #0]
 8009720:	6054      	str	r4, [r2, #4]
 8009722:	e7ca      	b.n	80096ba <_free_r+0x22>
 8009724:	bd38      	pop	{r3, r4, r5, pc}
 8009726:	bf00      	nop
 8009728:	240003e8 	.word	0x240003e8

0800972c <malloc>:
 800972c:	4b02      	ldr	r3, [pc, #8]	@ (8009738 <malloc+0xc>)
 800972e:	4601      	mov	r1, r0
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	f000 b825 	b.w	8009780 <_malloc_r>
 8009736:	bf00      	nop
 8009738:	24000038 	.word	0x24000038

0800973c <sbrk_aligned>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	4e0f      	ldr	r6, [pc, #60]	@ (800977c <sbrk_aligned+0x40>)
 8009740:	460c      	mov	r4, r1
 8009742:	6831      	ldr	r1, [r6, #0]
 8009744:	4605      	mov	r5, r0
 8009746:	b911      	cbnz	r1, 800974e <sbrk_aligned+0x12>
 8009748:	f000 fc64 	bl	800a014 <_sbrk_r>
 800974c:	6030      	str	r0, [r6, #0]
 800974e:	4621      	mov	r1, r4
 8009750:	4628      	mov	r0, r5
 8009752:	f000 fc5f 	bl	800a014 <_sbrk_r>
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	d103      	bne.n	8009762 <sbrk_aligned+0x26>
 800975a:	f04f 34ff 	mov.w	r4, #4294967295
 800975e:	4620      	mov	r0, r4
 8009760:	bd70      	pop	{r4, r5, r6, pc}
 8009762:	1cc4      	adds	r4, r0, #3
 8009764:	f024 0403 	bic.w	r4, r4, #3
 8009768:	42a0      	cmp	r0, r4
 800976a:	d0f8      	beq.n	800975e <sbrk_aligned+0x22>
 800976c:	1a21      	subs	r1, r4, r0
 800976e:	4628      	mov	r0, r5
 8009770:	f000 fc50 	bl	800a014 <_sbrk_r>
 8009774:	3001      	adds	r0, #1
 8009776:	d1f2      	bne.n	800975e <sbrk_aligned+0x22>
 8009778:	e7ef      	b.n	800975a <sbrk_aligned+0x1e>
 800977a:	bf00      	nop
 800977c:	240003e4 	.word	0x240003e4

08009780 <_malloc_r>:
 8009780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009784:	1ccd      	adds	r5, r1, #3
 8009786:	f025 0503 	bic.w	r5, r5, #3
 800978a:	3508      	adds	r5, #8
 800978c:	2d0c      	cmp	r5, #12
 800978e:	bf38      	it	cc
 8009790:	250c      	movcc	r5, #12
 8009792:	2d00      	cmp	r5, #0
 8009794:	4606      	mov	r6, r0
 8009796:	db01      	blt.n	800979c <_malloc_r+0x1c>
 8009798:	42a9      	cmp	r1, r5
 800979a:	d904      	bls.n	80097a6 <_malloc_r+0x26>
 800979c:	230c      	movs	r3, #12
 800979e:	6033      	str	r3, [r6, #0]
 80097a0:	2000      	movs	r0, #0
 80097a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800987c <_malloc_r+0xfc>
 80097aa:	f000 f869 	bl	8009880 <__malloc_lock>
 80097ae:	f8d8 3000 	ldr.w	r3, [r8]
 80097b2:	461c      	mov	r4, r3
 80097b4:	bb44      	cbnz	r4, 8009808 <_malloc_r+0x88>
 80097b6:	4629      	mov	r1, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	f7ff ffbf 	bl	800973c <sbrk_aligned>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	4604      	mov	r4, r0
 80097c2:	d158      	bne.n	8009876 <_malloc_r+0xf6>
 80097c4:	f8d8 4000 	ldr.w	r4, [r8]
 80097c8:	4627      	mov	r7, r4
 80097ca:	2f00      	cmp	r7, #0
 80097cc:	d143      	bne.n	8009856 <_malloc_r+0xd6>
 80097ce:	2c00      	cmp	r4, #0
 80097d0:	d04b      	beq.n	800986a <_malloc_r+0xea>
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	4639      	mov	r1, r7
 80097d6:	4630      	mov	r0, r6
 80097d8:	eb04 0903 	add.w	r9, r4, r3
 80097dc:	f000 fc1a 	bl	800a014 <_sbrk_r>
 80097e0:	4581      	cmp	r9, r0
 80097e2:	d142      	bne.n	800986a <_malloc_r+0xea>
 80097e4:	6821      	ldr	r1, [r4, #0]
 80097e6:	1a6d      	subs	r5, r5, r1
 80097e8:	4629      	mov	r1, r5
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff ffa6 	bl	800973c <sbrk_aligned>
 80097f0:	3001      	adds	r0, #1
 80097f2:	d03a      	beq.n	800986a <_malloc_r+0xea>
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	442b      	add	r3, r5
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	f8d8 3000 	ldr.w	r3, [r8]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	bb62      	cbnz	r2, 800985c <_malloc_r+0xdc>
 8009802:	f8c8 7000 	str.w	r7, [r8]
 8009806:	e00f      	b.n	8009828 <_malloc_r+0xa8>
 8009808:	6822      	ldr	r2, [r4, #0]
 800980a:	1b52      	subs	r2, r2, r5
 800980c:	d420      	bmi.n	8009850 <_malloc_r+0xd0>
 800980e:	2a0b      	cmp	r2, #11
 8009810:	d917      	bls.n	8009842 <_malloc_r+0xc2>
 8009812:	1961      	adds	r1, r4, r5
 8009814:	42a3      	cmp	r3, r4
 8009816:	6025      	str	r5, [r4, #0]
 8009818:	bf18      	it	ne
 800981a:	6059      	strne	r1, [r3, #4]
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	bf08      	it	eq
 8009820:	f8c8 1000 	streq.w	r1, [r8]
 8009824:	5162      	str	r2, [r4, r5]
 8009826:	604b      	str	r3, [r1, #4]
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f82f 	bl	800988c <__malloc_unlock>
 800982e:	f104 000b 	add.w	r0, r4, #11
 8009832:	1d23      	adds	r3, r4, #4
 8009834:	f020 0007 	bic.w	r0, r0, #7
 8009838:	1ac2      	subs	r2, r0, r3
 800983a:	bf1c      	itt	ne
 800983c:	1a1b      	subne	r3, r3, r0
 800983e:	50a3      	strne	r3, [r4, r2]
 8009840:	e7af      	b.n	80097a2 <_malloc_r+0x22>
 8009842:	6862      	ldr	r2, [r4, #4]
 8009844:	42a3      	cmp	r3, r4
 8009846:	bf0c      	ite	eq
 8009848:	f8c8 2000 	streq.w	r2, [r8]
 800984c:	605a      	strne	r2, [r3, #4]
 800984e:	e7eb      	b.n	8009828 <_malloc_r+0xa8>
 8009850:	4623      	mov	r3, r4
 8009852:	6864      	ldr	r4, [r4, #4]
 8009854:	e7ae      	b.n	80097b4 <_malloc_r+0x34>
 8009856:	463c      	mov	r4, r7
 8009858:	687f      	ldr	r7, [r7, #4]
 800985a:	e7b6      	b.n	80097ca <_malloc_r+0x4a>
 800985c:	461a      	mov	r2, r3
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	42a3      	cmp	r3, r4
 8009862:	d1fb      	bne.n	800985c <_malloc_r+0xdc>
 8009864:	2300      	movs	r3, #0
 8009866:	6053      	str	r3, [r2, #4]
 8009868:	e7de      	b.n	8009828 <_malloc_r+0xa8>
 800986a:	230c      	movs	r3, #12
 800986c:	6033      	str	r3, [r6, #0]
 800986e:	4630      	mov	r0, r6
 8009870:	f000 f80c 	bl	800988c <__malloc_unlock>
 8009874:	e794      	b.n	80097a0 <_malloc_r+0x20>
 8009876:	6005      	str	r5, [r0, #0]
 8009878:	e7d6      	b.n	8009828 <_malloc_r+0xa8>
 800987a:	bf00      	nop
 800987c:	240003e8 	.word	0x240003e8

08009880 <__malloc_lock>:
 8009880:	4801      	ldr	r0, [pc, #4]	@ (8009888 <__malloc_lock+0x8>)
 8009882:	f7ff beda 	b.w	800963a <__retarget_lock_acquire_recursive>
 8009886:	bf00      	nop
 8009888:	240003e0 	.word	0x240003e0

0800988c <__malloc_unlock>:
 800988c:	4801      	ldr	r0, [pc, #4]	@ (8009894 <__malloc_unlock+0x8>)
 800988e:	f7ff bed5 	b.w	800963c <__retarget_lock_release_recursive>
 8009892:	bf00      	nop
 8009894:	240003e0 	.word	0x240003e0

08009898 <__ssputs_r>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	688e      	ldr	r6, [r1, #8]
 800989e:	461f      	mov	r7, r3
 80098a0:	42be      	cmp	r6, r7
 80098a2:	680b      	ldr	r3, [r1, #0]
 80098a4:	4682      	mov	sl, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	4690      	mov	r8, r2
 80098aa:	d82d      	bhi.n	8009908 <__ssputs_r+0x70>
 80098ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098b4:	d026      	beq.n	8009904 <__ssputs_r+0x6c>
 80098b6:	6965      	ldr	r5, [r4, #20]
 80098b8:	6909      	ldr	r1, [r1, #16]
 80098ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098be:	eba3 0901 	sub.w	r9, r3, r1
 80098c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c6:	1c7b      	adds	r3, r7, #1
 80098c8:	444b      	add	r3, r9
 80098ca:	106d      	asrs	r5, r5, #1
 80098cc:	429d      	cmp	r5, r3
 80098ce:	bf38      	it	cc
 80098d0:	461d      	movcc	r5, r3
 80098d2:	0553      	lsls	r3, r2, #21
 80098d4:	d527      	bpl.n	8009926 <__ssputs_r+0x8e>
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7ff ff52 	bl	8009780 <_malloc_r>
 80098dc:	4606      	mov	r6, r0
 80098de:	b360      	cbz	r0, 800993a <__ssputs_r+0xa2>
 80098e0:	6921      	ldr	r1, [r4, #16]
 80098e2:	464a      	mov	r2, r9
 80098e4:	f7ff feab 	bl	800963e <memcpy>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	6126      	str	r6, [r4, #16]
 80098f6:	6165      	str	r5, [r4, #20]
 80098f8:	444e      	add	r6, r9
 80098fa:	eba5 0509 	sub.w	r5, r5, r9
 80098fe:	6026      	str	r6, [r4, #0]
 8009900:	60a5      	str	r5, [r4, #8]
 8009902:	463e      	mov	r6, r7
 8009904:	42be      	cmp	r6, r7
 8009906:	d900      	bls.n	800990a <__ssputs_r+0x72>
 8009908:	463e      	mov	r6, r7
 800990a:	6820      	ldr	r0, [r4, #0]
 800990c:	4632      	mov	r2, r6
 800990e:	4641      	mov	r1, r8
 8009910:	f000 fb66 	bl	8009fe0 <memmove>
 8009914:	68a3      	ldr	r3, [r4, #8]
 8009916:	1b9b      	subs	r3, r3, r6
 8009918:	60a3      	str	r3, [r4, #8]
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	4433      	add	r3, r6
 800991e:	6023      	str	r3, [r4, #0]
 8009920:	2000      	movs	r0, #0
 8009922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009926:	462a      	mov	r2, r5
 8009928:	f000 fb8b 	bl	800a042 <_realloc_r>
 800992c:	4606      	mov	r6, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	d1e0      	bne.n	80098f4 <__ssputs_r+0x5c>
 8009932:	6921      	ldr	r1, [r4, #16]
 8009934:	4650      	mov	r0, sl
 8009936:	f7ff feaf 	bl	8009698 <_free_r>
 800993a:	230c      	movs	r3, #12
 800993c:	f8ca 3000 	str.w	r3, [sl]
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009946:	81a3      	strh	r3, [r4, #12]
 8009948:	f04f 30ff 	mov.w	r0, #4294967295
 800994c:	e7e9      	b.n	8009922 <__ssputs_r+0x8a>
	...

08009950 <_svfiprintf_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	4698      	mov	r8, r3
 8009956:	898b      	ldrh	r3, [r1, #12]
 8009958:	061b      	lsls	r3, r3, #24
 800995a:	b09d      	sub	sp, #116	@ 0x74
 800995c:	4607      	mov	r7, r0
 800995e:	460d      	mov	r5, r1
 8009960:	4614      	mov	r4, r2
 8009962:	d510      	bpl.n	8009986 <_svfiprintf_r+0x36>
 8009964:	690b      	ldr	r3, [r1, #16]
 8009966:	b973      	cbnz	r3, 8009986 <_svfiprintf_r+0x36>
 8009968:	2140      	movs	r1, #64	@ 0x40
 800996a:	f7ff ff09 	bl	8009780 <_malloc_r>
 800996e:	6028      	str	r0, [r5, #0]
 8009970:	6128      	str	r0, [r5, #16]
 8009972:	b930      	cbnz	r0, 8009982 <_svfiprintf_r+0x32>
 8009974:	230c      	movs	r3, #12
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	b01d      	add	sp, #116	@ 0x74
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	2340      	movs	r3, #64	@ 0x40
 8009984:	616b      	str	r3, [r5, #20]
 8009986:	2300      	movs	r3, #0
 8009988:	9309      	str	r3, [sp, #36]	@ 0x24
 800998a:	2320      	movs	r3, #32
 800998c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009990:	f8cd 800c 	str.w	r8, [sp, #12]
 8009994:	2330      	movs	r3, #48	@ 0x30
 8009996:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b34 <_svfiprintf_r+0x1e4>
 800999a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800999e:	f04f 0901 	mov.w	r9, #1
 80099a2:	4623      	mov	r3, r4
 80099a4:	469a      	mov	sl, r3
 80099a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099aa:	b10a      	cbz	r2, 80099b0 <_svfiprintf_r+0x60>
 80099ac:	2a25      	cmp	r2, #37	@ 0x25
 80099ae:	d1f9      	bne.n	80099a4 <_svfiprintf_r+0x54>
 80099b0:	ebba 0b04 	subs.w	fp, sl, r4
 80099b4:	d00b      	beq.n	80099ce <_svfiprintf_r+0x7e>
 80099b6:	465b      	mov	r3, fp
 80099b8:	4622      	mov	r2, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	4638      	mov	r0, r7
 80099be:	f7ff ff6b 	bl	8009898 <__ssputs_r>
 80099c2:	3001      	adds	r0, #1
 80099c4:	f000 80a7 	beq.w	8009b16 <_svfiprintf_r+0x1c6>
 80099c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ca:	445a      	add	r2, fp
 80099cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80099ce:	f89a 3000 	ldrb.w	r3, [sl]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 809f 	beq.w	8009b16 <_svfiprintf_r+0x1c6>
 80099d8:	2300      	movs	r3, #0
 80099da:	f04f 32ff 	mov.w	r2, #4294967295
 80099de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e2:	f10a 0a01 	add.w	sl, sl, #1
 80099e6:	9304      	str	r3, [sp, #16]
 80099e8:	9307      	str	r3, [sp, #28]
 80099ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80099f0:	4654      	mov	r4, sl
 80099f2:	2205      	movs	r2, #5
 80099f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f8:	484e      	ldr	r0, [pc, #312]	@ (8009b34 <_svfiprintf_r+0x1e4>)
 80099fa:	f7f6 fc79 	bl	80002f0 <memchr>
 80099fe:	9a04      	ldr	r2, [sp, #16]
 8009a00:	b9d8      	cbnz	r0, 8009a3a <_svfiprintf_r+0xea>
 8009a02:	06d0      	lsls	r0, r2, #27
 8009a04:	bf44      	itt	mi
 8009a06:	2320      	movmi	r3, #32
 8009a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a0c:	0711      	lsls	r1, r2, #28
 8009a0e:	bf44      	itt	mi
 8009a10:	232b      	movmi	r3, #43	@ 0x2b
 8009a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a16:	f89a 3000 	ldrb.w	r3, [sl]
 8009a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a1c:	d015      	beq.n	8009a4a <_svfiprintf_r+0xfa>
 8009a1e:	9a07      	ldr	r2, [sp, #28]
 8009a20:	4654      	mov	r4, sl
 8009a22:	2000      	movs	r0, #0
 8009a24:	f04f 0c0a 	mov.w	ip, #10
 8009a28:	4621      	mov	r1, r4
 8009a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a2e:	3b30      	subs	r3, #48	@ 0x30
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d94b      	bls.n	8009acc <_svfiprintf_r+0x17c>
 8009a34:	b1b0      	cbz	r0, 8009a64 <_svfiprintf_r+0x114>
 8009a36:	9207      	str	r2, [sp, #28]
 8009a38:	e014      	b.n	8009a64 <_svfiprintf_r+0x114>
 8009a3a:	eba0 0308 	sub.w	r3, r0, r8
 8009a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a42:	4313      	orrs	r3, r2
 8009a44:	9304      	str	r3, [sp, #16]
 8009a46:	46a2      	mov	sl, r4
 8009a48:	e7d2      	b.n	80099f0 <_svfiprintf_r+0xa0>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	1d19      	adds	r1, r3, #4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	9103      	str	r1, [sp, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	bfbb      	ittet	lt
 8009a56:	425b      	neglt	r3, r3
 8009a58:	f042 0202 	orrlt.w	r2, r2, #2
 8009a5c:	9307      	strge	r3, [sp, #28]
 8009a5e:	9307      	strlt	r3, [sp, #28]
 8009a60:	bfb8      	it	lt
 8009a62:	9204      	strlt	r2, [sp, #16]
 8009a64:	7823      	ldrb	r3, [r4, #0]
 8009a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a68:	d10a      	bne.n	8009a80 <_svfiprintf_r+0x130>
 8009a6a:	7863      	ldrb	r3, [r4, #1]
 8009a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a6e:	d132      	bne.n	8009ad6 <_svfiprintf_r+0x186>
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	1d1a      	adds	r2, r3, #4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	9203      	str	r2, [sp, #12]
 8009a78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a7c:	3402      	adds	r4, #2
 8009a7e:	9305      	str	r3, [sp, #20]
 8009a80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b44 <_svfiprintf_r+0x1f4>
 8009a84:	7821      	ldrb	r1, [r4, #0]
 8009a86:	2203      	movs	r2, #3
 8009a88:	4650      	mov	r0, sl
 8009a8a:	f7f6 fc31 	bl	80002f0 <memchr>
 8009a8e:	b138      	cbz	r0, 8009aa0 <_svfiprintf_r+0x150>
 8009a90:	9b04      	ldr	r3, [sp, #16]
 8009a92:	eba0 000a 	sub.w	r0, r0, sl
 8009a96:	2240      	movs	r2, #64	@ 0x40
 8009a98:	4082      	lsls	r2, r0
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	3401      	adds	r4, #1
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa4:	4824      	ldr	r0, [pc, #144]	@ (8009b38 <_svfiprintf_r+0x1e8>)
 8009aa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009aaa:	2206      	movs	r2, #6
 8009aac:	f7f6 fc20 	bl	80002f0 <memchr>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d036      	beq.n	8009b22 <_svfiprintf_r+0x1d2>
 8009ab4:	4b21      	ldr	r3, [pc, #132]	@ (8009b3c <_svfiprintf_r+0x1ec>)
 8009ab6:	bb1b      	cbnz	r3, 8009b00 <_svfiprintf_r+0x1b0>
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	3307      	adds	r3, #7
 8009abc:	f023 0307 	bic.w	r3, r3, #7
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	9303      	str	r3, [sp, #12]
 8009ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac6:	4433      	add	r3, r6
 8009ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aca:	e76a      	b.n	80099a2 <_svfiprintf_r+0x52>
 8009acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	e7a8      	b.n	8009a28 <_svfiprintf_r+0xd8>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	3401      	adds	r4, #1
 8009ada:	9305      	str	r3, [sp, #20]
 8009adc:	4619      	mov	r1, r3
 8009ade:	f04f 0c0a 	mov.w	ip, #10
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae8:	3a30      	subs	r2, #48	@ 0x30
 8009aea:	2a09      	cmp	r2, #9
 8009aec:	d903      	bls.n	8009af6 <_svfiprintf_r+0x1a6>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0c6      	beq.n	8009a80 <_svfiprintf_r+0x130>
 8009af2:	9105      	str	r1, [sp, #20]
 8009af4:	e7c4      	b.n	8009a80 <_svfiprintf_r+0x130>
 8009af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009afa:	4604      	mov	r4, r0
 8009afc:	2301      	movs	r3, #1
 8009afe:	e7f0      	b.n	8009ae2 <_svfiprintf_r+0x192>
 8009b00:	ab03      	add	r3, sp, #12
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	462a      	mov	r2, r5
 8009b06:	4b0e      	ldr	r3, [pc, #56]	@ (8009b40 <_svfiprintf_r+0x1f0>)
 8009b08:	a904      	add	r1, sp, #16
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f3af 8000 	nop.w
 8009b10:	1c42      	adds	r2, r0, #1
 8009b12:	4606      	mov	r6, r0
 8009b14:	d1d6      	bne.n	8009ac4 <_svfiprintf_r+0x174>
 8009b16:	89ab      	ldrh	r3, [r5, #12]
 8009b18:	065b      	lsls	r3, r3, #25
 8009b1a:	f53f af2d 	bmi.w	8009978 <_svfiprintf_r+0x28>
 8009b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b20:	e72c      	b.n	800997c <_svfiprintf_r+0x2c>
 8009b22:	ab03      	add	r3, sp, #12
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	462a      	mov	r2, r5
 8009b28:	4b05      	ldr	r3, [pc, #20]	@ (8009b40 <_svfiprintf_r+0x1f0>)
 8009b2a:	a904      	add	r1, sp, #16
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	f000 f879 	bl	8009c24 <_printf_i>
 8009b32:	e7ed      	b.n	8009b10 <_svfiprintf_r+0x1c0>
 8009b34:	0800b3f3 	.word	0x0800b3f3
 8009b38:	0800b3fd 	.word	0x0800b3fd
 8009b3c:	00000000 	.word	0x00000000
 8009b40:	08009899 	.word	0x08009899
 8009b44:	0800b3f9 	.word	0x0800b3f9

08009b48 <_printf_common>:
 8009b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b4c:	4616      	mov	r6, r2
 8009b4e:	4698      	mov	r8, r3
 8009b50:	688a      	ldr	r2, [r1, #8]
 8009b52:	690b      	ldr	r3, [r1, #16]
 8009b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	bfb8      	it	lt
 8009b5c:	4613      	movlt	r3, r2
 8009b5e:	6033      	str	r3, [r6, #0]
 8009b60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b64:	4607      	mov	r7, r0
 8009b66:	460c      	mov	r4, r1
 8009b68:	b10a      	cbz	r2, 8009b6e <_printf_common+0x26>
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	6033      	str	r3, [r6, #0]
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	0699      	lsls	r1, r3, #26
 8009b72:	bf42      	ittt	mi
 8009b74:	6833      	ldrmi	r3, [r6, #0]
 8009b76:	3302      	addmi	r3, #2
 8009b78:	6033      	strmi	r3, [r6, #0]
 8009b7a:	6825      	ldr	r5, [r4, #0]
 8009b7c:	f015 0506 	ands.w	r5, r5, #6
 8009b80:	d106      	bne.n	8009b90 <_printf_common+0x48>
 8009b82:	f104 0a19 	add.w	sl, r4, #25
 8009b86:	68e3      	ldr	r3, [r4, #12]
 8009b88:	6832      	ldr	r2, [r6, #0]
 8009b8a:	1a9b      	subs	r3, r3, r2
 8009b8c:	42ab      	cmp	r3, r5
 8009b8e:	dc26      	bgt.n	8009bde <_printf_common+0x96>
 8009b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b94:	6822      	ldr	r2, [r4, #0]
 8009b96:	3b00      	subs	r3, #0
 8009b98:	bf18      	it	ne
 8009b9a:	2301      	movne	r3, #1
 8009b9c:	0692      	lsls	r2, r2, #26
 8009b9e:	d42b      	bmi.n	8009bf8 <_printf_common+0xb0>
 8009ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ba4:	4641      	mov	r1, r8
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	47c8      	blx	r9
 8009baa:	3001      	adds	r0, #1
 8009bac:	d01e      	beq.n	8009bec <_printf_common+0xa4>
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	6922      	ldr	r2, [r4, #16]
 8009bb2:	f003 0306 	and.w	r3, r3, #6
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	bf02      	ittt	eq
 8009bba:	68e5      	ldreq	r5, [r4, #12]
 8009bbc:	6833      	ldreq	r3, [r6, #0]
 8009bbe:	1aed      	subeq	r5, r5, r3
 8009bc0:	68a3      	ldr	r3, [r4, #8]
 8009bc2:	bf0c      	ite	eq
 8009bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bc8:	2500      	movne	r5, #0
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	bfc4      	itt	gt
 8009bce:	1a9b      	subgt	r3, r3, r2
 8009bd0:	18ed      	addgt	r5, r5, r3
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	341a      	adds	r4, #26
 8009bd6:	42b5      	cmp	r5, r6
 8009bd8:	d11a      	bne.n	8009c10 <_printf_common+0xc8>
 8009bda:	2000      	movs	r0, #0
 8009bdc:	e008      	b.n	8009bf0 <_printf_common+0xa8>
 8009bde:	2301      	movs	r3, #1
 8009be0:	4652      	mov	r2, sl
 8009be2:	4641      	mov	r1, r8
 8009be4:	4638      	mov	r0, r7
 8009be6:	47c8      	blx	r9
 8009be8:	3001      	adds	r0, #1
 8009bea:	d103      	bne.n	8009bf4 <_printf_common+0xac>
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf4:	3501      	adds	r5, #1
 8009bf6:	e7c6      	b.n	8009b86 <_printf_common+0x3e>
 8009bf8:	18e1      	adds	r1, r4, r3
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	2030      	movs	r0, #48	@ 0x30
 8009bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c02:	4422      	add	r2, r4
 8009c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c0c:	3302      	adds	r3, #2
 8009c0e:	e7c7      	b.n	8009ba0 <_printf_common+0x58>
 8009c10:	2301      	movs	r3, #1
 8009c12:	4622      	mov	r2, r4
 8009c14:	4641      	mov	r1, r8
 8009c16:	4638      	mov	r0, r7
 8009c18:	47c8      	blx	r9
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	d0e6      	beq.n	8009bec <_printf_common+0xa4>
 8009c1e:	3601      	adds	r6, #1
 8009c20:	e7d9      	b.n	8009bd6 <_printf_common+0x8e>
	...

08009c24 <_printf_i>:
 8009c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	7e0f      	ldrb	r7, [r1, #24]
 8009c2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c2c:	2f78      	cmp	r7, #120	@ 0x78
 8009c2e:	4691      	mov	r9, r2
 8009c30:	4680      	mov	r8, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	469a      	mov	sl, r3
 8009c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c3a:	d807      	bhi.n	8009c4c <_printf_i+0x28>
 8009c3c:	2f62      	cmp	r7, #98	@ 0x62
 8009c3e:	d80a      	bhi.n	8009c56 <_printf_i+0x32>
 8009c40:	2f00      	cmp	r7, #0
 8009c42:	f000 80d2 	beq.w	8009dea <_printf_i+0x1c6>
 8009c46:	2f58      	cmp	r7, #88	@ 0x58
 8009c48:	f000 80b9 	beq.w	8009dbe <_printf_i+0x19a>
 8009c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c54:	e03a      	b.n	8009ccc <_printf_i+0xa8>
 8009c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c5a:	2b15      	cmp	r3, #21
 8009c5c:	d8f6      	bhi.n	8009c4c <_printf_i+0x28>
 8009c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8009c64 <_printf_i+0x40>)
 8009c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c64:	08009cbd 	.word	0x08009cbd
 8009c68:	08009cd1 	.word	0x08009cd1
 8009c6c:	08009c4d 	.word	0x08009c4d
 8009c70:	08009c4d 	.word	0x08009c4d
 8009c74:	08009c4d 	.word	0x08009c4d
 8009c78:	08009c4d 	.word	0x08009c4d
 8009c7c:	08009cd1 	.word	0x08009cd1
 8009c80:	08009c4d 	.word	0x08009c4d
 8009c84:	08009c4d 	.word	0x08009c4d
 8009c88:	08009c4d 	.word	0x08009c4d
 8009c8c:	08009c4d 	.word	0x08009c4d
 8009c90:	08009dd1 	.word	0x08009dd1
 8009c94:	08009cfb 	.word	0x08009cfb
 8009c98:	08009d8b 	.word	0x08009d8b
 8009c9c:	08009c4d 	.word	0x08009c4d
 8009ca0:	08009c4d 	.word	0x08009c4d
 8009ca4:	08009df3 	.word	0x08009df3
 8009ca8:	08009c4d 	.word	0x08009c4d
 8009cac:	08009cfb 	.word	0x08009cfb
 8009cb0:	08009c4d 	.word	0x08009c4d
 8009cb4:	08009c4d 	.word	0x08009c4d
 8009cb8:	08009d93 	.word	0x08009d93
 8009cbc:	6833      	ldr	r3, [r6, #0]
 8009cbe:	1d1a      	adds	r2, r3, #4
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6032      	str	r2, [r6, #0]
 8009cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e09d      	b.n	8009e0c <_printf_i+0x1e8>
 8009cd0:	6833      	ldr	r3, [r6, #0]
 8009cd2:	6820      	ldr	r0, [r4, #0]
 8009cd4:	1d19      	adds	r1, r3, #4
 8009cd6:	6031      	str	r1, [r6, #0]
 8009cd8:	0606      	lsls	r6, r0, #24
 8009cda:	d501      	bpl.n	8009ce0 <_printf_i+0xbc>
 8009cdc:	681d      	ldr	r5, [r3, #0]
 8009cde:	e003      	b.n	8009ce8 <_printf_i+0xc4>
 8009ce0:	0645      	lsls	r5, r0, #25
 8009ce2:	d5fb      	bpl.n	8009cdc <_printf_i+0xb8>
 8009ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ce8:	2d00      	cmp	r5, #0
 8009cea:	da03      	bge.n	8009cf4 <_printf_i+0xd0>
 8009cec:	232d      	movs	r3, #45	@ 0x2d
 8009cee:	426d      	negs	r5, r5
 8009cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cf4:	4859      	ldr	r0, [pc, #356]	@ (8009e5c <_printf_i+0x238>)
 8009cf6:	230a      	movs	r3, #10
 8009cf8:	e011      	b.n	8009d1e <_printf_i+0xfa>
 8009cfa:	6821      	ldr	r1, [r4, #0]
 8009cfc:	6833      	ldr	r3, [r6, #0]
 8009cfe:	0608      	lsls	r0, r1, #24
 8009d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d04:	d402      	bmi.n	8009d0c <_printf_i+0xe8>
 8009d06:	0649      	lsls	r1, r1, #25
 8009d08:	bf48      	it	mi
 8009d0a:	b2ad      	uxthmi	r5, r5
 8009d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d0e:	4853      	ldr	r0, [pc, #332]	@ (8009e5c <_printf_i+0x238>)
 8009d10:	6033      	str	r3, [r6, #0]
 8009d12:	bf14      	ite	ne
 8009d14:	230a      	movne	r3, #10
 8009d16:	2308      	moveq	r3, #8
 8009d18:	2100      	movs	r1, #0
 8009d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d1e:	6866      	ldr	r6, [r4, #4]
 8009d20:	60a6      	str	r6, [r4, #8]
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	bfa2      	ittt	ge
 8009d26:	6821      	ldrge	r1, [r4, #0]
 8009d28:	f021 0104 	bicge.w	r1, r1, #4
 8009d2c:	6021      	strge	r1, [r4, #0]
 8009d2e:	b90d      	cbnz	r5, 8009d34 <_printf_i+0x110>
 8009d30:	2e00      	cmp	r6, #0
 8009d32:	d04b      	beq.n	8009dcc <_printf_i+0x1a8>
 8009d34:	4616      	mov	r6, r2
 8009d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8009d3e:	5dc7      	ldrb	r7, [r0, r7]
 8009d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d44:	462f      	mov	r7, r5
 8009d46:	42bb      	cmp	r3, r7
 8009d48:	460d      	mov	r5, r1
 8009d4a:	d9f4      	bls.n	8009d36 <_printf_i+0x112>
 8009d4c:	2b08      	cmp	r3, #8
 8009d4e:	d10b      	bne.n	8009d68 <_printf_i+0x144>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	07df      	lsls	r7, r3, #31
 8009d54:	d508      	bpl.n	8009d68 <_printf_i+0x144>
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	6861      	ldr	r1, [r4, #4]
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	bfde      	ittt	le
 8009d5e:	2330      	movle	r3, #48	@ 0x30
 8009d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d68:	1b92      	subs	r2, r2, r6
 8009d6a:	6122      	str	r2, [r4, #16]
 8009d6c:	f8cd a000 	str.w	sl, [sp]
 8009d70:	464b      	mov	r3, r9
 8009d72:	aa03      	add	r2, sp, #12
 8009d74:	4621      	mov	r1, r4
 8009d76:	4640      	mov	r0, r8
 8009d78:	f7ff fee6 	bl	8009b48 <_printf_common>
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	d14a      	bne.n	8009e16 <_printf_i+0x1f2>
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295
 8009d84:	b004      	add	sp, #16
 8009d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	f043 0320 	orr.w	r3, r3, #32
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	4833      	ldr	r0, [pc, #204]	@ (8009e60 <_printf_i+0x23c>)
 8009d94:	2778      	movs	r7, #120	@ 0x78
 8009d96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	6831      	ldr	r1, [r6, #0]
 8009d9e:	061f      	lsls	r7, r3, #24
 8009da0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009da4:	d402      	bmi.n	8009dac <_printf_i+0x188>
 8009da6:	065f      	lsls	r7, r3, #25
 8009da8:	bf48      	it	mi
 8009daa:	b2ad      	uxthmi	r5, r5
 8009dac:	6031      	str	r1, [r6, #0]
 8009dae:	07d9      	lsls	r1, r3, #31
 8009db0:	bf44      	itt	mi
 8009db2:	f043 0320 	orrmi.w	r3, r3, #32
 8009db6:	6023      	strmi	r3, [r4, #0]
 8009db8:	b11d      	cbz	r5, 8009dc2 <_printf_i+0x19e>
 8009dba:	2310      	movs	r3, #16
 8009dbc:	e7ac      	b.n	8009d18 <_printf_i+0xf4>
 8009dbe:	4827      	ldr	r0, [pc, #156]	@ (8009e5c <_printf_i+0x238>)
 8009dc0:	e7e9      	b.n	8009d96 <_printf_i+0x172>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	f023 0320 	bic.w	r3, r3, #32
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	e7f6      	b.n	8009dba <_printf_i+0x196>
 8009dcc:	4616      	mov	r6, r2
 8009dce:	e7bd      	b.n	8009d4c <_printf_i+0x128>
 8009dd0:	6833      	ldr	r3, [r6, #0]
 8009dd2:	6825      	ldr	r5, [r4, #0]
 8009dd4:	6961      	ldr	r1, [r4, #20]
 8009dd6:	1d18      	adds	r0, r3, #4
 8009dd8:	6030      	str	r0, [r6, #0]
 8009dda:	062e      	lsls	r6, r5, #24
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	d501      	bpl.n	8009de4 <_printf_i+0x1c0>
 8009de0:	6019      	str	r1, [r3, #0]
 8009de2:	e002      	b.n	8009dea <_printf_i+0x1c6>
 8009de4:	0668      	lsls	r0, r5, #25
 8009de6:	d5fb      	bpl.n	8009de0 <_printf_i+0x1bc>
 8009de8:	8019      	strh	r1, [r3, #0]
 8009dea:	2300      	movs	r3, #0
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	4616      	mov	r6, r2
 8009df0:	e7bc      	b.n	8009d6c <_printf_i+0x148>
 8009df2:	6833      	ldr	r3, [r6, #0]
 8009df4:	1d1a      	adds	r2, r3, #4
 8009df6:	6032      	str	r2, [r6, #0]
 8009df8:	681e      	ldr	r6, [r3, #0]
 8009dfa:	6862      	ldr	r2, [r4, #4]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f7f6 fa76 	bl	80002f0 <memchr>
 8009e04:	b108      	cbz	r0, 8009e0a <_printf_i+0x1e6>
 8009e06:	1b80      	subs	r0, r0, r6
 8009e08:	6060      	str	r0, [r4, #4]
 8009e0a:	6863      	ldr	r3, [r4, #4]
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e14:	e7aa      	b.n	8009d6c <_printf_i+0x148>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	4632      	mov	r2, r6
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	47d0      	blx	sl
 8009e20:	3001      	adds	r0, #1
 8009e22:	d0ad      	beq.n	8009d80 <_printf_i+0x15c>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	079b      	lsls	r3, r3, #30
 8009e28:	d413      	bmi.n	8009e52 <_printf_i+0x22e>
 8009e2a:	68e0      	ldr	r0, [r4, #12]
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	4298      	cmp	r0, r3
 8009e30:	bfb8      	it	lt
 8009e32:	4618      	movlt	r0, r3
 8009e34:	e7a6      	b.n	8009d84 <_printf_i+0x160>
 8009e36:	2301      	movs	r3, #1
 8009e38:	4632      	mov	r2, r6
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	47d0      	blx	sl
 8009e40:	3001      	adds	r0, #1
 8009e42:	d09d      	beq.n	8009d80 <_printf_i+0x15c>
 8009e44:	3501      	adds	r5, #1
 8009e46:	68e3      	ldr	r3, [r4, #12]
 8009e48:	9903      	ldr	r1, [sp, #12]
 8009e4a:	1a5b      	subs	r3, r3, r1
 8009e4c:	42ab      	cmp	r3, r5
 8009e4e:	dcf2      	bgt.n	8009e36 <_printf_i+0x212>
 8009e50:	e7eb      	b.n	8009e2a <_printf_i+0x206>
 8009e52:	2500      	movs	r5, #0
 8009e54:	f104 0619 	add.w	r6, r4, #25
 8009e58:	e7f5      	b.n	8009e46 <_printf_i+0x222>
 8009e5a:	bf00      	nop
 8009e5c:	0800b404 	.word	0x0800b404
 8009e60:	0800b415 	.word	0x0800b415

08009e64 <__sflush_r>:
 8009e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	0716      	lsls	r6, r2, #28
 8009e6e:	4605      	mov	r5, r0
 8009e70:	460c      	mov	r4, r1
 8009e72:	d454      	bmi.n	8009f1e <__sflush_r+0xba>
 8009e74:	684b      	ldr	r3, [r1, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dc02      	bgt.n	8009e80 <__sflush_r+0x1c>
 8009e7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dd48      	ble.n	8009f12 <__sflush_r+0xae>
 8009e80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e82:	2e00      	cmp	r6, #0
 8009e84:	d045      	beq.n	8009f12 <__sflush_r+0xae>
 8009e86:	2300      	movs	r3, #0
 8009e88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e8c:	682f      	ldr	r7, [r5, #0]
 8009e8e:	6a21      	ldr	r1, [r4, #32]
 8009e90:	602b      	str	r3, [r5, #0]
 8009e92:	d030      	beq.n	8009ef6 <__sflush_r+0x92>
 8009e94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	0759      	lsls	r1, r3, #29
 8009e9a:	d505      	bpl.n	8009ea8 <__sflush_r+0x44>
 8009e9c:	6863      	ldr	r3, [r4, #4]
 8009e9e:	1ad2      	subs	r2, r2, r3
 8009ea0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ea2:	b10b      	cbz	r3, 8009ea8 <__sflush_r+0x44>
 8009ea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ea6:	1ad2      	subs	r2, r2, r3
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009eac:	6a21      	ldr	r1, [r4, #32]
 8009eae:	4628      	mov	r0, r5
 8009eb0:	47b0      	blx	r6
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	d106      	bne.n	8009ec6 <__sflush_r+0x62>
 8009eb8:	6829      	ldr	r1, [r5, #0]
 8009eba:	291d      	cmp	r1, #29
 8009ebc:	d82b      	bhi.n	8009f16 <__sflush_r+0xb2>
 8009ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8009f68 <__sflush_r+0x104>)
 8009ec0:	410a      	asrs	r2, r1
 8009ec2:	07d6      	lsls	r6, r2, #31
 8009ec4:	d427      	bmi.n	8009f16 <__sflush_r+0xb2>
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	6062      	str	r2, [r4, #4]
 8009eca:	04d9      	lsls	r1, r3, #19
 8009ecc:	6922      	ldr	r2, [r4, #16]
 8009ece:	6022      	str	r2, [r4, #0]
 8009ed0:	d504      	bpl.n	8009edc <__sflush_r+0x78>
 8009ed2:	1c42      	adds	r2, r0, #1
 8009ed4:	d101      	bne.n	8009eda <__sflush_r+0x76>
 8009ed6:	682b      	ldr	r3, [r5, #0]
 8009ed8:	b903      	cbnz	r3, 8009edc <__sflush_r+0x78>
 8009eda:	6560      	str	r0, [r4, #84]	@ 0x54
 8009edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ede:	602f      	str	r7, [r5, #0]
 8009ee0:	b1b9      	cbz	r1, 8009f12 <__sflush_r+0xae>
 8009ee2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ee6:	4299      	cmp	r1, r3
 8009ee8:	d002      	beq.n	8009ef0 <__sflush_r+0x8c>
 8009eea:	4628      	mov	r0, r5
 8009eec:	f7ff fbd4 	bl	8009698 <_free_r>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ef4:	e00d      	b.n	8009f12 <__sflush_r+0xae>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	4628      	mov	r0, r5
 8009efa:	47b0      	blx	r6
 8009efc:	4602      	mov	r2, r0
 8009efe:	1c50      	adds	r0, r2, #1
 8009f00:	d1c9      	bne.n	8009e96 <__sflush_r+0x32>
 8009f02:	682b      	ldr	r3, [r5, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0c6      	beq.n	8009e96 <__sflush_r+0x32>
 8009f08:	2b1d      	cmp	r3, #29
 8009f0a:	d001      	beq.n	8009f10 <__sflush_r+0xac>
 8009f0c:	2b16      	cmp	r3, #22
 8009f0e:	d11e      	bne.n	8009f4e <__sflush_r+0xea>
 8009f10:	602f      	str	r7, [r5, #0]
 8009f12:	2000      	movs	r0, #0
 8009f14:	e022      	b.n	8009f5c <__sflush_r+0xf8>
 8009f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f1a:	b21b      	sxth	r3, r3
 8009f1c:	e01b      	b.n	8009f56 <__sflush_r+0xf2>
 8009f1e:	690f      	ldr	r7, [r1, #16]
 8009f20:	2f00      	cmp	r7, #0
 8009f22:	d0f6      	beq.n	8009f12 <__sflush_r+0xae>
 8009f24:	0793      	lsls	r3, r2, #30
 8009f26:	680e      	ldr	r6, [r1, #0]
 8009f28:	bf08      	it	eq
 8009f2a:	694b      	ldreq	r3, [r1, #20]
 8009f2c:	600f      	str	r7, [r1, #0]
 8009f2e:	bf18      	it	ne
 8009f30:	2300      	movne	r3, #0
 8009f32:	eba6 0807 	sub.w	r8, r6, r7
 8009f36:	608b      	str	r3, [r1, #8]
 8009f38:	f1b8 0f00 	cmp.w	r8, #0
 8009f3c:	dde9      	ble.n	8009f12 <__sflush_r+0xae>
 8009f3e:	6a21      	ldr	r1, [r4, #32]
 8009f40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009f42:	4643      	mov	r3, r8
 8009f44:	463a      	mov	r2, r7
 8009f46:	4628      	mov	r0, r5
 8009f48:	47b0      	blx	r6
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	dc08      	bgt.n	8009f60 <__sflush_r+0xfc>
 8009f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f56:	81a3      	strh	r3, [r4, #12]
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f60:	4407      	add	r7, r0
 8009f62:	eba8 0800 	sub.w	r8, r8, r0
 8009f66:	e7e7      	b.n	8009f38 <__sflush_r+0xd4>
 8009f68:	dfbffffe 	.word	0xdfbffffe

08009f6c <_fflush_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	690b      	ldr	r3, [r1, #16]
 8009f70:	4605      	mov	r5, r0
 8009f72:	460c      	mov	r4, r1
 8009f74:	b913      	cbnz	r3, 8009f7c <_fflush_r+0x10>
 8009f76:	2500      	movs	r5, #0
 8009f78:	4628      	mov	r0, r5
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	b118      	cbz	r0, 8009f86 <_fflush_r+0x1a>
 8009f7e:	6a03      	ldr	r3, [r0, #32]
 8009f80:	b90b      	cbnz	r3, 8009f86 <_fflush_r+0x1a>
 8009f82:	f7ff fa47 	bl	8009414 <__sinit>
 8009f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f3      	beq.n	8009f76 <_fflush_r+0xa>
 8009f8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f90:	07d0      	lsls	r0, r2, #31
 8009f92:	d404      	bmi.n	8009f9e <_fflush_r+0x32>
 8009f94:	0599      	lsls	r1, r3, #22
 8009f96:	d402      	bmi.n	8009f9e <_fflush_r+0x32>
 8009f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f9a:	f7ff fb4e 	bl	800963a <__retarget_lock_acquire_recursive>
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	f7ff ff5f 	bl	8009e64 <__sflush_r>
 8009fa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fa8:	07da      	lsls	r2, r3, #31
 8009faa:	4605      	mov	r5, r0
 8009fac:	d4e4      	bmi.n	8009f78 <_fflush_r+0xc>
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	059b      	lsls	r3, r3, #22
 8009fb2:	d4e1      	bmi.n	8009f78 <_fflush_r+0xc>
 8009fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fb6:	f7ff fb41 	bl	800963c <__retarget_lock_release_recursive>
 8009fba:	e7dd      	b.n	8009f78 <_fflush_r+0xc>

08009fbc <fiprintf>:
 8009fbc:	b40e      	push	{r1, r2, r3}
 8009fbe:	b503      	push	{r0, r1, lr}
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	ab03      	add	r3, sp, #12
 8009fc4:	4805      	ldr	r0, [pc, #20]	@ (8009fdc <fiprintf+0x20>)
 8009fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fca:	6800      	ldr	r0, [r0, #0]
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	f000 f88f 	bl	800a0f0 <_vfiprintf_r>
 8009fd2:	b002      	add	sp, #8
 8009fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fd8:	b003      	add	sp, #12
 8009fda:	4770      	bx	lr
 8009fdc:	24000038 	.word	0x24000038

08009fe0 <memmove>:
 8009fe0:	4288      	cmp	r0, r1
 8009fe2:	b510      	push	{r4, lr}
 8009fe4:	eb01 0402 	add.w	r4, r1, r2
 8009fe8:	d902      	bls.n	8009ff0 <memmove+0x10>
 8009fea:	4284      	cmp	r4, r0
 8009fec:	4623      	mov	r3, r4
 8009fee:	d807      	bhi.n	800a000 <memmove+0x20>
 8009ff0:	1e43      	subs	r3, r0, #1
 8009ff2:	42a1      	cmp	r1, r4
 8009ff4:	d008      	beq.n	800a008 <memmove+0x28>
 8009ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ffe:	e7f8      	b.n	8009ff2 <memmove+0x12>
 800a000:	4402      	add	r2, r0
 800a002:	4601      	mov	r1, r0
 800a004:	428a      	cmp	r2, r1
 800a006:	d100      	bne.n	800a00a <memmove+0x2a>
 800a008:	bd10      	pop	{r4, pc}
 800a00a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a00e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a012:	e7f7      	b.n	800a004 <memmove+0x24>

0800a014 <_sbrk_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4d06      	ldr	r5, [pc, #24]	@ (800a030 <_sbrk_r+0x1c>)
 800a018:	2300      	movs	r3, #0
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	602b      	str	r3, [r5, #0]
 800a020:	f7f8 fe4e 	bl	8002cc0 <_sbrk>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_sbrk_r+0x1a>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_sbrk_r+0x1a>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	240003dc 	.word	0x240003dc

0800a034 <abort>:
 800a034:	b508      	push	{r3, lr}
 800a036:	2006      	movs	r0, #6
 800a038:	f000 fa2e 	bl	800a498 <raise>
 800a03c:	2001      	movs	r0, #1
 800a03e:	f7f8 fdc7 	bl	8002bd0 <_exit>

0800a042 <_realloc_r>:
 800a042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	4680      	mov	r8, r0
 800a048:	4615      	mov	r5, r2
 800a04a:	460c      	mov	r4, r1
 800a04c:	b921      	cbnz	r1, 800a058 <_realloc_r+0x16>
 800a04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a052:	4611      	mov	r1, r2
 800a054:	f7ff bb94 	b.w	8009780 <_malloc_r>
 800a058:	b92a      	cbnz	r2, 800a066 <_realloc_r+0x24>
 800a05a:	f7ff fb1d 	bl	8009698 <_free_r>
 800a05e:	2400      	movs	r4, #0
 800a060:	4620      	mov	r0, r4
 800a062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a066:	f000 fa33 	bl	800a4d0 <_malloc_usable_size_r>
 800a06a:	4285      	cmp	r5, r0
 800a06c:	4606      	mov	r6, r0
 800a06e:	d802      	bhi.n	800a076 <_realloc_r+0x34>
 800a070:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a074:	d8f4      	bhi.n	800a060 <_realloc_r+0x1e>
 800a076:	4629      	mov	r1, r5
 800a078:	4640      	mov	r0, r8
 800a07a:	f7ff fb81 	bl	8009780 <_malloc_r>
 800a07e:	4607      	mov	r7, r0
 800a080:	2800      	cmp	r0, #0
 800a082:	d0ec      	beq.n	800a05e <_realloc_r+0x1c>
 800a084:	42b5      	cmp	r5, r6
 800a086:	462a      	mov	r2, r5
 800a088:	4621      	mov	r1, r4
 800a08a:	bf28      	it	cs
 800a08c:	4632      	movcs	r2, r6
 800a08e:	f7ff fad6 	bl	800963e <memcpy>
 800a092:	4621      	mov	r1, r4
 800a094:	4640      	mov	r0, r8
 800a096:	f7ff faff 	bl	8009698 <_free_r>
 800a09a:	463c      	mov	r4, r7
 800a09c:	e7e0      	b.n	800a060 <_realloc_r+0x1e>

0800a09e <__sfputc_r>:
 800a09e:	6893      	ldr	r3, [r2, #8]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	b410      	push	{r4}
 800a0a6:	6093      	str	r3, [r2, #8]
 800a0a8:	da08      	bge.n	800a0bc <__sfputc_r+0x1e>
 800a0aa:	6994      	ldr	r4, [r2, #24]
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	db01      	blt.n	800a0b4 <__sfputc_r+0x16>
 800a0b0:	290a      	cmp	r1, #10
 800a0b2:	d103      	bne.n	800a0bc <__sfputc_r+0x1e>
 800a0b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0b8:	f000 b932 	b.w	800a320 <__swbuf_r>
 800a0bc:	6813      	ldr	r3, [r2, #0]
 800a0be:	1c58      	adds	r0, r3, #1
 800a0c0:	6010      	str	r0, [r2, #0]
 800a0c2:	7019      	strb	r1, [r3, #0]
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <__sfputs_r>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460f      	mov	r7, r1
 800a0d2:	4614      	mov	r4, r2
 800a0d4:	18d5      	adds	r5, r2, r3
 800a0d6:	42ac      	cmp	r4, r5
 800a0d8:	d101      	bne.n	800a0de <__sfputs_r+0x12>
 800a0da:	2000      	movs	r0, #0
 800a0dc:	e007      	b.n	800a0ee <__sfputs_r+0x22>
 800a0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e2:	463a      	mov	r2, r7
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff ffda 	bl	800a09e <__sfputc_r>
 800a0ea:	1c43      	adds	r3, r0, #1
 800a0ec:	d1f3      	bne.n	800a0d6 <__sfputs_r+0xa>
 800a0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0f0 <_vfiprintf_r>:
 800a0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	460d      	mov	r5, r1
 800a0f6:	b09d      	sub	sp, #116	@ 0x74
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	4698      	mov	r8, r3
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	b118      	cbz	r0, 800a108 <_vfiprintf_r+0x18>
 800a100:	6a03      	ldr	r3, [r0, #32]
 800a102:	b90b      	cbnz	r3, 800a108 <_vfiprintf_r+0x18>
 800a104:	f7ff f986 	bl	8009414 <__sinit>
 800a108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a10a:	07d9      	lsls	r1, r3, #31
 800a10c:	d405      	bmi.n	800a11a <_vfiprintf_r+0x2a>
 800a10e:	89ab      	ldrh	r3, [r5, #12]
 800a110:	059a      	lsls	r2, r3, #22
 800a112:	d402      	bmi.n	800a11a <_vfiprintf_r+0x2a>
 800a114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a116:	f7ff fa90 	bl	800963a <__retarget_lock_acquire_recursive>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	071b      	lsls	r3, r3, #28
 800a11e:	d501      	bpl.n	800a124 <_vfiprintf_r+0x34>
 800a120:	692b      	ldr	r3, [r5, #16]
 800a122:	b99b      	cbnz	r3, 800a14c <_vfiprintf_r+0x5c>
 800a124:	4629      	mov	r1, r5
 800a126:	4630      	mov	r0, r6
 800a128:	f000 f938 	bl	800a39c <__swsetup_r>
 800a12c:	b170      	cbz	r0, 800a14c <_vfiprintf_r+0x5c>
 800a12e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a130:	07dc      	lsls	r4, r3, #31
 800a132:	d504      	bpl.n	800a13e <_vfiprintf_r+0x4e>
 800a134:	f04f 30ff 	mov.w	r0, #4294967295
 800a138:	b01d      	add	sp, #116	@ 0x74
 800a13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13e:	89ab      	ldrh	r3, [r5, #12]
 800a140:	0598      	lsls	r0, r3, #22
 800a142:	d4f7      	bmi.n	800a134 <_vfiprintf_r+0x44>
 800a144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a146:	f7ff fa79 	bl	800963c <__retarget_lock_release_recursive>
 800a14a:	e7f3      	b.n	800a134 <_vfiprintf_r+0x44>
 800a14c:	2300      	movs	r3, #0
 800a14e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a150:	2320      	movs	r3, #32
 800a152:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a156:	f8cd 800c 	str.w	r8, [sp, #12]
 800a15a:	2330      	movs	r3, #48	@ 0x30
 800a15c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a30c <_vfiprintf_r+0x21c>
 800a160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a164:	f04f 0901 	mov.w	r9, #1
 800a168:	4623      	mov	r3, r4
 800a16a:	469a      	mov	sl, r3
 800a16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a170:	b10a      	cbz	r2, 800a176 <_vfiprintf_r+0x86>
 800a172:	2a25      	cmp	r2, #37	@ 0x25
 800a174:	d1f9      	bne.n	800a16a <_vfiprintf_r+0x7a>
 800a176:	ebba 0b04 	subs.w	fp, sl, r4
 800a17a:	d00b      	beq.n	800a194 <_vfiprintf_r+0xa4>
 800a17c:	465b      	mov	r3, fp
 800a17e:	4622      	mov	r2, r4
 800a180:	4629      	mov	r1, r5
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ffa2 	bl	800a0cc <__sfputs_r>
 800a188:	3001      	adds	r0, #1
 800a18a:	f000 80a7 	beq.w	800a2dc <_vfiprintf_r+0x1ec>
 800a18e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a190:	445a      	add	r2, fp
 800a192:	9209      	str	r2, [sp, #36]	@ 0x24
 800a194:	f89a 3000 	ldrb.w	r3, [sl]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 809f 	beq.w	800a2dc <_vfiprintf_r+0x1ec>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1a8:	f10a 0a01 	add.w	sl, sl, #1
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	9307      	str	r3, [sp, #28]
 800a1b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1b6:	4654      	mov	r4, sl
 800a1b8:	2205      	movs	r2, #5
 800a1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1be:	4853      	ldr	r0, [pc, #332]	@ (800a30c <_vfiprintf_r+0x21c>)
 800a1c0:	f7f6 f896 	bl	80002f0 <memchr>
 800a1c4:	9a04      	ldr	r2, [sp, #16]
 800a1c6:	b9d8      	cbnz	r0, 800a200 <_vfiprintf_r+0x110>
 800a1c8:	06d1      	lsls	r1, r2, #27
 800a1ca:	bf44      	itt	mi
 800a1cc:	2320      	movmi	r3, #32
 800a1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1d2:	0713      	lsls	r3, r2, #28
 800a1d4:	bf44      	itt	mi
 800a1d6:	232b      	movmi	r3, #43	@ 0x2b
 800a1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1e2:	d015      	beq.n	800a210 <_vfiprintf_r+0x120>
 800a1e4:	9a07      	ldr	r2, [sp, #28]
 800a1e6:	4654      	mov	r4, sl
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f04f 0c0a 	mov.w	ip, #10
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1f4:	3b30      	subs	r3, #48	@ 0x30
 800a1f6:	2b09      	cmp	r3, #9
 800a1f8:	d94b      	bls.n	800a292 <_vfiprintf_r+0x1a2>
 800a1fa:	b1b0      	cbz	r0, 800a22a <_vfiprintf_r+0x13a>
 800a1fc:	9207      	str	r2, [sp, #28]
 800a1fe:	e014      	b.n	800a22a <_vfiprintf_r+0x13a>
 800a200:	eba0 0308 	sub.w	r3, r0, r8
 800a204:	fa09 f303 	lsl.w	r3, r9, r3
 800a208:	4313      	orrs	r3, r2
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	46a2      	mov	sl, r4
 800a20e:	e7d2      	b.n	800a1b6 <_vfiprintf_r+0xc6>
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	1d19      	adds	r1, r3, #4
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	9103      	str	r1, [sp, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bfbb      	ittet	lt
 800a21c:	425b      	neglt	r3, r3
 800a21e:	f042 0202 	orrlt.w	r2, r2, #2
 800a222:	9307      	strge	r3, [sp, #28]
 800a224:	9307      	strlt	r3, [sp, #28]
 800a226:	bfb8      	it	lt
 800a228:	9204      	strlt	r2, [sp, #16]
 800a22a:	7823      	ldrb	r3, [r4, #0]
 800a22c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a22e:	d10a      	bne.n	800a246 <_vfiprintf_r+0x156>
 800a230:	7863      	ldrb	r3, [r4, #1]
 800a232:	2b2a      	cmp	r3, #42	@ 0x2a
 800a234:	d132      	bne.n	800a29c <_vfiprintf_r+0x1ac>
 800a236:	9b03      	ldr	r3, [sp, #12]
 800a238:	1d1a      	adds	r2, r3, #4
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	9203      	str	r2, [sp, #12]
 800a23e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a242:	3402      	adds	r4, #2
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a31c <_vfiprintf_r+0x22c>
 800a24a:	7821      	ldrb	r1, [r4, #0]
 800a24c:	2203      	movs	r2, #3
 800a24e:	4650      	mov	r0, sl
 800a250:	f7f6 f84e 	bl	80002f0 <memchr>
 800a254:	b138      	cbz	r0, 800a266 <_vfiprintf_r+0x176>
 800a256:	9b04      	ldr	r3, [sp, #16]
 800a258:	eba0 000a 	sub.w	r0, r0, sl
 800a25c:	2240      	movs	r2, #64	@ 0x40
 800a25e:	4082      	lsls	r2, r0
 800a260:	4313      	orrs	r3, r2
 800a262:	3401      	adds	r4, #1
 800a264:	9304      	str	r3, [sp, #16]
 800a266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a26a:	4829      	ldr	r0, [pc, #164]	@ (800a310 <_vfiprintf_r+0x220>)
 800a26c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a270:	2206      	movs	r2, #6
 800a272:	f7f6 f83d 	bl	80002f0 <memchr>
 800a276:	2800      	cmp	r0, #0
 800a278:	d03f      	beq.n	800a2fa <_vfiprintf_r+0x20a>
 800a27a:	4b26      	ldr	r3, [pc, #152]	@ (800a314 <_vfiprintf_r+0x224>)
 800a27c:	bb1b      	cbnz	r3, 800a2c6 <_vfiprintf_r+0x1d6>
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	3307      	adds	r3, #7
 800a282:	f023 0307 	bic.w	r3, r3, #7
 800a286:	3308      	adds	r3, #8
 800a288:	9303      	str	r3, [sp, #12]
 800a28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28c:	443b      	add	r3, r7
 800a28e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a290:	e76a      	b.n	800a168 <_vfiprintf_r+0x78>
 800a292:	fb0c 3202 	mla	r2, ip, r2, r3
 800a296:	460c      	mov	r4, r1
 800a298:	2001      	movs	r0, #1
 800a29a:	e7a8      	b.n	800a1ee <_vfiprintf_r+0xfe>
 800a29c:	2300      	movs	r3, #0
 800a29e:	3401      	adds	r4, #1
 800a2a0:	9305      	str	r3, [sp, #20]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	f04f 0c0a 	mov.w	ip, #10
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ae:	3a30      	subs	r2, #48	@ 0x30
 800a2b0:	2a09      	cmp	r2, #9
 800a2b2:	d903      	bls.n	800a2bc <_vfiprintf_r+0x1cc>
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d0c6      	beq.n	800a246 <_vfiprintf_r+0x156>
 800a2b8:	9105      	str	r1, [sp, #20]
 800a2ba:	e7c4      	b.n	800a246 <_vfiprintf_r+0x156>
 800a2bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e7f0      	b.n	800a2a8 <_vfiprintf_r+0x1b8>
 800a2c6:	ab03      	add	r3, sp, #12
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	4b12      	ldr	r3, [pc, #72]	@ (800a318 <_vfiprintf_r+0x228>)
 800a2ce:	a904      	add	r1, sp, #16
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f3af 8000 	nop.w
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	1c78      	adds	r0, r7, #1
 800a2da:	d1d6      	bne.n	800a28a <_vfiprintf_r+0x19a>
 800a2dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2de:	07d9      	lsls	r1, r3, #31
 800a2e0:	d405      	bmi.n	800a2ee <_vfiprintf_r+0x1fe>
 800a2e2:	89ab      	ldrh	r3, [r5, #12]
 800a2e4:	059a      	lsls	r2, r3, #22
 800a2e6:	d402      	bmi.n	800a2ee <_vfiprintf_r+0x1fe>
 800a2e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ea:	f7ff f9a7 	bl	800963c <__retarget_lock_release_recursive>
 800a2ee:	89ab      	ldrh	r3, [r5, #12]
 800a2f0:	065b      	lsls	r3, r3, #25
 800a2f2:	f53f af1f 	bmi.w	800a134 <_vfiprintf_r+0x44>
 800a2f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2f8:	e71e      	b.n	800a138 <_vfiprintf_r+0x48>
 800a2fa:	ab03      	add	r3, sp, #12
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	462a      	mov	r2, r5
 800a300:	4b05      	ldr	r3, [pc, #20]	@ (800a318 <_vfiprintf_r+0x228>)
 800a302:	a904      	add	r1, sp, #16
 800a304:	4630      	mov	r0, r6
 800a306:	f7ff fc8d 	bl	8009c24 <_printf_i>
 800a30a:	e7e4      	b.n	800a2d6 <_vfiprintf_r+0x1e6>
 800a30c:	0800b3f3 	.word	0x0800b3f3
 800a310:	0800b3fd 	.word	0x0800b3fd
 800a314:	00000000 	.word	0x00000000
 800a318:	0800a0cd 	.word	0x0800a0cd
 800a31c:	0800b3f9 	.word	0x0800b3f9

0800a320 <__swbuf_r>:
 800a320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a322:	460e      	mov	r6, r1
 800a324:	4614      	mov	r4, r2
 800a326:	4605      	mov	r5, r0
 800a328:	b118      	cbz	r0, 800a332 <__swbuf_r+0x12>
 800a32a:	6a03      	ldr	r3, [r0, #32]
 800a32c:	b90b      	cbnz	r3, 800a332 <__swbuf_r+0x12>
 800a32e:	f7ff f871 	bl	8009414 <__sinit>
 800a332:	69a3      	ldr	r3, [r4, #24]
 800a334:	60a3      	str	r3, [r4, #8]
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	071a      	lsls	r2, r3, #28
 800a33a:	d501      	bpl.n	800a340 <__swbuf_r+0x20>
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	b943      	cbnz	r3, 800a352 <__swbuf_r+0x32>
 800a340:	4621      	mov	r1, r4
 800a342:	4628      	mov	r0, r5
 800a344:	f000 f82a 	bl	800a39c <__swsetup_r>
 800a348:	b118      	cbz	r0, 800a352 <__swbuf_r+0x32>
 800a34a:	f04f 37ff 	mov.w	r7, #4294967295
 800a34e:	4638      	mov	r0, r7
 800a350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	6922      	ldr	r2, [r4, #16]
 800a356:	1a98      	subs	r0, r3, r2
 800a358:	6963      	ldr	r3, [r4, #20]
 800a35a:	b2f6      	uxtb	r6, r6
 800a35c:	4283      	cmp	r3, r0
 800a35e:	4637      	mov	r7, r6
 800a360:	dc05      	bgt.n	800a36e <__swbuf_r+0x4e>
 800a362:	4621      	mov	r1, r4
 800a364:	4628      	mov	r0, r5
 800a366:	f7ff fe01 	bl	8009f6c <_fflush_r>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d1ed      	bne.n	800a34a <__swbuf_r+0x2a>
 800a36e:	68a3      	ldr	r3, [r4, #8]
 800a370:	3b01      	subs	r3, #1
 800a372:	60a3      	str	r3, [r4, #8]
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	6022      	str	r2, [r4, #0]
 800a37a:	701e      	strb	r6, [r3, #0]
 800a37c:	6962      	ldr	r2, [r4, #20]
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	429a      	cmp	r2, r3
 800a382:	d004      	beq.n	800a38e <__swbuf_r+0x6e>
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	07db      	lsls	r3, r3, #31
 800a388:	d5e1      	bpl.n	800a34e <__swbuf_r+0x2e>
 800a38a:	2e0a      	cmp	r6, #10
 800a38c:	d1df      	bne.n	800a34e <__swbuf_r+0x2e>
 800a38e:	4621      	mov	r1, r4
 800a390:	4628      	mov	r0, r5
 800a392:	f7ff fdeb 	bl	8009f6c <_fflush_r>
 800a396:	2800      	cmp	r0, #0
 800a398:	d0d9      	beq.n	800a34e <__swbuf_r+0x2e>
 800a39a:	e7d6      	b.n	800a34a <__swbuf_r+0x2a>

0800a39c <__swsetup_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4b29      	ldr	r3, [pc, #164]	@ (800a444 <__swsetup_r+0xa8>)
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	6818      	ldr	r0, [r3, #0]
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	b118      	cbz	r0, 800a3b0 <__swsetup_r+0x14>
 800a3a8:	6a03      	ldr	r3, [r0, #32]
 800a3aa:	b90b      	cbnz	r3, 800a3b0 <__swsetup_r+0x14>
 800a3ac:	f7ff f832 	bl	8009414 <__sinit>
 800a3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b4:	0719      	lsls	r1, r3, #28
 800a3b6:	d422      	bmi.n	800a3fe <__swsetup_r+0x62>
 800a3b8:	06da      	lsls	r2, r3, #27
 800a3ba:	d407      	bmi.n	800a3cc <__swsetup_r+0x30>
 800a3bc:	2209      	movs	r2, #9
 800a3be:	602a      	str	r2, [r5, #0]
 800a3c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ca:	e033      	b.n	800a434 <__swsetup_r+0x98>
 800a3cc:	0758      	lsls	r0, r3, #29
 800a3ce:	d512      	bpl.n	800a3f6 <__swsetup_r+0x5a>
 800a3d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3d2:	b141      	cbz	r1, 800a3e6 <__swsetup_r+0x4a>
 800a3d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3d8:	4299      	cmp	r1, r3
 800a3da:	d002      	beq.n	800a3e2 <__swsetup_r+0x46>
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f7ff f95b 	bl	8009698 <_free_r>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6063      	str	r3, [r4, #4]
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	f043 0308 	orr.w	r3, r3, #8
 800a3fc:	81a3      	strh	r3, [r4, #12]
 800a3fe:	6923      	ldr	r3, [r4, #16]
 800a400:	b94b      	cbnz	r3, 800a416 <__swsetup_r+0x7a>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a40c:	d003      	beq.n	800a416 <__swsetup_r+0x7a>
 800a40e:	4621      	mov	r1, r4
 800a410:	4628      	mov	r0, r5
 800a412:	f000 f88b 	bl	800a52c <__smakebuf_r>
 800a416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41a:	f013 0201 	ands.w	r2, r3, #1
 800a41e:	d00a      	beq.n	800a436 <__swsetup_r+0x9a>
 800a420:	2200      	movs	r2, #0
 800a422:	60a2      	str	r2, [r4, #8]
 800a424:	6962      	ldr	r2, [r4, #20]
 800a426:	4252      	negs	r2, r2
 800a428:	61a2      	str	r2, [r4, #24]
 800a42a:	6922      	ldr	r2, [r4, #16]
 800a42c:	b942      	cbnz	r2, 800a440 <__swsetup_r+0xa4>
 800a42e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a432:	d1c5      	bne.n	800a3c0 <__swsetup_r+0x24>
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	0799      	lsls	r1, r3, #30
 800a438:	bf58      	it	pl
 800a43a:	6962      	ldrpl	r2, [r4, #20]
 800a43c:	60a2      	str	r2, [r4, #8]
 800a43e:	e7f4      	b.n	800a42a <__swsetup_r+0x8e>
 800a440:	2000      	movs	r0, #0
 800a442:	e7f7      	b.n	800a434 <__swsetup_r+0x98>
 800a444:	24000038 	.word	0x24000038

0800a448 <_raise_r>:
 800a448:	291f      	cmp	r1, #31
 800a44a:	b538      	push	{r3, r4, r5, lr}
 800a44c:	4605      	mov	r5, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	d904      	bls.n	800a45c <_raise_r+0x14>
 800a452:	2316      	movs	r3, #22
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	f04f 30ff 	mov.w	r0, #4294967295
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a45e:	b112      	cbz	r2, 800a466 <_raise_r+0x1e>
 800a460:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a464:	b94b      	cbnz	r3, 800a47a <_raise_r+0x32>
 800a466:	4628      	mov	r0, r5
 800a468:	f000 f830 	bl	800a4cc <_getpid_r>
 800a46c:	4622      	mov	r2, r4
 800a46e:	4601      	mov	r1, r0
 800a470:	4628      	mov	r0, r5
 800a472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a476:	f000 b817 	b.w	800a4a8 <_kill_r>
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d00a      	beq.n	800a494 <_raise_r+0x4c>
 800a47e:	1c59      	adds	r1, r3, #1
 800a480:	d103      	bne.n	800a48a <_raise_r+0x42>
 800a482:	2316      	movs	r3, #22
 800a484:	6003      	str	r3, [r0, #0]
 800a486:	2001      	movs	r0, #1
 800a488:	e7e7      	b.n	800a45a <_raise_r+0x12>
 800a48a:	2100      	movs	r1, #0
 800a48c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a490:	4620      	mov	r0, r4
 800a492:	4798      	blx	r3
 800a494:	2000      	movs	r0, #0
 800a496:	e7e0      	b.n	800a45a <_raise_r+0x12>

0800a498 <raise>:
 800a498:	4b02      	ldr	r3, [pc, #8]	@ (800a4a4 <raise+0xc>)
 800a49a:	4601      	mov	r1, r0
 800a49c:	6818      	ldr	r0, [r3, #0]
 800a49e:	f7ff bfd3 	b.w	800a448 <_raise_r>
 800a4a2:	bf00      	nop
 800a4a4:	24000038 	.word	0x24000038

0800a4a8 <_kill_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d07      	ldr	r5, [pc, #28]	@ (800a4c8 <_kill_r+0x20>)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	602b      	str	r3, [r5, #0]
 800a4b6:	f7f8 fb7b 	bl	8002bb0 <_kill>
 800a4ba:	1c43      	adds	r3, r0, #1
 800a4bc:	d102      	bne.n	800a4c4 <_kill_r+0x1c>
 800a4be:	682b      	ldr	r3, [r5, #0]
 800a4c0:	b103      	cbz	r3, 800a4c4 <_kill_r+0x1c>
 800a4c2:	6023      	str	r3, [r4, #0]
 800a4c4:	bd38      	pop	{r3, r4, r5, pc}
 800a4c6:	bf00      	nop
 800a4c8:	240003dc 	.word	0x240003dc

0800a4cc <_getpid_r>:
 800a4cc:	f7f8 bb68 	b.w	8002ba0 <_getpid>

0800a4d0 <_malloc_usable_size_r>:
 800a4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d4:	1f18      	subs	r0, r3, #4
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bfbc      	itt	lt
 800a4da:	580b      	ldrlt	r3, [r1, r0]
 800a4dc:	18c0      	addlt	r0, r0, r3
 800a4de:	4770      	bx	lr

0800a4e0 <__swhatbuf_r>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e8:	2900      	cmp	r1, #0
 800a4ea:	b096      	sub	sp, #88	@ 0x58
 800a4ec:	4615      	mov	r5, r2
 800a4ee:	461e      	mov	r6, r3
 800a4f0:	da0d      	bge.n	800a50e <__swhatbuf_r+0x2e>
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a4f8:	f04f 0100 	mov.w	r1, #0
 800a4fc:	bf14      	ite	ne
 800a4fe:	2340      	movne	r3, #64	@ 0x40
 800a500:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a504:	2000      	movs	r0, #0
 800a506:	6031      	str	r1, [r6, #0]
 800a508:	602b      	str	r3, [r5, #0]
 800a50a:	b016      	add	sp, #88	@ 0x58
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	466a      	mov	r2, sp
 800a510:	f000 f848 	bl	800a5a4 <_fstat_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	dbec      	blt.n	800a4f2 <__swhatbuf_r+0x12>
 800a518:	9901      	ldr	r1, [sp, #4]
 800a51a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a51e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a522:	4259      	negs	r1, r3
 800a524:	4159      	adcs	r1, r3
 800a526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a52a:	e7eb      	b.n	800a504 <__swhatbuf_r+0x24>

0800a52c <__smakebuf_r>:
 800a52c:	898b      	ldrh	r3, [r1, #12]
 800a52e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a530:	079d      	lsls	r5, r3, #30
 800a532:	4606      	mov	r6, r0
 800a534:	460c      	mov	r4, r1
 800a536:	d507      	bpl.n	800a548 <__smakebuf_r+0x1c>
 800a538:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	6123      	str	r3, [r4, #16]
 800a540:	2301      	movs	r3, #1
 800a542:	6163      	str	r3, [r4, #20]
 800a544:	b003      	add	sp, #12
 800a546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a548:	ab01      	add	r3, sp, #4
 800a54a:	466a      	mov	r2, sp
 800a54c:	f7ff ffc8 	bl	800a4e0 <__swhatbuf_r>
 800a550:	9f00      	ldr	r7, [sp, #0]
 800a552:	4605      	mov	r5, r0
 800a554:	4639      	mov	r1, r7
 800a556:	4630      	mov	r0, r6
 800a558:	f7ff f912 	bl	8009780 <_malloc_r>
 800a55c:	b948      	cbnz	r0, 800a572 <__smakebuf_r+0x46>
 800a55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a562:	059a      	lsls	r2, r3, #22
 800a564:	d4ee      	bmi.n	800a544 <__smakebuf_r+0x18>
 800a566:	f023 0303 	bic.w	r3, r3, #3
 800a56a:	f043 0302 	orr.w	r3, r3, #2
 800a56e:	81a3      	strh	r3, [r4, #12]
 800a570:	e7e2      	b.n	800a538 <__smakebuf_r+0xc>
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	6020      	str	r0, [r4, #0]
 800a576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	9b01      	ldr	r3, [sp, #4]
 800a57e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a582:	b15b      	cbz	r3, 800a59c <__smakebuf_r+0x70>
 800a584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a588:	4630      	mov	r0, r6
 800a58a:	f000 f81d 	bl	800a5c8 <_isatty_r>
 800a58e:	b128      	cbz	r0, 800a59c <__smakebuf_r+0x70>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f023 0303 	bic.w	r3, r3, #3
 800a596:	f043 0301 	orr.w	r3, r3, #1
 800a59a:	81a3      	strh	r3, [r4, #12]
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	431d      	orrs	r5, r3
 800a5a0:	81a5      	strh	r5, [r4, #12]
 800a5a2:	e7cf      	b.n	800a544 <__smakebuf_r+0x18>

0800a5a4 <_fstat_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	@ (800a5c4 <_fstat_r+0x20>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	f7f8 fb5d 	bl	8002c70 <_fstat>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d102      	bne.n	800a5c0 <_fstat_r+0x1c>
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	b103      	cbz	r3, 800a5c0 <_fstat_r+0x1c>
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	bf00      	nop
 800a5c4:	240003dc 	.word	0x240003dc

0800a5c8 <_isatty_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d06      	ldr	r5, [pc, #24]	@ (800a5e4 <_isatty_r+0x1c>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	f7f8 fb5c 	bl	8002c90 <_isatty>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_isatty_r+0x1a>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_isatty_r+0x1a>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	240003dc 	.word	0x240003dc

0800a5e8 <cos>:
 800a5e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ea:	eeb0 7b40 	vmov.f64	d7, d0
 800a5ee:	ee17 3a90 	vmov	r3, s15
 800a5f2:	4a21      	ldr	r2, [pc, #132]	@ (800a678 <cos+0x90>)
 800a5f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d806      	bhi.n	800a60a <cos+0x22>
 800a5fc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800a670 <cos+0x88>
 800a600:	b005      	add	sp, #20
 800a602:	f85d eb04 	ldr.w	lr, [sp], #4
 800a606:	f000 b887 	b.w	800a718 <__kernel_cos>
 800a60a:	4a1c      	ldr	r2, [pc, #112]	@ (800a67c <cos+0x94>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d904      	bls.n	800a61a <cos+0x32>
 800a610:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a614:	b005      	add	sp, #20
 800a616:	f85d fb04 	ldr.w	pc, [sp], #4
 800a61a:	4668      	mov	r0, sp
 800a61c:	f000 f93c 	bl	800a898 <__ieee754_rem_pio2>
 800a620:	f000 0003 	and.w	r0, r0, #3
 800a624:	2801      	cmp	r0, #1
 800a626:	d009      	beq.n	800a63c <cos+0x54>
 800a628:	2802      	cmp	r0, #2
 800a62a:	d010      	beq.n	800a64e <cos+0x66>
 800a62c:	b9b0      	cbnz	r0, 800a65c <cos+0x74>
 800a62e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a632:	ed9d 0b00 	vldr	d0, [sp]
 800a636:	f000 f86f 	bl	800a718 <__kernel_cos>
 800a63a:	e7eb      	b.n	800a614 <cos+0x2c>
 800a63c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a640:	ed9d 0b00 	vldr	d0, [sp]
 800a644:	f000 f8d0 	bl	800a7e8 <__kernel_sin>
 800a648:	eeb1 0b40 	vneg.f64	d0, d0
 800a64c:	e7e2      	b.n	800a614 <cos+0x2c>
 800a64e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a652:	ed9d 0b00 	vldr	d0, [sp]
 800a656:	f000 f85f 	bl	800a718 <__kernel_cos>
 800a65a:	e7f5      	b.n	800a648 <cos+0x60>
 800a65c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a660:	ed9d 0b00 	vldr	d0, [sp]
 800a664:	2001      	movs	r0, #1
 800a666:	f000 f8bf 	bl	800a7e8 <__kernel_sin>
 800a66a:	e7d3      	b.n	800a614 <cos+0x2c>
 800a66c:	f3af 8000 	nop.w
	...
 800a678:	3fe921fb 	.word	0x3fe921fb
 800a67c:	7fefffff 	.word	0x7fefffff

0800a680 <sin>:
 800a680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a682:	eeb0 7b40 	vmov.f64	d7, d0
 800a686:	ee17 3a90 	vmov	r3, s15
 800a68a:	4a21      	ldr	r2, [pc, #132]	@ (800a710 <sin+0x90>)
 800a68c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a690:	4293      	cmp	r3, r2
 800a692:	d807      	bhi.n	800a6a4 <sin+0x24>
 800a694:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800a708 <sin+0x88>
 800a698:	2000      	movs	r0, #0
 800a69a:	b005      	add	sp, #20
 800a69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a0:	f000 b8a2 	b.w	800a7e8 <__kernel_sin>
 800a6a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a714 <sin+0x94>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d904      	bls.n	800a6b4 <sin+0x34>
 800a6aa:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a6ae:	b005      	add	sp, #20
 800a6b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6b4:	4668      	mov	r0, sp
 800a6b6:	f000 f8ef 	bl	800a898 <__ieee754_rem_pio2>
 800a6ba:	f000 0003 	and.w	r0, r0, #3
 800a6be:	2801      	cmp	r0, #1
 800a6c0:	d00a      	beq.n	800a6d8 <sin+0x58>
 800a6c2:	2802      	cmp	r0, #2
 800a6c4:	d00f      	beq.n	800a6e6 <sin+0x66>
 800a6c6:	b9c0      	cbnz	r0, 800a6fa <sin+0x7a>
 800a6c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6cc:	ed9d 0b00 	vldr	d0, [sp]
 800a6d0:	2001      	movs	r0, #1
 800a6d2:	f000 f889 	bl	800a7e8 <__kernel_sin>
 800a6d6:	e7ea      	b.n	800a6ae <sin+0x2e>
 800a6d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6dc:	ed9d 0b00 	vldr	d0, [sp]
 800a6e0:	f000 f81a 	bl	800a718 <__kernel_cos>
 800a6e4:	e7e3      	b.n	800a6ae <sin+0x2e>
 800a6e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ea:	ed9d 0b00 	vldr	d0, [sp]
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	f000 f87a 	bl	800a7e8 <__kernel_sin>
 800a6f4:	eeb1 0b40 	vneg.f64	d0, d0
 800a6f8:	e7d9      	b.n	800a6ae <sin+0x2e>
 800a6fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6fe:	ed9d 0b00 	vldr	d0, [sp]
 800a702:	f000 f809 	bl	800a718 <__kernel_cos>
 800a706:	e7f5      	b.n	800a6f4 <sin+0x74>
	...
 800a710:	3fe921fb 	.word	0x3fe921fb
 800a714:	7fefffff 	.word	0x7fefffff

0800a718 <__kernel_cos>:
 800a718:	eeb0 5b40 	vmov.f64	d5, d0
 800a71c:	ee15 1a90 	vmov	r1, s11
 800a720:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a724:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a728:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800a72c:	d204      	bcs.n	800a738 <__kernel_cos+0x20>
 800a72e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800a732:	ee17 3a90 	vmov	r3, s15
 800a736:	b343      	cbz	r3, 800a78a <__kernel_cos+0x72>
 800a738:	ee25 6b05 	vmul.f64	d6, d5, d5
 800a73c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800a740:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800a7b0 <__kernel_cos+0x98>
 800a744:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a7b8 <__kernel_cos+0xa0>
 800a748:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a74c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a7c0 <__kernel_cos+0xa8>
 800a750:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a754:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a7c8 <__kernel_cos+0xb0>
 800a758:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a75c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a7d0 <__kernel_cos+0xb8>
 800a760:	4b1f      	ldr	r3, [pc, #124]	@ (800a7e0 <__kernel_cos+0xc8>)
 800a762:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a766:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a7d8 <__kernel_cos+0xc0>
 800a76a:	4299      	cmp	r1, r3
 800a76c:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a770:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a774:	ee24 4b06 	vmul.f64	d4, d4, d6
 800a778:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a77c:	eea6 1b04 	vfma.f64	d1, d6, d4
 800a780:	d804      	bhi.n	800a78c <__kernel_cos+0x74>
 800a782:	ee37 7b41 	vsub.f64	d7, d7, d1
 800a786:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a78a:	4770      	bx	lr
 800a78c:	4b15      	ldr	r3, [pc, #84]	@ (800a7e4 <__kernel_cos+0xcc>)
 800a78e:	4299      	cmp	r1, r3
 800a790:	d809      	bhi.n	800a7a6 <__kernel_cos+0x8e>
 800a792:	2200      	movs	r2, #0
 800a794:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800a798:	ec43 2b16 	vmov	d6, r2, r3
 800a79c:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a7a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a7a4:	e7ed      	b.n	800a782 <__kernel_cos+0x6a>
 800a7a6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800a7aa:	e7f7      	b.n	800a79c <__kernel_cos+0x84>
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	be8838d4 	.word	0xbe8838d4
 800a7b4:	bda8fae9 	.word	0xbda8fae9
 800a7b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a7bc:	3e21ee9e 	.word	0x3e21ee9e
 800a7c0:	809c52ad 	.word	0x809c52ad
 800a7c4:	be927e4f 	.word	0xbe927e4f
 800a7c8:	19cb1590 	.word	0x19cb1590
 800a7cc:	3efa01a0 	.word	0x3efa01a0
 800a7d0:	16c15177 	.word	0x16c15177
 800a7d4:	bf56c16c 	.word	0xbf56c16c
 800a7d8:	5555554c 	.word	0x5555554c
 800a7dc:	3fa55555 	.word	0x3fa55555
 800a7e0:	3fd33332 	.word	0x3fd33332
 800a7e4:	3fe90000 	.word	0x3fe90000

0800a7e8 <__kernel_sin>:
 800a7e8:	ee10 3a90 	vmov	r3, s1
 800a7ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7f0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a7f4:	d204      	bcs.n	800a800 <__kernel_sin+0x18>
 800a7f6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a7fa:	ee17 3a90 	vmov	r3, s15
 800a7fe:	b35b      	cbz	r3, 800a858 <__kernel_sin+0x70>
 800a800:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a804:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a808:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800a860 <__kernel_sin+0x78>
 800a80c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a868 <__kernel_sin+0x80>
 800a810:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a814:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a870 <__kernel_sin+0x88>
 800a818:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a81c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a878 <__kernel_sin+0x90>
 800a820:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a824:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a880 <__kernel_sin+0x98>
 800a828:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a82c:	b930      	cbnz	r0, 800a83c <__kernel_sin+0x54>
 800a82e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a888 <__kernel_sin+0xa0>
 800a832:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a836:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a83a:	4770      	bx	lr
 800a83c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a840:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800a844:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a848:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a84c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a890 <__kernel_sin+0xa8>
 800a850:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a854:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	f3af 8000 	nop.w
 800a860:	5acfd57c 	.word	0x5acfd57c
 800a864:	3de5d93a 	.word	0x3de5d93a
 800a868:	8a2b9ceb 	.word	0x8a2b9ceb
 800a86c:	be5ae5e6 	.word	0xbe5ae5e6
 800a870:	57b1fe7d 	.word	0x57b1fe7d
 800a874:	3ec71de3 	.word	0x3ec71de3
 800a878:	19c161d5 	.word	0x19c161d5
 800a87c:	bf2a01a0 	.word	0xbf2a01a0
 800a880:	1110f8a6 	.word	0x1110f8a6
 800a884:	3f811111 	.word	0x3f811111
 800a888:	55555549 	.word	0x55555549
 800a88c:	bfc55555 	.word	0xbfc55555
 800a890:	55555549 	.word	0x55555549
 800a894:	3fc55555 	.word	0x3fc55555

0800a898 <__ieee754_rem_pio2>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	eeb0 7b40 	vmov.f64	d7, d0
 800a89e:	ee17 5a90 	vmov	r5, s15
 800a8a2:	4b99      	ldr	r3, [pc, #612]	@ (800ab08 <__ieee754_rem_pio2+0x270>)
 800a8a4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a8a8:	429e      	cmp	r6, r3
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	d807      	bhi.n	800a8c0 <__ieee754_rem_pio2+0x28>
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	ed84 0b00 	vstr	d0, [r4]
 800a8b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a8bc:	2000      	movs	r0, #0
 800a8be:	e01b      	b.n	800a8f8 <__ieee754_rem_pio2+0x60>
 800a8c0:	4b92      	ldr	r3, [pc, #584]	@ (800ab0c <__ieee754_rem_pio2+0x274>)
 800a8c2:	429e      	cmp	r6, r3
 800a8c4:	d83b      	bhi.n	800a93e <__ieee754_rem_pio2+0xa6>
 800a8c6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800a8ca:	2d00      	cmp	r5, #0
 800a8cc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800aac8 <__ieee754_rem_pio2+0x230>
 800a8d0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800a8d4:	dd19      	ble.n	800a90a <__ieee754_rem_pio2+0x72>
 800a8d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a8da:	429e      	cmp	r6, r3
 800a8dc:	d00e      	beq.n	800a8fc <__ieee754_rem_pio2+0x64>
 800a8de:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800aad0 <__ieee754_rem_pio2+0x238>
 800a8e2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800a8e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a8ea:	ed84 6b00 	vstr	d6, [r4]
 800a8ee:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a8f2:	ed84 7b02 	vstr	d7, [r4, #8]
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	b008      	add	sp, #32
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
 800a8fc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800aad8 <__ieee754_rem_pio2+0x240>
 800a900:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800aae0 <__ieee754_rem_pio2+0x248>
 800a904:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a908:	e7eb      	b.n	800a8e2 <__ieee754_rem_pio2+0x4a>
 800a90a:	429e      	cmp	r6, r3
 800a90c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a910:	d00e      	beq.n	800a930 <__ieee754_rem_pio2+0x98>
 800a912:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800aad0 <__ieee754_rem_pio2+0x238>
 800a916:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a91a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a91e:	ed84 6b00 	vstr	d6, [r4]
 800a922:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a926:	f04f 30ff 	mov.w	r0, #4294967295
 800a92a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a92e:	e7e3      	b.n	800a8f8 <__ieee754_rem_pio2+0x60>
 800a930:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800aad8 <__ieee754_rem_pio2+0x240>
 800a934:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800aae0 <__ieee754_rem_pio2+0x248>
 800a938:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a93c:	e7eb      	b.n	800a916 <__ieee754_rem_pio2+0x7e>
 800a93e:	4b74      	ldr	r3, [pc, #464]	@ (800ab10 <__ieee754_rem_pio2+0x278>)
 800a940:	429e      	cmp	r6, r3
 800a942:	d870      	bhi.n	800aa26 <__ieee754_rem_pio2+0x18e>
 800a944:	f000 f8ec 	bl	800ab20 <fabs>
 800a948:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a94c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800aae8 <__ieee754_rem_pio2+0x250>
 800a950:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a954:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a958:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a95c:	ee17 0a90 	vmov	r0, s15
 800a960:	eeb1 4b45 	vneg.f64	d4, d5
 800a964:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800aac8 <__ieee754_rem_pio2+0x230>
 800a968:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a96c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800aad0 <__ieee754_rem_pio2+0x238>
 800a970:	281f      	cmp	r0, #31
 800a972:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a976:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a97a:	dc05      	bgt.n	800a988 <__ieee754_rem_pio2+0xf0>
 800a97c:	4b65      	ldr	r3, [pc, #404]	@ (800ab14 <__ieee754_rem_pio2+0x27c>)
 800a97e:	1e42      	subs	r2, r0, #1
 800a980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a984:	42b3      	cmp	r3, r6
 800a986:	d109      	bne.n	800a99c <__ieee754_rem_pio2+0x104>
 800a988:	ee16 3a90 	vmov	r3, s13
 800a98c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a990:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a994:	2b10      	cmp	r3, #16
 800a996:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a99a:	dc02      	bgt.n	800a9a2 <__ieee754_rem_pio2+0x10a>
 800a99c:	ed84 6b00 	vstr	d6, [r4]
 800a9a0:	e01a      	b.n	800a9d8 <__ieee754_rem_pio2+0x140>
 800a9a2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800aad8 <__ieee754_rem_pio2+0x240>
 800a9a6:	eeb0 6b40 	vmov.f64	d6, d0
 800a9aa:	eea4 6b03 	vfma.f64	d6, d4, d3
 800a9ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a9b2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a9b6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800aae0 <__ieee754_rem_pio2+0x248>
 800a9ba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a9be:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a9c2:	ee13 3a90 	vmov	r3, s7
 800a9c6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	2b31      	cmp	r3, #49	@ 0x31
 800a9ce:	dc17      	bgt.n	800aa00 <__ieee754_rem_pio2+0x168>
 800a9d0:	eeb0 0b46 	vmov.f64	d0, d6
 800a9d4:	ed84 3b00 	vstr	d3, [r4]
 800a9d8:	ed94 6b00 	vldr	d6, [r4]
 800a9dc:	2d00      	cmp	r5, #0
 800a9de:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a9e2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a9e6:	ed84 0b02 	vstr	d0, [r4, #8]
 800a9ea:	da85      	bge.n	800a8f8 <__ieee754_rem_pio2+0x60>
 800a9ec:	eeb1 6b46 	vneg.f64	d6, d6
 800a9f0:	eeb1 0b40 	vneg.f64	d0, d0
 800a9f4:	ed84 6b00 	vstr	d6, [r4]
 800a9f8:	ed84 0b02 	vstr	d0, [r4, #8]
 800a9fc:	4240      	negs	r0, r0
 800a9fe:	e77b      	b.n	800a8f8 <__ieee754_rem_pio2+0x60>
 800aa00:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800aaf0 <__ieee754_rem_pio2+0x258>
 800aa04:	eeb0 0b46 	vmov.f64	d0, d6
 800aa08:	eea4 0b07 	vfma.f64	d0, d4, d7
 800aa0c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800aa10:	eea4 6b07 	vfma.f64	d6, d4, d7
 800aa14:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800aaf8 <__ieee754_rem_pio2+0x260>
 800aa18:	eeb0 7b46 	vmov.f64	d7, d6
 800aa1c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800aa20:	ee30 6b47 	vsub.f64	d6, d0, d7
 800aa24:	e7ba      	b.n	800a99c <__ieee754_rem_pio2+0x104>
 800aa26:	4b3c      	ldr	r3, [pc, #240]	@ (800ab18 <__ieee754_rem_pio2+0x280>)
 800aa28:	429e      	cmp	r6, r3
 800aa2a:	d906      	bls.n	800aa3a <__ieee754_rem_pio2+0x1a2>
 800aa2c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800aa30:	ed80 7b02 	vstr	d7, [r0, #8]
 800aa34:	ed80 7b00 	vstr	d7, [r0]
 800aa38:	e740      	b.n	800a8bc <__ieee754_rem_pio2+0x24>
 800aa3a:	ee10 3a10 	vmov	r3, s0
 800aa3e:	1532      	asrs	r2, r6, #20
 800aa40:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800aa44:	4618      	mov	r0, r3
 800aa46:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800aa4a:	ec41 0b17 	vmov	d7, r0, r1
 800aa4e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aa52:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800ab00 <__ieee754_rem_pio2+0x268>
 800aa56:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800aa5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa5e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800aa62:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aa66:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800aa6a:	a808      	add	r0, sp, #32
 800aa6c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800aa70:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa74:	ed8d 6b04 	vstr	d6, [sp, #16]
 800aa78:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aa7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aa80:	2103      	movs	r1, #3
 800aa82:	ed30 7b02 	vldmdb	r0!, {d7}
 800aa86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8e:	460b      	mov	r3, r1
 800aa90:	f101 31ff 	add.w	r1, r1, #4294967295
 800aa94:	d0f5      	beq.n	800aa82 <__ieee754_rem_pio2+0x1ea>
 800aa96:	4921      	ldr	r1, [pc, #132]	@ (800ab1c <__ieee754_rem_pio2+0x284>)
 800aa98:	9101      	str	r1, [sp, #4]
 800aa9a:	2102      	movs	r1, #2
 800aa9c:	9100      	str	r1, [sp, #0]
 800aa9e:	a802      	add	r0, sp, #8
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	f000 f845 	bl	800ab30 <__kernel_rem_pio2>
 800aaa6:	2d00      	cmp	r5, #0
 800aaa8:	f6bf af26 	bge.w	800a8f8 <__ieee754_rem_pio2+0x60>
 800aaac:	ed94 7b00 	vldr	d7, [r4]
 800aab0:	eeb1 7b47 	vneg.f64	d7, d7
 800aab4:	ed84 7b00 	vstr	d7, [r4]
 800aab8:	ed94 7b02 	vldr	d7, [r4, #8]
 800aabc:	eeb1 7b47 	vneg.f64	d7, d7
 800aac0:	ed84 7b02 	vstr	d7, [r4, #8]
 800aac4:	e79a      	b.n	800a9fc <__ieee754_rem_pio2+0x164>
 800aac6:	bf00      	nop
 800aac8:	54400000 	.word	0x54400000
 800aacc:	3ff921fb 	.word	0x3ff921fb
 800aad0:	1a626331 	.word	0x1a626331
 800aad4:	3dd0b461 	.word	0x3dd0b461
 800aad8:	1a600000 	.word	0x1a600000
 800aadc:	3dd0b461 	.word	0x3dd0b461
 800aae0:	2e037073 	.word	0x2e037073
 800aae4:	3ba3198a 	.word	0x3ba3198a
 800aae8:	6dc9c883 	.word	0x6dc9c883
 800aaec:	3fe45f30 	.word	0x3fe45f30
 800aaf0:	2e000000 	.word	0x2e000000
 800aaf4:	3ba3198a 	.word	0x3ba3198a
 800aaf8:	252049c1 	.word	0x252049c1
 800aafc:	397b839a 	.word	0x397b839a
 800ab00:	00000000 	.word	0x00000000
 800ab04:	41700000 	.word	0x41700000
 800ab08:	3fe921fb 	.word	0x3fe921fb
 800ab0c:	4002d97b 	.word	0x4002d97b
 800ab10:	413921fb 	.word	0x413921fb
 800ab14:	0800b428 	.word	0x0800b428
 800ab18:	7fefffff 	.word	0x7fefffff
 800ab1c:	0800b4a8 	.word	0x0800b4a8

0800ab20 <fabs>:
 800ab20:	ec51 0b10 	vmov	r0, r1, d0
 800ab24:	4602      	mov	r2, r0
 800ab26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab2a:	ec43 2b10 	vmov	d0, r2, r3
 800ab2e:	4770      	bx	lr

0800ab30 <__kernel_rem_pio2>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	ed2d 8b06 	vpush	{d8-d10}
 800ab38:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800ab3c:	469b      	mov	fp, r3
 800ab3e:	9001      	str	r0, [sp, #4]
 800ab40:	4bbb      	ldr	r3, [pc, #748]	@ (800ae30 <__kernel_rem_pio2+0x300>)
 800ab42:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800ab44:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800ab48:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800ab4c:	f112 0f14 	cmn.w	r2, #20
 800ab50:	bfa8      	it	ge
 800ab52:	1ed3      	subge	r3, r2, #3
 800ab54:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ab58:	bfb8      	it	lt
 800ab5a:	2300      	movlt	r3, #0
 800ab5c:	f06f 0517 	mvn.w	r5, #23
 800ab60:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800ae18 <__kernel_rem_pio2+0x2e8>
 800ab64:	bfa4      	itt	ge
 800ab66:	2018      	movge	r0, #24
 800ab68:	fb93 f3f0 	sdivge	r3, r3, r0
 800ab6c:	fb03 5505 	mla	r5, r3, r5, r5
 800ab70:	eba3 040a 	sub.w	r4, r3, sl
 800ab74:	4415      	add	r5, r2
 800ab76:	460f      	mov	r7, r1
 800ab78:	eb09 060a 	add.w	r6, r9, sl
 800ab7c:	a81a      	add	r0, sp, #104	@ 0x68
 800ab7e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800ab82:	2200      	movs	r2, #0
 800ab84:	42b2      	cmp	r2, r6
 800ab86:	dd0e      	ble.n	800aba6 <__kernel_rem_pio2+0x76>
 800ab88:	aa1a      	add	r2, sp, #104	@ 0x68
 800ab8a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ab8e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800ab92:	2600      	movs	r6, #0
 800ab94:	454e      	cmp	r6, r9
 800ab96:	dc25      	bgt.n	800abe4 <__kernel_rem_pio2+0xb4>
 800ab98:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800ae18 <__kernel_rem_pio2+0x2e8>
 800ab9c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800aba0:	4614      	mov	r4, r2
 800aba2:	2000      	movs	r0, #0
 800aba4:	e015      	b.n	800abd2 <__kernel_rem_pio2+0xa2>
 800aba6:	42d4      	cmn	r4, r2
 800aba8:	d409      	bmi.n	800abbe <__kernel_rem_pio2+0x8e>
 800abaa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800abae:	ee07 1a90 	vmov	s15, r1
 800abb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800abb6:	eca0 7b02 	vstmia	r0!, {d7}
 800abba:	3201      	adds	r2, #1
 800abbc:	e7e2      	b.n	800ab84 <__kernel_rem_pio2+0x54>
 800abbe:	eeb0 7b46 	vmov.f64	d7, d6
 800abc2:	e7f8      	b.n	800abb6 <__kernel_rem_pio2+0x86>
 800abc4:	ecbc 5b02 	vldmia	ip!, {d5}
 800abc8:	ed94 6b00 	vldr	d6, [r4]
 800abcc:	3001      	adds	r0, #1
 800abce:	eea5 7b06 	vfma.f64	d7, d5, d6
 800abd2:	4550      	cmp	r0, sl
 800abd4:	f1a4 0408 	sub.w	r4, r4, #8
 800abd8:	ddf4      	ble.n	800abc4 <__kernel_rem_pio2+0x94>
 800abda:	ecae 7b02 	vstmia	lr!, {d7}
 800abde:	3601      	adds	r6, #1
 800abe0:	3208      	adds	r2, #8
 800abe2:	e7d7      	b.n	800ab94 <__kernel_rem_pio2+0x64>
 800abe4:	aa06      	add	r2, sp, #24
 800abe6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800ae20 <__kernel_rem_pio2+0x2f0>
 800abea:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800ae28 <__kernel_rem_pio2+0x2f8>
 800abee:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800abf2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800abf6:	9203      	str	r2, [sp, #12]
 800abf8:	9302      	str	r3, [sp, #8]
 800abfa:	464c      	mov	r4, r9
 800abfc:	00e3      	lsls	r3, r4, #3
 800abfe:	9304      	str	r3, [sp, #16]
 800ac00:	ab92      	add	r3, sp, #584	@ 0x248
 800ac02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac06:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800ac0a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800ac0c:	ab06      	add	r3, sp, #24
 800ac0e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ac12:	461e      	mov	r6, r3
 800ac14:	4620      	mov	r0, r4
 800ac16:	2800      	cmp	r0, #0
 800ac18:	f1a2 0208 	sub.w	r2, r2, #8
 800ac1c:	dc4a      	bgt.n	800acb4 <__kernel_rem_pio2+0x184>
 800ac1e:	4628      	mov	r0, r5
 800ac20:	9305      	str	r3, [sp, #20]
 800ac22:	f000 fa01 	bl	800b028 <scalbn>
 800ac26:	eeb0 8b40 	vmov.f64	d8, d0
 800ac2a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800ac2e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ac32:	f000 fa79 	bl	800b128 <floor>
 800ac36:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800ac3a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ac3e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ac42:	2d00      	cmp	r5, #0
 800ac44:	ee17 8a90 	vmov	r8, s15
 800ac48:	9b05      	ldr	r3, [sp, #20]
 800ac4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac4e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ac52:	dd41      	ble.n	800acd8 <__kernel_rem_pio2+0x1a8>
 800ac54:	1e60      	subs	r0, r4, #1
 800ac56:	aa06      	add	r2, sp, #24
 800ac58:	f1c5 0c18 	rsb	ip, r5, #24
 800ac5c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800ac60:	fa46 f20c 	asr.w	r2, r6, ip
 800ac64:	4490      	add	r8, r2
 800ac66:	fa02 f20c 	lsl.w	r2, r2, ip
 800ac6a:	1ab6      	subs	r6, r6, r2
 800ac6c:	aa06      	add	r2, sp, #24
 800ac6e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800ac72:	f1c5 0217 	rsb	r2, r5, #23
 800ac76:	4116      	asrs	r6, r2
 800ac78:	2e00      	cmp	r6, #0
 800ac7a:	dd3c      	ble.n	800acf6 <__kernel_rem_pio2+0x1c6>
 800ac7c:	f04f 0c00 	mov.w	ip, #0
 800ac80:	f108 0801 	add.w	r8, r8, #1
 800ac84:	4660      	mov	r0, ip
 800ac86:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800ac8a:	4564      	cmp	r4, ip
 800ac8c:	dc66      	bgt.n	800ad5c <__kernel_rem_pio2+0x22c>
 800ac8e:	2d00      	cmp	r5, #0
 800ac90:	dd03      	ble.n	800ac9a <__kernel_rem_pio2+0x16a>
 800ac92:	2d01      	cmp	r5, #1
 800ac94:	d072      	beq.n	800ad7c <__kernel_rem_pio2+0x24c>
 800ac96:	2d02      	cmp	r5, #2
 800ac98:	d07a      	beq.n	800ad90 <__kernel_rem_pio2+0x260>
 800ac9a:	2e02      	cmp	r6, #2
 800ac9c:	d12b      	bne.n	800acf6 <__kernel_rem_pio2+0x1c6>
 800ac9e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800aca2:	ee30 8b48 	vsub.f64	d8, d0, d8
 800aca6:	b330      	cbz	r0, 800acf6 <__kernel_rem_pio2+0x1c6>
 800aca8:	4628      	mov	r0, r5
 800acaa:	f000 f9bd 	bl	800b028 <scalbn>
 800acae:	ee38 8b40 	vsub.f64	d8, d8, d0
 800acb2:	e020      	b.n	800acf6 <__kernel_rem_pio2+0x1c6>
 800acb4:	ee20 7b09 	vmul.f64	d7, d0, d9
 800acb8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800acbc:	3801      	subs	r0, #1
 800acbe:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800acc2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800acc6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800acca:	eca6 0a01 	vstmia	r6!, {s0}
 800acce:	ed92 0b00 	vldr	d0, [r2]
 800acd2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800acd6:	e79e      	b.n	800ac16 <__kernel_rem_pio2+0xe6>
 800acd8:	d105      	bne.n	800ace6 <__kernel_rem_pio2+0x1b6>
 800acda:	1e62      	subs	r2, r4, #1
 800acdc:	a906      	add	r1, sp, #24
 800acde:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800ace2:	15f6      	asrs	r6, r6, #23
 800ace4:	e7c8      	b.n	800ac78 <__kernel_rem_pio2+0x148>
 800ace6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800acea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800acee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf2:	da31      	bge.n	800ad58 <__kernel_rem_pio2+0x228>
 800acf4:	2600      	movs	r6, #0
 800acf6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800acfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfe:	f040 809b 	bne.w	800ae38 <__kernel_rem_pio2+0x308>
 800ad02:	1e62      	subs	r2, r4, #1
 800ad04:	2000      	movs	r0, #0
 800ad06:	454a      	cmp	r2, r9
 800ad08:	da49      	bge.n	800ad9e <__kernel_rem_pio2+0x26e>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d062      	beq.n	800add4 <__kernel_rem_pio2+0x2a4>
 800ad0e:	3c01      	subs	r4, #1
 800ad10:	ab06      	add	r3, sp, #24
 800ad12:	3d18      	subs	r5, #24
 800ad14:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0f8      	beq.n	800ad0e <__kernel_rem_pio2+0x1de>
 800ad1c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ad20:	4628      	mov	r0, r5
 800ad22:	f000 f981 	bl	800b028 <scalbn>
 800ad26:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800ae20 <__kernel_rem_pio2+0x2f0>
 800ad2a:	1c62      	adds	r2, r4, #1
 800ad2c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ad2e:	00d3      	lsls	r3, r2, #3
 800ad30:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ad34:	4622      	mov	r2, r4
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	f280 80a8 	bge.w	800ae8c <__kernel_rem_pio2+0x35c>
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	2a00      	cmp	r2, #0
 800ad40:	f2c0 80c6 	blt.w	800aed0 <__kernel_rem_pio2+0x3a0>
 800ad44:	a96a      	add	r1, sp, #424	@ 0x1a8
 800ad46:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ad4a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800ae18 <__kernel_rem_pio2+0x2e8>
 800ad4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800ae34 <__kernel_rem_pio2+0x304>
 800ad52:	2000      	movs	r0, #0
 800ad54:	1aa1      	subs	r1, r4, r2
 800ad56:	e0b0      	b.n	800aeba <__kernel_rem_pio2+0x38a>
 800ad58:	2602      	movs	r6, #2
 800ad5a:	e78f      	b.n	800ac7c <__kernel_rem_pio2+0x14c>
 800ad5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad60:	b948      	cbnz	r0, 800ad76 <__kernel_rem_pio2+0x246>
 800ad62:	b122      	cbz	r2, 800ad6e <__kernel_rem_pio2+0x23e>
 800ad64:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ad68:	f843 2c04 	str.w	r2, [r3, #-4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f10c 0c01 	add.w	ip, ip, #1
 800ad72:	4610      	mov	r0, r2
 800ad74:	e789      	b.n	800ac8a <__kernel_rem_pio2+0x15a>
 800ad76:	ebae 0202 	sub.w	r2, lr, r2
 800ad7a:	e7f5      	b.n	800ad68 <__kernel_rem_pio2+0x238>
 800ad7c:	1e62      	subs	r2, r4, #1
 800ad7e:	ab06      	add	r3, sp, #24
 800ad80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ad88:	a906      	add	r1, sp, #24
 800ad8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ad8e:	e784      	b.n	800ac9a <__kernel_rem_pio2+0x16a>
 800ad90:	1e62      	subs	r2, r4, #1
 800ad92:	ab06      	add	r3, sp, #24
 800ad94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ad9c:	e7f4      	b.n	800ad88 <__kernel_rem_pio2+0x258>
 800ad9e:	ab06      	add	r3, sp, #24
 800ada0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada4:	3a01      	subs	r2, #1
 800ada6:	4318      	orrs	r0, r3
 800ada8:	e7ad      	b.n	800ad06 <__kernel_rem_pio2+0x1d6>
 800adaa:	3301      	adds	r3, #1
 800adac:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0fa      	beq.n	800adaa <__kernel_rem_pio2+0x27a>
 800adb4:	9a04      	ldr	r2, [sp, #16]
 800adb6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800adba:	446a      	add	r2, sp
 800adbc:	eb04 000b 	add.w	r0, r4, fp
 800adc0:	a91a      	add	r1, sp, #104	@ 0x68
 800adc2:	1c66      	adds	r6, r4, #1
 800adc4:	3a98      	subs	r2, #152	@ 0x98
 800adc6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800adca:	4423      	add	r3, r4
 800adcc:	42b3      	cmp	r3, r6
 800adce:	da04      	bge.n	800adda <__kernel_rem_pio2+0x2aa>
 800add0:	461c      	mov	r4, r3
 800add2:	e713      	b.n	800abfc <__kernel_rem_pio2+0xcc>
 800add4:	9a03      	ldr	r2, [sp, #12]
 800add6:	2301      	movs	r3, #1
 800add8:	e7e8      	b.n	800adac <__kernel_rem_pio2+0x27c>
 800adda:	9902      	ldr	r1, [sp, #8]
 800addc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ade0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ade4:	9104      	str	r1, [sp, #16]
 800ade6:	ee07 1a90 	vmov	s15, r1
 800adea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800adee:	2400      	movs	r4, #0
 800adf0:	eca0 7b02 	vstmia	r0!, {d7}
 800adf4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800ae18 <__kernel_rem_pio2+0x2e8>
 800adf8:	4686      	mov	lr, r0
 800adfa:	4554      	cmp	r4, sl
 800adfc:	dd03      	ble.n	800ae06 <__kernel_rem_pio2+0x2d6>
 800adfe:	eca2 7b02 	vstmia	r2!, {d7}
 800ae02:	3601      	adds	r6, #1
 800ae04:	e7e2      	b.n	800adcc <__kernel_rem_pio2+0x29c>
 800ae06:	ecbc 5b02 	vldmia	ip!, {d5}
 800ae0a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800ae0e:	3401      	adds	r4, #1
 800ae10:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ae14:	e7f1      	b.n	800adfa <__kernel_rem_pio2+0x2ca>
 800ae16:	bf00      	nop
	...
 800ae24:	3e700000 	.word	0x3e700000
 800ae28:	00000000 	.word	0x00000000
 800ae2c:	41700000 	.word	0x41700000
 800ae30:	0800b5f0 	.word	0x0800b5f0
 800ae34:	0800b5b0 	.word	0x0800b5b0
 800ae38:	4268      	negs	r0, r5
 800ae3a:	eeb0 0b48 	vmov.f64	d0, d8
 800ae3e:	f000 f8f3 	bl	800b028 <scalbn>
 800ae42:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800b010 <__kernel_rem_pio2+0x4e0>
 800ae46:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ae4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4e:	db17      	blt.n	800ae80 <__kernel_rem_pio2+0x350>
 800ae50:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800b018 <__kernel_rem_pio2+0x4e8>
 800ae54:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ae58:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ae5c:	aa06      	add	r2, sp, #24
 800ae5e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ae62:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ae66:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ae6a:	3518      	adds	r5, #24
 800ae6c:	ee10 3a10 	vmov	r3, s0
 800ae70:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ae74:	ee17 3a10 	vmov	r3, s14
 800ae78:	3401      	adds	r4, #1
 800ae7a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ae7e:	e74d      	b.n	800ad1c <__kernel_rem_pio2+0x1ec>
 800ae80:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ae84:	aa06      	add	r2, sp, #24
 800ae86:	ee10 3a10 	vmov	r3, s0
 800ae8a:	e7f6      	b.n	800ae7a <__kernel_rem_pio2+0x34a>
 800ae8c:	a806      	add	r0, sp, #24
 800ae8e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ae92:	9001      	str	r0, [sp, #4]
 800ae94:	ee07 0a90 	vmov	s15, r0
 800ae98:	3a01      	subs	r2, #1
 800ae9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae9e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800aea2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800aea6:	ed21 7b02 	vstmdb	r1!, {d7}
 800aeaa:	e744      	b.n	800ad36 <__kernel_rem_pio2+0x206>
 800aeac:	ecbc 5b02 	vldmia	ip!, {d5}
 800aeb0:	ecb5 6b02 	vldmia	r5!, {d6}
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800aeba:	4548      	cmp	r0, r9
 800aebc:	dc01      	bgt.n	800aec2 <__kernel_rem_pio2+0x392>
 800aebe:	4281      	cmp	r1, r0
 800aec0:	daf4      	bge.n	800aeac <__kernel_rem_pio2+0x37c>
 800aec2:	a842      	add	r0, sp, #264	@ 0x108
 800aec4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800aec8:	ed81 7b00 	vstr	d7, [r1]
 800aecc:	3a01      	subs	r2, #1
 800aece:	e736      	b.n	800ad3e <__kernel_rem_pio2+0x20e>
 800aed0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800aed2:	2a02      	cmp	r2, #2
 800aed4:	dc0a      	bgt.n	800aeec <__kernel_rem_pio2+0x3bc>
 800aed6:	2a00      	cmp	r2, #0
 800aed8:	dc2d      	bgt.n	800af36 <__kernel_rem_pio2+0x406>
 800aeda:	d046      	beq.n	800af6a <__kernel_rem_pio2+0x43a>
 800aedc:	f008 0007 	and.w	r0, r8, #7
 800aee0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800aee4:	ecbd 8b06 	vpop	{d8-d10}
 800aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeec:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800aeee:	2a03      	cmp	r2, #3
 800aef0:	d1f4      	bne.n	800aedc <__kernel_rem_pio2+0x3ac>
 800aef2:	a942      	add	r1, sp, #264	@ 0x108
 800aef4:	f1a3 0208 	sub.w	r2, r3, #8
 800aef8:	440a      	add	r2, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	4620      	mov	r0, r4
 800aefe:	2800      	cmp	r0, #0
 800af00:	f1a1 0108 	sub.w	r1, r1, #8
 800af04:	dc52      	bgt.n	800afac <__kernel_rem_pio2+0x47c>
 800af06:	4621      	mov	r1, r4
 800af08:	2901      	cmp	r1, #1
 800af0a:	f1a2 0208 	sub.w	r2, r2, #8
 800af0e:	dc5d      	bgt.n	800afcc <__kernel_rem_pio2+0x49c>
 800af10:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800b020 <__kernel_rem_pio2+0x4f0>
 800af14:	aa42      	add	r2, sp, #264	@ 0x108
 800af16:	4413      	add	r3, r2
 800af18:	2c01      	cmp	r4, #1
 800af1a:	dc67      	bgt.n	800afec <__kernel_rem_pio2+0x4bc>
 800af1c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800af20:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800af24:	2e00      	cmp	r6, #0
 800af26:	d167      	bne.n	800aff8 <__kernel_rem_pio2+0x4c8>
 800af28:	ed87 5b00 	vstr	d5, [r7]
 800af2c:	ed87 6b02 	vstr	d6, [r7, #8]
 800af30:	ed87 7b04 	vstr	d7, [r7, #16]
 800af34:	e7d2      	b.n	800aedc <__kernel_rem_pio2+0x3ac>
 800af36:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800b020 <__kernel_rem_pio2+0x4f0>
 800af3a:	aa42      	add	r2, sp, #264	@ 0x108
 800af3c:	4413      	add	r3, r2
 800af3e:	4622      	mov	r2, r4
 800af40:	2a00      	cmp	r2, #0
 800af42:	da24      	bge.n	800af8e <__kernel_rem_pio2+0x45e>
 800af44:	b34e      	cbz	r6, 800af9a <__kernel_rem_pio2+0x46a>
 800af46:	eeb1 7b46 	vneg.f64	d7, d6
 800af4a:	ed87 7b00 	vstr	d7, [r7]
 800af4e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800af52:	aa44      	add	r2, sp, #272	@ 0x110
 800af54:	2301      	movs	r3, #1
 800af56:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af5a:	429c      	cmp	r4, r3
 800af5c:	da20      	bge.n	800afa0 <__kernel_rem_pio2+0x470>
 800af5e:	b10e      	cbz	r6, 800af64 <__kernel_rem_pio2+0x434>
 800af60:	eeb1 7b47 	vneg.f64	d7, d7
 800af64:	ed87 7b02 	vstr	d7, [r7, #8]
 800af68:	e7b8      	b.n	800aedc <__kernel_rem_pio2+0x3ac>
 800af6a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800b020 <__kernel_rem_pio2+0x4f0>
 800af6e:	aa42      	add	r2, sp, #264	@ 0x108
 800af70:	4413      	add	r3, r2
 800af72:	2c00      	cmp	r4, #0
 800af74:	da05      	bge.n	800af82 <__kernel_rem_pio2+0x452>
 800af76:	b10e      	cbz	r6, 800af7c <__kernel_rem_pio2+0x44c>
 800af78:	eeb1 7b47 	vneg.f64	d7, d7
 800af7c:	ed87 7b00 	vstr	d7, [r7]
 800af80:	e7ac      	b.n	800aedc <__kernel_rem_pio2+0x3ac>
 800af82:	ed33 6b02 	vldmdb	r3!, {d6}
 800af86:	3c01      	subs	r4, #1
 800af88:	ee37 7b06 	vadd.f64	d7, d7, d6
 800af8c:	e7f1      	b.n	800af72 <__kernel_rem_pio2+0x442>
 800af8e:	ed33 7b02 	vldmdb	r3!, {d7}
 800af92:	3a01      	subs	r2, #1
 800af94:	ee36 6b07 	vadd.f64	d6, d6, d7
 800af98:	e7d2      	b.n	800af40 <__kernel_rem_pio2+0x410>
 800af9a:	eeb0 7b46 	vmov.f64	d7, d6
 800af9e:	e7d4      	b.n	800af4a <__kernel_rem_pio2+0x41a>
 800afa0:	ecb2 6b02 	vldmia	r2!, {d6}
 800afa4:	3301      	adds	r3, #1
 800afa6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800afaa:	e7d6      	b.n	800af5a <__kernel_rem_pio2+0x42a>
 800afac:	ed91 7b00 	vldr	d7, [r1]
 800afb0:	ed91 5b02 	vldr	d5, [r1, #8]
 800afb4:	3801      	subs	r0, #1
 800afb6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800afba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800afbe:	ed81 6b00 	vstr	d6, [r1]
 800afc2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800afc6:	ed81 7b02 	vstr	d7, [r1, #8]
 800afca:	e798      	b.n	800aefe <__kernel_rem_pio2+0x3ce>
 800afcc:	ed92 7b00 	vldr	d7, [r2]
 800afd0:	ed92 5b02 	vldr	d5, [r2, #8]
 800afd4:	3901      	subs	r1, #1
 800afd6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800afda:	ee37 7b46 	vsub.f64	d7, d7, d6
 800afde:	ed82 6b00 	vstr	d6, [r2]
 800afe2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800afe6:	ed82 7b02 	vstr	d7, [r2, #8]
 800afea:	e78d      	b.n	800af08 <__kernel_rem_pio2+0x3d8>
 800afec:	ed33 6b02 	vldmdb	r3!, {d6}
 800aff0:	3c01      	subs	r4, #1
 800aff2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aff6:	e78f      	b.n	800af18 <__kernel_rem_pio2+0x3e8>
 800aff8:	eeb1 5b45 	vneg.f64	d5, d5
 800affc:	eeb1 6b46 	vneg.f64	d6, d6
 800b000:	ed87 5b00 	vstr	d5, [r7]
 800b004:	eeb1 7b47 	vneg.f64	d7, d7
 800b008:	ed87 6b02 	vstr	d6, [r7, #8]
 800b00c:	e790      	b.n	800af30 <__kernel_rem_pio2+0x400>
 800b00e:	bf00      	nop
 800b010:	00000000 	.word	0x00000000
 800b014:	41700000 	.word	0x41700000
 800b018:	00000000 	.word	0x00000000
 800b01c:	3e700000 	.word	0x3e700000
	...

0800b028 <scalbn>:
 800b028:	ee10 1a90 	vmov	r1, s1
 800b02c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b030:	b98b      	cbnz	r3, 800b056 <scalbn+0x2e>
 800b032:	ee10 3a10 	vmov	r3, s0
 800b036:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800b03a:	4319      	orrs	r1, r3
 800b03c:	d00a      	beq.n	800b054 <scalbn+0x2c>
 800b03e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b0f0 <scalbn+0xc8>
 800b042:	4b37      	ldr	r3, [pc, #220]	@ (800b120 <scalbn+0xf8>)
 800b044:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b048:	4298      	cmp	r0, r3
 800b04a:	da0b      	bge.n	800b064 <scalbn+0x3c>
 800b04c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b0f8 <scalbn+0xd0>
 800b050:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b054:	4770      	bx	lr
 800b056:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d107      	bne.n	800b06e <scalbn+0x46>
 800b05e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b062:	4770      	bx	lr
 800b064:	ee10 1a90 	vmov	r1, s1
 800b068:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b06c:	3b36      	subs	r3, #54	@ 0x36
 800b06e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b072:	4290      	cmp	r0, r2
 800b074:	dd0d      	ble.n	800b092 <scalbn+0x6a>
 800b076:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b100 <scalbn+0xd8>
 800b07a:	ee10 3a90 	vmov	r3, s1
 800b07e:	eeb0 6b47 	vmov.f64	d6, d7
 800b082:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800b108 <scalbn+0xe0>
 800b086:	2b00      	cmp	r3, #0
 800b088:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b08c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b090:	4770      	bx	lr
 800b092:	4418      	add	r0, r3
 800b094:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800b098:	4298      	cmp	r0, r3
 800b09a:	dcec      	bgt.n	800b076 <scalbn+0x4e>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	dd0a      	ble.n	800b0b6 <scalbn+0x8e>
 800b0a0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b0a4:	ec53 2b10 	vmov	r2, r3, d0
 800b0a8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b0ac:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b0b0:	ec43 2b10 	vmov	d0, r2, r3
 800b0b4:	4770      	bx	lr
 800b0b6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800b0ba:	da09      	bge.n	800b0d0 <scalbn+0xa8>
 800b0bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800b0f8 <scalbn+0xd0>
 800b0c0:	ee10 3a90 	vmov	r3, s1
 800b0c4:	eeb0 6b47 	vmov.f64	d6, d7
 800b0c8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800b110 <scalbn+0xe8>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	e7db      	b.n	800b088 <scalbn+0x60>
 800b0d0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800b0d4:	ec53 2b10 	vmov	r2, r3, d0
 800b0d8:	3036      	adds	r0, #54	@ 0x36
 800b0da:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800b0de:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800b0e2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800b118 <scalbn+0xf0>
 800b0e6:	ec43 2b10 	vmov	d0, r2, r3
 800b0ea:	e7b1      	b.n	800b050 <scalbn+0x28>
 800b0ec:	f3af 8000 	nop.w
 800b0f0:	00000000 	.word	0x00000000
 800b0f4:	43500000 	.word	0x43500000
 800b0f8:	c2f8f359 	.word	0xc2f8f359
 800b0fc:	01a56e1f 	.word	0x01a56e1f
 800b100:	8800759c 	.word	0x8800759c
 800b104:	7e37e43c 	.word	0x7e37e43c
 800b108:	8800759c 	.word	0x8800759c
 800b10c:	fe37e43c 	.word	0xfe37e43c
 800b110:	c2f8f359 	.word	0xc2f8f359
 800b114:	81a56e1f 	.word	0x81a56e1f
 800b118:	00000000 	.word	0x00000000
 800b11c:	3c900000 	.word	0x3c900000
 800b120:	ffff3cb0 	.word	0xffff3cb0
 800b124:	00000000 	.word	0x00000000

0800b128 <floor>:
 800b128:	ee10 3a90 	vmov	r3, s1
 800b12c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800b130:	ee10 2a10 	vmov	r2, s0
 800b134:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800b138:	2913      	cmp	r1, #19
 800b13a:	b530      	push	{r4, r5, lr}
 800b13c:	4615      	mov	r5, r2
 800b13e:	dc33      	bgt.n	800b1a8 <floor+0x80>
 800b140:	2900      	cmp	r1, #0
 800b142:	da18      	bge.n	800b176 <floor+0x4e>
 800b144:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800b208 <floor+0xe0>
 800b148:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b14c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b154:	dd0a      	ble.n	800b16c <floor+0x44>
 800b156:	2b00      	cmp	r3, #0
 800b158:	da50      	bge.n	800b1fc <floor+0xd4>
 800b15a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b15e:	4313      	orrs	r3, r2
 800b160:	2200      	movs	r2, #0
 800b162:	4293      	cmp	r3, r2
 800b164:	4b2a      	ldr	r3, [pc, #168]	@ (800b210 <floor+0xe8>)
 800b166:	bf08      	it	eq
 800b168:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b16c:	4619      	mov	r1, r3
 800b16e:	4610      	mov	r0, r2
 800b170:	ec41 0b10 	vmov	d0, r0, r1
 800b174:	e01f      	b.n	800b1b6 <floor+0x8e>
 800b176:	4827      	ldr	r0, [pc, #156]	@ (800b214 <floor+0xec>)
 800b178:	4108      	asrs	r0, r1
 800b17a:	ea03 0400 	and.w	r4, r3, r0
 800b17e:	4314      	orrs	r4, r2
 800b180:	d019      	beq.n	800b1b6 <floor+0x8e>
 800b182:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b208 <floor+0xe0>
 800b186:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b18a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b192:	ddeb      	ble.n	800b16c <floor+0x44>
 800b194:	2b00      	cmp	r3, #0
 800b196:	bfbe      	ittt	lt
 800b198:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800b19c:	410a      	asrlt	r2, r1
 800b19e:	189b      	addlt	r3, r3, r2
 800b1a0:	ea23 0300 	bic.w	r3, r3, r0
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	e7e1      	b.n	800b16c <floor+0x44>
 800b1a8:	2933      	cmp	r1, #51	@ 0x33
 800b1aa:	dd05      	ble.n	800b1b8 <floor+0x90>
 800b1ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b1b0:	d101      	bne.n	800b1b6 <floor+0x8e>
 800b1b2:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b1b6:	bd30      	pop	{r4, r5, pc}
 800b1b8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	40e0      	lsrs	r0, r4
 800b1c2:	4210      	tst	r0, r2
 800b1c4:	d0f7      	beq.n	800b1b6 <floor+0x8e>
 800b1c6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800b208 <floor+0xe0>
 800b1ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b1ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d6:	ddc9      	ble.n	800b16c <floor+0x44>
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da02      	bge.n	800b1e2 <floor+0xba>
 800b1dc:	2914      	cmp	r1, #20
 800b1de:	d103      	bne.n	800b1e8 <floor+0xc0>
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	ea22 0200 	bic.w	r2, r2, r0
 800b1e6:	e7c1      	b.n	800b16c <floor+0x44>
 800b1e8:	2401      	movs	r4, #1
 800b1ea:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800b1ee:	fa04 f101 	lsl.w	r1, r4, r1
 800b1f2:	440a      	add	r2, r1
 800b1f4:	42aa      	cmp	r2, r5
 800b1f6:	bf38      	it	cc
 800b1f8:	191b      	addcc	r3, r3, r4
 800b1fa:	e7f2      	b.n	800b1e2 <floor+0xba>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4613      	mov	r3, r2
 800b200:	e7b4      	b.n	800b16c <floor+0x44>
 800b202:	bf00      	nop
 800b204:	f3af 8000 	nop.w
 800b208:	8800759c 	.word	0x8800759c
 800b20c:	7e37e43c 	.word	0x7e37e43c
 800b210:	bff00000 	.word	0xbff00000
 800b214:	000fffff 	.word	0x000fffff

0800b218 <_init>:
 800b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21a:	bf00      	nop
 800b21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21e:	bc08      	pop	{r3}
 800b220:	469e      	mov	lr, r3
 800b222:	4770      	bx	lr

0800b224 <_fini>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	bf00      	nop
 800b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22a:	bc08      	pop	{r3}
 800b22c:	469e      	mov	lr, r3
 800b22e:	4770      	bx	lr
