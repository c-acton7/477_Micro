
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8f8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800fb98  0800fb98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801018c  0801018c  0001118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010194  08010194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010198  08010198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0801019c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000680  2400007c  08010218  0001207c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006fc  08010218  000126fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b2b3  00000000  00000000  000120aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d34  00000000  00000000  0002d35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001870  00000000  00000000  00031098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012e2  00000000  00000000  00032908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b75a  00000000  00000000  00033bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022b4a  00000000  00000000  0006f344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167148  00000000  00000000  00091e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f8fd6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006d70  00000000  00000000  001f901c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  001ffd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fb80 	.word	0x0800fb80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800fb80 	.word	0x0800fb80

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:

//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80003c0:	bf00      	nop
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <RA8875_BUS_FREE+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a06      	ldr	r2, [pc, #24]	@ (80003e4 <RA8875_BUS_FREE+0x28>)
 80003ca:	8812      	ldrh	r2, [r2, #0]
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f7      	beq.n	80003c2 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	240000a0 	.word	0x240000a0
 80003e4:	240000a4 	.word	0x240000a4

080003e8 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f87f 	bl	80004f8 <RA8875_write_command>
  return RA8875_read_data ();
 80003fa:	f000 f841 	bl	8000480 <RA8875_read_data>
 80003fe:	4603      	mov	r3, r0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000412:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <RA8875_write_data+0x68>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <RA8875_write_data+0x6c>)
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d105      	bne.n	800042e <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ffca 	bl	80003bc <RA8875_BUS_FREE>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01b      	beq.n	8000466 <RA8875_write_data+0x5e>
  }
  uint8_t rs_rw_info = 0b00000000;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	4810      	ldr	r0, [pc, #64]	@ (8000478 <RA8875_write_data+0x70>)
 8000438:	f005 fcd4 	bl	8005de4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800043c:	f107 010f 	add.w	r1, r7, #15
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	2201      	movs	r2, #1
 8000446:	480d      	ldr	r0, [pc, #52]	@ (800047c <RA8875_write_data+0x74>)
 8000448:	f009 fc96 	bl	8009d78 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800044c:	1df9      	adds	r1, r7, #7
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
 8000452:	2201      	movs	r2, #1
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <RA8875_write_data+0x74>)
 8000456:	f009 fc8f 	bl	8009d78 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <RA8875_write_data+0x70>)
 8000460:	f005 fcc0 	bl	8005de4 <HAL_GPIO_WritePin>
 8000464:	e000      	b.n	8000468 <RA8875_write_data+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000466:	bf00      	nop
}
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	240000a0 	.word	0x240000a0
 8000474:	240000a4 	.word	0x240000a4
 8000478:	58020000 	.word	0x58020000
 800047c:	24000118 	.word	0x24000118

08000480 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <RA8875_read_data+0x68>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <RA8875_read_data+0x6c>)
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	4013      	ands	r3, r2
 8000496:	2b00      	cmp	r3, #0
 8000498:	d107      	bne.n	80004aa <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff8e 	bl	80003bc <RA8875_BUS_FREE>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d101      	bne.n	80004aa <RA8875_read_data+0x2a>
 80004a6:	2300      	movs	r3, #0
 80004a8:	e01a      	b.n	80004e0 <RA8875_read_data+0x60>
  }
  uint8_t rs_rw_info = 0b01000000;
 80004aa:	2340      	movs	r3, #64	@ 0x40
 80004ac:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2110      	movs	r1, #16
 80004b2:	480f      	ldr	r0, [pc, #60]	@ (80004f0 <RA8875_read_data+0x70>)
 80004b4:	f005 fc96 	bl	8005de4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 80004b8:	1db9      	adds	r1, r7, #6
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	2201      	movs	r2, #1
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <RA8875_read_data+0x74>)
 80004c2:	f009 fc59 	bl	8009d78 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	2201      	movs	r2, #1
 80004ce:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <RA8875_read_data+0x74>)
 80004d0:	f009 fe40 	bl	800a154 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2110      	movs	r1, #16
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <RA8875_read_data+0x70>)
 80004da:	f005 fc83 	bl	8005de4 <HAL_GPIO_WritePin>
  return data;
 80004de:	79fb      	ldrb	r3, [r7, #7]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	240000a0 	.word	0x240000a0
 80004ec:	240000a4 	.word	0x240000a4
 80004f0:	58020000 	.word	0x58020000
 80004f4:	24000118 	.word	0x24000118

080004f8 <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <RA8875_write_command+0x68>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <RA8875_write_command+0x6c>)
 800050a:	8812      	ldrh	r2, [r2, #0]
 800050c:	4013      	ands	r3, r2
 800050e:	2b00      	cmp	r3, #0
 8000510:	d105      	bne.n	800051e <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ff52 	bl	80003bc <RA8875_BUS_FREE>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d01b      	beq.n	8000556 <RA8875_write_command+0x5e>
  }
  uint8_t rs_rw_info = 0b10000000;
 800051e:	2380      	movs	r3, #128	@ 0x80
 8000520:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <RA8875_write_command+0x70>)
 8000528:	f005 fc5c 	bl	8005de4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800052c:	f107 010f 	add.w	r1, r7, #15
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	2201      	movs	r2, #1
 8000536:	480d      	ldr	r0, [pc, #52]	@ (800056c <RA8875_write_command+0x74>)
 8000538:	f009 fc1e 	bl	8009d78 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800053c:	1df9      	adds	r1, r7, #7
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	2201      	movs	r2, #1
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <RA8875_write_command+0x74>)
 8000546:	f009 fc17 	bl	8009d78 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <RA8875_write_command+0x70>)
 8000550:	f005 fc48 	bl	8005de4 <HAL_GPIO_WritePin>
 8000554:	e000      	b.n	8000558 <RA8875_write_command+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000556:	bf00      	nop
}
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	240000a0 	.word	0x240000a0
 8000564:	240000a4 	.word	0x240000a4
 8000568:	58020000 	.word	0x58020000
 800056c:	24000118 	.word	0x24000118

08000570 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 8000576:	2040      	movs	r0, #64	@ 0x40
 8000578:	f7ff ffbe 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 800057c:	f7ff ff80 	bl	8000480 <RA8875_read_data>
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800058a:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff3a 	bl	8000408 <RA8875_write_data>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff1a 	bl	80003e8 <RA8875_read_reg>
 80005b4:	4603      	mov	r3, r0
 80005b6:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 80005b8:	7bfa      	ldrb	r2, [r7, #15]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	4013      	ands	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f3      	bne.n	80005ac <RA8875_wait_poll+0x10>
 80005c4:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <RA8875_apply_rotation_x+0x34>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d108      	bne.n	80005f4 <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <RA8875_apply_rotation_x+0x38>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	80fb      	strh	r3, [r7, #6]
      break;
 80005f2:	bf00      	nop
  }

  return x;
 80005f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	2400009d 	.word	0x2400009d
 8000608:	24000098 	.word	0x24000098

0800060c <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <RA8875_apply_rotation_y+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d108      	bne.n	8000630 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <RA8875_apply_rotation_y+0x44>)
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	3b01      	subs	r3, #1
 800062a:	b29b      	uxth	r3, r3
 800062c:	80fb      	strh	r3, [r7, #6]
      break;
 800062e:	bf00      	nop
  }

  return y + _voffset;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <RA8875_apply_rotation_y+0x48>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	4413      	add	r3, r2
 800063a:	b29b      	uxth	r3, r3
 800063c:	b21b      	sxth	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2400009d 	.word	0x2400009d
 8000650:	2400009a 	.word	0x2400009a
 8000654:	2400009e 	.word	0x2400009e

08000658 <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4603      	mov	r3, r0
 800066c:	80bb      	strh	r3, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	807b      	strh	r3, [r7, #2]
 8000672:	4613      	mov	r3, r2
 8000674:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffa8 	bl	80005d0 <RA8875_apply_rotation_x>
 8000680:	4603      	mov	r3, r0
 8000682:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000684:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffbf 	bl	800060c <RA8875_apply_rotation_y>
 800068e:	4603      	mov	r3, r0
 8000690:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff9a 	bl	80005d0 <RA8875_apply_rotation_x>
 800069c:	4603      	mov	r3, r0
 800069e:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 80006a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffb1 	bl	800060c <RA8875_apply_rotation_y>
 80006aa:	4603      	mov	r3, r0
 80006ac:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 80006ae:	2091      	movs	r0, #145	@ 0x91
 80006b0:	f7ff ff22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fea5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 80006be:	2092      	movs	r0, #146	@ 0x92
 80006c0:	f7ff ff1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 80006c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c8:	121b      	asrs	r3, r3, #8
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fe9a 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 80006d4:	2093      	movs	r0, #147	@ 0x93
 80006d6:	f7ff ff0f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe92 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 80006e4:	2094      	movs	r0, #148	@ 0x94
 80006e6:	f7ff ff07 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80006ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ee:	121b      	asrs	r3, r3, #8
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fe87 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80006fa:	2095      	movs	r0, #149	@ 0x95
 80006fc:	f7ff fefc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe7f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 800070a:	2096      	movs	r0, #150	@ 0x96
 800070c:	f7ff fef4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000714:	121b      	asrs	r3, r3, #8
 8000716:	b21b      	sxth	r3, r3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fe74 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000720:	2097      	movs	r0, #151	@ 0x97
 8000722:	f7ff fee9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000726:	883b      	ldrh	r3, [r7, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fe6c 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000730:	2098      	movs	r0, #152	@ 0x98
 8000732:	f7ff fee1 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000736:	f9b7 3000 	ldrsh.w	r3, [r7]
 800073a:	121b      	asrs	r3, r3, #8
 800073c:	b21b      	sxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe61 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000746:	2063      	movs	r0, #99	@ 0x63
 8000748:	f7ff fed6 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 800074c:	8b3b      	ldrh	r3, [r7, #24]
 800074e:	0adb      	lsrs	r3, r3, #11
 8000750:	b29b      	uxth	r3, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe57 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 800075a:	2064      	movs	r0, #100	@ 0x64
 800075c:	f7ff fecc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000760:	8b3b      	ldrh	r3, [r7, #24]
 8000762:	115b      	asrs	r3, r3, #5
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe4b 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000772:	2065      	movs	r0, #101	@ 0x65
 8000774:	f7ff fec0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000778:	8b3b      	ldrh	r3, [r7, #24]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe40 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000788:	2090      	movs	r0, #144	@ 0x90
 800078a:	f7ff feb5 	bl	80004f8 <RA8875_write_command>
  if (filled)
 800078e:	7f3b      	ldrb	r3, [r7, #28]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000794:	20b0      	movs	r0, #176	@ 0xb0
 8000796:	f7ff fe37 	bl	8000408 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 800079a:	e002      	b.n	80007a2 <rectHelper+0x14a>
    RA8875_write_data (0x90);
 800079c:	2090      	movs	r0, #144	@ 0x90
 800079e:	f7ff fe33 	bl	8000408 <RA8875_write_data>
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd90      	pop	{r4, r7, pc}

080007aa <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 80007aa:	b590      	push	{r4, r7, lr}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4604      	mov	r4, r0
 80007b2:	4608      	mov	r0, r1
 80007b4:	4611      	mov	r1, r2
 80007b6:	461a      	mov	r2, r3
 80007b8:	4623      	mov	r3, r4
 80007ba:	80fb      	strh	r3, [r7, #6]
 80007bc:	4603      	mov	r3, r0
 80007be:	80bb      	strh	r3, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 80007c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff feff 	bl	80005d0 <RA8875_apply_rotation_x>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 80007d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff16 	bl	800060c <RA8875_apply_rotation_y>
 80007e0:	4603      	mov	r3, r0
 80007e2:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 80007e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fef1 	bl	80005d0 <RA8875_apply_rotation_x>
 80007ee:	4603      	mov	r3, r0
 80007f0:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 80007f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff08 	bl	800060c <RA8875_apply_rotation_y>
 80007fc:	4603      	mov	r3, r0
 80007fe:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000800:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fee3 	bl	80005d0 <RA8875_apply_rotation_x>
 800080a:	4603      	mov	r3, r0
 800080c:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 800080e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fefa 	bl	800060c <RA8875_apply_rotation_y>
 8000818:	4603      	mov	r3, r0
 800081a:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 800081c:	2091      	movs	r0, #145	@ 0x91
 800081e:	f7ff fe6b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0);
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fdee 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 800082c:	2092      	movs	r0, #146	@ 0x92
 800082e:	f7ff fe63 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	121b      	asrs	r3, r3, #8
 8000838:	b21b      	sxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fde3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000842:	2093      	movs	r0, #147	@ 0x93
 8000844:	f7ff fe58 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0);
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fddb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000852:	2094      	movs	r0, #148	@ 0x94
 8000854:	f7ff fe50 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 8000858:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800085c:	121b      	asrs	r3, r3, #8
 800085e:	b21b      	sxth	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fdd0 	bl	8000408 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 8000868:	2095      	movs	r0, #149	@ 0x95
 800086a:	f7ff fe45 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1);
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fdc8 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000878:	2096      	movs	r0, #150	@ 0x96
 800087a:	f7ff fe3d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 800087e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000882:	121b      	asrs	r3, r3, #8
 8000884:	b21b      	sxth	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fdbd 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x97);
 800088e:	2097      	movs	r0, #151	@ 0x97
 8000890:	f7ff fe32 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1);
 8000894:	883b      	ldrh	r3, [r7, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fdb5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 800089e:	2098      	movs	r0, #152	@ 0x98
 80008a0:	f7ff fe2a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 80008a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008a8:	121b      	asrs	r3, r3, #8
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fdaa 	bl	8000408 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 80008b4:	20a9      	movs	r0, #169	@ 0xa9
 80008b6:	f7ff fe1f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2);
 80008ba:	8b3b      	ldrh	r3, [r7, #24]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fda2 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAA);
 80008c4:	20aa      	movs	r0, #170	@ 0xaa
 80008c6:	f7ff fe17 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 80008ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008ce:	121b      	asrs	r3, r3, #8
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fd97 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAB);
 80008da:	20ab      	movs	r0, #171	@ 0xab
 80008dc:	f7ff fe0c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2);
 80008e0:	8bbb      	ldrh	r3, [r7, #28]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fd8f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAC);
 80008ea:	20ac      	movs	r0, #172	@ 0xac
 80008ec:	f7ff fe04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 80008f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008f4:	121b      	asrs	r3, r3, #8
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fd84 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000900:	2063      	movs	r0, #99	@ 0x63
 8000902:	f7ff fdf9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000906:	8c3b      	ldrh	r3, [r7, #32]
 8000908:	0adb      	lsrs	r3, r3, #11
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fd7a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f7ff fdef 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800091a:	8c3b      	ldrh	r3, [r7, #32]
 800091c:	115b      	asrs	r3, r3, #5
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fd6e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 800092c:	2065      	movs	r0, #101	@ 0x65
 800092e:	f7ff fde3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000932:	8c3b      	ldrh	r3, [r7, #32]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 031f 	and.w	r3, r3, #31
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fd63 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000942:	2090      	movs	r0, #144	@ 0x90
 8000944:	f7ff fdd8 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000950:	20a1      	movs	r0, #161	@ 0xa1
 8000952:	f7ff fd59 	bl	8000408 <RA8875_write_data>
 8000956:	e002      	b.n	800095e <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 8000958:	2081      	movs	r0, #129	@ 0x81
 800095a:	f7ff fd55 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	2090      	movs	r0, #144	@ 0x90
 8000962:	f7ff fe1b 	bl	800059c <RA8875_wait_poll>
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}

0800096e <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 800096e:	b590      	push	{r4, r7, lr}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4623      	mov	r3, r4
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	4603      	mov	r3, r0
 8000982:	80bb      	strh	r3, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 800098c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe1d 	bl	80005d0 <RA8875_apply_rotation_x>
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 800099a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe34 	bl	800060c <RA8875_apply_rotation_y>
 80009a4:	4603      	mov	r3, r0
 80009a6:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 80009a8:	20a5      	movs	r0, #165	@ 0xa5
 80009aa:	f7ff fda5 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd28 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA6);
 80009b8:	20a6      	movs	r0, #166	@ 0xa6
 80009ba:	f7ff fd9d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	121b      	asrs	r3, r3, #8
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd1d 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA7);
 80009ce:	20a7      	movs	r0, #167	@ 0xa7
 80009d0:	f7ff fd92 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter);
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd15 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA8);
 80009de:	20a8      	movs	r0, #168	@ 0xa8
 80009e0:	f7ff fd8a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 80009e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009e8:	121b      	asrs	r3, r3, #8
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fd0a 	bl	8000408 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 80009f4:	20a1      	movs	r0, #161	@ 0xa1
 80009f6:	f7ff fd7f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis);
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd02 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000a04:	20a2      	movs	r0, #162	@ 0xa2
 8000a06:	f7ff fd77 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000a0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a0e:	121b      	asrs	r3, r3, #8
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fcf7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000a1a:	20a3      	movs	r0, #163	@ 0xa3
 8000a1c:	f7ff fd6c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fcef 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000a2a:	20a4      	movs	r0, #164	@ 0xa4
 8000a2c:	f7ff fd64 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000a30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fce4 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000a40:	2063      	movs	r0, #99	@ 0x63
 8000a42:	f7ff fd59 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000a46:	8b3b      	ldrh	r3, [r7, #24]
 8000a48:	0adb      	lsrs	r3, r3, #11
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fcda 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000a54:	2064      	movs	r0, #100	@ 0x64
 8000a56:	f7ff fd4f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000a5a:	8b3b      	ldrh	r3, [r7, #24]
 8000a5c:	115b      	asrs	r3, r3, #5
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fcce 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000a6c:	2065      	movs	r0, #101	@ 0x65
 8000a6e:	f7ff fd43 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fcc3 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000a82:	20a0      	movs	r0, #160	@ 0xa0
 8000a84:	f7ff fd38 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000a88:	7f3b      	ldrb	r3, [r7, #28]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000a8e:	20c0      	movs	r0, #192	@ 0xc0
 8000a90:	f7ff fcba 	bl	8000408 <RA8875_write_data>
 8000a94:	e002      	b.n	8000a9c <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000a96:	2080      	movs	r0, #128	@ 0x80
 8000a98:	f7ff fcb6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	20a0      	movs	r0, #160	@ 0xa0
 8000aa0:	f7ff fd7c 	bl	800059c <RA8875_wait_poll>
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}

08000aac <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4623      	mov	r3, r4
 8000abc:	80fb      	strh	r3, [r7, #6]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80bb      	strh	r3, [r7, #4]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	807b      	strh	r3, [r7, #2]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fd7e 	bl	80005d0 <RA8875_apply_rotation_x>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000ad8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd95 	bl	800060c <RA8875_apply_rotation_y>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000ae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd70 	bl	80005d0 <RA8875_apply_rotation_x>
 8000af0:	4603      	mov	r3, r0
 8000af2:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000af4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd87 	bl	800060c <RA8875_apply_rotation_y>
 8000afe:	4603      	mov	r3, r0
 8000b00:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 8000b02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dd05      	ble.n	8000b1a <roundRectHelper+0x6e>
 8000b0e:	1cba      	adds	r2, r7, #2
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc3b 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8000b1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dd05      	ble.n	8000b32 <roundRectHelper+0x86>
 8000b26:	463a      	mov	r2, r7
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fc2f 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 8000b32:	2091      	movs	r0, #145	@ 0x91
 8000b34:	f7ff fce0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 8000b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fc62 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000b44:	2092      	movs	r0, #146	@ 0x92
 8000b46:	f7ff fcd7 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4e:	121b      	asrs	r3, r3, #8
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fc57 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000b5a:	2093      	movs	r0, #147	@ 0x93
 8000b5c:	f7ff fccc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 8000b60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc4e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000b6c:	2094      	movs	r0, #148	@ 0x94
 8000b6e:	f7ff fcc3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b76:	121b      	asrs	r3, r3, #8
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc43 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000b82:	2095      	movs	r0, #149	@ 0x95
 8000b84:	f7ff fcb8 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fc3a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000b94:	2096      	movs	r0, #150	@ 0x96
 8000b96:	f7ff fcaf 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	121b      	asrs	r3, r3, #8
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc2f 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000baa:	2097      	movs	r0, #151	@ 0x97
 8000bac:	f7ff fca4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000bb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc26 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000bbc:	2098      	movs	r0, #152	@ 0x98
 8000bbe:	f7ff fc9b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000bc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc6:	121b      	asrs	r3, r3, #8
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc1b 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA1);
 8000bd2:	20a1      	movs	r0, #161	@ 0xa1
 8000bd4:	f7ff fc90 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bd8:	8b3b      	ldrh	r3, [r7, #24]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fc13 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000be2:	20a2      	movs	r0, #162	@ 0xa2
 8000be4:	f7ff fc88 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000be8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000bec:	121b      	asrs	r3, r3, #8
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc08 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA3);
 8000bf8:	20a3      	movs	r0, #163	@ 0xa3
 8000bfa:	f7ff fc7d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bfe:	8b3b      	ldrh	r3, [r7, #24]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc00 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000c08:	20a4      	movs	r0, #164	@ 0xa4
 8000c0a:	f7ff fc75 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000c0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c12:	121b      	asrs	r3, r3, #8
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbf5 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c1e:	2063      	movs	r0, #99	@ 0x63
 8000c20:	f7ff fc6a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c24:	8bbb      	ldrh	r3, [r7, #28]
 8000c26:	0adb      	lsrs	r3, r3, #11
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fbeb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c32:	2064      	movs	r0, #100	@ 0x64
 8000c34:	f7ff fc60 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c38:	8bbb      	ldrh	r3, [r7, #28]
 8000c3a:	115b      	asrs	r3, r3, #5
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbdf 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000c4a:	2065      	movs	r0, #101	@ 0x65
 8000c4c:	f7ff fc54 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 031f 	and.w	r3, r3, #31
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbd4 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 8000c60:	20a0      	movs	r0, #160	@ 0xa0
 8000c62:	f7ff fc49 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 8000c6e:	20e0      	movs	r0, #224	@ 0xe0
 8000c70:	f7ff fbca 	bl	8000408 <RA8875_write_data>
 8000c74:	e002      	b.n	8000c7c <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 8000c76:	20a0      	movs	r0, #160	@ 0xa0
 8000c78:	f7ff fbc6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	20a0      	movs	r0, #160	@ 0xa0
 8000c80:	f7ff fc8c 	bl	800059c <RA8875_wait_poll>
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}

08000c8c <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	807b      	strh	r3, [r7, #2]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 8000caa:	88fa      	ldrh	r2, [r7, #6]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b21c      	sxth	r4, r3
 8000cb8:	88ba      	ldrh	r2, [r7, #4]
 8000cba:	883b      	ldrh	r3, [r7, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	8b3b      	ldrh	r3, [r7, #24]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	4622      	mov	r2, r4
 8000cda:	f7ff fcbd 	bl	8000658 <rectHelper>
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
	...

08000ce8 <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <RA8875_fill_screen+0x38>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <RA8875_fill_screen+0x3c>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b219      	sxth	r1, r3
 8000d06:	2301      	movs	r3, #1
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fca0 	bl	8000658 <rectHelper>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000098 	.word	0x24000098
 8000d24:	2400009a 	.word	0x2400009a

08000d28 <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4608      	mov	r0, r1
 8000d32:	4611      	mov	r1, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	4623      	mov	r3, r4
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	807b      	strh	r3, [r7, #2]
 8000d42:	4613      	mov	r3, r2
 8000d44:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 8000d46:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d56:	2301      	movs	r3, #1
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	8c3b      	ldrh	r3, [r7, #32]
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	f7ff fd1d 	bl	80007aa <triangleHelper>
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}

08000d78 <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	807b      	strh	r3, [r7, #2]
 8000d92:	4613      	mov	r3, r2
 8000d94:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 8000d96:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d9e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000da2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000da6:	2301      	movs	r3, #1
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	8b3b      	ldrh	r3, [r7, #24]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4623      	mov	r3, r4
 8000db0:	f7ff fddd 	bl	800096e <ellipseHelper>
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af04      	add	r7, sp, #16
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 8000dda:	88fa      	ldrh	r2, [r7, #6]
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	4413      	add	r3, r2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b21c      	sxth	r4, r3
 8000de4:	88ba      	ldrh	r2, [r7, #4]
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	8bbb      	ldrh	r3, [r7, #28]
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	4622      	mov	r2, r4
 8000e08:	f7ff fe50 	bl	8000aac <roundRectHelper>
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}

08000e14 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 8000e1a:	2040      	movs	r0, #64	@ 0x40
 8000e1c:	f7ff fb6c 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000e20:	f7ff fb2e 	bl	8000480 <RA8875_read_data>
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e2e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fae8 	bl	8000408 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 8000e38:	2021      	movs	r0, #33	@ 0x21
 8000e3a:	f7ff fb5d 	bl	80004f8 <RA8875_write_command>
  temp = RA8875_read_data ();
 8000e3e:	f7ff fb1f 	bl	8000480 <RA8875_read_data>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8000e4c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fad9 	bl	8000408 <RA8875_write_data>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	460a      	mov	r2, r1
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 8000e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fbac 	bl	80005d0 <RA8875_apply_rotation_x>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000e7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fbc3 	bl	800060c <RA8875_apply_rotation_y>
 8000e86:	4603      	mov	r3, r0
 8000e88:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 8000e8a:	202a      	movs	r0, #42	@ 0x2a
 8000e8c:	f7ff fb34 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fab7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2B);
 8000e9a:	202b      	movs	r0, #43	@ 0x2b
 8000e9c:	f7ff fb2c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff faad 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2C);
 8000eae:	202c      	movs	r0, #44	@ 0x2c
 8000eb0:	f7ff fb22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2D);
 8000ebe:	202d      	movs	r0, #45	@ 0x2d
 8000ec0:	f7ff fb1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa9b 	bl	8000408 <RA8875_write_data>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 8000eea:	2063      	movs	r0, #99	@ 0x63
 8000eec:	f7ff fb04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	0adb      	lsrs	r3, r3, #11
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fa85 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000efe:	2064      	movs	r0, #100	@ 0x64
 8000f00:	f7ff fafa 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	115b      	asrs	r3, r3, #5
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa79 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000f16:	2065      	movs	r0, #101	@ 0x65
 8000f18:	f7ff faee 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa6e 	bl	8000408 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 8000f2c:	2060      	movs	r0, #96	@ 0x60
 8000f2e:	f7ff fae3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	0adb      	lsrs	r3, r3, #11
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa64 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x61);
 8000f40:	2061      	movs	r0, #97	@ 0x61
 8000f42:	f7ff fad9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	115b      	asrs	r3, r3, #5
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa58 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x62);
 8000f58:	2062      	movs	r0, #98	@ 0x62
 8000f5a:	f7ff facd 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa4d 	bl	8000408 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 8000f6e:	2022      	movs	r0, #34	@ 0x22
 8000f70:	f7ff fac2 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000f74:	f7ff fa84 	bl	8000480 <RA8875_read_data>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f82:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa3e 	bl	8000408 <RA8875_write_data>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d901      	bls.n	8000fa8 <RA8875_text_scale+0x14>
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8000fa8:	2022      	movs	r0, #34	@ 0x22
 8000faa:	f7ff faa5 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000fae:	f7ff fa67 	bl	8000480 <RA8875_read_data>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f023 030f 	bic.w	r3, r3, #15
 8000fbc:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa1a 	bl	8000408 <RA8875_write_data>

  _textScale = scale;
 8000fd4:	4a03      	ldr	r2, [pc, #12]	@ (8000fe4 <RA8875_text_scale+0x50>)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	7013      	strb	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2400009c 	.word	0x2400009c

08000fe8 <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <RA8875_text_write+0x1c>
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f970 	bl	80002e0 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 8001004:	2002      	movs	r0, #2
 8001006:	f7ff fa77 	bl	80004f8 <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 800100a:	2300      	movs	r3, #0
 800100c:	81fb      	strh	r3, [r7, #14]
 800100e:	e010      	b.n	8001032 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f9f5 	bl	8000408 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <RA8875_text_write+0x5c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <RA8875_text_write+0x44>
 8001026:	2001      	movs	r0, #1
 8001028:	f002 fce4 	bl	80039f4 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	3301      	adds	r3, #1
 8001030:	81fb      	strh	r3, [r7, #14]
 8001032:	89fa      	ldrh	r2, [r7, #14]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3ea      	bcc.n	8001010 <RA8875_text_write+0x28>
  }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2400009c 	.word	0x2400009c

08001048 <get_rand_num>:

typedef struct{
    float dims[200];
} Dict_Vector;

int get_rand_num(void){
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	while(1){
		if(RNG->SR & RNG_SR_DRDY ){
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <get_rand_num+0x20>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f9      	beq.n	800104c <get_rand_num+0x4>
			return RNG->DR;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <get_rand_num+0x20>)
 800105a:	689b      	ldr	r3, [r3, #8]
		}
	}
	return 0;

}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	48021800 	.word	0x48021800

0800106c <pick_index>:

unsigned short pick_index(float * arr, unsigned short len, unsigned short highest){
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	803b      	strh	r3, [r7, #0]
    //Find the index of the highest/lowest float in an array
    float val = arr[0];
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
    unsigned short ret_idx = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	817b      	strh	r3, [r7, #10]
    for(unsigned short idx = 1; idx < len; idx += 1){
 8001086:	2301      	movs	r3, #1
 8001088:	813b      	strh	r3, [r7, #8]
 800108a:	e030      	b.n	80010ee <pick_index+0x82>
        if(highest){
 800108c:	883b      	ldrh	r3, [r7, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d015      	beq.n	80010be <pick_index+0x52>
            if(arr[idx] > val){
 8001092:	893b      	ldrh	r3, [r7, #8]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ed97 7a03 	vldr	s14, [r7, #12]
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d51d      	bpl.n	80010e8 <pick_index+0x7c>
                val = arr[idx];
 80010ac:	893b      	ldrh	r3, [r7, #8]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60fb      	str	r3, [r7, #12]
                ret_idx = idx;
 80010b8:	893b      	ldrh	r3, [r7, #8]
 80010ba:	817b      	strh	r3, [r7, #10]
 80010bc:	e014      	b.n	80010e8 <pick_index+0x7c>
            }
        }
        else{
            if(arr[idx] < val){
 80010be:	893b      	ldrh	r3, [r7, #8]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd07      	ble.n	80010e8 <pick_index+0x7c>
                val = arr[idx];
 80010d8:	893b      	ldrh	r3, [r7, #8]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	60fb      	str	r3, [r7, #12]
                ret_idx = idx;
 80010e4:	893b      	ldrh	r3, [r7, #8]
 80010e6:	817b      	strh	r3, [r7, #10]
    for(unsigned short idx = 1; idx < len; idx += 1){
 80010e8:	893b      	ldrh	r3, [r7, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	813b      	strh	r3, [r7, #8]
 80010ee:	893a      	ldrh	r2, [r7, #8]
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ca      	bcc.n	800108c <pick_index+0x20>
            }
        }
        //printf("Idx: %d Score: %f, Highest:%f\n", idx, arr[idx], val);
    }
    return ret_idx;
 80010f6:	897b      	ldrh	r3, [r7, #10]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <is_subset>:

unsigned short is_subset(char * w1, char * w2){
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	//LUXURY MODIFICATION: MAKE SURE 5 OF SAME LETTER IN A ROW -> INVALID CLUE
    //Compute if W1 is a subset of W2 
    //Or the reverse is true
    unsigned short l1 = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	82fb      	strh	r3, [r7, #22]
    unsigned short l2 = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	82bb      	strh	r3, [r7, #20]
    while(w1[l1++] != '\0');
 8001116:	bf00      	nop
 8001118:	8afb      	ldrh	r3, [r7, #22]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	82fa      	strh	r2, [r7, #22]
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f6      	bne.n	8001118 <is_subset+0x14>
    while(w2[l2++] != '\0');
 800112a:	bf00      	nop
 800112c:	8abb      	ldrh	r3, [r7, #20]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	82ba      	strh	r2, [r7, #20]
 8001132:	461a      	mov	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f6      	bne.n	800112c <is_subset+0x28>
    l1 -= 1;
 800113e:	8afb      	ldrh	r3, [r7, #22]
 8001140:	3b01      	subs	r3, #1
 8001142:	82fb      	strh	r3, [r7, #22]
    l2 -= 1;
 8001144:	8abb      	ldrh	r3, [r7, #20]
 8001146:	3b01      	subs	r3, #1
 8001148:	82bb      	strh	r3, [r7, #20]
    unsigned short dist = (l1 > l2)?l1-l2:l2-l1;
 800114a:	8afa      	ldrh	r2, [r7, #22]
 800114c:	8abb      	ldrh	r3, [r7, #20]
 800114e:	429a      	cmp	r2, r3
 8001150:	d904      	bls.n	800115c <is_subset+0x58>
 8001152:	8afa      	ldrh	r2, [r7, #22]
 8001154:	8abb      	ldrh	r3, [r7, #20]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	e003      	b.n	8001164 <is_subset+0x60>
 800115c:	8aba      	ldrh	r2, [r7, #20]
 800115e:	8afb      	ldrh	r3, [r7, #22]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	b29b      	uxth	r3, r3
 8001164:	817b      	strh	r3, [r7, #10]
    for(unsigned short idx = 0; idx <= dist; idx += 1){
 8001166:	2300      	movs	r3, #0
 8001168:	827b      	strh	r3, [r7, #18]
 800116a:	e042      	b.n	80011f2 <is_subset+0xee>
        unsigned short same = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	823b      	strh	r3, [r7, #16]
        if(l1>l2){
 8001170:	8afa      	ldrh	r2, [r7, #22]
 8001172:	8abb      	ldrh	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	d91a      	bls.n	80011ae <is_subset+0xaa>
            for(unsigned short jdx = 0; jdx < l2; jdx += 1){
 8001178:	2300      	movs	r3, #0
 800117a:	81fb      	strh	r3, [r7, #14]
 800117c:	e012      	b.n	80011a4 <is_subset+0xa0>
                if(w2[jdx] != w1[jdx + idx]){
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	89f9      	ldrh	r1, [r7, #14]
 8001188:	8a7b      	ldrh	r3, [r7, #18]
 800118a:	440b      	add	r3, r1
 800118c:	4619      	mov	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	440b      	add	r3, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d002      	beq.n	800119e <is_subset+0x9a>
                    same = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	823b      	strh	r3, [r7, #16]
                    break;
 800119c:	e021      	b.n	80011e2 <is_subset+0xde>
            for(unsigned short jdx = 0; jdx < l2; jdx += 1){
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	3301      	adds	r3, #1
 80011a2:	81fb      	strh	r3, [r7, #14]
 80011a4:	89fa      	ldrh	r2, [r7, #14]
 80011a6:	8abb      	ldrh	r3, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3e8      	bcc.n	800117e <is_subset+0x7a>
 80011ac:	e019      	b.n	80011e2 <is_subset+0xde>
                }
            }
        }
        else{
            for(unsigned short jdx = 0; jdx < l1; jdx += 1){
 80011ae:	2300      	movs	r3, #0
 80011b0:	81bb      	strh	r3, [r7, #12]
 80011b2:	e012      	b.n	80011da <is_subset+0xd6>
                //printf("%c%c ", w1[jdx], w2[jdx]);
                if(w1[jdx] != w2[jdx + idx]){
 80011b4:	89bb      	ldrh	r3, [r7, #12]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	89b9      	ldrh	r1, [r7, #12]
 80011be:	8a7b      	ldrh	r3, [r7, #18]
 80011c0:	440b      	add	r3, r1
 80011c2:	4619      	mov	r1, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	440b      	add	r3, r1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d002      	beq.n	80011d4 <is_subset+0xd0>
                    same = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	823b      	strh	r3, [r7, #16]
                    break;
 80011d2:	e006      	b.n	80011e2 <is_subset+0xde>
            for(unsigned short jdx = 0; jdx < l1; jdx += 1){
 80011d4:	89bb      	ldrh	r3, [r7, #12]
 80011d6:	3301      	adds	r3, #1
 80011d8:	81bb      	strh	r3, [r7, #12]
 80011da:	89ba      	ldrh	r2, [r7, #12]
 80011dc:	8afb      	ldrh	r3, [r7, #22]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3e8      	bcc.n	80011b4 <is_subset+0xb0>
                }
            }
        }
        if(same){
 80011e2:	8a3b      	ldrh	r3, [r7, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <is_subset+0xe8>
            return 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e007      	b.n	80011fc <is_subset+0xf8>
    for(unsigned short idx = 0; idx <= dist; idx += 1){
 80011ec:	8a7b      	ldrh	r3, [r7, #18]
 80011ee:	3301      	adds	r3, #1
 80011f0:	827b      	strh	r3, [r7, #18]
 80011f2:	8a7a      	ldrh	r2, [r7, #18]
 80011f4:	897b      	ldrh	r3, [r7, #10]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d9b8      	bls.n	800116c <is_subset+0x68>
        }
    }
    return 0;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <shuffle>:

void shuffle(unsigned short * board_idx){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    for(unsigned short idx = 0; idx < 2; idx += 1){
 8001210:	2300      	movs	r3, #0
 8001212:	81fb      	strh	r3, [r7, #14]
 8001214:	e030      	b.n	8001278 <shuffle+0x70>
        for(unsigned short jdx = 0; jdx < 250; jdx += 1){
 8001216:	2300      	movs	r3, #0
 8001218:	81bb      	strh	r3, [r7, #12]
 800121a:	e027      	b.n	800126c <shuffle+0x64>
        	//USE TRUE_RNG HERE
            unsigned short rnd = (unsigned short)(get_rand_num() % 250);
 800121c:	f7ff ff14 	bl	8001048 <get_rand_num>
 8001220:	4603      	mov	r3, r0
 8001222:	4a19      	ldr	r2, [pc, #100]	@ (8001288 <shuffle+0x80>)
 8001224:	fb82 1203 	smull	r1, r2, r2, r3
 8001228:	1111      	asrs	r1, r2, #4
 800122a:	17da      	asrs	r2, r3, #31
 800122c:	1a8a      	subs	r2, r1, r2
 800122e:	21fa      	movs	r1, #250	@ 0xfa
 8001230:	fb01 f202 	mul.w	r2, r1, r2
 8001234:	1a9a      	subs	r2, r3, r2
 8001236:	4613      	mov	r3, r2
 8001238:	817b      	strh	r3, [r7, #10]
            unsigned short tmp = board_idx[rnd];
 800123a:	897b      	ldrh	r3, [r7, #10]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	813b      	strh	r3, [r7, #8]
            board_idx[rnd] = board_idx[jdx];
 8001246:	89bb      	ldrh	r3, [r7, #12]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	441a      	add	r2, r3
 800124e:	897b      	ldrh	r3, [r7, #10]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	440b      	add	r3, r1
 8001256:	8812      	ldrh	r2, [r2, #0]
 8001258:	801a      	strh	r2, [r3, #0]
            board_idx[jdx] = tmp;
 800125a:	89bb      	ldrh	r3, [r7, #12]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	893a      	ldrh	r2, [r7, #8]
 8001264:	801a      	strh	r2, [r3, #0]
        for(unsigned short jdx = 0; jdx < 250; jdx += 1){
 8001266:	89bb      	ldrh	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	81bb      	strh	r3, [r7, #12]
 800126c:	89bb      	ldrh	r3, [r7, #12]
 800126e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001270:	d9d4      	bls.n	800121c <shuffle+0x14>
    for(unsigned short idx = 0; idx < 2; idx += 1){
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	3301      	adds	r3, #1
 8001276:	81fb      	strh	r3, [r7, #14]
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d9cb      	bls.n	8001216 <shuffle+0xe>
        }
    }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	10624dd3 	.word	0x10624dd3

0800128c <cosine_similarity>:

float cosine_similarity(float * v1 , float *v2 , unsigned short len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	ed2d 8b04 	vpush	{d8-d9}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	4613      	mov	r3, r2
 800129c:	80fb      	strh	r3, [r7, #6]
    float dot = 0.0, denom_a = 0.0, denom_b = 0.0 ;
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
     for(unsigned short idx = 0; idx < len; idx +=1) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	827b      	strh	r3, [r7, #18]
 80012b4:	e03e      	b.n	8001334 <cosine_similarity+0xa8>
        dot += v1[idx] * v2[idx] ;
 80012b6:	8a7b      	ldrh	r3, [r7, #18]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	ed93 7a00 	vldr	s14, [r3]
 80012c2:	8a7b      	ldrh	r3, [r7, #18]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	4413      	add	r3, r2
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80012d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012da:	edc7 7a07 	vstr	s15, [r7, #28]
        denom_a += v1[idx] * v1[idx] ;
 80012de:	8a7b      	ldrh	r3, [r7, #18]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	ed93 7a00 	vldr	s14, [r3]
 80012ea:	8a7b      	ldrh	r3, [r7, #18]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80012fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001302:	edc7 7a06 	vstr	s15, [r7, #24]
        denom_b += v2[idx] * v2[idx] ;
 8001306:	8a7b      	ldrh	r3, [r7, #18]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	4413      	add	r3, r2
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	8a7b      	ldrh	r3, [r7, #18]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	4413      	add	r3, r2
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	ed97 7a05 	vldr	s14, [r7, #20]
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	edc7 7a05 	vstr	s15, [r7, #20]
     for(unsigned short idx = 0; idx < len; idx +=1) {
 800132e:	8a7b      	ldrh	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	827b      	strh	r3, [r7, #18]
 8001334:	8a7a      	ldrh	r2, [r7, #18]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3bc      	bcc.n	80012b6 <cosine_similarity+0x2a>
    }
    return dot / (sqrt(denom_a) * sqrt(denom_b)) ;
 800133c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001340:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001344:	edd7 7a06 	vldr	s15, [r7, #24]
 8001348:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134c:	eeb0 0b47 	vmov.f64	d0, d7
 8001350:	f00e fbf2 	bl	800fb38 <sqrt>
 8001354:	eeb0 9b40 	vmov.f64	d9, d0
 8001358:	edd7 7a05 	vldr	s15, [r7, #20]
 800135c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001360:	eeb0 0b47 	vmov.f64	d0, d7
 8001364:	f00e fbe8 	bl	800fb38 <sqrt>
 8001368:	eeb0 7b40 	vmov.f64	d7, d0
 800136c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001370:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001374:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	ecbd 8b04 	vpop	{d8-d9}
 8001384:	bd80      	pop	{r7, pc}

08001386 <glove_similarity>:
        return 0;
    }
    return (is_subset(w1, w2) == 1);
}

float glove_similarity(Glove_Vector glove1, Glove_Vector glove2){
 8001386:	b084      	sub	sp, #16
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
 800138c:	f107 0c08 	add.w	ip, r7, #8
 8001390:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return cosine_similarity(glove1.dims, glove2.dims, 300);
 8001394:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001398:	f103 011c 	add.w	r1, r3, #28
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff71 	bl	800128c <cosine_similarity>
 80013aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	46bd      	mov	sp, r7
 80013b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013b8:	b004      	add	sp, #16
 80013ba:	4770      	bx	lr

080013bc <dict_similarity>:

float dict_similarity(Dict_Vector dict1, Dict_Vector dict2){  
 80013bc:	b084      	sub	sp, #16
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	f107 0c08 	add.w	ip, r7, #8
 80013c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return cosine_similarity(dict1.dims, dict2.dims, 200);
 80013ca:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80013ce:	22c8      	movs	r2, #200	@ 0xc8
 80013d0:	4619      	mov	r1, r3
 80013d2:	f107 0008 	add.w	r0, r7, #8
 80013d6:	f7ff ff59 	bl	800128c <cosine_similarity>
 80013da:	eef0 7a40 	vmov.f32	s15, s0
}
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	46bd      	mov	sp, r7
 80013e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e8:	b004      	add	sp, #16
 80013ea:	4770      	bx	lr

080013ec <vector_score>:

float vector_score(Glove_Vector glove1, Dict_Vector dict1, Glove_Vector glove2, Dict_Vector dict2){
 80013ec:	b084      	sub	sp, #16
 80013ee:	b580      	push	{r7, lr}
 80013f0:	f5ad 6d19 	sub.w	sp, sp, #2448	@ 0x990
 80013f4:	f640 1788 	movw	r7, #2440	@ 0x988
 80013f8:	446f      	add	r7, sp
 80013fa:	f107 0c10 	add.w	ip, r7, #16
 80013fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    float glove_score = glove_similarity(glove1, glove2);
 8001402:	f20d 40bc 	addw	r0, sp, #1212	@ 0x4bc
 8001406:	f207 73fc 	addw	r3, r7, #2044	@ 0x7fc
 800140a:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 800140e:	4619      	mov	r1, r3
 8001410:	f00e f804 	bl	800f41c <memcpy>
 8001414:	4668      	mov	r0, sp
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 800141e:	4619      	mov	r1, r3
 8001420:	f00d fffc 	bl	800f41c <memcpy>
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142a:	f7ff ffac 	bl	8001386 <glove_similarity>
 800142e:	ed87 0a01 	vstr	s0, [r7, #4]
    float dict_score = dict_similarity(dict1, dict2);
 8001432:	a8c4      	add	r0, sp, #784	@ 0x310
 8001434:	f607 43c8 	addw	r3, r7, #3272	@ 0xcc8
 8001438:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800143c:	4619      	mov	r1, r3
 800143e:	f00d ffed 	bl	800f41c <memcpy>
 8001442:	4668      	mov	r0, sp
 8001444:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001448:	f44f 7244 	mov.w	r2, #784	@ 0x310
 800144c:	4619      	mov	r1, r3
 800144e:	f00d ffe5 	bl	800f41c <memcpy>
 8001452:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 8001456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001458:	f7ff ffb0 	bl	80013bc <dict_similarity>
 800145c:	ed87 0a00 	vstr	s0, [r7]

	return glove_score + dict_score;
 8001460:	ed97 7a01 	vldr	s14, [r7, #4]
 8001464:	edd7 7a00 	vldr	s15, [r7]
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001478:	b004      	add	sp, #16
 800147a:	4770      	bx	lr

0800147c <gen_board>:

void gen_board(unsigned short * board_idx, Glove_Vector ** board_glove, Dict_Vector ** board_dict, int num_rounds){
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	f5ad 4d0f 	sub.w	sp, sp, #36608	@ 0x8f00
 8001482:	b087      	sub	sp, #28
 8001484:	f640 77c8 	movw	r7, #4040	@ 0xfc8
 8001488:	446f      	add	r7, sp
 800148a:	f507 6475 	add.w	r4, r7, #3920	@ 0xf50
 800148e:	f6a4 7444 	subw	r4, r4, #3908	@ 0xf44
 8001492:	6020      	str	r0, [r4, #0]
 8001494:	f507 6075 	add.w	r0, r7, #3920	@ 0xf50
 8001498:	f6a0 7048 	subw	r0, r0, #3912	@ 0xf48
 800149c:	6001      	str	r1, [r0, #0]
 800149e:	f507 6175 	add.w	r1, r7, #3920	@ 0xf50
 80014a2:	f6a1 714c 	subw	r1, r1, #3916	@ 0xf4c
 80014a6:	600a      	str	r2, [r1, #0]
 80014a8:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 80014ac:	f5a2 6275 	sub.w	r2, r2, #3920	@ 0xf50
 80014b0:	6013      	str	r3, [r2, #0]
    //Take all possible board words, randomly select 16 to be board words
    //The first two are the targets
    shuffle(board_idx);
 80014b2:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 80014b6:	f6a3 7344 	subw	r3, r3, #3908	@ 0xf44
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	f7ff fea4 	bl	8001208 <shuffle>
//    printf("C1\n");

	//GATHER ALL BOARD VECTOR MATERIALS
    for(unsigned short gather_idx = 0; gather_idx < 16 * num_rounds; gather_idx += 1){
 80014c0:	2300      	movs	r3, #0
 80014c2:	f647 724e 	movw	r2, #32590	@ 0x7f4e
 80014c6:	443a      	add	r2, r7
 80014c8:	8013      	strh	r3, [r2, #0]
 80014ca:	e0da      	b.n	8001682 <gen_board+0x206>
    	char word[25];
    	float * vec_floats;
    	vec_floats = read_vec(board_idx[gather_idx], word);
 80014cc:	f647 734e 	movw	r3, #32590	@ 0x7f4e
 80014d0:	443b      	add	r3, r7
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 80014da:	f6a2 7244 	subw	r2, r2, #3908	@ 0xf44
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	f647 62d4 	movw	r2, #32468	@ 0x7ed4
 80014e8:	443a      	add	r2, r7
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00a ff59 	bl	800c3a4 <read_vec>
 80014f2:	f647 7330 	movw	r3, #32560	@ 0x7f30
 80014f6:	443b      	add	r3, r7
 80014f8:	6018      	str	r0, [r3, #0]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 80014fa:	2300      	movs	r3, #0
 80014fc:	f647 724c 	movw	r2, #32588	@ 0x7f4c
 8001500:	443a      	add	r2, r7
 8001502:	8013      	strh	r3, [r2, #0]
 8001504:	e031      	b.n	800156a <gen_board+0xee>
        	board_glove[gather_idx / 16][gather_idx % 16].word[wi] = word[wi];
 8001506:	f647 734c 	movw	r3, #32588	@ 0x7f4c
 800150a:	443b      	add	r3, r7
 800150c:	8819      	ldrh	r1, [r3, #0]
 800150e:	f647 734e 	movw	r3, #32590	@ 0x7f4e
 8001512:	443b      	add	r3, r7
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	b29b      	uxth	r3, r3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001520:	f6a2 7248 	subw	r2, r2, #3912	@ 0xf48
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	4413      	add	r3, r2
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f647 734e 	movw	r3, #32590	@ 0x7f4e
 800152e:	443b      	add	r3, r7
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	f240 40cc 	movw	r0, #1228	@ 0x4cc
 800153a:	fb00 f303 	mul.w	r3, r0, r3
 800153e:	441a      	add	r2, r3
 8001540:	f647 734c 	movw	r3, #32588	@ 0x7f4c
 8001544:	443b      	add	r3, r7
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	f501 41fe 	add.w	r1, r1, #32512	@ 0x7f00
 800154c:	f101 0150 	add.w	r1, r1, #80	@ 0x50
 8001550:	4439      	add	r1, r7
 8001552:	f811 1c7c 	ldrb.w	r1, [r1, #-124]
 8001556:	54d1      	strb	r1, [r2, r3]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 8001558:	f647 734c 	movw	r3, #32588	@ 0x7f4c
 800155c:	443b      	add	r3, r7
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	f647 724c 	movw	r2, #32588	@ 0x7f4c
 8001566:	443a      	add	r2, r7
 8001568:	8013      	strh	r3, [r2, #0]
 800156a:	f647 734c 	movw	r3, #32588	@ 0x7f4c
 800156e:	443b      	add	r3, r7
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	2b18      	cmp	r3, #24
 8001574:	d9c7      	bls.n	8001506 <gen_board+0x8a>
    	}
    	//free(word);
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001576:	2300      	movs	r3, #0
 8001578:	f647 724a 	movw	r2, #32586	@ 0x7f4a
 800157c:	443a      	add	r2, r7
 800157e:	8013      	strh	r3, [r2, #0]
 8001580:	e069      	b.n	8001656 <gen_board+0x1da>
    		//SAVE WORD TO GLOVE VEC TOO
    		board_glove[gather_idx / 16][gather_idx % 16].dims[move_idx] = vec_floats[1 + move_idx];
 8001582:	f647 734a 	movw	r3, #32586	@ 0x7f4a
 8001586:	443b      	add	r3, r7
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	f647 7230 	movw	r2, #32560	@ 0x7f30
 8001592:	443a      	add	r2, r7
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	441a      	add	r2, r3
 8001598:	f647 734e 	movw	r3, #32590	@ 0x7f4e
 800159c:	443b      	add	r3, r7
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	f507 6175 	add.w	r1, r7, #3920	@ 0xf50
 80015aa:	f6a1 7148 	subw	r1, r1, #3912	@ 0xf48
 80015ae:	6809      	ldr	r1, [r1, #0]
 80015b0:	440b      	add	r3, r1
 80015b2:	6819      	ldr	r1, [r3, #0]
 80015b4:	f647 734e 	movw	r3, #32590	@ 0x7f4e
 80015b8:	443b      	add	r3, r7
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	f240 40cc 	movw	r0, #1228	@ 0x4cc
 80015c4:	fb00 f303 	mul.w	r3, r0, r3
 80015c8:	4419      	add	r1, r3
 80015ca:	f647 734a 	movw	r3, #32586	@ 0x7f4a
 80015ce:	443b      	add	r3, r7
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	3306      	adds	r3, #6
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3304      	adds	r3, #4
 80015dc:	601a      	str	r2, [r3, #0]
    		if(move_idx < 200){
 80015de:	f647 734a 	movw	r3, #32586	@ 0x7f4a
 80015e2:	443b      	add	r3, r7
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80015e8:	d82c      	bhi.n	8001644 <gen_board+0x1c8>
    			board_dict[gather_idx/16][gather_idx%16].dims[move_idx] = vec_floats[301 + move_idx];
 80015ea:	f647 734a 	movw	r3, #32586	@ 0x7f4a
 80015ee:	443b      	add	r3, r7
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	f647 7230 	movw	r2, #32560	@ 0x7f30
 80015fc:	443a      	add	r2, r7
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	441a      	add	r2, r3
 8001602:	f647 734e 	movw	r3, #32590	@ 0x7f4e
 8001606:	443b      	add	r3, r7
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	b29b      	uxth	r3, r3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	f507 6175 	add.w	r1, r7, #3920	@ 0xf50
 8001614:	f6a1 714c 	subw	r1, r1, #3916	@ 0xf4c
 8001618:	6809      	ldr	r1, [r1, #0]
 800161a:	440b      	add	r3, r1
 800161c:	6819      	ldr	r1, [r3, #0]
 800161e:	f647 734e 	movw	r3, #32590	@ 0x7f4e
 8001622:	443b      	add	r3, r7
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800162e:	fb00 f303 	mul.w	r3, r0, r3
 8001632:	4419      	add	r1, r3
 8001634:	f647 734a 	movw	r3, #32586	@ 0x7f4a
 8001638:	443b      	add	r3, r7
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	601a      	str	r2, [r3, #0]
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001644:	f647 734a 	movw	r3, #32586	@ 0x7f4a
 8001648:	443b      	add	r3, r7
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	f647 724a 	movw	r2, #32586	@ 0x7f4a
 8001652:	443a      	add	r2, r7
 8001654:	8013      	strh	r3, [r2, #0]
 8001656:	f647 734a 	movw	r3, #32586	@ 0x7f4a
 800165a:	443b      	add	r3, r7
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001662:	d38e      	bcc.n	8001582 <gen_board+0x106>
    		}
    	}
    	free(vec_floats);
 8001664:	f647 7330 	movw	r3, #32560	@ 0x7f30
 8001668:	443b      	add	r3, r7
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	f00d fd88 	bl	800f180 <free>
    for(unsigned short gather_idx = 0; gather_idx < 16 * num_rounds; gather_idx += 1){
 8001670:	f647 734e 	movw	r3, #32590	@ 0x7f4e
 8001674:	443b      	add	r3, r7
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	f647 724e 	movw	r2, #32590	@ 0x7f4e
 800167e:	443a      	add	r2, r7
 8001680:	8013      	strh	r3, [r2, #0]
 8001682:	f647 734e 	movw	r3, #32590	@ 0x7f4e
 8001686:	443b      	add	r3, r7
 8001688:	881a      	ldrh	r2, [r3, #0]
 800168a:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 800168e:	f5a3 6375 	sub.w	r3, r3, #3920	@ 0xf50
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	429a      	cmp	r2, r3
 8001698:	f6ff af18 	blt.w	80014cc <gen_board+0x50>
    }

    //Vector Scores for each board comparing to first target
//    float ** scores = malloc(sizeof(*scores) * num_rounds);
    float scores[1][15];
    for(unsigned short brd = 0; brd < num_rounds; brd += 1){
 800169c:	2300      	movs	r3, #0
 800169e:	f647 7248 	movw	r2, #32584	@ 0x7f48
 80016a2:	443a      	add	r2, r7
 80016a4:	8013      	strh	r3, [r2, #0]
 80016a6:	e0a2      	b.n	80017ee <gen_board+0x372>
        for(unsigned short idx = 1; idx < 16; idx += 1){
 80016a8:	2301      	movs	r3, #1
 80016aa:	f647 7246 	movw	r2, #32582	@ 0x7f46
 80016ae:	443a      	add	r2, r7
 80016b0:	8013      	strh	r3, [r2, #0]
 80016b2:	e08c      	b.n	80017ce <gen_board+0x352>
			float scr = vector_score(board_glove[brd][0], board_dict[brd][0], board_glove[brd][idx], board_dict[brd][idx]);
 80016b4:	f647 7348 	movw	r3, #32584	@ 0x7f48
 80016b8:	443b      	add	r3, r7
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 80016c2:	f6a2 7248 	subw	r2, r2, #3912	@ 0xf48
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	681c      	ldr	r4, [r3, #0]
 80016cc:	f647 7348 	movw	r3, #32584	@ 0x7f48
 80016d0:	443b      	add	r3, r7
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 80016da:	f6a2 724c 	subw	r2, r2, #3916	@ 0xf4c
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	681d      	ldr	r5, [r3, #0]
 80016e4:	f647 7348 	movw	r3, #32584	@ 0x7f48
 80016e8:	443b      	add	r3, r7
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 80016f2:	f6a2 7248 	subw	r2, r2, #3912	@ 0xf48
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f647 7346 	movw	r3, #32582	@ 0x7f46
 8001700:	443b      	add	r3, r7
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	18d6      	adds	r6, r2, r3
 800170e:	f647 7348 	movw	r3, #32584	@ 0x7f48
 8001712:	443b      	add	r3, r7
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 800171c:	f6a2 724c 	subw	r2, r2, #3916	@ 0xf4c
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	4413      	add	r3, r2
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	f647 7346 	movw	r3, #32582	@ 0x7f46
 800172a:	443b      	add	r3, r7
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	441a      	add	r2, r3
 8001738:	f60d 43a8 	addw	r3, sp, #3240	@ 0xca8
 800173c:	4611      	mov	r1, r2
 800173e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001742:	4618      	mov	r0, r3
 8001744:	f00d fe6a 	bl	800f41c <memcpy>
 8001748:	f20d 73dc 	addw	r3, sp, #2012	@ 0x7dc
 800174c:	4631      	mov	r1, r6
 800174e:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001752:	4618      	mov	r0, r3
 8001754:	f00d fe62 	bl	800f41c <memcpy>
 8001758:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 800175c:	4629      	mov	r1, r5
 800175e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001762:	4618      	mov	r0, r3
 8001764:	f00d fe5a 	bl	800f41c <memcpy>
 8001768:	4668      	mov	r0, sp
 800176a:	f104 0310 	add.w	r3, r4, #16
 800176e:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001772:	4619      	mov	r1, r3
 8001774:	f00d fe52 	bl	800f41c <memcpy>
 8001778:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800177c:	f7ff fe36 	bl	80013ec <vector_score>
 8001780:	f647 7334 	movw	r3, #32564	@ 0x7f34
 8001784:	443b      	add	r3, r7
 8001786:	ed83 0a00 	vstr	s0, [r3]
            scores[brd][idx - 1] = scr;
 800178a:	f647 7348 	movw	r3, #32584	@ 0x7f48
 800178e:	443b      	add	r3, r7
 8001790:	881a      	ldrh	r2, [r3, #0]
 8001792:	f647 7346 	movw	r3, #32582	@ 0x7f46
 8001796:	443b      	add	r3, r7
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	1e59      	subs	r1, r3, #1
 800179c:	4613      	mov	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	f503 43fe 	add.w	r3, r3, #32512	@ 0x7f00
 80017aa:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80017ae:	443b      	add	r3, r7
 80017b0:	3b5c      	subs	r3, #92	@ 0x5c
 80017b2:	f647 7234 	movw	r2, #32564	@ 0x7f34
 80017b6:	443a      	add	r2, r7
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	601a      	str	r2, [r3, #0]
        for(unsigned short idx = 1; idx < 16; idx += 1){
 80017bc:	f647 7346 	movw	r3, #32582	@ 0x7f46
 80017c0:	443b      	add	r3, r7
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	f647 7246 	movw	r2, #32582	@ 0x7f46
 80017ca:	443a      	add	r2, r7
 80017cc:	8013      	strh	r3, [r2, #0]
 80017ce:	f647 7346 	movw	r3, #32582	@ 0x7f46
 80017d2:	443b      	add	r3, r7
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	f67f af6c 	bls.w	80016b4 <gen_board+0x238>
    for(unsigned short brd = 0; brd < num_rounds; brd += 1){
 80017dc:	f647 7348 	movw	r3, #32584	@ 0x7f48
 80017e0:	443b      	add	r3, r7
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	f647 7248 	movw	r2, #32584	@ 0x7f48
 80017ea:	443a      	add	r2, r7
 80017ec:	8013      	strh	r3, [r2, #0]
 80017ee:	f647 7348 	movw	r3, #32584	@ 0x7f48
 80017f2:	443b      	add	r3, r7
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 80017fa:	f5a2 6275 	sub.w	r2, r2, #3920	@ 0xf50
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	f73f af51 	bgt.w	80016a8 <gen_board+0x22c>
    }
//    printf("C2\n");

    //PICK SECOND TARGET INDEXES
    unsigned short stargets[1];
    for(unsigned short b = 0; b < num_rounds; b += 1){
 8001806:	2300      	movs	r3, #0
 8001808:	f647 7244 	movw	r2, #32580	@ 0x7f44
 800180c:	443a      	add	r2, r7
 800180e:	8013      	strh	r3, [r2, #0]
 8001810:	e027      	b.n	8001862 <gen_board+0x3e6>
        stargets[b] = pick_index(scores[b], 15, 1);
 8001812:	f647 7344 	movw	r3, #32580	@ 0x7f44
 8001816:	443b      	add	r3, r7
 8001818:	881a      	ldrh	r2, [r3, #0]
 800181a:	f647 61f4 	movw	r1, #32500	@ 0x7ef4
 800181e:	4439      	add	r1, r7
 8001820:	4613      	mov	r3, r2
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	f647 7244 	movw	r2, #32580	@ 0x7f44
 800182e:	443a      	add	r2, r7
 8001830:	8814      	ldrh	r4, [r2, #0]
 8001832:	2201      	movs	r2, #1
 8001834:	210f      	movs	r1, #15
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fc18 	bl	800106c <pick_index>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	0063      	lsls	r3, r4, #1
 8001842:	f503 43fe 	add.w	r3, r3, #32512	@ 0x7f00
 8001846:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800184a:	443b      	add	r3, r7
 800184c:	f823 2c60 	strh.w	r2, [r3, #-96]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 8001850:	f647 7344 	movw	r3, #32580	@ 0x7f44
 8001854:	443b      	add	r3, r7
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	f647 7244 	movw	r2, #32580	@ 0x7f44
 800185e:	443a      	add	r2, r7
 8001860:	8013      	strh	r3, [r2, #0]
 8001862:	f647 7344 	movw	r3, #32580	@ 0x7f44
 8001866:	443b      	add	r3, r7
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 800186e:	f5a2 6275 	sub.w	r2, r2, #3920	@ 0xf50
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	dccc      	bgt.n	8001812 <gen_board+0x396>
    }

    //COMPILE BOARDS
    for(unsigned short b = 0; b < num_rounds; b += 1){
 8001878:	2300      	movs	r3, #0
 800187a:	f647 7242 	movw	r2, #32578	@ 0x7f42
 800187e:	443a      	add	r2, r7
 8001880:	8013      	strh	r3, [r2, #0]
 8001882:	e137      	b.n	8001af4 <gen_board+0x678>
//        Glove_Vector * board_glove2 = malloc(sizeof(*board_glove) * 16);
//        Dict_Vector * board_dict2 = malloc(sizeof(*board_dict) * 16);
    	Glove_Vector board_glove2[16];
    	Dict_Vector board_dict2[16];
        board_glove2[0] = board_glove[b][0];
 8001884:	f647 7342 	movw	r3, #32578	@ 0x7f42
 8001888:	443b      	add	r3, r7
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001892:	f6a2 7248 	subw	r2, r2, #3912	@ 0xf48
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f643 7250 	movw	r2, #16208	@ 0x3f50
 80018a0:	443a      	add	r2, r7
 80018a2:	f6a2 523c 	subw	r2, r2, #3388	@ 0xd3c
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 80018ae:	461a      	mov	r2, r3
 80018b0:	f00d fdb4 	bl	800f41c <memcpy>
        board_glove2[1] = board_glove[b][stargets[b] + 1];
 80018b4:	f647 7342 	movw	r3, #32578	@ 0x7f42
 80018b8:	443b      	add	r3, r7
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 80018c2:	f6a2 7248 	subw	r2, r2, #3912	@ 0xf48
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	f647 7342 	movw	r3, #32578	@ 0x7f42
 80018d0:	443b      	add	r3, r7
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	f503 43fe 	add.w	r3, r3, #32512	@ 0x7f00
 80018da:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80018de:	443b      	add	r3, r7
 80018e0:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80018e4:	3301      	adds	r3, #1
 80018e6:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	441a      	add	r2, r3
 80018f0:	f643 7350 	movw	r3, #16208	@ 0x3f50
 80018f4:	443b      	add	r3, r7
 80018f6:	f6a3 533c 	subw	r3, r3, #3388	@ 0xd3c
 80018fa:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 80018fe:	4611      	mov	r1, r2
 8001900:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001904:	4618      	mov	r0, r3
 8001906:	f00d fd89 	bl	800f41c <memcpy>
        board_dict2[0] = board_dict[b][0];
 800190a:	f647 7342 	movw	r3, #32578	@ 0x7f42
 800190e:	443b      	add	r3, r7
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001918:	f6a2 724c 	subw	r2, r2, #3916	@ 0xf4c
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	4413      	add	r3, r2
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001926:	f6a2 723c 	subw	r2, r2, #3900	@ 0xf3c
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001932:	461a      	mov	r2, r3
 8001934:	f00d fd72 	bl	800f41c <memcpy>
        board_dict2[1] = board_dict[b][stargets[b] + 1];
 8001938:	f647 7342 	movw	r3, #32578	@ 0x7f42
 800193c:	443b      	add	r3, r7
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001946:	f6a2 724c 	subw	r2, r2, #3916	@ 0xf4c
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4413      	add	r3, r2
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f647 7342 	movw	r3, #32578	@ 0x7f42
 8001954:	443b      	add	r3, r7
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	f503 43fe 	add.w	r3, r3, #32512	@ 0x7f00
 800195e:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8001962:	443b      	add	r3, r7
 8001964:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8001968:	3301      	adds	r3, #1
 800196a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	441a      	add	r2, r3
 8001974:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 8001978:	f6a3 733c 	subw	r3, r3, #3900	@ 0xf3c
 800197c:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001980:	4611      	mov	r1, r2
 8001982:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001986:	4618      	mov	r0, r3
 8001988:	f00d fd48 	bl	800f41c <memcpy>
        int append = 2;
 800198c:	2302      	movs	r3, #2
 800198e:	f647 723c 	movw	r2, #32572	@ 0x7f3c
 8001992:	443a      	add	r2, r7
 8001994:	6013      	str	r3, [r2, #0]
        for(int idx = 1; idx < 16; idx += 1){
 8001996:	2301      	movs	r3, #1
 8001998:	f647 7238 	movw	r2, #32568	@ 0x7f38
 800199c:	443a      	add	r2, r7
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e075      	b.n	8001a8e <gen_board+0x612>
            if(stargets[b] + 1 != idx){
 80019a2:	f647 7342 	movw	r3, #32578	@ 0x7f42
 80019a6:	443b      	add	r3, r7
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	f503 43fe 	add.w	r3, r3, #32512	@ 0x7f00
 80019b0:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80019b4:	443b      	add	r3, r7
 80019b6:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80019ba:	3301      	adds	r3, #1
 80019bc:	f647 7238 	movw	r2, #32568	@ 0x7f38
 80019c0:	443a      	add	r2, r7
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d059      	beq.n	8001a7c <gen_board+0x600>
            	board_glove2[append] = board_glove[b][idx];
 80019c8:	f647 7342 	movw	r3, #32578	@ 0x7f42
 80019cc:	443b      	add	r3, r7
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 80019d6:	f6a2 7248 	subw	r2, r2, #3912	@ 0xf48
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f647 7338 	movw	r3, #32568	@ 0x7f38
 80019e4:	443b      	add	r3, r7
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	18d0      	adds	r0, r2, r3
 80019f2:	f643 7350 	movw	r3, #16208	@ 0x3f50
 80019f6:	443b      	add	r3, r7
 80019f8:	f6a3 523c 	subw	r2, r3, #3388	@ 0xd3c
 80019fc:	f647 733c 	movw	r3, #32572	@ 0x7f3c
 8001a00:	443b      	add	r3, r7
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	461c      	mov	r4, r3
 8001a10:	4601      	mov	r1, r0
 8001a12:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 8001a16:	461a      	mov	r2, r3
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f00d fcff 	bl	800f41c <memcpy>
            	board_dict2[append++] = board_dict[b][idx];
 8001a1e:	f647 7342 	movw	r3, #32578	@ 0x7f42
 8001a22:	443b      	add	r3, r7
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001a2c:	f6a2 724c 	subw	r2, r2, #3916	@ 0xf4c
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f647 7338 	movw	r3, #32568	@ 0x7f38
 8001a3a:	443b      	add	r3, r7
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	18d0      	adds	r0, r2, r3
 8001a48:	f647 733c 	movw	r3, #32572	@ 0x7f3c
 8001a4c:	443b      	add	r3, r7
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	f647 713c 	movw	r1, #32572	@ 0x7f3c
 8001a56:	4439      	add	r1, r7
 8001a58:	600a      	str	r2, [r1, #0]
 8001a5a:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001a5e:	f6a2 723c 	subw	r2, r2, #3900	@ 0xf3c
 8001a62:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	461c      	mov	r4, r3
 8001a6e:	4601      	mov	r1, r0
 8001a70:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001a74:	461a      	mov	r2, r3
 8001a76:	4620      	mov	r0, r4
 8001a78:	f00d fcd0 	bl	800f41c <memcpy>
        for(int idx = 1; idx < 16; idx += 1){
 8001a7c:	f647 7338 	movw	r3, #32568	@ 0x7f38
 8001a80:	443b      	add	r3, r7
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	f647 7238 	movw	r2, #32568	@ 0x7f38
 8001a8a:	443a      	add	r2, r7
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	f647 7338 	movw	r3, #32568	@ 0x7f38
 8001a92:	443b      	add	r3, r7
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b0f      	cmp	r3, #15
 8001a98:	dd83      	ble.n	80019a2 <gen_board+0x526>
            }
        }
//        free(board_glove[b]);
//        free(board_dict[b]);
//        free(scores[b]);
        board_glove[b] = board_glove2;
 8001a9a:	f647 7342 	movw	r3, #32578	@ 0x7f42
 8001a9e:	443b      	add	r3, r7
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001aa8:	f6a2 7248 	subw	r2, r2, #3912	@ 0xf48
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	441a      	add	r2, r3
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <gen_board+0x6ac>)
 8001ab2:	f503 43fe 	add.w	r3, r3, #32512	@ 0x7f00
 8001ab6:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8001aba:	443b      	add	r3, r7
 8001abc:	6013      	str	r3, [r2, #0]
        board_dict[b] = board_dict2;
 8001abe:	f647 7342 	movw	r3, #32578	@ 0x7f42
 8001ac2:	443b      	add	r3, r7
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001acc:	f6a2 724c 	subw	r2, r2, #3916	@ 0xf4c
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	441a      	add	r2, r3
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <gen_board+0x6b0>)
 8001ad6:	f503 43fe 	add.w	r3, r3, #32512	@ 0x7f00
 8001ada:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8001ade:	443b      	add	r3, r7
 8001ae0:	6013      	str	r3, [r2, #0]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 8001ae2:	f647 7342 	movw	r3, #32578	@ 0x7f42
 8001ae6:	443b      	add	r3, r7
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	f647 7242 	movw	r2, #32578	@ 0x7f42
 8001af0:	443a      	add	r2, r7
 8001af2:	8013      	strh	r3, [r2, #0]
 8001af4:	f647 7342 	movw	r3, #32578	@ 0x7f42
 8001af8:	443b      	add	r3, r7
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f507 6275 	add.w	r2, r7, #3920	@ 0xf50
 8001b00:	f5a2 6275 	sub.w	r2, r2, #3920	@ 0xf50
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	f73f aebc 	bgt.w	8001884 <gen_board+0x408>
    //     }
    //     board_idx[i] = brd_idx[i];
    // }
//    free(stargets);
//    free(scores);
    free(board_idx);
 8001b0c:	f507 6375 	add.w	r3, r7, #3920	@ 0xf50
 8001b10:	f6a3 7344 	subw	r3, r3, #3908	@ 0xf44
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f00d fb33 	bl	800f180 <free>
}
 8001b1a:	bf00      	nop
 8001b1c:	f507 47fe 	add.w	r7, r7, #32512	@ 0x7f00
 8001b20:	3754      	adds	r7, #84	@ 0x54
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	ffffb2c4 	.word	0xffffb2c4
 8001b2c:	ffff80c4 	.word	0xffff80c4

08001b30 <is_valid_clue>:

int is_valid_clue(Glove_Vector clue, Glove_Vector * board){
 8001b30:	b084      	sub	sp, #16
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	f107 0c10 	add.w	ip, r7, #16
 8001b3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    //IN FUTURE: CONSIDER ADDING STEMMER
    for(int idx = 0; idx < 16; idx += 1){
 8001b40:	2300      	movs	r3, #0
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	e014      	b.n	8001b70 <is_valid_clue+0x40>
        if(is_subset(board[idx].word, clue.word)){
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 8001b54:	4413      	add	r3, r2
 8001b56:	f107 0110 	add.w	r1, r7, #16
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fad2 	bl	8001104 <is_subset>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <is_valid_clue+0x3a>
            return 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e006      	b.n	8001b78 <is_valid_clue+0x48>
    for(int idx = 0; idx < 16; idx += 1){
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	dde7      	ble.n	8001b46 <is_valid_clue+0x16>
        }
    }
    return 1;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b82:	b004      	add	sp, #16
 8001b84:	4770      	bx	lr
	...

08001b88 <get_possibles>:

void get_possibles(Glove_Vector ** board_glove, Dict_Vector ** board_dict, float ** possible_scores, unsigned short ** possible_idx, int num_rounds){
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	f5ad 5dc0 	sub.w	sp, sp, #6144	@ 0x1800
 8001b8e:	b082      	sub	sp, #8
 8001b90:	f640 77c8 	movw	r7, #4040	@ 0xfc8
 8001b94:	446f      	add	r7, sp
 8001b96:	f507 6404 	add.w	r4, r7, #2112	@ 0x840
 8001b9a:	f6a4 0434 	subw	r4, r4, #2100	@ 0x834
 8001b9e:	6020      	str	r0, [r4, #0]
 8001ba0:	f507 6004 	add.w	r0, r7, #2112	@ 0x840
 8001ba4:	f6a0 0038 	subw	r0, r0, #2104	@ 0x838
 8001ba8:	6001      	str	r1, [r0, #0]
 8001baa:	f507 6104 	add.w	r1, r7, #2112	@ 0x840
 8001bae:	f6a1 013c 	subw	r1, r1, #2108	@ 0x83c
 8001bb2:	600a      	str	r2, [r1, #0]
 8001bb4:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001bb8:	f5a2 6204 	sub.w	r2, r2, #2112	@ 0x840
 8001bbc:	6013      	str	r3, [r2, #0]
    //In the future, make this a HEAP or something faster
    //Consider shift to ALT

	for(unsigned short idx = 0; idx < 500; idx += 1){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8a7 383e 	strh.w	r3, [r7, #2110]	@ 0x83e
 8001bc4:	e229      	b.n	800201a <get_possibles+0x492>
        //IMPORTANT: IN THE FUTURE, this will need to be read directly from SD, and FAST
    	Glove_Vector clue_glove;
        Dict_Vector clue_dict;
    	char word[25];
    	float * vec_floats = read_vec(idx, word);
 8001bc6:	f207 72fc 	addw	r2, r7, #2044	@ 0x7fc
 8001bca:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	@ 0x83e
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f00a fbe7 	bl	800c3a4 <read_vec>
 8001bd6:	f8c7 0824 	str.w	r0, [r7, #2084]	@ 0x824
    	float clue_doc_freq = vec_floats[0];
 8001bda:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001be4:	6013      	str	r3, [r2, #0]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8a7 383c 	strh.w	r3, [r7, #2108]	@ 0x83c
 8001bec:	e012      	b.n	8001c14 <get_possibles+0x8c>
        	clue_glove.word[wi] = word[wi];
 8001bee:	f8b7 283c 	ldrh.w	r2, [r7, #2108]	@ 0x83c
 8001bf2:	f8b7 383c 	ldrh.w	r3, [r7, #2108]	@ 0x83c
 8001bf6:	f502 6204 	add.w	r2, r2, #2112	@ 0x840
 8001bfa:	443a      	add	r2, r7
 8001bfc:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 8001c00:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001c04:	f5a2 62a2 	sub.w	r2, r2, #1296	@ 0x510
 8001c08:	54d1      	strb	r1, [r2, r3]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 8001c0a:	f8b7 383c 	ldrh.w	r3, [r7, #2108]	@ 0x83c
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f8a7 383c 	strh.w	r3, [r7, #2108]	@ 0x83c
 8001c14:	f8b7 383c 	ldrh.w	r3, [r7, #2108]	@ 0x83c
 8001c18:	2b18      	cmp	r3, #24
 8001c1a:	d9e8      	bls.n	8001bee <get_possibles+0x66>
    	}
//    	free(word);
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8a7 383a 	strh.w	r3, [r7, #2106]	@ 0x83a
 8001c22:	e02d      	b.n	8001c80 <get_possibles+0xf8>
			//SAVE WORD TO GLOVE VEC TOO
			clue_glove.dims[move_idx] = vec_floats[1 + move_idx];
 8001c24:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	@ 0x83a
 8001c28:	3301      	adds	r3, #1
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8001c30:	441a      	add	r2, r3
 8001c32:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	@ 0x83a
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	f507 6104 	add.w	r1, r7, #2112	@ 0x840
 8001c3c:	f5a1 61a2 	sub.w	r1, r1, #1296	@ 0x510
 8001c40:	3306      	adds	r3, #6
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	3304      	adds	r3, #4
 8001c48:	601a      	str	r2, [r3, #0]
			if(move_idx < 200){
 8001c4a:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	@ 0x83a
 8001c4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c50:	d811      	bhi.n	8001c76 <get_possibles+0xee>
				clue_dict.dims[move_idx] = vec_floats[301 + move_idx];
 8001c52:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	@ 0x83a
 8001c56:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8001c60:	441a      	add	r2, r3
 8001c62:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	@ 0x83a
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	f507 6104 	add.w	r1, r7, #2112	@ 0x840
 8001c6c:	f5a1 6103 	sub.w	r1, r1, #2096	@ 0x830
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	601a      	str	r2, [r3, #0]
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001c76:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	@ 0x83a
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f8a7 383a 	strh.w	r3, [r7, #2106]	@ 0x83a
 8001c80:	f8b7 383a 	ldrh.w	r3, [r7, #2106]	@ 0x83a
 8001c84:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c88:	d3cc      	bcc.n	8001c24 <get_possibles+0x9c>
			}
		}
		free(vec_floats);
 8001c8a:	f8d7 0824 	ldr.w	r0, [r7, #2084]	@ 0x824
 8001c8e:	f00d fa77 	bl	800f180 <free>


        for(int b = 0; b < num_rounds; b += 1){
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 8001c98:	e1b3      	b.n	8002002 <get_possibles+0x47a>
            if(is_valid_clue(clue_glove, board_glove[b]) == 0){
 8001c9a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001ca4:	f6a2 0234 	subw	r2, r2, #2100	@ 0x834
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001cb2:	f5a2 64a2 	sub.w	r4, r2, #1296	@ 0x510
 8001cb6:	f8cd 34bc 	str.w	r3, [sp, #1212]	@ 0x4bc
 8001cba:	4668      	mov	r0, sp
 8001cbc:	f104 0310 	add.w	r3, r4, #16
 8001cc0:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f00d fba9 	bl	800f41c <memcpy>
 8001cca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cce:	f7ff ff2f 	bl	8001b30 <is_valid_clue>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 818e 	beq.w	8001ff6 <get_possibles+0x46e>
                continue;
            }
            float score = vector_score(clue_glove, clue_dict, board_glove[b][0], board_dict[b][0]);
 8001cda:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001ce4:	f6a2 0234 	subw	r2, r2, #2100	@ 0x834
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	681d      	ldr	r5, [r3, #0]
 8001cee:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001cf8:	f6a2 0238 	subw	r2, r2, #2104	@ 0x838
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 8001d06:	f5a3 64a2 	sub.w	r4, r3, #1296	@ 0x510
 8001d0a:	f60d 43a8 	addw	r3, sp, #3240	@ 0xca8
 8001d0e:	4611      	mov	r1, r2
 8001d10:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001d14:	4618      	mov	r0, r3
 8001d16:	f00d fb81 	bl	800f41c <memcpy>
 8001d1a:	f20d 73dc 	addw	r3, sp, #2012	@ 0x7dc
 8001d1e:	4629      	mov	r1, r5
 8001d20:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00d fb79 	bl	800f41c <memcpy>
 8001d2a:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 8001d2e:	f5a3 6203 	sub.w	r2, r3, #2096	@ 0x830
 8001d32:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001d36:	4611      	mov	r1, r2
 8001d38:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f00d fb6d 	bl	800f41c <memcpy>
 8001d42:	4668      	mov	r0, sp
 8001d44:	f104 0310 	add.w	r3, r4, #16
 8001d48:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f00d fb65 	bl	800f41c <memcpy>
 8001d52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d56:	f7ff fb49 	bl	80013ec <vector_score>
 8001d5a:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8001d5e:	ed83 0a00 	vstr	s0, [r3]
            score += vector_score(clue_glove, clue_dict, board_glove[b][1], board_dict[b][1]);
 8001d62:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001d6c:	f6a2 0234 	subw	r2, r2, #2100	@ 0x834
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f203 45cc 	addw	r5, r3, #1228	@ 0x4cc
 8001d7a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001d84:	f6a2 0238 	subw	r2, r2, #2104	@ 0x838
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 7248 	add.w	r2, r3, #800	@ 0x320
 8001d92:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 8001d96:	f5a3 64a2 	sub.w	r4, r3, #1296	@ 0x510
 8001d9a:	f60d 43a8 	addw	r3, sp, #3240	@ 0xca8
 8001d9e:	4611      	mov	r1, r2
 8001da0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00d fb39 	bl	800f41c <memcpy>
 8001daa:	f20d 73dc 	addw	r3, sp, #2012	@ 0x7dc
 8001dae:	4629      	mov	r1, r5
 8001db0:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00d fb31 	bl	800f41c <memcpy>
 8001dba:	f507 6304 	add.w	r3, r7, #2112	@ 0x840
 8001dbe:	f5a3 6203 	sub.w	r2, r3, #2096	@ 0x830
 8001dc2:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f00d fb25 	bl	800f41c <memcpy>
 8001dd2:	4668      	mov	r0, sp
 8001dd4:	f104 0310 	add.w	r3, r4, #16
 8001dd8:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f00d fb1d 	bl	800f41c <memcpy>
 8001de2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001de6:	f7ff fb01 	bl	80013ec <vector_score>
 8001dea:	eeb0 7a40 	vmov.f32	s14, s0
 8001dee:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dfa:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8001dfe:	edc3 7a00 	vstr	s15, [r3]
            score -= clue_doc_freq;
 8001e02:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8001e06:	ed93 7a00 	vldr	s14, [r3]
 8001e0a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e16:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8001e1a:	edc3 7a00 	vstr	s15, [r3]
            unsigned short insert_idx = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8a7 3832 	strh.w	r3, [r7, #2098]	@ 0x832
            for(unsigned short back = (idx<200)?idx:199; back < 51000; back -= 1){
 8001e24:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	@ 0x83e
 8001e28:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e2a:	bf28      	it	cs
 8001e2c:	23c7      	movcs	r3, #199	@ 0xc7
 8001e2e:	f8a7 3830 	strh.w	r3, [r7, #2096]	@ 0x830
 8001e32:	e023      	b.n	8001e7c <get_possibles+0x2f4>
                //Figure out where to insert based on score
                if(possible_scores[b][back] > score){
 8001e34:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001e3e:	f6a2 023c 	subw	r2, r2, #2108	@ 0x83c
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	@ 0x830
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 8001e58:	ed93 7a00 	vldr	s14, [r3]
 8001e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	d505      	bpl.n	8001e72 <get_possibles+0x2ea>
                    insert_idx = back + 1;
 8001e66:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	@ 0x830
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f8a7 3832 	strh.w	r3, [r7, #2098]	@ 0x832
//                    if(insert_idx < 200){
//                        //printf("Possible IDX: %d, Insert IDX: %d \n", idx, insert_idx);
//                    }
                    break;
 8001e70:	e00a      	b.n	8001e88 <get_possibles+0x300>
            for(unsigned short back = (idx<200)?idx:199; back < 51000; back -= 1){
 8001e72:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	@ 0x830
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f8a7 3830 	strh.w	r3, [r7, #2096]	@ 0x830
 8001e7c:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	@ 0x830
 8001e80:	f24c 7237 	movw	r2, #50999	@ 0xc737
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d9d5      	bls.n	8001e34 <get_possibles+0x2ac>
                }
            }
            float score_pass = -9999;
 8001e88:	4b6a      	ldr	r3, [pc, #424]	@ (8002034 <get_possibles+0x4ac>)
 8001e8a:	f607 022c 	addw	r2, r7, #2092	@ 0x82c
 8001e8e:	6013      	str	r3, [r2, #0]
            unsigned short idx_pass = 60000;
 8001e90:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001e94:	f8a7 382a 	strh.w	r3, [r7, #2090]	@ 0x82a
            unsigned short save_idx = 60000;
 8001e98:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001e9c:	f8a7 3828 	strh.w	r3, [r7, #2088]	@ 0x828
            if(insert_idx < 200){
 8001ea0:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	@ 0x832
 8001ea4:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ea6:	f200 80a1 	bhi.w	8001fec <get_possibles+0x464>
                if(possible_idx[b][insert_idx] != -1){
                    score_pass = possible_scores[b][insert_idx];
 8001eaa:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001eb4:	f6a2 023c 	subw	r2, r2, #2108	@ 0x83c
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	@ 0x832
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f607 022c 	addw	r2, r7, #2092	@ 0x82c
 8001ecc:	6013      	str	r3, [r2, #0]
                    save_idx = possible_idx[b][insert_idx];
 8001ece:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001ed8:	f5a2 6204 	sub.w	r2, r2, #2112	@ 0x840
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	@ 0x832
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	f8a7 3828 	strh.w	r3, [r7, #2088]	@ 0x828
                    idx_pass = insert_idx + 1;
 8001ef0:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	@ 0x832
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f8a7 382a 	strh.w	r3, [r7, #2090]	@ 0x82a
                }
                possible_scores[b][insert_idx] = score;
 8001efa:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001f04:	f6a2 023c 	subw	r2, r2, #2108	@ 0x83c
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	@ 0x832
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
                possible_idx[b][insert_idx] = idx;
 8001f1e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001f28:	f5a2 6204 	sub.w	r2, r2, #2112	@ 0x840
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	f8b7 3832 	ldrh.w	r3, [r7, #2098]	@ 0x832
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	f8b7 283e 	ldrh.w	r2, [r7, #2110]	@ 0x83e
 8001f3e:	801a      	strh	r2, [r3, #0]
            }
            //Pass Everything along
            while(idx_pass < 200){
 8001f40:	e054      	b.n	8001fec <get_possibles+0x464>
                float ftemp = possible_scores[b][idx_pass];
 8001f42:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001f4c:	f6a2 023c 	subw	r2, r2, #2108	@ 0x83c
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 8001f64:	6013      	str	r3, [r2, #0]
                unsigned short itemp = possible_idx[b][idx_pass];
 8001f66:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001f70:	f5a2 6204 	sub.w	r2, r2, #2112	@ 0x840
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	f8a7 3816 	strh.w	r3, [r7, #2070]	@ 0x816
                possible_scores[b][idx_pass] = score_pass;
 8001f88:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001f92:	f6a2 023c 	subw	r2, r2, #2108	@ 0x83c
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f607 022c 	addw	r2, r7, #2092	@ 0x82c
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	601a      	str	r2, [r3, #0]
                possible_idx[b][idx_pass] = save_idx;
 8001fac:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 8001fb6:	f5a2 6204 	sub.w	r2, r2, #2112	@ 0x840
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f8b7 2828 	ldrh.w	r2, [r7, #2088]	@ 0x828
 8001fcc:	801a      	strh	r2, [r3, #0]
                score_pass = ftemp;
 8001fce:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f607 022c 	addw	r2, r7, #2092	@ 0x82c
 8001fd8:	6013      	str	r3, [r2, #0]
                save_idx = itemp;
 8001fda:	f8b7 3816 	ldrh.w	r3, [r7, #2070]	@ 0x816
 8001fde:	f8a7 3828 	strh.w	r3, [r7, #2088]	@ 0x828
                idx_pass += 1;
 8001fe2:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f8a7 382a 	strh.w	r3, [r7, #2090]	@ 0x82a
            while(idx_pass < 200){
 8001fec:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001ff0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ff2:	d9a6      	bls.n	8001f42 <get_possibles+0x3ba>
 8001ff4:	e000      	b.n	8001ff8 <get_possibles+0x470>
                continue;
 8001ff6:	bf00      	nop
        for(int b = 0; b < num_rounds; b += 1){
 8001ff8:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 8002002:	f8d7 2834 	ldr.w	r2, [r7, #2100]	@ 0x834
 8002006:	f8d7 3850 	ldr.w	r3, [r7, #2128]	@ 0x850
 800200a:	429a      	cmp	r2, r3
 800200c:	f6ff ae45 	blt.w	8001c9a <get_possibles+0x112>
	for(unsigned short idx = 0; idx < 500; idx += 1){
 8002010:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	@ 0x83e
 8002014:	3301      	adds	r3, #1
 8002016:	f8a7 383e 	strh.w	r3, [r7, #2110]	@ 0x83e
 800201a:	f8b7 383e 	ldrh.w	r3, [r7, #2110]	@ 0x83e
 800201e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002022:	f4ff add0 	bcc.w	8001bc6 <get_possibles+0x3e>
            }


        }
    }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	f507 6704 	add.w	r7, r7, #2112	@ 0x840
 800202e:	46bd      	mov	sp, r7
 8002030:	bdb0      	pop	{r4, r5, r7, pc}
 8002032:	bf00      	nop
 8002034:	c61c3c00 	.word	0xc61c3c00

08002038 <overlap_score>:

float overlap_score(Glove_Vector * board_gloves, Dict_Vector * board_dicts, unsigned short clue_idx){
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	f5ad 5d8d 	sub.w	sp, sp, #4512	@ 0x11a0
 800203e:	b083      	sub	sp, #12
 8002040:	f640 1788 	movw	r7, #2440	@ 0x988
 8002044:	446f      	add	r7, sp
 8002046:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800204a:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800204e:	6018      	str	r0, [r3, #0]
 8002050:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002054:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8002058:	6019      	str	r1, [r3, #0]
 800205a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800205e:	f6a3 031a 	subw	r3, r3, #2074	@ 0x81a
 8002062:	801a      	strh	r2, [r3, #0]
    //WILL BE DONE BY A READ ON THE FLY
    Glove_Vector clue_glove;
    Dict_Vector clue_dict;
    char * word = malloc(sizeof(*word) * 25);
 8002064:	2019      	movs	r0, #25
 8002066:	f00d f883 	bl	800f170 <malloc>
 800206a:	4603      	mov	r3, r0
 800206c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
    float * vec_floats = read_vec(clue_idx, word);
 8002070:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002074:	f6a3 031a 	subw	r3, r3, #2074	@ 0x81a
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 800207e:	4618      	mov	r0, r3
 8002080:	f00a f990 	bl	800c3a4 <read_vec>
 8002084:	f8c7 0808 	str.w	r0, [r7, #2056]	@ 0x808
	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8002088:	2300      	movs	r3, #0
 800208a:	f8a7 381e 	strh.w	r3, [r7, #2078]	@ 0x81e
 800208e:	e03e      	b.n	800210e <overlap_score+0xd6>
		//SAVE WORD TO GLOVE VEC TOO
		clue_glove.dims[move_idx] = vec_floats[1 + move_idx];
 8002090:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8002094:	3301      	adds	r3, #1
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 800209c:	441a      	add	r2, r3
 800209e:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 80020a8:	f2a1 41ec 	subw	r1, r1, #1260	@ 0x4ec
 80020ac:	3306      	adds	r3, #6
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3304      	adds	r3, #4
 80020b4:	601a      	str	r2, [r3, #0]
		if(move_idx < 200){
 80020b6:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 80020ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80020bc:	d811      	bhi.n	80020e2 <overlap_score+0xaa>
			clue_dict.dims[move_idx] = vec_floats[301 + move_idx];
 80020be:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 80020c2:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80020cc:	441a      	add	r2, r3
 80020ce:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 80020d8:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	601a      	str	r2, [r3, #0]
		}
		if(move_idx < 25){
 80020e2:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 80020e6:	2b18      	cmp	r3, #24
 80020e8:	d80c      	bhi.n	8002104 <overlap_score+0xcc>
			clue_glove.word[move_idx] = word[move_idx];
 80020ea:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 80020ee:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 80020f2:	441a      	add	r2, r3
 80020f4:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 80020f8:	7811      	ldrb	r1, [r2, #0]
 80020fa:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80020fe:	f2a2 42ec 	subw	r2, r2, #1260	@ 0x4ec
 8002102:	54d1      	strb	r1, [r2, r3]
	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8002104:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8002108:	3301      	adds	r3, #1
 800210a:	f8a7 381e 	strh.w	r3, [r7, #2078]	@ 0x81e
 800210e:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8002112:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002116:	d3bb      	bcc.n	8002090 <overlap_score+0x58>
		}
	}
	free(word);
 8002118:	f8d7 080c 	ldr.w	r0, [r7, #2060]	@ 0x80c
 800211c:	f00d f830 	bl	800f180 <free>
	free(vec_floats);
 8002120:	f8d7 0808 	ldr.w	r0, [r7, #2056]	@ 0x808
 8002124:	f00d f82c 	bl	800f180 <free>

    //Calculate An Overlap Score
    float max_glove = glove_similarity(clue_glove, board_gloves[2]);
 8002128:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800212c:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f603 1298 	addw	r2, r3, #2456	@ 0x998
 8002136:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800213a:	f2a3 44ec 	subw	r4, r3, #1260	@ 0x4ec
 800213e:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8002142:	4611      	mov	r1, r2
 8002144:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8002148:	4618      	mov	r0, r3
 800214a:	f00d f967 	bl	800f41c <memcpy>
 800214e:	4668      	mov	r0, sp
 8002150:	f104 0310 	add.w	r3, r4, #16
 8002154:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8002158:	4619      	mov	r1, r3
 800215a:	f00d f95f 	bl	800f41c <memcpy>
 800215e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002162:	f7ff f910 	bl	8001386 <glove_similarity>
 8002166:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800216a:	ed83 0a00 	vstr	s0, [r3]
    float max_dict = dict_similarity(clue_dict, board_dicts[2]);
 800216e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002172:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 62c8 	add.w	r2, r3, #1600	@ 0x640
 800217c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002180:	f6a3 040c 	subw	r4, r3, #2060	@ 0x80c
 8002184:	abc4      	add	r3, sp, #784	@ 0x310
 8002186:	4611      	mov	r1, r2
 8002188:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800218c:	4618      	mov	r0, r3
 800218e:	f00d f945 	bl	800f41c <memcpy>
 8002192:	4668      	mov	r0, sp
 8002194:	f104 0310 	add.w	r3, r4, #16
 8002198:	f44f 7244 	mov.w	r2, #784	@ 0x310
 800219c:	4619      	mov	r1, r3
 800219e:	f00d f93d 	bl	800f41c <memcpy>
 80021a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021a6:	f7ff f909 	bl	80013bc <dict_similarity>
 80021aa:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 80021ae:	ed83 0a00 	vstr	s0, [r3]
    for(unsigned short idx = 2; idx < 16; idx += 1){
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
 80021b8:	e079      	b.n	80022ae <overlap_score+0x276>
        float glove = glove_similarity(clue_glove, board_gloves[idx]);
 80021ba:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 80021be:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80021ca:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	441a      	add	r2, r3
 80021d2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80021d6:	f2a3 44ec 	subw	r4, r3, #1260	@ 0x4ec
 80021da:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 80021de:	4611      	mov	r1, r2
 80021e0:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00d f919 	bl	800f41c <memcpy>
 80021ea:	4668      	mov	r0, sp
 80021ec:	f104 0310 	add.w	r3, r4, #16
 80021f0:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 80021f4:	4619      	mov	r1, r3
 80021f6:	f00d f911 	bl	800f41c <memcpy>
 80021fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021fe:	f7ff f8c2 	bl	8001386 <glove_similarity>
 8002202:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002206:	ed83 0a00 	vstr	s0, [r3]
        float dict = dict_similarity(clue_dict, board_dicts[idx]);
 800220a:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 800220e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800221a:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	441a      	add	r2, r3
 8002222:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002226:	f6a3 040c 	subw	r4, r3, #2060	@ 0x80c
 800222a:	abc4      	add	r3, sp, #784	@ 0x310
 800222c:	4611      	mov	r1, r2
 800222e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002232:	4618      	mov	r0, r3
 8002234:	f00d f8f2 	bl	800f41c <memcpy>
 8002238:	4668      	mov	r0, sp
 800223a:	f104 0310 	add.w	r3, r4, #16
 800223e:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8002242:	4619      	mov	r1, r3
 8002244:	f00d f8ea 	bl	800f41c <memcpy>
 8002248:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800224c:	f7ff f8b6 	bl	80013bc <dict_similarity>
 8002250:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002254:	ed83 0a00 	vstr	s0, [r3]
        if(dict > max_dict){
 8002258:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800225c:	ed93 7a00 	vldr	s14, [r3]
 8002260:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002270:	dd05      	ble.n	800227e <overlap_score+0x246>
            max_dict = dict;
 8002272:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 800227c:	6013      	str	r3, [r2, #0]
        }
        if(glove > max_glove){
 800227e:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002282:	ed93 7a00 	vldr	s14, [r3]
 8002286:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	dd05      	ble.n	80022a4 <overlap_score+0x26c>
            max_glove = glove;
 8002298:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 80022a2:	6013      	str	r3, [r2, #0]
    for(unsigned short idx = 2; idx < 16; idx += 1){
 80022a4:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 80022a8:	3301      	adds	r3, #1
 80022aa:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
 80022ae:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 80022b2:	2b0f      	cmp	r3, #15
 80022b4:	d981      	bls.n	80021ba <overlap_score+0x182>
        }
    }
    return 0.5 * (max_glove + max_dict);
 80022b6:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80022ba:	ed93 7a00 	vldr	s14, [r3]
 80022be:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80022d2:	eeb0 0a67 	vmov.f32	s0, s15
 80022d6:	f607 0724 	addw	r7, r7, #2084	@ 0x824
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}
	...

080022e0 <get_clues>:

unsigned short * get_clues(Glove_Vector ** board_glove, Dict_Vector ** board_dict, int num_rounds){
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	ed2d 8b02 	vpush	{d8}
 80022e6:	b091      	sub	sp, #68	@ 0x44
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
    //consider shift to ALT
    //SETUP POSSIBLE CLUE TRACKING INFOR
    unsigned short ** possible_idx = malloc(sizeof(*possible_idx) * num_rounds);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00c ff3b 	bl	800f170 <malloc>
 80022fa:	4603      	mov	r3, r0
 80022fc:	61fb      	str	r3, [r7, #28]
    float ** possible_scores = malloc(sizeof(*possible_scores) * num_rounds);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f00c ff34 	bl	800f170 <malloc>
 8002308:	4603      	mov	r3, r0
 800230a:	61bb      	str	r3, [r7, #24]
    for(int b = 0; b < num_rounds; b += 1){
 800230c:	2300      	movs	r3, #0
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002310:	e034      	b.n	800237c <get_clues+0x9c>
        possible_idx[b] = malloc(sizeof(**possible_idx) * 200);
 8002312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	18d4      	adds	r4, r2, r3
 800231a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800231e:	f00c ff27 	bl	800f170 <malloc>
 8002322:	4603      	mov	r3, r0
 8002324:	6023      	str	r3, [r4, #0]
        possible_scores[b] = malloc(sizeof(**possible_scores) * 200);
 8002326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	18d4      	adds	r4, r2, r3
 800232e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002332:	f00c ff1d 	bl	800f170 <malloc>
 8002336:	4603      	mov	r3, r0
 8002338:	6023      	str	r3, [r4, #0]
        for(int fill = 0; fill < 200; fill += 1){
 800233a:	2300      	movs	r3, #0
 800233c:	633b      	str	r3, [r7, #48]	@ 0x30
 800233e:	e017      	b.n	8002370 <get_clues+0x90>
            possible_idx[b][fill] = -1;
 8002340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002354:	801a      	strh	r2, [r3, #0]
            possible_scores[b][fill] = -9999;
 8002356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	4a65      	ldr	r2, [pc, #404]	@ (80024fc <get_clues+0x21c>)
 8002368:	601a      	str	r2, [r3, #0]
        for(int fill = 0; fill < 200; fill += 1){
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	3301      	adds	r3, #1
 800236e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002372:	2bc7      	cmp	r3, #199	@ 0xc7
 8002374:	dde4      	ble.n	8002340 <get_clues+0x60>
    for(int b = 0; b < num_rounds; b += 1){
 8002376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002378:	3301      	adds	r3, #1
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
 800237c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbc6      	blt.n	8002312 <get_clues+0x32>
        }
    }
//    printf("Checkpoint #5\n");

    //GET POSSIBLE CLUES AND THEIR SCORES
    get_possibles(board_glove, board_dict, possible_scores, possible_idx, num_rounds);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff fbfa 	bl	8001b88 <get_possibles>
//    printf("Checkpoint #6\n");

    //FIND THE BEST CLUE FOR EACH BOARD
    unsigned short * ret_idx = malloc(sizeof(*ret_idx) * num_rounds);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f00c fee9 	bl	800f170 <malloc>
 800239e:	4603      	mov	r3, r0
 80023a0:	617b      	str	r3, [r7, #20]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 80023a2:	2300      	movs	r3, #0
 80023a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80023a6:	e073      	b.n	8002490 <get_clues+0x1b0>
        unsigned short best_idx = possible_idx[b][0];
 80023a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	4413      	add	r3, r2
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        float best_score = possible_scores[b][0] - overlap_score(board_glove[b], board_dict[b], possible_idx[b][0]);
 80023b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4413      	add	r3, r2
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	ed93 8a00 	vldr	s16, [r3]
 80023c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	f7ff fe27 	bl	8002038 <overlap_score>
 80023ea:	eef0 7a40 	vmov.f32	s15, s0
 80023ee:	ee78 7a67 	vsub.f32	s15, s16, s15
 80023f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for(int idx = 1; idx < 200; idx += 1){
 80023f6:	2301      	movs	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fa:	e03d      	b.n	8002478 <get_clues+0x198>
            float score = possible_scores[b][idx] - overlap_score(board_glove[b], board_dict[b], possible_idx[b][idx]);
 80023fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4413      	add	r3, r2
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	ed93 8a00 	vldr	s16, [r3]
 8002410:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4413      	add	r3, r2
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	f7ff fdfe 	bl	8002038 <overlap_score>
 800243c:	eef0 7a40 	vmov.f32	s15, s0
 8002440:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002444:	edc7 7a04 	vstr	s15, [r7, #16]
            if(score > best_score){
 8002448:	ed97 7a04 	vldr	s14, [r7, #16]
 800244c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	dd0b      	ble.n	8002472 <get_clues+0x192>
                best_score = score;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	62bb      	str	r3, [r7, #40]	@ 0x28
                best_idx = possible_idx[b][idx];
 800245e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	4413      	add	r3, r2
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        for(int idx = 1; idx < 200; idx += 1){
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	3301      	adds	r3, #1
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	2bc7      	cmp	r3, #199	@ 0xc7
 800247c:	ddbe      	ble.n	80023fc <get_clues+0x11c>
            }
        }
        ret_idx[b] = best_idx;
 800247e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4413      	add	r3, r2
 8002486:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002488:	801a      	strh	r2, [r3, #0]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 800248a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800248c:	3301      	adds	r3, #1
 800248e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002490:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	dc87      	bgt.n	80023a8 <get_clues+0xc8>
//            save_scores[b][idx] = vector_score(board_glove[b][idx], board_dicts[b][idx], all_glove[ret_idx[b]], all_dict[ret_idx[b]]);
//        }
//    }

    //FREES
    for(int b = 0; b < num_rounds; b += 1){
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
 800249c:	e01a      	b.n	80024d4 <get_clues+0x1f4>
        free(board_dict[b]);
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	4413      	add	r3, r2
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f00c fe69 	bl	800f180 <free>
        free(possible_scores[b]);
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f00c fe61 	bl	800f180 <free>
        free(possible_idx[b]);
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00c fe59 	bl	800f180 <free>
    for(int b = 0; b < num_rounds; b += 1){
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	3301      	adds	r3, #1
 80024d2:	623b      	str	r3, [r7, #32]
 80024d4:	6a3a      	ldr	r2, [r7, #32]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	dbe0      	blt.n	800249e <get_clues+0x1be>
    }
    free(board_dict);
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	f00c fe4f 	bl	800f180 <free>
    free(possible_scores);
 80024e2:	69b8      	ldr	r0, [r7, #24]
 80024e4:	f00c fe4c 	bl	800f180 <free>
    free(possible_idx);
 80024e8:	69f8      	ldr	r0, [r7, #28]
 80024ea:	f00c fe49 	bl	800f180 <free>

    return ret_idx;
 80024ee:	697b      	ldr	r3, [r7, #20]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	373c      	adds	r7, #60	@ 0x3c
 80024f4:	46bd      	mov	sp, r7
 80024f6:	ecbd 8b02 	vpop	{d8}
 80024fa:	bd90      	pop	{r4, r7, pc}
 80024fc:	c61c3c00 	.word	0xc61c3c00

08002500 <play_round>:
//        // }
//    }
//    fclose(file);
//}

void play_round(unsigned short * clues, Glove_Vector ** board_glove, int num_rounds){
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
//            }
//            printf("\n");
//        }
//        printf("\n\n\n\n\n");
//    }
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <clues>:
//        c = arg[rds_idx++];
//    }
//    return ret;
//}

void clues(){
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b089      	sub	sp, #36	@ 0x24
 800251c:	af00      	add	r7, sp, #0
//    int num_rounds = read_rounds(argv[1]);
     int num_rounds = 1;
 800251e:	2301      	movs	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
//    free(full_board);

     // char ** all_board = read_board("codewords.txt");
     // write_idxs("allboard", all_board, all_glove, 100);

     unsigned short * board_idx = malloc(sizeof(*board_idx) * 250);
 8002522:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002526:	f00c fe23 	bl	800f170 <malloc>
 800252a:	4603      	mov	r3, r0
 800252c:	613b      	str	r3, [r7, #16]
     for(int i = 0; i < 250; i += 1){
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e009      	b.n	8002548 <clues+0x30>
    	 board_idx[i] = i;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	b292      	uxth	r2, r2
 8002540:	801a      	strh	r2, [r3, #0]
     for(int i = 0; i < 250; i += 1){
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3301      	adds	r3, #1
 8002546:	61fb      	str	r3, [r7, #28]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2bf9      	cmp	r3, #249	@ 0xf9
 800254c:	ddf2      	ble.n	8002534 <clues+0x1c>
     }
//     read_board_2("allboard", all_board, board_idx, 100);
    
     Glove_Vector ** board_glove = malloc(sizeof(*board_glove) * num_rounds);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4618      	mov	r0, r3
 8002554:	f00c fe0c 	bl	800f170 <malloc>
 8002558:	4603      	mov	r3, r0
 800255a:	60fb      	str	r3, [r7, #12]
     Dict_Vector ** board_dict = malloc(sizeof(*board_dict) * num_rounds);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f00c fe05 	bl	800f170 <malloc>
 8002566:	4603      	mov	r3, r0
 8002568:	60bb      	str	r3, [r7, #8]
     for(unsigned short i = 0; i < 16; i += 1){
 800256a:	2300      	movs	r3, #0
 800256c:	837b      	strh	r3, [r7, #26]
 800256e:	e016      	b.n	800259e <clues+0x86>
    	 board_glove[i] = malloc(sizeof(**board_glove) * 16);
 8002570:	8b7b      	ldrh	r3, [r7, #26]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	18d4      	adds	r4, r2, r3
 8002578:	f644 40c0 	movw	r0, #19648	@ 0x4cc0
 800257c:	f00c fdf8 	bl	800f170 <malloc>
 8002580:	4603      	mov	r3, r0
 8002582:	6023      	str	r3, [r4, #0]
    	 board_dict[i] = malloc(sizeof(**board_dict) * 16);
 8002584:	8b7b      	ldrh	r3, [r7, #26]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	18d4      	adds	r4, r2, r3
 800258c:	f44f 5048 	mov.w	r0, #12800	@ 0x3200
 8002590:	f00c fdee 	bl	800f170 <malloc>
 8002594:	4603      	mov	r3, r0
 8002596:	6023      	str	r3, [r4, #0]
     for(unsigned short i = 0; i < 16; i += 1){
 8002598:	8b7b      	ldrh	r3, [r7, #26]
 800259a:	3301      	adds	r3, #1
 800259c:	837b      	strh	r3, [r7, #26]
 800259e:	8b7b      	ldrh	r3, [r7, #26]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d9e5      	bls.n	8002570 <clues+0x58>
     }
     // EMPTY TO SAVE GLOVE AND DICT VECTORS IN

     gen_board(board_idx, board_glove, board_dict, num_rounds);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	68f9      	ldr	r1, [r7, #12]
 80025aa:	6938      	ldr	r0, [r7, #16]
 80025ac:	f7fe ff66 	bl	800147c <gen_board>
//         for(int idx = 0; idx < 16; idx+= 1){
//             save_scores[b][idx] = 0;
//         }
//     }

     unsigned short * clues = get_clues(board_glove, board_dict, num_rounds);
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff fe93 	bl	80022e0 <get_clues>
 80025ba:	6078      	str	r0, [r7, #4]

//     printf("Checkpoint #7\n");
     play_round(clues, board_glove, num_rounds);
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff9d 	bl	8002500 <play_round>

//     for(int b = 0; b < num_rounds; b += 1){
//         //free(boards_idx[b]);
//         //free(save_scores[b]);
//     }
     free(clues);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f00c fdda 	bl	800f180 <free>
//     free(save_scores);
//     free(boards_idx);
}
 80025cc:	bf00      	nop
 80025ce:	3724      	adds	r7, #36	@ 0x24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}

080025d4 <end_game>:
			}
			break;
	}
}

void end_game(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af04      	add	r7, sp, #16
	mode = GAME_MODE_END;
 80025da:	4bdb      	ldr	r3, [pc, #876]	@ (8002948 <end_game+0x374>)
 80025dc:	2202      	movs	r2, #2
 80025de:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 80025e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025e4:	f001 fa06 	bl	80039f4 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 80025e8:	201f      	movs	r0, #31
 80025ea:	f7fe fb7d 	bl	8000ce8 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 80025ee:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	230a      	movs	r3, #10
 80025f6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80025fa:	215a      	movs	r1, #90	@ 0x5a
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7fe fb45 	bl	8000c8c <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 8002602:	2300      	movs	r3, #0
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	230a      	movs	r3, #10
 8002608:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800260c:	2164      	movs	r1, #100	@ 0x64
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe fb3c 	bl	8000c8c <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 8002614:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8002618:	9302      	str	r3, [sp, #8]
 800261a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800262a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800262e:	21b4      	movs	r1, #180	@ 0xb4
 8002630:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002634:	f7fe fb78 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 8002638:	231f      	movs	r3, #31
 800263a:	9302      	str	r3, [sp, #8]
 800263c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800264c:	f240 22da 	movw	r2, #730	@ 0x2da
 8002650:	21b4      	movs	r1, #180	@ 0xb4
 8002652:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8002656:	f7fe fb67 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 800265a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800265e:	9302      	str	r3, [sp, #8]
 8002660:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	f240 238a 	movw	r3, #650	@ 0x28a
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002670:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8002674:	21b4      	movs	r1, #180	@ 0xb4
 8002676:	f240 208a 	movw	r0, #650	@ 0x28a
 800267a:	f7fe fb55 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 800267e:	231f      	movs	r3, #31
 8002680:	9302      	str	r3, [sp, #8]
 8002682:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	f240 2376 	movw	r3, #630	@ 0x276
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002692:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8002696:	21b4      	movs	r1, #180	@ 0xb4
 8002698:	f240 2076 	movw	r0, #630	@ 0x276
 800269c:	f7fe fb44 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 80026a0:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	2346      	movs	r3, #70	@ 0x46
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80026b4:	2214      	movs	r2, #20
 80026b6:	21b4      	movs	r1, #180	@ 0xb4
 80026b8:	2046      	movs	r0, #70	@ 0x46
 80026ba:	f7fe fb35 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 80026be:	231f      	movs	r3, #31
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	235a      	movs	r3, #90	@ 0x5a
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80026d0:	2228      	movs	r2, #40	@ 0x28
 80026d2:	21b4      	movs	r1, #180	@ 0xb4
 80026d4:	205a      	movs	r0, #90	@ 0x5a
 80026d6:	f7fe fb27 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 80026da:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80026de:	9302      	str	r3, [sp, #8]
 80026e0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	2378      	movs	r3, #120	@ 0x78
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80026ee:	2246      	movs	r2, #70	@ 0x46
 80026f0:	21b4      	movs	r1, #180	@ 0xb4
 80026f2:	2078      	movs	r0, #120	@ 0x78
 80026f4:	f7fe fb18 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 80026f8:	231f      	movs	r3, #31
 80026fa:	9302      	str	r3, [sp, #8]
 80026fc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	238c      	movs	r3, #140	@ 0x8c
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800270a:	225a      	movs	r2, #90	@ 0x5a
 800270c:	21b4      	movs	r1, #180	@ 0xb4
 800270e:	208c      	movs	r0, #140	@ 0x8c
 8002710:	f7fe fb0a 	bl	8000d28 <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 8002714:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2378      	movs	r3, #120	@ 0x78
 800271c:	22c8      	movs	r2, #200	@ 0xc8
 800271e:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8002722:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002726:	f7fe fb27 	bl	8000d78 <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 800272a:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800272e:	9302      	str	r3, [sp, #8]
 8002730:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	f240 237e 	movw	r3, #638	@ 0x27e
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002740:	f240 224e 	movw	r2, #590	@ 0x24e
 8002744:	21fa      	movs	r1, #250	@ 0xfa
 8002746:	f240 204e 	movw	r0, #590	@ 0x24e
 800274a:	f7fe faed 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 800274e:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002752:	9302      	str	r3, [sp, #8]
 8002754:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	23ae      	movs	r3, #174	@ 0xae
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002762:	22d4      	movs	r2, #212	@ 0xd4
 8002764:	21fa      	movs	r1, #250	@ 0xfa
 8002766:	20d4      	movs	r0, #212	@ 0xd4
 8002768:	f7fe fade 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 800276c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002770:	9302      	str	r3, [sp, #8]
 8002772:	2382      	movs	r3, #130	@ 0x82
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	f240 13db 	movw	r3, #475	@ 0x1db
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	23c0      	movs	r3, #192	@ 0xc0
 800277e:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8002782:	21af      	movs	r1, #175	@ 0xaf
 8002784:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002788:	f7fe face 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 800278c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002790:	9302      	str	r3, [sp, #8]
 8002792:	2382      	movs	r3, #130	@ 0x82
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	f240 1345 	movw	r3, #325	@ 0x145
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	23c0      	movs	r3, #192	@ 0xc0
 800279e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80027a2:	21af      	movs	r1, #175	@ 0xaf
 80027a4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80027a8:	f7fe fabe 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 80027ac:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 80027c2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80027c6:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80027ca:	f240 200a 	movw	r0, #522	@ 0x20a
 80027ce:	f7fe faab 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 80027d2:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80027d6:	9302      	str	r3, [sp, #8]
 80027d8:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 80027e8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80027ec:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80027f0:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80027f4:	f7fe fa98 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 80027f8:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	23be      	movs	r3, #190	@ 0xbe
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	23c0      	movs	r3, #192	@ 0xc0
 800280a:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 800280e:	21fa      	movs	r1, #250	@ 0xfa
 8002810:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002814:	f7fe fa88 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 8002818:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	23be      	movs	r3, #190	@ 0xbe
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	23dc      	movs	r3, #220	@ 0xdc
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	23c0      	movs	r3, #192	@ 0xc0
 8002828:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800282c:	21fa      	movs	r1, #250	@ 0xfa
 800282e:	20d4      	movs	r0, #212	@ 0xd4
 8002830:	f7fe fa7a 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 8002834:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800284a:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 800284e:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8002852:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002856:	f7fe fa67 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 800285a:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800285e:	9302      	str	r3, [sp, #8]
 8002860:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8002870:	22d4      	movs	r2, #212	@ 0xd4
 8002872:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002876:	20dc      	movs	r0, #220	@ 0xdc
 8002878:	f7fe fa56 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 800287c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002880:	9302      	str	r3, [sp, #8]
 8002882:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	237c      	movs	r3, #124	@ 0x7c
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002890:	22e8      	movs	r2, #232	@ 0xe8
 8002892:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002896:	20ca      	movs	r0, #202	@ 0xca
 8002898:	f7fe fa46 	bl	8000d28 <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 800289c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	230a      	movs	r3, #10
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2346      	movs	r3, #70	@ 0x46
 80028a8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ac:	21cd      	movs	r1, #205	@ 0xcd
 80028ae:	20fa      	movs	r0, #250	@ 0xfa
 80028b0:	f7fe fa84 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 80028b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	230a      	movs	r3, #10
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2346      	movs	r3, #70	@ 0x46
 80028c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028c4:	f240 1127 	movw	r1, #295	@ 0x127
 80028c8:	20fa      	movs	r0, #250	@ 0xfa
 80028ca:	f7fe fa77 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 80028ce:	2300      	movs	r3, #0
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	2307      	movs	r3, #7
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2332      	movs	r3, #50	@ 0x32
 80028d8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80028dc:	21d7      	movs	r1, #215	@ 0xd7
 80028de:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80028e2:	f7fe fa6b 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 80028e6:	2300      	movs	r3, #0
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2307      	movs	r3, #7
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2332      	movs	r3, #50	@ 0x32
 80028f0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80028f4:	f240 1131 	movw	r1, #305	@ 0x131
 80028f8:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80028fc:	f7fe fa5e 	bl	8000dbc <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 8002900:	f7fe fa88 	bl	8000e14 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 8002904:	2100      	movs	r1, #0
 8002906:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800290a:	f7fe fae6 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 800290e:	21d7      	movs	r1, #215	@ 0xd7
 8002910:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8002914:	f7fe faa3 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 8002918:	2002      	movs	r0, #2
 800291a:	f7fe fb3b 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 800291e:	210a      	movs	r1, #10
 8002920:	480a      	ldr	r0, [pc, #40]	@ (800294c <end_game+0x378>)
 8002922:	f7fe fb61 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 8002926:	f240 1131 	movw	r1, #305	@ 0x131
 800292a:	f240 1063 	movw	r0, #355	@ 0x163
 800292e:	f7fe fa96 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 8002932:	2104      	movs	r1, #4
 8002934:	4806      	ldr	r0, [pc, #24]	@ (8002950 <end_game+0x37c>)
 8002936:	f7fe fb57 	bl	8000fe8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 800293a:	211f      	movs	r1, #31
 800293c:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002940:	f7fe facb 	bl	8000eda <RA8875_text_color>
 8002944:	e006      	b.n	8002954 <end_game+0x380>
 8002946:	bf00      	nop
 8002948:	240000a6 	.word	0x240000a6
 800294c:	0800fbf8 	.word	0x0800fbf8
 8002950:	0800fc04 	.word	0x0800fc04
	RA8875_text_cursor_position(CENTER_X-143, 20);
 8002954:	2114      	movs	r1, #20
 8002956:	f240 1001 	movw	r0, #257	@ 0x101
 800295a:	f7fe fa80 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 800295e:	2003      	movs	r0, #3
 8002960:	f7fe fb18 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 8002964:	2104      	movs	r1, #4
 8002966:	4849      	ldr	r0, [pc, #292]	@ (8002a8c <end_game+0x4b8>)
 8002968:	f7fe fb3e 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 800296c:	2114      	movs	r1, #20
 800296e:	f240 1095 	movw	r0, #405	@ 0x195
 8002972:	f7fe fa74 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 8002976:	2104      	movs	r1, #4
 8002978:	4845      	ldr	r0, [pc, #276]	@ (8002a90 <end_game+0x4bc>)
 800297a:	f7fe fb35 	bl	8000fe8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 800297e:	211f      	movs	r1, #31
 8002980:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002984:	f7fe faa9 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8002988:	2100      	movs	r1, #0
 800298a:	200a      	movs	r0, #10
 800298c:	f7fe fa67 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8002990:	2001      	movs	r0, #1
 8002992:	f7fe faff 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 8002996:	2106      	movs	r1, #6
 8002998:	483e      	ldr	r0, [pc, #248]	@ (8002a94 <end_game+0x4c0>)
 800299a:	f7fe fb25 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 800299e:	2100      	movs	r1, #0
 80029a0:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 80029a4:	f7fe fa5b 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 80029a8:	210b      	movs	r1, #11
 80029aa:	483b      	ldr	r0, [pc, #236]	@ (8002a98 <end_game+0x4c4>)
 80029ac:	f7fe fb1c 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 80029b0:	2137      	movs	r1, #55	@ 0x37
 80029b2:	200a      	movs	r0, #10
 80029b4:	f7fe fa53 	bl	8000e5e <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%d", score);
 80029b8:	4b38      	ldr	r3, [pc, #224]	@ (8002a9c <end_game+0x4c8>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	4938      	ldr	r1, [pc, #224]	@ (8002aa0 <end_game+0x4cc>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f00c fcc7 	bl	800f354 <siprintf>
	RA8875_text_write(buffer, 3);
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2103      	movs	r1, #3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fb0c 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 80029d0:	2137      	movs	r1, #55	@ 0x37
 80029d2:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 80029d6:	f7fe fa42 	bl	8000e5e <RA8875_text_cursor_position>
	if(score > hi_score) hi_score = score;
 80029da:	4b30      	ldr	r3, [pc, #192]	@ (8002a9c <end_game+0x4c8>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4b31      	ldr	r3, [pc, #196]	@ (8002aa4 <end_game+0x4d0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	dd03      	ble.n	80029ee <end_game+0x41a>
 80029e6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a9c <end_game+0x4c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa4 <end_game+0x4d0>)
 80029ec:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%d", hi_score);
 80029ee:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <end_game+0x4d0>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	492a      	ldr	r1, [pc, #168]	@ (8002aa0 <end_game+0x4cc>)
 80029f6:	4618      	mov	r0, r3
 80029f8:	f00c fcac 	bl	800f354 <siprintf>
	RA8875_text_write(buffer, 3);
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2103      	movs	r1, #3
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe faf1 	bl	8000fe8 <RA8875_text_write>
	RA8875_graphic_mode();
 8002a06:	f7fd fdb3 	bl	8000570 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 8002a0a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	2332      	movs	r3, #50	@ 0x32
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	23df      	movs	r3, #223	@ 0xdf
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2332      	movs	r3, #50	@ 0x32
 8002a1a:	22ee      	movs	r2, #238	@ 0xee
 8002a1c:	210a      	movs	r1, #10
 8002a1e:	20e7      	movs	r0, #231	@ 0xe7
 8002a20:	f7fe f982 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 8002a24:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a28:	9302      	str	r3, [sp, #8]
 8002a2a:	2332      	movs	r3, #50	@ 0x32
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	23e6      	movs	r3, #230	@ 0xe6
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2332      	movs	r3, #50	@ 0x32
 8002a34:	22f5      	movs	r2, #245	@ 0xf5
 8002a36:	2155      	movs	r1, #85	@ 0x55
 8002a38:	20ee      	movs	r0, #238	@ 0xee
 8002a3a:	f7fe f975 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 8002a3e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	2332      	movs	r3, #50	@ 0x32
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	f240 2337 	movw	r3, #567	@ 0x237
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2332      	movs	r3, #50	@ 0x32
 8002a50:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8002a54:	210a      	movs	r1, #10
 8002a56:	f240 202f 	movw	r0, #559	@ 0x22f
 8002a5a:	f7fe f965 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 8002a5e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a62:	9302      	str	r3, [sp, #8]
 8002a64:	2332      	movs	r3, #50	@ 0x32
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2332      	movs	r3, #50	@ 0x32
 8002a70:	f240 2221 	movw	r2, #545	@ 0x221
 8002a74:	2155      	movs	r1, #85	@ 0x55
 8002a76:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8002a7a:	f7fe f955 	bl	8000d28 <RA8875_draw_fill_triangle>

	score = 0;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <end_game+0x4c8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

	return;
 8002a84:	bf00      	nop
}
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	0800fc48 	.word	0x0800fc48
 8002a90:	0800fc50 	.word	0x0800fc50
 8002a94:	0800fc58 	.word	0x0800fc58
 8002a98:	0800fc60 	.word	0x0800fc60
 8002a9c:	240000a8 	.word	0x240000a8
 8002aa0:	0800fc6c 	.word	0x0800fc6c
 8002aa4:	240000ac 	.word	0x240000ac

08002aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ab0:	f000 ff0e 	bl	80038d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ab4:	f000 f828 	bl	8002b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab8:	f000 f9fa 	bl	8002eb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002abc:	f000 f9d0 	bl	8002e60 <MX_DMA_Init>
  MX_SPI1_Init();
 8002ac0:	f000 f8e8 	bl	8002c94 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002ac4:	f000 f93c 	bl	8002d40 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002ac8:	f008 ff04 	bl	800b8d4 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002acc:	f000 f990 	bl	8002df0 <MX_TIM6_Init>
  MX_I2S3_Init();
 8002ad0:	f000 f898 	bl	8002c04 <MX_I2S3_Init>
  MX_RNG_Init();
 8002ad4:	f000 f8c8 	bl	8002c68 <MX_RNG_Init>
//
//  game_matrix();
  	  FATFS fs;
  	  FRESULT fr;

  	  fr = f_mount(&fs, "", 1);
 8002ad8:	463b      	mov	r3, r7
 8002ada:	2201      	movs	r2, #1
 8002adc:	4909      	ldr	r1, [pc, #36]	@ (8002b04 <main+0x5c>)
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00b fe3c 	bl	800e75c <f_mount>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
  	  clues();
 8002aea:	f7ff fd15 	bl	8002518 <clues>
//  	  char word[25] = {'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'};
//  	  char word[25];
//  	  read_vec(3, word);
  	  fr = f_mount(NULL, "", 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	4904      	ldr	r1, [pc, #16]	@ (8002b04 <main+0x5c>)
 8002af2:	2000      	movs	r0, #0
 8002af4:	f00b fe32 	bl	800e75c <f_mount>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
//  int data;
//  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
//  uint8_t pdata = 0x55;

//  HAL_Delay(10000);
  while (1)
 8002afe:	bf00      	nop
 8002b00:	e7fd      	b.n	8002afe <main+0x56>
 8002b02:	bf00      	nop
 8002b04:	0800fc98 	.word	0x0800fc98

08002b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b09c      	sub	sp, #112	@ 0x70
 8002b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b12:	224c      	movs	r2, #76	@ 0x4c
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f00c fc3c 	bl	800f394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	2220      	movs	r2, #32
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00c fc36 	bl	800f394 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f003 fa97 	bl	800605c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4b32      	ldr	r3, [pc, #200]	@ (8002bfc <SystemClock_Config+0xf4>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	4a31      	ldr	r2, [pc, #196]	@ (8002bfc <SystemClock_Config+0xf4>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002bfc <SystemClock_Config+0xf4>)
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <SystemClock_Config+0xf8>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b50:	4a2b      	ldr	r2, [pc, #172]	@ (8002c00 <SystemClock_Config+0xf8>)
 8002b52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b56:	6193      	str	r3, [r2, #24]
 8002b58:	4b29      	ldr	r3, [pc, #164]	@ (8002c00 <SystemClock_Config+0xf8>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002b64:	bf00      	nop
 8002b66:	4b26      	ldr	r3, [pc, #152]	@ (8002c00 <SystemClock_Config+0xf8>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b72:	d1f8      	bne.n	8002b66 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8002b74:	2322      	movs	r3, #34	@ 0x22
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b7c:	2340      	movs	r3, #64	@ 0x40
 8002b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002b80:	2301      	movs	r3, #1
 8002b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b84:	2302      	movs	r3, #2
 8002b86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002b90:	230c      	movs	r3, #12
 8002b92:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002b94:	2302      	movs	r3, #2
 8002b96:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 3;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 fa8d 	bl	80060d0 <HAL_RCC_OscConfig>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002bbc:	f000 fa6c 	bl	8003098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bc0:	233f      	movs	r3, #63	@ 0x3f
 8002bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	2102      	movs	r1, #2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fecd 	bl	8006984 <HAL_RCC_ClockConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002bf0:	f000 fa52 	bl	8003098 <Error_Handler>
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	3770      	adds	r7, #112	@ 0x70
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	58000400 	.word	0x58000400
 8002c00:	58024800 	.word	0x58024800

08002c04 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c0a:	4a16      	ldr	r2, [pc, #88]	@ (8002c64 <MX_I2S3_Init+0x60>)
 8002c0c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8002c0e:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c10:	220a      	movs	r2, #10
 8002c12:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002c14:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c28:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002c2c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8002c34:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8002c3a:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8002c40:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8002c46:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002c4c:	4804      	ldr	r0, [pc, #16]	@ (8002c60 <MX_I2S3_Init+0x5c>)
 8002c4e:	f003 f8e3 	bl	8005e18 <HAL_I2S_Init>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8002c58:	f000 fa1e 	bl	8003098 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	240000b0 	.word	0x240000b0
 8002c64:	40003c00 	.word	0x40003c00

08002c68 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002c6c:	4b07      	ldr	r3, [pc, #28]	@ (8002c8c <MX_RNG_Init+0x24>)
 8002c6e:	4a08      	ldr	r2, [pc, #32]	@ (8002c90 <MX_RNG_Init+0x28>)
 8002c70:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <MX_RNG_Init+0x24>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002c78:	4804      	ldr	r0, [pc, #16]	@ (8002c8c <MX_RNG_Init+0x24>)
 8002c7a:	f006 fef7 	bl	8009a6c <HAL_RNG_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002c84:	f000 fa08 	bl	8003098 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	24000104 	.word	0x24000104
 8002c90:	48021800 	.word	0x48021800

08002c94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c98:	4b27      	ldr	r3, [pc, #156]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002c9a:	4a28      	ldr	r2, [pc, #160]	@ (8002d3c <MX_SPI1_Init+0xa8>)
 8002c9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c9e:	4b26      	ldr	r3, [pc, #152]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002ca0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ca4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ca6:	4b24      	ldr	r3, [pc, #144]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cac:	4b22      	ldr	r3, [pc, #136]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cae:	2207      	movs	r2, #7
 8002cb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb2:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cc0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002cc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ccc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cd4:	4b18      	ldr	r3, [pc, #96]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cda:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002ce0:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ce6:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002cec:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002d16:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d22:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <MX_SPI1_Init+0xa4>)
 8002d24:	f006 ff04 	bl	8009b30 <HAL_SPI_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8002d2e:	f000 f9b3 	bl	8003098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	24000118 	.word	0x24000118
 8002d3c:	40013000 	.word	0x40013000

08002d40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d44:	4b28      	ldr	r3, [pc, #160]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d46:	4a29      	ldr	r2, [pc, #164]	@ (8002dec <MX_SPI2_Init+0xac>)
 8002d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d4a:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d4c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d52:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d58:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002d5e:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d66:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d70:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d76:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d82:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d88:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d9c:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002da2:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002dba:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002dd2:	4805      	ldr	r0, [pc, #20]	@ (8002de8 <MX_SPI2_Init+0xa8>)
 8002dd4:	f006 feac 	bl	8009b30 <HAL_SPI_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002dde:	f000 f95b 	bl	8003098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	240001a0 	.word	0x240001a0
 8002dec:	40003800 	.word	0x40003800

08002df0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e00:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <MX_TIM6_Init+0x68>)
 8002e02:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <MX_TIM6_Init+0x6c>)
 8002e04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8002e06:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <MX_TIM6_Init+0x68>)
 8002e08:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002e0c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0e:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <MX_TIM6_Init+0x68>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002e14:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <MX_TIM6_Init+0x68>)
 8002e16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <MX_TIM6_Init+0x68>)
 8002e1e:	2280      	movs	r2, #128	@ 0x80
 8002e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e22:	480d      	ldr	r0, [pc, #52]	@ (8002e58 <MX_TIM6_Init+0x68>)
 8002e24:	f008 fa45 	bl	800b2b2 <HAL_TIM_Base_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002e2e:	f000 f933 	bl	8003098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e32:	2320      	movs	r3, #32
 8002e34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4806      	ldr	r0, [pc, #24]	@ (8002e58 <MX_TIM6_Init+0x68>)
 8002e40:	f008 fc9c 	bl	800b77c <HAL_TIMEx_MasterConfigSynchronization>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002e4a:	f000 f925 	bl	8003098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	24000318 	.word	0x24000318
 8002e5c:	40001000 	.word	0x40001000

08002e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e66:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <MX_DMA_Init+0x4c>)
 8002e68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002eac <MX_DMA_Init+0x4c>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <MX_DMA_Init+0x4c>)
 8002e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002e84:	2200      	movs	r2, #0
 8002e86:	2100      	movs	r1, #0
 8002e88:	200b      	movs	r0, #11
 8002e8a:	f000 febe 	bl	8003c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002e8e:	200b      	movs	r0, #11
 8002e90:	f000 fed5 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2100      	movs	r1, #0
 8002e98:	200c      	movs	r0, #12
 8002e9a:	f000 feb6 	bl	8003c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002e9e:	200c      	movs	r0, #12
 8002ea0:	f000 fecd 	bl	8003c3e <HAL_NVIC_EnableIRQ>

}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	58024400 	.word	0x58024400

08002eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	@ 0x28
 8002eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec6:	4b6e      	ldr	r3, [pc, #440]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ecc:	4a6c      	ldr	r2, [pc, #432]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee4:	4b66      	ldr	r3, [pc, #408]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eea:	4a65      	ldr	r2, [pc, #404]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ef4:	4b62      	ldr	r3, [pc, #392]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	4b5f      	ldr	r3, [pc, #380]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f08:	4a5d      	ldr	r2, [pc, #372]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002f0a:	f043 0302 	orr.w	r3, r3, #2
 8002f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f12:	4b5b      	ldr	r3, [pc, #364]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f20:	4b57      	ldr	r3, [pc, #348]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f26:	4a56      	ldr	r2, [pc, #344]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f30:	4b53      	ldr	r3, [pc, #332]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f3e:	4b50      	ldr	r3, [pc, #320]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f44:	4a4e      	ldr	r2, [pc, #312]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002f46:	f043 0310 	orr.w	r3, r3, #16
 8002f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8003080 <MX_GPIO_Init+0x1d0>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2110      	movs	r1, #16
 8002f60:	4848      	ldr	r0, [pc, #288]	@ (8003084 <MX_GPIO_Init+0x1d4>)
 8002f62:	f002 ff3f 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2120      	movs	r1, #32
 8002f6a:	4847      	ldr	r0, [pc, #284]	@ (8003088 <MX_GPIO_Init+0x1d8>)
 8002f6c:	f002 ff3a 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002f70:	2201      	movs	r2, #1
 8002f72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f76:	4845      	ldr	r0, [pc, #276]	@ (800308c <MX_GPIO_Init+0x1dc>)
 8002f78:	f002 ff34 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	21e0      	movs	r1, #224	@ 0xe0
 8002f80:	4843      	ldr	r0, [pc, #268]	@ (8003090 <MX_GPIO_Init+0x1e0>)
 8002f82:	f002 ff2f 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 8002f86:	2200      	movs	r2, #0
 8002f88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f8c:	483f      	ldr	r0, [pc, #252]	@ (800308c <MX_GPIO_Init+0x1dc>)
 8002f8e:	f002 ff29 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2103      	movs	r1, #3
 8002f96:	483f      	ldr	r0, [pc, #252]	@ (8003094 <MX_GPIO_Init+0x1e4>)
 8002f98:	f002 ff24 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4834      	ldr	r0, [pc, #208]	@ (8003084 <MX_GPIO_Init+0x1d4>)
 8002fb4:	f002 fd66 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 8002fb8:	2310      	movs	r3, #16
 8002fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	482f      	ldr	r0, [pc, #188]	@ (8003088 <MX_GPIO_Init+0x1d8>)
 8002fcc:	f002 fd5a 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4828      	ldr	r0, [pc, #160]	@ (8003088 <MX_GPIO_Init+0x1d8>)
 8002fe8:	f002 fd4c 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	4619      	mov	r1, r3
 8003004:	4821      	ldr	r0, [pc, #132]	@ (800308c <MX_GPIO_Init+0x1dc>)
 8003006:	f002 fd3d 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 800300a:	231f      	movs	r3, #31
 800300c:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003012:	2301      	movs	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4619      	mov	r1, r3
 800301c:	481c      	ldr	r0, [pc, #112]	@ (8003090 <MX_GPIO_Init+0x1e0>)
 800301e:	f002 fd31 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 8003022:	23e0      	movs	r3, #224	@ 0xe0
 8003024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003026:	2301      	movs	r3, #1
 8003028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	4619      	mov	r1, r3
 8003038:	4815      	ldr	r0, [pc, #84]	@ (8003090 <MX_GPIO_Init+0x1e0>)
 800303a:	f002 fd23 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 800303e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003044:	2301      	movs	r3, #1
 8003046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304c:	2300      	movs	r3, #0
 800304e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4619      	mov	r1, r3
 8003056:	480d      	ldr	r0, [pc, #52]	@ (800308c <MX_GPIO_Init+0x1dc>)
 8003058:	f002 fd14 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 800305c:	2303      	movs	r3, #3
 800305e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003060:	2301      	movs	r3, #1
 8003062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	4808      	ldr	r0, [pc, #32]	@ (8003094 <MX_GPIO_Init+0x1e4>)
 8003074:	f002 fd06 	bl	8005a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003078:	bf00      	nop
 800307a:	3728      	adds	r7, #40	@ 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	58024400 	.word	0x58024400
 8003084:	58020000 	.word	0x58020000
 8003088:	58020800 	.word	0x58020800
 800308c:	58020400 	.word	0x58020400
 8003090:	58020c00 	.word	0x58020c00
 8003094:	58021000 	.word	0x58021000

08003098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800309c:	b672      	cpsid	i
}
 800309e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <Error_Handler+0x8>

080030a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030aa:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <HAL_MspInit+0x30>)
 80030ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030b0:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <HAL_MspInit+0x30>)
 80030b2:	f043 0302 	orr.w	r3, r3, #2
 80030b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_MspInit+0x30>)
 80030bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	58024400 	.word	0x58024400

080030d8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b0bc      	sub	sp, #240	@ 0xf0
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030f0:	f107 0318 	add.w	r3, r7, #24
 80030f4:	22c0      	movs	r2, #192	@ 0xc0
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00c f94b 	bl	800f394 <memset>
  if(hi2s->Instance==SPI3)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a4b      	ldr	r2, [pc, #300]	@ (8003230 <HAL_I2S_MspInit+0x158>)
 8003104:	4293      	cmp	r3, r2
 8003106:	f040 808f 	bne.w	8003228 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800310a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003116:	2300      	movs	r3, #0
 8003118:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800311a:	f107 0318 	add.w	r3, r7, #24
 800311e:	4618      	mov	r0, r3
 8003120:	f003 ffa6 	bl	8007070 <HAL_RCCEx_PeriphCLKConfig>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 800312a:	f7ff ffb5 	bl	8003098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800312e:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 8003130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003134:	4a3f      	ldr	r2, [pc, #252]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 8003136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800313a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800313e:	4b3d      	ldr	r3, [pc, #244]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 8003140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314c:	4b39      	ldr	r3, [pc, #228]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 800314e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003152:	4a38      	ldr	r2, [pc, #224]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800315c:	4b35      	ldr	r3, [pc, #212]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 800315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	4b32      	ldr	r3, [pc, #200]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 800316c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003170:	4a30      	ldr	r2, [pc, #192]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800317a:	4b2e      	ldr	r3, [pc, #184]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 800317c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003188:	4b2a      	ldr	r3, [pc, #168]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 800318a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800318e:	4a29      	ldr	r2, [pc, #164]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003198:	4b26      	ldr	r3, [pc, #152]	@ (8003234 <HAL_I2S_MspInit+0x15c>)
 800319a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031a6:	2304      	movs	r3, #4
 80031a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80031be:	2307      	movs	r3, #7
 80031c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031c8:	4619      	mov	r1, r3
 80031ca:	481b      	ldr	r0, [pc, #108]	@ (8003238 <HAL_I2S_MspInit+0x160>)
 80031cc:	f002 fc5a 	bl	8005a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031ea:	2306      	movs	r3, #6
 80031ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031f4:	4619      	mov	r1, r3
 80031f6:	4811      	ldr	r0, [pc, #68]	@ (800323c <HAL_I2S_MspInit+0x164>)
 80031f8:	f002 fc44 	bl	8005a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003200:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003216:	2306      	movs	r3, #6
 8003218:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003220:	4619      	mov	r1, r3
 8003222:	4807      	ldr	r0, [pc, #28]	@ (8003240 <HAL_I2S_MspInit+0x168>)
 8003224:	f002 fc2e 	bl	8005a84 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003228:	bf00      	nop
 800322a:	37f0      	adds	r7, #240	@ 0xf0
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40003c00 	.word	0x40003c00
 8003234:	58024400 	.word	0x58024400
 8003238:	58020400 	.word	0x58020400
 800323c:	58020000 	.word	0x58020000
 8003240:	58020800 	.word	0x58020800

08003244 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b0b4      	sub	sp, #208	@ 0xd0
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800324c:	f107 0310 	add.w	r3, r7, #16
 8003250:	22c0      	movs	r2, #192	@ 0xc0
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f00c f89d 	bl	800f394 <memset>
  if(hrng->Instance==RNG)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <HAL_RNG_MspInit+0x6c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d121      	bne.n	80032a8 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003264:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003276:	f107 0310 	add.w	r3, r7, #16
 800327a:	4618      	mov	r0, r3
 800327c:	f003 fef8 	bl	8007070 <HAL_RCCEx_PeriphCLKConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8003286:	f7ff ff07 	bl	8003098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <HAL_RNG_MspInit+0x70>)
 800328c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003290:	4a08      	ldr	r2, [pc, #32]	@ (80032b4 <HAL_RNG_MspInit+0x70>)
 8003292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003296:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_RNG_MspInit+0x70>)
 800329c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80032a8:	bf00      	nop
 80032aa:	37d0      	adds	r7, #208	@ 0xd0
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	48021800 	.word	0x48021800
 80032b4:	58024400 	.word	0x58024400

080032b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b0be      	sub	sp, #248	@ 0xf8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032d0:	f107 0320 	add.w	r3, r7, #32
 80032d4:	22c0      	movs	r2, #192	@ 0xc0
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f00c f85b 	bl	800f394 <memset>
  if(hspi->Instance==SPI1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4aa2      	ldr	r2, [pc, #648]	@ (800356c <HAL_SPI_MspInit+0x2b4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d16a      	bne.n	80033be <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80032e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032fa:	f107 0320 	add.w	r3, r7, #32
 80032fe:	4618      	mov	r0, r3
 8003300:	f003 feb6 	bl	8007070 <HAL_RCCEx_PeriphCLKConfig>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800330a:	f7ff fec5 	bl	8003098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800330e:	4b98      	ldr	r3, [pc, #608]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003314:	4a96      	ldr	r2, [pc, #600]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003316:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800331a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800331e:	4b94      	ldr	r3, [pc, #592]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332c:	4b90      	ldr	r3, [pc, #576]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 800332e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003332:	4a8f      	ldr	r2, [pc, #572]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800333c:	4b8c      	ldr	r3, [pc, #560]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 800333e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334a:	4b89      	ldr	r3, [pc, #548]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 800334c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003350:	4a87      	ldr	r2, [pc, #540]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003352:	f043 0302 	orr.w	r3, r3, #2
 8003356:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800335a:	4b85      	ldr	r3, [pc, #532]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 800335c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003368:	23c0      	movs	r3, #192	@ 0xc0
 800336a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337a:	2303      	movs	r3, #3
 800337c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003380:	2305      	movs	r3, #5
 8003382:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003386:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800338a:	4619      	mov	r1, r3
 800338c:	4879      	ldr	r0, [pc, #484]	@ (8003574 <HAL_SPI_MspInit+0x2bc>)
 800338e:	f002 fb79 	bl	8005a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003392:	2308      	movs	r3, #8
 8003394:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033aa:	2305      	movs	r3, #5
 80033ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4870      	ldr	r0, [pc, #448]	@ (8003578 <HAL_SPI_MspInit+0x2c0>)
 80033b8:	f002 fb64 	bl	8005a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033bc:	e0d2      	b.n	8003564 <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a6e      	ldr	r2, [pc, #440]	@ (800357c <HAL_SPI_MspInit+0x2c4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	f040 80cd 	bne.w	8003564 <HAL_SPI_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80033ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033dc:	f107 0320 	add.w	r3, r7, #32
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 fe45 	bl	8007070 <HAL_RCCEx_PeriphCLKConfig>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 80033ec:	f7ff fe54 	bl	8003098 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033f0:	4b5f      	ldr	r3, [pc, #380]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 80033f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 80033f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003400:	4b5b      	ldr	r3, [pc, #364]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800340e:	4b58      	ldr	r3, [pc, #352]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003414:	4a56      	ldr	r2, [pc, #344]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800341e:	4b54      	ldr	r3, [pc, #336]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342c:	4b50      	ldr	r3, [pc, #320]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 800342e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003432:	4a4f      	ldr	r2, [pc, #316]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800343c:	4b4c      	ldr	r3, [pc, #304]	@ (8003570 <HAL_SPI_MspInit+0x2b8>)
 800343e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800344a:	2306      	movs	r3, #6
 800344c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003462:	2305      	movs	r3, #5
 8003464:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003468:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800346c:	4619      	mov	r1, r3
 800346e:	4844      	ldr	r0, [pc, #272]	@ (8003580 <HAL_SPI_MspInit+0x2c8>)
 8003470:	f002 fb08 	bl	8005a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003474:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003478:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800348e:	2305      	movs	r3, #5
 8003490:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003494:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003498:	4619      	mov	r1, r3
 800349a:	4837      	ldr	r0, [pc, #220]	@ (8003578 <HAL_SPI_MspInit+0x2c0>)
 800349c:	f002 faf2 	bl	8005a84 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80034a0:	4b38      	ldr	r3, [pc, #224]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034a2:	4a39      	ldr	r2, [pc, #228]	@ (8003588 <HAL_SPI_MspInit+0x2d0>)
 80034a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80034a6:	4b37      	ldr	r3, [pc, #220]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034a8:	2227      	movs	r2, #39	@ 0x27
 80034aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ac:	4b35      	ldr	r3, [pc, #212]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034b2:	4b34      	ldr	r3, [pc, #208]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034b8:	4b32      	ldr	r3, [pc, #200]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034be:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034c0:	4b30      	ldr	r3, [pc, #192]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80034cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034da:	2200      	movs	r2, #0
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80034de:	4829      	ldr	r0, [pc, #164]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034e0:	f000 fbc8 	bl	8003c74 <HAL_DMA_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_SPI_MspInit+0x236>
      Error_Handler();
 80034ea:	f7ff fdd5 	bl	8003098 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a24      	ldr	r2, [pc, #144]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034f2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80034f4:	4a23      	ldr	r2, [pc, #140]	@ (8003584 <HAL_SPI_MspInit+0x2cc>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream1;
 80034fa:	4b24      	ldr	r3, [pc, #144]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 80034fc:	4a24      	ldr	r2, [pc, #144]	@ (8003590 <HAL_SPI_MspInit+0x2d8>)
 80034fe:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003500:	4b22      	ldr	r3, [pc, #136]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 8003502:	2228      	movs	r2, #40	@ 0x28
 8003504:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003506:	4b21      	ldr	r3, [pc, #132]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 8003508:	2240      	movs	r2, #64	@ 0x40
 800350a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800350c:	4b1f      	ldr	r3, [pc, #124]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 800350e:	2200      	movs	r2, #0
 8003510:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003512:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 8003514:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003518:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800351a:	4b1c      	ldr	r3, [pc, #112]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 800351c:	2200      	movs	r2, #0
 800351e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003520:	4b1a      	ldr	r3, [pc, #104]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003526:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 8003528:	2200      	movs	r2, #0
 800352a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800352c:	4b17      	ldr	r3, [pc, #92]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 800352e:	2200      	movs	r2, #0
 8003530:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003532:	4b16      	ldr	r3, [pc, #88]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 8003534:	2200      	movs	r2, #0
 8003536:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003538:	4814      	ldr	r0, [pc, #80]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 800353a:	f000 fb9b 	bl	8003c74 <HAL_DMA_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_SPI_MspInit+0x290>
      Error_Handler();
 8003544:	f7ff fda8 	bl	8003098 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a10      	ldr	r2, [pc, #64]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 800354c:	679a      	str	r2, [r3, #120]	@ 0x78
 800354e:	4a0f      	ldr	r2, [pc, #60]	@ (800358c <HAL_SPI_MspInit+0x2d4>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003554:	2200      	movs	r2, #0
 8003556:	2100      	movs	r1, #0
 8003558:	2024      	movs	r0, #36	@ 0x24
 800355a:	f000 fb56 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800355e:	2024      	movs	r0, #36	@ 0x24
 8003560:	f000 fb6d 	bl	8003c3e <HAL_NVIC_EnableIRQ>
}
 8003564:	bf00      	nop
 8003566:	37f8      	adds	r7, #248	@ 0xf8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40013000 	.word	0x40013000
 8003570:	58024400 	.word	0x58024400
 8003574:	58020000 	.word	0x58020000
 8003578:	58020400 	.word	0x58020400
 800357c:	40003800 	.word	0x40003800
 8003580:	58020800 	.word	0x58020800
 8003584:	24000228 	.word	0x24000228
 8003588:	40020010 	.word	0x40020010
 800358c:	240002a0 	.word	0x240002a0
 8003590:	40020028 	.word	0x40020028

08003594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0e      	ldr	r2, [pc, #56]	@ (80035dc <HAL_TIM_Base_MspInit+0x48>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d116      	bne.n	80035d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <HAL_TIM_Base_MspInit+0x4c>)
 80035a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035ac:	4a0c      	ldr	r2, [pc, #48]	@ (80035e0 <HAL_TIM_Base_MspInit+0x4c>)
 80035ae:	f043 0310 	orr.w	r3, r3, #16
 80035b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_TIM_Base_MspInit+0x4c>)
 80035b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2101      	movs	r1, #1
 80035c8:	2036      	movs	r0, #54	@ 0x36
 80035ca:	f000 fb1e 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035ce:	2036      	movs	r0, #54	@ 0x36
 80035d0:	f000 fb35 	bl	8003c3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40001000 	.word	0x40001000
 80035e0:	58024400 	.word	0x58024400

080035e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <NMI_Handler+0x4>

080035ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <HardFault_Handler+0x4>

080035f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <MemManage_Handler+0x4>

080035fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <BusFault_Handler+0x4>

08003604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003608:	bf00      	nop
 800360a:	e7fd      	b.n	8003608 <UsageFault_Handler+0x4>

0800360c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800363a:	f000 f9bb 	bl	80039b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003648:	4802      	ldr	r0, [pc, #8]	@ (8003654 <DMA1_Stream0_IRQHandler+0x10>)
 800364a:	f001 f8b5 	bl	80047b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	24000228 	.word	0x24000228

08003658 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800365c:	4802      	ldr	r0, [pc, #8]	@ (8003668 <DMA1_Stream1_IRQHandler+0x10>)
 800365e:	f001 f8ab 	bl	80047b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	240002a0 	.word	0x240002a0

0800366c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003670:	4802      	ldr	r0, [pc, #8]	@ (800367c <SPI2_IRQHandler+0x10>)
 8003672:	f007 fb1b 	bl	800acac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	240001a0 	.word	0x240001a0

08003680 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003686:	481b      	ldr	r0, [pc, #108]	@ (80036f4 <TIM6_DAC_IRQHandler+0x74>)
 8003688:	f007 fe99 	bl	800b3be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  game_timer--;
 800368c:	4b1a      	ldr	r3, [pc, #104]	@ (80036f8 <TIM6_DAC_IRQHandler+0x78>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	3b01      	subs	r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4b18      	ldr	r3, [pc, #96]	@ (80036f8 <TIM6_DAC_IRQHandler+0x78>)
 8003696:	701a      	strb	r2, [r3, #0]
  sprintf(print_timer, "%d", game_timer);
 8003698:	4b17      	ldr	r3, [pc, #92]	@ (80036f8 <TIM6_DAC_IRQHandler+0x78>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	4916      	ldr	r1, [pc, #88]	@ (80036fc <TIM6_DAC_IRQHandler+0x7c>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f00b fe56 	bl	800f354 <siprintf>
  RA8875_text_mode();
 80036a8:	f7fd fbb4 	bl	8000e14 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 80036ac:	2132      	movs	r1, #50	@ 0x32
 80036ae:	20c8      	movs	r0, #200	@ 0xc8
 80036b0:	f7fd fbd5 	bl	8000e5e <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 80036b4:	211f      	movs	r1, #31
 80036b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80036ba:	f7fd fc0e 	bl	8000eda <RA8875_text_color>
  RA8875_text_scale(1);
 80036be:	2001      	movs	r0, #1
 80036c0:	f7fd fc68 	bl	8000f94 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd fc8d 	bl	8000fe8 <RA8875_text_write>
  RA8875_graphic_mode();
 80036ce:	f7fc ff4f 	bl	8000570 <RA8875_graphic_mode>
  if(game_timer <= 0) {
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <TIM6_DAC_IRQHandler+0x78>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <TIM6_DAC_IRQHandler+0x6a>
	  game_timer = 10;
 80036da:	4b07      	ldr	r3, [pc, #28]	@ (80036f8 <TIM6_DAC_IRQHandler+0x78>)
 80036dc:	220a      	movs	r2, #10
 80036de:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim6);
 80036e0:	4804      	ldr	r0, [pc, #16]	@ (80036f4 <TIM6_DAC_IRQHandler+0x74>)
 80036e2:	f007 fe3d 	bl	800b360 <HAL_TIM_Base_Stop_IT>
	  end_game();
 80036e6:	f7fe ff75 	bl	80025d4 <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	24000318 	.word	0x24000318
 80036f8:	24000000 	.word	0x24000000
 80036fc:	0800fc9c 	.word	0x0800fc9c

08003700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003708:	4a14      	ldr	r2, [pc, #80]	@ (800375c <_sbrk+0x5c>)
 800370a:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <_sbrk+0x60>)
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003714:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800371c:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <_sbrk+0x64>)
 800371e:	4a12      	ldr	r2, [pc, #72]	@ (8003768 <_sbrk+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003722:	4b10      	ldr	r3, [pc, #64]	@ (8003764 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003730:	f00b fe48 	bl	800f3c4 <__errno>
 8003734:	4603      	mov	r3, r0
 8003736:	220c      	movs	r2, #12
 8003738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295
 800373e:	e009      	b.n	8003754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003740:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003746:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <_sbrk+0x64>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	4a05      	ldr	r2, [pc, #20]	@ (8003764 <_sbrk+0x64>)
 8003750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	24080000 	.word	0x24080000
 8003760:	00000400 	.word	0x00000400
 8003764:	24000364 	.word	0x24000364
 8003768:	24000700 	.word	0x24000700

0800376c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003770:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <SystemInit+0xe4>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	4a36      	ldr	r2, [pc, #216]	@ (8003850 <SystemInit+0xe4>)
 8003778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800377c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003780:	4b34      	ldr	r3, [pc, #208]	@ (8003854 <SystemInit+0xe8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	2b06      	cmp	r3, #6
 800378a:	d807      	bhi.n	800379c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800378c:	4b31      	ldr	r3, [pc, #196]	@ (8003854 <SystemInit+0xe8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 030f 	bic.w	r3, r3, #15
 8003794:	4a2f      	ldr	r2, [pc, #188]	@ (8003854 <SystemInit+0xe8>)
 8003796:	f043 0307 	orr.w	r3, r3, #7
 800379a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800379c:	4b2e      	ldr	r3, [pc, #184]	@ (8003858 <SystemInit+0xec>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003858 <SystemInit+0xec>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003858 <SystemInit+0xec>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003858 <SystemInit+0xec>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4929      	ldr	r1, [pc, #164]	@ (8003858 <SystemInit+0xec>)
 80037b4:	4b29      	ldr	r3, [pc, #164]	@ (800385c <SystemInit+0xf0>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037ba:	4b26      	ldr	r3, [pc, #152]	@ (8003854 <SystemInit+0xe8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037c6:	4b23      	ldr	r3, [pc, #140]	@ (8003854 <SystemInit+0xe8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 030f 	bic.w	r3, r3, #15
 80037ce:	4a21      	ldr	r2, [pc, #132]	@ (8003854 <SystemInit+0xe8>)
 80037d0:	f043 0307 	orr.w	r3, r3, #7
 80037d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80037d6:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <SystemInit+0xec>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80037dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003858 <SystemInit+0xec>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80037e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <SystemInit+0xec>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <SystemInit+0xec>)
 80037ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <SystemInit+0xf4>)
 80037ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003858 <SystemInit+0xec>)
 80037f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003864 <SystemInit+0xf8>)
 80037f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80037f4:	4b18      	ldr	r3, [pc, #96]	@ (8003858 <SystemInit+0xec>)
 80037f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <SystemInit+0xfc>)
 80037f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037fa:	4b17      	ldr	r3, [pc, #92]	@ (8003858 <SystemInit+0xec>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003800:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <SystemInit+0xec>)
 8003802:	4a19      	ldr	r2, [pc, #100]	@ (8003868 <SystemInit+0xfc>)
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003806:	4b14      	ldr	r3, [pc, #80]	@ (8003858 <SystemInit+0xec>)
 8003808:	2200      	movs	r2, #0
 800380a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800380c:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <SystemInit+0xec>)
 800380e:	4a16      	ldr	r2, [pc, #88]	@ (8003868 <SystemInit+0xfc>)
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003812:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <SystemInit+0xec>)
 8003814:	2200      	movs	r2, #0
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003818:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <SystemInit+0xec>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0e      	ldr	r2, [pc, #56]	@ (8003858 <SystemInit+0xec>)
 800381e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <SystemInit+0xec>)
 8003826:	2200      	movs	r2, #0
 8003828:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <SystemInit+0x100>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <SystemInit+0x104>)
 8003830:	4013      	ands	r3, r2
 8003832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003836:	d202      	bcs.n	800383e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003838:	4b0e      	ldr	r3, [pc, #56]	@ (8003874 <SystemInit+0x108>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800383e:	4b0e      	ldr	r3, [pc, #56]	@ (8003878 <SystemInit+0x10c>)
 8003840:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003844:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00
 8003854:	52002000 	.word	0x52002000
 8003858:	58024400 	.word	0x58024400
 800385c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003860:	02020200 	.word	0x02020200
 8003864:	01ff0000 	.word	0x01ff0000
 8003868:	01010280 	.word	0x01010280
 800386c:	5c001000 	.word	0x5c001000
 8003870:	ffff0000 	.word	0xffff0000
 8003874:	51008108 	.word	0x51008108
 8003878:	52004000 	.word	0x52004000

0800387c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800387c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003880:	f7ff ff74 	bl	800376c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003884:	480c      	ldr	r0, [pc, #48]	@ (80038b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003886:	490d      	ldr	r1, [pc, #52]	@ (80038bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003888:	4a0d      	ldr	r2, [pc, #52]	@ (80038c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800388a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800388c:	e002      	b.n	8003894 <LoopCopyDataInit>

0800388e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003892:	3304      	adds	r3, #4

08003894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003898:	d3f9      	bcc.n	800388e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800389a:	4a0a      	ldr	r2, [pc, #40]	@ (80038c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800389c:	4c0a      	ldr	r4, [pc, #40]	@ (80038c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800389e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038a0:	e001      	b.n	80038a6 <LoopFillZerobss>

080038a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a4:	3204      	adds	r2, #4

080038a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a8:	d3fb      	bcc.n	80038a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038aa:	f00b fd91 	bl	800f3d0 <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 80038ae:	f7ff f8fb 	bl	8002aa8 <main>
  bx  lr
 80038b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80038b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80038bc:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80038c0:	0801019c 	.word	0x0801019c
  ldr r2, =_sbss
 80038c4:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80038c8:	240006fc 	.word	0x240006fc

080038cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038cc:	e7fe      	b.n	80038cc <ADC3_IRQHandler>
	...

080038d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d6:	2003      	movs	r0, #3
 80038d8:	f000 f98c 	bl	8003bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038dc:	f003 fa08 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <HAL_Init+0x68>)
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	4913      	ldr	r1, [pc, #76]	@ (800393c <HAL_Init+0x6c>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
 80038f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <HAL_Init+0x68>)
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	4a0e      	ldr	r2, [pc, #56]	@ (800393c <HAL_Init+0x6c>)
 8003904:	5cd3      	ldrb	r3, [r2, r3]
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
 8003910:	4a0b      	ldr	r2, [pc, #44]	@ (8003940 <HAL_Init+0x70>)
 8003912:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003914:	4a0b      	ldr	r2, [pc, #44]	@ (8003944 <HAL_Init+0x74>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800391a:	200f      	movs	r0, #15
 800391c:	f000 f814 	bl	8003948 <HAL_InitTick>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e002      	b.n	8003930 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800392a:	f7ff fbbb 	bl	80030a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	58024400 	.word	0x58024400
 800393c:	0800fd00 	.word	0x0800fd00
 8003940:	24000008 	.word	0x24000008
 8003944:	24000004 	.word	0x24000004

08003948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003950:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_InitTick+0x60>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e021      	b.n	80039a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <HAL_InitTick+0x64>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b11      	ldr	r3, [pc, #68]	@ (80039a8 <HAL_InitTick+0x60>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800396a:	fbb3 f3f1 	udiv	r3, r3, r1
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f971 	bl	8003c5a <HAL_SYSTICK_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e00e      	b.n	80039a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d80a      	bhi.n	800399e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003988:	2200      	movs	r2, #0
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	f000 f93b 	bl	8003c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003994:	4a06      	ldr	r2, [pc, #24]	@ (80039b0 <HAL_InitTick+0x68>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	24000010 	.word	0x24000010
 80039ac:	24000004 	.word	0x24000004
 80039b0:	2400000c 	.word	0x2400000c

080039b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039b8:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_IncTick+0x20>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_IncTick+0x24>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <HAL_IncTick+0x24>)
 80039c6:	6013      	str	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	24000010 	.word	0x24000010
 80039d8:	24000368 	.word	0x24000368

080039dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return uwTick;
 80039e0:	4b03      	ldr	r3, [pc, #12]	@ (80039f0 <HAL_GetTick+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	24000368 	.word	0x24000368

080039f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff ffee 	bl	80039dc <HAL_GetTick>
 8003a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d005      	beq.n	8003a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <HAL_Delay+0x44>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a1a:	bf00      	nop
 8003a1c:	f7ff ffde 	bl	80039dc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d8f7      	bhi.n	8003a1c <HAL_Delay+0x28>
  {
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	24000010 	.word	0x24000010

08003a3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003a40:	4b03      	ldr	r3, [pc, #12]	@ (8003a50 <HAL_GetREVID+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0c1b      	lsrs	r3, r3, #16
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	5c001000 	.word	0x5c001000

08003a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <__NVIC_SetPriorityGrouping+0x40>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a70:	4013      	ands	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a7c:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <__NVIC_SetPriorityGrouping+0x40>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000ed00 	.word	0xe000ed00
 8003a98:	05fa0000 	.word	0x05fa0000

08003a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa0:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	f003 0307 	and.w	r3, r3, #7
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	db0b      	blt.n	8003ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	4907      	ldr	r1, [pc, #28]	@ (8003af0 <__NVIC_EnableIRQ+0x38>)
 8003ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2001      	movs	r0, #1
 8003ada:	fa00 f202 	lsl.w	r2, r0, r2
 8003ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000e100 	.word	0xe000e100

08003af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db0a      	blt.n	8003b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	490c      	ldr	r1, [pc, #48]	@ (8003b40 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b12:	0112      	lsls	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	440b      	add	r3, r1
 8003b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b1c:	e00a      	b.n	8003b34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4908      	ldr	r1, [pc, #32]	@ (8003b44 <__NVIC_SetPriority+0x50>)
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	761a      	strb	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	@ 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f1c3 0307 	rsb	r3, r3, #7
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf28      	it	cs
 8003b66:	2304      	movcs	r3, #4
 8003b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d902      	bls.n	8003b78 <NVIC_EncodePriority+0x30>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3b03      	subs	r3, #3
 8003b76:	e000      	b.n	8003b7a <NVIC_EncodePriority+0x32>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43d9      	mvns	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	4313      	orrs	r3, r2
         );
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	@ 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bc0:	d301      	bcc.n	8003bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e00f      	b.n	8003be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf0 <SysTick_Config+0x40>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bce:	210f      	movs	r1, #15
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	f7ff ff8e 	bl	8003af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <SysTick_Config+0x40>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bde:	4b04      	ldr	r3, [pc, #16]	@ (8003bf0 <SysTick_Config+0x40>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	e000e010 	.word	0xe000e010

08003bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff29 	bl	8003a54 <__NVIC_SetPriorityGrouping>
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	4603      	mov	r3, r0
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c18:	f7ff ff40 	bl	8003a9c <__NVIC_GetPriorityGrouping>
 8003c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f7ff ff90 	bl	8003b48 <NVIC_EncodePriority>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff5f 	bl	8003af4 <__NVIC_SetPriority>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff33 	bl	8003ab8 <__NVIC_EnableIRQ>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffa4 	bl	8003bb0 <SysTick_Config>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003c7c:	f7ff feae 	bl	80039dc <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e316      	b.n	80042ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a66      	ldr	r2, [pc, #408]	@ (8003e2c <HAL_DMA_Init+0x1b8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d04a      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a65      	ldr	r2, [pc, #404]	@ (8003e30 <HAL_DMA_Init+0x1bc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d045      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a63      	ldr	r2, [pc, #396]	@ (8003e34 <HAL_DMA_Init+0x1c0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d040      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a62      	ldr	r2, [pc, #392]	@ (8003e38 <HAL_DMA_Init+0x1c4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d03b      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a60      	ldr	r2, [pc, #384]	@ (8003e3c <HAL_DMA_Init+0x1c8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d036      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5f      	ldr	r2, [pc, #380]	@ (8003e40 <HAL_DMA_Init+0x1cc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d031      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8003e44 <HAL_DMA_Init+0x1d0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d02c      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8003e48 <HAL_DMA_Init+0x1d4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d027      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e4c <HAL_DMA_Init+0x1d8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d022      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a59      	ldr	r2, [pc, #356]	@ (8003e50 <HAL_DMA_Init+0x1dc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d01d      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a57      	ldr	r2, [pc, #348]	@ (8003e54 <HAL_DMA_Init+0x1e0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d018      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a56      	ldr	r2, [pc, #344]	@ (8003e58 <HAL_DMA_Init+0x1e4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a54      	ldr	r2, [pc, #336]	@ (8003e5c <HAL_DMA_Init+0x1e8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00e      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a53      	ldr	r2, [pc, #332]	@ (8003e60 <HAL_DMA_Init+0x1ec>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d009      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a51      	ldr	r2, [pc, #324]	@ (8003e64 <HAL_DMA_Init+0x1f0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d004      	beq.n	8003d2c <HAL_DMA_Init+0xb8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a50      	ldr	r2, [pc, #320]	@ (8003e68 <HAL_DMA_Init+0x1f4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d101      	bne.n	8003d30 <HAL_DMA_Init+0xbc>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_DMA_Init+0xbe>
 8003d30:	2300      	movs	r3, #0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 813b 	beq.w	8003fae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a37      	ldr	r2, [pc, #220]	@ (8003e2c <HAL_DMA_Init+0x1b8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d04a      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a36      	ldr	r2, [pc, #216]	@ (8003e30 <HAL_DMA_Init+0x1bc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d045      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a34      	ldr	r2, [pc, #208]	@ (8003e34 <HAL_DMA_Init+0x1c0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d040      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a33      	ldr	r2, [pc, #204]	@ (8003e38 <HAL_DMA_Init+0x1c4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d03b      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a31      	ldr	r2, [pc, #196]	@ (8003e3c <HAL_DMA_Init+0x1c8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d036      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a30      	ldr	r2, [pc, #192]	@ (8003e40 <HAL_DMA_Init+0x1cc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d031      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2e      	ldr	r2, [pc, #184]	@ (8003e44 <HAL_DMA_Init+0x1d0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d02c      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a2d      	ldr	r2, [pc, #180]	@ (8003e48 <HAL_DMA_Init+0x1d4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d027      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e4c <HAL_DMA_Init+0x1d8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d022      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2a      	ldr	r2, [pc, #168]	@ (8003e50 <HAL_DMA_Init+0x1dc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d01d      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a28      	ldr	r2, [pc, #160]	@ (8003e54 <HAL_DMA_Init+0x1e0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a27      	ldr	r2, [pc, #156]	@ (8003e58 <HAL_DMA_Init+0x1e4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a25      	ldr	r2, [pc, #148]	@ (8003e5c <HAL_DMA_Init+0x1e8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a24      	ldr	r2, [pc, #144]	@ (8003e60 <HAL_DMA_Init+0x1ec>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a22      	ldr	r2, [pc, #136]	@ (8003e64 <HAL_DMA_Init+0x1f0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_DMA_Init+0x174>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a21      	ldr	r2, [pc, #132]	@ (8003e68 <HAL_DMA_Init+0x1f4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <HAL_DMA_Init+0x186>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e007      	b.n	8003e0a <HAL_DMA_Init+0x196>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e0a:	e02f      	b.n	8003e6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e0c:	f7ff fde6 	bl	80039dc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d928      	bls.n	8003e6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2203      	movs	r2, #3
 8003e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e246      	b.n	80042ba <HAL_DMA_Init+0x646>
 8003e2c:	40020010 	.word	0x40020010
 8003e30:	40020028 	.word	0x40020028
 8003e34:	40020040 	.word	0x40020040
 8003e38:	40020058 	.word	0x40020058
 8003e3c:	40020070 	.word	0x40020070
 8003e40:	40020088 	.word	0x40020088
 8003e44:	400200a0 	.word	0x400200a0
 8003e48:	400200b8 	.word	0x400200b8
 8003e4c:	40020410 	.word	0x40020410
 8003e50:	40020428 	.word	0x40020428
 8003e54:	40020440 	.word	0x40020440
 8003e58:	40020458 	.word	0x40020458
 8003e5c:	40020470 	.word	0x40020470
 8003e60:	40020488 	.word	0x40020488
 8003e64:	400204a0 	.word	0x400204a0
 8003e68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1c8      	bne.n	8003e0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4b83      	ldr	r3, [pc, #524]	@ (8004094 <HAL_DMA_Init+0x420>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003e92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eaa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d107      	bne.n	8003ed0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003ed0:	4b71      	ldr	r3, [pc, #452]	@ (8004098 <HAL_DMA_Init+0x424>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b71      	ldr	r3, [pc, #452]	@ (800409c <HAL_DMA_Init+0x428>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003edc:	d328      	bcc.n	8003f30 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b28      	cmp	r3, #40	@ 0x28
 8003ee4:	d903      	bls.n	8003eee <HAL_DMA_Init+0x27a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eec:	d917      	bls.n	8003f1e <HAL_DMA_Init+0x2aa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ef4:	d903      	bls.n	8003efe <HAL_DMA_Init+0x28a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b42      	cmp	r3, #66	@ 0x42
 8003efc:	d90f      	bls.n	8003f1e <HAL_DMA_Init+0x2aa>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b46      	cmp	r3, #70	@ 0x46
 8003f04:	d903      	bls.n	8003f0e <HAL_DMA_Init+0x29a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b48      	cmp	r3, #72	@ 0x48
 8003f0c:	d907      	bls.n	8003f1e <HAL_DMA_Init+0x2aa>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b4e      	cmp	r3, #78	@ 0x4e
 8003f14:	d905      	bls.n	8003f22 <HAL_DMA_Init+0x2ae>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b52      	cmp	r3, #82	@ 0x52
 8003f1c:	d801      	bhi.n	8003f22 <HAL_DMA_Init+0x2ae>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_DMA_Init+0x2b0>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f2e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f023 0307 	bic.w	r3, r3, #7
 8003f46:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d117      	bne.n	8003f8a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f001 fbff 	bl	8005770 <DMA_CheckFifoParam>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2240      	movs	r2, #64	@ 0x40
 8003f7c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e197      	b.n	80042ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 fb3a 	bl	800560c <DMA_CalcBaseAndBitshift>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	223f      	movs	r2, #63	@ 0x3f
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	e0cd      	b.n	800414a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80040a0 <HAL_DMA_Init+0x42c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d022      	beq.n	8003ffe <HAL_DMA_Init+0x38a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a39      	ldr	r2, [pc, #228]	@ (80040a4 <HAL_DMA_Init+0x430>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01d      	beq.n	8003ffe <HAL_DMA_Init+0x38a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a38      	ldr	r2, [pc, #224]	@ (80040a8 <HAL_DMA_Init+0x434>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d018      	beq.n	8003ffe <HAL_DMA_Init+0x38a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a36      	ldr	r2, [pc, #216]	@ (80040ac <HAL_DMA_Init+0x438>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_DMA_Init+0x38a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a35      	ldr	r2, [pc, #212]	@ (80040b0 <HAL_DMA_Init+0x43c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_DMA_Init+0x38a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a33      	ldr	r2, [pc, #204]	@ (80040b4 <HAL_DMA_Init+0x440>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_DMA_Init+0x38a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a32      	ldr	r2, [pc, #200]	@ (80040b8 <HAL_DMA_Init+0x444>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_DMA_Init+0x38a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a30      	ldr	r2, [pc, #192]	@ (80040bc <HAL_DMA_Init+0x448>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_DMA_Init+0x38e>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <HAL_DMA_Init+0x390>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8097 	beq.w	8004138 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a24      	ldr	r2, [pc, #144]	@ (80040a0 <HAL_DMA_Init+0x42c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d021      	beq.n	8004058 <HAL_DMA_Init+0x3e4>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a22      	ldr	r2, [pc, #136]	@ (80040a4 <HAL_DMA_Init+0x430>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01c      	beq.n	8004058 <HAL_DMA_Init+0x3e4>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a21      	ldr	r2, [pc, #132]	@ (80040a8 <HAL_DMA_Init+0x434>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d017      	beq.n	8004058 <HAL_DMA_Init+0x3e4>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1f      	ldr	r2, [pc, #124]	@ (80040ac <HAL_DMA_Init+0x438>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d012      	beq.n	8004058 <HAL_DMA_Init+0x3e4>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1e      	ldr	r2, [pc, #120]	@ (80040b0 <HAL_DMA_Init+0x43c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00d      	beq.n	8004058 <HAL_DMA_Init+0x3e4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1c      	ldr	r2, [pc, #112]	@ (80040b4 <HAL_DMA_Init+0x440>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d008      	beq.n	8004058 <HAL_DMA_Init+0x3e4>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <HAL_DMA_Init+0x444>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <HAL_DMA_Init+0x3e4>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a19      	ldr	r2, [pc, #100]	@ (80040bc <HAL_DMA_Init+0x448>)
 8004056:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <HAL_DMA_Init+0x44c>)
 8004074:	4013      	ands	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b40      	cmp	r3, #64	@ 0x40
 800407e:	d021      	beq.n	80040c4 <HAL_DMA_Init+0x450>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b80      	cmp	r3, #128	@ 0x80
 8004086:	d102      	bne.n	800408e <HAL_DMA_Init+0x41a>
 8004088:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800408c:	e01b      	b.n	80040c6 <HAL_DMA_Init+0x452>
 800408e:	2300      	movs	r3, #0
 8004090:	e019      	b.n	80040c6 <HAL_DMA_Init+0x452>
 8004092:	bf00      	nop
 8004094:	fe10803f 	.word	0xfe10803f
 8004098:	5c001000 	.word	0x5c001000
 800409c:	ffff0000 	.word	0xffff0000
 80040a0:	58025408 	.word	0x58025408
 80040a4:	5802541c 	.word	0x5802541c
 80040a8:	58025430 	.word	0x58025430
 80040ac:	58025444 	.word	0x58025444
 80040b0:	58025458 	.word	0x58025458
 80040b4:	5802546c 	.word	0x5802546c
 80040b8:	58025480 	.word	0x58025480
 80040bc:	58025494 	.word	0x58025494
 80040c0:	fffe000f 	.word	0xfffe000f
 80040c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	4b6e      	ldr	r3, [pc, #440]	@ (80042c4 <HAL_DMA_Init+0x650>)
 800410c:	4413      	add	r3, r2
 800410e:	4a6e      	ldr	r2, [pc, #440]	@ (80042c8 <HAL_DMA_Init+0x654>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	009a      	lsls	r2, r3, #2
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f001 fa75 	bl	800560c <DMA_CalcBaseAndBitshift>
 8004122:	4603      	mov	r3, r0
 8004124:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2201      	movs	r2, #1
 8004130:	409a      	lsls	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	e008      	b.n	800414a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2240      	movs	r2, #64	@ 0x40
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2203      	movs	r2, #3
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0b7      	b.n	80042ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a5f      	ldr	r2, [pc, #380]	@ (80042cc <HAL_DMA_Init+0x658>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d072      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a5d      	ldr	r2, [pc, #372]	@ (80042d0 <HAL_DMA_Init+0x65c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d06d      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5c      	ldr	r2, [pc, #368]	@ (80042d4 <HAL_DMA_Init+0x660>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d068      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a5a      	ldr	r2, [pc, #360]	@ (80042d8 <HAL_DMA_Init+0x664>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d063      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a59      	ldr	r2, [pc, #356]	@ (80042dc <HAL_DMA_Init+0x668>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d05e      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a57      	ldr	r2, [pc, #348]	@ (80042e0 <HAL_DMA_Init+0x66c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d059      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a56      	ldr	r2, [pc, #344]	@ (80042e4 <HAL_DMA_Init+0x670>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d054      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a54      	ldr	r2, [pc, #336]	@ (80042e8 <HAL_DMA_Init+0x674>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d04f      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a53      	ldr	r2, [pc, #332]	@ (80042ec <HAL_DMA_Init+0x678>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d04a      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a51      	ldr	r2, [pc, #324]	@ (80042f0 <HAL_DMA_Init+0x67c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d045      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a50      	ldr	r2, [pc, #320]	@ (80042f4 <HAL_DMA_Init+0x680>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d040      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a4e      	ldr	r2, [pc, #312]	@ (80042f8 <HAL_DMA_Init+0x684>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d03b      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a4d      	ldr	r2, [pc, #308]	@ (80042fc <HAL_DMA_Init+0x688>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d036      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004300 <HAL_DMA_Init+0x68c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d031      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a4a      	ldr	r2, [pc, #296]	@ (8004304 <HAL_DMA_Init+0x690>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d02c      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a48      	ldr	r2, [pc, #288]	@ (8004308 <HAL_DMA_Init+0x694>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d027      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a47      	ldr	r2, [pc, #284]	@ (800430c <HAL_DMA_Init+0x698>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a45      	ldr	r2, [pc, #276]	@ (8004310 <HAL_DMA_Init+0x69c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01d      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a44      	ldr	r2, [pc, #272]	@ (8004314 <HAL_DMA_Init+0x6a0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a42      	ldr	r2, [pc, #264]	@ (8004318 <HAL_DMA_Init+0x6a4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a41      	ldr	r2, [pc, #260]	@ (800431c <HAL_DMA_Init+0x6a8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a3f      	ldr	r2, [pc, #252]	@ (8004320 <HAL_DMA_Init+0x6ac>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a3e      	ldr	r2, [pc, #248]	@ (8004324 <HAL_DMA_Init+0x6b0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_DMA_Init+0x5c6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a3c      	ldr	r2, [pc, #240]	@ (8004328 <HAL_DMA_Init+0x6b4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <HAL_DMA_Init+0x5ca>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <HAL_DMA_Init+0x5cc>
 800423e:	2300      	movs	r3, #0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d032      	beq.n	80042aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f001 fb0f 	bl	8005868 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b80      	cmp	r3, #128	@ 0x80
 8004250:	d102      	bne.n	8004258 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800426c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d010      	beq.n	8004298 <HAL_DMA_Init+0x624>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b08      	cmp	r3, #8
 800427c:	d80c      	bhi.n	8004298 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f001 fb8c 	bl	800599c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	e008      	b.n	80042aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	a7fdabf8 	.word	0xa7fdabf8
 80042c8:	cccccccd 	.word	0xcccccccd
 80042cc:	40020010 	.word	0x40020010
 80042d0:	40020028 	.word	0x40020028
 80042d4:	40020040 	.word	0x40020040
 80042d8:	40020058 	.word	0x40020058
 80042dc:	40020070 	.word	0x40020070
 80042e0:	40020088 	.word	0x40020088
 80042e4:	400200a0 	.word	0x400200a0
 80042e8:	400200b8 	.word	0x400200b8
 80042ec:	40020410 	.word	0x40020410
 80042f0:	40020428 	.word	0x40020428
 80042f4:	40020440 	.word	0x40020440
 80042f8:	40020458 	.word	0x40020458
 80042fc:	40020470 	.word	0x40020470
 8004300:	40020488 	.word	0x40020488
 8004304:	400204a0 	.word	0x400204a0
 8004308:	400204b8 	.word	0x400204b8
 800430c:	58025408 	.word	0x58025408
 8004310:	5802541c 	.word	0x5802541c
 8004314:	58025430 	.word	0x58025430
 8004318:	58025444 	.word	0x58025444
 800431c:	58025458 	.word	0x58025458
 8004320:	5802546c 	.word	0x5802546c
 8004324:	58025480 	.word	0x58025480
 8004328:	58025494 	.word	0x58025494

0800432c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e237      	b.n	80047ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d004      	beq.n	8004354 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2280      	movs	r2, #128	@ 0x80
 800434e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e22c      	b.n	80047ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5c      	ldr	r2, [pc, #368]	@ (80044cc <HAL_DMA_Abort_IT+0x1a0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d04a      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a5b      	ldr	r2, [pc, #364]	@ (80044d0 <HAL_DMA_Abort_IT+0x1a4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d045      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a59      	ldr	r2, [pc, #356]	@ (80044d4 <HAL_DMA_Abort_IT+0x1a8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d040      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a58      	ldr	r2, [pc, #352]	@ (80044d8 <HAL_DMA_Abort_IT+0x1ac>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d03b      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a56      	ldr	r2, [pc, #344]	@ (80044dc <HAL_DMA_Abort_IT+0x1b0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d036      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a55      	ldr	r2, [pc, #340]	@ (80044e0 <HAL_DMA_Abort_IT+0x1b4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d031      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a53      	ldr	r2, [pc, #332]	@ (80044e4 <HAL_DMA_Abort_IT+0x1b8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d02c      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a52      	ldr	r2, [pc, #328]	@ (80044e8 <HAL_DMA_Abort_IT+0x1bc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d027      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a50      	ldr	r2, [pc, #320]	@ (80044ec <HAL_DMA_Abort_IT+0x1c0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d022      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4f      	ldr	r2, [pc, #316]	@ (80044f0 <HAL_DMA_Abort_IT+0x1c4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d01d      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a4d      	ldr	r2, [pc, #308]	@ (80044f4 <HAL_DMA_Abort_IT+0x1c8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d018      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4c      	ldr	r2, [pc, #304]	@ (80044f8 <HAL_DMA_Abort_IT+0x1cc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a4a      	ldr	r2, [pc, #296]	@ (80044fc <HAL_DMA_Abort_IT+0x1d0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a49      	ldr	r2, [pc, #292]	@ (8004500 <HAL_DMA_Abort_IT+0x1d4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a47      	ldr	r2, [pc, #284]	@ (8004504 <HAL_DMA_Abort_IT+0x1d8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a46      	ldr	r2, [pc, #280]	@ (8004508 <HAL_DMA_Abort_IT+0x1dc>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d101      	bne.n	80043f8 <HAL_DMA_Abort_IT+0xcc>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <HAL_DMA_Abort_IT+0xce>
 80043f8:	2300      	movs	r3, #0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8086 	beq.w	800450c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2204      	movs	r2, #4
 8004404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a2f      	ldr	r2, [pc, #188]	@ (80044cc <HAL_DMA_Abort_IT+0x1a0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d04a      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2e      	ldr	r2, [pc, #184]	@ (80044d0 <HAL_DMA_Abort_IT+0x1a4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d045      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2c      	ldr	r2, [pc, #176]	@ (80044d4 <HAL_DMA_Abort_IT+0x1a8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d040      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2b      	ldr	r2, [pc, #172]	@ (80044d8 <HAL_DMA_Abort_IT+0x1ac>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d03b      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a29      	ldr	r2, [pc, #164]	@ (80044dc <HAL_DMA_Abort_IT+0x1b0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d036      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a28      	ldr	r2, [pc, #160]	@ (80044e0 <HAL_DMA_Abort_IT+0x1b4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d031      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a26      	ldr	r2, [pc, #152]	@ (80044e4 <HAL_DMA_Abort_IT+0x1b8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d02c      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a25      	ldr	r2, [pc, #148]	@ (80044e8 <HAL_DMA_Abort_IT+0x1bc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d027      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a23      	ldr	r2, [pc, #140]	@ (80044ec <HAL_DMA_Abort_IT+0x1c0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d022      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a22      	ldr	r2, [pc, #136]	@ (80044f0 <HAL_DMA_Abort_IT+0x1c4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d01d      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a20      	ldr	r2, [pc, #128]	@ (80044f4 <HAL_DMA_Abort_IT+0x1c8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d018      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_DMA_Abort_IT+0x1cc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1d      	ldr	r2, [pc, #116]	@ (80044fc <HAL_DMA_Abort_IT+0x1d0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <HAL_DMA_Abort_IT+0x1d4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1a      	ldr	r2, [pc, #104]	@ (8004504 <HAL_DMA_Abort_IT+0x1d8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x17c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a19      	ldr	r2, [pc, #100]	@ (8004508 <HAL_DMA_Abort_IT+0x1dc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <HAL_DMA_Abort_IT+0x18e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e178      	b.n	80047ac <HAL_DMA_Abort_IT+0x480>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e16f      	b.n	80047ac <HAL_DMA_Abort_IT+0x480>
 80044cc:	40020010 	.word	0x40020010
 80044d0:	40020028 	.word	0x40020028
 80044d4:	40020040 	.word	0x40020040
 80044d8:	40020058 	.word	0x40020058
 80044dc:	40020070 	.word	0x40020070
 80044e0:	40020088 	.word	0x40020088
 80044e4:	400200a0 	.word	0x400200a0
 80044e8:	400200b8 	.word	0x400200b8
 80044ec:	40020410 	.word	0x40020410
 80044f0:	40020428 	.word	0x40020428
 80044f4:	40020440 	.word	0x40020440
 80044f8:	40020458 	.word	0x40020458
 80044fc:	40020470 	.word	0x40020470
 8004500:	40020488 	.word	0x40020488
 8004504:	400204a0 	.word	0x400204a0
 8004508:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 020e 	bic.w	r2, r2, #14
 800451a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a6c      	ldr	r2, [pc, #432]	@ (80046d4 <HAL_DMA_Abort_IT+0x3a8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d04a      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6b      	ldr	r2, [pc, #428]	@ (80046d8 <HAL_DMA_Abort_IT+0x3ac>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d045      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a69      	ldr	r2, [pc, #420]	@ (80046dc <HAL_DMA_Abort_IT+0x3b0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d040      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a68      	ldr	r2, [pc, #416]	@ (80046e0 <HAL_DMA_Abort_IT+0x3b4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d03b      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a66      	ldr	r2, [pc, #408]	@ (80046e4 <HAL_DMA_Abort_IT+0x3b8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d036      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a65      	ldr	r2, [pc, #404]	@ (80046e8 <HAL_DMA_Abort_IT+0x3bc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d031      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a63      	ldr	r2, [pc, #396]	@ (80046ec <HAL_DMA_Abort_IT+0x3c0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d02c      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a62      	ldr	r2, [pc, #392]	@ (80046f0 <HAL_DMA_Abort_IT+0x3c4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d027      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a60      	ldr	r2, [pc, #384]	@ (80046f4 <HAL_DMA_Abort_IT+0x3c8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d022      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a5f      	ldr	r2, [pc, #380]	@ (80046f8 <HAL_DMA_Abort_IT+0x3cc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d01d      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a5d      	ldr	r2, [pc, #372]	@ (80046fc <HAL_DMA_Abort_IT+0x3d0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d018      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a5c      	ldr	r2, [pc, #368]	@ (8004700 <HAL_DMA_Abort_IT+0x3d4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d013      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a5a      	ldr	r2, [pc, #360]	@ (8004704 <HAL_DMA_Abort_IT+0x3d8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00e      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a59      	ldr	r2, [pc, #356]	@ (8004708 <HAL_DMA_Abort_IT+0x3dc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d009      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a57      	ldr	r2, [pc, #348]	@ (800470c <HAL_DMA_Abort_IT+0x3e0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_DMA_Abort_IT+0x290>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a56      	ldr	r2, [pc, #344]	@ (8004710 <HAL_DMA_Abort_IT+0x3e4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d108      	bne.n	80045ce <HAL_DMA_Abort_IT+0x2a2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e007      	b.n	80045de <HAL_DMA_Abort_IT+0x2b2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3c      	ldr	r2, [pc, #240]	@ (80046d4 <HAL_DMA_Abort_IT+0x3a8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d072      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3a      	ldr	r2, [pc, #232]	@ (80046d8 <HAL_DMA_Abort_IT+0x3ac>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d06d      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a39      	ldr	r2, [pc, #228]	@ (80046dc <HAL_DMA_Abort_IT+0x3b0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d068      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a37      	ldr	r2, [pc, #220]	@ (80046e0 <HAL_DMA_Abort_IT+0x3b4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d063      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a36      	ldr	r2, [pc, #216]	@ (80046e4 <HAL_DMA_Abort_IT+0x3b8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d05e      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a34      	ldr	r2, [pc, #208]	@ (80046e8 <HAL_DMA_Abort_IT+0x3bc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d059      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a33      	ldr	r2, [pc, #204]	@ (80046ec <HAL_DMA_Abort_IT+0x3c0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d054      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a31      	ldr	r2, [pc, #196]	@ (80046f0 <HAL_DMA_Abort_IT+0x3c4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d04f      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a30      	ldr	r2, [pc, #192]	@ (80046f4 <HAL_DMA_Abort_IT+0x3c8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d04a      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2e      	ldr	r2, [pc, #184]	@ (80046f8 <HAL_DMA_Abort_IT+0x3cc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d045      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2d      	ldr	r2, [pc, #180]	@ (80046fc <HAL_DMA_Abort_IT+0x3d0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d040      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2b      	ldr	r2, [pc, #172]	@ (8004700 <HAL_DMA_Abort_IT+0x3d4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d03b      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a2a      	ldr	r2, [pc, #168]	@ (8004704 <HAL_DMA_Abort_IT+0x3d8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d036      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a28      	ldr	r2, [pc, #160]	@ (8004708 <HAL_DMA_Abort_IT+0x3dc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d031      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a27      	ldr	r2, [pc, #156]	@ (800470c <HAL_DMA_Abort_IT+0x3e0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d02c      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a25      	ldr	r2, [pc, #148]	@ (8004710 <HAL_DMA_Abort_IT+0x3e4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d027      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a24      	ldr	r2, [pc, #144]	@ (8004714 <HAL_DMA_Abort_IT+0x3e8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a22      	ldr	r2, [pc, #136]	@ (8004718 <HAL_DMA_Abort_IT+0x3ec>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01d      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a21      	ldr	r2, [pc, #132]	@ (800471c <HAL_DMA_Abort_IT+0x3f0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004720 <HAL_DMA_Abort_IT+0x3f4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <HAL_DMA_Abort_IT+0x3f8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004728 <HAL_DMA_Abort_IT+0x3fc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1b      	ldr	r2, [pc, #108]	@ (800472c <HAL_DMA_Abort_IT+0x400>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_DMA_Abort_IT+0x3a2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <HAL_DMA_Abort_IT+0x404>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d132      	bne.n	8004734 <HAL_DMA_Abort_IT+0x408>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e031      	b.n	8004736 <HAL_DMA_Abort_IT+0x40a>
 80046d2:	bf00      	nop
 80046d4:	40020010 	.word	0x40020010
 80046d8:	40020028 	.word	0x40020028
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020058 	.word	0x40020058
 80046e4:	40020070 	.word	0x40020070
 80046e8:	40020088 	.word	0x40020088
 80046ec:	400200a0 	.word	0x400200a0
 80046f0:	400200b8 	.word	0x400200b8
 80046f4:	40020410 	.word	0x40020410
 80046f8:	40020428 	.word	0x40020428
 80046fc:	40020440 	.word	0x40020440
 8004700:	40020458 	.word	0x40020458
 8004704:	40020470 	.word	0x40020470
 8004708:	40020488 	.word	0x40020488
 800470c:	400204a0 	.word	0x400204a0
 8004710:	400204b8 	.word	0x400204b8
 8004714:	58025408 	.word	0x58025408
 8004718:	5802541c 	.word	0x5802541c
 800471c:	58025430 	.word	0x58025430
 8004720:	58025444 	.word	0x58025444
 8004724:	58025458 	.word	0x58025458
 8004728:	5802546c 	.word	0x5802546c
 800472c:	58025480 	.word	0x58025480
 8004730:	58025494 	.word	0x58025494
 8004734:	2300      	movs	r3, #0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d028      	beq.n	800478c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004748:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	2201      	movs	r2, #1
 800475a:	409a      	lsls	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004768:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800477c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004780:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800478a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop

080047b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	@ 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047c4:	4b67      	ldr	r3, [pc, #412]	@ (8004964 <HAL_DMA_IRQHandler+0x1ac>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a67      	ldr	r2, [pc, #412]	@ (8004968 <HAL_DMA_IRQHandler+0x1b0>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	0a9b      	lsrs	r3, r3, #10
 80047d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a5f      	ldr	r2, [pc, #380]	@ (800496c <HAL_DMA_IRQHandler+0x1b4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d04a      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004970 <HAL_DMA_IRQHandler+0x1b8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d045      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a5c      	ldr	r2, [pc, #368]	@ (8004974 <HAL_DMA_IRQHandler+0x1bc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d040      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a5a      	ldr	r2, [pc, #360]	@ (8004978 <HAL_DMA_IRQHandler+0x1c0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d03b      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a59      	ldr	r2, [pc, #356]	@ (800497c <HAL_DMA_IRQHandler+0x1c4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d036      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a57      	ldr	r2, [pc, #348]	@ (8004980 <HAL_DMA_IRQHandler+0x1c8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d031      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a56      	ldr	r2, [pc, #344]	@ (8004984 <HAL_DMA_IRQHandler+0x1cc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d02c      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a54      	ldr	r2, [pc, #336]	@ (8004988 <HAL_DMA_IRQHandler+0x1d0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d027      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a53      	ldr	r2, [pc, #332]	@ (800498c <HAL_DMA_IRQHandler+0x1d4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a51      	ldr	r2, [pc, #324]	@ (8004990 <HAL_DMA_IRQHandler+0x1d8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01d      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a50      	ldr	r2, [pc, #320]	@ (8004994 <HAL_DMA_IRQHandler+0x1dc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d018      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a4e      	ldr	r2, [pc, #312]	@ (8004998 <HAL_DMA_IRQHandler+0x1e0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a4d      	ldr	r2, [pc, #308]	@ (800499c <HAL_DMA_IRQHandler+0x1e4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a4b      	ldr	r2, [pc, #300]	@ (80049a0 <HAL_DMA_IRQHandler+0x1e8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a4a      	ldr	r2, [pc, #296]	@ (80049a4 <HAL_DMA_IRQHandler+0x1ec>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_DMA_IRQHandler+0xd2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a48      	ldr	r2, [pc, #288]	@ (80049a8 <HAL_DMA_IRQHandler+0x1f0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <HAL_DMA_IRQHandler+0xd6>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <HAL_DMA_IRQHandler+0xd8>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 842b 	beq.w	80050ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	2208      	movs	r2, #8
 80048a0:	409a      	lsls	r2, r3
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80a2 	beq.w	80049f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a2e      	ldr	r2, [pc, #184]	@ (800496c <HAL_DMA_IRQHandler+0x1b4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d04a      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004970 <HAL_DMA_IRQHandler+0x1b8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d045      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004974 <HAL_DMA_IRQHandler+0x1bc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d040      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004978 <HAL_DMA_IRQHandler+0x1c0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d03b      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a28      	ldr	r2, [pc, #160]	@ (800497c <HAL_DMA_IRQHandler+0x1c4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d036      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a27      	ldr	r2, [pc, #156]	@ (8004980 <HAL_DMA_IRQHandler+0x1c8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d031      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a25      	ldr	r2, [pc, #148]	@ (8004984 <HAL_DMA_IRQHandler+0x1cc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d02c      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a24      	ldr	r2, [pc, #144]	@ (8004988 <HAL_DMA_IRQHandler+0x1d0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d027      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a22      	ldr	r2, [pc, #136]	@ (800498c <HAL_DMA_IRQHandler+0x1d4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d022      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a21      	ldr	r2, [pc, #132]	@ (8004990 <HAL_DMA_IRQHandler+0x1d8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d01d      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1f      	ldr	r2, [pc, #124]	@ (8004994 <HAL_DMA_IRQHandler+0x1dc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1e      	ldr	r2, [pc, #120]	@ (8004998 <HAL_DMA_IRQHandler+0x1e0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <HAL_DMA_IRQHandler+0x1e4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00e      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1b      	ldr	r2, [pc, #108]	@ (80049a0 <HAL_DMA_IRQHandler+0x1e8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a19      	ldr	r2, [pc, #100]	@ (80049a4 <HAL_DMA_IRQHandler+0x1ec>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_DMA_IRQHandler+0x194>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a18      	ldr	r2, [pc, #96]	@ (80049a8 <HAL_DMA_IRQHandler+0x1f0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d12f      	bne.n	80049ac <HAL_DMA_IRQHandler+0x1f4>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e02e      	b.n	80049c0 <HAL_DMA_IRQHandler+0x208>
 8004962:	bf00      	nop
 8004964:	24000004 	.word	0x24000004
 8004968:	1b4e81b5 	.word	0x1b4e81b5
 800496c:	40020010 	.word	0x40020010
 8004970:	40020028 	.word	0x40020028
 8004974:	40020040 	.word	0x40020040
 8004978:	40020058 	.word	0x40020058
 800497c:	40020070 	.word	0x40020070
 8004980:	40020088 	.word	0x40020088
 8004984:	400200a0 	.word	0x400200a0
 8004988:	400200b8 	.word	0x400200b8
 800498c:	40020410 	.word	0x40020410
 8004990:	40020428 	.word	0x40020428
 8004994:	40020440 	.word	0x40020440
 8004998:	40020458 	.word	0x40020458
 800499c:	40020470 	.word	0x40020470
 80049a0:	40020488 	.word	0x40020488
 80049a4:	400204a0 	.word	0x400204a0
 80049a8:	400204b8 	.word	0x400204b8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2208      	movs	r2, #8
 80049de:	409a      	lsls	r2, r3
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	fa22 f303 	lsr.w	r3, r2, r3
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d06e      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a69      	ldr	r2, [pc, #420]	@ (8004bb0 <HAL_DMA_IRQHandler+0x3f8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d04a      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a67      	ldr	r2, [pc, #412]	@ (8004bb4 <HAL_DMA_IRQHandler+0x3fc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d045      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a66      	ldr	r2, [pc, #408]	@ (8004bb8 <HAL_DMA_IRQHandler+0x400>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d040      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a64      	ldr	r2, [pc, #400]	@ (8004bbc <HAL_DMA_IRQHandler+0x404>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d03b      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a63      	ldr	r2, [pc, #396]	@ (8004bc0 <HAL_DMA_IRQHandler+0x408>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d036      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a61      	ldr	r2, [pc, #388]	@ (8004bc4 <HAL_DMA_IRQHandler+0x40c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d031      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a60      	ldr	r2, [pc, #384]	@ (8004bc8 <HAL_DMA_IRQHandler+0x410>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d02c      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5e      	ldr	r2, [pc, #376]	@ (8004bcc <HAL_DMA_IRQHandler+0x414>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d027      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a5d      	ldr	r2, [pc, #372]	@ (8004bd0 <HAL_DMA_IRQHandler+0x418>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d022      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a5b      	ldr	r2, [pc, #364]	@ (8004bd4 <HAL_DMA_IRQHandler+0x41c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01d      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5a      	ldr	r2, [pc, #360]	@ (8004bd8 <HAL_DMA_IRQHandler+0x420>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d018      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a58      	ldr	r2, [pc, #352]	@ (8004bdc <HAL_DMA_IRQHandler+0x424>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a57      	ldr	r2, [pc, #348]	@ (8004be0 <HAL_DMA_IRQHandler+0x428>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a55      	ldr	r2, [pc, #340]	@ (8004be4 <HAL_DMA_IRQHandler+0x42c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a54      	ldr	r2, [pc, #336]	@ (8004be8 <HAL_DMA_IRQHandler+0x430>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ee>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a52      	ldr	r2, [pc, #328]	@ (8004bec <HAL_DMA_IRQHandler+0x434>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10a      	bne.n	8004abc <HAL_DMA_IRQHandler+0x304>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	e003      	b.n	8004ac4 <HAL_DMA_IRQHandler+0x30c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004adc:	f043 0202 	orr.w	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2204      	movs	r2, #4
 8004aee:	409a      	lsls	r2, r3
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 808f 	beq.w	8004c18 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb0 <HAL_DMA_IRQHandler+0x3f8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d04a      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	@ (8004bb4 <HAL_DMA_IRQHandler+0x3fc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d045      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a29      	ldr	r2, [pc, #164]	@ (8004bb8 <HAL_DMA_IRQHandler+0x400>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d040      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a27      	ldr	r2, [pc, #156]	@ (8004bbc <HAL_DMA_IRQHandler+0x404>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d03b      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a26      	ldr	r2, [pc, #152]	@ (8004bc0 <HAL_DMA_IRQHandler+0x408>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d036      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a24      	ldr	r2, [pc, #144]	@ (8004bc4 <HAL_DMA_IRQHandler+0x40c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d031      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a23      	ldr	r2, [pc, #140]	@ (8004bc8 <HAL_DMA_IRQHandler+0x410>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d02c      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a21      	ldr	r2, [pc, #132]	@ (8004bcc <HAL_DMA_IRQHandler+0x414>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d027      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a20      	ldr	r2, [pc, #128]	@ (8004bd0 <HAL_DMA_IRQHandler+0x418>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd4 <HAL_DMA_IRQHandler+0x41c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01d      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd8 <HAL_DMA_IRQHandler+0x420>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bdc <HAL_DMA_IRQHandler+0x424>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1a      	ldr	r2, [pc, #104]	@ (8004be0 <HAL_DMA_IRQHandler+0x428>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a18      	ldr	r2, [pc, #96]	@ (8004be4 <HAL_DMA_IRQHandler+0x42c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a17      	ldr	r2, [pc, #92]	@ (8004be8 <HAL_DMA_IRQHandler+0x430>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3e2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a15      	ldr	r2, [pc, #84]	@ (8004bec <HAL_DMA_IRQHandler+0x434>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d12a      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x438>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e023      	b.n	8004bf8 <HAL_DMA_IRQHandler+0x440>
 8004bb0:	40020010 	.word	0x40020010
 8004bb4:	40020028 	.word	0x40020028
 8004bb8:	40020040 	.word	0x40020040
 8004bbc:	40020058 	.word	0x40020058
 8004bc0:	40020070 	.word	0x40020070
 8004bc4:	40020088 	.word	0x40020088
 8004bc8:	400200a0 	.word	0x400200a0
 8004bcc:	400200b8 	.word	0x400200b8
 8004bd0:	40020410 	.word	0x40020410
 8004bd4:	40020428 	.word	0x40020428
 8004bd8:	40020440 	.word	0x40020440
 8004bdc:	40020458 	.word	0x40020458
 8004be0:	40020470 	.word	0x40020470
 8004be4:	40020488 	.word	0x40020488
 8004be8:	400204a0 	.word	0x400204a0
 8004bec:	400204b8 	.word	0x400204b8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00d      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	2204      	movs	r2, #4
 8004c06:	409a      	lsls	r2, r3
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c10:	f043 0204 	orr.w	r2, r3, #4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2210      	movs	r2, #16
 8004c22:	409a      	lsls	r2, r3
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80a6 	beq.w	8004d7a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a85      	ldr	r2, [pc, #532]	@ (8004e48 <HAL_DMA_IRQHandler+0x690>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d04a      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a83      	ldr	r2, [pc, #524]	@ (8004e4c <HAL_DMA_IRQHandler+0x694>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d045      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a82      	ldr	r2, [pc, #520]	@ (8004e50 <HAL_DMA_IRQHandler+0x698>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d040      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a80      	ldr	r2, [pc, #512]	@ (8004e54 <HAL_DMA_IRQHandler+0x69c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d03b      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a7f      	ldr	r2, [pc, #508]	@ (8004e58 <HAL_DMA_IRQHandler+0x6a0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d036      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a7d      	ldr	r2, [pc, #500]	@ (8004e5c <HAL_DMA_IRQHandler+0x6a4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d031      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e60 <HAL_DMA_IRQHandler+0x6a8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d02c      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a7a      	ldr	r2, [pc, #488]	@ (8004e64 <HAL_DMA_IRQHandler+0x6ac>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d027      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a79      	ldr	r2, [pc, #484]	@ (8004e68 <HAL_DMA_IRQHandler+0x6b0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d022      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a77      	ldr	r2, [pc, #476]	@ (8004e6c <HAL_DMA_IRQHandler+0x6b4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01d      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a76      	ldr	r2, [pc, #472]	@ (8004e70 <HAL_DMA_IRQHandler+0x6b8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d018      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a74      	ldr	r2, [pc, #464]	@ (8004e74 <HAL_DMA_IRQHandler+0x6bc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a73      	ldr	r2, [pc, #460]	@ (8004e78 <HAL_DMA_IRQHandler+0x6c0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a71      	ldr	r2, [pc, #452]	@ (8004e7c <HAL_DMA_IRQHandler+0x6c4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a70      	ldr	r2, [pc, #448]	@ (8004e80 <HAL_DMA_IRQHandler+0x6c8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_DMA_IRQHandler+0x516>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a6e      	ldr	r2, [pc, #440]	@ (8004e84 <HAL_DMA_IRQHandler+0x6cc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10a      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x52c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf14      	ite	ne
 8004cdc:	2301      	movne	r3, #1
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e009      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x540>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf14      	ite	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	2300      	moveq	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d03e      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2210      	movs	r2, #16
 8004d06:	409a      	lsls	r2, r3
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d018      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d024      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
 8004d38:	e01f      	b.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01b      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
 8004d4a:	e016      	b.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0208 	bic.w	r2, r2, #8
 8004d68:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2220      	movs	r2, #32
 8004d84:	409a      	lsls	r2, r3
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8110 	beq.w	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a2c      	ldr	r2, [pc, #176]	@ (8004e48 <HAL_DMA_IRQHandler+0x690>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d04a      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8004e4c <HAL_DMA_IRQHandler+0x694>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d045      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a29      	ldr	r2, [pc, #164]	@ (8004e50 <HAL_DMA_IRQHandler+0x698>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d040      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a28      	ldr	r2, [pc, #160]	@ (8004e54 <HAL_DMA_IRQHandler+0x69c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d03b      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a26      	ldr	r2, [pc, #152]	@ (8004e58 <HAL_DMA_IRQHandler+0x6a0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d036      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a25      	ldr	r2, [pc, #148]	@ (8004e5c <HAL_DMA_IRQHandler+0x6a4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d031      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	@ (8004e60 <HAL_DMA_IRQHandler+0x6a8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d02c      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a22      	ldr	r2, [pc, #136]	@ (8004e64 <HAL_DMA_IRQHandler+0x6ac>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d027      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a20      	ldr	r2, [pc, #128]	@ (8004e68 <HAL_DMA_IRQHandler+0x6b0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d022      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1f      	ldr	r2, [pc, #124]	@ (8004e6c <HAL_DMA_IRQHandler+0x6b4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d01d      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e70 <HAL_DMA_IRQHandler+0x6b8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d018      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	@ (8004e74 <HAL_DMA_IRQHandler+0x6bc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004e78 <HAL_DMA_IRQHandler+0x6c0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00e      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a19      	ldr	r2, [pc, #100]	@ (8004e7c <HAL_DMA_IRQHandler+0x6c4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a17      	ldr	r2, [pc, #92]	@ (8004e80 <HAL_DMA_IRQHandler+0x6c8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x678>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a16      	ldr	r2, [pc, #88]	@ (8004e84 <HAL_DMA_IRQHandler+0x6cc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d12b      	bne.n	8004e88 <HAL_DMA_IRQHandler+0x6d0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	e02a      	b.n	8004e9c <HAL_DMA_IRQHandler+0x6e4>
 8004e46:	bf00      	nop
 8004e48:	40020010 	.word	0x40020010
 8004e4c:	40020028 	.word	0x40020028
 8004e50:	40020040 	.word	0x40020040
 8004e54:	40020058 	.word	0x40020058
 8004e58:	40020070 	.word	0x40020070
 8004e5c:	40020088 	.word	0x40020088
 8004e60:	400200a0 	.word	0x400200a0
 8004e64:	400200b8 	.word	0x400200b8
 8004e68:	40020410 	.word	0x40020410
 8004e6c:	40020428 	.word	0x40020428
 8004e70:	40020440 	.word	0x40020440
 8004e74:	40020458 	.word	0x40020458
 8004e78:	40020470 	.word	0x40020470
 8004e7c:	40020488 	.word	0x40020488
 8004e80:	400204a0 	.word	0x400204a0
 8004e84:	400204b8 	.word	0x400204b8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf14      	ite	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	2300      	moveq	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8087 	beq.w	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	2220      	movs	r2, #32
 8004eac:	409a      	lsls	r2, r3
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d139      	bne.n	8004f32 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0216 	bic.w	r2, r2, #22
 8004ecc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004edc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <HAL_DMA_IRQHandler+0x736>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0208 	bic.w	r2, r2, #8
 8004efc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	223f      	movs	r2, #63	@ 0x3f
 8004f08:	409a      	lsls	r2, r3
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 834a 	beq.w	80055bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
          }
          return;
 8004f30:	e344      	b.n	80055bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d018      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d108      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d02c      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
 8004f5e:	e027      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
 8004f70:	e01e      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10f      	bne.n	8004fa0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0210 	bic.w	r2, r2, #16
 8004f8e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8306 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8088 	beq.w	80050d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a7a      	ldr	r2, [pc, #488]	@ (80051c0 <HAL_DMA_IRQHandler+0xa08>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d04a      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a79      	ldr	r2, [pc, #484]	@ (80051c4 <HAL_DMA_IRQHandler+0xa0c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d045      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a77      	ldr	r2, [pc, #476]	@ (80051c8 <HAL_DMA_IRQHandler+0xa10>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d040      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a76      	ldr	r2, [pc, #472]	@ (80051cc <HAL_DMA_IRQHandler+0xa14>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d03b      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a74      	ldr	r2, [pc, #464]	@ (80051d0 <HAL_DMA_IRQHandler+0xa18>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d036      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a73      	ldr	r2, [pc, #460]	@ (80051d4 <HAL_DMA_IRQHandler+0xa1c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d031      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a71      	ldr	r2, [pc, #452]	@ (80051d8 <HAL_DMA_IRQHandler+0xa20>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d02c      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a70      	ldr	r2, [pc, #448]	@ (80051dc <HAL_DMA_IRQHandler+0xa24>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d027      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a6e      	ldr	r2, [pc, #440]	@ (80051e0 <HAL_DMA_IRQHandler+0xa28>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d022      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a6d      	ldr	r2, [pc, #436]	@ (80051e4 <HAL_DMA_IRQHandler+0xa2c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d01d      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6b      	ldr	r2, [pc, #428]	@ (80051e8 <HAL_DMA_IRQHandler+0xa30>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d018      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a6a      	ldr	r2, [pc, #424]	@ (80051ec <HAL_DMA_IRQHandler+0xa34>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a68      	ldr	r2, [pc, #416]	@ (80051f0 <HAL_DMA_IRQHandler+0xa38>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00e      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a67      	ldr	r2, [pc, #412]	@ (80051f4 <HAL_DMA_IRQHandler+0xa3c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a65      	ldr	r2, [pc, #404]	@ (80051f8 <HAL_DMA_IRQHandler+0xa40>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_DMA_IRQHandler+0x8b8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a64      	ldr	r2, [pc, #400]	@ (80051fc <HAL_DMA_IRQHandler+0xa44>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d108      	bne.n	8005082 <HAL_DMA_IRQHandler+0x8ca>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e007      	b.n	8005092 <HAL_DMA_IRQHandler+0x8da>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509a:	429a      	cmp	r2, r3
 800509c:	d307      	bcc.n	80050ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f2      	bne.n	8005092 <HAL_DMA_IRQHandler+0x8da>
 80050ac:	e000      	b.n	80050b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80050ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2203      	movs	r2, #3
 80050c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80050c6:	e003      	b.n	80050d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8272 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	4798      	blx	r3
 80050ea:	e26c      	b.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a43      	ldr	r2, [pc, #268]	@ (8005200 <HAL_DMA_IRQHandler+0xa48>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d022      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a42      	ldr	r2, [pc, #264]	@ (8005204 <HAL_DMA_IRQHandler+0xa4c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d01d      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a40      	ldr	r2, [pc, #256]	@ (8005208 <HAL_DMA_IRQHandler+0xa50>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d018      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a3f      	ldr	r2, [pc, #252]	@ (800520c <HAL_DMA_IRQHandler+0xa54>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a3d      	ldr	r2, [pc, #244]	@ (8005210 <HAL_DMA_IRQHandler+0xa58>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a3c      	ldr	r2, [pc, #240]	@ (8005214 <HAL_DMA_IRQHandler+0xa5c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d009      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3a      	ldr	r2, [pc, #232]	@ (8005218 <HAL_DMA_IRQHandler+0xa60>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_DMA_IRQHandler+0x984>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a39      	ldr	r2, [pc, #228]	@ (800521c <HAL_DMA_IRQHandler+0xa64>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_DMA_IRQHandler+0x988>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_DMA_IRQHandler+0x98a>
 8005140:	2300      	movs	r3, #0
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 823f 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	2204      	movs	r2, #4
 800515a:	409a      	lsls	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80cd 	beq.w	8005300 <HAL_DMA_IRQHandler+0xb48>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80c7 	beq.w	8005300 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2204      	movs	r2, #4
 800517c:	409a      	lsls	r2, r3
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d049      	beq.n	8005220 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8210 	beq.w	80055c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a8:	e20a      	b.n	80055c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8206 	beq.w	80055c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051bc:	e200      	b.n	80055c0 <HAL_DMA_IRQHandler+0xe08>
 80051be:	bf00      	nop
 80051c0:	40020010 	.word	0x40020010
 80051c4:	40020028 	.word	0x40020028
 80051c8:	40020040 	.word	0x40020040
 80051cc:	40020058 	.word	0x40020058
 80051d0:	40020070 	.word	0x40020070
 80051d4:	40020088 	.word	0x40020088
 80051d8:	400200a0 	.word	0x400200a0
 80051dc:	400200b8 	.word	0x400200b8
 80051e0:	40020410 	.word	0x40020410
 80051e4:	40020428 	.word	0x40020428
 80051e8:	40020440 	.word	0x40020440
 80051ec:	40020458 	.word	0x40020458
 80051f0:	40020470 	.word	0x40020470
 80051f4:	40020488 	.word	0x40020488
 80051f8:	400204a0 	.word	0x400204a0
 80051fc:	400204b8 	.word	0x400204b8
 8005200:	58025408 	.word	0x58025408
 8005204:	5802541c 	.word	0x5802541c
 8005208:	58025430 	.word	0x58025430
 800520c:	58025444 	.word	0x58025444
 8005210:	58025458 	.word	0x58025458
 8005214:	5802546c 	.word	0x5802546c
 8005218:	58025480 	.word	0x58025480
 800521c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d160      	bne.n	80052ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a7f      	ldr	r2, [pc, #508]	@ (800542c <HAL_DMA_IRQHandler+0xc74>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d04a      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a7d      	ldr	r2, [pc, #500]	@ (8005430 <HAL_DMA_IRQHandler+0xc78>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d045      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a7c      	ldr	r2, [pc, #496]	@ (8005434 <HAL_DMA_IRQHandler+0xc7c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d040      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a7a      	ldr	r2, [pc, #488]	@ (8005438 <HAL_DMA_IRQHandler+0xc80>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d03b      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a79      	ldr	r2, [pc, #484]	@ (800543c <HAL_DMA_IRQHandler+0xc84>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d036      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a77      	ldr	r2, [pc, #476]	@ (8005440 <HAL_DMA_IRQHandler+0xc88>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a76      	ldr	r2, [pc, #472]	@ (8005444 <HAL_DMA_IRQHandler+0xc8c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d02c      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a74      	ldr	r2, [pc, #464]	@ (8005448 <HAL_DMA_IRQHandler+0xc90>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d027      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a73      	ldr	r2, [pc, #460]	@ (800544c <HAL_DMA_IRQHandler+0xc94>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a71      	ldr	r2, [pc, #452]	@ (8005450 <HAL_DMA_IRQHandler+0xc98>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a70      	ldr	r2, [pc, #448]	@ (8005454 <HAL_DMA_IRQHandler+0xc9c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a6e      	ldr	r2, [pc, #440]	@ (8005458 <HAL_DMA_IRQHandler+0xca0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6d      	ldr	r2, [pc, #436]	@ (800545c <HAL_DMA_IRQHandler+0xca4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005460 <HAL_DMA_IRQHandler+0xca8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a6a      	ldr	r2, [pc, #424]	@ (8005464 <HAL_DMA_IRQHandler+0xcac>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_DMA_IRQHandler+0xb12>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a68      	ldr	r2, [pc, #416]	@ (8005468 <HAL_DMA_IRQHandler+0xcb0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d108      	bne.n	80052dc <HAL_DMA_IRQHandler+0xb24>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0208 	bic.w	r2, r2, #8
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e007      	b.n	80052ec <HAL_DMA_IRQHandler+0xb34>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0204 	bic.w	r2, r2, #4
 80052ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8165 	beq.w	80055c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052fe:	e15f      	b.n	80055c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2202      	movs	r2, #2
 800530a:	409a      	lsls	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80c5 	beq.w	80054a0 <HAL_DMA_IRQHandler+0xce8>
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80bf 	beq.w	80054a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2202      	movs	r2, #2
 800532c:	409a      	lsls	r2, r3
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d018      	beq.n	800536e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 813a 	beq.w	80055c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005358:	e134      	b.n	80055c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8130 	beq.w	80055c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800536c:	e12a      	b.n	80055c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 8089 	bne.w	800548c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2b      	ldr	r2, [pc, #172]	@ (800542c <HAL_DMA_IRQHandler+0xc74>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d04a      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a29      	ldr	r2, [pc, #164]	@ (8005430 <HAL_DMA_IRQHandler+0xc78>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d045      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a28      	ldr	r2, [pc, #160]	@ (8005434 <HAL_DMA_IRQHandler+0xc7c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d040      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a26      	ldr	r2, [pc, #152]	@ (8005438 <HAL_DMA_IRQHandler+0xc80>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d03b      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a25      	ldr	r2, [pc, #148]	@ (800543c <HAL_DMA_IRQHandler+0xc84>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d036      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a23      	ldr	r2, [pc, #140]	@ (8005440 <HAL_DMA_IRQHandler+0xc88>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d031      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a22      	ldr	r2, [pc, #136]	@ (8005444 <HAL_DMA_IRQHandler+0xc8c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d02c      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a20      	ldr	r2, [pc, #128]	@ (8005448 <HAL_DMA_IRQHandler+0xc90>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d027      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1f      	ldr	r2, [pc, #124]	@ (800544c <HAL_DMA_IRQHandler+0xc94>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d022      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <HAL_DMA_IRQHandler+0xc98>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01d      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005454 <HAL_DMA_IRQHandler+0xc9c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005458 <HAL_DMA_IRQHandler+0xca0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a19      	ldr	r2, [pc, #100]	@ (800545c <HAL_DMA_IRQHandler+0xca4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a17      	ldr	r2, [pc, #92]	@ (8005460 <HAL_DMA_IRQHandler+0xca8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a16      	ldr	r2, [pc, #88]	@ (8005464 <HAL_DMA_IRQHandler+0xcac>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_DMA_IRQHandler+0xc62>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a14      	ldr	r2, [pc, #80]	@ (8005468 <HAL_DMA_IRQHandler+0xcb0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d128      	bne.n	800546c <HAL_DMA_IRQHandler+0xcb4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0214 	bic.w	r2, r2, #20
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e027      	b.n	800547c <HAL_DMA_IRQHandler+0xcc4>
 800542c:	40020010 	.word	0x40020010
 8005430:	40020028 	.word	0x40020028
 8005434:	40020040 	.word	0x40020040
 8005438:	40020058 	.word	0x40020058
 800543c:	40020070 	.word	0x40020070
 8005440:	40020088 	.word	0x40020088
 8005444:	400200a0 	.word	0x400200a0
 8005448:	400200b8 	.word	0x400200b8
 800544c:	40020410 	.word	0x40020410
 8005450:	40020428 	.word	0x40020428
 8005454:	40020440 	.word	0x40020440
 8005458:	40020458 	.word	0x40020458
 800545c:	40020470 	.word	0x40020470
 8005460:	40020488 	.word	0x40020488
 8005464:	400204a0 	.word	0x400204a0
 8005468:	400204b8 	.word	0x400204b8
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 020a 	bic.w	r2, r2, #10
 800547a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8097 	beq.w	80055c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800549e:	e091      	b.n	80055c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	2208      	movs	r2, #8
 80054aa:	409a      	lsls	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8088 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8082 	beq.w	80055c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a41      	ldr	r2, [pc, #260]	@ (80055cc <HAL_DMA_IRQHandler+0xe14>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d04a      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a3f      	ldr	r2, [pc, #252]	@ (80055d0 <HAL_DMA_IRQHandler+0xe18>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d045      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3e      	ldr	r2, [pc, #248]	@ (80055d4 <HAL_DMA_IRQHandler+0xe1c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d040      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a3c      	ldr	r2, [pc, #240]	@ (80055d8 <HAL_DMA_IRQHandler+0xe20>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d03b      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3b      	ldr	r2, [pc, #236]	@ (80055dc <HAL_DMA_IRQHandler+0xe24>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d036      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a39      	ldr	r2, [pc, #228]	@ (80055e0 <HAL_DMA_IRQHandler+0xe28>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d031      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a38      	ldr	r2, [pc, #224]	@ (80055e4 <HAL_DMA_IRQHandler+0xe2c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d02c      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a36      	ldr	r2, [pc, #216]	@ (80055e8 <HAL_DMA_IRQHandler+0xe30>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d027      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a35      	ldr	r2, [pc, #212]	@ (80055ec <HAL_DMA_IRQHandler+0xe34>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d022      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a33      	ldr	r2, [pc, #204]	@ (80055f0 <HAL_DMA_IRQHandler+0xe38>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01d      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a32      	ldr	r2, [pc, #200]	@ (80055f4 <HAL_DMA_IRQHandler+0xe3c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d018      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a30      	ldr	r2, [pc, #192]	@ (80055f8 <HAL_DMA_IRQHandler+0xe40>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2f      	ldr	r2, [pc, #188]	@ (80055fc <HAL_DMA_IRQHandler+0xe44>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00e      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2d      	ldr	r2, [pc, #180]	@ (8005600 <HAL_DMA_IRQHandler+0xe48>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2c      	ldr	r2, [pc, #176]	@ (8005604 <HAL_DMA_IRQHandler+0xe4c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_DMA_IRQHandler+0xdaa>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2a      	ldr	r2, [pc, #168]	@ (8005608 <HAL_DMA_IRQHandler+0xe50>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d108      	bne.n	8005574 <HAL_DMA_IRQHandler+0xdbc>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 021c 	bic.w	r2, r2, #28
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e007      	b.n	8005584 <HAL_DMA_IRQHandler+0xdcc>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 020e 	bic.w	r2, r2, #14
 8005582:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
 80055ba:	e004      	b.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80055bc:	bf00      	nop
 80055be:	e002      	b.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055c6:	3728      	adds	r7, #40	@ 0x28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40020010 	.word	0x40020010
 80055d0:	40020028 	.word	0x40020028
 80055d4:	40020040 	.word	0x40020040
 80055d8:	40020058 	.word	0x40020058
 80055dc:	40020070 	.word	0x40020070
 80055e0:	40020088 	.word	0x40020088
 80055e4:	400200a0 	.word	0x400200a0
 80055e8:	400200b8 	.word	0x400200b8
 80055ec:	40020410 	.word	0x40020410
 80055f0:	40020428 	.word	0x40020428
 80055f4:	40020440 	.word	0x40020440
 80055f8:	40020458 	.word	0x40020458
 80055fc:	40020470 	.word	0x40020470
 8005600:	40020488 	.word	0x40020488
 8005604:	400204a0 	.word	0x400204a0
 8005608:	400204b8 	.word	0x400204b8

0800560c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a42      	ldr	r2, [pc, #264]	@ (8005724 <DMA_CalcBaseAndBitshift+0x118>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d04a      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a41      	ldr	r2, [pc, #260]	@ (8005728 <DMA_CalcBaseAndBitshift+0x11c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d045      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a3f      	ldr	r2, [pc, #252]	@ (800572c <DMA_CalcBaseAndBitshift+0x120>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d040      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a3e      	ldr	r2, [pc, #248]	@ (8005730 <DMA_CalcBaseAndBitshift+0x124>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d03b      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a3c      	ldr	r2, [pc, #240]	@ (8005734 <DMA_CalcBaseAndBitshift+0x128>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d036      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a3b      	ldr	r2, [pc, #236]	@ (8005738 <DMA_CalcBaseAndBitshift+0x12c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d031      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a39      	ldr	r2, [pc, #228]	@ (800573c <DMA_CalcBaseAndBitshift+0x130>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d02c      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a38      	ldr	r2, [pc, #224]	@ (8005740 <DMA_CalcBaseAndBitshift+0x134>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d027      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a36      	ldr	r2, [pc, #216]	@ (8005744 <DMA_CalcBaseAndBitshift+0x138>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a35      	ldr	r2, [pc, #212]	@ (8005748 <DMA_CalcBaseAndBitshift+0x13c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d01d      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a33      	ldr	r2, [pc, #204]	@ (800574c <DMA_CalcBaseAndBitshift+0x140>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a32      	ldr	r2, [pc, #200]	@ (8005750 <DMA_CalcBaseAndBitshift+0x144>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a30      	ldr	r2, [pc, #192]	@ (8005754 <DMA_CalcBaseAndBitshift+0x148>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2f      	ldr	r2, [pc, #188]	@ (8005758 <DMA_CalcBaseAndBitshift+0x14c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a2d      	ldr	r2, [pc, #180]	@ (800575c <DMA_CalcBaseAndBitshift+0x150>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <DMA_CalcBaseAndBitshift+0xa8>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005760 <DMA_CalcBaseAndBitshift+0x154>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d101      	bne.n	80056b8 <DMA_CalcBaseAndBitshift+0xac>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <DMA_CalcBaseAndBitshift+0xae>
 80056b8:	2300      	movs	r3, #0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d024      	beq.n	8005708 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	3b10      	subs	r3, #16
 80056c6:	4a27      	ldr	r2, [pc, #156]	@ (8005764 <DMA_CalcBaseAndBitshift+0x158>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	4a24      	ldr	r2, [pc, #144]	@ (8005768 <DMA_CalcBaseAndBitshift+0x15c>)
 80056d8:	5cd3      	ldrb	r3, [r2, r3]
 80056da:	461a      	mov	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d908      	bls.n	80056f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	4b1f      	ldr	r3, [pc, #124]	@ (800576c <DMA_CalcBaseAndBitshift+0x160>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80056f6:	e00d      	b.n	8005714 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	4b1b      	ldr	r3, [pc, #108]	@ (800576c <DMA_CalcBaseAndBitshift+0x160>)
 8005700:	4013      	ands	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6593      	str	r3, [r2, #88]	@ 0x58
 8005706:	e005      	b.n	8005714 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40020010 	.word	0x40020010
 8005728:	40020028 	.word	0x40020028
 800572c:	40020040 	.word	0x40020040
 8005730:	40020058 	.word	0x40020058
 8005734:	40020070 	.word	0x40020070
 8005738:	40020088 	.word	0x40020088
 800573c:	400200a0 	.word	0x400200a0
 8005740:	400200b8 	.word	0x400200b8
 8005744:	40020410 	.word	0x40020410
 8005748:	40020428 	.word	0x40020428
 800574c:	40020440 	.word	0x40020440
 8005750:	40020458 	.word	0x40020458
 8005754:	40020470 	.word	0x40020470
 8005758:	40020488 	.word	0x40020488
 800575c:	400204a0 	.word	0x400204a0
 8005760:	400204b8 	.word	0x400204b8
 8005764:	aaaaaaab 	.word	0xaaaaaaab
 8005768:	0800fd10 	.word	0x0800fd10
 800576c:	fffffc00 	.word	0xfffffc00

08005770 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d120      	bne.n	80057c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005788:	2b03      	cmp	r3, #3
 800578a:	d858      	bhi.n	800583e <DMA_CheckFifoParam+0xce>
 800578c:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <DMA_CheckFifoParam+0x24>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057b7 	.word	0x080057b7
 800579c:	080057a5 	.word	0x080057a5
 80057a0:	0800583f 	.word	0x0800583f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d048      	beq.n	8005842 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057b4:	e045      	b.n	8005842 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057be:	d142      	bne.n	8005846 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057c4:	e03f      	b.n	8005846 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ce:	d123      	bne.n	8005818 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d838      	bhi.n	800584a <DMA_CheckFifoParam+0xda>
 80057d8:	a201      	add	r2, pc, #4	@ (adr r2, 80057e0 <DMA_CheckFifoParam+0x70>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	080057f7 	.word	0x080057f7
 80057e8:	080057f1 	.word	0x080057f1
 80057ec:	08005809 	.word	0x08005809
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
        break;
 80057f4:	e030      	b.n	8005858 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d025      	beq.n	800584e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005806:	e022      	b.n	800584e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005810:	d11f      	bne.n	8005852 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005816:	e01c      	b.n	8005852 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	2b02      	cmp	r3, #2
 800581e:	d902      	bls.n	8005826 <DMA_CheckFifoParam+0xb6>
 8005820:	2b03      	cmp	r3, #3
 8005822:	d003      	beq.n	800582c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005824:	e018      	b.n	8005858 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
        break;
 800582a:	e015      	b.n	8005858 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005830:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00e      	beq.n	8005856 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
    break;
 800583c:	e00b      	b.n	8005856 <DMA_CheckFifoParam+0xe6>
        break;
 800583e:	bf00      	nop
 8005840:	e00a      	b.n	8005858 <DMA_CheckFifoParam+0xe8>
        break;
 8005842:	bf00      	nop
 8005844:	e008      	b.n	8005858 <DMA_CheckFifoParam+0xe8>
        break;
 8005846:	bf00      	nop
 8005848:	e006      	b.n	8005858 <DMA_CheckFifoParam+0xe8>
        break;
 800584a:	bf00      	nop
 800584c:	e004      	b.n	8005858 <DMA_CheckFifoParam+0xe8>
        break;
 800584e:	bf00      	nop
 8005850:	e002      	b.n	8005858 <DMA_CheckFifoParam+0xe8>
        break;
 8005852:	bf00      	nop
 8005854:	e000      	b.n	8005858 <DMA_CheckFifoParam+0xe8>
    break;
 8005856:	bf00      	nop
    }
  }

  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop

08005868 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a38      	ldr	r2, [pc, #224]	@ (800595c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d022      	beq.n	80058c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a36      	ldr	r2, [pc, #216]	@ (8005960 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01d      	beq.n	80058c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a35      	ldr	r2, [pc, #212]	@ (8005964 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d018      	beq.n	80058c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a33      	ldr	r2, [pc, #204]	@ (8005968 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a32      	ldr	r2, [pc, #200]	@ (800596c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00e      	beq.n	80058c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a30      	ldr	r2, [pc, #192]	@ (8005970 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d009      	beq.n	80058c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005974 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005978 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d101      	bne.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01a      	beq.n	8005906 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	3b08      	subs	r3, #8
 80058d8:	4a28      	ldr	r2, [pc, #160]	@ (800597c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80058da:	fba2 2303 	umull	r2, r3, r2, r3
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4b26      	ldr	r3, [pc, #152]	@ (8005980 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	461a      	mov	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a24      	ldr	r2, [pc, #144]	@ (8005984 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80058f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	2201      	movs	r2, #1
 80058fe:	409a      	lsls	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005904:	e024      	b.n	8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	3b10      	subs	r3, #16
 800590e:	4a1e      	ldr	r2, [pc, #120]	@ (8005988 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4a1c      	ldr	r2, [pc, #112]	@ (800598c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d806      	bhi.n	800592e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4a1b      	ldr	r2, [pc, #108]	@ (8005990 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d902      	bls.n	800592e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3308      	adds	r3, #8
 800592c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4b18      	ldr	r3, [pc, #96]	@ (8005994 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	461a      	mov	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005940:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2201      	movs	r2, #1
 800594a:	409a      	lsls	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	58025408 	.word	0x58025408
 8005960:	5802541c 	.word	0x5802541c
 8005964:	58025430 	.word	0x58025430
 8005968:	58025444 	.word	0x58025444
 800596c:	58025458 	.word	0x58025458
 8005970:	5802546c 	.word	0x5802546c
 8005974:	58025480 	.word	0x58025480
 8005978:	58025494 	.word	0x58025494
 800597c:	cccccccd 	.word	0xcccccccd
 8005980:	16009600 	.word	0x16009600
 8005984:	58025880 	.word	0x58025880
 8005988:	aaaaaaab 	.word	0xaaaaaaab
 800598c:	400204b8 	.word	0x400204b8
 8005990:	4002040f 	.word	0x4002040f
 8005994:	10008200 	.word	0x10008200
 8005998:	40020880 	.word	0x40020880

0800599c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d04a      	beq.n	8005a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d847      	bhi.n	8005a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a25      	ldr	r2, [pc, #148]	@ (8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d022      	beq.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a24      	ldr	r2, [pc, #144]	@ (8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d01d      	beq.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a22      	ldr	r2, [pc, #136]	@ (8005a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a21      	ldr	r2, [pc, #132]	@ (8005a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d101      	bne.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4b17      	ldr	r3, [pc, #92]	@ (8005a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a15      	ldr	r2, [pc, #84]	@ (8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a24:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a26:	e009      	b.n	8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4b14      	ldr	r3, [pc, #80]	@ (8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	461a      	mov	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a11      	ldr	r2, [pc, #68]	@ (8005a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a3a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	2201      	movs	r2, #1
 8005a42:	409a      	lsls	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	58025408 	.word	0x58025408
 8005a58:	5802541c 	.word	0x5802541c
 8005a5c:	58025430 	.word	0x58025430
 8005a60:	58025444 	.word	0x58025444
 8005a64:	58025458 	.word	0x58025458
 8005a68:	5802546c 	.word	0x5802546c
 8005a6c:	58025480 	.word	0x58025480
 8005a70:	58025494 	.word	0x58025494
 8005a74:	1600963f 	.word	0x1600963f
 8005a78:	58025940 	.word	0x58025940
 8005a7c:	1000823f 	.word	0x1000823f
 8005a80:	40020940 	.word	0x40020940

08005a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	@ 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a92:	4b89      	ldr	r3, [pc, #548]	@ (8005cb8 <HAL_GPIO_Init+0x234>)
 8005a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a96:	e194      	b.n	8005dc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8186 	beq.w	8005dbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d005      	beq.n	8005ac8 <HAL_GPIO_Init+0x44>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d130      	bne.n	8005b2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4013      	ands	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005afe:	2201      	movs	r2, #1
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	091b      	lsrs	r3, r3, #4
 8005b14:	f003 0201 	and.w	r2, r3, #1
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d017      	beq.n	8005b66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	2203      	movs	r2, #3
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43db      	mvns	r3, r3
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d123      	bne.n	8005bba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	08da      	lsrs	r2, r3, #3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3208      	adds	r2, #8
 8005b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	220f      	movs	r2, #15
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	08da      	lsrs	r2, r3, #3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3208      	adds	r2, #8
 8005bb4:	69b9      	ldr	r1, [r7, #24]
 8005bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	2203      	movs	r2, #3
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f003 0203 	and.w	r2, r3, #3
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80e0 	beq.w	8005dbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <HAL_GPIO_Init+0x238>)
 8005bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c02:	4a2e      	ldr	r2, [pc, #184]	@ (8005cbc <HAL_GPIO_Init+0x238>)
 8005c04:	f043 0302 	orr.w	r3, r3, #2
 8005c08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8005cbc <HAL_GPIO_Init+0x238>)
 8005c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c1a:	4a29      	ldr	r2, [pc, #164]	@ (8005cc0 <HAL_GPIO_Init+0x23c>)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	089b      	lsrs	r3, r3, #2
 8005c20:	3302      	adds	r3, #2
 8005c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	220f      	movs	r2, #15
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	43db      	mvns	r3, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a20      	ldr	r2, [pc, #128]	@ (8005cc4 <HAL_GPIO_Init+0x240>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d052      	beq.n	8005cec <HAL_GPIO_Init+0x268>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc8 <HAL_GPIO_Init+0x244>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d031      	beq.n	8005cb2 <HAL_GPIO_Init+0x22e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1e      	ldr	r2, [pc, #120]	@ (8005ccc <HAL_GPIO_Init+0x248>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d02b      	beq.n	8005cae <HAL_GPIO_Init+0x22a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd0 <HAL_GPIO_Init+0x24c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d025      	beq.n	8005caa <HAL_GPIO_Init+0x226>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd4 <HAL_GPIO_Init+0x250>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01f      	beq.n	8005ca6 <HAL_GPIO_Init+0x222>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd8 <HAL_GPIO_Init+0x254>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d019      	beq.n	8005ca2 <HAL_GPIO_Init+0x21e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a1a      	ldr	r2, [pc, #104]	@ (8005cdc <HAL_GPIO_Init+0x258>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_GPIO_Init+0x21a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a19      	ldr	r2, [pc, #100]	@ (8005ce0 <HAL_GPIO_Init+0x25c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00d      	beq.n	8005c9a <HAL_GPIO_Init+0x216>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a18      	ldr	r2, [pc, #96]	@ (8005ce4 <HAL_GPIO_Init+0x260>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d007      	beq.n	8005c96 <HAL_GPIO_Init+0x212>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a17      	ldr	r2, [pc, #92]	@ (8005ce8 <HAL_GPIO_Init+0x264>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d101      	bne.n	8005c92 <HAL_GPIO_Init+0x20e>
 8005c8e:	2309      	movs	r3, #9
 8005c90:	e02d      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005c92:	230a      	movs	r3, #10
 8005c94:	e02b      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005c96:	2308      	movs	r3, #8
 8005c98:	e029      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005c9a:	2307      	movs	r3, #7
 8005c9c:	e027      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005c9e:	2306      	movs	r3, #6
 8005ca0:	e025      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005ca2:	2305      	movs	r3, #5
 8005ca4:	e023      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005ca6:	2304      	movs	r3, #4
 8005ca8:	e021      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005caa:	2303      	movs	r3, #3
 8005cac:	e01f      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e01d      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e01b      	b.n	8005cee <HAL_GPIO_Init+0x26a>
 8005cb6:	bf00      	nop
 8005cb8:	58000080 	.word	0x58000080
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	58000400 	.word	0x58000400
 8005cc4:	58020000 	.word	0x58020000
 8005cc8:	58020400 	.word	0x58020400
 8005ccc:	58020800 	.word	0x58020800
 8005cd0:	58020c00 	.word	0x58020c00
 8005cd4:	58021000 	.word	0x58021000
 8005cd8:	58021400 	.word	0x58021400
 8005cdc:	58021800 	.word	0x58021800
 8005ce0:	58021c00 	.word	0x58021c00
 8005ce4:	58022000 	.word	0x58022000
 8005ce8:	58022400 	.word	0x58022400
 8005cec:	2300      	movs	r3, #0
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	f002 0203 	and.w	r2, r2, #3
 8005cf4:	0092      	lsls	r2, r2, #2
 8005cf6:	4093      	lsls	r3, r2
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cfe:	4938      	ldr	r1, [pc, #224]	@ (8005de0 <HAL_GPIO_Init+0x35c>)
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	089b      	lsrs	r3, r3, #2
 8005d04:	3302      	adds	r3, #2
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	43db      	mvns	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f47f ae63 	bne.w	8005a98 <HAL_GPIO_Init+0x14>
  }
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	3724      	adds	r7, #36	@ 0x24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	58000400 	.word	0x58000400

08005de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	807b      	strh	r3, [r7, #2]
 8005df0:	4613      	mov	r3, r2
 8005df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005df4:	787b      	ldrb	r3, [r7, #1]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dfa:	887a      	ldrh	r2, [r7, #2]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e00:	e003      	b.n	8005e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e02:	887b      	ldrh	r3, [r7, #2]
 8005e04:	041a      	lsls	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	619a      	str	r2, [r3, #24]
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e10d      	b.n	8006046 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fd f94a 	bl	80030d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d107      	bne.n	8005e6a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0201 	bic.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d008      	beq.n	8005e8c <HAL_I2S_Init+0x74>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d004      	beq.n	8005e8c <HAL_I2S_Init+0x74>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b0a      	cmp	r3, #10
 8005e88:	f040 8087 	bne.w	8005f9a <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d05a      	beq.n	8005f4a <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e001      	b.n	8005ea6 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b30      	cmp	r3, #48	@ 0x30
 8005eac:	d003      	beq.n	8005eb6 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005eb2:	2bb0      	cmp	r3, #176	@ 0xb0
 8005eb4:	d102      	bne.n	8005ebc <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e001      	b.n	8005ec0 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8005ec0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005ec4:	f04f 0100 	mov.w	r1, #0
 8005ec8:	f002 fadc 	bl	8008484 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ecc:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ed6:	d113      	bne.n	8005f00 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	3305      	adds	r3, #5
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	e014      	b.n	8005f2a <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005f00:	2220      	movs	r2, #32
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	fb02 f303 	mul.w	r3, r2, r3
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f26:	3305      	adds	r3, #5
 8005f28:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4a48      	ldr	r2, [pc, #288]	@ (8006050 <HAL_I2S_Init+0x238>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	08db      	lsrs	r3, r3, #3
 8005f34:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
 8005f48:	e003      	b.n	8005f52 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d102      	bne.n	8005f5e <HAL_I2S_Init+0x146>
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d002      	beq.n	8005f64 <HAL_I2S_Init+0x14c>
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	2bff      	cmp	r3, #255	@ 0xff
 8005f62:	d907      	bls.n	8005f74 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f68:	f043 0210 	orr.w	r2, r3, #16
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e068      	b.n	8006046 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f84:	4b33      	ldr	r3, [pc, #204]	@ (8006054 <HAL_I2S_Init+0x23c>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	0411      	lsls	r1, r2, #16
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0612      	lsls	r2, r2, #24
 8005f90:	4311      	orrs	r1, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	430b      	orrs	r3, r1
 8005f98:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8006058 <HAL_I2S_Init+0x240>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6851      	ldr	r1, [r2, #4]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6892      	ldr	r2, [r2, #8]
 8005fac:	4311      	orrs	r1, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	68d2      	ldr	r2, [r2, #12]
 8005fb2:	4311      	orrs	r1, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6992      	ldr	r2, [r2, #24]
 8005fb8:	4311      	orrs	r1, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6a12      	ldr	r2, [r2, #32]
 8005fbe:	4311      	orrs	r1, r2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fc4:	4311      	orrs	r1, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6912      	ldr	r2, [r2, #16]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8005fe0:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005ff0:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b04      	cmp	r3, #4
 800600e:	d007      	beq.n	8006020 <HAL_I2S_Init+0x208>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b06      	cmp	r3, #6
 8006016:	d003      	beq.n	8006020 <HAL_I2S_Init+0x208>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b0a      	cmp	r3, #10
 800601e:	d10a      	bne.n	8006036 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	cccccccd 	.word	0xcccccccd
 8006054:	fe00ffff 	.word	0xfe00ffff
 8006058:	fdff9040 	.word	0xfdff9040

0800605c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006064:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b04      	cmp	r3, #4
 800606e:	d00a      	beq.n	8006086 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006070:	4b16      	ldr	r3, [pc, #88]	@ (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	429a      	cmp	r2, r3
 800607c:	d001      	beq.n	8006082 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e01f      	b.n	80060c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e01d      	b.n	80060c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006086:	4b11      	ldr	r3, [pc, #68]	@ (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f023 0207 	bic.w	r2, r3, #7
 800608e:	490f      	ldr	r1, [pc, #60]	@ (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4313      	orrs	r3, r2
 8006094:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006096:	f7fd fca1 	bl	80039dc <HAL_GetTick>
 800609a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800609c:	e009      	b.n	80060b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800609e:	f7fd fc9d 	bl	80039dc <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060ac:	d901      	bls.n	80060b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e007      	b.n	80060c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060b2:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060be:	d1ee      	bne.n	800609e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	58024800 	.word	0x58024800

080060d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	@ 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f000 bc48 	b.w	8006974 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8088 	beq.w	8006202 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060f2:	4b99      	ldr	r3, [pc, #612]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060fc:	4b96      	ldr	r3, [pc, #600]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006104:	2b10      	cmp	r3, #16
 8006106:	d007      	beq.n	8006118 <HAL_RCC_OscConfig+0x48>
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	2b18      	cmp	r3, #24
 800610c:	d111      	bne.n	8006132 <HAL_RCC_OscConfig+0x62>
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d10c      	bne.n	8006132 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006118:	4b8f      	ldr	r3, [pc, #572]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d06d      	beq.n	8006200 <HAL_RCC_OscConfig+0x130>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d169      	bne.n	8006200 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f000 bc21 	b.w	8006974 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800613a:	d106      	bne.n	800614a <HAL_RCC_OscConfig+0x7a>
 800613c:	4b86      	ldr	r3, [pc, #536]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a85      	ldr	r2, [pc, #532]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e02e      	b.n	80061a8 <HAL_RCC_OscConfig+0xd8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10c      	bne.n	800616c <HAL_RCC_OscConfig+0x9c>
 8006152:	4b81      	ldr	r3, [pc, #516]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a80      	ldr	r2, [pc, #512]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	4b7e      	ldr	r3, [pc, #504]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a7d      	ldr	r2, [pc, #500]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006164:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e01d      	b.n	80061a8 <HAL_RCC_OscConfig+0xd8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006174:	d10c      	bne.n	8006190 <HAL_RCC_OscConfig+0xc0>
 8006176:	4b78      	ldr	r3, [pc, #480]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a77      	ldr	r2, [pc, #476]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800617c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	4b75      	ldr	r3, [pc, #468]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a74      	ldr	r2, [pc, #464]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e00b      	b.n	80061a8 <HAL_RCC_OscConfig+0xd8>
 8006190:	4b71      	ldr	r3, [pc, #452]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a70      	ldr	r2, [pc, #448]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	4b6e      	ldr	r3, [pc, #440]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a6d      	ldr	r2, [pc, #436]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80061a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d013      	beq.n	80061d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fd fc14 	bl	80039dc <HAL_GetTick>
 80061b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b8:	f7fd fc10 	bl	80039dc <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b64      	cmp	r3, #100	@ 0x64
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e3d4      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061ca:	4b63      	ldr	r3, [pc, #396]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCC_OscConfig+0xe8>
 80061d6:	e014      	b.n	8006202 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d8:	f7fd fc00 	bl	80039dc <HAL_GetTick>
 80061dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061e0:	f7fd fbfc 	bl	80039dc <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b64      	cmp	r3, #100	@ 0x64
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e3c0      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061f2:	4b59      	ldr	r3, [pc, #356]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0x110>
 80061fe:	e000      	b.n	8006202 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 80ca 	beq.w	80063a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006210:	4b51      	ldr	r3, [pc, #324]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006218:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800621a:	4b4f      	ldr	r3, [pc, #316]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <HAL_RCC_OscConfig+0x166>
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	2b18      	cmp	r3, #24
 800622a:	d156      	bne.n	80062da <HAL_RCC_OscConfig+0x20a>
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d151      	bne.n	80062da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006236:	4b48      	ldr	r3, [pc, #288]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_RCC_OscConfig+0x17e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e392      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800624e:	4b42      	ldr	r3, [pc, #264]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 0219 	bic.w	r2, r3, #25
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	493f      	ldr	r1, [pc, #252]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800625c:	4313      	orrs	r3, r2
 800625e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fd fbbc 	bl	80039dc <HAL_GetTick>
 8006264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006268:	f7fd fbb8 	bl	80039dc <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e37c      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800627a:	4b37      	ldr	r3, [pc, #220]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f0      	beq.n	8006268 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006286:	f7fd fbd9 	bl	8003a3c <HAL_GetREVID>
 800628a:	4603      	mov	r3, r0
 800628c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006290:	4293      	cmp	r3, r2
 8006292:	d817      	bhi.n	80062c4 <HAL_RCC_OscConfig+0x1f4>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b40      	cmp	r3, #64	@ 0x40
 800629a:	d108      	bne.n	80062ae <HAL_RCC_OscConfig+0x1de>
 800629c:	4b2e      	ldr	r3, [pc, #184]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80062a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ac:	e07a      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	031b      	lsls	r3, r3, #12
 80062bc:	4926      	ldr	r1, [pc, #152]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062c2:	e06f      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c4:	4b24      	ldr	r3, [pc, #144]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	061b      	lsls	r3, r3, #24
 80062d2:	4921      	ldr	r1, [pc, #132]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d8:	e064      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d047      	beq.n	8006372 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f023 0219 	bic.w	r2, r3, #25
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	491a      	ldr	r1, [pc, #104]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fd fb72 	bl	80039dc <HAL_GetTick>
 80062f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062fc:	f7fd fb6e 	bl	80039dc <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e332      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800630e:	4b12      	ldr	r3, [pc, #72]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0f0      	beq.n	80062fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631a:	f7fd fb8f 	bl	8003a3c <HAL_GetREVID>
 800631e:	4603      	mov	r3, r0
 8006320:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006324:	4293      	cmp	r3, r2
 8006326:	d819      	bhi.n	800635c <HAL_RCC_OscConfig+0x28c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b40      	cmp	r3, #64	@ 0x40
 800632e:	d108      	bne.n	8006342 <HAL_RCC_OscConfig+0x272>
 8006330:	4b09      	ldr	r3, [pc, #36]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006338:	4a07      	ldr	r2, [pc, #28]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800633a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800633e:	6053      	str	r3, [r2, #4]
 8006340:	e030      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
 8006342:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	031b      	lsls	r3, r3, #12
 8006350:	4901      	ldr	r1, [pc, #4]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006352:	4313      	orrs	r3, r2
 8006354:	604b      	str	r3, [r1, #4]
 8006356:	e025      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
 8006358:	58024400 	.word	0x58024400
 800635c:	4b9a      	ldr	r3, [pc, #616]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	4997      	ldr	r1, [pc, #604]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800636c:	4313      	orrs	r3, r2
 800636e:	604b      	str	r3, [r1, #4]
 8006370:	e018      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006372:	4b95      	ldr	r3, [pc, #596]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a94      	ldr	r2, [pc, #592]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fd fb2d 	bl	80039dc <HAL_GetTick>
 8006382:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006386:	f7fd fb29 	bl	80039dc <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e2ed      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006398:	4b8b      	ldr	r3, [pc, #556]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80a9 	beq.w	8006504 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b2:	4b85      	ldr	r3, [pc, #532]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063bc:	4b82      	ldr	r3, [pc, #520]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d007      	beq.n	80063d8 <HAL_RCC_OscConfig+0x308>
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b18      	cmp	r3, #24
 80063cc:	d13a      	bne.n	8006444 <HAL_RCC_OscConfig+0x374>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d135      	bne.n	8006444 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063d8:	4b7b      	ldr	r3, [pc, #492]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <HAL_RCC_OscConfig+0x320>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	2b80      	cmp	r3, #128	@ 0x80
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e2c1      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063f0:	f7fd fb24 	bl	8003a3c <HAL_GetREVID>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d817      	bhi.n	800642e <HAL_RCC_OscConfig+0x35e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	2b20      	cmp	r3, #32
 8006404:	d108      	bne.n	8006418 <HAL_RCC_OscConfig+0x348>
 8006406:	4b70      	ldr	r3, [pc, #448]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800640e:	4a6e      	ldr	r2, [pc, #440]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006410:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006414:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006416:	e075      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006418:	4b6b      	ldr	r3, [pc, #428]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	069b      	lsls	r3, r3, #26
 8006426:	4968      	ldr	r1, [pc, #416]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006428:	4313      	orrs	r3, r2
 800642a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800642c:	e06a      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800642e:	4b66      	ldr	r3, [pc, #408]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	061b      	lsls	r3, r3, #24
 800643c:	4962      	ldr	r1, [pc, #392]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800643e:	4313      	orrs	r3, r2
 8006440:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006442:	e05f      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d042      	beq.n	80064d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800644c:	4b5e      	ldr	r3, [pc, #376]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5d      	ldr	r2, [pc, #372]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006458:	f7fd fac0 	bl	80039dc <HAL_GetTick>
 800645c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006460:	f7fd fabc 	bl	80039dc <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e280      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006472:	4b55      	ldr	r3, [pc, #340]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800647e:	f7fd fadd 	bl	8003a3c <HAL_GetREVID>
 8006482:	4603      	mov	r3, r0
 8006484:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006488:	4293      	cmp	r3, r2
 800648a:	d817      	bhi.n	80064bc <HAL_RCC_OscConfig+0x3ec>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	2b20      	cmp	r3, #32
 8006492:	d108      	bne.n	80064a6 <HAL_RCC_OscConfig+0x3d6>
 8006494:	4b4c      	ldr	r3, [pc, #304]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800649c:	4a4a      	ldr	r2, [pc, #296]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800649e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064a2:	6053      	str	r3, [r2, #4]
 80064a4:	e02e      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
 80064a6:	4b48      	ldr	r3, [pc, #288]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	069b      	lsls	r3, r3, #26
 80064b4:	4944      	ldr	r1, [pc, #272]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	604b      	str	r3, [r1, #4]
 80064ba:	e023      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
 80064bc:	4b42      	ldr	r3, [pc, #264]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	061b      	lsls	r3, r3, #24
 80064ca:	493f      	ldr	r1, [pc, #252]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60cb      	str	r3, [r1, #12]
 80064d0:	e018      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064d2:	4b3d      	ldr	r3, [pc, #244]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a3c      	ldr	r2, [pc, #240]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064de:	f7fd fa7d 	bl	80039dc <HAL_GetTick>
 80064e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064e6:	f7fd fa79 	bl	80039dc <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e23d      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064f8:	4b33      	ldr	r3, [pc, #204]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d036      	beq.n	800657e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d019      	beq.n	800654c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006518:	4b2b      	ldr	r3, [pc, #172]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800651a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800651c:	4a2a      	ldr	r2, [pc, #168]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006524:	f7fd fa5a 	bl	80039dc <HAL_GetTick>
 8006528:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800652c:	f7fd fa56 	bl	80039dc <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e21a      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800653e:	4b22      	ldr	r3, [pc, #136]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0x45c>
 800654a:	e018      	b.n	800657e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800654c:	4b1e      	ldr	r3, [pc, #120]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800654e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006550:	4a1d      	ldr	r2, [pc, #116]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006552:	f023 0301 	bic.w	r3, r3, #1
 8006556:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006558:	f7fd fa40 	bl	80039dc <HAL_GetTick>
 800655c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006560:	f7fd fa3c 	bl	80039dc <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e200      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006572:	4b15      	ldr	r3, [pc, #84]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	d039      	beq.n	80065fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01c      	beq.n	80065cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006592:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a0c      	ldr	r2, [pc, #48]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006598:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800659c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800659e:	f7fd fa1d 	bl	80039dc <HAL_GetTick>
 80065a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065a6:	f7fd fa19 	bl	80039dc <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e1dd      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065b8:	4b03      	ldr	r3, [pc, #12]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0f0      	beq.n	80065a6 <HAL_RCC_OscConfig+0x4d6>
 80065c4:	e01b      	b.n	80065fe <HAL_RCC_OscConfig+0x52e>
 80065c6:	bf00      	nop
 80065c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065cc:	4b9b      	ldr	r3, [pc, #620]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a9a      	ldr	r2, [pc, #616]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80065d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065d8:	f7fd fa00 	bl	80039dc <HAL_GetTick>
 80065dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065e0:	f7fd f9fc 	bl	80039dc <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e1c0      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065f2:	4b92      	ldr	r3, [pc, #584]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 8081 	beq.w	800670e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800660c:	4b8c      	ldr	r3, [pc, #560]	@ (8006840 <HAL_RCC_OscConfig+0x770>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a8b      	ldr	r2, [pc, #556]	@ (8006840 <HAL_RCC_OscConfig+0x770>)
 8006612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006618:	f7fd f9e0 	bl	80039dc <HAL_GetTick>
 800661c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006620:	f7fd f9dc 	bl	80039dc <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b64      	cmp	r3, #100	@ 0x64
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e1a0      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006632:	4b83      	ldr	r3, [pc, #524]	@ (8006840 <HAL_RCC_OscConfig+0x770>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d106      	bne.n	8006654 <HAL_RCC_OscConfig+0x584>
 8006646:	4b7d      	ldr	r3, [pc, #500]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664a:	4a7c      	ldr	r2, [pc, #496]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800664c:	f043 0301 	orr.w	r3, r3, #1
 8006650:	6713      	str	r3, [r2, #112]	@ 0x70
 8006652:	e02d      	b.n	80066b0 <HAL_RCC_OscConfig+0x5e0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10c      	bne.n	8006676 <HAL_RCC_OscConfig+0x5a6>
 800665c:	4b77      	ldr	r3, [pc, #476]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006660:	4a76      	ldr	r2, [pc, #472]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	6713      	str	r3, [r2, #112]	@ 0x70
 8006668:	4b74      	ldr	r3, [pc, #464]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666c:	4a73      	ldr	r2, [pc, #460]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800666e:	f023 0304 	bic.w	r3, r3, #4
 8006672:	6713      	str	r3, [r2, #112]	@ 0x70
 8006674:	e01c      	b.n	80066b0 <HAL_RCC_OscConfig+0x5e0>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b05      	cmp	r3, #5
 800667c:	d10c      	bne.n	8006698 <HAL_RCC_OscConfig+0x5c8>
 800667e:	4b6f      	ldr	r3, [pc, #444]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006682:	4a6e      	ldr	r2, [pc, #440]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006684:	f043 0304 	orr.w	r3, r3, #4
 8006688:	6713      	str	r3, [r2, #112]	@ 0x70
 800668a:	4b6c      	ldr	r3, [pc, #432]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668e:	4a6b      	ldr	r2, [pc, #428]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	6713      	str	r3, [r2, #112]	@ 0x70
 8006696:	e00b      	b.n	80066b0 <HAL_RCC_OscConfig+0x5e0>
 8006698:	4b68      	ldr	r3, [pc, #416]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669c:	4a67      	ldr	r2, [pc, #412]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a4:	4b65      	ldr	r3, [pc, #404]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80066a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a8:	4a64      	ldr	r2, [pc, #400]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80066aa:	f023 0304 	bic.w	r3, r3, #4
 80066ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d015      	beq.n	80066e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b8:	f7fd f990 	bl	80039dc <HAL_GetTick>
 80066bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066be:	e00a      	b.n	80066d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c0:	f7fd f98c 	bl	80039dc <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e14e      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d6:	4b59      	ldr	r3, [pc, #356]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80066d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0ee      	beq.n	80066c0 <HAL_RCC_OscConfig+0x5f0>
 80066e2:	e014      	b.n	800670e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e4:	f7fd f97a 	bl	80039dc <HAL_GetTick>
 80066e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066ea:	e00a      	b.n	8006702 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ec:	f7fd f976 	bl	80039dc <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e138      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006702:	4b4e      	ldr	r3, [pc, #312]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1ee      	bne.n	80066ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 812d 	beq.w	8006972 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006718:	4b48      	ldr	r3, [pc, #288]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006720:	2b18      	cmp	r3, #24
 8006722:	f000 80bd 	beq.w	80068a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672a:	2b02      	cmp	r3, #2
 800672c:	f040 809e 	bne.w	800686c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006730:	4b42      	ldr	r3, [pc, #264]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a41      	ldr	r2, [pc, #260]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006736:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800673a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673c:	f7fd f94e 	bl	80039dc <HAL_GetTick>
 8006740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006744:	f7fd f94a 	bl	80039dc <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e10e      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006756:	4b39      	ldr	r3, [pc, #228]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006762:	4b36      	ldr	r3, [pc, #216]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006766:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <HAL_RCC_OscConfig+0x774>)
 8006768:	4013      	ands	r3, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006772:	0112      	lsls	r2, r2, #4
 8006774:	430a      	orrs	r2, r1
 8006776:	4931      	ldr	r1, [pc, #196]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006778:	4313      	orrs	r3, r2
 800677a:	628b      	str	r3, [r1, #40]	@ 0x28
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006780:	3b01      	subs	r3, #1
 8006782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678a:	3b01      	subs	r3, #1
 800678c:	025b      	lsls	r3, r3, #9
 800678e:	b29b      	uxth	r3, r3
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	3b01      	subs	r3, #1
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a4:	3b01      	subs	r3, #1
 80067a6:	061b      	lsls	r3, r3, #24
 80067a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80067ac:	4923      	ldr	r1, [pc, #140]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80067b2:	4b22      	ldr	r3, [pc, #136]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b6:	4a21      	ldr	r2, [pc, #132]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067be:	4b1f      	ldr	r3, [pc, #124]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067c2:	4b21      	ldr	r3, [pc, #132]	@ (8006848 <HAL_RCC_OscConfig+0x778>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067ca:	00d2      	lsls	r2, r2, #3
 80067cc:	491b      	ldr	r1, [pc, #108]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067d2:	4b1a      	ldr	r3, [pc, #104]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	f023 020c 	bic.w	r2, r3, #12
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	4917      	ldr	r1, [pc, #92]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067e4:	4b15      	ldr	r3, [pc, #84]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e8:	f023 0202 	bic.w	r2, r3, #2
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f0:	4912      	ldr	r1, [pc, #72]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067f6:	4b11      	ldr	r3, [pc, #68]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fa:	4a10      	ldr	r2, [pc, #64]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006802:	4b0e      	ldr	r3, [pc, #56]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006806:	4a0d      	ldr	r2, [pc, #52]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800680c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800680e:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006812:	4a0a      	ldr	r2, [pc, #40]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800681a:	4b08      	ldr	r3, [pc, #32]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800681c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681e:	4a07      	ldr	r2, [pc, #28]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006826:	4b05      	ldr	r3, [pc, #20]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a04      	ldr	r2, [pc, #16]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800682c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006832:	f7fd f8d3 	bl	80039dc <HAL_GetTick>
 8006836:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006838:	e011      	b.n	800685e <HAL_RCC_OscConfig+0x78e>
 800683a:	bf00      	nop
 800683c:	58024400 	.word	0x58024400
 8006840:	58024800 	.word	0x58024800
 8006844:	fffffc0c 	.word	0xfffffc0c
 8006848:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684c:	f7fd f8c6 	bl	80039dc <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e08a      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800685e:	4b47      	ldr	r3, [pc, #284]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x77c>
 800686a:	e082      	b.n	8006972 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686c:	4b43      	ldr	r3, [pc, #268]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a42      	ldr	r2, [pc, #264]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fd f8b0 	bl	80039dc <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006880:	f7fd f8ac 	bl	80039dc <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e070      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006892:	4b3a      	ldr	r3, [pc, #232]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x7b0>
 800689e:	e068      	b.n	8006972 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068a0:	4b36      	ldr	r3, [pc, #216]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068a6:	4b35      	ldr	r3, [pc, #212]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d031      	beq.n	8006918 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f003 0203 	and.w	r2, r3, #3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068be:	429a      	cmp	r2, r3
 80068c0:	d12a      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	091b      	lsrs	r3, r3, #4
 80068c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d122      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068de:	429a      	cmp	r2, r3
 80068e0:	d11a      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	0a5b      	lsrs	r3, r3, #9
 80068e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d111      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006900:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006902:	429a      	cmp	r2, r3
 8006904:	d108      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	0e1b      	lsrs	r3, r3, #24
 800690a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006912:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006914:	429a      	cmp	r2, r3
 8006916:	d001      	beq.n	800691c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e02b      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800691c:	4b17      	ldr	r3, [pc, #92]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 800691e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006920:	08db      	lsrs	r3, r3, #3
 8006922:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006926:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	429a      	cmp	r2, r3
 8006930:	d01f      	beq.n	8006972 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006932:	4b12      	ldr	r3, [pc, #72]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	4a11      	ldr	r2, [pc, #68]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800693e:	f7fd f84d 	bl	80039dc <HAL_GetTick>
 8006942:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006944:	bf00      	nop
 8006946:	f7fd f849 	bl	80039dc <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694e:	4293      	cmp	r3, r2
 8006950:	d0f9      	beq.n	8006946 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006952:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006956:	4b0a      	ldr	r3, [pc, #40]	@ (8006980 <HAL_RCC_OscConfig+0x8b0>)
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800695e:	00d2      	lsls	r2, r2, #3
 8006960:	4906      	ldr	r1, [pc, #24]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006962:	4313      	orrs	r3, r2
 8006964:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006966:	4b05      	ldr	r3, [pc, #20]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	4a04      	ldr	r2, [pc, #16]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3730      	adds	r7, #48	@ 0x30
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	58024400 	.word	0x58024400
 8006980:	ffff0007 	.word	0xffff0007

08006984 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e19c      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006998:	4b8a      	ldr	r3, [pc, #552]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d910      	bls.n	80069c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a6:	4b87      	ldr	r3, [pc, #540]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 020f 	bic.w	r2, r3, #15
 80069ae:	4985      	ldr	r1, [pc, #532]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b6:	4b83      	ldr	r3, [pc, #524]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d001      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e184      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d010      	beq.n	80069f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	4b7b      	ldr	r3, [pc, #492]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d908      	bls.n	80069f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069e4:	4b78      	ldr	r3, [pc, #480]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	4975      	ldr	r1, [pc, #468]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d010      	beq.n	8006a24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695a      	ldr	r2, [r3, #20]
 8006a06:	4b70      	ldr	r3, [pc, #448]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d908      	bls.n	8006a24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a12:	4b6d      	ldr	r3, [pc, #436]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	496a      	ldr	r1, [pc, #424]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	4b64      	ldr	r3, [pc, #400]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d908      	bls.n	8006a52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a40:	4b61      	ldr	r3, [pc, #388]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	495e      	ldr	r1, [pc, #376]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d010      	beq.n	8006a80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	4b59      	ldr	r3, [pc, #356]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d908      	bls.n	8006a80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a6e:	4b56      	ldr	r3, [pc, #344]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	4953      	ldr	r1, [pc, #332]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d010      	beq.n	8006aae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	4b4d      	ldr	r3, [pc, #308]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d908      	bls.n	8006aae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f023 020f 	bic.w	r2, r3, #15
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4947      	ldr	r1, [pc, #284]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d055      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006aba:	4b43      	ldr	r3, [pc, #268]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	4940      	ldr	r1, [pc, #256]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d121      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0f6      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d107      	bne.n	8006afc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aec:	4b36      	ldr	r3, [pc, #216]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d115      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0ea      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b04:	4b30      	ldr	r3, [pc, #192]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0de      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b14:	4b2c      	ldr	r3, [pc, #176]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0d6      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b24:	4b28      	ldr	r3, [pc, #160]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f023 0207 	bic.w	r2, r3, #7
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	4925      	ldr	r1, [pc, #148]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b36:	f7fc ff51 	bl	80039dc <HAL_GetTick>
 8006b3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3c:	e00a      	b.n	8006b54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b3e:	f7fc ff4d 	bl	80039dc <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0be      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b54:	4b1c      	ldr	r3, [pc, #112]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d1eb      	bne.n	8006b3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d010      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	4b14      	ldr	r3, [pc, #80]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d208      	bcs.n	8006b94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b82:	4b11      	ldr	r3, [pc, #68]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f023 020f 	bic.w	r2, r3, #15
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	490e      	ldr	r1, [pc, #56]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b94:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d214      	bcs.n	8006bcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba2:	4b08      	ldr	r3, [pc, #32]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 020f 	bic.w	r2, r3, #15
 8006baa:	4906      	ldr	r1, [pc, #24]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb2:	4b04      	ldr	r3, [pc, #16]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d005      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e086      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
 8006bc4:	52002000 	.word	0x52002000
 8006bc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d010      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d208      	bcs.n	8006bfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006be8:	4b3c      	ldr	r3, [pc, #240]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	4939      	ldr	r1, [pc, #228]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d010      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	4b34      	ldr	r3, [pc, #208]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d208      	bcs.n	8006c28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c16:	4b31      	ldr	r3, [pc, #196]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	492e      	ldr	r1, [pc, #184]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d010      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699a      	ldr	r2, [r3, #24]
 8006c38:	4b28      	ldr	r3, [pc, #160]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d208      	bcs.n	8006c56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c44:	4b25      	ldr	r3, [pc, #148]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	4922      	ldr	r1, [pc, #136]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d010      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69da      	ldr	r2, [r3, #28]
 8006c66:	4b1d      	ldr	r3, [pc, #116]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d208      	bcs.n	8006c84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c72:	4b1a      	ldr	r3, [pc, #104]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	4917      	ldr	r1, [pc, #92]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c84:	f000 f834 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	4b14      	ldr	r3, [pc, #80]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	4912      	ldr	r1, [pc, #72]	@ (8006ce0 <HAL_RCC_ClockConfig+0x35c>)
 8006c96:	5ccb      	ldrb	r3, [r1, r3]
 8006c98:	f003 031f 	and.w	r3, r3, #31
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	4a0d      	ldr	r2, [pc, #52]	@ (8006ce0 <HAL_RCC_ClockConfig+0x35c>)
 8006cac:	5cd3      	ldrb	r3, [r2, r3]
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce4 <HAL_RCC_ClockConfig+0x360>)
 8006cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce8 <HAL_RCC_ClockConfig+0x364>)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <HAL_RCC_ClockConfig+0x368>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fc fe3e 	bl	8003948 <HAL_InitTick>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	0800fd00 	.word	0x0800fd00
 8006ce4:	24000008 	.word	0x24000008
 8006ce8:	24000004 	.word	0x24000004
 8006cec:	2400000c 	.word	0x2400000c

08006cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b089      	sub	sp, #36	@ 0x24
 8006cf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cf6:	4bb3      	ldr	r3, [pc, #716]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cfe:	2b18      	cmp	r3, #24
 8006d00:	f200 8155 	bhi.w	8006fae <HAL_RCC_GetSysClockFreq+0x2be>
 8006d04:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d71 	.word	0x08006d71
 8006d10:	08006faf 	.word	0x08006faf
 8006d14:	08006faf 	.word	0x08006faf
 8006d18:	08006faf 	.word	0x08006faf
 8006d1c:	08006faf 	.word	0x08006faf
 8006d20:	08006faf 	.word	0x08006faf
 8006d24:	08006faf 	.word	0x08006faf
 8006d28:	08006faf 	.word	0x08006faf
 8006d2c:	08006d97 	.word	0x08006d97
 8006d30:	08006faf 	.word	0x08006faf
 8006d34:	08006faf 	.word	0x08006faf
 8006d38:	08006faf 	.word	0x08006faf
 8006d3c:	08006faf 	.word	0x08006faf
 8006d40:	08006faf 	.word	0x08006faf
 8006d44:	08006faf 	.word	0x08006faf
 8006d48:	08006faf 	.word	0x08006faf
 8006d4c:	08006d9d 	.word	0x08006d9d
 8006d50:	08006faf 	.word	0x08006faf
 8006d54:	08006faf 	.word	0x08006faf
 8006d58:	08006faf 	.word	0x08006faf
 8006d5c:	08006faf 	.word	0x08006faf
 8006d60:	08006faf 	.word	0x08006faf
 8006d64:	08006faf 	.word	0x08006faf
 8006d68:	08006faf 	.word	0x08006faf
 8006d6c:	08006da3 	.word	0x08006da3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d70:	4b94      	ldr	r3, [pc, #592]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d009      	beq.n	8006d90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d7c:	4b91      	ldr	r3, [pc, #580]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	08db      	lsrs	r3, r3, #3
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	4a90      	ldr	r2, [pc, #576]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d8e:	e111      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d90:	4b8d      	ldr	r3, [pc, #564]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d92:	61bb      	str	r3, [r7, #24]
      break;
 8006d94:	e10e      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d96:	4b8d      	ldr	r3, [pc, #564]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d98:	61bb      	str	r3, [r7, #24]
      break;
 8006d9a:	e10b      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d9c:	4b8c      	ldr	r3, [pc, #560]	@ (8006fd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d9e:	61bb      	str	r3, [r7, #24]
      break;
 8006da0:	e108      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006da2:	4b88      	ldr	r3, [pc, #544]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006dac:	4b85      	ldr	r3, [pc, #532]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006db6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006db8:	4b82      	ldr	r3, [pc, #520]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006dc2:	4b80      	ldr	r3, [pc, #512]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc6:	08db      	lsrs	r3, r3, #3
 8006dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80e1 	beq.w	8006fa8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	f000 8083 	beq.w	8006ef4 <HAL_RCC_GetSysClockFreq+0x204>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	f200 80a1 	bhi.w	8006f38 <HAL_RCC_GetSysClockFreq+0x248>
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_RCC_GetSysClockFreq+0x114>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d056      	beq.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e02:	e099      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e04:	4b6f      	ldr	r3, [pc, #444]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d02d      	beq.n	8006e6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e10:	4b6c      	ldr	r3, [pc, #432]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	08db      	lsrs	r3, r3, #3
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	4a6b      	ldr	r2, [pc, #428]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	ee07 3a90 	vmov	s15, r3
 8006e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b62      	ldr	r3, [pc, #392]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e4e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e6a:	e087      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006fd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7e:	4b51      	ldr	r3, [pc, #324]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e92:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eae:	e065      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec2:	4b40      	ldr	r3, [pc, #256]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ed6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ef2:	e043      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006fe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f06:	4b2f      	ldr	r3, [pc, #188]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f1a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f36:	e021      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f42:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f5e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f7c:	4b11      	ldr	r3, [pc, #68]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	0a5b      	lsrs	r3, r3, #9
 8006f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f86:	3301      	adds	r3, #1
 8006f88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa0:	ee17 3a90 	vmov	r3, s15
 8006fa4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006fa6:	e005      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61bb      	str	r3, [r7, #24]
      break;
 8006fac:	e002      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006fae:	4b07      	ldr	r3, [pc, #28]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fb0:	61bb      	str	r3, [r7, #24]
      break;
 8006fb2:	bf00      	nop
  }

  return sysclockfreq;
 8006fb4:	69bb      	ldr	r3, [r7, #24]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3724      	adds	r7, #36	@ 0x24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	58024400 	.word	0x58024400
 8006fc8:	03d09000 	.word	0x03d09000
 8006fcc:	003d0900 	.word	0x003d0900
 8006fd0:	00f42400 	.word	0x00f42400
 8006fd4:	46000000 	.word	0x46000000
 8006fd8:	4c742400 	.word	0x4c742400
 8006fdc:	4a742400 	.word	0x4a742400
 8006fe0:	4b742400 	.word	0x4b742400

08006fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fea:	f7ff fe81 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	490f      	ldr	r1, [pc, #60]	@ (8007038 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ffc:	5ccb      	ldrb	r3, [r1, r3]
 8006ffe:	f003 031f 	and.w	r3, r3, #31
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007008:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <HAL_RCC_GetHCLKFreq+0x50>)
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	4a09      	ldr	r2, [pc, #36]	@ (8007038 <HAL_RCC_GetHCLKFreq+0x54>)
 8007012:	5cd3      	ldrb	r3, [r2, r3]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	fa22 f303 	lsr.w	r3, r2, r3
 800701e:	4a07      	ldr	r2, [pc, #28]	@ (800703c <HAL_RCC_GetHCLKFreq+0x58>)
 8007020:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007022:	4a07      	ldr	r2, [pc, #28]	@ (8007040 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007028:	4b04      	ldr	r3, [pc, #16]	@ (800703c <HAL_RCC_GetHCLKFreq+0x58>)
 800702a:	681b      	ldr	r3, [r3, #0]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	58024400 	.word	0x58024400
 8007038:	0800fd00 	.word	0x0800fd00
 800703c:	24000008 	.word	0x24000008
 8007040:	24000004 	.word	0x24000004

08007044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007048:	f7ff ffcc 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 800704c:	4602      	mov	r2, r0
 800704e:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	091b      	lsrs	r3, r3, #4
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	4904      	ldr	r1, [pc, #16]	@ (800706c <HAL_RCC_GetPCLK1Freq+0x28>)
 800705a:	5ccb      	ldrb	r3, [r1, r3]
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007064:	4618      	mov	r0, r3
 8007066:	bd80      	pop	{r7, pc}
 8007068:	58024400 	.word	0x58024400
 800706c:	0800fd00 	.word	0x0800fd00

08007070 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007074:	b0ca      	sub	sp, #296	@ 0x128
 8007076:	af00      	add	r7, sp, #0
 8007078:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800707c:	2300      	movs	r3, #0
 800707e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007082:	2300      	movs	r3, #0
 8007084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007094:	2500      	movs	r5, #0
 8007096:	ea54 0305 	orrs.w	r3, r4, r5
 800709a:	d049      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070a6:	d02f      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80070a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070ac:	d828      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070b2:	d01a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070b8:	d822      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070c2:	d007      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070c4:	e01c      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c6:	4bb8      	ldr	r3, [pc, #736]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	4ab7      	ldr	r2, [pc, #732]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070d2:	e01a      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d8:	3308      	adds	r3, #8
 80070da:	2102      	movs	r1, #2
 80070dc:	4618      	mov	r0, r3
 80070de:	f002 fb61 	bl	80097a4 <RCCEx_PLL2_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070e8:	e00f      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ee:	3328      	adds	r3, #40	@ 0x28
 80070f0:	2102      	movs	r1, #2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f002 fc08 	bl	8009908 <RCCEx_PLL3_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070fe:	e004      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007106:	e000      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800710a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007112:	4ba5      	ldr	r3, [pc, #660]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007116:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800711a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007120:	4aa1      	ldr	r2, [pc, #644]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007122:	430b      	orrs	r3, r1
 8007124:	6513      	str	r3, [r2, #80]	@ 0x50
 8007126:	e003      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800713c:	f04f 0900 	mov.w	r9, #0
 8007140:	ea58 0309 	orrs.w	r3, r8, r9
 8007144:	d047      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714c:	2b04      	cmp	r3, #4
 800714e:	d82a      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007150:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	0800716d 	.word	0x0800716d
 800715c:	0800717b 	.word	0x0800717b
 8007160:	08007191 	.word	0x08007191
 8007164:	080071af 	.word	0x080071af
 8007168:	080071af 	.word	0x080071af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800716c:	4b8e      	ldr	r3, [pc, #568]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	4a8d      	ldr	r2, [pc, #564]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007178:	e01a      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	3308      	adds	r3, #8
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f002 fb0e 	bl	80097a4 <RCCEx_PLL2_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800718e:	e00f      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007194:	3328      	adds	r3, #40	@ 0x28
 8007196:	2100      	movs	r1, #0
 8007198:	4618      	mov	r0, r3
 800719a:	f002 fbb5 	bl	8009908 <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071a4:	e004      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ac:	e000      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80071ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071b8:	4b7b      	ldr	r3, [pc, #492]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071bc:	f023 0107 	bic.w	r1, r3, #7
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c6:	4a78      	ldr	r2, [pc, #480]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071c8:	430b      	orrs	r3, r1
 80071ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80071cc:	e003      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80071e2:	f04f 0b00 	mov.w	fp, #0
 80071e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80071ea:	d04c      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071f6:	d030      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80071f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071fc:	d829      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80071fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007200:	d02d      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007202:	2bc0      	cmp	r3, #192	@ 0xc0
 8007204:	d825      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007206:	2b80      	cmp	r3, #128	@ 0x80
 8007208:	d018      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800720a:	2b80      	cmp	r3, #128	@ 0x80
 800720c:	d821      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007212:	2b40      	cmp	r3, #64	@ 0x40
 8007214:	d007      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007216:	e01c      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007218:	4b63      	ldr	r3, [pc, #396]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	4a62      	ldr	r2, [pc, #392]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800721e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007224:	e01c      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722a:	3308      	adds	r3, #8
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f002 fab8 	bl	80097a4 <RCCEx_PLL2_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800723a:	e011      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800723c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007240:	3328      	adds	r3, #40	@ 0x28
 8007242:	2100      	movs	r1, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f002 fb5f 	bl	8009908 <RCCEx_PLL3_Config>
 800724a:	4603      	mov	r3, r0
 800724c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007250:	e006      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007258:	e002      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800725a:	bf00      	nop
 800725c:	e000      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800725e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10a      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007268:	4b4f      	ldr	r3, [pc, #316]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800726a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800726c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007276:	4a4c      	ldr	r2, [pc, #304]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007278:	430b      	orrs	r3, r1
 800727a:	6513      	str	r3, [r2, #80]	@ 0x50
 800727c:	e003      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007292:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007296:	2300      	movs	r3, #0
 8007298:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800729c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80072a0:	460b      	mov	r3, r1
 80072a2:	4313      	orrs	r3, r2
 80072a4:	d053      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80072ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072b2:	d035      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80072b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072b8:	d82e      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80072be:	d031      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80072c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80072c4:	d828      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072ca:	d01a      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80072cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072d0:	d822      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80072d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072da:	d007      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80072dc:	e01c      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072de:	4b32      	ldr	r3, [pc, #200]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	4a31      	ldr	r2, [pc, #196]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072ea:	e01c      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	3308      	adds	r3, #8
 80072f2:	2100      	movs	r1, #0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f002 fa55 	bl	80097a4 <RCCEx_PLL2_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007300:	e011      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	3328      	adds	r3, #40	@ 0x28
 8007308:	2100      	movs	r1, #0
 800730a:	4618      	mov	r0, r3
 800730c:	f002 fafc 	bl	8009908 <RCCEx_PLL3_Config>
 8007310:	4603      	mov	r3, r0
 8007312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007316:	e006      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800731e:	e002      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007320:	bf00      	nop
 8007322:	e000      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800732e:	4b1e      	ldr	r3, [pc, #120]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007332:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800733e:	4a1a      	ldr	r2, [pc, #104]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007340:	430b      	orrs	r3, r1
 8007342:	6593      	str	r3, [r2, #88]	@ 0x58
 8007344:	e003      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800734a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800735a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800735e:	2300      	movs	r3, #0
 8007360:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007364:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007368:	460b      	mov	r3, r1
 800736a:	4313      	orrs	r3, r2
 800736c:	d056      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007376:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800737a:	d038      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800737c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007380:	d831      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007382:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007386:	d034      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007388:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800738c:	d82b      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800738e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007392:	d01d      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007398:	d825      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d006      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800739e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073a2:	d00a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80073a4:	e01f      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073a6:	bf00      	nop
 80073a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ac:	4ba2      	ldr	r3, [pc, #648]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b0:	4aa1      	ldr	r2, [pc, #644]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073b8:	e01c      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	3308      	adds	r3, #8
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f002 f9ee 	bl	80097a4 <RCCEx_PLL2_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073ce:	e011      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d4:	3328      	adds	r3, #40	@ 0x28
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f002 fa95 	bl	8009908 <RCCEx_PLL3_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073e4:	e006      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073ec:	e002      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80073ee:	bf00      	nop
 80073f0:	e000      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80073f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10b      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073fc:	4b8e      	ldr	r3, [pc, #568]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007400:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800740c:	4a8a      	ldr	r2, [pc, #552]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800740e:	430b      	orrs	r3, r1
 8007410:	6593      	str	r3, [r2, #88]	@ 0x58
 8007412:	e003      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800742c:	2300      	movs	r3, #0
 800742e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007432:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007436:	460b      	mov	r3, r1
 8007438:	4313      	orrs	r3, r2
 800743a:	d03a      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800743c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007442:	2b30      	cmp	r3, #48	@ 0x30
 8007444:	d01f      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007446:	2b30      	cmp	r3, #48	@ 0x30
 8007448:	d819      	bhi.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800744a:	2b20      	cmp	r3, #32
 800744c:	d00c      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800744e:	2b20      	cmp	r3, #32
 8007450:	d815      	bhi.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d019      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007456:	2b10      	cmp	r3, #16
 8007458:	d111      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745a:	4b77      	ldr	r3, [pc, #476]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	4a76      	ldr	r2, [pc, #472]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007466:	e011      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746c:	3308      	adds	r3, #8
 800746e:	2102      	movs	r1, #2
 8007470:	4618      	mov	r0, r3
 8007472:	f002 f997 	bl	80097a4 <RCCEx_PLL2_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800747c:	e006      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007484:	e002      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007486:	bf00      	nop
 8007488:	e000      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800748a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007494:	4b68      	ldr	r3, [pc, #416]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007498:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800749c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074a2:	4a65      	ldr	r2, [pc, #404]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074a4:	430b      	orrs	r3, r1
 80074a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074a8:	e003      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80074be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80074c2:	2300      	movs	r3, #0
 80074c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4313      	orrs	r3, r2
 80074d0:	d051      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074dc:	d035      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80074de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074e2:	d82e      	bhi.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074e8:	d031      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80074ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074ee:	d828      	bhi.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f4:	d01a      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80074f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074fa:	d822      	bhi.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007504:	d007      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007506:	e01c      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007508:	4b4b      	ldr	r3, [pc, #300]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750c:	4a4a      	ldr	r2, [pc, #296]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800750e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007514:	e01c      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751a:	3308      	adds	r3, #8
 800751c:	2100      	movs	r1, #0
 800751e:	4618      	mov	r0, r3
 8007520:	f002 f940 	bl	80097a4 <RCCEx_PLL2_Config>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800752a:	e011      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800752c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007530:	3328      	adds	r3, #40	@ 0x28
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f002 f9e7 	bl	8009908 <RCCEx_PLL3_Config>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007540:	e006      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007548:	e002      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800754a:	bf00      	nop
 800754c:	e000      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800754e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007558:	4b37      	ldr	r3, [pc, #220]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800755a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800755c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007566:	4a34      	ldr	r2, [pc, #208]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007568:	430b      	orrs	r3, r1
 800756a:	6513      	str	r3, [r2, #80]	@ 0x50
 800756c:	e003      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007582:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007586:	2300      	movs	r3, #0
 8007588:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800758c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007590:	460b      	mov	r3, r1
 8007592:	4313      	orrs	r3, r2
 8007594:	d056      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800759c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075a0:	d033      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80075a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075a6:	d82c      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075ac:	d02f      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80075ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075b2:	d826      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075b8:	d02b      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80075ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075be:	d820      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075c4:	d012      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80075c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ca:	d81a      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d022      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80075d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075d4:	d115      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075da:	3308      	adds	r3, #8
 80075dc:	2101      	movs	r1, #1
 80075de:	4618      	mov	r0, r3
 80075e0:	f002 f8e0 	bl	80097a4 <RCCEx_PLL2_Config>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075ea:	e015      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f0:	3328      	adds	r3, #40	@ 0x28
 80075f2:	2101      	movs	r1, #1
 80075f4:	4618      	mov	r0, r3
 80075f6:	f002 f987 	bl	8009908 <RCCEx_PLL3_Config>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007600:	e00a      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007608:	e006      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800760a:	bf00      	nop
 800760c:	e004      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800760e:	bf00      	nop
 8007610:	e002      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007612:	bf00      	nop
 8007614:	e000      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10d      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007624:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800762e:	4a02      	ldr	r2, [pc, #8]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007630:	430b      	orrs	r3, r1
 8007632:	6513      	str	r3, [r2, #80]	@ 0x50
 8007634:	e006      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007636:	bf00      	nop
 8007638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007654:	2300      	movs	r3, #0
 8007656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800765a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800765e:	460b      	mov	r3, r1
 8007660:	4313      	orrs	r3, r2
 8007662:	d055      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800766c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007670:	d033      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007676:	d82c      	bhi.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800767c:	d02f      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007682:	d826      	bhi.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007684:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007688:	d02b      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800768a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800768e:	d820      	bhi.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007694:	d012      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800769a:	d81a      	bhi.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d022      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80076a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076a4:	d115      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076aa:	3308      	adds	r3, #8
 80076ac:	2101      	movs	r1, #1
 80076ae:	4618      	mov	r0, r3
 80076b0:	f002 f878 	bl	80097a4 <RCCEx_PLL2_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076ba:	e015      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c0:	3328      	adds	r3, #40	@ 0x28
 80076c2:	2101      	movs	r1, #1
 80076c4:	4618      	mov	r0, r3
 80076c6:	f002 f91f 	bl	8009908 <RCCEx_PLL3_Config>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076d0:	e00a      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076d8:	e006      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076da:	bf00      	nop
 80076dc:	e004      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076de:	bf00      	nop
 80076e0:	e002      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076e2:	bf00      	nop
 80076e4:	e000      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80076f0:	4ba3      	ldr	r3, [pc, #652]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80076f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007700:	4a9f      	ldr	r2, [pc, #636]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007702:	430b      	orrs	r3, r1
 8007704:	6593      	str	r3, [r2, #88]	@ 0x58
 8007706:	e003      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800770c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800771c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007720:	2300      	movs	r3, #0
 8007722:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	d037      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800773a:	d00e      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800773c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007740:	d816      	bhi.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d018      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800774a:	d111      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800774c:	4b8c      	ldr	r3, [pc, #560]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	4a8b      	ldr	r2, [pc, #556]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007758:	e00f      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775e:	3308      	adds	r3, #8
 8007760:	2101      	movs	r1, #1
 8007762:	4618      	mov	r0, r3
 8007764:	f002 f81e 	bl	80097a4 <RCCEx_PLL2_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800776e:	e004      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007776:	e000      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800777a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007782:	4b7f      	ldr	r3, [pc, #508]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007786:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007790:	4a7b      	ldr	r2, [pc, #492]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007792:	430b      	orrs	r3, r1
 8007794:	6513      	str	r3, [r2, #80]	@ 0x50
 8007796:	e003      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800779c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80077ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077b0:	2300      	movs	r3, #0
 80077b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4313      	orrs	r3, r2
 80077be:	d039      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d81c      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	0800780d 	.word	0x0800780d
 80077d4:	080077e1 	.word	0x080077e1
 80077d8:	080077ef 	.word	0x080077ef
 80077dc:	0800780d 	.word	0x0800780d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e0:	4b67      	ldr	r3, [pc, #412]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e4:	4a66      	ldr	r2, [pc, #408]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80077ec:	e00f      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	3308      	adds	r3, #8
 80077f4:	2102      	movs	r1, #2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f001 ffd4 	bl	80097a4 <RCCEx_PLL2_Config>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007802:	e004      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800780a:	e000      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800780c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800780e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007816:	4b5a      	ldr	r3, [pc, #360]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800781a:	f023 0103 	bic.w	r1, r3, #3
 800781e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007824:	4a56      	ldr	r2, [pc, #344]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007826:	430b      	orrs	r3, r1
 8007828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800782a:	e003      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007840:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007844:	2300      	movs	r3, #0
 8007846:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800784a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800784e:	460b      	mov	r3, r1
 8007850:	4313      	orrs	r3, r2
 8007852:	f000 809f 	beq.w	8007994 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007856:	4b4b      	ldr	r3, [pc, #300]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a4a      	ldr	r2, [pc, #296]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800785c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007862:	f7fc f8bb 	bl	80039dc <HAL_GetTick>
 8007866:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800786a:	e00b      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800786c:	f7fc f8b6 	bl	80039dc <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b64      	cmp	r3, #100	@ 0x64
 800787a:	d903      	bls.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007882:	e005      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007884:	4b3f      	ldr	r3, [pc, #252]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0ed      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007894:	2b00      	cmp	r3, #0
 8007896:	d179      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007898:	4b39      	ldr	r3, [pc, #228]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800789a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078a4:	4053      	eors	r3, r2
 80078a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d015      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078ae:	4b34      	ldr	r3, [pc, #208]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078ba:	4b31      	ldr	r3, [pc, #196]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078be:	4a30      	ldr	r2, [pc, #192]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078c6:	4b2e      	ldr	r3, [pc, #184]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80078d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078e6:	d118      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e8:	f7fc f878 	bl	80039dc <HAL_GetTick>
 80078ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078f0:	e00d      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f2:	f7fc f873 	bl	80039dc <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80078fc:	1ad2      	subs	r2, r2, r3
 80078fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007902:	429a      	cmp	r2, r3
 8007904:	d903      	bls.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800790c:	e005      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800790e:	4b1c      	ldr	r3, [pc, #112]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0eb      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800791a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791e:	2b00      	cmp	r3, #0
 8007920:	d129      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800792a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800792e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007932:	d10e      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007934:	4b12      	ldr	r3, [pc, #72]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007944:	091a      	lsrs	r2, r3, #4
 8007946:	4b10      	ldr	r3, [pc, #64]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007948:	4013      	ands	r3, r2
 800794a:	4a0d      	ldr	r2, [pc, #52]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800794c:	430b      	orrs	r3, r1
 800794e:	6113      	str	r3, [r2, #16]
 8007950:	e005      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007952:	4b0b      	ldr	r3, [pc, #44]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	4a0a      	ldr	r2, [pc, #40]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007958:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800795c:	6113      	str	r3, [r2, #16]
 800795e:	4b08      	ldr	r3, [pc, #32]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007960:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800796a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800796e:	4a04      	ldr	r2, [pc, #16]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007970:	430b      	orrs	r3, r1
 8007972:	6713      	str	r3, [r2, #112]	@ 0x70
 8007974:	e00e      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800797a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800797e:	e009      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007980:	58024400 	.word	0x58024400
 8007984:	58024800 	.word	0x58024800
 8007988:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f002 0301 	and.w	r3, r2, #1
 80079a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079a4:	2300      	movs	r3, #0
 80079a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f000 8089 	beq.w	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079bc:	2b28      	cmp	r3, #40	@ 0x28
 80079be:	d86b      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80079c0:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	08007aa1 	.word	0x08007aa1
 80079cc:	08007a99 	.word	0x08007a99
 80079d0:	08007a99 	.word	0x08007a99
 80079d4:	08007a99 	.word	0x08007a99
 80079d8:	08007a99 	.word	0x08007a99
 80079dc:	08007a99 	.word	0x08007a99
 80079e0:	08007a99 	.word	0x08007a99
 80079e4:	08007a99 	.word	0x08007a99
 80079e8:	08007a6d 	.word	0x08007a6d
 80079ec:	08007a99 	.word	0x08007a99
 80079f0:	08007a99 	.word	0x08007a99
 80079f4:	08007a99 	.word	0x08007a99
 80079f8:	08007a99 	.word	0x08007a99
 80079fc:	08007a99 	.word	0x08007a99
 8007a00:	08007a99 	.word	0x08007a99
 8007a04:	08007a99 	.word	0x08007a99
 8007a08:	08007a83 	.word	0x08007a83
 8007a0c:	08007a99 	.word	0x08007a99
 8007a10:	08007a99 	.word	0x08007a99
 8007a14:	08007a99 	.word	0x08007a99
 8007a18:	08007a99 	.word	0x08007a99
 8007a1c:	08007a99 	.word	0x08007a99
 8007a20:	08007a99 	.word	0x08007a99
 8007a24:	08007a99 	.word	0x08007a99
 8007a28:	08007aa1 	.word	0x08007aa1
 8007a2c:	08007a99 	.word	0x08007a99
 8007a30:	08007a99 	.word	0x08007a99
 8007a34:	08007a99 	.word	0x08007a99
 8007a38:	08007a99 	.word	0x08007a99
 8007a3c:	08007a99 	.word	0x08007a99
 8007a40:	08007a99 	.word	0x08007a99
 8007a44:	08007a99 	.word	0x08007a99
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007a99 	.word	0x08007a99
 8007a50:	08007a99 	.word	0x08007a99
 8007a54:	08007a99 	.word	0x08007a99
 8007a58:	08007a99 	.word	0x08007a99
 8007a5c:	08007a99 	.word	0x08007a99
 8007a60:	08007a99 	.word	0x08007a99
 8007a64:	08007a99 	.word	0x08007a99
 8007a68:	08007aa1 	.word	0x08007aa1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a70:	3308      	adds	r3, #8
 8007a72:	2101      	movs	r1, #1
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 fe95 	bl	80097a4 <RCCEx_PLL2_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a80:	e00f      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	3328      	adds	r3, #40	@ 0x28
 8007a88:	2101      	movs	r1, #1
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 ff3c 	bl	8009908 <RCCEx_PLL3_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a96:	e004      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a9e:	e000      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007aaa:	4bbf      	ldr	r3, [pc, #764]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ab8:	4abb      	ldr	r2, [pc, #748]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aba:	430b      	orrs	r3, r1
 8007abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8007abe:	e003      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	f002 0302 	and.w	r3, r2, #2
 8007ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ade:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	d041      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007aee:	2b05      	cmp	r3, #5
 8007af0:	d824      	bhi.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b45 	.word	0x08007b45
 8007afc:	08007b11 	.word	0x08007b11
 8007b00:	08007b27 	.word	0x08007b27
 8007b04:	08007b45 	.word	0x08007b45
 8007b08:	08007b45 	.word	0x08007b45
 8007b0c:	08007b45 	.word	0x08007b45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b14:	3308      	adds	r3, #8
 8007b16:	2101      	movs	r1, #1
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f001 fe43 	bl	80097a4 <RCCEx_PLL2_Config>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b24:	e00f      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b2a:	3328      	adds	r3, #40	@ 0x28
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 feea 	bl	8009908 <RCCEx_PLL3_Config>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b3a:	e004      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b42:	e000      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b4e:	4b96      	ldr	r3, [pc, #600]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b52:	f023 0107 	bic.w	r1, r3, #7
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b5c:	4a92      	ldr	r2, [pc, #584]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b5e:	430b      	orrs	r3, r1
 8007b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b62:	e003      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f002 0304 	and.w	r3, r2, #4
 8007b78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	d044      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b94:	2b05      	cmp	r3, #5
 8007b96:	d825      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007b98:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bed 	.word	0x08007bed
 8007ba4:	08007bb9 	.word	0x08007bb9
 8007ba8:	08007bcf 	.word	0x08007bcf
 8007bac:	08007bed 	.word	0x08007bed
 8007bb0:	08007bed 	.word	0x08007bed
 8007bb4:	08007bed 	.word	0x08007bed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fdef 	bl	80097a4 <RCCEx_PLL2_Config>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bcc:	e00f      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	3328      	adds	r3, #40	@ 0x28
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 fe96 	bl	8009908 <RCCEx_PLL3_Config>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007be2:	e004      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10b      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfa:	f023 0107 	bic.w	r1, r3, #7
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c06:	4a68      	ldr	r2, [pc, #416]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c0c:	e003      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f002 0320 	and.w	r3, r2, #32
 8007c22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c26:	2300      	movs	r3, #0
 8007c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c30:	460b      	mov	r3, r1
 8007c32:	4313      	orrs	r3, r2
 8007c34:	d055      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c42:	d033      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c48:	d82c      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c4e:	d02f      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c54:	d826      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c5a:	d02b      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007c5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c60:	d820      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c66:	d012      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c6c:	d81a      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d022      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007c72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c76:	d115      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f001 fd8f 	bl	80097a4 <RCCEx_PLL2_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c8c:	e015      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c92:	3328      	adds	r3, #40	@ 0x28
 8007c94:	2102      	movs	r1, #2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f001 fe36 	bl	8009908 <RCCEx_PLL3_Config>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ca2:	e00a      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007caa:	e006      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cac:	bf00      	nop
 8007cae:	e004      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cb0:	bf00      	nop
 8007cb2:	e002      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cb4:	bf00      	nop
 8007cb6:	e000      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10b      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cc2:	4b39      	ldr	r3, [pc, #228]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd2:	4a35      	ldr	r2, [pc, #212]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cd8:	e003      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007cf8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	d058      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d0e:	d033      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007d10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d14:	d82c      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d1a:	d02f      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d20:	d826      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d26:	d02b      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007d28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d2c:	d820      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d32:	d012      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d38:	d81a      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d022      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d42:	d115      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d48:	3308      	adds	r3, #8
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 fd29 	bl	80097a4 <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d58:	e015      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	3328      	adds	r3, #40	@ 0x28
 8007d60:	2102      	movs	r1, #2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 fdd0 	bl	8009908 <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d6e:	e00a      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d76:	e006      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d78:	bf00      	nop
 8007d7a:	e004      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d7c:	bf00      	nop
 8007d7e:	e002      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d80:	bf00      	nop
 8007d82:	e000      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10e      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d8e:	4b06      	ldr	r3, [pc, #24]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d9e:	4a02      	ldr	r2, [pc, #8]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007da0:	430b      	orrs	r3, r1
 8007da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007da4:	e006      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007da6:	bf00      	nop
 8007da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	d055      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ddc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007de0:	d033      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007de2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007de6:	d82c      	bhi.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dec:	d02f      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007df2:	d826      	bhi.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007df4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007df8:	d02b      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007dfa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007dfe:	d820      	bhi.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e04:	d012      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007e06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e0a:	d81a      	bhi.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d022      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e14:	d115      	bne.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f001 fcc0 	bl	80097a4 <RCCEx_PLL2_Config>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e2a:	e015      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e30:	3328      	adds	r3, #40	@ 0x28
 8007e32:	2102      	movs	r1, #2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 fd67 	bl	8009908 <RCCEx_PLL3_Config>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e40:	e00a      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e48:	e006      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e4a:	bf00      	nop
 8007e4c:	e004      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e4e:	bf00      	nop
 8007e50:	e002      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e52:	bf00      	nop
 8007e54:	e000      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10b      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e60:	4ba1      	ldr	r3, [pc, #644]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e70:	4a9d      	ldr	r2, [pc, #628]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e72:	430b      	orrs	r3, r1
 8007e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e76:	e003      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f002 0308 	and.w	r3, r2, #8
 8007e8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e90:	2300      	movs	r3, #0
 8007e92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	d01e      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eac:	d10c      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb2:	3328      	adds	r3, #40	@ 0x28
 8007eb4:	2102      	movs	r1, #2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 fd26 	bl	8009908 <RCCEx_PLL3_Config>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ec8:	4b87      	ldr	r3, [pc, #540]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ecc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ed8:	4a83      	ldr	r2, [pc, #524]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eda:	430b      	orrs	r3, r1
 8007edc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f002 0310 	and.w	r3, r2, #16
 8007eea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ef4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4313      	orrs	r3, r2
 8007efc:	d01e      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f0a:	d10c      	bne.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f10:	3328      	adds	r3, #40	@ 0x28
 8007f12:	2102      	movs	r1, #2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 fcf7 	bl	8009908 <RCCEx_PLL3_Config>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f26:	4b70      	ldr	r3, [pc, #448]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f36:	4a6c      	ldr	r2, [pc, #432]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007f48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007f56:	460b      	mov	r3, r1
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	d03e      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f68:	d022      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f6e:	d81b      	bhi.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f78:	d00b      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007f7a:	e015      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f80:	3308      	adds	r3, #8
 8007f82:	2100      	movs	r1, #0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f001 fc0d 	bl	80097a4 <RCCEx_PLL2_Config>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f90:	e00f      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f96:	3328      	adds	r3, #40	@ 0x28
 8007f98:	2102      	movs	r1, #2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 fcb4 	bl	8009908 <RCCEx_PLL3_Config>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fa6:	e004      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fae:	e000      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10b      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fba:	4b4b      	ldr	r3, [pc, #300]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fca:	4a47      	ldr	r2, [pc, #284]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fd0:	e003      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fe8:	2300      	movs	r3, #0
 8007fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	d03b      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ffe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008002:	d01f      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008004:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008008:	d818      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800800a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800800e:	d003      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008010:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008014:	d007      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008016:	e011      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008018:	4b33      	ldr	r3, [pc, #204]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801c:	4a32      	ldr	r2, [pc, #200]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800801e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008024:	e00f      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802a:	3328      	adds	r3, #40	@ 0x28
 800802c:	2101      	movs	r1, #1
 800802e:	4618      	mov	r0, r3
 8008030:	f001 fc6a 	bl	8009908 <RCCEx_PLL3_Config>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800803a:	e004      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008042:	e000      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10b      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800804e:	4b26      	ldr	r3, [pc, #152]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008052:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800805e:	4a22      	ldr	r2, [pc, #136]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008060:	430b      	orrs	r3, r1
 8008062:	6553      	str	r3, [r2, #84]	@ 0x54
 8008064:	e003      	b.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800807a:	673b      	str	r3, [r7, #112]	@ 0x70
 800807c:	2300      	movs	r3, #0
 800807e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008080:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008084:	460b      	mov	r3, r1
 8008086:	4313      	orrs	r3, r2
 8008088:	d034      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008098:	d007      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800809a:	e011      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800809c:	4b12      	ldr	r3, [pc, #72]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800809e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a0:	4a11      	ldr	r2, [pc, #68]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080a8:	e00e      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ae:	3308      	adds	r3, #8
 80080b0:	2102      	movs	r1, #2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 fb76 	bl	80097a4 <RCCEx_PLL2_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080be:	e003      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10d      	bne.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080d0:	4b05      	ldr	r3, [pc, #20]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080de:	4a02      	ldr	r2, [pc, #8]	@ (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080e0:	430b      	orrs	r3, r1
 80080e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080e4:	e006      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80080e6:	bf00      	nop
 80080e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008102:	2300      	movs	r3, #0
 8008104:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008106:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800810a:	460b      	mov	r3, r1
 800810c:	4313      	orrs	r3, r2
 800810e:	d00c      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008114:	3328      	adds	r3, #40	@ 0x28
 8008116:	2102      	movs	r1, #2
 8008118:	4618      	mov	r0, r3
 800811a:	f001 fbf5 	bl	8009908 <RCCEx_PLL3_Config>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800812a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008136:	663b      	str	r3, [r7, #96]	@ 0x60
 8008138:	2300      	movs	r3, #0
 800813a:	667b      	str	r3, [r7, #100]	@ 0x64
 800813c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008140:	460b      	mov	r3, r1
 8008142:	4313      	orrs	r3, r2
 8008144:	d038      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800814e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008152:	d018      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008158:	d811      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800815a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800815e:	d014      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008164:	d80b      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d011      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800816a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800816e:	d106      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008170:	4bc3      	ldr	r3, [pc, #780]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	4ac2      	ldr	r2, [pc, #776]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800817a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800817c:	e008      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008184:	e004      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008186:	bf00      	nop
 8008188:	e002      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800818a:	bf00      	nop
 800818c:	e000      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800818e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10b      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008198:	4bb9      	ldr	r3, [pc, #740]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800819a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800819c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081a8:	4ab5      	ldr	r2, [pc, #724]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081aa:	430b      	orrs	r3, r1
 80081ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80081ae:	e003      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80081c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081c6:	2300      	movs	r3, #0
 80081c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80081ce:	460b      	mov	r3, r1
 80081d0:	4313      	orrs	r3, r2
 80081d2:	d009      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081d4:	4baa      	ldr	r3, [pc, #680]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80081dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081e2:	4aa7      	ldr	r2, [pc, #668]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081e4:	430b      	orrs	r3, r1
 80081e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80081e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80081f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80081f6:	2300      	movs	r3, #0
 80081f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80081fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80081fe:	460b      	mov	r3, r1
 8008200:	4313      	orrs	r3, r2
 8008202:	d00a      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008204:	4b9e      	ldr	r3, [pc, #632]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800820c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008210:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008214:	4a9a      	ldr	r2, [pc, #616]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008216:	430b      	orrs	r3, r1
 8008218:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008226:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008228:	2300      	movs	r3, #0
 800822a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800822c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008230:	460b      	mov	r3, r1
 8008232:	4313      	orrs	r3, r2
 8008234:	d009      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008236:	4b92      	ldr	r3, [pc, #584]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800823a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008244:	4a8e      	ldr	r2, [pc, #568]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008246:	430b      	orrs	r3, r1
 8008248:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008256:	643b      	str	r3, [r7, #64]	@ 0x40
 8008258:	2300      	movs	r3, #0
 800825a:	647b      	str	r3, [r7, #68]	@ 0x44
 800825c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008260:	460b      	mov	r3, r1
 8008262:	4313      	orrs	r3, r2
 8008264:	d00e      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008266:	4b86      	ldr	r3, [pc, #536]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	4a85      	ldr	r2, [pc, #532]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800826c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008270:	6113      	str	r3, [r2, #16]
 8008272:	4b83      	ldr	r3, [pc, #524]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008274:	6919      	ldr	r1, [r3, #16]
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800827e:	4a80      	ldr	r2, [pc, #512]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008280:	430b      	orrs	r3, r1
 8008282:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008290:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008292:	2300      	movs	r3, #0
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008296:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800829a:	460b      	mov	r3, r1
 800829c:	4313      	orrs	r3, r2
 800829e:	d009      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082a0:	4b77      	ldr	r3, [pc, #476]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80082a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ae:	4a74      	ldr	r2, [pc, #464]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082b0:	430b      	orrs	r3, r1
 80082b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80082c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80082c2:	2300      	movs	r3, #0
 80082c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80082ca:	460b      	mov	r3, r1
 80082cc:	4313      	orrs	r3, r2
 80082ce:	d00a      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082d0:	4b6b      	ldr	r3, [pc, #428]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082d4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80082d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082e0:	4a67      	ldr	r2, [pc, #412]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082e2:	430b      	orrs	r3, r1
 80082e4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	2100      	movs	r1, #0
 80082f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80082fc:	460b      	mov	r3, r1
 80082fe:	4313      	orrs	r3, r2
 8008300:	d011      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008306:	3308      	adds	r3, #8
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f001 fa4a 	bl	80097a4 <RCCEx_PLL2_Config>
 8008310:	4603      	mov	r3, r0
 8008312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	2100      	movs	r1, #0
 8008330:	6239      	str	r1, [r7, #32]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
 8008338:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800833c:	460b      	mov	r3, r1
 800833e:	4313      	orrs	r3, r2
 8008340:	d011      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008346:	3308      	adds	r3, #8
 8008348:	2101      	movs	r1, #1
 800834a:	4618      	mov	r0, r3
 800834c:	f001 fa2a 	bl	80097a4 <RCCEx_PLL2_Config>
 8008350:	4603      	mov	r3, r0
 8008352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	2100      	movs	r1, #0
 8008370:	61b9      	str	r1, [r7, #24]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	61fb      	str	r3, [r7, #28]
 8008378:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800837c:	460b      	mov	r3, r1
 800837e:	4313      	orrs	r3, r2
 8008380:	d011      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008386:	3308      	adds	r3, #8
 8008388:	2102      	movs	r1, #2
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fa0a 	bl	80097a4 <RCCEx_PLL2_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80083a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	2100      	movs	r1, #0
 80083b0:	6139      	str	r1, [r7, #16]
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80083bc:	460b      	mov	r3, r1
 80083be:	4313      	orrs	r3, r2
 80083c0:	d011      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c6:	3328      	adds	r3, #40	@ 0x28
 80083c8:	2100      	movs	r1, #0
 80083ca:	4618      	mov	r0, r3
 80083cc:	f001 fa9c 	bl	8009908 <RCCEx_PLL3_Config>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80083d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80083e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	2100      	movs	r1, #0
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80083fc:	460b      	mov	r3, r1
 80083fe:	4313      	orrs	r3, r2
 8008400:	d011      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008406:	3328      	adds	r3, #40	@ 0x28
 8008408:	2101      	movs	r1, #1
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fa7c 	bl	8009908 <RCCEx_PLL3_Config>
 8008410:	4603      	mov	r3, r0
 8008412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	2100      	movs	r1, #0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	607b      	str	r3, [r7, #4]
 8008438:	e9d7 1200 	ldrd	r1, r2, [r7]
 800843c:	460b      	mov	r3, r1
 800843e:	4313      	orrs	r3, r2
 8008440:	d011      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008446:	3328      	adds	r3, #40	@ 0x28
 8008448:	2102      	movs	r1, #2
 800844a:	4618      	mov	r0, r3
 800844c:	f001 fa5c 	bl	8009908 <RCCEx_PLL3_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008466:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e000      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
}
 8008474:	4618      	mov	r0, r3
 8008476:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800847a:	46bd      	mov	sp, r7
 800847c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008480:	58024400 	.word	0x58024400

08008484 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b090      	sub	sp, #64	@ 0x40
 8008488:	af00      	add	r7, sp, #0
 800848a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800848e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008492:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008496:	430b      	orrs	r3, r1
 8008498:	f040 8094 	bne.w	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800849c:	4b9e      	ldr	r3, [pc, #632]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800849e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	f200 8087 	bhi.w	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80084ae:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084c9 	.word	0x080084c9
 80084b8:	080084f1 	.word	0x080084f1
 80084bc:	08008519 	.word	0x08008519
 80084c0:	080085b5 	.word	0x080085b5
 80084c4:	08008541 	.word	0x08008541
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084c8:	4b93      	ldr	r3, [pc, #588]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084d4:	d108      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 f810 	bl	8009500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084e4:	f000 bd45 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084ec:	f000 bd41 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084f0:	4b89      	ldr	r3, [pc, #548]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084fc:	d108      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084fe:	f107 0318 	add.w	r3, r7, #24
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fd54 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800850c:	f000 bd31 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008514:	f000 bd2d 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008518:	4b7f      	ldr	r3, [pc, #508]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008524:	d108      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008526:	f107 030c 	add.w	r3, r7, #12
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fe94 	bl	8009258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008534:	f000 bd1d 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853c:	f000 bd19 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008540:	4b75      	ldr	r3, [pc, #468]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008544:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008548:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800854a:	4b73      	ldr	r3, [pc, #460]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0304 	and.w	r3, r3, #4
 8008552:	2b04      	cmp	r3, #4
 8008554:	d10c      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008558:	2b00      	cmp	r3, #0
 800855a:	d109      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800855c:	4b6e      	ldr	r3, [pc, #440]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	08db      	lsrs	r3, r3, #3
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	4a6d      	ldr	r2, [pc, #436]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008568:	fa22 f303 	lsr.w	r3, r2, r3
 800856c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800856e:	e01f      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008570:	4b69      	ldr	r3, [pc, #420]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800857c:	d106      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800857e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008584:	d102      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008586:	4b66      	ldr	r3, [pc, #408]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008588:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800858a:	e011      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800858c:	4b62      	ldr	r3, [pc, #392]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008598:	d106      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800859a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a0:	d102      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085a2:	4b60      	ldr	r3, [pc, #384]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a6:	e003      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085ac:	f000 bce1 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085b0:	f000 bcdf 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085b4:	4b5c      	ldr	r3, [pc, #368]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b8:	f000 bcdb 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c0:	f000 bcd7 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80085c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80085cc:	430b      	orrs	r3, r1
 80085ce:	f040 80ad 	bne.w	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80085d2:	4b51      	ldr	r3, [pc, #324]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80085da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e2:	d056      	beq.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80085e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ea:	f200 8090 	bhi.w	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80085f2:	f000 8088 	beq.w	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	2bc0      	cmp	r3, #192	@ 0xc0
 80085fa:	f200 8088 	bhi.w	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	2b80      	cmp	r3, #128	@ 0x80
 8008602:	d032      	beq.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008606:	2b80      	cmp	r3, #128	@ 0x80
 8008608:	f200 8081 	bhi.w	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	2b40      	cmp	r3, #64	@ 0x40
 8008616:	d014      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008618:	e079      	b.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800861a:	4b3f      	ldr	r3, [pc, #252]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008626:	d108      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800862c:	4618      	mov	r0, r3
 800862e:	f000 ff67 	bl	8009500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008636:	f000 bc9c 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800863e:	f000 bc98 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008642:	4b35      	ldr	r3, [pc, #212]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800864a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800864e:	d108      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008650:	f107 0318 	add.w	r3, r7, #24
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fcab 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800865e:	f000 bc88 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008666:	f000 bc84 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800866a:	4b2b      	ldr	r3, [pc, #172]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008676:	d108      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008678:	f107 030c 	add.w	r3, r7, #12
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fdeb 	bl	8009258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008686:	f000 bc74 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868e:	f000 bc70 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008692:	4b21      	ldr	r3, [pc, #132]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008696:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800869a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800869c:	4b1e      	ldr	r3, [pc, #120]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d10c      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80086a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	08db      	lsrs	r3, r3, #3
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	4a18      	ldr	r2, [pc, #96]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80086ba:	fa22 f303 	lsr.w	r3, r2, r3
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086c0:	e01f      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086c2:	4b15      	ldr	r3, [pc, #84]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ce:	d106      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80086d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086d6:	d102      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086d8:	4b11      	ldr	r3, [pc, #68]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086dc:	e011      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086de:	4b0e      	ldr	r3, [pc, #56]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ea:	d106      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80086ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086f2:	d102      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f8:	e003      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086fe:	f000 bc38 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008702:	f000 bc36 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008706:	4b08      	ldr	r3, [pc, #32]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800870a:	f000 bc32 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008712:	f000 bc2e 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008716:	bf00      	nop
 8008718:	58024400 	.word	0x58024400
 800871c:	03d09000 	.word	0x03d09000
 8008720:	003d0900 	.word	0x003d0900
 8008724:	00f42400 	.word	0x00f42400
 8008728:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800872c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008730:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008734:	430b      	orrs	r3, r1
 8008736:	f040 809c 	bne.w	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800873a:	4b9e      	ldr	r3, [pc, #632]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800873c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800873e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008742:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008746:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800874a:	d054      	beq.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008752:	f200 808b 	bhi.w	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800875c:	f000 8083 	beq.w	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008766:	f200 8081 	bhi.w	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008770:	d02f      	beq.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008778:	d878      	bhi.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800877a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877c:	2b00      	cmp	r3, #0
 800877e:	d004      	beq.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008786:	d012      	beq.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008788:	e070      	b.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800878a:	4b8a      	ldr	r3, [pc, #552]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008796:	d107      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800879c:	4618      	mov	r0, r3
 800879e:	f000 feaf 	bl	8009500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a6:	e3e4      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ac:	e3e1      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087ae:	4b81      	ldr	r3, [pc, #516]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087ba:	d107      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087bc:	f107 0318 	add.w	r3, r7, #24
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fbf5 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ca:	e3d2      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d0:	e3cf      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087d2:	4b78      	ldr	r3, [pc, #480]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087de:	d107      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e0:	f107 030c 	add.w	r3, r7, #12
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fd37 	bl	8009258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ee:	e3c0      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f4:	e3bd      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087f6:	4b6f      	ldr	r3, [pc, #444]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008800:	4b6c      	ldr	r3, [pc, #432]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0304 	and.w	r3, r3, #4
 8008808:	2b04      	cmp	r3, #4
 800880a:	d10c      	bne.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800880c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880e:	2b00      	cmp	r3, #0
 8008810:	d109      	bne.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008812:	4b68      	ldr	r3, [pc, #416]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	08db      	lsrs	r3, r3, #3
 8008818:	f003 0303 	and.w	r3, r3, #3
 800881c:	4a66      	ldr	r2, [pc, #408]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800881e:	fa22 f303 	lsr.w	r3, r2, r3
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008824:	e01e      	b.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008826:	4b63      	ldr	r3, [pc, #396]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800882e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008832:	d106      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800883a:	d102      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800883c:	4b5f      	ldr	r3, [pc, #380]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800883e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008840:	e010      	b.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008842:	4b5c      	ldr	r3, [pc, #368]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800884a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800884e:	d106      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008856:	d102      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008858:	4b59      	ldr	r3, [pc, #356]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800885c:	e002      	b.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008862:	e386      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008864:	e385      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008866:	4b57      	ldr	r3, [pc, #348]	@ (80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800886a:	e382      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008870:	e37f      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008876:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800887a:	430b      	orrs	r3, r1
 800887c:	f040 80a7 	bne.w	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008880:	4b4c      	ldr	r3, [pc, #304]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008884:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008888:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008890:	d055      	beq.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008898:	f200 8096 	bhi.w	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088a2:	f000 8084 	beq.w	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088ac:	f200 808c 	bhi.w	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088b6:	d030      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088be:	f200 8083 	bhi.w	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088ce:	d012      	beq.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80088d0:	e07a      	b.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088d2:	4b38      	ldr	r3, [pc, #224]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088de:	d107      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fe0b 	bl	8009500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ee:	e340      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f4:	e33d      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088f6:	4b2f      	ldr	r3, [pc, #188]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008902:	d107      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008904:	f107 0318 	add.w	r3, r7, #24
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fb51 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008912:	e32e      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008918:	e32b      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800891a:	4b26      	ldr	r3, [pc, #152]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008926:	d107      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008928:	f107 030c 	add.w	r3, r7, #12
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fc93 	bl	8009258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008936:	e31c      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800893c:	e319      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800893e:	4b1d      	ldr	r3, [pc, #116]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008942:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008946:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008948:	4b1a      	ldr	r3, [pc, #104]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b04      	cmp	r3, #4
 8008952:	d10c      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800895a:	4b16      	ldr	r3, [pc, #88]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	08db      	lsrs	r3, r3, #3
 8008960:	f003 0303 	and.w	r3, r3, #3
 8008964:	4a14      	ldr	r2, [pc, #80]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008966:	fa22 f303 	lsr.w	r3, r2, r3
 800896a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800896c:	e01e      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800896e:	4b11      	ldr	r3, [pc, #68]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800897a:	d106      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800897c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800897e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008982:	d102      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008984:	4b0d      	ldr	r3, [pc, #52]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008988:	e010      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800898a:	4b0a      	ldr	r3, [pc, #40]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008996:	d106      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800899e:	d102      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089a0:	4b07      	ldr	r3, [pc, #28]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089a4:	e002      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089aa:	e2e2      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089ac:	e2e1      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089ae:	4b05      	ldr	r3, [pc, #20]	@ (80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b2:	e2de      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089b4:	58024400 	.word	0x58024400
 80089b8:	03d09000 	.word	0x03d09000
 80089bc:	003d0900 	.word	0x003d0900
 80089c0:	00f42400 	.word	0x00f42400
 80089c4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089cc:	e2d1      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80089ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80089d6:	430b      	orrs	r3, r1
 80089d8:	f040 809c 	bne.w	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80089dc:	4b93      	ldr	r3, [pc, #588]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80089e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089ec:	d054      	beq.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80089ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089f4:	f200 808b 	bhi.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80089f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089fe:	f000 8083 	beq.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a08:	f200 8081 	bhi.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a12:	d02f      	beq.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a1a:	d878      	bhi.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d004      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a28:	d012      	beq.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a2a:	e070      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a2c:	4b7f      	ldr	r3, [pc, #508]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a38:	d107      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fd5e 	bl	8009500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a48:	e293      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a4e:	e290      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a50:	4b76      	ldr	r3, [pc, #472]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a5c:	d107      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5e:	f107 0318 	add.w	r3, r7, #24
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 faa4 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a6c:	e281      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a72:	e27e      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a74:	4b6d      	ldr	r3, [pc, #436]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a80:	d107      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fbe6 	bl	8009258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a90:	e26f      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a96:	e26c      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a98:	4b64      	ldr	r3, [pc, #400]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008aa2:	4b62      	ldr	r3, [pc, #392]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0304 	and.w	r3, r3, #4
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d10c      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d109      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	08db      	lsrs	r3, r3, #3
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	4a5c      	ldr	r2, [pc, #368]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ac6:	e01e      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ac8:	4b58      	ldr	r3, [pc, #352]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ad4:	d106      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008adc:	d102      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ade:	4b55      	ldr	r3, [pc, #340]	@ (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ae2:	e010      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ae4:	4b51      	ldr	r3, [pc, #324]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008af0:	d106      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008af8:	d102      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008afa:	4b4f      	ldr	r3, [pc, #316]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008afe:	e002      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b04:	e235      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b06:	e234      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b08:	4b4c      	ldr	r3, [pc, #304]	@ (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b0c:	e231      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b12:	e22e      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b18:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	f040 808f 	bne.w	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b22:	4b42      	ldr	r3, [pc, #264]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b26:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b32:	d06b      	beq.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b3a:	d874      	bhi.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b42:	d056      	beq.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b4a:	d86c      	bhi.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b52:	d03b      	beq.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b5a:	d864      	bhi.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b62:	d021      	beq.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b6a:	d85c      	bhi.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d004      	beq.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b78:	d004      	beq.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008b7a:	e054      	b.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008b7c:	f7fe fa62 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 8008b80:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b82:	e1f6      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b84:	4b29      	ldr	r3, [pc, #164]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b90:	d107      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b92:	f107 0318 	add.w	r3, r7, #24
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fa0a 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba0:	e1e7      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba6:	e1e4      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ba8:	4b20      	ldr	r3, [pc, #128]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bb4:	d107      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb6:	f107 030c 	add.w	r3, r7, #12
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fb4c 	bl	8009258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc4:	e1d5      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bca:	e1d2      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bcc:	4b17      	ldr	r3, [pc, #92]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d109      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bd8:	4b14      	ldr	r3, [pc, #80]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	08db      	lsrs	r3, r3, #3
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	4a13      	ldr	r2, [pc, #76]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008be4:	fa22 f303 	lsr.w	r3, r2, r3
 8008be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bea:	e1c2      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf0:	e1bf      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bfe:	d102      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008c00:	4b0c      	ldr	r3, [pc, #48]	@ (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c04:	e1b5      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0a:	e1b2      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c0c:	4b07      	ldr	r3, [pc, #28]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c18:	d102      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008c1a:	4b07      	ldr	r3, [pc, #28]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c1e:	e1a8      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c24:	e1a5      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c2a:	e1a2      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c2c:	58024400 	.word	0x58024400
 8008c30:	03d09000 	.word	0x03d09000
 8008c34:	003d0900 	.word	0x003d0900
 8008c38:	00f42400 	.word	0x00f42400
 8008c3c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c44:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	d173      	bne.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008c4c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c54:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c5c:	d02f      	beq.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c64:	d863      	bhi.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c72:	d012      	beq.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008c74:	e05b      	b.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c76:	4b92      	ldr	r3, [pc, #584]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c82:	d107      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c84:	f107 0318 	add.w	r3, r7, #24
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 f991 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c92:	e16e      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c98:	e16b      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c9a:	4b89      	ldr	r3, [pc, #548]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ca6:	d107      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ca8:	f107 030c 	add.w	r3, r7, #12
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fad3 	bl	8009258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb6:	e15c      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cbc:	e159      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cbe:	4b80      	ldr	r3, [pc, #512]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d10c      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d109      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cda:	4b79      	ldr	r3, [pc, #484]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	08db      	lsrs	r3, r3, #3
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	4a77      	ldr	r2, [pc, #476]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cec:	e01e      	b.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cee:	4b74      	ldr	r3, [pc, #464]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cfa:	d106      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d02:	d102      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d04:	4b70      	ldr	r3, [pc, #448]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d08:	e010      	b.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d16:	d106      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d1e:	d102      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d20:	4b6a      	ldr	r3, [pc, #424]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d24:	e002      	b.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d2a:	e122      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d2c:	e121      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d32:	e11e      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d38:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008d3c:	430b      	orrs	r3, r1
 8008d3e:	d133      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d40:	4b5f      	ldr	r3, [pc, #380]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d48:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d56:	d012      	beq.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008d58:	e023      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d5a:	4b59      	ldr	r3, [pc, #356]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d66:	d107      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fbc7 	bl	8009500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d76:	e0fc      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d7c:	e0f9      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d7e:	4b50      	ldr	r3, [pc, #320]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d8a:	d107      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d8c:	f107 0318 	add.w	r3, r7, #24
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 f90d 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d9a:	e0ea      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da0:	e0e7      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da6:	e0e4      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008db0:	430b      	orrs	r3, r1
 8008db2:	f040 808d 	bne.w	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008db6:	4b42      	ldr	r3, [pc, #264]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008dbe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dc6:	d06b      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dce:	d874      	bhi.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd6:	d056      	beq.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dde:	d86c      	bhi.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008de6:	d03b      	beq.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008dee:	d864      	bhi.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008df6:	d021      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dfe:	d85c      	bhi.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e0c:	d004      	beq.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008e0e:	e054      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e10:	f000 f8b8 	bl	8008f84 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e14:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e16:	e0ac      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e18:	4b29      	ldr	r3, [pc, #164]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e24:	d107      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e26:	f107 0318 	add.w	r3, r7, #24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f8c0 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e34:	e09d      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e3a:	e09a      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e3c:	4b20      	ldr	r3, [pc, #128]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e48:	d107      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e4a:	f107 030c 	add.w	r3, r7, #12
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fa02 	bl	8009258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e58:	e08b      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e5e:	e088      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e60:	4b17      	ldr	r3, [pc, #92]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d109      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e6c:	4b14      	ldr	r3, [pc, #80]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	08db      	lsrs	r3, r3, #3
 8008e72:	f003 0303 	and.w	r3, r3, #3
 8008e76:	4a13      	ldr	r2, [pc, #76]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008e78:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e7e:	e078      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e84:	e075      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e86:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e92:	d102      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008e94:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e98:	e06b      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e9e:	e068      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ea0:	4b07      	ldr	r3, [pc, #28]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eac:	d102      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008eae:	4b07      	ldr	r3, [pc, #28]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb2:	e05e      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb8:	e05b      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ebe:	e058      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ec0:	58024400 	.word	0x58024400
 8008ec4:	03d09000 	.word	0x03d09000
 8008ec8:	003d0900 	.word	0x003d0900
 8008ecc:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	d148      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008edc:	4b27      	ldr	r3, [pc, #156]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ee0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ee4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eec:	d02a      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ef4:	d838      	bhi.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f02:	d00d      	beq.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008f04:	e030      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f06:	4b1d      	ldr	r3, [pc, #116]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f12:	d102      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008f14:	4b1a      	ldr	r3, [pc, #104]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f18:	e02b      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1e:	e028      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f20:	4b16      	ldr	r3, [pc, #88]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f2c:	d107      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fae4 	bl	8009500 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3c:	e019      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f42:	e016      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f44:	4b0d      	ldr	r3, [pc, #52]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f50:	d107      	bne.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f52:	f107 0318 	add.w	r3, r7, #24
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f82a 	bl	8008fb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f60:	e007      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f66:	e004      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6c:	e001      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3740      	adds	r7, #64	@ 0x40
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	00f42400 	.word	0x00f42400

08008f84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f88:	f7fe f82c 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	4b06      	ldr	r3, [pc, #24]	@ (8008fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	091b      	lsrs	r3, r3, #4
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	4904      	ldr	r1, [pc, #16]	@ (8008fac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008f9a:	5ccb      	ldrb	r3, [r1, r3]
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	58024400 	.word	0x58024400
 8008fac:	0800fd00 	.word	0x0800fd00

08008fb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b089      	sub	sp, #36	@ 0x24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fb8:	4ba1      	ldr	r3, [pc, #644]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008fc2:	4b9f      	ldr	r3, [pc, #636]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc6:	0b1b      	lsrs	r3, r3, #12
 8008fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008fce:	4b9c      	ldr	r3, [pc, #624]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd2:	091b      	lsrs	r3, r3, #4
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008fda:	4b99      	ldr	r3, [pc, #612]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fde:	08db      	lsrs	r3, r3, #3
 8008fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	fb02 f303 	mul.w	r3, r2, r3
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 8111 	beq.w	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b02      	cmp	r3, #2
 8009002:	f000 8083 	beq.w	800910c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	2b02      	cmp	r3, #2
 800900a:	f200 80a1 	bhi.w	8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d056      	beq.n	80090c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800901a:	e099      	b.n	8009150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800901c:	4b88      	ldr	r3, [pc, #544]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d02d      	beq.n	8009084 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009028:	4b85      	ldr	r3, [pc, #532]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	08db      	lsrs	r3, r3, #3
 800902e:	f003 0303 	and.w	r3, r3, #3
 8009032:	4a84      	ldr	r2, [pc, #528]	@ (8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009034:	fa22 f303 	lsr.w	r3, r2, r3
 8009038:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	ee07 3a90 	vmov	s15, r3
 8009040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009052:	4b7b      	ldr	r3, [pc, #492]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009062:	ed97 6a03 	vldr	s12, [r7, #12]
 8009066:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800906a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009082:	e087      	b.n	8009194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800924c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009096:	4b6a      	ldr	r3, [pc, #424]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c6:	e065      	b.n	8009194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090da:	4b59      	ldr	r3, [pc, #356]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800910a:	e043      	b.n	8009194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800911a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911e:	4b48      	ldr	r3, [pc, #288]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009132:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914e:	e021      	b.n	8009194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800915e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009162:	4b37      	ldr	r3, [pc, #220]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009172:	ed97 6a03 	vldr	s12, [r7, #12]
 8009176:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800917a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009192:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009194:	4b2a      	ldr	r3, [pc, #168]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009198:	0a5b      	lsrs	r3, r3, #9
 800919a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80091b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ba:	ee17 2a90 	vmov	r2, s15
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80091c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c6:	0c1b      	lsrs	r3, r3, #16
 80091c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091cc:	ee07 3a90 	vmov	s15, r3
 80091d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80091e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e8:	ee17 2a90 	vmov	r2, s15
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80091f0:	4b13      	ldr	r3, [pc, #76]	@ (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f4:	0e1b      	lsrs	r3, r3, #24
 80091f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800920a:	edd7 6a07 	vldr	s13, [r7, #28]
 800920e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009216:	ee17 2a90 	vmov	r2, s15
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800921e:	e008      	b.n	8009232 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	609a      	str	r2, [r3, #8]
}
 8009232:	bf00      	nop
 8009234:	3724      	adds	r7, #36	@ 0x24
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	58024400 	.word	0x58024400
 8009244:	03d09000 	.word	0x03d09000
 8009248:	46000000 	.word	0x46000000
 800924c:	4c742400 	.word	0x4c742400
 8009250:	4a742400 	.word	0x4a742400
 8009254:	4b742400 	.word	0x4b742400

08009258 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009258:	b480      	push	{r7}
 800925a:	b089      	sub	sp, #36	@ 0x24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009260:	4ba1      	ldr	r3, [pc, #644]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009264:	f003 0303 	and.w	r3, r3, #3
 8009268:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800926a:	4b9f      	ldr	r3, [pc, #636]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800926c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926e:	0d1b      	lsrs	r3, r3, #20
 8009270:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009274:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009276:	4b9c      	ldr	r3, [pc, #624]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927a:	0a1b      	lsrs	r3, r3, #8
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009282:	4b99      	ldr	r3, [pc, #612]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009286:	08db      	lsrs	r3, r3, #3
 8009288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	fb02 f303 	mul.w	r3, r2, r3
 8009292:	ee07 3a90 	vmov	s15, r3
 8009296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 8111 	beq.w	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	f000 8083 	beq.w	80093b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	f200 80a1 	bhi.w	80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d056      	beq.n	8009370 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092c2:	e099      	b.n	80093f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092c4:	4b88      	ldr	r3, [pc, #544]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d02d      	beq.n	800932c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092d0:	4b85      	ldr	r3, [pc, #532]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	08db      	lsrs	r3, r3, #3
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	4a84      	ldr	r2, [pc, #528]	@ (80094ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80092dc:	fa22 f303 	lsr.w	r3, r2, r3
 80092e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	ee07 3a90 	vmov	s15, r3
 80092e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fa:	4b7b      	ldr	r3, [pc, #492]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930a:	ed97 6a03 	vldr	s12, [r7, #12]
 800930e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800931e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009326:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800932a:	e087      	b.n	800943c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009336:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800933a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933e:	4b6a      	ldr	r3, [pc, #424]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009352:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800936e:	e065      	b.n	800943c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800937e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009382:	4b59      	ldr	r3, [pc, #356]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009392:	ed97 6a03 	vldr	s12, [r7, #12]
 8009396:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800939a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093b2:	e043      	b.n	800943c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b48      	ldr	r3, [pc, #288]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f6:	e021      	b.n	800943c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b37      	ldr	r3, [pc, #220]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a03 	vldr	s12, [r7, #12]
 800941e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800943c:	4b2a      	ldr	r3, [pc, #168]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800943e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009440:	0a5b      	lsrs	r3, r3, #9
 8009442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009456:	edd7 6a07 	vldr	s13, [r7, #28]
 800945a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800945e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009462:	ee17 2a90 	vmov	r2, s15
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800946a:	4b1f      	ldr	r3, [pc, #124]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800946c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946e:	0c1b      	lsrs	r3, r3, #16
 8009470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009474:	ee07 3a90 	vmov	s15, r3
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009484:	edd7 6a07 	vldr	s13, [r7, #28]
 8009488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009490:	ee17 2a90 	vmov	r2, s15
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009498:	4b13      	ldr	r3, [pc, #76]	@ (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800949a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949c:	0e1b      	lsrs	r3, r3, #24
 800949e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094be:	ee17 2a90 	vmov	r2, s15
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094c6:	e008      	b.n	80094da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	609a      	str	r2, [r3, #8]
}
 80094da:	bf00      	nop
 80094dc:	3724      	adds	r7, #36	@ 0x24
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	58024400 	.word	0x58024400
 80094ec:	03d09000 	.word	0x03d09000
 80094f0:	46000000 	.word	0x46000000
 80094f4:	4c742400 	.word	0x4c742400
 80094f8:	4a742400 	.word	0x4a742400
 80094fc:	4b742400 	.word	0x4b742400

08009500 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009500:	b480      	push	{r7}
 8009502:	b089      	sub	sp, #36	@ 0x24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009508:	4ba0      	ldr	r3, [pc, #640]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800950a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009512:	4b9e      	ldr	r3, [pc, #632]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009516:	091b      	lsrs	r3, r3, #4
 8009518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800951c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800951e:	4b9b      	ldr	r3, [pc, #620]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009528:	4b98      	ldr	r3, [pc, #608]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800952a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800952c:	08db      	lsrs	r3, r3, #3
 800952e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	fb02 f303 	mul.w	r3, r2, r3
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009540:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 8111 	beq.w	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	2b02      	cmp	r3, #2
 8009550:	f000 8083 	beq.w	800965a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2b02      	cmp	r3, #2
 8009558:	f200 80a1 	bhi.w	800969e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d003      	beq.n	800956a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d056      	beq.n	8009616 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009568:	e099      	b.n	800969e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800956a:	4b88      	ldr	r3, [pc, #544]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	d02d      	beq.n	80095d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009576:	4b85      	ldr	r3, [pc, #532]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	08db      	lsrs	r3, r3, #3
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	4a83      	ldr	r2, [pc, #524]	@ (8009790 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009582:	fa22 f303 	lsr.w	r3, r2, r3
 8009586:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	ee07 3a90 	vmov	s15, r3
 8009598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a0:	4b7a      	ldr	r3, [pc, #488]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a8:	ee07 3a90 	vmov	s15, r3
 80095ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80095b4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095cc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095d0:	e087      	b.n	80096e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	ee07 3a90 	vmov	s15, r3
 80095d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095dc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009798 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80095e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e4:	4b69      	ldr	r3, [pc, #420]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ec:	ee07 3a90 	vmov	s15, r3
 80095f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009614:	e065      	b.n	80096e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	ee07 3a90 	vmov	s15, r3
 800961c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009620:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800979c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009628:	4b58      	ldr	r3, [pc, #352]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800962a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800962c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009630:	ee07 3a90 	vmov	s15, r3
 8009634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009638:	ed97 6a03 	vldr	s12, [r7, #12]
 800963c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009648:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800964c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009658:	e043      	b.n	80096e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	ee07 3a90 	vmov	s15, r3
 8009660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009664:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966c:	4b47      	ldr	r3, [pc, #284]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800966e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009680:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009698:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800969c:	e021      	b.n	80096e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	ee07 3a90 	vmov	s15, r3
 80096a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009798 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b0:	4b36      	ldr	r3, [pc, #216]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80096e2:	4b2a      	ldr	r3, [pc, #168]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e6:	0a5b      	lsrs	r3, r3, #9
 80096e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ec:	ee07 3a90 	vmov	s15, r3
 80096f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009708:	ee17 2a90 	vmov	r2, s15
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009710:	4b1e      	ldr	r3, [pc, #120]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009714:	0c1b      	lsrs	r3, r3, #16
 8009716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972a:	edd7 6a07 	vldr	s13, [r7, #28]
 800972e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009736:	ee17 2a90 	vmov	r2, s15
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800973e:	4b13      	ldr	r3, [pc, #76]	@ (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009742:	0e1b      	lsrs	r3, r3, #24
 8009744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009748:	ee07 3a90 	vmov	s15, r3
 800974c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009758:	edd7 6a07 	vldr	s13, [r7, #28]
 800975c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009764:	ee17 2a90 	vmov	r2, s15
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800976c:	e008      	b.n	8009780 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	609a      	str	r2, [r3, #8]
}
 8009780:	bf00      	nop
 8009782:	3724      	adds	r7, #36	@ 0x24
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	58024400 	.word	0x58024400
 8009790:	03d09000 	.word	0x03d09000
 8009794:	46000000 	.word	0x46000000
 8009798:	4c742400 	.word	0x4c742400
 800979c:	4a742400 	.word	0x4a742400
 80097a0:	4b742400 	.word	0x4b742400

080097a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097b2:	4b53      	ldr	r3, [pc, #332]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80097b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b6:	f003 0303 	and.w	r3, r3, #3
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d101      	bne.n	80097c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e099      	b.n	80098f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097c2:	4b4f      	ldr	r3, [pc, #316]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a4e      	ldr	r2, [pc, #312]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80097c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097ce:	f7fa f905 	bl	80039dc <HAL_GetTick>
 80097d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097d4:	e008      	b.n	80097e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097d6:	f7fa f901 	bl	80039dc <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d901      	bls.n	80097e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e086      	b.n	80098f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097e8:	4b45      	ldr	r3, [pc, #276]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1f0      	bne.n	80097d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097f4:	4b42      	ldr	r3, [pc, #264]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80097f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	031b      	lsls	r3, r3, #12
 8009802:	493f      	ldr	r1, [pc, #252]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 8009804:	4313      	orrs	r3, r2
 8009806:	628b      	str	r3, [r1, #40]	@ 0x28
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	3b01      	subs	r3, #1
 800980e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	3b01      	subs	r3, #1
 8009818:	025b      	lsls	r3, r3, #9
 800981a:	b29b      	uxth	r3, r3
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	3b01      	subs	r3, #1
 8009824:	041b      	lsls	r3, r3, #16
 8009826:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	3b01      	subs	r3, #1
 8009832:	061b      	lsls	r3, r3, #24
 8009834:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009838:	4931      	ldr	r1, [pc, #196]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 800983a:	4313      	orrs	r3, r2
 800983c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800983e:	4b30      	ldr	r3, [pc, #192]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 8009840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009842:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	492d      	ldr	r1, [pc, #180]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 800984c:	4313      	orrs	r3, r2
 800984e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009850:	4b2b      	ldr	r3, [pc, #172]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 8009852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009854:	f023 0220 	bic.w	r2, r3, #32
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	4928      	ldr	r1, [pc, #160]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 800985e:	4313      	orrs	r3, r2
 8009860:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009862:	4b27      	ldr	r3, [pc, #156]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 8009864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009866:	4a26      	ldr	r2, [pc, #152]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 8009868:	f023 0310 	bic.w	r3, r3, #16
 800986c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800986e:	4b24      	ldr	r3, [pc, #144]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 8009870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009872:	4b24      	ldr	r3, [pc, #144]	@ (8009904 <RCCEx_PLL2_Config+0x160>)
 8009874:	4013      	ands	r3, r2
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	69d2      	ldr	r2, [r2, #28]
 800987a:	00d2      	lsls	r2, r2, #3
 800987c:	4920      	ldr	r1, [pc, #128]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 800987e:	4313      	orrs	r3, r2
 8009880:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009882:	4b1f      	ldr	r3, [pc, #124]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 8009884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009886:	4a1e      	ldr	r2, [pc, #120]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 8009888:	f043 0310 	orr.w	r3, r3, #16
 800988c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009894:	4b1a      	ldr	r3, [pc, #104]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 8009896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009898:	4a19      	ldr	r2, [pc, #100]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 800989a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800989e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098a0:	e00f      	b.n	80098c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d106      	bne.n	80098b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098a8:	4b15      	ldr	r3, [pc, #84]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80098aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ac:	4a14      	ldr	r2, [pc, #80]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80098ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098b4:	e005      	b.n	80098c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098b6:	4b12      	ldr	r3, [pc, #72]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80098b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ba:	4a11      	ldr	r2, [pc, #68]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80098bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a0e      	ldr	r2, [pc, #56]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80098c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ce:	f7fa f885 	bl	80039dc <HAL_GetTick>
 80098d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098d4:	e008      	b.n	80098e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098d6:	f7fa f881 	bl	80039dc <HAL_GetTick>
 80098da:	4602      	mov	r2, r0
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d901      	bls.n	80098e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e006      	b.n	80098f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098e8:	4b05      	ldr	r3, [pc, #20]	@ (8009900 <RCCEx_PLL2_Config+0x15c>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0f0      	beq.n	80098d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	58024400 	.word	0x58024400
 8009904:	ffff0007 	.word	0xffff0007

08009908 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009916:	4b53      	ldr	r3, [pc, #332]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	2b03      	cmp	r3, #3
 8009920:	d101      	bne.n	8009926 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e099      	b.n	8009a5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009926:	4b4f      	ldr	r3, [pc, #316]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a4e      	ldr	r2, [pc, #312]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 800992c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009932:	f7fa f853 	bl	80039dc <HAL_GetTick>
 8009936:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009938:	e008      	b.n	800994c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800993a:	f7fa f84f 	bl	80039dc <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	2b02      	cmp	r3, #2
 8009946:	d901      	bls.n	800994c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e086      	b.n	8009a5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800994c:	4b45      	ldr	r3, [pc, #276]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1f0      	bne.n	800993a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009958:	4b42      	ldr	r3, [pc, #264]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 800995a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	051b      	lsls	r3, r3, #20
 8009966:	493f      	ldr	r1, [pc, #252]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009968:	4313      	orrs	r3, r2
 800996a:	628b      	str	r3, [r1, #40]	@ 0x28
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	3b01      	subs	r3, #1
 8009972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	3b01      	subs	r3, #1
 800997c:	025b      	lsls	r3, r3, #9
 800997e:	b29b      	uxth	r3, r3
 8009980:	431a      	orrs	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	3b01      	subs	r3, #1
 8009988:	041b      	lsls	r3, r3, #16
 800998a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	3b01      	subs	r3, #1
 8009996:	061b      	lsls	r3, r3, #24
 8009998:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800999c:	4931      	ldr	r1, [pc, #196]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099a2:	4b30      	ldr	r3, [pc, #192]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	492d      	ldr	r1, [pc, #180]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099b0:	4313      	orrs	r3, r2
 80099b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099b4:	4b2b      	ldr	r3, [pc, #172]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	4928      	ldr	r1, [pc, #160]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099c6:	4b27      	ldr	r3, [pc, #156]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ca:	4a26      	ldr	r2, [pc, #152]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099d2:	4b24      	ldr	r3, [pc, #144]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099d6:	4b24      	ldr	r3, [pc, #144]	@ (8009a68 <RCCEx_PLL3_Config+0x160>)
 80099d8:	4013      	ands	r3, r2
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	69d2      	ldr	r2, [r2, #28]
 80099de:	00d2      	lsls	r2, r2, #3
 80099e0:	4920      	ldr	r1, [pc, #128]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099e6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d106      	bne.n	8009a06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fc:	4a19      	ldr	r2, [pc, #100]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 80099fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a04:	e00f      	b.n	8009a26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d106      	bne.n	8009a1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a0c:	4b15      	ldr	r3, [pc, #84]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a10:	4a14      	ldr	r2, [pc, #80]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009a12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a18:	e005      	b.n	8009a26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a1a:	4b12      	ldr	r3, [pc, #72]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1e:	4a11      	ldr	r2, [pc, #68]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009a20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a26:	4b0f      	ldr	r3, [pc, #60]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a32:	f7f9 ffd3 	bl	80039dc <HAL_GetTick>
 8009a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a38:	e008      	b.n	8009a4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a3a:	f7f9 ffcf 	bl	80039dc <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d901      	bls.n	8009a4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e006      	b.n	8009a5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a4c:	4b05      	ldr	r3, [pc, #20]	@ (8009a64 <RCCEx_PLL3_Config+0x15c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0f0      	beq.n	8009a3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	58024400 	.word	0x58024400
 8009a68:	ffff0007 	.word	0xffff0007

08009a6c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e054      	b.n	8009b28 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	7a5b      	ldrb	r3, [r3, #9]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d105      	bne.n	8009a94 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7f9 fbd8 	bl	8003244 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f023 0120 	bic.w	r1, r3, #32
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	430a      	orrs	r2, r1
 8009aae:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0204 	orr.w	r2, r2, #4
 8009abe:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aca:	2b40      	cmp	r3, #64	@ 0x40
 8009acc:	d104      	bne.n	8009ad8 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2204      	movs	r2, #4
 8009ad2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e027      	b.n	8009b28 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8009ad8:	f7f9 ff80 	bl	80039dc <HAL_GetTick>
 8009adc:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009ade:	e015      	b.n	8009b0c <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009ae0:	f7f9 ff7c 	bl	80039dc <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d90e      	bls.n	8009b0c <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b04      	cmp	r3, #4
 8009afa:	d107      	bne.n	8009b0c <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2204      	movs	r2, #4
 8009b00:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2202      	movs	r2, #2
 8009b06:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e00d      	b.n	8009b28 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f003 0304 	and.w	r3, r3, #4
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d0e2      	beq.n	8009ae0 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e10f      	b.n	8009d62 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a87      	ldr	r2, [pc, #540]	@ (8009d6c <HAL_SPI_Init+0x23c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d00f      	beq.n	8009b72 <HAL_SPI_Init+0x42>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a86      	ldr	r2, [pc, #536]	@ (8009d70 <HAL_SPI_Init+0x240>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d00a      	beq.n	8009b72 <HAL_SPI_Init+0x42>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a84      	ldr	r2, [pc, #528]	@ (8009d74 <HAL_SPI_Init+0x244>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d005      	beq.n	8009b72 <HAL_SPI_Init+0x42>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	2b0f      	cmp	r3, #15
 8009b6c:	d901      	bls.n	8009b72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e0f7      	b.n	8009d62 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f001 fb82 	bl	800b27c <SPI_GetPacketSize>
 8009b78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a7b      	ldr	r2, [pc, #492]	@ (8009d6c <HAL_SPI_Init+0x23c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d00c      	beq.n	8009b9e <HAL_SPI_Init+0x6e>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a79      	ldr	r2, [pc, #484]	@ (8009d70 <HAL_SPI_Init+0x240>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d007      	beq.n	8009b9e <HAL_SPI_Init+0x6e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a78      	ldr	r2, [pc, #480]	@ (8009d74 <HAL_SPI_Init+0x244>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d002      	beq.n	8009b9e <HAL_SPI_Init+0x6e>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b08      	cmp	r3, #8
 8009b9c:	d811      	bhi.n	8009bc2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ba2:	4a72      	ldr	r2, [pc, #456]	@ (8009d6c <HAL_SPI_Init+0x23c>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d009      	beq.n	8009bbc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a70      	ldr	r2, [pc, #448]	@ (8009d70 <HAL_SPI_Init+0x240>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d004      	beq.n	8009bbc <HAL_SPI_Init+0x8c>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a6f      	ldr	r2, [pc, #444]	@ (8009d74 <HAL_SPI_Init+0x244>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d104      	bne.n	8009bc6 <HAL_SPI_Init+0x96>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b10      	cmp	r3, #16
 8009bc0:	d901      	bls.n	8009bc6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e0cd      	b.n	8009d62 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d106      	bne.n	8009be0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7f9 fb6c 	bl	80032b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f022 0201 	bic.w	r2, r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009c02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c0c:	d119      	bne.n	8009c42 <HAL_SPI_Init+0x112>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c16:	d103      	bne.n	8009c20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d008      	beq.n	8009c32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10c      	bne.n	8009c42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c30:	d107      	bne.n	8009c42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00f      	beq.n	8009c6e <HAL_SPI_Init+0x13e>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	2b06      	cmp	r3, #6
 8009c54:	d90b      	bls.n	8009c6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	e007      	b.n	8009c7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69da      	ldr	r2, [r3, #28]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c86:	431a      	orrs	r2, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c90:	ea42 0103 	orr.w	r1, r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca8:	431a      	orrs	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cae:	431a      	orrs	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd2:	431a      	orrs	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	431a      	orrs	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cde:	ea42 0103 	orr.w	r1, r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d113      	bne.n	8009d1e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f022 0201 	bic.w	r2, r2, #1
 8009d2c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	40013000 	.word	0x40013000
 8009d70:	40003800 	.word	0x40003800
 8009d74:	40003c00 	.word	0x40003c00

08009d78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af02      	add	r7, sp, #8
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	603b      	str	r3, [r7, #0]
 8009d84:	4613      	mov	r3, r2
 8009d86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3320      	adds	r3, #32
 8009d8e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d90:	f7f9 fe24 	bl	80039dc <HAL_GetTick>
 8009d94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d001      	beq.n	8009da6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009da2:	2302      	movs	r3, #2
 8009da4:	e1d1      	b.n	800a14a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <HAL_SPI_Transmit+0x3a>
 8009dac:	88fb      	ldrh	r3, [r7, #6]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e1c9      	b.n	800a14a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_SPI_Transmit+0x4c>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e1c2      	b.n	800a14a <HAL_SPI_Transmit+0x3d2>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2203      	movs	r2, #3
 8009dd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	88fa      	ldrh	r2, [r7, #6]
 8009de6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	88fa      	ldrh	r2, [r7, #6]
 8009dee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009e1c:	d108      	bne.n	8009e30 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	e009      	b.n	8009e44 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009e42:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	4b96      	ldr	r3, [pc, #600]	@ (800a0a4 <HAL_SPI_Transmit+0x32c>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	88f9      	ldrh	r1, [r7, #6]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	6812      	ldr	r2, [r2, #0]
 8009e54:	430b      	orrs	r3, r1
 8009e56:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e70:	d107      	bne.n	8009e82 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	2b0f      	cmp	r3, #15
 8009e88:	d947      	bls.n	8009f1a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009e8a:	e03f      	b.n	8009f0c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d114      	bne.n	8009ec4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	6812      	ldr	r2, [r2, #0]
 8009ea4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eaa:	1d1a      	adds	r2, r3, #4
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ec2:	e023      	b.n	8009f0c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ec4:	f7f9 fd8a 	bl	80039dc <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d803      	bhi.n	8009edc <HAL_SPI_Transmit+0x164>
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eda:	d102      	bne.n	8009ee2 <HAL_SPI_Transmit+0x16a>
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d114      	bne.n	8009f0c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f001 f8fc 	bl	800b0e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e11e      	b.n	800a14a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1b9      	bne.n	8009e8c <HAL_SPI_Transmit+0x114>
 8009f18:	e0f1      	b.n	800a0fe <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	2b07      	cmp	r3, #7
 8009f20:	f240 80e6 	bls.w	800a0f0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009f24:	e05d      	b.n	8009fe2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d132      	bne.n	8009f9a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d918      	bls.n	8009f72 <HAL_SPI_Transmit+0x1fa>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d014      	beq.n	8009f72 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6812      	ldr	r2, [r2, #0]
 8009f52:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f58:	1d1a      	adds	r2, r3, #4
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	3b02      	subs	r3, #2
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f70:	e037      	b.n	8009fe2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f76:	881a      	ldrh	r2, [r3, #0]
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f80:	1c9a      	adds	r2, r3, #2
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f98:	e023      	b.n	8009fe2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f9a:	f7f9 fd1f 	bl	80039dc <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d803      	bhi.n	8009fb2 <HAL_SPI_Transmit+0x23a>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb0:	d102      	bne.n	8009fb8 <HAL_SPI_Transmit+0x240>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d114      	bne.n	8009fe2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f001 f891 	bl	800b0e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e0b3      	b.n	800a14a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d19b      	bne.n	8009f26 <HAL_SPI_Transmit+0x1ae>
 8009fee:	e086      	b.n	800a0fe <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	f003 0302 	and.w	r3, r3, #2
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d154      	bne.n	800a0a8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a004:	b29b      	uxth	r3, r3
 800a006:	2b03      	cmp	r3, #3
 800a008:	d918      	bls.n	800a03c <HAL_SPI_Transmit+0x2c4>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a00e:	2b40      	cmp	r3, #64	@ 0x40
 800a010:	d914      	bls.n	800a03c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a022:	1d1a      	adds	r2, r3, #4
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a02e:	b29b      	uxth	r3, r3
 800a030:	3b04      	subs	r3, #4
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a03a:	e059      	b.n	800a0f0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a042:	b29b      	uxth	r3, r3
 800a044:	2b01      	cmp	r3, #1
 800a046:	d917      	bls.n	800a078 <HAL_SPI_Transmit+0x300>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d013      	beq.n	800a078 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a054:	881a      	ldrh	r2, [r3, #0]
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a05e:	1c9a      	adds	r2, r3, #2
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	3b02      	subs	r3, #2
 800a06e:	b29a      	uxth	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a076:	e03b      	b.n	800a0f0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3320      	adds	r3, #32
 800a082:	7812      	ldrb	r2, [r2, #0]
 800a084:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a096:	b29b      	uxth	r3, r3
 800a098:	3b01      	subs	r3, #1
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a0a2:	e025      	b.n	800a0f0 <HAL_SPI_Transmit+0x378>
 800a0a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0a8:	f7f9 fc98 	bl	80039dc <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d803      	bhi.n	800a0c0 <HAL_SPI_Transmit+0x348>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0be:	d102      	bne.n	800a0c6 <HAL_SPI_Transmit+0x34e>
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d114      	bne.n	800a0f0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f001 f80a 	bl	800b0e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e02c      	b.n	800a14a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f47f af79 	bne.w	8009ff0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2200      	movs	r2, #0
 800a106:	2108      	movs	r1, #8
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f001 f889 	bl	800b220 <SPI_WaitOnFlagUntilTimeout>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d007      	beq.n	800a124 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a11a:	f043 0220 	orr.w	r2, r3, #32
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 ffdb 	bl	800b0e0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e000      	b.n	800a14a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a148:	2300      	movs	r3, #0
  }
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop

0800a154 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	603b      	str	r3, [r7, #0]
 800a160:	4613      	mov	r3, r2
 800a162:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a168:	095b      	lsrs	r3, r3, #5
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	3301      	adds	r3, #1
 800a16e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3330      	adds	r3, #48	@ 0x30
 800a176:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a178:	f7f9 fc30 	bl	80039dc <HAL_GetTick>
 800a17c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b01      	cmp	r3, #1
 800a188:	d001      	beq.n	800a18e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a18a:	2302      	movs	r3, #2
 800a18c:	e250      	b.n	800a630 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <HAL_SPI_Receive+0x46>
 800a194:	88fb      	ldrh	r3, [r7, #6]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e248      	b.n	800a630 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d101      	bne.n	800a1ac <HAL_SPI_Receive+0x58>
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	e241      	b.n	800a630 <HAL_SPI_Receive+0x4dc>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	88fa      	ldrh	r2, [r7, #6]
 800a1ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	88fa      	ldrh	r2, [r7, #6]
 800a1d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a204:	d108      	bne.n	800a218 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	e009      	b.n	800a22c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a22a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	4b95      	ldr	r3, [pc, #596]	@ (800a488 <HAL_SPI_Receive+0x334>)
 800a234:	4013      	ands	r3, r2
 800a236:	88f9      	ldrh	r1, [r7, #6]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	6812      	ldr	r2, [r2, #0]
 800a23c:	430b      	orrs	r3, r1
 800a23e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0201 	orr.w	r2, r2, #1
 800a24e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a258:	d107      	bne.n	800a26a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a268:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	2b0f      	cmp	r3, #15
 800a270:	d96c      	bls.n	800a34c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a272:	e064      	b.n	800a33e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	2b01      	cmp	r3, #1
 800a288:	d114      	bne.n	800a2b4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a292:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a294:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a29a:	1d1a      	adds	r2, r3, #4
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a2b2:	e044      	b.n	800a33e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	8bfa      	ldrh	r2, [r7, #30]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d919      	bls.n	800a2f6 <HAL_SPI_Receive+0x1a2>
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d014      	beq.n	800a2f6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a2d6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2dc:	1d1a      	adds	r2, r3, #4
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a2f4:	e023      	b.n	800a33e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2f6:	f7f9 fb71 	bl	80039dc <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d803      	bhi.n	800a30e <HAL_SPI_Receive+0x1ba>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a30c:	d102      	bne.n	800a314 <HAL_SPI_Receive+0x1c0>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d114      	bne.n	800a33e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 fee3 	bl	800b0e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e178      	b.n	800a630 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a344:	b29b      	uxth	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d194      	bne.n	800a274 <HAL_SPI_Receive+0x120>
 800a34a:	e15e      	b.n	800a60a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	2b07      	cmp	r3, #7
 800a352:	f240 8153 	bls.w	800a5fc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a356:	e08f      	b.n	800a478 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d114      	bne.n	800a398 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a372:	69ba      	ldr	r2, [r7, #24]
 800a374:	8812      	ldrh	r2, [r2, #0]
 800a376:	b292      	uxth	r2, r2
 800a378:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a37e:	1c9a      	adds	r2, r3, #2
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	3b01      	subs	r3, #1
 800a38e:	b29a      	uxth	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a396:	e06f      	b.n	800a478 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	8bfa      	ldrh	r2, [r7, #30]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d924      	bls.n	800a3f0 <HAL_SPI_Receive+0x29c>
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01f      	beq.n	800a3f0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	8812      	ldrh	r2, [r2, #0]
 800a3b8:	b292      	uxth	r2, r2
 800a3ba:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3c0:	1c9a      	adds	r2, r3, #2
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	8812      	ldrh	r2, [r2, #0]
 800a3ce:	b292      	uxth	r2, r2
 800a3d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3d6:	1c9a      	adds	r2, r3, #2
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	3b02      	subs	r3, #2
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a3ee:	e043      	b.n	800a478 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d119      	bne.n	800a430 <HAL_SPI_Receive+0x2dc>
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d014      	beq.n	800a430 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	8812      	ldrh	r2, [r2, #0]
 800a40e:	b292      	uxth	r2, r2
 800a410:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a416:	1c9a      	adds	r2, r3, #2
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a422:	b29b      	uxth	r3, r3
 800a424:	3b01      	subs	r3, #1
 800a426:	b29a      	uxth	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a42e:	e023      	b.n	800a478 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a430:	f7f9 fad4 	bl	80039dc <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d803      	bhi.n	800a448 <HAL_SPI_Receive+0x2f4>
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d102      	bne.n	800a44e <HAL_SPI_Receive+0x2fa>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d114      	bne.n	800a478 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 fe46 	bl	800b0e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a45a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e0db      	b.n	800a630 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a47e:	b29b      	uxth	r3, r3
 800a480:	2b00      	cmp	r3, #0
 800a482:	f47f af69 	bne.w	800a358 <HAL_SPI_Receive+0x204>
 800a486:	e0c0      	b.n	800a60a <HAL_SPI_Receive+0x4b6>
 800a488:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d117      	bne.n	800a4d2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4ae:	7812      	ldrb	r2, [r2, #0]
 800a4b0:	b2d2      	uxtb	r2, r2
 800a4b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a4d0:	e094      	b.n	800a5fc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	8bfa      	ldrh	r2, [r7, #30]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d946      	bls.n	800a56e <HAL_SPI_Receive+0x41a>
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d041      	beq.n	800a56e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4f6:	7812      	ldrb	r2, [r2, #0]
 800a4f8:	b2d2      	uxtb	r2, r2
 800a4fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a500:	1c5a      	adds	r2, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a512:	7812      	ldrb	r2, [r2, #0]
 800a514:	b2d2      	uxtb	r2, r2
 800a516:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a52e:	7812      	ldrb	r2, [r2, #0]
 800a530:	b2d2      	uxtb	r2, r2
 800a532:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a538:	1c5a      	adds	r2, r3, #1
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a54a:	7812      	ldrb	r2, [r2, #0]
 800a54c:	b2d2      	uxtb	r2, r2
 800a54e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a554:	1c5a      	adds	r2, r3, #1
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a560:	b29b      	uxth	r3, r3
 800a562:	3b04      	subs	r3, #4
 800a564:	b29a      	uxth	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a56c:	e046      	b.n	800a5fc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a574:	b29b      	uxth	r3, r3
 800a576:	2b03      	cmp	r3, #3
 800a578:	d81c      	bhi.n	800a5b4 <HAL_SPI_Receive+0x460>
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d017      	beq.n	800a5b4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a590:	7812      	ldrb	r2, [r2, #0]
 800a592:	b2d2      	uxtb	r2, r2
 800a594:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5b2:	e023      	b.n	800a5fc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5b4:	f7f9 fa12 	bl	80039dc <HAL_GetTick>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d803      	bhi.n	800a5cc <HAL_SPI_Receive+0x478>
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d102      	bne.n	800a5d2 <HAL_SPI_Receive+0x47e>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d114      	bne.n	800a5fc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 fd84 	bl	800b0e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e019      	b.n	800a630 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a602:	b29b      	uxth	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f af41 	bne.w	800a48c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 fd68 	bl	800b0e0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e000      	b.n	800a630 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a62e:	2300      	movs	r3, #0
  }
}
 800a630:	4618      	mov	r0, r3
 800a632:	3720      	adds	r7, #32
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08e      	sub	sp, #56	@ 0x38
 800a63c:	af02      	add	r7, sp, #8
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3320      	adds	r3, #32
 800a64c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3330      	adds	r3, #48	@ 0x30
 800a654:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a65a:	095b      	lsrs	r3, r3, #5
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	3301      	adds	r3, #1
 800a660:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a662:	f7f9 f9bb 	bl	80039dc <HAL_GetTick>
 800a666:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a668:	887b      	ldrh	r3, [r7, #2]
 800a66a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a66c:	887b      	ldrh	r3, [r7, #2]
 800a66e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d001      	beq.n	800a680 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800a67c:	2302      	movs	r3, #2
 800a67e:	e310      	b.n	800aca2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <HAL_SPI_TransmitReceive+0x5a>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <HAL_SPI_TransmitReceive+0x5a>
 800a68c:	887b      	ldrh	r3, [r7, #2]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e305      	b.n	800aca2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d101      	bne.n	800a6a4 <HAL_SPI_TransmitReceive+0x6c>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e2fe      	b.n	800aca2 <HAL_SPI_TransmitReceive+0x66a>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2205      	movs	r2, #5
 800a6b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	887a      	ldrh	r2, [r7, #2]
 800a6c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	887a      	ldrh	r2, [r7, #2]
 800a6ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	887a      	ldrh	r2, [r7, #2]
 800a6dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	887a      	ldrh	r2, [r7, #2]
 800a6e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68da      	ldr	r2, [r3, #12]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a702:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a70      	ldr	r2, [pc, #448]	@ (800a8cc <HAL_SPI_TransmitReceive+0x294>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d009      	beq.n	800a722 <HAL_SPI_TransmitReceive+0xea>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a6f      	ldr	r2, [pc, #444]	@ (800a8d0 <HAL_SPI_TransmitReceive+0x298>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d004      	beq.n	800a722 <HAL_SPI_TransmitReceive+0xea>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a6d      	ldr	r2, [pc, #436]	@ (800a8d4 <HAL_SPI_TransmitReceive+0x29c>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d102      	bne.n	800a728 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a722:	2310      	movs	r3, #16
 800a724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a726:	e001      	b.n	800a72c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a728:	2308      	movs	r3, #8
 800a72a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	4b69      	ldr	r3, [pc, #420]	@ (800a8d8 <HAL_SPI_TransmitReceive+0x2a0>)
 800a734:	4013      	ands	r3, r2
 800a736:	8879      	ldrh	r1, [r7, #2]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	6812      	ldr	r2, [r2, #0]
 800a73c:	430b      	orrs	r3, r1
 800a73e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f042 0201 	orr.w	r2, r2, #1
 800a74e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a758:	d107      	bne.n	800a76a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a768:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	2b0f      	cmp	r3, #15
 800a770:	f240 80a2 	bls.w	800a8b8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a776:	089b      	lsrs	r3, r3, #2
 800a778:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a77a:	e094      	b.n	800a8a6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	f003 0302 	and.w	r3, r3, #2
 800a786:	2b02      	cmp	r3, #2
 800a788:	d120      	bne.n	800a7cc <HAL_SPI_TransmitReceive+0x194>
 800a78a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d01d      	beq.n	800a7cc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a790:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a792:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a796:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a798:	429a      	cmp	r2, r3
 800a79a:	d217      	bcs.n	800a7cc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7ac:	1d1a      	adds	r2, r3, #4
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a7d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d065      	beq.n	800a8a6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d118      	bne.n	800a81a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a7f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7f8:	1d1a      	adds	r2, r3, #4
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a804:	b29b      	uxth	r3, r3
 800a806:	3b01      	subs	r3, #1
 800a808:	b29a      	uxth	r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a816:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a818:	e045      	b.n	800a8a6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a81a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a81c:	8bfb      	ldrh	r3, [r7, #30]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d21d      	bcs.n	800a85e <HAL_SPI_TransmitReceive+0x226>
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d018      	beq.n	800a85e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a834:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a836:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a83c:	1d1a      	adds	r2, r3, #4
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a848:	b29b      	uxth	r3, r3
 800a84a:	3b01      	subs	r3, #1
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a85a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a85c:	e023      	b.n	800a8a6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a85e:	f7f9 f8bd 	bl	80039dc <HAL_GetTick>
 800a862:	4602      	mov	r2, r0
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d803      	bhi.n	800a876 <HAL_SPI_TransmitReceive+0x23e>
 800a86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a874:	d102      	bne.n	800a87c <HAL_SPI_TransmitReceive+0x244>
 800a876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d114      	bne.n	800a8a6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 fc2f 	bl	800b0e0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a888:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e1fd      	b.n	800aca2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a8a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f47f af67 	bne.w	800a77c <HAL_SPI_TransmitReceive+0x144>
 800a8ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f47f af63 	bne.w	800a77c <HAL_SPI_TransmitReceive+0x144>
 800a8b6:	e1ce      	b.n	800ac56 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	2b07      	cmp	r3, #7
 800a8be:	f240 81c2 	bls.w	800ac46 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c4:	085b      	lsrs	r3, r3, #1
 800a8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a8c8:	e0c9      	b.n	800aa5e <HAL_SPI_TransmitReceive+0x426>
 800a8ca:	bf00      	nop
 800a8cc:	40013000 	.word	0x40013000
 800a8d0:	40003800 	.word	0x40003800
 800a8d4:	40003c00 	.word	0x40003c00
 800a8d8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	f003 0302 	and.w	r3, r3, #2
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d11f      	bne.n	800a92a <HAL_SPI_TransmitReceive+0x2f2>
 800a8ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d01c      	beq.n	800a92a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a8f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a8f2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d216      	bcs.n	800a92a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a900:	881a      	ldrh	r2, [r3, #0]
 800a902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a904:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a90a:	1c9a      	adds	r2, r3, #2
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a916:	b29b      	uxth	r3, r3
 800a918:	3b01      	subs	r3, #1
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a928:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a932:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 8092 	beq.w	800aa5e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	2b01      	cmp	r3, #1
 800a946:	d118      	bne.n	800a97a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a94c:	6a3a      	ldr	r2, [r7, #32]
 800a94e:	8812      	ldrh	r2, [r2, #0]
 800a950:	b292      	uxth	r2, r2
 800a952:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a958:	1c9a      	adds	r2, r3, #2
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a964:	b29b      	uxth	r3, r3
 800a966:	3b01      	subs	r3, #1
 800a968:	b29a      	uxth	r2, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a976:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a978:	e071      	b.n	800aa5e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a97a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a97c:	8bfb      	ldrh	r3, [r7, #30]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d228      	bcs.n	800a9d4 <HAL_SPI_TransmitReceive+0x39c>
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d023      	beq.n	800a9d4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a990:	6a3a      	ldr	r2, [r7, #32]
 800a992:	8812      	ldrh	r2, [r2, #0]
 800a994:	b292      	uxth	r2, r2
 800a996:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a99c:	1c9a      	adds	r2, r3, #2
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a6:	6a3a      	ldr	r2, [r7, #32]
 800a9a8:	8812      	ldrh	r2, [r2, #0]
 800a9aa:	b292      	uxth	r2, r2
 800a9ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9b2:	1c9a      	adds	r2, r3, #2
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	3b02      	subs	r3, #2
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9d0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a9d2:	e044      	b.n	800aa5e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a9d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d11d      	bne.n	800aa16 <HAL_SPI_TransmitReceive+0x3de>
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d018      	beq.n	800aa16 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9e8:	6a3a      	ldr	r2, [r7, #32]
 800a9ea:	8812      	ldrh	r2, [r2, #0]
 800a9ec:	b292      	uxth	r2, r2
 800a9ee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9f4:	1c9a      	adds	r2, r3, #2
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	3b01      	subs	r3, #1
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa12:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aa14:	e023      	b.n	800aa5e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa16:	f7f8 ffe1 	bl	80039dc <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d803      	bhi.n	800aa2e <HAL_SPI_TransmitReceive+0x3f6>
 800aa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d102      	bne.n	800aa34 <HAL_SPI_TransmitReceive+0x3fc>
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d114      	bne.n	800aa5e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 fb53 	bl	800b0e0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e121      	b.n	800aca2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aa5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f47f af3b 	bne.w	800a8dc <HAL_SPI_TransmitReceive+0x2a4>
 800aa66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f47f af37 	bne.w	800a8dc <HAL_SPI_TransmitReceive+0x2a4>
 800aa6e:	e0f2      	b.n	800ac56 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d121      	bne.n	800aac2 <HAL_SPI_TransmitReceive+0x48a>
 800aa7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d01e      	beq.n	800aac2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800aa84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aa86:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800aa88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d218      	bcs.n	800aac2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3320      	adds	r3, #32
 800aa9a:	7812      	ldrb	r2, [r2, #0]
 800aa9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aac0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800aaca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 80ba 	beq.w	800ac46 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d11b      	bne.n	800ab18 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaec:	7812      	ldrb	r2, [r2, #0]
 800aaee:	b2d2      	uxtb	r2, r2
 800aaf0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	3b01      	subs	r3, #1
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab14:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ab16:	e096      	b.n	800ac46 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ab18:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ab1a:	8bfb      	ldrh	r3, [r7, #30]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d24a      	bcs.n	800abb6 <HAL_SPI_TransmitReceive+0x57e>
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d045      	beq.n	800abb6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab36:	7812      	ldrb	r2, [r2, #0]
 800ab38:	b2d2      	uxtb	r2, r2
 800ab3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab52:	7812      	ldrb	r2, [r2, #0]
 800ab54:	b2d2      	uxtb	r2, r2
 800ab56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab5c:	1c5a      	adds	r2, r3, #1
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab6e:	7812      	ldrb	r2, [r2, #0]
 800ab70:	b2d2      	uxtb	r2, r2
 800ab72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab8a:	7812      	ldrb	r2, [r2, #0]
 800ab8c:	b2d2      	uxtb	r2, r2
 800ab8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	3b04      	subs	r3, #4
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abb2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800abb4:	e047      	b.n	800ac46 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800abb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d820      	bhi.n	800abfe <HAL_SPI_TransmitReceive+0x5c6>
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d01b      	beq.n	800abfe <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abd2:	7812      	ldrb	r2, [r2, #0]
 800abd4:	b2d2      	uxtb	r2, r2
 800abd6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abe8:	b29b      	uxth	r3, r3
 800abea:	3b01      	subs	r3, #1
 800abec:	b29a      	uxth	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abfa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800abfc:	e023      	b.n	800ac46 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abfe:	f7f8 feed 	bl	80039dc <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d803      	bhi.n	800ac16 <HAL_SPI_TransmitReceive+0x5de>
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac14:	d102      	bne.n	800ac1c <HAL_SPI_TransmitReceive+0x5e4>
 800ac16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d114      	bne.n	800ac46 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f000 fa5f 	bl	800b0e0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e02d      	b.n	800aca2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ac46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f47f af11 	bne.w	800aa70 <HAL_SPI_TransmitReceive+0x438>
 800ac4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f47f af0d 	bne.w	800aa70 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2108      	movs	r1, #8
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 fadd 	bl	800b220 <SPI_WaitOnFlagUntilTimeout>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d007      	beq.n	800ac7c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac72:	f043 0220 	orr.w	r2, r3, #32
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 fa2f 	bl	800b0e0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e000      	b.n	800aca2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800aca0:	2300      	movs	r3, #0
  }
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3730      	adds	r7, #48	@ 0x30
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop

0800acac <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b08a      	sub	sp, #40	@ 0x28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	695b      	ldr	r3, [r3, #20]
 800acc2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800acc4:	6a3a      	ldr	r2, [r7, #32]
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	4013      	ands	r3, r2
 800acca:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800acde:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3330      	adds	r3, #48	@ 0x30
 800ace6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d010      	beq.n	800ad14 <HAL_SPI_IRQHandler+0x68>
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	f003 0308 	and.w	r3, r3, #8
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00b      	beq.n	800ad14 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	699a      	ldr	r2, [r3, #24]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad0a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f9c3 	bl	800b098 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800ad12:	e192      	b.n	800b03a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d113      	bne.n	800ad46 <HAL_SPI_IRQHandler+0x9a>
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	f003 0320 	and.w	r3, r3, #32
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10e      	bne.n	800ad46 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d009      	beq.n	800ad46 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	4798      	blx	r3
    handled = 1UL;
 800ad42:	2301      	movs	r3, #1
 800ad44:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10f      	bne.n	800ad70 <HAL_SPI_IRQHandler+0xc4>
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d105      	bne.n	800ad70 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	4798      	blx	r3
    handled = 1UL;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	f003 0320 	and.w	r3, r3, #32
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10f      	bne.n	800ad9a <HAL_SPI_IRQHandler+0xee>
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	f003 0302 	and.w	r3, r3, #2
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00a      	beq.n	800ad9a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d105      	bne.n	800ad9a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	4798      	blx	r3
    handled = 1UL;
 800ad96:	2301      	movs	r3, #1
 800ad98:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 8147 	bne.w	800b030 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	f003 0308 	and.w	r3, r3, #8
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 808b 	beq.w	800aec4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	699a      	ldr	r2, [r3, #24]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f042 0208 	orr.w	r2, r2, #8
 800adbc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	699a      	ldr	r2, [r3, #24]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f042 0210 	orr.w	r2, r2, #16
 800adcc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	699a      	ldr	r2, [r3, #24]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800addc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	691a      	ldr	r2, [r3, #16]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f022 0208 	bic.w	r2, r2, #8
 800adec:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d13d      	bne.n	800ae78 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800adfc:	e036      	b.n	800ae6c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	2b0f      	cmp	r3, #15
 800ae04:	d90b      	bls.n	800ae1e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ae10:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae16:	1d1a      	adds	r2, r3, #4
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	665a      	str	r2, [r3, #100]	@ 0x64
 800ae1c:	e01d      	b.n	800ae5a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	2b07      	cmp	r3, #7
 800ae24:	d90b      	bls.n	800ae3e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	8812      	ldrh	r2, [r2, #0]
 800ae2e:	b292      	uxth	r2, r2
 800ae30:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae36:	1c9a      	adds	r2, r3, #2
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	665a      	str	r2, [r3, #100]	@ 0x64
 800ae3c:	e00d      	b.n	800ae5a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae4a:	7812      	ldrb	r2, [r2, #0]
 800ae4c:	b2d2      	uxtb	r2, r2
 800ae4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	3b01      	subs	r3, #1
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1c2      	bne.n	800adfe <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f931 	bl	800b0e0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d003      	beq.n	800ae98 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f8f7 	bl	800b084 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ae96:	e0d0      	b.n	800b03a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ae98:	7cfb      	ldrb	r3, [r7, #19]
 800ae9a:	2b05      	cmp	r3, #5
 800ae9c:	d103      	bne.n	800aea6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f8e6 	bl	800b070 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800aea4:	e0c6      	b.n	800b034 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800aea6:	7cfb      	ldrb	r3, [r7, #19]
 800aea8:	2b04      	cmp	r3, #4
 800aeaa:	d103      	bne.n	800aeb4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f8d5 	bl	800b05c <HAL_SPI_RxCpltCallback>
    return;
 800aeb2:	e0bf      	b.n	800b034 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800aeb4:	7cfb      	ldrb	r3, [r7, #19]
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	f040 80bc 	bne.w	800b034 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f8c3 	bl	800b048 <HAL_SPI_TxCpltCallback>
    return;
 800aec2:	e0b7      	b.n	800b034 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 80b5 	beq.w	800b03a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00f      	beq.n	800aefa <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aee0:	f043 0204 	orr.w	r2, r3, #4
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	699a      	ldr	r2, [r3, #24]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aef8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00f      	beq.n	800af24 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af0a:	f043 0201 	orr.w	r2, r3, #1
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	699a      	ldr	r2, [r3, #24]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af22:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00f      	beq.n	800af4e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af34:	f043 0208 	orr.w	r2, r3, #8
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	699a      	ldr	r2, [r3, #24]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af4c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	f003 0320 	and.w	r3, r3, #32
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00f      	beq.n	800af78 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	699a      	ldr	r2, [r3, #24]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f042 0220 	orr.w	r2, r2, #32
 800af76:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d05a      	beq.n	800b038 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f022 0201 	bic.w	r2, r2, #1
 800af90:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	6919      	ldr	r1, [r3, #16]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	4b28      	ldr	r3, [pc, #160]	@ (800b040 <HAL_SPI_IRQHandler+0x394>)
 800af9e:	400b      	ands	r3, r1
 800afa0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800afa8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800afac:	d138      	bne.n	800b020 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	689a      	ldr	r2, [r3, #8]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800afbc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d013      	beq.n	800afee <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afca:	4a1e      	ldr	r2, [pc, #120]	@ (800b044 <HAL_SPI_IRQHandler+0x398>)
 800afcc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7f9 f9aa 	bl	800432c <HAL_DMA_Abort_IT>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d007      	beq.n	800afee <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afe4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d020      	beq.n	800b038 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800affa:	4a12      	ldr	r2, [pc, #72]	@ (800b044 <HAL_SPI_IRQHandler+0x398>)
 800affc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b002:	4618      	mov	r0, r3
 800b004:	f7f9 f992 	bl	800432c <HAL_DMA_Abort_IT>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d014      	beq.n	800b038 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b014:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b01e:	e00b      	b.n	800b038 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f82b 	bl	800b084 <HAL_SPI_ErrorCallback>
    return;
 800b02e:	e003      	b.n	800b038 <HAL_SPI_IRQHandler+0x38c>
    return;
 800b030:	bf00      	nop
 800b032:	e002      	b.n	800b03a <HAL_SPI_IRQHandler+0x38e>
    return;
 800b034:	bf00      	nop
 800b036:	e000      	b.n	800b03a <HAL_SPI_IRQHandler+0x38e>
    return;
 800b038:	bf00      	nop
  }
}
 800b03a:	3728      	adds	r7, #40	@ 0x28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	fffffc94 	.word	0xfffffc94
 800b044:	0800b0ad 	.word	0x0800b0ad

0800b048 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f7ff ffd6 	bl	800b084 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b0d8:	bf00      	nop
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	699a      	ldr	r2, [r3, #24]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f042 0208 	orr.w	r2, r2, #8
 800b0fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	699a      	ldr	r2, [r3, #24]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f042 0210 	orr.w	r2, r2, #16
 800b10e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0201 	bic.w	r2, r2, #1
 800b11e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6919      	ldr	r1, [r3, #16]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	4b3c      	ldr	r3, [pc, #240]	@ (800b21c <SPI_CloseTransfer+0x13c>)
 800b12c:	400b      	ands	r3, r1
 800b12e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689a      	ldr	r2, [r3, #8]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b13e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b04      	cmp	r3, #4
 800b14a:	d014      	beq.n	800b176 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f003 0320 	and.w	r3, r3, #32
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00f      	beq.n	800b176 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b15c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	699a      	ldr	r2, [r3, #24]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f042 0220 	orr.w	r2, r2, #32
 800b174:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d014      	beq.n	800b1ac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00f      	beq.n	800b1ac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b192:	f043 0204 	orr.w	r2, r3, #4
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	699a      	ldr	r2, [r3, #24]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1aa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00f      	beq.n	800b1d6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1bc:	f043 0201 	orr.w	r2, r3, #1
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	699a      	ldr	r2, [r3, #24]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1d4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00f      	beq.n	800b200 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1e6:	f043 0208 	orr.w	r2, r3, #8
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	699a      	ldr	r2, [r3, #24]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b1fe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b210:	bf00      	nop
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	fffffc90 	.word	0xfffffc90

0800b220 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	603b      	str	r3, [r7, #0]
 800b22c:	4613      	mov	r3, r2
 800b22e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b230:	e010      	b.n	800b254 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b232:	f7f8 fbd3 	bl	80039dc <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d803      	bhi.n	800b24a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b248:	d102      	bne.n	800b250 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	e00f      	b.n	800b274 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	695a      	ldr	r2, [r3, #20]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	4013      	ands	r3, r2
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	429a      	cmp	r2, r3
 800b262:	bf0c      	ite	eq
 800b264:	2301      	moveq	r3, #1
 800b266:	2300      	movne	r3, #0
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	461a      	mov	r2, r3
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d0df      	beq.n	800b232 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b288:	095b      	lsrs	r3, r3, #5
 800b28a:	3301      	adds	r3, #1
 800b28c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	3301      	adds	r3, #1
 800b294:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	3307      	adds	r3, #7
 800b29a:	08db      	lsrs	r3, r3, #3
 800b29c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e049      	b.n	800b358 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d106      	bne.n	800b2de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7f8 f95b 	bl	8003594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f000 f99d 	bl	800b630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2201      	movs	r2, #1
 800b342:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2201      	movs	r2, #1
 800b352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68da      	ldr	r2, [r3, #12]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f022 0201 	bic.w	r2, r2, #1
 800b376:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6a1a      	ldr	r2, [r3, #32]
 800b37e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b382:	4013      	ands	r3, r2
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10f      	bne.n	800b3a8 <HAL_TIM_Base_Stop_IT+0x48>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	6a1a      	ldr	r2, [r3, #32]
 800b38e:	f240 4344 	movw	r3, #1092	@ 0x444
 800b392:	4013      	ands	r3, r2
 800b394:	2b00      	cmp	r3, #0
 800b396:	d107      	bne.n	800b3a8 <HAL_TIM_Base_Stop_IT+0x48>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f022 0201 	bic.w	r2, r2, #1
 800b3a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b084      	sub	sp, #16
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f003 0302 	and.w	r3, r3, #2
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d020      	beq.n	800b422 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f003 0302 	and.w	r3, r3, #2
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d01b      	beq.n	800b422 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f06f 0202 	mvn.w	r2, #2
 800b3f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	f003 0303 	and.w	r3, r3, #3
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f8f3 	bl	800b5f4 <HAL_TIM_IC_CaptureCallback>
 800b40e:	e005      	b.n	800b41c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f8e5 	bl	800b5e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 f8f6 	bl	800b608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d020      	beq.n	800b46e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f003 0304 	and.w	r3, r3, #4
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01b      	beq.n	800b46e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f06f 0204 	mvn.w	r2, #4
 800b43e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b450:	2b00      	cmp	r3, #0
 800b452:	d003      	beq.n	800b45c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f8cd 	bl	800b5f4 <HAL_TIM_IC_CaptureCallback>
 800b45a:	e005      	b.n	800b468 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f8bf 	bl	800b5e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f8d0 	bl	800b608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	f003 0308 	and.w	r3, r3, #8
 800b474:	2b00      	cmp	r3, #0
 800b476:	d020      	beq.n	800b4ba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f003 0308 	and.w	r3, r3, #8
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d01b      	beq.n	800b4ba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f06f 0208 	mvn.w	r2, #8
 800b48a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2204      	movs	r2, #4
 800b490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	f003 0303 	and.w	r3, r3, #3
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f8a7 	bl	800b5f4 <HAL_TIM_IC_CaptureCallback>
 800b4a6:	e005      	b.n	800b4b4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f899 	bl	800b5e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f8aa 	bl	800b608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f003 0310 	and.w	r3, r3, #16
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d020      	beq.n	800b506 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f003 0310 	and.w	r3, r3, #16
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d01b      	beq.n	800b506 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f06f 0210 	mvn.w	r2, #16
 800b4d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2208      	movs	r2, #8
 800b4dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d003      	beq.n	800b4f4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f881 	bl	800b5f4 <HAL_TIM_IC_CaptureCallback>
 800b4f2:	e005      	b.n	800b500 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f873 	bl	800b5e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f884 	bl	800b608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00c      	beq.n	800b52a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d007      	beq.n	800b52a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f06f 0201 	mvn.w	r2, #1
 800b522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 f851 	bl	800b5cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b530:	2b00      	cmp	r3, #0
 800b532:	d104      	bne.n	800b53e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00c      	beq.n	800b558 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b544:	2b00      	cmp	r3, #0
 800b546:	d007      	beq.n	800b558 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f9aa 	bl	800b8ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00c      	beq.n	800b57c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d007      	beq.n	800b57c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f9a2 	bl	800b8c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00c      	beq.n	800b5a0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d007      	beq.n	800b5a0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f83e 	bl	800b61c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	f003 0320 	and.w	r3, r3, #32
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00c      	beq.n	800b5c4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f003 0320 	and.w	r3, r3, #32
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d007      	beq.n	800b5c4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f06f 0220 	mvn.w	r2, #32
 800b5bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f96a 	bl	800b898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b5c4:	bf00      	nop
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a46      	ldr	r2, [pc, #280]	@ (800b75c <TIM_Base_SetConfig+0x12c>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d013      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b64e:	d00f      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a43      	ldr	r2, [pc, #268]	@ (800b760 <TIM_Base_SetConfig+0x130>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d00b      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a42      	ldr	r2, [pc, #264]	@ (800b764 <TIM_Base_SetConfig+0x134>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d007      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a41      	ldr	r2, [pc, #260]	@ (800b768 <TIM_Base_SetConfig+0x138>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d003      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a40      	ldr	r2, [pc, #256]	@ (800b76c <TIM_Base_SetConfig+0x13c>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d108      	bne.n	800b682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a35      	ldr	r2, [pc, #212]	@ (800b75c <TIM_Base_SetConfig+0x12c>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d01f      	beq.n	800b6ca <TIM_Base_SetConfig+0x9a>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b690:	d01b      	beq.n	800b6ca <TIM_Base_SetConfig+0x9a>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a32      	ldr	r2, [pc, #200]	@ (800b760 <TIM_Base_SetConfig+0x130>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d017      	beq.n	800b6ca <TIM_Base_SetConfig+0x9a>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a31      	ldr	r2, [pc, #196]	@ (800b764 <TIM_Base_SetConfig+0x134>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d013      	beq.n	800b6ca <TIM_Base_SetConfig+0x9a>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a30      	ldr	r2, [pc, #192]	@ (800b768 <TIM_Base_SetConfig+0x138>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d00f      	beq.n	800b6ca <TIM_Base_SetConfig+0x9a>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a2f      	ldr	r2, [pc, #188]	@ (800b76c <TIM_Base_SetConfig+0x13c>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d00b      	beq.n	800b6ca <TIM_Base_SetConfig+0x9a>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a2e      	ldr	r2, [pc, #184]	@ (800b770 <TIM_Base_SetConfig+0x140>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d007      	beq.n	800b6ca <TIM_Base_SetConfig+0x9a>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a2d      	ldr	r2, [pc, #180]	@ (800b774 <TIM_Base_SetConfig+0x144>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d003      	beq.n	800b6ca <TIM_Base_SetConfig+0x9a>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a2c      	ldr	r2, [pc, #176]	@ (800b778 <TIM_Base_SetConfig+0x148>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d108      	bne.n	800b6dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	689a      	ldr	r2, [r3, #8]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a16      	ldr	r2, [pc, #88]	@ (800b75c <TIM_Base_SetConfig+0x12c>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d00f      	beq.n	800b728 <TIM_Base_SetConfig+0xf8>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a18      	ldr	r2, [pc, #96]	@ (800b76c <TIM_Base_SetConfig+0x13c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d00b      	beq.n	800b728 <TIM_Base_SetConfig+0xf8>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a17      	ldr	r2, [pc, #92]	@ (800b770 <TIM_Base_SetConfig+0x140>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d007      	beq.n	800b728 <TIM_Base_SetConfig+0xf8>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a16      	ldr	r2, [pc, #88]	@ (800b774 <TIM_Base_SetConfig+0x144>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d003      	beq.n	800b728 <TIM_Base_SetConfig+0xf8>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a15      	ldr	r2, [pc, #84]	@ (800b778 <TIM_Base_SetConfig+0x148>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d103      	bne.n	800b730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	691a      	ldr	r2, [r3, #16]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d105      	bne.n	800b74e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	f023 0201 	bic.w	r2, r3, #1
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	611a      	str	r2, [r3, #16]
  }
}
 800b74e:	bf00      	nop
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	40010000 	.word	0x40010000
 800b760:	40000400 	.word	0x40000400
 800b764:	40000800 	.word	0x40000800
 800b768:	40000c00 	.word	0x40000c00
 800b76c:	40010400 	.word	0x40010400
 800b770:	40014000 	.word	0x40014000
 800b774:	40014400 	.word	0x40014400
 800b778:	40014800 	.word	0x40014800

0800b77c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d101      	bne.n	800b794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b790:	2302      	movs	r3, #2
 800b792:	e06d      	b.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2202      	movs	r2, #2
 800b7a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a30      	ldr	r2, [pc, #192]	@ (800b87c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d004      	beq.n	800b7c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a2f      	ldr	r2, [pc, #188]	@ (800b880 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d108      	bne.n	800b7da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b7ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a20      	ldr	r2, [pc, #128]	@ (800b87c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d022      	beq.n	800b844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b806:	d01d      	beq.n	800b844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a1d      	ldr	r2, [pc, #116]	@ (800b884 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d018      	beq.n	800b844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a1c      	ldr	r2, [pc, #112]	@ (800b888 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d013      	beq.n	800b844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a1a      	ldr	r2, [pc, #104]	@ (800b88c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d00e      	beq.n	800b844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a15      	ldr	r2, [pc, #84]	@ (800b880 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d009      	beq.n	800b844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a16      	ldr	r2, [pc, #88]	@ (800b890 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d004      	beq.n	800b844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a15      	ldr	r2, [pc, #84]	@ (800b894 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d10c      	bne.n	800b85e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b84a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	4313      	orrs	r3, r2
 800b854:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2201      	movs	r2, #1
 800b862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	40010000 	.word	0x40010000
 800b880:	40010400 	.word	0x40010400
 800b884:	40000400 	.word	0x40000400
 800b888:	40000800 	.word	0x40000800
 800b88c:	40000c00 	.word	0x40000c00
 800b890:	40001800 	.word	0x40001800
 800b894:	40014000 	.word	0x40014000

0800b898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b8d8:	4904      	ldr	r1, [pc, #16]	@ (800b8ec <MX_FATFS_Init+0x18>)
 800b8da:	4805      	ldr	r0, [pc, #20]	@ (800b8f0 <MX_FATFS_Init+0x1c>)
 800b8dc:	f003 fb72 	bl	800efc4 <FATFS_LinkDriver>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	4b03      	ldr	r3, [pc, #12]	@ (800b8f4 <MX_FATFS_Init+0x20>)
 800b8e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b8e8:	bf00      	nop
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	24000370 	.word	0x24000370
 800b8f0:	24000014 	.word	0x24000014
 800b8f4:	2400036c 	.word	0x2400036c

0800b8f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b8fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	4603      	mov	r3, r0
 800b910:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800b912:	79fb      	ldrb	r3, [r7, #7]
 800b914:	4618      	mov	r0, r3
 800b916:	f000 f9fd 	bl	800bd14 <USER_SPI_initialize>
 800b91a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	4618      	mov	r0, r3
 800b932:	f000 facf 	bl	800bed4 <USER_SPI_status>
 800b936:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60b9      	str	r1, [r7, #8]
 800b948:	607a      	str	r2, [r7, #4]
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800b950:	7bf8      	ldrb	r0, [r7, #15]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	68b9      	ldr	r1, [r7, #8]
 800b958:	f000 fad2 	bl	800bf00 <USER_SPI_read>
 800b95c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
 800b970:	603b      	str	r3, [r7, #0]
 800b972:	4603      	mov	r3, r0
 800b974:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800b976:	7bf8      	ldrb	r0, [r7, #15]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	68b9      	ldr	r1, [r7, #8]
 800b97e:	f000 fb25 	bl	800bfcc <USER_SPI_write>
 800b982:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	603a      	str	r2, [r7, #0]
 800b996:	71fb      	strb	r3, [r7, #7]
 800b998:	460b      	mov	r3, r1
 800b99a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800b99c:	79b9      	ldrb	r1, [r7, #6]
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 fb8e 	bl	800c0c4 <USER_SPI_ioctl>
 800b9a8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 800b9b2:	b480      	push	{r7}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f022 0201 	bic.w	r2, r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	071a      	lsls	r2, r3, #28
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f042 0201 	orr.w	r2, r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]
}
 800b9f2:	bf00      	nop
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
	...

0800ba00 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800ba08:	f7f7 ffe8 	bl	80039dc <HAL_GetTick>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	4a04      	ldr	r2, [pc, #16]	@ (800ba20 <SPI_Timer_On+0x20>)
 800ba10:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800ba12:	4a04      	ldr	r2, [pc, #16]	@ (800ba24 <SPI_Timer_On+0x24>)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6013      	str	r3, [r2, #0]
}
 800ba18:	bf00      	nop
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	24000378 	.word	0x24000378
 800ba24:	2400037c 	.word	0x2400037c

0800ba28 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800ba2c:	f7f7 ffd6 	bl	80039dc <HAL_GetTick>
 800ba30:	4602      	mov	r2, r0
 800ba32:	4b06      	ldr	r3, [pc, #24]	@ (800ba4c <SPI_Timer_Status+0x24>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	1ad2      	subs	r2, r2, r3
 800ba38:	4b05      	ldr	r3, [pc, #20]	@ (800ba50 <SPI_Timer_Status+0x28>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	bf34      	ite	cc
 800ba40:	2301      	movcc	r3, #1
 800ba42:	2300      	movcs	r3, #0
 800ba44:	b2db      	uxtb	r3, r3
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	24000378 	.word	0x24000378
 800ba50:	2400037c 	.word	0x2400037c

0800ba54 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, HAL_MAX_DELAY);
 800ba5e:	f107 020f 	add.w	r2, r7, #15
 800ba62:	1df9      	adds	r1, r7, #7
 800ba64:	f04f 33ff 	mov.w	r3, #4294967295
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	4803      	ldr	r0, [pc, #12]	@ (800ba7c <xchg_spi+0x28>)
 800ba6e:	f7fe fde3 	bl	800a638 <HAL_SPI_TransmitReceive>
//	 Clear the DMA transfer complete flag
//    while (__HAL_DMA_GET_FLAG(hspi2.hdmarx, DMA_FLAG_TCIF3_7) == RESET) {
//        // Optionally, add a timeout here
//    }

    return rxDat;
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	240001a0 	.word	0x240001a0

0800ba80 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800ba80:	b590      	push	{r4, r7, lr}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	e00a      	b.n	800baa6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	18d4      	adds	r4, r2, r3
 800ba96:	20ff      	movs	r0, #255	@ 0xff
 800ba98:	f7ff ffdc 	bl	800ba54 <xchg_spi>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3301      	adds	r3, #1
 800baa4:	60fb      	str	r3, [r7, #12]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d3f0      	bcc.n	800ba90 <rcvr_spi_multi+0x10>
	}
}
 800baae:	bf00      	nop
 800bab0:	bf00      	nop
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd90      	pop	{r4, r7, pc}

0800bab8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	f04f 33ff 	mov.w	r3, #4294967295
 800baca:	6879      	ldr	r1, [r7, #4]
 800bacc:	4803      	ldr	r0, [pc, #12]	@ (800badc <xmit_spi_multi+0x24>)
 800bace:	f7fe f953 	bl	8009d78 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, buff, btx);

//	while ((READ_BIT(hspi->Instance->IER, SPI_IT_EOT) == 0)) {}

}
 800bad2:	bf00      	nop
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	240001a0 	.word	0x240001a0

0800bae0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800bae8:	f7f7 ff78 	bl	80039dc <HAL_GetTick>
 800baec:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800baf2:	20ff      	movs	r0, #255	@ 0xff
 800baf4:	f7ff ffae 	bl	800ba54 <xchg_spi>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	2bff      	cmp	r3, #255	@ 0xff
 800bb00:	d007      	beq.n	800bb12 <wait_ready+0x32>
 800bb02:	f7f7 ff6b 	bl	80039dc <HAL_GetTick>
 800bb06:	4602      	mov	r2, r0
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d8ef      	bhi.n	800baf2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	2bff      	cmp	r3, #255	@ 0xff
 800bb16:	bf0c      	ite	eq
 800bb18:	2301      	moveq	r3, #1
 800bb1a:	2300      	movne	r3, #0
 800bb1c:	b2db      	uxtb	r3, r3
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
	...

0800bb28 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

void despiselect (void)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bb32:	4804      	ldr	r0, [pc, #16]	@ (800bb44 <despiselect+0x1c>)
 800bb34:	f7fa f956 	bl	8005de4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800bb38:	20ff      	movs	r0, #255	@ 0xff
 800bb3a:	f7ff ff8b 	bl	800ba54 <xchg_spi>

}
 800bb3e:	bf00      	nop
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	58020400 	.word	0x58020400

0800bb48 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/


int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800bb52:	480a      	ldr	r0, [pc, #40]	@ (800bb7c <spiselect+0x34>)
 800bb54:	f7fa f946 	bl	8005de4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800bb58:	20ff      	movs	r0, #255	@ 0xff
 800bb5a:	f7ff ff7b 	bl	800ba54 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800bb5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bb62:	f7ff ffbd 	bl	800bae0 <wait_ready>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <spiselect+0x28>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e002      	b.n	800bb76 <spiselect+0x2e>

	despiselect();
 800bb70:	f7ff ffda 	bl	800bb28 <despiselect>
	return 0;	/* Timeout */
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	58020400 	.word	0x58020400

0800bb80 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800bb8a:	20c8      	movs	r0, #200	@ 0xc8
 800bb8c:	f7ff ff38 	bl	800ba00 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800bb90:	20ff      	movs	r0, #255	@ 0xff
 800bb92:	f7ff ff5f 	bl	800ba54 <xchg_spi>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
 800bb9c:	2bff      	cmp	r3, #255	@ 0xff
 800bb9e:	d104      	bne.n	800bbaa <rcvr_datablock+0x2a>
 800bba0:	f7ff ff42 	bl	800ba28 <SPI_Timer_Status>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1f2      	bne.n	800bb90 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	2bfe      	cmp	r3, #254	@ 0xfe
 800bbae:	d001      	beq.n	800bbb4 <rcvr_datablock+0x34>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	e00a      	b.n	800bbca <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff ff62 	bl	800ba80 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800bbbc:	20ff      	movs	r0, #255	@ 0xff
 800bbbe:	f7ff ff49 	bl	800ba54 <xchg_spi>
 800bbc2:	20ff      	movs	r0, #255	@ 0xff
 800bbc4:	f7ff ff46 	bl	800ba54 <xchg_spi>

	return 1;						/* Function succeeded */
 800bbc8:	2301      	movs	r3, #1
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800bbde:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bbe2:	f7ff ff7d 	bl	800bae0 <wait_ready>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <xmit_datablock+0x1e>
 800bbec:	2300      	movs	r3, #0
 800bbee:	e01e      	b.n	800bc2e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7ff ff2e 	bl	800ba54 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800bbf8:	78fb      	ldrb	r3, [r7, #3]
 800bbfa:	2bfd      	cmp	r3, #253	@ 0xfd
 800bbfc:	d016      	beq.n	800bc2c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800bbfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7ff ff58 	bl	800bab8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800bc08:	20ff      	movs	r0, #255	@ 0xff
 800bc0a:	f7ff ff23 	bl	800ba54 <xchg_spi>
 800bc0e:	20ff      	movs	r0, #255	@ 0xff
 800bc10:	f7ff ff20 	bl	800ba54 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800bc14:	20ff      	movs	r0, #255	@ 0xff
 800bc16:	f7ff ff1d 	bl	800ba54 <xchg_spi>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
 800bc20:	f003 031f 	and.w	r3, r3, #31
 800bc24:	2b05      	cmp	r3, #5
 800bc26:	d001      	beq.n	800bc2c <xmit_datablock+0x5a>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	e000      	b.n	800bc2e <xmit_datablock+0x5c>
	}
	return 1;
 800bc2c:	2301      	movs	r3, #1
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	6039      	str	r1, [r7, #0]
 800bc40:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800bc42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	da0e      	bge.n	800bc68 <send_cmd+0x32>
		cmd &= 0x7F;
 800bc4a:	79fb      	ldrb	r3, [r7, #7]
 800bc4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc50:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800bc52:	2100      	movs	r1, #0
 800bc54:	2037      	movs	r0, #55	@ 0x37
 800bc56:	f7ff ffee 	bl	800bc36 <send_cmd>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d901      	bls.n	800bc68 <send_cmd+0x32>
 800bc64:	7bbb      	ldrb	r3, [r7, #14]
 800bc66:	e051      	b.n	800bd0c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800bc68:	79fb      	ldrb	r3, [r7, #7]
 800bc6a:	2b0c      	cmp	r3, #12
 800bc6c:	d008      	beq.n	800bc80 <send_cmd+0x4a>
		despiselect();
 800bc6e:	f7ff ff5b 	bl	800bb28 <despiselect>
		if (!spiselect()) return 0xFF;
 800bc72:	f7ff ff69 	bl	800bb48 <spiselect>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d101      	bne.n	800bc80 <send_cmd+0x4a>
 800bc7c:	23ff      	movs	r3, #255	@ 0xff
 800bc7e:	e045      	b.n	800bd0c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800bc80:	79fb      	ldrb	r3, [r7, #7]
 800bc82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff fee3 	bl	800ba54 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	0e1b      	lsrs	r3, r3, #24
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7ff fedd 	bl	800ba54 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	0c1b      	lsrs	r3, r3, #16
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7ff fed7 	bl	800ba54 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	0a1b      	lsrs	r3, r3, #8
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff fed1 	bl	800ba54 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7ff fecc 	bl	800ba54 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800bcc0:	79fb      	ldrb	r3, [r7, #7]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <send_cmd+0x94>
 800bcc6:	2395      	movs	r3, #149	@ 0x95
 800bcc8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800bcca:	79fb      	ldrb	r3, [r7, #7]
 800bccc:	2b08      	cmp	r3, #8
 800bcce:	d101      	bne.n	800bcd4 <send_cmd+0x9e>
 800bcd0:	2387      	movs	r3, #135	@ 0x87
 800bcd2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7ff febc 	bl	800ba54 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800bcdc:	79fb      	ldrb	r3, [r7, #7]
 800bcde:	2b0c      	cmp	r3, #12
 800bce0:	d102      	bne.n	800bce8 <send_cmd+0xb2>
 800bce2:	20ff      	movs	r0, #255	@ 0xff
 800bce4:	f7ff feb6 	bl	800ba54 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800bce8:	230a      	movs	r3, #10
 800bcea:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800bcec:	20ff      	movs	r0, #255	@ 0xff
 800bcee:	f7ff feb1 	bl	800ba54 <xchg_spi>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800bcf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	da05      	bge.n	800bd0a <send_cmd+0xd4>
 800bcfe:	7bfb      	ldrb	r3, [r7, #15]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	73fb      	strb	r3, [r7, #15]
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1f0      	bne.n	800bcec <send_cmd+0xb6>

	return res;							/* Return received response */
 800bd0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800bd14:	b590      	push	{r4, r7, lr}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <USER_SPI_initialize+0x14>
 800bd24:	2301      	movs	r3, #1
 800bd26:	e0cb      	b.n	800bec0 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800bd28:	4b67      	ldr	r3, [pc, #412]	@ (800bec8 <USER_SPI_initialize+0x1b4>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	f003 0302 	and.w	r3, r3, #2
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <USER_SPI_initialize+0x2a>
 800bd36:	4b64      	ldr	r3, [pc, #400]	@ (800bec8 <USER_SPI_initialize+0x1b4>)
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	e0c0      	b.n	800bec0 <USER_SPI_initialize+0x1ac>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_256);
 800bd3e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800bd42:	4862      	ldr	r0, [pc, #392]	@ (800becc <USER_SPI_initialize+0x1b8>)
 800bd44:	f7ff fe35 	bl	800b9b2 <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800bd48:	230a      	movs	r3, #10
 800bd4a:	73fb      	strb	r3, [r7, #15]
 800bd4c:	e005      	b.n	800bd5a <USER_SPI_initialize+0x46>
 800bd4e:	20ff      	movs	r0, #255	@ 0xff
 800bd50:	f7ff fe80 	bl	800ba54 <xchg_spi>
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	73fb      	strb	r3, [r7, #15]
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1f6      	bne.n	800bd4e <USER_SPI_initialize+0x3a>

	ty = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800bd64:	2100      	movs	r1, #0
 800bd66:	2000      	movs	r0, #0
 800bd68:	f7ff ff65 	bl	800bc36 <send_cmd>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	f040 808b 	bne.w	800be8a <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800bd74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bd78:	f7ff fe42 	bl	800ba00 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800bd7c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800bd80:	2008      	movs	r0, #8
 800bd82:	f7ff ff58 	bl	800bc36 <send_cmd>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d151      	bne.n	800be30 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]
 800bd90:	e00d      	b.n	800bdae <USER_SPI_initialize+0x9a>
 800bd92:	7bfc      	ldrb	r4, [r7, #15]
 800bd94:	20ff      	movs	r0, #255	@ 0xff
 800bd96:	f7ff fe5d 	bl	800ba54 <xchg_spi>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	f104 0310 	add.w	r3, r4, #16
 800bda2:	443b      	add	r3, r7
 800bda4:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bda8:	7bfb      	ldrb	r3, [r7, #15]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	73fb      	strb	r3, [r7, #15]
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	2b03      	cmp	r3, #3
 800bdb2:	d9ee      	bls.n	800bd92 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800bdb4:	7abb      	ldrb	r3, [r7, #10]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d167      	bne.n	800be8a <USER_SPI_initialize+0x176>
 800bdba:	7afb      	ldrb	r3, [r7, #11]
 800bdbc:	2baa      	cmp	r3, #170	@ 0xaa
 800bdbe:	d164      	bne.n	800be8a <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800bdc0:	bf00      	nop
 800bdc2:	f7ff fe31 	bl	800ba28 <SPI_Timer_Status>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d007      	beq.n	800bddc <USER_SPI_initialize+0xc8>
 800bdcc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bdd0:	20a9      	movs	r0, #169	@ 0xa9
 800bdd2:	f7ff ff30 	bl	800bc36 <send_cmd>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1f2      	bne.n	800bdc2 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800bddc:	f7ff fe24 	bl	800ba28 <SPI_Timer_Status>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d051      	beq.n	800be8a <USER_SPI_initialize+0x176>
 800bde6:	2100      	movs	r1, #0
 800bde8:	203a      	movs	r0, #58	@ 0x3a
 800bdea:	f7ff ff24 	bl	800bc36 <send_cmd>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d14a      	bne.n	800be8a <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73fb      	strb	r3, [r7, #15]
 800bdf8:	e00d      	b.n	800be16 <USER_SPI_initialize+0x102>
 800bdfa:	7bfc      	ldrb	r4, [r7, #15]
 800bdfc:	20ff      	movs	r0, #255	@ 0xff
 800bdfe:	f7ff fe29 	bl	800ba54 <xchg_spi>
 800be02:	4603      	mov	r3, r0
 800be04:	461a      	mov	r2, r3
 800be06:	f104 0310 	add.w	r3, r4, #16
 800be0a:	443b      	add	r3, r7
 800be0c:	f803 2c08 	strb.w	r2, [r3, #-8]
 800be10:	7bfb      	ldrb	r3, [r7, #15]
 800be12:	3301      	adds	r3, #1
 800be14:	73fb      	strb	r3, [r7, #15]
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	2b03      	cmp	r3, #3
 800be1a:	d9ee      	bls.n	800bdfa <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800be1c:	7a3b      	ldrb	r3, [r7, #8]
 800be1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <USER_SPI_initialize+0x116>
 800be26:	230c      	movs	r3, #12
 800be28:	e000      	b.n	800be2c <USER_SPI_initialize+0x118>
 800be2a:	2304      	movs	r3, #4
 800be2c:	737b      	strb	r3, [r7, #13]
 800be2e:	e02c      	b.n	800be8a <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800be30:	2100      	movs	r1, #0
 800be32:	20a9      	movs	r0, #169	@ 0xa9
 800be34:	f7ff feff 	bl	800bc36 <send_cmd>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d804      	bhi.n	800be48 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800be3e:	2302      	movs	r3, #2
 800be40:	737b      	strb	r3, [r7, #13]
 800be42:	23a9      	movs	r3, #169	@ 0xa9
 800be44:	73bb      	strb	r3, [r7, #14]
 800be46:	e003      	b.n	800be50 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800be48:	2301      	movs	r3, #1
 800be4a:	737b      	strb	r3, [r7, #13]
 800be4c:	2301      	movs	r3, #1
 800be4e:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800be50:	bf00      	nop
 800be52:	f7ff fde9 	bl	800ba28 <SPI_Timer_Status>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d007      	beq.n	800be6c <USER_SPI_initialize+0x158>
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	2100      	movs	r1, #0
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff fee8 	bl	800bc36 <send_cmd>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1f2      	bne.n	800be52 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800be6c:	f7ff fddc 	bl	800ba28 <SPI_Timer_Status>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d007      	beq.n	800be86 <USER_SPI_initialize+0x172>
 800be76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800be7a:	2010      	movs	r0, #16
 800be7c:	f7ff fedb 	bl	800bc36 <send_cmd>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d001      	beq.n	800be8a <USER_SPI_initialize+0x176>
				ty = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800be8a:	4a11      	ldr	r2, [pc, #68]	@ (800bed0 <USER_SPI_initialize+0x1bc>)
 800be8c:	7b7b      	ldrb	r3, [r7, #13]
 800be8e:	7013      	strb	r3, [r2, #0]
	despiselect();
 800be90:	f7ff fe4a 	bl	800bb28 <despiselect>

	if (ty) {			/* OK */
 800be94:	7b7b      	ldrb	r3, [r7, #13]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00c      	beq.n	800beb4 <USER_SPI_initialize+0x1a0>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_2);	/* Set fast clock */
 800be9a:	2100      	movs	r1, #0
 800be9c:	480b      	ldr	r0, [pc, #44]	@ (800becc <USER_SPI_initialize+0x1b8>)
 800be9e:	f7ff fd88 	bl	800b9b2 <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800bea2:	4b09      	ldr	r3, [pc, #36]	@ (800bec8 <USER_SPI_initialize+0x1b4>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	f023 0301 	bic.w	r3, r3, #1
 800beac:	b2da      	uxtb	r2, r3
 800beae:	4b06      	ldr	r3, [pc, #24]	@ (800bec8 <USER_SPI_initialize+0x1b4>)
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	e002      	b.n	800beba <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800beb4:	4b04      	ldr	r3, [pc, #16]	@ (800bec8 <USER_SPI_initialize+0x1b4>)
 800beb6:	2201      	movs	r2, #1
 800beb8:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800beba:	4b03      	ldr	r3, [pc, #12]	@ (800bec8 <USER_SPI_initialize+0x1b4>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	b2db      	uxtb	r3, r3
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd90      	pop	{r4, r7, pc}
 800bec8:	24000028 	.word	0x24000028
 800becc:	240001a0 	.word	0x240001a0
 800bed0:	24000374 	.word	0x24000374

0800bed4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800bede:	79fb      	ldrb	r3, [r7, #7]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <USER_SPI_status+0x14>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e002      	b.n	800beee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800bee8:	4b04      	ldr	r3, [pc, #16]	@ (800befc <USER_SPI_status+0x28>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	b2db      	uxtb	r3, r3
}
 800beee:	4618      	mov	r0, r3
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	24000028 	.word	0x24000028

0800bf00 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d102      	bne.n	800bf1c <USER_SPI_read+0x1c>
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <USER_SPI_read+0x20>
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	e04d      	b.n	800bfbc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800bf20:	4b28      	ldr	r3, [pc, #160]	@ (800bfc4 <USER_SPI_read+0xc4>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <USER_SPI_read+0x32>
 800bf2e:	2303      	movs	r3, #3
 800bf30:	e044      	b.n	800bfbc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800bf32:	4b25      	ldr	r3, [pc, #148]	@ (800bfc8 <USER_SPI_read+0xc8>)
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	f003 0308 	and.w	r3, r3, #8
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d102      	bne.n	800bf44 <USER_SPI_read+0x44>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	025b      	lsls	r3, r3, #9
 800bf42:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d111      	bne.n	800bf6e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800bf4a:	6879      	ldr	r1, [r7, #4]
 800bf4c:	2011      	movs	r0, #17
 800bf4e:	f7ff fe72 	bl	800bc36 <send_cmd>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d129      	bne.n	800bfac <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800bf58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bf5c:	68b8      	ldr	r0, [r7, #8]
 800bf5e:	f7ff fe0f 	bl	800bb80 <rcvr_datablock>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d021      	beq.n	800bfac <USER_SPI_read+0xac>
			count = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	e01e      	b.n	800bfac <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800bf6e:	6879      	ldr	r1, [r7, #4]
 800bf70:	2012      	movs	r0, #18
 800bf72:	f7ff fe60 	bl	800bc36 <send_cmd>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d117      	bne.n	800bfac <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800bf7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bf80:	68b8      	ldr	r0, [r7, #8]
 800bf82:	f7ff fdfd 	bl	800bb80 <rcvr_datablock>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00a      	beq.n	800bfa2 <USER_SPI_read+0xa2>
				buff += 512;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800bf92:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	603b      	str	r3, [r7, #0]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1ed      	bne.n	800bf7c <USER_SPI_read+0x7c>
 800bfa0:	e000      	b.n	800bfa4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800bfa2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	200c      	movs	r0, #12
 800bfa8:	f7ff fe45 	bl	800bc36 <send_cmd>
		}
	}
	despiselect();
 800bfac:	f7ff fdbc 	bl	800bb28 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	bf14      	ite	ne
 800bfb6:	2301      	movne	r3, #1
 800bfb8:	2300      	moveq	r3, #0
 800bfba:	b2db      	uxtb	r3, r3
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	24000028 	.word	0x24000028
 800bfc8:	24000374 	.word	0x24000374

0800bfcc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60b9      	str	r1, [r7, #8]
 800bfd4:	607a      	str	r2, [r7, #4]
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	4603      	mov	r3, r0
 800bfda:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <USER_SPI_write+0x1c>
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <USER_SPI_write+0x20>
 800bfe8:	2304      	movs	r3, #4
 800bfea:	e063      	b.n	800c0b4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800bfec:	4b33      	ldr	r3, [pc, #204]	@ (800c0bc <USER_SPI_write+0xf0>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <USER_SPI_write+0x32>
 800bffa:	2303      	movs	r3, #3
 800bffc:	e05a      	b.n	800c0b4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800bffe:	4b2f      	ldr	r3, [pc, #188]	@ (800c0bc <USER_SPI_write+0xf0>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <USER_SPI_write+0x44>
 800c00c:	2302      	movs	r3, #2
 800c00e:	e051      	b.n	800c0b4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c010:	4b2b      	ldr	r3, [pc, #172]	@ (800c0c0 <USER_SPI_write+0xf4>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	f003 0308 	and.w	r3, r3, #8
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d102      	bne.n	800c022 <USER_SPI_write+0x56>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	025b      	lsls	r3, r3, #9
 800c020:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d110      	bne.n	800c04a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c028:	6879      	ldr	r1, [r7, #4]
 800c02a:	2018      	movs	r0, #24
 800c02c:	f7ff fe03 	bl	800bc36 <send_cmd>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d136      	bne.n	800c0a4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c036:	21fe      	movs	r1, #254	@ 0xfe
 800c038:	68b8      	ldr	r0, [r7, #8]
 800c03a:	f7ff fdca 	bl	800bbd2 <xmit_datablock>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d02f      	beq.n	800c0a4 <USER_SPI_write+0xd8>
			count = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	603b      	str	r3, [r7, #0]
 800c048:	e02c      	b.n	800c0a4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c04a:	4b1d      	ldr	r3, [pc, #116]	@ (800c0c0 <USER_SPI_write+0xf4>)
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	f003 0306 	and.w	r3, r3, #6
 800c052:	2b00      	cmp	r3, #0
 800c054:	d003      	beq.n	800c05e <USER_SPI_write+0x92>
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	2097      	movs	r0, #151	@ 0x97
 800c05a:	f7ff fdec 	bl	800bc36 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c05e:	6879      	ldr	r1, [r7, #4]
 800c060:	2019      	movs	r0, #25
 800c062:	f7ff fde8 	bl	800bc36 <send_cmd>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d11b      	bne.n	800c0a4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c06c:	21fc      	movs	r1, #252	@ 0xfc
 800c06e:	68b8      	ldr	r0, [r7, #8]
 800c070:	f7ff fdaf 	bl	800bbd2 <xmit_datablock>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00a      	beq.n	800c090 <USER_SPI_write+0xc4>
				buff += 512;
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c080:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	3b01      	subs	r3, #1
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1ee      	bne.n	800c06c <USER_SPI_write+0xa0>
 800c08e:	e000      	b.n	800c092 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c090:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c092:	21fd      	movs	r1, #253	@ 0xfd
 800c094:	2000      	movs	r0, #0
 800c096:	f7ff fd9c 	bl	800bbd2 <xmit_datablock>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <USER_SPI_write+0xd8>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c0a4:	f7ff fd40 	bl	800bb28 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bf14      	ite	ne
 800c0ae:	2301      	movne	r3, #1
 800c0b0:	2300      	moveq	r3, #0
 800c0b2:	b2db      	uxtb	r3, r3
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	24000028 	.word	0x24000028
 800c0c0:	24000374 	.word	0x24000374

0800c0c4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08c      	sub	sp, #48	@ 0x30
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	603a      	str	r2, [r7, #0]
 800c0ce:	71fb      	strb	r3, [r7, #7]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c0d4:	79fb      	ldrb	r3, [r7, #7]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <USER_SPI_ioctl+0x1a>
 800c0da:	2304      	movs	r3, #4
 800c0dc:	e15a      	b.n	800c394 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c0de:	4baf      	ldr	r3, [pc, #700]	@ (800c39c <USER_SPI_ioctl+0x2d8>)
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	f003 0301 	and.w	r3, r3, #1
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <USER_SPI_ioctl+0x2c>
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e151      	b.n	800c394 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800c0f6:	79bb      	ldrb	r3, [r7, #6]
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	f200 8136 	bhi.w	800c36a <USER_SPI_ioctl+0x2a6>
 800c0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c104 <USER_SPI_ioctl+0x40>)
 800c100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c104:	0800c119 	.word	0x0800c119
 800c108:	0800c12d 	.word	0x0800c12d
 800c10c:	0800c36b 	.word	0x0800c36b
 800c110:	0800c1d9 	.word	0x0800c1d9
 800c114:	0800c2cf 	.word	0x0800c2cf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c118:	f7ff fd16 	bl	800bb48 <spiselect>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f000 8127 	beq.w	800c372 <USER_SPI_ioctl+0x2ae>
 800c124:	2300      	movs	r3, #0
 800c126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c12a:	e122      	b.n	800c372 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c12c:	2100      	movs	r1, #0
 800c12e:	2009      	movs	r0, #9
 800c130:	f7ff fd81 	bl	800bc36 <send_cmd>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	f040 811d 	bne.w	800c376 <USER_SPI_ioctl+0x2b2>
 800c13c:	f107 030c 	add.w	r3, r7, #12
 800c140:	2110      	movs	r1, #16
 800c142:	4618      	mov	r0, r3
 800c144:	f7ff fd1c 	bl	800bb80 <rcvr_datablock>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 8113 	beq.w	800c376 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800c150:	7b3b      	ldrb	r3, [r7, #12]
 800c152:	099b      	lsrs	r3, r3, #6
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b01      	cmp	r3, #1
 800c158:	d111      	bne.n	800c17e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800c15a:	7d7b      	ldrb	r3, [r7, #21]
 800c15c:	461a      	mov	r2, r3
 800c15e:	7d3b      	ldrb	r3, [r7, #20]
 800c160:	021b      	lsls	r3, r3, #8
 800c162:	4413      	add	r3, r2
 800c164:	461a      	mov	r2, r3
 800c166:	7cfb      	ldrb	r3, [r7, #19]
 800c168:	041b      	lsls	r3, r3, #16
 800c16a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800c16e:	4413      	add	r3, r2
 800c170:	3301      	adds	r3, #1
 800c172:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	029a      	lsls	r2, r3, #10
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	601a      	str	r2, [r3, #0]
 800c17c:	e028      	b.n	800c1d0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800c17e:	7c7b      	ldrb	r3, [r7, #17]
 800c180:	f003 030f 	and.w	r3, r3, #15
 800c184:	b2da      	uxtb	r2, r3
 800c186:	7dbb      	ldrb	r3, [r7, #22]
 800c188:	09db      	lsrs	r3, r3, #7
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	4413      	add	r3, r2
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	7d7b      	ldrb	r3, [r7, #21]
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	b2db      	uxtb	r3, r3
 800c196:	f003 0306 	and.w	r3, r3, #6
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	4413      	add	r3, r2
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	3302      	adds	r3, #2
 800c1a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800c1a6:	7d3b      	ldrb	r3, [r7, #20]
 800c1a8:	099b      	lsrs	r3, r3, #6
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	7cfb      	ldrb	r3, [r7, #19]
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	441a      	add	r2, r3
 800c1b4:	7cbb      	ldrb	r3, [r7, #18]
 800c1b6:	029b      	lsls	r3, r3, #10
 800c1b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c1bc:	4413      	add	r3, r2
 800c1be:	3301      	adds	r3, #1
 800c1c0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800c1c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c1c6:	3b09      	subs	r3, #9
 800c1c8:	69fa      	ldr	r2, [r7, #28]
 800c1ca:	409a      	lsls	r2, r3
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c1d6:	e0ce      	b.n	800c376 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800c1d8:	4b71      	ldr	r3, [pc, #452]	@ (800c3a0 <USER_SPI_ioctl+0x2dc>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d031      	beq.n	800c248 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	208d      	movs	r0, #141	@ 0x8d
 800c1e8:	f7ff fd25 	bl	800bc36 <send_cmd>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f040 80c3 	bne.w	800c37a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800c1f4:	20ff      	movs	r0, #255	@ 0xff
 800c1f6:	f7ff fc2d 	bl	800ba54 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800c1fa:	f107 030c 	add.w	r3, r7, #12
 800c1fe:	2110      	movs	r1, #16
 800c200:	4618      	mov	r0, r3
 800c202:	f7ff fcbd 	bl	800bb80 <rcvr_datablock>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 80b6 	beq.w	800c37a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800c20e:	2330      	movs	r3, #48	@ 0x30
 800c210:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c214:	e007      	b.n	800c226 <USER_SPI_ioctl+0x162>
 800c216:	20ff      	movs	r0, #255	@ 0xff
 800c218:	f7ff fc1c 	bl	800ba54 <xchg_spi>
 800c21c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c220:	3b01      	subs	r3, #1
 800c222:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800c226:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1f3      	bne.n	800c216 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800c22e:	7dbb      	ldrb	r3, [r7, #22]
 800c230:	091b      	lsrs	r3, r3, #4
 800c232:	b2db      	uxtb	r3, r3
 800c234:	461a      	mov	r2, r3
 800c236:	2310      	movs	r3, #16
 800c238:	fa03 f202 	lsl.w	r2, r3, r2
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c246:	e098      	b.n	800c37a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c248:	2100      	movs	r1, #0
 800c24a:	2009      	movs	r0, #9
 800c24c:	f7ff fcf3 	bl	800bc36 <send_cmd>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	f040 8091 	bne.w	800c37a <USER_SPI_ioctl+0x2b6>
 800c258:	f107 030c 	add.w	r3, r7, #12
 800c25c:	2110      	movs	r1, #16
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff fc8e 	bl	800bb80 <rcvr_datablock>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 8087 	beq.w	800c37a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c26c:	4b4c      	ldr	r3, [pc, #304]	@ (800c3a0 <USER_SPI_ioctl+0x2dc>)
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	f003 0302 	and.w	r3, r3, #2
 800c274:	2b00      	cmp	r3, #0
 800c276:	d012      	beq.n	800c29e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c278:	7dbb      	ldrb	r3, [r7, #22]
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800c280:	7dfa      	ldrb	r2, [r7, #23]
 800c282:	09d2      	lsrs	r2, r2, #7
 800c284:	b2d2      	uxtb	r2, r2
 800c286:	4413      	add	r3, r2
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	7e7b      	ldrb	r3, [r7, #25]
 800c28c:	099b      	lsrs	r3, r3, #6
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	3b01      	subs	r3, #1
 800c292:	fa02 f303 	lsl.w	r3, r2, r3
 800c296:	461a      	mov	r2, r3
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	e013      	b.n	800c2c6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c29e:	7dbb      	ldrb	r3, [r7, #22]
 800c2a0:	109b      	asrs	r3, r3, #2
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	f003 031f 	and.w	r3, r3, #31
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	7dfa      	ldrb	r2, [r7, #23]
 800c2ac:	00d2      	lsls	r2, r2, #3
 800c2ae:	f002 0218 	and.w	r2, r2, #24
 800c2b2:	7df9      	ldrb	r1, [r7, #23]
 800c2b4:	0949      	lsrs	r1, r1, #5
 800c2b6:	b2c9      	uxtb	r1, r1
 800c2b8:	440a      	add	r2, r1
 800c2ba:	3201      	adds	r2, #1
 800c2bc:	fb02 f303 	mul.w	r3, r2, r3
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c2cc:	e055      	b.n	800c37a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c2ce:	4b34      	ldr	r3, [pc, #208]	@ (800c3a0 <USER_SPI_ioctl+0x2dc>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	f003 0306 	and.w	r3, r3, #6
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d051      	beq.n	800c37e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c2da:	f107 020c 	add.w	r2, r7, #12
 800c2de:	79fb      	ldrb	r3, [r7, #7]
 800c2e0:	210b      	movs	r1, #11
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff feee 	bl	800c0c4 <USER_SPI_ioctl>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d149      	bne.n	800c382 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c2ee:	7b3b      	ldrb	r3, [r7, #12]
 800c2f0:	099b      	lsrs	r3, r3, #6
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d104      	bne.n	800c302 <USER_SPI_ioctl+0x23e>
 800c2f8:	7dbb      	ldrb	r3, [r7, #22]
 800c2fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d041      	beq.n	800c386 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	623b      	str	r3, [r7, #32]
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800c312:	4b23      	ldr	r3, [pc, #140]	@ (800c3a0 <USER_SPI_ioctl+0x2dc>)
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	f003 0308 	and.w	r3, r3, #8
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d105      	bne.n	800c32a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c320:	025b      	lsls	r3, r3, #9
 800c322:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	025b      	lsls	r3, r3, #9
 800c328:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c32a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c32c:	2020      	movs	r0, #32
 800c32e:	f7ff fc82 	bl	800bc36 <send_cmd>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d128      	bne.n	800c38a <USER_SPI_ioctl+0x2c6>
 800c338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c33a:	2021      	movs	r0, #33	@ 0x21
 800c33c:	f7ff fc7b 	bl	800bc36 <send_cmd>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d121      	bne.n	800c38a <USER_SPI_ioctl+0x2c6>
 800c346:	2100      	movs	r1, #0
 800c348:	2026      	movs	r0, #38	@ 0x26
 800c34a:	f7ff fc74 	bl	800bc36 <send_cmd>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d11a      	bne.n	800c38a <USER_SPI_ioctl+0x2c6>
 800c354:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c358:	f7ff fbc2 	bl	800bae0 <wait_ready>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d013      	beq.n	800c38a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c362:	2300      	movs	r3, #0
 800c364:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c368:	e00f      	b.n	800c38a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c36a:	2304      	movs	r3, #4
 800c36c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c370:	e00c      	b.n	800c38c <USER_SPI_ioctl+0x2c8>
		break;
 800c372:	bf00      	nop
 800c374:	e00a      	b.n	800c38c <USER_SPI_ioctl+0x2c8>
		break;
 800c376:	bf00      	nop
 800c378:	e008      	b.n	800c38c <USER_SPI_ioctl+0x2c8>
		break;
 800c37a:	bf00      	nop
 800c37c:	e006      	b.n	800c38c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c37e:	bf00      	nop
 800c380:	e004      	b.n	800c38c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c382:	bf00      	nop
 800c384:	e002      	b.n	800c38c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c386:	bf00      	nop
 800c388:	e000      	b.n	800c38c <USER_SPI_ioctl+0x2c8>
		break;
 800c38a:	bf00      	nop
	}

	despiselect();
 800c38c:	f7ff fbcc 	bl	800bb28 <despiselect>

	return res;
 800c390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c394:	4618      	mov	r0, r3
 800c396:	3730      	adds	r7, #48	@ 0x30
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	24000028 	.word	0x24000028
 800c3a0:	24000374 	.word	0x24000374

0800c3a4 <read_vec>:
#endif



float * read_vec(unsigned short index, char * word){
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	f6ad 2d68 	subw	sp, sp, #2664	@ 0xa68
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c3b2:	f6a3 2368 	subw	r3, r3, #2664	@ 0xa68
 800c3b6:	6019      	str	r1, [r3, #0]
 800c3b8:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c3bc:	f6a3 2362 	subw	r3, r3, #2658	@ 0xa62
 800c3c0:	801a      	strh	r2, [r3, #0]
	FIL file;
	UINT bytes;

	uint8_t buffer[2048];

	uint32_t floatsRead = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f8c7 3a64 	str.w	r3, [r7, #2660]	@ 0xa64
	uint32_t charsRead = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	f8c7 3a60 	str.w	r3, [r7, #2656]	@ 0xa60


//	float arr_floats[501];
	float * arr_floats = malloc(sizeof(*arr_floats) * 501);
 800c3ce:	f240 70d4 	movw	r0, #2004	@ 0x7d4
 800c3d2:	f002 fecd 	bl	800f170 <malloc>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	f8c7 3a58 	str.w	r3, [r7, #2648]	@ 0xa58

	spiselect();
 800c3dc:	f7ff fbb4 	bl	800bb48 <spiselect>
	snprintf(name, 22,  "Win/v/vector%05d.bin", index);
 800c3e0:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c3e4:	f6a3 2362 	subw	r3, r3, #2658	@ 0xa62
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	f507 6024 	add.w	r0, r7, #2624	@ 0xa40
 800c3ee:	4a4b      	ldr	r2, [pc, #300]	@ (800c51c <read_vec+0x178>)
 800c3f0:	2116      	movs	r1, #22
 800c3f2:	f002 ff7b 	bl	800f2ec <sniprintf>

	fr =  f_open(&file, name, FA_READ);
 800c3f6:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 800c3fa:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800c3fe:	2201      	movs	r2, #1
 800c400:	4618      	mov	r0, r3
 800c402:	f002 f9f1 	bl	800e7e8 <f_open>
 800c406:	4603      	mov	r3, r0
 800c408:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
	bytes = 0;
 800c40c:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c410:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]
	fr = f_read(&file, buffer, 2048, &bytes);
 800c418:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800c41c:	f107 010c 	add.w	r1, r7, #12
 800c420:	f507 6001 	add.w	r0, r7, #2064	@ 0x810
 800c424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c428:	f002 fb98 	bl	800eb5c <f_read>
 800c42c:	4603      	mov	r3, r0
 800c42e:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57


	// Process the buffer
	uint8_t *ptr = buffer;
 800c432:	f107 030c 	add.w	r3, r7, #12
 800c436:	f8c7 3a5c 	str.w	r3, [r7, #2652]	@ 0xa5c
	if (bytes > 0) {
 800c43a:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c43e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d058      	beq.n	800c4fa <read_vec+0x156>
		// Process floats first
		while (floatsRead < 501 && bytes >= sizeof(float)) {
 800c448:	e01e      	b.n	800c488 <read_vec+0xe4>
			memcpy(&arr_floats[floatsRead], ptr, sizeof(float));
 800c44a:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	@ 0xa64
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	@ 0xa58
 800c454:	4413      	add	r3, r2
 800c456:	f8d7 2a5c 	ldr.w	r2, [r7, #2652]	@ 0xa5c
 800c45a:	6812      	ldr	r2, [r2, #0]
 800c45c:	601a      	str	r2, [r3, #0]
			ptr += sizeof(float);
 800c45e:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800c462:	3304      	adds	r3, #4
 800c464:	f8c7 3a5c 	str.w	r3, [r7, #2652]	@ 0xa5c
			bytes -= sizeof(float);
 800c468:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c46c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	1f1a      	subs	r2, r3, #4
 800c474:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c478:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800c47c:	601a      	str	r2, [r3, #0]
			floatsRead++;
 800c47e:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	@ 0xa64
 800c482:	3301      	adds	r3, #1
 800c484:	f8c7 3a64 	str.w	r3, [r7, #2660]	@ 0xa64
		while (floatsRead < 501 && bytes >= sizeof(float)) {
 800c488:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	@ 0xa64
 800c48c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c490:	d828      	bhi.n	800c4e4 <read_vec+0x140>
 800c492:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c496:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b03      	cmp	r3, #3
 800c49e:	d8d4      	bhi.n	800c44a <read_vec+0xa6>
		}

		// Process characters
		while (charsRead < 25 && bytes > 0) {
 800c4a0:	e020      	b.n	800c4e4 <read_vec+0x140>
			word[charsRead] = *ptr;
 800c4a2:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c4a6:	f6a3 2368 	subw	r3, r3, #2664	@ 0xa68
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	@ 0xa60
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f8d7 2a5c 	ldr.w	r2, [r7, #2652]	@ 0xa5c
 800c4b6:	7812      	ldrb	r2, [r2, #0]
 800c4b8:	701a      	strb	r2, [r3, #0]
			ptr++;
 800c4ba:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	@ 0xa5c
 800c4be:	3301      	adds	r3, #1
 800c4c0:	f8c7 3a5c 	str.w	r3, [r7, #2652]	@ 0xa5c
			bytes--;
 800c4c4:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c4c8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	1e5a      	subs	r2, r3, #1
 800c4d0:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c4d4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800c4d8:	601a      	str	r2, [r3, #0]
			charsRead++;
 800c4da:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	@ 0xa60
 800c4de:	3301      	adds	r3, #1
 800c4e0:	f8c7 3a60 	str.w	r3, [r7, #2656]	@ 0xa60
		while (charsRead < 25 && bytes > 0) {
 800c4e4:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	@ 0xa60
 800c4e8:	2b18      	cmp	r3, #24
 800c4ea:	d806      	bhi.n	800c4fa <read_vec+0x156>
 800c4ec:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800c4f0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1d3      	bne.n	800c4a2 <read_vec+0xfe>
		}
	}
	fr = f_close(&file);
 800c4fa:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800c4fe:	4618      	mov	r0, r3
 800c500:	f002 fce9 	bl	800eed6 <f_close>
 800c504:	4603      	mov	r3, r0
 800c506:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57

	despiselect();
 800c50a:	f7ff fb0d 	bl	800bb28 <despiselect>

	return arr_floats;
 800c50e:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	@ 0xa58
}
 800c512:	4618      	mov	r0, r3
 800c514:	f607 2768 	addw	r7, r7, #2664	@ 0xa68
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	0800fca0 	.word	0x0800fca0

0800c520 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c52a:	79fb      	ldrb	r3, [r7, #7]
 800c52c:	4a08      	ldr	r2, [pc, #32]	@ (800c550 <disk_status+0x30>)
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	79fa      	ldrb	r2, [r7, #7]
 800c538:	4905      	ldr	r1, [pc, #20]	@ (800c550 <disk_status+0x30>)
 800c53a:	440a      	add	r2, r1
 800c53c:	7a12      	ldrb	r2, [r2, #8]
 800c53e:	4610      	mov	r0, r2
 800c540:	4798      	blx	r3
 800c542:	4603      	mov	r3, r0
 800c544:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c546:	7bfb      	ldrb	r3, [r7, #15]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	240005a8 	.word	0x240005a8

0800c554 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	4603      	mov	r3, r0
 800c55c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	4a0e      	ldr	r2, [pc, #56]	@ (800c5a0 <disk_initialize+0x4c>)
 800c566:	5cd3      	ldrb	r3, [r2, r3]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d114      	bne.n	800c596 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	4a0c      	ldr	r2, [pc, #48]	@ (800c5a0 <disk_initialize+0x4c>)
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	79fa      	ldrb	r2, [r7, #7]
 800c57a:	4909      	ldr	r1, [pc, #36]	@ (800c5a0 <disk_initialize+0x4c>)
 800c57c:	440a      	add	r2, r1
 800c57e:	7a12      	ldrb	r2, [r2, #8]
 800c580:	4610      	mov	r0, r2
 800c582:	4798      	blx	r3
 800c584:	4603      	mov	r3, r0
 800c586:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c588:	7bfb      	ldrb	r3, [r7, #15]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d103      	bne.n	800c596 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c58e:	79fb      	ldrb	r3, [r7, #7]
 800c590:	4a03      	ldr	r2, [pc, #12]	@ (800c5a0 <disk_initialize+0x4c>)
 800c592:	2101      	movs	r1, #1
 800c594:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c596:	7bfb      	ldrb	r3, [r7, #15]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	240005a8 	.word	0x240005a8

0800c5a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c5a4:	b590      	push	{r4, r7, lr}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60b9      	str	r1, [r7, #8]
 800c5ac:	607a      	str	r2, [r7, #4]
 800c5ae:	603b      	str	r3, [r7, #0]
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	4a0a      	ldr	r2, [pc, #40]	@ (800c5e0 <disk_read+0x3c>)
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	689c      	ldr	r4, [r3, #8]
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
 800c5c2:	4a07      	ldr	r2, [pc, #28]	@ (800c5e0 <disk_read+0x3c>)
 800c5c4:	4413      	add	r3, r2
 800c5c6:	7a18      	ldrb	r0, [r3, #8]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	68b9      	ldr	r1, [r7, #8]
 800c5ce:	47a0      	blx	r4
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	371c      	adds	r7, #28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd90      	pop	{r4, r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	240005a8 	.word	0x240005a8

0800c5e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c5e4:	b590      	push	{r4, r7, lr}
 800c5e6:	b087      	sub	sp, #28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60b9      	str	r1, [r7, #8]
 800c5ec:	607a      	str	r2, [r7, #4]
 800c5ee:	603b      	str	r3, [r7, #0]
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
 800c5f6:	4a0a      	ldr	r2, [pc, #40]	@ (800c620 <disk_write+0x3c>)
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	4413      	add	r3, r2
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	68dc      	ldr	r4, [r3, #12]
 800c600:	7bfb      	ldrb	r3, [r7, #15]
 800c602:	4a07      	ldr	r2, [pc, #28]	@ (800c620 <disk_write+0x3c>)
 800c604:	4413      	add	r3, r2
 800c606:	7a18      	ldrb	r0, [r3, #8]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	68b9      	ldr	r1, [r7, #8]
 800c60e:	47a0      	blx	r4
 800c610:	4603      	mov	r3, r0
 800c612:	75fb      	strb	r3, [r7, #23]
  return res;
 800c614:	7dfb      	ldrb	r3, [r7, #23]
}
 800c616:	4618      	mov	r0, r3
 800c618:	371c      	adds	r7, #28
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd90      	pop	{r4, r7, pc}
 800c61e:	bf00      	nop
 800c620:	240005a8 	.word	0x240005a8

0800c624 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	603a      	str	r2, [r7, #0]
 800c62e:	71fb      	strb	r3, [r7, #7]
 800c630:	460b      	mov	r3, r1
 800c632:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	4a09      	ldr	r2, [pc, #36]	@ (800c65c <disk_ioctl+0x38>)
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	79fa      	ldrb	r2, [r7, #7]
 800c642:	4906      	ldr	r1, [pc, #24]	@ (800c65c <disk_ioctl+0x38>)
 800c644:	440a      	add	r2, r1
 800c646:	7a10      	ldrb	r0, [r2, #8]
 800c648:	79b9      	ldrb	r1, [r7, #6]
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	4798      	blx	r3
 800c64e:	4603      	mov	r3, r0
 800c650:	73fb      	strb	r3, [r7, #15]
  return res;
 800c652:	7bfb      	ldrb	r3, [r7, #15]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	240005a8 	.word	0x240005a8

0800c660 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	3301      	adds	r3, #1
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c670:	89fb      	ldrh	r3, [r7, #14]
 800c672:	021b      	lsls	r3, r3, #8
 800c674:	b21a      	sxth	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	b21b      	sxth	r3, r3
 800c67c:	4313      	orrs	r3, r2
 800c67e:	b21b      	sxth	r3, r3
 800c680:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c682:	89fb      	ldrh	r3, [r7, #14]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	3303      	adds	r3, #3
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	021b      	lsls	r3, r3, #8
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	3202      	adds	r2, #2
 800c6a8:	7812      	ldrb	r2, [r2, #0]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	021b      	lsls	r3, r3, #8
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	3201      	adds	r2, #1
 800c6b6:	7812      	ldrb	r2, [r2, #0]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	021b      	lsls	r3, r3, #8
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	7812      	ldrb	r2, [r2, #0]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	60fb      	str	r3, [r7, #12]
	return rv;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b083      	sub	sp, #12
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	460b      	mov	r3, r1
 800c6e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	1c5a      	adds	r2, r3, #1
 800c6e6:	607a      	str	r2, [r7, #4]
 800c6e8:	887a      	ldrh	r2, [r7, #2]
 800c6ea:	b2d2      	uxtb	r2, r2
 800c6ec:	701a      	strb	r2, [r3, #0]
 800c6ee:	887b      	ldrh	r3, [r7, #2]
 800c6f0:	0a1b      	lsrs	r3, r3, #8
 800c6f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	607a      	str	r2, [r7, #4]
 800c6fa:	887a      	ldrh	r2, [r7, #2]
 800c6fc:	b2d2      	uxtb	r2, r2
 800c6fe:	701a      	strb	r2, [r3, #0]
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	0a1b      	lsrs	r3, r3, #8
 800c726:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	1c5a      	adds	r2, r3, #1
 800c72c:	607a      	str	r2, [r7, #4]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	b2d2      	uxtb	r2, r2
 800c732:	701a      	strb	r2, [r3, #0]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	0a1b      	lsrs	r3, r3, #8
 800c738:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	1c5a      	adds	r2, r3, #1
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	b2d2      	uxtb	r2, r2
 800c744:	701a      	strb	r2, [r3, #0]
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	0a1b      	lsrs	r3, r3, #8
 800c74a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	1c5a      	adds	r2, r3, #1
 800c750:	607a      	str	r2, [r7, #4]
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	b2d2      	uxtb	r2, r2
 800c756:	701a      	strb	r2, [r3, #0]
}
 800c758:	bf00      	nop
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00d      	beq.n	800c79a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	1c53      	adds	r3, r2, #1
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	1c59      	adds	r1, r3, #1
 800c788:	6179      	str	r1, [r7, #20]
 800c78a:	7812      	ldrb	r2, [r2, #0]
 800c78c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	3b01      	subs	r3, #1
 800c792:	607b      	str	r3, [r7, #4]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1f1      	bne.n	800c77e <mem_cpy+0x1a>
	}
}
 800c79a:	bf00      	nop
 800c79c:	371c      	adds	r7, #28
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c7a6:	b480      	push	{r7}
 800c7a8:	b087      	sub	sp, #28
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	60f8      	str	r0, [r7, #12]
 800c7ae:	60b9      	str	r1, [r7, #8]
 800c7b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	1c5a      	adds	r2, r3, #1
 800c7ba:	617a      	str	r2, [r7, #20]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	b2d2      	uxtb	r2, r2
 800c7c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	607b      	str	r3, [r7, #4]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1f3      	bne.n	800c7b6 <mem_set+0x10>
}
 800c7ce:	bf00      	nop
 800c7d0:	bf00      	nop
 800c7d2:	371c      	adds	r7, #28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c7dc:	b480      	push	{r7}
 800c7de:	b089      	sub	sp, #36	@ 0x24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	61fb      	str	r3, [r7, #28]
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	61fa      	str	r2, [r7, #28]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	1c5a      	adds	r2, r3, #1
 800c802:	61ba      	str	r2, [r7, #24]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	1acb      	subs	r3, r1, r3
 800c808:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	607b      	str	r3, [r7, #4]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d002      	beq.n	800c81c <mem_cmp+0x40>
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0eb      	beq.n	800c7f4 <mem_cmp+0x18>

	return r;
 800c81c:	697b      	ldr	r3, [r7, #20]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3724      	adds	r7, #36	@ 0x24
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c82a:	b480      	push	{r7}
 800c82c:	b083      	sub	sp, #12
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c834:	e002      	b.n	800c83c <chk_chr+0x12>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	3301      	adds	r3, #1
 800c83a:	607b      	str	r3, [r7, #4]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d005      	beq.n	800c850 <chk_chr+0x26>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	461a      	mov	r2, r3
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d1f2      	bne.n	800c836 <chk_chr+0xc>
	return *str;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	781b      	ldrb	r3, [r3, #0]
}
 800c854:	4618      	mov	r0, r3
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c86a:	2300      	movs	r3, #0
 800c86c:	60bb      	str	r3, [r7, #8]
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	e029      	b.n	800c8c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c874:	4a27      	ldr	r2, [pc, #156]	@ (800c914 <chk_lock+0xb4>)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	011b      	lsls	r3, r3, #4
 800c87a:	4413      	add	r3, r2
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d01d      	beq.n	800c8be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c882:	4a24      	ldr	r2, [pc, #144]	@ (800c914 <chk_lock+0xb4>)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	011b      	lsls	r3, r3, #4
 800c888:	4413      	add	r3, r2
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	429a      	cmp	r2, r3
 800c892:	d116      	bne.n	800c8c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c894:	4a1f      	ldr	r2, [pc, #124]	@ (800c914 <chk_lock+0xb4>)
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	4413      	add	r3, r2
 800c89c:	3304      	adds	r3, #4
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d10c      	bne.n	800c8c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c8a8:	4a1a      	ldr	r2, [pc, #104]	@ (800c914 <chk_lock+0xb4>)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	011b      	lsls	r3, r3, #4
 800c8ae:	4413      	add	r3, r2
 800c8b0:	3308      	adds	r3, #8
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d102      	bne.n	800c8c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c8bc:	e007      	b.n	800c8ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	60fb      	str	r3, [r7, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d9d2      	bls.n	800c874 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d109      	bne.n	800c8e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d102      	bne.n	800c8e0 <chk_lock+0x80>
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d101      	bne.n	800c8e4 <chk_lock+0x84>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	e010      	b.n	800c906 <chk_lock+0xa6>
 800c8e4:	2312      	movs	r3, #18
 800c8e6:	e00e      	b.n	800c906 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d108      	bne.n	800c900 <chk_lock+0xa0>
 800c8ee:	4a09      	ldr	r2, [pc, #36]	@ (800c914 <chk_lock+0xb4>)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	011b      	lsls	r3, r3, #4
 800c8f4:	4413      	add	r3, r2
 800c8f6:	330c      	adds	r3, #12
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8fe:	d101      	bne.n	800c904 <chk_lock+0xa4>
 800c900:	2310      	movs	r3, #16
 800c902:	e000      	b.n	800c906 <chk_lock+0xa6>
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	24000388 	.word	0x24000388

0800c918 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c91e:	2300      	movs	r3, #0
 800c920:	607b      	str	r3, [r7, #4]
 800c922:	e002      	b.n	800c92a <enq_lock+0x12>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	3301      	adds	r3, #1
 800c928:	607b      	str	r3, [r7, #4]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d806      	bhi.n	800c93e <enq_lock+0x26>
 800c930:	4a09      	ldr	r2, [pc, #36]	@ (800c958 <enq_lock+0x40>)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	011b      	lsls	r3, r3, #4
 800c936:	4413      	add	r3, r2
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1f2      	bne.n	800c924 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2b02      	cmp	r3, #2
 800c942:	bf14      	ite	ne
 800c944:	2301      	movne	r3, #1
 800c946:	2300      	moveq	r3, #0
 800c948:	b2db      	uxtb	r3, r3
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	24000388 	.word	0x24000388

0800c95c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c966:	2300      	movs	r3, #0
 800c968:	60fb      	str	r3, [r7, #12]
 800c96a:	e01f      	b.n	800c9ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c96c:	4a41      	ldr	r2, [pc, #260]	@ (800ca74 <inc_lock+0x118>)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	011b      	lsls	r3, r3, #4
 800c972:	4413      	add	r3, r2
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d113      	bne.n	800c9a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c97e:	4a3d      	ldr	r2, [pc, #244]	@ (800ca74 <inc_lock+0x118>)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	011b      	lsls	r3, r3, #4
 800c984:	4413      	add	r3, r2
 800c986:	3304      	adds	r3, #4
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c98e:	429a      	cmp	r2, r3
 800c990:	d109      	bne.n	800c9a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c992:	4a38      	ldr	r2, [pc, #224]	@ (800ca74 <inc_lock+0x118>)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	011b      	lsls	r3, r3, #4
 800c998:	4413      	add	r3, r2
 800c99a:	3308      	adds	r3, #8
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d006      	beq.n	800c9b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d9dc      	bls.n	800c96c <inc_lock+0x10>
 800c9b2:	e000      	b.n	800c9b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c9b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	d132      	bne.n	800ca22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	60fb      	str	r3, [r7, #12]
 800c9c0:	e002      	b.n	800c9c8 <inc_lock+0x6c>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	60fb      	str	r3, [r7, #12]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d806      	bhi.n	800c9dc <inc_lock+0x80>
 800c9ce:	4a29      	ldr	r2, [pc, #164]	@ (800ca74 <inc_lock+0x118>)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	011b      	lsls	r3, r3, #4
 800c9d4:	4413      	add	r3, r2
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1f2      	bne.n	800c9c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d101      	bne.n	800c9e6 <inc_lock+0x8a>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e040      	b.n	800ca68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	4922      	ldr	r1, [pc, #136]	@ (800ca74 <inc_lock+0x118>)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	011b      	lsls	r3, r3, #4
 800c9f0:	440b      	add	r3, r1
 800c9f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	491e      	ldr	r1, [pc, #120]	@ (800ca74 <inc_lock+0x118>)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	011b      	lsls	r3, r3, #4
 800c9fe:	440b      	add	r3, r1
 800ca00:	3304      	adds	r3, #4
 800ca02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	695a      	ldr	r2, [r3, #20]
 800ca08:	491a      	ldr	r1, [pc, #104]	@ (800ca74 <inc_lock+0x118>)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	011b      	lsls	r3, r3, #4
 800ca0e:	440b      	add	r3, r1
 800ca10:	3308      	adds	r3, #8
 800ca12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ca14:	4a17      	ldr	r2, [pc, #92]	@ (800ca74 <inc_lock+0x118>)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	011b      	lsls	r3, r3, #4
 800ca1a:	4413      	add	r3, r2
 800ca1c:	330c      	adds	r3, #12
 800ca1e:	2200      	movs	r2, #0
 800ca20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d009      	beq.n	800ca3c <inc_lock+0xe0>
 800ca28:	4a12      	ldr	r2, [pc, #72]	@ (800ca74 <inc_lock+0x118>)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	011b      	lsls	r3, r3, #4
 800ca2e:	4413      	add	r3, r2
 800ca30:	330c      	adds	r3, #12
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <inc_lock+0xe0>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	e015      	b.n	800ca68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d108      	bne.n	800ca54 <inc_lock+0xf8>
 800ca42:	4a0c      	ldr	r2, [pc, #48]	@ (800ca74 <inc_lock+0x118>)
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	011b      	lsls	r3, r3, #4
 800ca48:	4413      	add	r3, r2
 800ca4a:	330c      	adds	r3, #12
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	e001      	b.n	800ca58 <inc_lock+0xfc>
 800ca54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca58:	4906      	ldr	r1, [pc, #24]	@ (800ca74 <inc_lock+0x118>)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	011b      	lsls	r3, r3, #4
 800ca5e:	440b      	add	r3, r1
 800ca60:	330c      	adds	r3, #12
 800ca62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3301      	adds	r3, #1
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	24000388 	.word	0x24000388

0800ca78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	3b01      	subs	r3, #1
 800ca84:	607b      	str	r3, [r7, #4]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d825      	bhi.n	800cad8 <dec_lock+0x60>
		n = Files[i].ctr;
 800ca8c:	4a17      	ldr	r2, [pc, #92]	@ (800caec <dec_lock+0x74>)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	011b      	lsls	r3, r3, #4
 800ca92:	4413      	add	r3, r2
 800ca94:	330c      	adds	r3, #12
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca9a:	89fb      	ldrh	r3, [r7, #14]
 800ca9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800caa0:	d101      	bne.n	800caa6 <dec_lock+0x2e>
 800caa2:	2300      	movs	r3, #0
 800caa4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800caa6:	89fb      	ldrh	r3, [r7, #14]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <dec_lock+0x3a>
 800caac:	89fb      	ldrh	r3, [r7, #14]
 800caae:	3b01      	subs	r3, #1
 800cab0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cab2:	4a0e      	ldr	r2, [pc, #56]	@ (800caec <dec_lock+0x74>)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	011b      	lsls	r3, r3, #4
 800cab8:	4413      	add	r3, r2
 800caba:	330c      	adds	r3, #12
 800cabc:	89fa      	ldrh	r2, [r7, #14]
 800cabe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cac0:	89fb      	ldrh	r3, [r7, #14]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d105      	bne.n	800cad2 <dec_lock+0x5a>
 800cac6:	4a09      	ldr	r2, [pc, #36]	@ (800caec <dec_lock+0x74>)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	011b      	lsls	r3, r3, #4
 800cacc:	4413      	add	r3, r2
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	737b      	strb	r3, [r7, #13]
 800cad6:	e001      	b.n	800cadc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cad8:	2302      	movs	r3, #2
 800cada:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cadc:	7b7b      	ldrb	r3, [r7, #13]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	24000388 	.word	0x24000388

0800caf0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800caf8:	2300      	movs	r3, #0
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	e010      	b.n	800cb20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cafe:	4a0d      	ldr	r2, [pc, #52]	@ (800cb34 <clear_lock+0x44>)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	011b      	lsls	r3, r3, #4
 800cb04:	4413      	add	r3, r2
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d105      	bne.n	800cb1a <clear_lock+0x2a>
 800cb0e:	4a09      	ldr	r2, [pc, #36]	@ (800cb34 <clear_lock+0x44>)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	011b      	lsls	r3, r3, #4
 800cb14:	4413      	add	r3, r2
 800cb16:	2200      	movs	r2, #0
 800cb18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	60fb      	str	r3, [r7, #12]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d9eb      	bls.n	800cafe <clear_lock+0xe>
	}
}
 800cb26:	bf00      	nop
 800cb28:	bf00      	nop
 800cb2a:	3714      	adds	r7, #20
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	24000388 	.word	0x24000388

0800cb38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	78db      	ldrb	r3, [r3, #3]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d034      	beq.n	800cbb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	7858      	ldrb	r0, [r3, #1]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	f7ff fd40 	bl	800c5e4 <disk_write>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d002      	beq.n	800cb70 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	73fb      	strb	r3, [r7, #15]
 800cb6e:	e022      	b.n	800cbb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb7a:	697a      	ldr	r2, [r7, #20]
 800cb7c:	1ad2      	subs	r2, r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	69db      	ldr	r3, [r3, #28]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d217      	bcs.n	800cbb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	789b      	ldrb	r3, [r3, #2]
 800cb8a:	613b      	str	r3, [r7, #16]
 800cb8c:	e010      	b.n	800cbb0 <sync_window+0x78>
					wsect += fs->fsize;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	69db      	ldr	r3, [r3, #28]
 800cb92:	697a      	ldr	r2, [r7, #20]
 800cb94:	4413      	add	r3, r2
 800cb96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	7858      	ldrb	r0, [r3, #1]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cba2:	2301      	movs	r3, #1
 800cba4:	697a      	ldr	r2, [r7, #20]
 800cba6:	f7ff fd1d 	bl	800c5e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	3b01      	subs	r3, #1
 800cbae:	613b      	str	r3, [r7, #16]
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d8eb      	bhi.n	800cb8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3718      	adds	r7, #24
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d01b      	beq.n	800cc10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff ffad 	bl	800cb38 <sync_window>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d113      	bne.n	800cc10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	7858      	ldrb	r0, [r3, #1]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	f7ff fcd5 	bl	800c5a4 <disk_read>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d004      	beq.n	800cc0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cc00:	f04f 33ff 	mov.w	r3, #4294967295
 800cc04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cc06:	2301      	movs	r3, #1
 800cc08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff ff87 	bl	800cb38 <sync_window>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cc2e:	7bfb      	ldrb	r3, [r7, #15]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d158      	bne.n	800cce6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	d148      	bne.n	800ccce <sync_fs+0xb2>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	791b      	ldrb	r3, [r3, #4]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d144      	bne.n	800ccce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	3334      	adds	r3, #52	@ 0x34
 800cc48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff fda9 	bl	800c7a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	3334      	adds	r3, #52	@ 0x34
 800cc58:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cc5c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff fd38 	bl	800c6d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3334      	adds	r3, #52	@ 0x34
 800cc6a:	4921      	ldr	r1, [pc, #132]	@ (800ccf0 <sync_fs+0xd4>)
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff fd4d 	bl	800c70c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	3334      	adds	r3, #52	@ 0x34
 800cc76:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cc7a:	491e      	ldr	r1, [pc, #120]	@ (800ccf4 <sync_fs+0xd8>)
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff fd45 	bl	800c70c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	3334      	adds	r3, #52	@ 0x34
 800cc86:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4610      	mov	r0, r2
 800cc92:	f7ff fd3b 	bl	800c70c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	3334      	adds	r3, #52	@ 0x34
 800cc9a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	4619      	mov	r1, r3
 800cca4:	4610      	mov	r0, r2
 800cca6:	f7ff fd31 	bl	800c70c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a1b      	ldr	r3, [r3, #32]
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	7858      	ldrb	r0, [r3, #1]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	f7ff fc8e 	bl	800c5e4 <disk_write>
			fs->fsi_flag = 0;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	785b      	ldrb	r3, [r3, #1]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff fca4 	bl	800c624 <disk_ioctl>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d001      	beq.n	800cce6 <sync_fs+0xca>
 800cce2:	2301      	movs	r3, #1
 800cce4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	41615252 	.word	0x41615252
 800ccf4:	61417272 	.word	0x61417272

0800ccf8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	3b02      	subs	r3, #2
 800cd06:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	3b02      	subs	r3, #2
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d301      	bcc.n	800cd18 <clust2sect+0x20>
 800cd14:	2300      	movs	r3, #0
 800cd16:	e008      	b.n	800cd2a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	895b      	ldrh	r3, [r3, #10]
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	fb03 f202 	mul.w	r2, r3, r2
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd28:	4413      	add	r3, r2
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b086      	sub	sp, #24
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d904      	bls.n	800cd56 <get_fat+0x20>
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d302      	bcc.n	800cd5c <get_fat+0x26>
		val = 1;	/* Internal error */
 800cd56:	2301      	movs	r3, #1
 800cd58:	617b      	str	r3, [r7, #20]
 800cd5a:	e08e      	b.n	800ce7a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd60:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d061      	beq.n	800ce2e <get_fat+0xf8>
 800cd6a:	2b03      	cmp	r3, #3
 800cd6c:	dc7b      	bgt.n	800ce66 <get_fat+0x130>
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d002      	beq.n	800cd78 <get_fat+0x42>
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d041      	beq.n	800cdfa <get_fat+0xc4>
 800cd76:	e076      	b.n	800ce66 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	085b      	lsrs	r3, r3, #1
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	4413      	add	r3, r2
 800cd84:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	0a5b      	lsrs	r3, r3, #9
 800cd8e:	4413      	add	r3, r2
 800cd90:	4619      	mov	r1, r3
 800cd92:	6938      	ldr	r0, [r7, #16]
 800cd94:	f7ff ff14 	bl	800cbc0 <move_window>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d166      	bne.n	800ce6c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	60fa      	str	r2, [r7, #12]
 800cda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cdb0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	0a5b      	lsrs	r3, r3, #9
 800cdba:	4413      	add	r3, r2
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6938      	ldr	r0, [r7, #16]
 800cdc0:	f7ff fefe 	bl	800cbc0 <move_window>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d152      	bne.n	800ce70 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cdd8:	021b      	lsls	r3, r3, #8
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	4313      	orrs	r3, r2
 800cdde:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d002      	beq.n	800cdf0 <get_fat+0xba>
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	091b      	lsrs	r3, r3, #4
 800cdee:	e002      	b.n	800cdf6 <get_fat+0xc0>
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdf6:	617b      	str	r3, [r7, #20]
			break;
 800cdf8:	e03f      	b.n	800ce7a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	0a1b      	lsrs	r3, r3, #8
 800ce02:	4413      	add	r3, r2
 800ce04:	4619      	mov	r1, r3
 800ce06:	6938      	ldr	r0, [r7, #16]
 800ce08:	f7ff feda 	bl	800cbc0 <move_window>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d130      	bne.n	800ce74 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ce20:	4413      	add	r3, r2
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7ff fc1c 	bl	800c660 <ld_word>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	617b      	str	r3, [r7, #20]
			break;
 800ce2c:	e025      	b.n	800ce7a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	09db      	lsrs	r3, r3, #7
 800ce36:	4413      	add	r3, r2
 800ce38:	4619      	mov	r1, r3
 800ce3a:	6938      	ldr	r0, [r7, #16]
 800ce3c:	f7ff fec0 	bl	800cbc0 <move_window>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d118      	bne.n	800ce78 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ce54:	4413      	add	r3, r2
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff fc1a 	bl	800c690 <ld_dword>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ce62:	617b      	str	r3, [r7, #20]
			break;
 800ce64:	e009      	b.n	800ce7a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ce66:	2301      	movs	r3, #1
 800ce68:	617b      	str	r3, [r7, #20]
 800ce6a:	e006      	b.n	800ce7a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce6c:	bf00      	nop
 800ce6e:	e004      	b.n	800ce7a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce70:	bf00      	nop
 800ce72:	e002      	b.n	800ce7a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce74:	bf00      	nop
 800ce76:	e000      	b.n	800ce7a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce78:	bf00      	nop
		}
	}

	return val;
 800ce7a:	697b      	ldr	r3, [r7, #20]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ce84:	b590      	push	{r4, r7, lr}
 800ce86:	b089      	sub	sp, #36	@ 0x24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ce90:	2302      	movs	r3, #2
 800ce92:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	f240 80d9 	bls.w	800d04e <put_fat+0x1ca>
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	699b      	ldr	r3, [r3, #24]
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	f080 80d3 	bcs.w	800d04e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	2b03      	cmp	r3, #3
 800ceae:	f000 8096 	beq.w	800cfde <put_fat+0x15a>
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	f300 80cb 	bgt.w	800d04e <put_fat+0x1ca>
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d002      	beq.n	800cec2 <put_fat+0x3e>
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d06e      	beq.n	800cf9e <put_fat+0x11a>
 800cec0:	e0c5      	b.n	800d04e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	61bb      	str	r3, [r7, #24]
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	085b      	lsrs	r3, r3, #1
 800ceca:	69ba      	ldr	r2, [r7, #24]
 800cecc:	4413      	add	r3, r2
 800cece:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	0a5b      	lsrs	r3, r3, #9
 800ced8:	4413      	add	r3, r2
 800ceda:	4619      	mov	r1, r3
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	f7ff fe6f 	bl	800cbc0 <move_window>
 800cee2:	4603      	mov	r3, r0
 800cee4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cee6:	7ffb      	ldrb	r3, [r7, #31]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f040 80a9 	bne.w	800d040 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	1c59      	adds	r1, r3, #1
 800cef8:	61b9      	str	r1, [r7, #24]
 800cefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cefe:	4413      	add	r3, r2
 800cf00:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	f003 0301 	and.w	r3, r3, #1
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00d      	beq.n	800cf28 <put_fat+0xa4>
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	b25b      	sxtb	r3, r3
 800cf12:	f003 030f 	and.w	r3, r3, #15
 800cf16:	b25a      	sxtb	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	011b      	lsls	r3, r3, #4
 800cf1e:	b25b      	sxtb	r3, r3
 800cf20:	4313      	orrs	r3, r2
 800cf22:	b25b      	sxtb	r3, r3
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	e001      	b.n	800cf2c <put_fat+0xa8>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2201      	movs	r2, #1
 800cf34:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	0a5b      	lsrs	r3, r3, #9
 800cf3e:	4413      	add	r3, r2
 800cf40:	4619      	mov	r1, r3
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff fe3c 	bl	800cbc0 <move_window>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf4c:	7ffb      	ldrb	r3, [r7, #31]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d178      	bne.n	800d044 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf5e:	4413      	add	r3, r2
 800cf60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	f003 0301 	and.w	r3, r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d003      	beq.n	800cf74 <put_fat+0xf0>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	091b      	lsrs	r3, r3, #4
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	e00e      	b.n	800cf92 <put_fat+0x10e>
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	b25b      	sxtb	r3, r3
 800cf7a:	f023 030f 	bic.w	r3, r3, #15
 800cf7e:	b25a      	sxtb	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	0a1b      	lsrs	r3, r3, #8
 800cf84:	b25b      	sxtb	r3, r3
 800cf86:	f003 030f 	and.w	r3, r3, #15
 800cf8a:	b25b      	sxtb	r3, r3
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	b25b      	sxtb	r3, r3
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	70da      	strb	r2, [r3, #3]
			break;
 800cf9c:	e057      	b.n	800d04e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	0a1b      	lsrs	r3, r3, #8
 800cfa6:	4413      	add	r3, r2
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f7ff fe08 	bl	800cbc0 <move_window>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cfb4:	7ffb      	ldrb	r3, [r7, #31]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d146      	bne.n	800d048 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cfc8:	4413      	add	r3, r2
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	b292      	uxth	r2, r2
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff fb80 	bl	800c6d6 <st_word>
			fs->wflag = 1;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	70da      	strb	r2, [r3, #3]
			break;
 800cfdc:	e037      	b.n	800d04e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	09db      	lsrs	r3, r3, #7
 800cfe6:	4413      	add	r3, r2
 800cfe8:	4619      	mov	r1, r3
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f7ff fde8 	bl	800cbc0 <move_window>
 800cff0:	4603      	mov	r3, r0
 800cff2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cff4:	7ffb      	ldrb	r3, [r7, #31]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d128      	bne.n	800d04c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d00e:	4413      	add	r3, r2
 800d010:	4618      	mov	r0, r3
 800d012:	f7ff fb3d 	bl	800c690 <ld_dword>
 800d016:	4603      	mov	r3, r0
 800d018:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d01c:	4323      	orrs	r3, r4
 800d01e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d02e:	4413      	add	r3, r2
 800d030:	6879      	ldr	r1, [r7, #4]
 800d032:	4618      	mov	r0, r3
 800d034:	f7ff fb6a 	bl	800c70c <st_dword>
			fs->wflag = 1;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2201      	movs	r2, #1
 800d03c:	70da      	strb	r2, [r3, #3]
			break;
 800d03e:	e006      	b.n	800d04e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d040:	bf00      	nop
 800d042:	e004      	b.n	800d04e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d044:	bf00      	nop
 800d046:	e002      	b.n	800d04e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d048:	bf00      	nop
 800d04a:	e000      	b.n	800d04e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d04c:	bf00      	nop
		}
	}
	return res;
 800d04e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3724      	adds	r7, #36	@ 0x24
 800d054:	46bd      	mov	sp, r7
 800d056:	bd90      	pop	{r4, r7, pc}

0800d058 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d064:	2300      	movs	r3, #0
 800d066:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d904      	bls.n	800d07e <remove_chain+0x26>
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d301      	bcc.n	800d082 <remove_chain+0x2a>
 800d07e:	2302      	movs	r3, #2
 800d080:	e04b      	b.n	800d11a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00c      	beq.n	800d0a2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d088:	f04f 32ff 	mov.w	r2, #4294967295
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	69b8      	ldr	r0, [r7, #24]
 800d090:	f7ff fef8 	bl	800ce84 <put_fat>
 800d094:	4603      	mov	r3, r0
 800d096:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d098:	7ffb      	ldrb	r3, [r7, #31]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d001      	beq.n	800d0a2 <remove_chain+0x4a>
 800d09e:	7ffb      	ldrb	r3, [r7, #31]
 800d0a0:	e03b      	b.n	800d11a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d0a2:	68b9      	ldr	r1, [r7, #8]
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f7ff fe46 	bl	800cd36 <get_fat>
 800d0aa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d031      	beq.n	800d116 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d101      	bne.n	800d0bc <remove_chain+0x64>
 800d0b8:	2302      	movs	r3, #2
 800d0ba:	e02e      	b.n	800d11a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c2:	d101      	bne.n	800d0c8 <remove_chain+0x70>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e028      	b.n	800d11a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	68b9      	ldr	r1, [r7, #8]
 800d0cc:	69b8      	ldr	r0, [r7, #24]
 800d0ce:	f7ff fed9 	bl	800ce84 <put_fat>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d0d6:	7ffb      	ldrb	r3, [r7, #31]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <remove_chain+0x88>
 800d0dc:	7ffb      	ldrb	r3, [r7, #31]
 800d0de:	e01c      	b.n	800d11a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	695a      	ldr	r2, [r3, #20]
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	3b02      	subs	r3, #2
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d20b      	bcs.n	800d106 <remove_chain+0xae>
			fs->free_clst++;
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	695b      	ldr	r3, [r3, #20]
 800d0f2:	1c5a      	adds	r2, r3, #1
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	791b      	ldrb	r3, [r3, #4]
 800d0fc:	f043 0301 	orr.w	r3, r3, #1
 800d100:	b2da      	uxtb	r2, r3
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	699b      	ldr	r3, [r3, #24]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	429a      	cmp	r2, r3
 800d112:	d3c6      	bcc.n	800d0a2 <remove_chain+0x4a>
 800d114:	e000      	b.n	800d118 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d116:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3720      	adds	r7, #32
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b088      	sub	sp, #32
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10d      	bne.n	800d154 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d004      	beq.n	800d14e <create_chain+0x2c>
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	699b      	ldr	r3, [r3, #24]
 800d148:	69ba      	ldr	r2, [r7, #24]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d31b      	bcc.n	800d186 <create_chain+0x64>
 800d14e:	2301      	movs	r3, #1
 800d150:	61bb      	str	r3, [r7, #24]
 800d152:	e018      	b.n	800d186 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d154:	6839      	ldr	r1, [r7, #0]
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff fded 	bl	800cd36 <get_fat>
 800d15c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2b01      	cmp	r3, #1
 800d162:	d801      	bhi.n	800d168 <create_chain+0x46>
 800d164:	2301      	movs	r3, #1
 800d166:	e070      	b.n	800d24a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16e:	d101      	bne.n	800d174 <create_chain+0x52>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	e06a      	b.n	800d24a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d201      	bcs.n	800d182 <create_chain+0x60>
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	e063      	b.n	800d24a <create_chain+0x128>
		scl = clst;
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	3301      	adds	r3, #1
 800d18e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	699b      	ldr	r3, [r3, #24]
 800d194:	69fa      	ldr	r2, [r7, #28]
 800d196:	429a      	cmp	r2, r3
 800d198:	d307      	bcc.n	800d1aa <create_chain+0x88>
				ncl = 2;
 800d19a:	2302      	movs	r3, #2
 800d19c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d19e:	69fa      	ldr	r2, [r7, #28]
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d901      	bls.n	800d1aa <create_chain+0x88>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e04f      	b.n	800d24a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d1aa:	69f9      	ldr	r1, [r7, #28]
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7ff fdc2 	bl	800cd36 <get_fat>
 800d1b2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00e      	beq.n	800d1d8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d003      	beq.n	800d1c8 <create_chain+0xa6>
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c6:	d101      	bne.n	800d1cc <create_chain+0xaa>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	e03e      	b.n	800d24a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d1cc:	69fa      	ldr	r2, [r7, #28]
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d1da      	bne.n	800d18a <create_chain+0x68>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	e038      	b.n	800d24a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d1d8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d1da:	f04f 32ff 	mov.w	r2, #4294967295
 800d1de:	69f9      	ldr	r1, [r7, #28]
 800d1e0:	6938      	ldr	r0, [r7, #16]
 800d1e2:	f7ff fe4f 	bl	800ce84 <put_fat>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d1ea:	7dfb      	ldrb	r3, [r7, #23]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d109      	bne.n	800d204 <create_chain+0xe2>
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d006      	beq.n	800d204 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d1f6:	69fa      	ldr	r2, [r7, #28]
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	6938      	ldr	r0, [r7, #16]
 800d1fc:	f7ff fe42 	bl	800ce84 <put_fat>
 800d200:	4603      	mov	r3, r0
 800d202:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d204:	7dfb      	ldrb	r3, [r7, #23]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d116      	bne.n	800d238 <create_chain+0x116>
		fs->last_clst = ncl;
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	69fa      	ldr	r2, [r7, #28]
 800d20e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	695a      	ldr	r2, [r3, #20]
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	3b02      	subs	r3, #2
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d804      	bhi.n	800d228 <create_chain+0x106>
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	695b      	ldr	r3, [r3, #20]
 800d222:	1e5a      	subs	r2, r3, #1
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	791b      	ldrb	r3, [r3, #4]
 800d22c:	f043 0301 	orr.w	r3, r3, #1
 800d230:	b2da      	uxtb	r2, r3
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	711a      	strb	r2, [r3, #4]
 800d236:	e007      	b.n	800d248 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d238:	7dfb      	ldrb	r3, [r7, #23]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d102      	bne.n	800d244 <create_chain+0x122>
 800d23e:	f04f 33ff 	mov.w	r3, #4294967295
 800d242:	e000      	b.n	800d246 <create_chain+0x124>
 800d244:	2301      	movs	r3, #1
 800d246:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d248:	69fb      	ldr	r3, [r7, #28]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3720      	adds	r7, #32
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d252:	b480      	push	{r7}
 800d254:	b087      	sub	sp, #28
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d266:	3304      	adds	r3, #4
 800d268:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	0a5b      	lsrs	r3, r3, #9
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	8952      	ldrh	r2, [r2, #10]
 800d272:	fbb3 f3f2 	udiv	r3, r3, r2
 800d276:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	1d1a      	adds	r2, r3, #4
 800d27c:	613a      	str	r2, [r7, #16]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d101      	bne.n	800d28c <clmt_clust+0x3a>
 800d288:	2300      	movs	r3, #0
 800d28a:	e010      	b.n	800d2ae <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	429a      	cmp	r2, r3
 800d292:	d307      	bcc.n	800d2a4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d294:	697a      	ldr	r2, [r7, #20]
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	617b      	str	r3, [r7, #20]
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	3304      	adds	r3, #4
 800d2a0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d2a2:	e7e9      	b.n	800d278 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d2a4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	4413      	add	r3, r2
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	371c      	adds	r7, #28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b086      	sub	sp, #24
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d2d0:	d204      	bcs.n	800d2dc <dir_sdi+0x22>
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	f003 031f 	and.w	r3, r3, #31
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d001      	beq.n	800d2e0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d2dc:	2302      	movs	r3, #2
 800d2de:	e063      	b.n	800d3a8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d106      	bne.n	800d300 <dir_sdi+0x46>
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	d902      	bls.n	800d300 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2fe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10c      	bne.n	800d320 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	095b      	lsrs	r3, r3, #5
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	8912      	ldrh	r2, [r2, #8]
 800d30e:	4293      	cmp	r3, r2
 800d310:	d301      	bcc.n	800d316 <dir_sdi+0x5c>
 800d312:	2302      	movs	r3, #2
 800d314:	e048      	b.n	800d3a8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	61da      	str	r2, [r3, #28]
 800d31e:	e029      	b.n	800d374 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	895b      	ldrh	r3, [r3, #10]
 800d324:	025b      	lsls	r3, r3, #9
 800d326:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d328:	e019      	b.n	800d35e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6979      	ldr	r1, [r7, #20]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff fd01 	bl	800cd36 <get_fat>
 800d334:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33c:	d101      	bne.n	800d342 <dir_sdi+0x88>
 800d33e:	2301      	movs	r3, #1
 800d340:	e032      	b.n	800d3a8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d904      	bls.n	800d352 <dir_sdi+0x98>
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	697a      	ldr	r2, [r7, #20]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d301      	bcc.n	800d356 <dir_sdi+0x9c>
 800d352:	2302      	movs	r3, #2
 800d354:	e028      	b.n	800d3a8 <dir_sdi+0xee>
			ofs -= csz;
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	429a      	cmp	r2, r3
 800d364:	d2e1      	bcs.n	800d32a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d366:	6979      	ldr	r1, [r7, #20]
 800d368:	6938      	ldr	r0, [r7, #16]
 800d36a:	f7ff fcc5 	bl	800ccf8 <clust2sect>
 800d36e:	4602      	mov	r2, r0
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	69db      	ldr	r3, [r3, #28]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d101      	bne.n	800d386 <dir_sdi+0xcc>
 800d382:	2302      	movs	r3, #2
 800d384:	e010      	b.n	800d3a8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	69da      	ldr	r2, [r3, #28]
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	0a5b      	lsrs	r3, r3, #9
 800d38e:	441a      	add	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a0:	441a      	add	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	3320      	adds	r3, #32
 800d3c6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	69db      	ldr	r3, [r3, #28]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d003      	beq.n	800d3d8 <dir_next+0x28>
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d3d6:	d301      	bcc.n	800d3dc <dir_next+0x2c>
 800d3d8:	2304      	movs	r3, #4
 800d3da:	e0aa      	b.n	800d532 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f040 8098 	bne.w	800d518 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	69db      	ldr	r3, [r3, #28]
 800d3ec:	1c5a      	adds	r2, r3, #1
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10b      	bne.n	800d412 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	095b      	lsrs	r3, r3, #5
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	8912      	ldrh	r2, [r2, #8]
 800d402:	4293      	cmp	r3, r2
 800d404:	f0c0 8088 	bcc.w	800d518 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	61da      	str	r2, [r3, #28]
 800d40e:	2304      	movs	r3, #4
 800d410:	e08f      	b.n	800d532 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	0a5b      	lsrs	r3, r3, #9
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	8952      	ldrh	r2, [r2, #10]
 800d41a:	3a01      	subs	r2, #1
 800d41c:	4013      	ands	r3, r2
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d17a      	bne.n	800d518 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	699b      	ldr	r3, [r3, #24]
 800d428:	4619      	mov	r1, r3
 800d42a:	4610      	mov	r0, r2
 800d42c:	f7ff fc83 	bl	800cd36 <get_fat>
 800d430:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d801      	bhi.n	800d43c <dir_next+0x8c>
 800d438:	2302      	movs	r3, #2
 800d43a:	e07a      	b.n	800d532 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d442:	d101      	bne.n	800d448 <dir_next+0x98>
 800d444:	2301      	movs	r3, #1
 800d446:	e074      	b.n	800d532 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	699b      	ldr	r3, [r3, #24]
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d358      	bcc.n	800d504 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d104      	bne.n	800d462 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	61da      	str	r2, [r3, #28]
 800d45e:	2304      	movs	r3, #4
 800d460:	e067      	b.n	800d532 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	699b      	ldr	r3, [r3, #24]
 800d468:	4619      	mov	r1, r3
 800d46a:	4610      	mov	r0, r2
 800d46c:	f7ff fe59 	bl	800d122 <create_chain>
 800d470:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <dir_next+0xcc>
 800d478:	2307      	movs	r3, #7
 800d47a:	e05a      	b.n	800d532 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d101      	bne.n	800d486 <dir_next+0xd6>
 800d482:	2302      	movs	r3, #2
 800d484:	e055      	b.n	800d532 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48c:	d101      	bne.n	800d492 <dir_next+0xe2>
 800d48e:	2301      	movs	r3, #1
 800d490:	e04f      	b.n	800d532 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f7ff fb50 	bl	800cb38 <sync_window>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d001      	beq.n	800d4a2 <dir_next+0xf2>
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e047      	b.n	800d532 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	3334      	adds	r3, #52	@ 0x34
 800d4a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7ff f97a 	bl	800c7a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	613b      	str	r3, [r7, #16]
 800d4b6:	6979      	ldr	r1, [r7, #20]
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7ff fc1d 	bl	800ccf8 <clust2sect>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	631a      	str	r2, [r3, #48]	@ 0x30
 800d4c4:	e012      	b.n	800d4ec <dir_next+0x13c>
						fs->wflag = 1;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f7ff fb33 	bl	800cb38 <sync_window>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d001      	beq.n	800d4dc <dir_next+0x12c>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e02a      	b.n	800d532 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	613b      	str	r3, [r7, #16]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4e6:	1c5a      	adds	r2, r3, #1
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	631a      	str	r2, [r3, #48]	@ 0x30
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	895b      	ldrh	r3, [r3, #10]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d3e6      	bcc.n	800d4c6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	1ad2      	subs	r2, r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d50a:	6979      	ldr	r1, [r7, #20]
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f7ff fbf3 	bl	800ccf8 <clust2sect>
 800d512:	4602      	mov	r2, r0
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68ba      	ldr	r2, [r7, #8]
 800d51c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52a:	441a      	add	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3718      	adds	r7, #24
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b086      	sub	sp, #24
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d54a:	2100      	movs	r1, #0
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7ff feb4 	bl	800d2ba <dir_sdi>
 800d552:	4603      	mov	r3, r0
 800d554:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d556:	7dfb      	ldrb	r3, [r7, #23]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d12b      	bne.n	800d5b4 <dir_alloc+0x7a>
		n = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	69db      	ldr	r3, [r3, #28]
 800d564:	4619      	mov	r1, r3
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f7ff fb2a 	bl	800cbc0 <move_window>
 800d56c:	4603      	mov	r3, r0
 800d56e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d570:	7dfb      	ldrb	r3, [r7, #23]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d11d      	bne.n	800d5b2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	2be5      	cmp	r3, #229	@ 0xe5
 800d57e:	d004      	beq.n	800d58a <dir_alloc+0x50>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a1b      	ldr	r3, [r3, #32]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d107      	bne.n	800d59a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	3301      	adds	r3, #1
 800d58e:	613b      	str	r3, [r7, #16]
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	429a      	cmp	r2, r3
 800d596:	d102      	bne.n	800d59e <dir_alloc+0x64>
 800d598:	e00c      	b.n	800d5b4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d59a:	2300      	movs	r3, #0
 800d59c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d59e:	2101      	movs	r1, #1
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff ff05 	bl	800d3b0 <dir_next>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d5aa:	7dfb      	ldrb	r3, [r7, #23]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d0d7      	beq.n	800d560 <dir_alloc+0x26>
 800d5b0:	e000      	b.n	800d5b4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d5b2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d5b4:	7dfb      	ldrb	r3, [r7, #23]
 800d5b6:	2b04      	cmp	r3, #4
 800d5b8:	d101      	bne.n	800d5be <dir_alloc+0x84>
 800d5ba:	2307      	movs	r3, #7
 800d5bc:	75fb      	strb	r3, [r7, #23]
	return res;
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3718      	adds	r7, #24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	331a      	adds	r3, #26
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff f842 	bl	800c660 <ld_word>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d109      	bne.n	800d5fc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	3314      	adds	r3, #20
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7ff f837 	bl	800c660 <ld_word>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	041b      	lsls	r3, r3, #16
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b084      	sub	sp, #16
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	60f8      	str	r0, [r7, #12]
 800d60e:	60b9      	str	r1, [r7, #8]
 800d610:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	331a      	adds	r3, #26
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	b292      	uxth	r2, r2
 800d61a:	4611      	mov	r1, r2
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff f85a 	bl	800c6d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b03      	cmp	r3, #3
 800d628:	d109      	bne.n	800d63e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	f103 0214 	add.w	r2, r3, #20
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	0c1b      	lsrs	r3, r3, #16
 800d634:	b29b      	uxth	r3, r3
 800d636:	4619      	mov	r1, r3
 800d638:	4610      	mov	r0, r2
 800d63a:	f7ff f84c 	bl	800c6d6 <st_word>
	}
}
 800d63e:	bf00      	nop
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
	...

0800d648 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d648:	b590      	push	{r4, r7, lr}
 800d64a:	b087      	sub	sp, #28
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	331a      	adds	r3, #26
 800d656:	4618      	mov	r0, r3
 800d658:	f7ff f802 	bl	800c660 <ld_word>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <cmp_lfn+0x1e>
 800d662:	2300      	movs	r3, #0
 800d664:	e059      	b.n	800d71a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d66e:	1e5a      	subs	r2, r3, #1
 800d670:	4613      	mov	r3, r2
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	4413      	add	r3, r2
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	4413      	add	r3, r2
 800d67a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d67c:	2301      	movs	r3, #1
 800d67e:	81fb      	strh	r3, [r7, #14]
 800d680:	2300      	movs	r3, #0
 800d682:	613b      	str	r3, [r7, #16]
 800d684:	e033      	b.n	800d6ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d686:	4a27      	ldr	r2, [pc, #156]	@ (800d724 <cmp_lfn+0xdc>)
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	4413      	add	r3, r2
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	461a      	mov	r2, r3
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	4413      	add	r3, r2
 800d694:	4618      	mov	r0, r3
 800d696:	f7fe ffe3 	bl	800c660 <ld_word>
 800d69a:	4603      	mov	r3, r0
 800d69c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d69e:	89fb      	ldrh	r3, [r7, #14]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d01a      	beq.n	800d6da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2bfe      	cmp	r3, #254	@ 0xfe
 800d6a8:	d812      	bhi.n	800d6d0 <cmp_lfn+0x88>
 800d6aa:	89bb      	ldrh	r3, [r7, #12]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f001 fcd5 	bl	800f05c <ff_wtoupper>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	461c      	mov	r4, r3
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	1c5a      	adds	r2, r3, #1
 800d6ba:	617a      	str	r2, [r7, #20]
 800d6bc:	005b      	lsls	r3, r3, #1
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f001 fcc9 	bl	800f05c <ff_wtoupper>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	429c      	cmp	r4, r3
 800d6ce:	d001      	beq.n	800d6d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	e022      	b.n	800d71a <cmp_lfn+0xd2>
			}
			wc = uc;
 800d6d4:	89bb      	ldrh	r3, [r7, #12]
 800d6d6:	81fb      	strh	r3, [r7, #14]
 800d6d8:	e006      	b.n	800d6e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d6da:	89bb      	ldrh	r3, [r7, #12]
 800d6dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d001      	beq.n	800d6e8 <cmp_lfn+0xa0>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	e018      	b.n	800d71a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	613b      	str	r3, [r7, #16]
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	2b0c      	cmp	r3, #12
 800d6f2:	d9c8      	bls.n	800d686 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00b      	beq.n	800d718 <cmp_lfn+0xd0>
 800d700:	89fb      	ldrh	r3, [r7, #14]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d008      	beq.n	800d718 <cmp_lfn+0xd0>
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	4413      	add	r3, r2
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <cmp_lfn+0xd0>
 800d714:	2300      	movs	r3, #0
 800d716:	e000      	b.n	800d71a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d718:	2301      	movs	r3, #1
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	371c      	adds	r7, #28
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd90      	pop	{r4, r7, pc}
 800d722:	bf00      	nop
 800d724:	0800fd98 	.word	0x0800fd98

0800d728 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b088      	sub	sp, #32
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	4611      	mov	r1, r2
 800d734:	461a      	mov	r2, r3
 800d736:	460b      	mov	r3, r1
 800d738:	71fb      	strb	r3, [r7, #7]
 800d73a:	4613      	mov	r3, r2
 800d73c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	330d      	adds	r3, #13
 800d742:	79ba      	ldrb	r2, [r7, #6]
 800d744:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	330b      	adds	r3, #11
 800d74a:	220f      	movs	r2, #15
 800d74c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	330c      	adds	r3, #12
 800d752:	2200      	movs	r2, #0
 800d754:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	331a      	adds	r3, #26
 800d75a:	2100      	movs	r1, #0
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fe ffba 	bl	800c6d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d762:	79fb      	ldrb	r3, [r7, #7]
 800d764:	1e5a      	subs	r2, r3, #1
 800d766:	4613      	mov	r3, r2
 800d768:	005b      	lsls	r3, r3, #1
 800d76a:	4413      	add	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	82fb      	strh	r3, [r7, #22]
 800d776:	2300      	movs	r3, #0
 800d778:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d77a:	8afb      	ldrh	r3, [r7, #22]
 800d77c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d780:	4293      	cmp	r3, r2
 800d782:	d007      	beq.n	800d794 <put_lfn+0x6c>
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	61fa      	str	r2, [r7, #28]
 800d78a:	005b      	lsls	r3, r3, #1
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	4413      	add	r3, r2
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d794:	4a17      	ldr	r2, [pc, #92]	@ (800d7f4 <put_lfn+0xcc>)
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	4413      	add	r3, r2
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	461a      	mov	r2, r3
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	8afa      	ldrh	r2, [r7, #22]
 800d7a4:	4611      	mov	r1, r2
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fe ff95 	bl	800c6d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d7ac:	8afb      	ldrh	r3, [r7, #22]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d102      	bne.n	800d7b8 <put_lfn+0x90>
 800d7b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	61bb      	str	r3, [r7, #24]
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	2b0c      	cmp	r3, #12
 800d7c2:	d9da      	bls.n	800d77a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d7c4:	8afb      	ldrh	r3, [r7, #22]
 800d7c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d006      	beq.n	800d7dc <put_lfn+0xb4>
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	881b      	ldrh	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d103      	bne.n	800d7e4 <put_lfn+0xbc>
 800d7dc:	79fb      	ldrb	r3, [r7, #7]
 800d7de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	79fa      	ldrb	r2, [r7, #7]
 800d7e8:	701a      	strb	r2, [r3, #0]
}
 800d7ea:	bf00      	nop
 800d7ec:	3720      	adds	r7, #32
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	0800fd98 	.word	0x0800fd98

0800d7f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08c      	sub	sp, #48	@ 0x30
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d806:	220b      	movs	r2, #11
 800d808:	68b9      	ldr	r1, [r7, #8]
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f7fe ffaa 	bl	800c764 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	2b05      	cmp	r3, #5
 800d814:	d929      	bls.n	800d86a <gen_numname+0x72>
		sr = seq;
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d81a:	e020      	b.n	800d85e <gen_numname+0x66>
			wc = *lfn++;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	1c9a      	adds	r2, r3, #2
 800d820:	607a      	str	r2, [r7, #4]
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d826:	2300      	movs	r3, #0
 800d828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d82a:	e015      	b.n	800d858 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	005a      	lsls	r2, r3, #1
 800d830:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d832:	f003 0301 	and.w	r3, r3, #1
 800d836:	4413      	add	r3, r2
 800d838:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d83a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d83c:	085b      	lsrs	r3, r3, #1
 800d83e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <gen_numname+0x5a>
 800d84a:	69fa      	ldr	r2, [r7, #28]
 800d84c:	4b30      	ldr	r3, [pc, #192]	@ (800d910 <gen_numname+0x118>)
 800d84e:	4053      	eors	r3, r2
 800d850:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d854:	3301      	adds	r3, #1
 800d856:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85a:	2b0f      	cmp	r3, #15
 800d85c:	d9e6      	bls.n	800d82c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1da      	bne.n	800d81c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d86a:	2307      	movs	r3, #7
 800d86c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	b2db      	uxtb	r3, r3
 800d872:	f003 030f 	and.w	r3, r3, #15
 800d876:	b2db      	uxtb	r3, r3
 800d878:	3330      	adds	r3, #48	@ 0x30
 800d87a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d87e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d882:	2b39      	cmp	r3, #57	@ 0x39
 800d884:	d904      	bls.n	800d890 <gen_numname+0x98>
 800d886:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d88a:	3307      	adds	r3, #7
 800d88c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d892:	1e5a      	subs	r2, r3, #1
 800d894:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d896:	3330      	adds	r3, #48	@ 0x30
 800d898:	443b      	add	r3, r7
 800d89a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d89e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	091b      	lsrs	r3, r3, #4
 800d8a6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1df      	bne.n	800d86e <gen_numname+0x76>
	ns[i] = '~';
 800d8ae:	f107 0214 	add.w	r2, r7, #20
 800d8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b4:	4413      	add	r3, r2
 800d8b6:	227e      	movs	r2, #126	@ 0x7e
 800d8b8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8be:	e002      	b.n	800d8c6 <gen_numname+0xce>
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d205      	bcs.n	800d8da <gen_numname+0xe2>
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d2:	4413      	add	r3, r2
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	2b20      	cmp	r3, #32
 800d8d8:	d1f2      	bne.n	800d8c0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8dc:	2b07      	cmp	r3, #7
 800d8de:	d807      	bhi.n	800d8f0 <gen_numname+0xf8>
 800d8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e2:	1c5a      	adds	r2, r3, #1
 800d8e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d8e6:	3330      	adds	r3, #48	@ 0x30
 800d8e8:	443b      	add	r3, r7
 800d8ea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d8ee:	e000      	b.n	800d8f2 <gen_numname+0xfa>
 800d8f0:	2120      	movs	r1, #32
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f4:	1c5a      	adds	r2, r3, #1
 800d8f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	460a      	mov	r2, r1
 800d8fe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d902:	2b07      	cmp	r3, #7
 800d904:	d9e9      	bls.n	800d8da <gen_numname+0xe2>
}
 800d906:	bf00      	nop
 800d908:	bf00      	nop
 800d90a:	3730      	adds	r7, #48	@ 0x30
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	00011021 	.word	0x00011021

0800d914 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d91c:	2300      	movs	r3, #0
 800d91e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d920:	230b      	movs	r3, #11
 800d922:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d924:	7bfb      	ldrb	r3, [r7, #15]
 800d926:	b2da      	uxtb	r2, r3
 800d928:	0852      	lsrs	r2, r2, #1
 800d92a:	01db      	lsls	r3, r3, #7
 800d92c:	4313      	orrs	r3, r2
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	1c59      	adds	r1, r3, #1
 800d934:	6079      	str	r1, [r7, #4]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	4413      	add	r3, r2
 800d93a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	3b01      	subs	r3, #1
 800d940:	60bb      	str	r3, [r7, #8]
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1ed      	bne.n	800d924 <sum_sfn+0x10>
	return sum;
 800d948:	7bfb      	ldrb	r3, [r7, #15]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b086      	sub	sp, #24
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d964:	2100      	movs	r1, #0
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7ff fca7 	bl	800d2ba <dir_sdi>
 800d96c:	4603      	mov	r3, r0
 800d96e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d970:	7dfb      	ldrb	r3, [r7, #23]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d001      	beq.n	800d97a <dir_find+0x24>
 800d976:	7dfb      	ldrb	r3, [r7, #23]
 800d978:	e0a9      	b.n	800dace <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d97a:	23ff      	movs	r3, #255	@ 0xff
 800d97c:	753b      	strb	r3, [r7, #20]
 800d97e:	7d3b      	ldrb	r3, [r7, #20]
 800d980:	757b      	strb	r3, [r7, #21]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f04f 32ff 	mov.w	r2, #4294967295
 800d988:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	69db      	ldr	r3, [r3, #28]
 800d98e:	4619      	mov	r1, r3
 800d990:	6938      	ldr	r0, [r7, #16]
 800d992:	f7ff f915 	bl	800cbc0 <move_window>
 800d996:	4603      	mov	r3, r0
 800d998:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d99a:	7dfb      	ldrb	r3, [r7, #23]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	f040 8090 	bne.w	800dac2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a1b      	ldr	r3, [r3, #32]
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d9aa:	7dbb      	ldrb	r3, [r7, #22]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d102      	bne.n	800d9b6 <dir_find+0x60>
 800d9b0:	2304      	movs	r3, #4
 800d9b2:	75fb      	strb	r3, [r7, #23]
 800d9b4:	e08a      	b.n	800dacc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6a1b      	ldr	r3, [r3, #32]
 800d9ba:	330b      	adds	r3, #11
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9c2:	73fb      	strb	r3, [r7, #15]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	7bfa      	ldrb	r2, [r7, #15]
 800d9c8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d9ca:	7dbb      	ldrb	r3, [r7, #22]
 800d9cc:	2be5      	cmp	r3, #229	@ 0xe5
 800d9ce:	d007      	beq.n	800d9e0 <dir_find+0x8a>
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
 800d9d2:	f003 0308 	and.w	r3, r3, #8
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d009      	beq.n	800d9ee <dir_find+0x98>
 800d9da:	7bfb      	ldrb	r3, [r7, #15]
 800d9dc:	2b0f      	cmp	r3, #15
 800d9de:	d006      	beq.n	800d9ee <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d9e0:	23ff      	movs	r3, #255	@ 0xff
 800d9e2:	757b      	strb	r3, [r7, #21]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ea:	631a      	str	r2, [r3, #48]	@ 0x30
 800d9ec:	e05e      	b.n	800daac <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d9ee:	7bfb      	ldrb	r3, [r7, #15]
 800d9f0:	2b0f      	cmp	r3, #15
 800d9f2:	d136      	bne.n	800da62 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d154      	bne.n	800daac <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800da02:	7dbb      	ldrb	r3, [r7, #22]
 800da04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d00d      	beq.n	800da28 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6a1b      	ldr	r3, [r3, #32]
 800da10:	7b5b      	ldrb	r3, [r3, #13]
 800da12:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800da14:	7dbb      	ldrb	r3, [r7, #22]
 800da16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da1a:	75bb      	strb	r3, [r7, #22]
 800da1c:	7dbb      	ldrb	r3, [r7, #22]
 800da1e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	695a      	ldr	r2, [r3, #20]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800da28:	7dba      	ldrb	r2, [r7, #22]
 800da2a:	7d7b      	ldrb	r3, [r7, #21]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d115      	bne.n	800da5c <dir_find+0x106>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6a1b      	ldr	r3, [r3, #32]
 800da34:	330d      	adds	r3, #13
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	7d3a      	ldrb	r2, [r7, #20]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d10e      	bne.n	800da5c <dir_find+0x106>
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	68da      	ldr	r2, [r3, #12]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	4619      	mov	r1, r3
 800da48:	4610      	mov	r0, r2
 800da4a:	f7ff fdfd 	bl	800d648 <cmp_lfn>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d003      	beq.n	800da5c <dir_find+0x106>
 800da54:	7d7b      	ldrb	r3, [r7, #21]
 800da56:	3b01      	subs	r3, #1
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	e000      	b.n	800da5e <dir_find+0x108>
 800da5c:	23ff      	movs	r3, #255	@ 0xff
 800da5e:	757b      	strb	r3, [r7, #21]
 800da60:	e024      	b.n	800daac <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800da62:	7d7b      	ldrb	r3, [r7, #21]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d109      	bne.n	800da7c <dir_find+0x126>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a1b      	ldr	r3, [r3, #32]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7ff ff51 	bl	800d914 <sum_sfn>
 800da72:	4603      	mov	r3, r0
 800da74:	461a      	mov	r2, r3
 800da76:	7d3b      	ldrb	r3, [r7, #20]
 800da78:	4293      	cmp	r3, r2
 800da7a:	d024      	beq.n	800dac6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800da82:	f003 0301 	and.w	r3, r3, #1
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10a      	bne.n	800daa0 <dir_find+0x14a>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a18      	ldr	r0, [r3, #32]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	3324      	adds	r3, #36	@ 0x24
 800da92:	220b      	movs	r2, #11
 800da94:	4619      	mov	r1, r3
 800da96:	f7fe fea1 	bl	800c7dc <mem_cmp>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d014      	beq.n	800daca <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800daa0:	23ff      	movs	r3, #255	@ 0xff
 800daa2:	757b      	strb	r3, [r7, #21]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f04f 32ff 	mov.w	r2, #4294967295
 800daaa:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800daac:	2100      	movs	r1, #0
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff fc7e 	bl	800d3b0 <dir_next>
 800dab4:	4603      	mov	r3, r0
 800dab6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f43f af65 	beq.w	800d98a <dir_find+0x34>
 800dac0:	e004      	b.n	800dacc <dir_find+0x176>
		if (res != FR_OK) break;
 800dac2:	bf00      	nop
 800dac4:	e002      	b.n	800dacc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dac6:	bf00      	nop
 800dac8:	e000      	b.n	800dacc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800daca:	bf00      	nop

	return res;
 800dacc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
	...

0800dad8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b08c      	sub	sp, #48	@ 0x30
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800daec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <dir_register+0x20>
 800daf4:	2306      	movs	r3, #6
 800daf6:	e0e0      	b.n	800dcba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800daf8:	2300      	movs	r3, #0
 800dafa:	627b      	str	r3, [r7, #36]	@ 0x24
 800dafc:	e002      	b.n	800db04 <dir_register+0x2c>
 800dafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db00:	3301      	adds	r3, #1
 800db02:	627b      	str	r3, [r7, #36]	@ 0x24
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	68da      	ldr	r2, [r3, #12]
 800db08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	4413      	add	r3, r2
 800db0e:	881b      	ldrh	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d1f4      	bne.n	800dafe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800db1a:	f107 030c 	add.w	r3, r7, #12
 800db1e:	220c      	movs	r2, #12
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe fe1f 	bl	800c764 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800db26:	7dfb      	ldrb	r3, [r7, #23]
 800db28:	f003 0301 	and.w	r3, r3, #1
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d032      	beq.n	800db96 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2240      	movs	r2, #64	@ 0x40
 800db34:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800db38:	2301      	movs	r3, #1
 800db3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db3c:	e016      	b.n	800db6c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	68da      	ldr	r2, [r3, #12]
 800db48:	f107 010c 	add.w	r1, r7, #12
 800db4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4e:	f7ff fe53 	bl	800d7f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff feff 	bl	800d956 <dir_find>
 800db58:	4603      	mov	r3, r0
 800db5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800db5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800db62:	2b00      	cmp	r3, #0
 800db64:	d106      	bne.n	800db74 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800db66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db68:	3301      	adds	r3, #1
 800db6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6e:	2b63      	cmp	r3, #99	@ 0x63
 800db70:	d9e5      	bls.n	800db3e <dir_register+0x66>
 800db72:	e000      	b.n	800db76 <dir_register+0x9e>
			if (res != FR_OK) break;
 800db74:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800db76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db78:	2b64      	cmp	r3, #100	@ 0x64
 800db7a:	d101      	bne.n	800db80 <dir_register+0xa8>
 800db7c:	2307      	movs	r3, #7
 800db7e:	e09c      	b.n	800dcba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800db80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800db84:	2b04      	cmp	r3, #4
 800db86:	d002      	beq.n	800db8e <dir_register+0xb6>
 800db88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800db8c:	e095      	b.n	800dcba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800db8e:	7dfa      	ldrb	r2, [r7, #23]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800db96:	7dfb      	ldrb	r3, [r7, #23]
 800db98:	f003 0302 	and.w	r3, r3, #2
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d007      	beq.n	800dbb0 <dir_register+0xd8>
 800dba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba2:	330c      	adds	r3, #12
 800dba4:	4a47      	ldr	r2, [pc, #284]	@ (800dcc4 <dir_register+0x1ec>)
 800dba6:	fba2 2303 	umull	r2, r3, r2, r3
 800dbaa:	089b      	lsrs	r3, r3, #2
 800dbac:	3301      	adds	r3, #1
 800dbae:	e000      	b.n	800dbb2 <dir_register+0xda>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dbb4:	6a39      	ldr	r1, [r7, #32]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff fcbf 	bl	800d53a <dir_alloc>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dbc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d148      	bne.n	800dc5c <dir_register+0x184>
 800dbca:	6a3b      	ldr	r3, [r7, #32]
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	623b      	str	r3, [r7, #32]
 800dbd0:	6a3b      	ldr	r3, [r7, #32]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d042      	beq.n	800dc5c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	695a      	ldr	r2, [r3, #20]
 800dbda:	6a3b      	ldr	r3, [r7, #32]
 800dbdc:	015b      	lsls	r3, r3, #5
 800dbde:	1ad3      	subs	r3, r2, r3
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff fb69 	bl	800d2ba <dir_sdi>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800dbee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d132      	bne.n	800dc5c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	3324      	adds	r3, #36	@ 0x24
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7ff fe8a 	bl	800d914 <sum_sfn>
 800dc00:	4603      	mov	r3, r0
 800dc02:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	69db      	ldr	r3, [r3, #28]
 800dc08:	4619      	mov	r1, r3
 800dc0a:	69f8      	ldr	r0, [r7, #28]
 800dc0c:	f7fe ffd8 	bl	800cbc0 <move_window>
 800dc10:	4603      	mov	r3, r0
 800dc12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800dc16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d11d      	bne.n	800dc5a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	68d8      	ldr	r0, [r3, #12]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a19      	ldr	r1, [r3, #32]
 800dc26:	6a3b      	ldr	r3, [r7, #32]
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	7efb      	ldrb	r3, [r7, #27]
 800dc2c:	f7ff fd7c 	bl	800d728 <put_lfn>
				fs->wflag = 1;
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	2201      	movs	r2, #1
 800dc34:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800dc36:	2100      	movs	r1, #0
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7ff fbb9 	bl	800d3b0 <dir_next>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800dc44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d107      	bne.n	800dc5c <dir_register+0x184>
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	623b      	str	r3, [r7, #32]
 800dc52:	6a3b      	ldr	r3, [r7, #32]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1d5      	bne.n	800dc04 <dir_register+0x12c>
 800dc58:	e000      	b.n	800dc5c <dir_register+0x184>
				if (res != FR_OK) break;
 800dc5a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dc5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d128      	bne.n	800dcb6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	69db      	ldr	r3, [r3, #28]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	69f8      	ldr	r0, [r7, #28]
 800dc6c:	f7fe ffa8 	bl	800cbc0 <move_window>
 800dc70:	4603      	mov	r3, r0
 800dc72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800dc76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d11b      	bne.n	800dcb6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a1b      	ldr	r3, [r3, #32]
 800dc82:	2220      	movs	r2, #32
 800dc84:	2100      	movs	r1, #0
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fe fd8d 	bl	800c7a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a18      	ldr	r0, [r3, #32]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	3324      	adds	r3, #36	@ 0x24
 800dc94:	220b      	movs	r2, #11
 800dc96:	4619      	mov	r1, r3
 800dc98:	f7fe fd64 	bl	800c764 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a1b      	ldr	r3, [r3, #32]
 800dca6:	330c      	adds	r3, #12
 800dca8:	f002 0218 	and.w	r2, r2, #24
 800dcac:	b2d2      	uxtb	r2, r2
 800dcae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dcb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3730      	adds	r7, #48	@ 0x30
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	4ec4ec4f 	.word	0x4ec4ec4f

0800dcc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b08a      	sub	sp, #40	@ 0x28
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	613b      	str	r3, [r7, #16]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	60fb      	str	r3, [r7, #12]
 800dce0:	2300      	movs	r3, #0
 800dce2:	617b      	str	r3, [r7, #20]
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	1c5a      	adds	r2, r3, #1
 800dcec:	61ba      	str	r2, [r7, #24]
 800dcee:	693a      	ldr	r2, [r7, #16]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dcf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcf8:	2b1f      	cmp	r3, #31
 800dcfa:	d940      	bls.n	800dd7e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dcfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcfe:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd00:	d006      	beq.n	800dd10 <create_name+0x48>
 800dd02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd04:	2b5c      	cmp	r3, #92	@ 0x5c
 800dd06:	d110      	bne.n	800dd2a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dd08:	e002      	b.n	800dd10 <create_name+0x48>
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	61bb      	str	r3, [r7, #24]
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	4413      	add	r3, r2
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd1a:	d0f6      	beq.n	800dd0a <create_name+0x42>
 800dd1c:	693a      	ldr	r2, [r7, #16]
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	4413      	add	r3, r2
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	2b5c      	cmp	r3, #92	@ 0x5c
 800dd26:	d0f0      	beq.n	800dd0a <create_name+0x42>
			break;
 800dd28:	e02a      	b.n	800dd80 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2bfe      	cmp	r3, #254	@ 0xfe
 800dd2e:	d901      	bls.n	800dd34 <create_name+0x6c>
 800dd30:	2306      	movs	r3, #6
 800dd32:	e17d      	b.n	800e030 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dd34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dd3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd3c:	2101      	movs	r1, #1
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f001 f950 	bl	800efe4 <ff_convert>
 800dd44:	4603      	mov	r3, r0
 800dd46:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dd48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d101      	bne.n	800dd52 <create_name+0x8a>
 800dd4e:	2306      	movs	r3, #6
 800dd50:	e16e      	b.n	800e030 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dd52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd54:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd56:	d809      	bhi.n	800dd6c <create_name+0xa4>
 800dd58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	488d      	ldr	r0, [pc, #564]	@ (800df94 <create_name+0x2cc>)
 800dd5e:	f7fe fd64 	bl	800c82a <chk_chr>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d001      	beq.n	800dd6c <create_name+0xa4>
 800dd68:	2306      	movs	r3, #6
 800dd6a:	e161      	b.n	800e030 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	1c5a      	adds	r2, r3, #1
 800dd70:	617a      	str	r2, [r7, #20]
 800dd72:	005b      	lsls	r3, r3, #1
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	4413      	add	r3, r2
 800dd78:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dd7a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800dd7c:	e7b4      	b.n	800dce8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800dd7e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800dd80:	693a      	ldr	r2, [r7, #16]
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	441a      	add	r2, r3
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dd8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd8c:	2b1f      	cmp	r3, #31
 800dd8e:	d801      	bhi.n	800dd94 <create_name+0xcc>
 800dd90:	2304      	movs	r3, #4
 800dd92:	e000      	b.n	800dd96 <create_name+0xce>
 800dd94:	2300      	movs	r3, #0
 800dd96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dd9a:	e011      	b.n	800ddc0 <create_name+0xf8>
		w = lfn[di - 1];
 800dd9c:	697a      	ldr	r2, [r7, #20]
 800dd9e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dda2:	4413      	add	r3, r2
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	4413      	add	r3, r2
 800ddaa:	881b      	ldrh	r3, [r3, #0]
 800ddac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ddae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ddb0:	2b20      	cmp	r3, #32
 800ddb2:	d002      	beq.n	800ddba <create_name+0xf2>
 800ddb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ddb6:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddb8:	d106      	bne.n	800ddc8 <create_name+0x100>
		di--;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1ea      	bne.n	800dd9c <create_name+0xd4>
 800ddc6:	e000      	b.n	800ddca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ddc8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	005b      	lsls	r3, r3, #1
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <create_name+0x118>
 800dddc:	2306      	movs	r3, #6
 800ddde:	e127      	b.n	800e030 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3324      	adds	r3, #36	@ 0x24
 800dde4:	220b      	movs	r2, #11
 800dde6:	2120      	movs	r1, #32
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fe fcdc 	bl	800c7a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ddee:	2300      	movs	r3, #0
 800ddf0:	61bb      	str	r3, [r7, #24]
 800ddf2:	e002      	b.n	800ddfa <create_name+0x132>
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	61bb      	str	r3, [r7, #24]
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	005b      	lsls	r3, r3, #1
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	4413      	add	r3, r2
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	2b20      	cmp	r3, #32
 800de06:	d0f5      	beq.n	800ddf4 <create_name+0x12c>
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	005b      	lsls	r3, r3, #1
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	4413      	add	r3, r2
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	2b2e      	cmp	r3, #46	@ 0x2e
 800de14:	d0ee      	beq.n	800ddf4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d009      	beq.n	800de30 <create_name+0x168>
 800de1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de20:	f043 0303 	orr.w	r3, r3, #3
 800de24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800de28:	e002      	b.n	800de30 <create_name+0x168>
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	617b      	str	r3, [r7, #20]
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d009      	beq.n	800de4a <create_name+0x182>
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800de3c:	4413      	add	r3, r2
 800de3e:	005b      	lsls	r3, r3, #1
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	4413      	add	r3, r2
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	2b2e      	cmp	r3, #46	@ 0x2e
 800de48:	d1ef      	bne.n	800de2a <create_name+0x162>

	i = b = 0; ni = 8;
 800de4a:	2300      	movs	r3, #0
 800de4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800de50:	2300      	movs	r3, #0
 800de52:	623b      	str	r3, [r7, #32]
 800de54:	2308      	movs	r3, #8
 800de56:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800de58:	69bb      	ldr	r3, [r7, #24]
 800de5a:	1c5a      	adds	r2, r3, #1
 800de5c:	61ba      	str	r2, [r7, #24]
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	4413      	add	r3, r2
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800de68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f000 8090 	beq.w	800df90 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800de70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de72:	2b20      	cmp	r3, #32
 800de74:	d006      	beq.n	800de84 <create_name+0x1bc>
 800de76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de78:	2b2e      	cmp	r3, #46	@ 0x2e
 800de7a:	d10a      	bne.n	800de92 <create_name+0x1ca>
 800de7c:	69ba      	ldr	r2, [r7, #24]
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	429a      	cmp	r2, r3
 800de82:	d006      	beq.n	800de92 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800de84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de88:	f043 0303 	orr.w	r3, r3, #3
 800de8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800de90:	e07d      	b.n	800df8e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800de92:	6a3a      	ldr	r2, [r7, #32]
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	429a      	cmp	r2, r3
 800de98:	d203      	bcs.n	800dea2 <create_name+0x1da>
 800de9a:	69ba      	ldr	r2, [r7, #24]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d123      	bne.n	800deea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	2b0b      	cmp	r3, #11
 800dea6:	d106      	bne.n	800deb6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800deac:	f043 0303 	orr.w	r3, r3, #3
 800deb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800deb4:	e075      	b.n	800dfa2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800deb6:	69ba      	ldr	r2, [r7, #24]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	429a      	cmp	r2, r3
 800debc:	d005      	beq.n	800deca <create_name+0x202>
 800debe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dec2:	f043 0303 	orr.w	r3, r3, #3
 800dec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800deca:	69ba      	ldr	r2, [r7, #24]
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d866      	bhi.n	800dfa0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	61bb      	str	r3, [r7, #24]
 800ded6:	2308      	movs	r3, #8
 800ded8:	623b      	str	r3, [r7, #32]
 800deda:	230b      	movs	r3, #11
 800dedc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dede:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dee8:	e051      	b.n	800df8e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800deea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800deec:	2b7f      	cmp	r3, #127	@ 0x7f
 800deee:	d914      	bls.n	800df1a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800def0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800def2:	2100      	movs	r1, #0
 800def4:	4618      	mov	r0, r3
 800def6:	f001 f875 	bl	800efe4 <ff_convert>
 800defa:	4603      	mov	r3, r0
 800defc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800defe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df00:	2b00      	cmp	r3, #0
 800df02:	d004      	beq.n	800df0e <create_name+0x246>
 800df04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df06:	3b80      	subs	r3, #128	@ 0x80
 800df08:	4a23      	ldr	r2, [pc, #140]	@ (800df98 <create_name+0x2d0>)
 800df0a:	5cd3      	ldrb	r3, [r2, r3]
 800df0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800df0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df12:	f043 0302 	orr.w	r3, r3, #2
 800df16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800df1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d007      	beq.n	800df30 <create_name+0x268>
 800df20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df22:	4619      	mov	r1, r3
 800df24:	481d      	ldr	r0, [pc, #116]	@ (800df9c <create_name+0x2d4>)
 800df26:	f7fe fc80 	bl	800c82a <chk_chr>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d008      	beq.n	800df42 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800df30:	235f      	movs	r3, #95	@ 0x5f
 800df32:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800df34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df38:	f043 0303 	orr.w	r3, r3, #3
 800df3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df40:	e01b      	b.n	800df7a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800df42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df44:	2b40      	cmp	r3, #64	@ 0x40
 800df46:	d909      	bls.n	800df5c <create_name+0x294>
 800df48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df4a:	2b5a      	cmp	r3, #90	@ 0x5a
 800df4c:	d806      	bhi.n	800df5c <create_name+0x294>
					b |= 2;
 800df4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df52:	f043 0302 	orr.w	r3, r3, #2
 800df56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800df5a:	e00e      	b.n	800df7a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800df5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df5e:	2b60      	cmp	r3, #96	@ 0x60
 800df60:	d90b      	bls.n	800df7a <create_name+0x2b2>
 800df62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df64:	2b7a      	cmp	r3, #122	@ 0x7a
 800df66:	d808      	bhi.n	800df7a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800df68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df6c:	f043 0301 	orr.w	r3, r3, #1
 800df70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800df74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df76:	3b20      	subs	r3, #32
 800df78:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800df7a:	6a3b      	ldr	r3, [r7, #32]
 800df7c:	1c5a      	adds	r2, r3, #1
 800df7e:	623a      	str	r2, [r7, #32]
 800df80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800df82:	b2d1      	uxtb	r1, r2
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	4413      	add	r3, r2
 800df88:	460a      	mov	r2, r1
 800df8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800df8e:	e763      	b.n	800de58 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800df90:	bf00      	nop
 800df92:	e006      	b.n	800dfa2 <create_name+0x2da>
 800df94:	0800fcb8 	.word	0x0800fcb8
 800df98:	0800fd18 	.word	0x0800fd18
 800df9c:	0800fcc4 	.word	0x0800fcc4
			if (si > di) break;			/* No extension */
 800dfa0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dfa8:	2be5      	cmp	r3, #229	@ 0xe5
 800dfaa:	d103      	bne.n	800dfb4 <create_name+0x2ec>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2205      	movs	r2, #5
 800dfb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	2b08      	cmp	r3, #8
 800dfb8:	d104      	bne.n	800dfc4 <create_name+0x2fc>
 800dfba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dfc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dfc8:	f003 030c 	and.w	r3, r3, #12
 800dfcc:	2b0c      	cmp	r3, #12
 800dfce:	d005      	beq.n	800dfdc <create_name+0x314>
 800dfd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dfd4:	f003 0303 	and.w	r3, r3, #3
 800dfd8:	2b03      	cmp	r3, #3
 800dfda:	d105      	bne.n	800dfe8 <create_name+0x320>
 800dfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfe0:	f043 0302 	orr.w	r3, r3, #2
 800dfe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dfe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfec:	f003 0302 	and.w	r3, r3, #2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d117      	bne.n	800e024 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dff4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dff8:	f003 0303 	and.w	r3, r3, #3
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d105      	bne.n	800e00c <create_name+0x344>
 800e000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e004:	f043 0310 	orr.w	r3, r3, #16
 800e008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e00c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e010:	f003 030c 	and.w	r3, r3, #12
 800e014:	2b04      	cmp	r3, #4
 800e016:	d105      	bne.n	800e024 <create_name+0x35c>
 800e018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e01c:	f043 0308 	orr.w	r3, r3, #8
 800e020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e02a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800e02e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e030:	4618      	mov	r0, r3
 800e032:	3728      	adds	r7, #40	@ 0x28
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b086      	sub	sp, #24
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e04c:	e002      	b.n	800e054 <follow_path+0x1c>
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	3301      	adds	r3, #1
 800e052:	603b      	str	r3, [r7, #0]
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	2b2f      	cmp	r3, #47	@ 0x2f
 800e05a:	d0f8      	beq.n	800e04e <follow_path+0x16>
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	2b5c      	cmp	r3, #92	@ 0x5c
 800e062:	d0f4      	beq.n	800e04e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	2200      	movs	r2, #0
 800e068:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	2b1f      	cmp	r3, #31
 800e070:	d80a      	bhi.n	800e088 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2280      	movs	r2, #128	@ 0x80
 800e076:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e07a:	2100      	movs	r1, #0
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f7ff f91c 	bl	800d2ba <dir_sdi>
 800e082:	4603      	mov	r3, r0
 800e084:	75fb      	strb	r3, [r7, #23]
 800e086:	e043      	b.n	800e110 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e088:	463b      	mov	r3, r7
 800e08a:	4619      	mov	r1, r3
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7ff fe1b 	bl	800dcc8 <create_name>
 800e092:	4603      	mov	r3, r0
 800e094:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e096:	7dfb      	ldrb	r3, [r7, #23]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d134      	bne.n	800e106 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7ff fc5a 	bl	800d956 <dir_find>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e0ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e0ae:	7dfb      	ldrb	r3, [r7, #23]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00a      	beq.n	800e0ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	d127      	bne.n	800e10a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e0ba:	7afb      	ldrb	r3, [r7, #11]
 800e0bc:	f003 0304 	and.w	r3, r3, #4
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d122      	bne.n	800e10a <follow_path+0xd2>
 800e0c4:	2305      	movs	r3, #5
 800e0c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e0c8:	e01f      	b.n	800e10a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e0ca:	7afb      	ldrb	r3, [r7, #11]
 800e0cc:	f003 0304 	and.w	r3, r3, #4
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d11c      	bne.n	800e10e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	799b      	ldrb	r3, [r3, #6]
 800e0d8:	f003 0310 	and.w	r3, r3, #16
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d102      	bne.n	800e0e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e0e0:	2305      	movs	r3, #5
 800e0e2:	75fb      	strb	r3, [r7, #23]
 800e0e4:	e014      	b.n	800e110 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	695b      	ldr	r3, [r3, #20]
 800e0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0f4:	4413      	add	r3, r2
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f7ff fa65 	bl	800d5c8 <ld_clust>
 800e0fe:	4602      	mov	r2, r0
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e104:	e7c0      	b.n	800e088 <follow_path+0x50>
			if (res != FR_OK) break;
 800e106:	bf00      	nop
 800e108:	e002      	b.n	800e110 <follow_path+0xd8>
				break;
 800e10a:	bf00      	nop
 800e10c:	e000      	b.n	800e110 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e10e:	bf00      	nop
			}
		}
	}

	return res;
 800e110:	7dfb      	ldrb	r3, [r7, #23]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3718      	adds	r7, #24
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e11a:	b480      	push	{r7}
 800e11c:	b087      	sub	sp, #28
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e122:	f04f 33ff 	mov.w	r3, #4294967295
 800e126:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d031      	beq.n	800e194 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	617b      	str	r3, [r7, #20]
 800e136:	e002      	b.n	800e13e <get_ldnumber+0x24>
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	3301      	adds	r3, #1
 800e13c:	617b      	str	r3, [r7, #20]
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	2b1f      	cmp	r3, #31
 800e144:	d903      	bls.n	800e14e <get_ldnumber+0x34>
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b3a      	cmp	r3, #58	@ 0x3a
 800e14c:	d1f4      	bne.n	800e138 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	2b3a      	cmp	r3, #58	@ 0x3a
 800e154:	d11c      	bne.n	800e190 <get_ldnumber+0x76>
			tp = *path;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	1c5a      	adds	r2, r3, #1
 800e160:	60fa      	str	r2, [r7, #12]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	3b30      	subs	r3, #48	@ 0x30
 800e166:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	2b09      	cmp	r3, #9
 800e16c:	d80e      	bhi.n	800e18c <get_ldnumber+0x72>
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	429a      	cmp	r2, r3
 800e174:	d10a      	bne.n	800e18c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d107      	bne.n	800e18c <get_ldnumber+0x72>
					vol = (int)i;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	3301      	adds	r3, #1
 800e184:	617b      	str	r3, [r7, #20]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	697a      	ldr	r2, [r7, #20]
 800e18a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	e002      	b.n	800e196 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e190:	2300      	movs	r3, #0
 800e192:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e194:	693b      	ldr	r3, [r7, #16]
}
 800e196:	4618      	mov	r0, r3
 800e198:	371c      	adds	r7, #28
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr
	...

0800e1a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	70da      	strb	r2, [r3, #3]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ba:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e1bc:	6839      	ldr	r1, [r7, #0]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7fe fcfe 	bl	800cbc0 <move_window>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d001      	beq.n	800e1ce <check_fs+0x2a>
 800e1ca:	2304      	movs	r3, #4
 800e1cc:	e038      	b.n	800e240 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	3334      	adds	r3, #52	@ 0x34
 800e1d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7fe fa42 	bl	800c660 <ld_word>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	461a      	mov	r2, r3
 800e1e0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d001      	beq.n	800e1ec <check_fs+0x48>
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	e029      	b.n	800e240 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e1f2:	2be9      	cmp	r3, #233	@ 0xe9
 800e1f4:	d009      	beq.n	800e20a <check_fs+0x66>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e1fc:	2beb      	cmp	r3, #235	@ 0xeb
 800e1fe:	d11e      	bne.n	800e23e <check_fs+0x9a>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e206:	2b90      	cmp	r3, #144	@ 0x90
 800e208:	d119      	bne.n	800e23e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3334      	adds	r3, #52	@ 0x34
 800e20e:	3336      	adds	r3, #54	@ 0x36
 800e210:	4618      	mov	r0, r3
 800e212:	f7fe fa3d 	bl	800c690 <ld_dword>
 800e216:	4603      	mov	r3, r0
 800e218:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e21c:	4a0a      	ldr	r2, [pc, #40]	@ (800e248 <check_fs+0xa4>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d101      	bne.n	800e226 <check_fs+0x82>
 800e222:	2300      	movs	r3, #0
 800e224:	e00c      	b.n	800e240 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	3334      	adds	r3, #52	@ 0x34
 800e22a:	3352      	adds	r3, #82	@ 0x52
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe fa2f 	bl	800c690 <ld_dword>
 800e232:	4603      	mov	r3, r0
 800e234:	4a05      	ldr	r2, [pc, #20]	@ (800e24c <check_fs+0xa8>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d101      	bne.n	800e23e <check_fs+0x9a>
 800e23a:	2300      	movs	r3, #0
 800e23c:	e000      	b.n	800e240 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e23e:	2302      	movs	r3, #2
}
 800e240:	4618      	mov	r0, r3
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	00544146 	.word	0x00544146
 800e24c:	33544146 	.word	0x33544146

0800e250 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b096      	sub	sp, #88	@ 0x58
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	4613      	mov	r3, r2
 800e25c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	2200      	movs	r2, #0
 800e262:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f7ff ff58 	bl	800e11a <get_ldnumber>
 800e26a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e26c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e26e:	2b00      	cmp	r3, #0
 800e270:	da01      	bge.n	800e276 <find_volume+0x26>
 800e272:	230b      	movs	r3, #11
 800e274:	e230      	b.n	800e6d8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e276:	4aa1      	ldr	r2, [pc, #644]	@ (800e4fc <find_volume+0x2ac>)
 800e278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e27e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e282:	2b00      	cmp	r3, #0
 800e284:	d101      	bne.n	800e28a <find_volume+0x3a>
 800e286:	230c      	movs	r3, #12
 800e288:	e226      	b.n	800e6d8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e28e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e290:	79fb      	ldrb	r3, [r7, #7]
 800e292:	f023 0301 	bic.w	r3, r3, #1
 800e296:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d01a      	beq.n	800e2d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a2:	785b      	ldrb	r3, [r3, #1]
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fe f93b 	bl	800c520 <disk_status>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e2b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e2b4:	f003 0301 	and.w	r3, r3, #1
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10c      	bne.n	800e2d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e2bc:	79fb      	ldrb	r3, [r7, #7]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d007      	beq.n	800e2d2 <find_volume+0x82>
 800e2c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e2c6:	f003 0304 	and.w	r3, r3, #4
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d001      	beq.n	800e2d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e2ce:	230a      	movs	r3, #10
 800e2d0:	e202      	b.n	800e6d8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	e200      	b.n	800e6d8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d8:	2200      	movs	r2, #0
 800e2da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e6:	785b      	ldrb	r3, [r3, #1]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fe f933 	bl	800c554 <disk_initialize>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e2f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e300:	2303      	movs	r3, #3
 800e302:	e1e9      	b.n	800e6d8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d007      	beq.n	800e31a <find_volume+0xca>
 800e30a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e30e:	f003 0304 	and.w	r3, r3, #4
 800e312:	2b00      	cmp	r3, #0
 800e314:	d001      	beq.n	800e31a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e316:	230a      	movs	r3, #10
 800e318:	e1de      	b.n	800e6d8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e31e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e320:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e322:	f7ff ff3f 	bl	800e1a4 <check_fs>
 800e326:	4603      	mov	r3, r0
 800e328:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e32c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e330:	2b02      	cmp	r3, #2
 800e332:	d149      	bne.n	800e3c8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e334:	2300      	movs	r3, #0
 800e336:	643b      	str	r3, [r7, #64]	@ 0x40
 800e338:	e01e      	b.n	800e378 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e342:	011b      	lsls	r3, r3, #4
 800e344:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e348:	4413      	add	r3, r2
 800e34a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e34e:	3304      	adds	r3, #4
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d006      	beq.n	800e364 <find_volume+0x114>
 800e356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e358:	3308      	adds	r3, #8
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe f998 	bl	800c690 <ld_dword>
 800e360:	4602      	mov	r2, r0
 800e362:	e000      	b.n	800e366 <find_volume+0x116>
 800e364:	2200      	movs	r2, #0
 800e366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	3358      	adds	r3, #88	@ 0x58
 800e36c:	443b      	add	r3, r7
 800e36e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e374:	3301      	adds	r3, #1
 800e376:	643b      	str	r3, [r7, #64]	@ 0x40
 800e378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e37a:	2b03      	cmp	r3, #3
 800e37c:	d9dd      	bls.n	800e33a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e37e:	2300      	movs	r3, #0
 800e380:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <find_volume+0x13e>
 800e388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e38a:	3b01      	subs	r3, #1
 800e38c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e38e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	3358      	adds	r3, #88	@ 0x58
 800e394:	443b      	add	r3, r7
 800e396:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e39a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e39c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d005      	beq.n	800e3ae <find_volume+0x15e>
 800e3a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e3a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e3a6:	f7ff fefd 	bl	800e1a4 <check_fs>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	e000      	b.n	800e3b0 <find_volume+0x160>
 800e3ae:	2303      	movs	r3, #3
 800e3b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e3b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d905      	bls.n	800e3c8 <find_volume+0x178>
 800e3bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3be:	3301      	adds	r3, #1
 800e3c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3c4:	2b03      	cmp	r3, #3
 800e3c6:	d9e2      	bls.n	800e38e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e3c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e3cc:	2b04      	cmp	r3, #4
 800e3ce:	d101      	bne.n	800e3d4 <find_volume+0x184>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e181      	b.n	800e6d8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d901      	bls.n	800e3e0 <find_volume+0x190>
 800e3dc:	230d      	movs	r3, #13
 800e3de:	e17b      	b.n	800e6d8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e2:	3334      	adds	r3, #52	@ 0x34
 800e3e4:	330b      	adds	r3, #11
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fe f93a 	bl	800c660 <ld_word>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3f2:	d001      	beq.n	800e3f8 <find_volume+0x1a8>
 800e3f4:	230d      	movs	r3, #13
 800e3f6:	e16f      	b.n	800e6d8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3fa:	3334      	adds	r3, #52	@ 0x34
 800e3fc:	3316      	adds	r3, #22
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe f92e 	bl	800c660 <ld_word>
 800e404:	4603      	mov	r3, r0
 800e406:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d106      	bne.n	800e41c <find_volume+0x1cc>
 800e40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e410:	3334      	adds	r3, #52	@ 0x34
 800e412:	3324      	adds	r3, #36	@ 0x24
 800e414:	4618      	mov	r0, r3
 800e416:	f7fe f93b 	bl	800c690 <ld_dword>
 800e41a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e41e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e420:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e424:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42e:	789b      	ldrb	r3, [r3, #2]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d005      	beq.n	800e440 <find_volume+0x1f0>
 800e434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e436:	789b      	ldrb	r3, [r3, #2]
 800e438:	2b02      	cmp	r3, #2
 800e43a:	d001      	beq.n	800e440 <find_volume+0x1f0>
 800e43c:	230d      	movs	r3, #13
 800e43e:	e14b      	b.n	800e6d8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e442:	789b      	ldrb	r3, [r3, #2]
 800e444:	461a      	mov	r2, r3
 800e446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e448:	fb02 f303 	mul.w	r3, r2, r3
 800e44c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e454:	461a      	mov	r2, r3
 800e456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e458:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45c:	895b      	ldrh	r3, [r3, #10]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d008      	beq.n	800e474 <find_volume+0x224>
 800e462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e464:	895b      	ldrh	r3, [r3, #10]
 800e466:	461a      	mov	r2, r3
 800e468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46a:	895b      	ldrh	r3, [r3, #10]
 800e46c:	3b01      	subs	r3, #1
 800e46e:	4013      	ands	r3, r2
 800e470:	2b00      	cmp	r3, #0
 800e472:	d001      	beq.n	800e478 <find_volume+0x228>
 800e474:	230d      	movs	r3, #13
 800e476:	e12f      	b.n	800e6d8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47a:	3334      	adds	r3, #52	@ 0x34
 800e47c:	3311      	adds	r3, #17
 800e47e:	4618      	mov	r0, r3
 800e480:	f7fe f8ee 	bl	800c660 <ld_word>
 800e484:	4603      	mov	r3, r0
 800e486:	461a      	mov	r2, r3
 800e488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48e:	891b      	ldrh	r3, [r3, #8]
 800e490:	f003 030f 	and.w	r3, r3, #15
 800e494:	b29b      	uxth	r3, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <find_volume+0x24e>
 800e49a:	230d      	movs	r3, #13
 800e49c:	e11c      	b.n	800e6d8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4a0:	3334      	adds	r3, #52	@ 0x34
 800e4a2:	3313      	adds	r3, #19
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7fe f8db 	bl	800c660 <ld_word>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e4ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d106      	bne.n	800e4c2 <find_volume+0x272>
 800e4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b6:	3334      	adds	r3, #52	@ 0x34
 800e4b8:	3320      	adds	r3, #32
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe f8e8 	bl	800c690 <ld_dword>
 800e4c0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c4:	3334      	adds	r3, #52	@ 0x34
 800e4c6:	330e      	adds	r3, #14
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fe f8c9 	bl	800c660 <ld_word>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e4d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d101      	bne.n	800e4dc <find_volume+0x28c>
 800e4d8:	230d      	movs	r3, #13
 800e4da:	e0fd      	b.n	800e6d8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e4dc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e4de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4e0:	4413      	add	r3, r2
 800e4e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4e4:	8912      	ldrh	r2, [r2, #8]
 800e4e6:	0912      	lsrs	r2, r2, #4
 800e4e8:	b292      	uxth	r2, r2
 800e4ea:	4413      	add	r3, r2
 800e4ec:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e4ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d204      	bcs.n	800e500 <find_volume+0x2b0>
 800e4f6:	230d      	movs	r3, #13
 800e4f8:	e0ee      	b.n	800e6d8 <find_volume+0x488>
 800e4fa:	bf00      	nop
 800e4fc:	24000380 	.word	0x24000380
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e508:	8952      	ldrh	r2, [r2, #10]
 800e50a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e50e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e512:	2b00      	cmp	r3, #0
 800e514:	d101      	bne.n	800e51a <find_volume+0x2ca>
 800e516:	230d      	movs	r3, #13
 800e518:	e0de      	b.n	800e6d8 <find_volume+0x488>
		fmt = FS_FAT32;
 800e51a:	2303      	movs	r3, #3
 800e51c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e522:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e526:	4293      	cmp	r3, r2
 800e528:	d802      	bhi.n	800e530 <find_volume+0x2e0>
 800e52a:	2302      	movs	r3, #2
 800e52c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e532:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e536:	4293      	cmp	r3, r2
 800e538:	d802      	bhi.n	800e540 <find_volume+0x2f0>
 800e53a:	2301      	movs	r3, #1
 800e53c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e542:	1c9a      	adds	r2, r3, #2
 800e544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e546:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e54a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e54c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e54e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e552:	441a      	add	r2, r3
 800e554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e556:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e558:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e55c:	441a      	add	r2, r3
 800e55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e560:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800e562:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e566:	2b03      	cmp	r3, #3
 800e568:	d11e      	bne.n	800e5a8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56c:	3334      	adds	r3, #52	@ 0x34
 800e56e:	332a      	adds	r3, #42	@ 0x2a
 800e570:	4618      	mov	r0, r3
 800e572:	f7fe f875 	bl	800c660 <ld_word>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d001      	beq.n	800e580 <find_volume+0x330>
 800e57c:	230d      	movs	r3, #13
 800e57e:	e0ab      	b.n	800e6d8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e582:	891b      	ldrh	r3, [r3, #8]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d001      	beq.n	800e58c <find_volume+0x33c>
 800e588:	230d      	movs	r3, #13
 800e58a:	e0a5      	b.n	800e6d8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e58e:	3334      	adds	r3, #52	@ 0x34
 800e590:	332c      	adds	r3, #44	@ 0x2c
 800e592:	4618      	mov	r0, r3
 800e594:	f7fe f87c 	bl	800c690 <ld_dword>
 800e598:	4602      	mov	r2, r0
 800e59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a0:	699b      	ldr	r3, [r3, #24]
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e5a6:	e01f      	b.n	800e5e8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5aa:	891b      	ldrh	r3, [r3, #8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d101      	bne.n	800e5b4 <find_volume+0x364>
 800e5b0:	230d      	movs	r3, #13
 800e5b2:	e091      	b.n	800e6d8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5ba:	441a      	add	r2, r3
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5be:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e5c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d103      	bne.n	800e5d0 <find_volume+0x380>
 800e5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ca:	699b      	ldr	r3, [r3, #24]
 800e5cc:	005b      	lsls	r3, r3, #1
 800e5ce:	e00a      	b.n	800e5e6 <find_volume+0x396>
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d2:	699a      	ldr	r2, [r3, #24]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	4413      	add	r3, r2
 800e5da:	085a      	lsrs	r2, r3, #1
 800e5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5de:	699b      	ldr	r3, [r3, #24]
 800e5e0:	f003 0301 	and.w	r3, r3, #1
 800e5e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e5e6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ea:	69da      	ldr	r2, [r3, #28]
 800e5ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5ee:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e5f2:	0a5b      	lsrs	r3, r3, #9
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d201      	bcs.n	800e5fc <find_volume+0x3ac>
 800e5f8:	230d      	movs	r3, #13
 800e5fa:	e06d      	b.n	800e6d8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e602:	615a      	str	r2, [r3, #20]
 800e604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e606:	695a      	ldr	r2, [r3, #20]
 800e608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60e:	2280      	movs	r2, #128	@ 0x80
 800e610:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e612:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e616:	2b03      	cmp	r3, #3
 800e618:	d149      	bne.n	800e6ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e61c:	3334      	adds	r3, #52	@ 0x34
 800e61e:	3330      	adds	r3, #48	@ 0x30
 800e620:	4618      	mov	r0, r3
 800e622:	f7fe f81d 	bl	800c660 <ld_word>
 800e626:	4603      	mov	r3, r0
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d140      	bne.n	800e6ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e62c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e62e:	3301      	adds	r3, #1
 800e630:	4619      	mov	r1, r3
 800e632:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e634:	f7fe fac4 	bl	800cbc0 <move_window>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d137      	bne.n	800e6ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e640:	2200      	movs	r2, #0
 800e642:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e646:	3334      	adds	r3, #52	@ 0x34
 800e648:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fe f807 	bl	800c660 <ld_word>
 800e652:	4603      	mov	r3, r0
 800e654:	461a      	mov	r2, r3
 800e656:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d127      	bne.n	800e6ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e660:	3334      	adds	r3, #52	@ 0x34
 800e662:	4618      	mov	r0, r3
 800e664:	f7fe f814 	bl	800c690 <ld_dword>
 800e668:	4603      	mov	r3, r0
 800e66a:	4a1d      	ldr	r2, [pc, #116]	@ (800e6e0 <find_volume+0x490>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d11e      	bne.n	800e6ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e672:	3334      	adds	r3, #52	@ 0x34
 800e674:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe f809 	bl	800c690 <ld_dword>
 800e67e:	4603      	mov	r3, r0
 800e680:	4a18      	ldr	r2, [pc, #96]	@ (800e6e4 <find_volume+0x494>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d113      	bne.n	800e6ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e688:	3334      	adds	r3, #52	@ 0x34
 800e68a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fd fffe 	bl	800c690 <ld_dword>
 800e694:	4602      	mov	r2, r0
 800e696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e698:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e69c:	3334      	adds	r3, #52	@ 0x34
 800e69e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fd fff4 	bl	800c690 <ld_dword>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6b0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e6b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e6b6:	4b0c      	ldr	r3, [pc, #48]	@ (800e6e8 <find_volume+0x498>)
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	4b0a      	ldr	r3, [pc, #40]	@ (800e6e8 <find_volume+0x498>)
 800e6c0:	801a      	strh	r2, [r3, #0]
 800e6c2:	4b09      	ldr	r3, [pc, #36]	@ (800e6e8 <find_volume+0x498>)
 800e6c4:	881a      	ldrh	r2, [r3, #0]
 800e6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6cc:	4a07      	ldr	r2, [pc, #28]	@ (800e6ec <find_volume+0x49c>)
 800e6ce:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e6d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e6d2:	f7fe fa0d 	bl	800caf0 <clear_lock>
#endif
	return FR_OK;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3758      	adds	r7, #88	@ 0x58
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	41615252 	.word	0x41615252
 800e6e4:	61417272 	.word	0x61417272
 800e6e8:	24000384 	.word	0x24000384
 800e6ec:	240003a8 	.word	0x240003a8

0800e6f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e6fa:	2309      	movs	r3, #9
 800e6fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d01c      	beq.n	800e73e <validate+0x4e>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d018      	beq.n	800e73e <validate+0x4e>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d013      	beq.n	800e73e <validate+0x4e>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	889a      	ldrh	r2, [r3, #4]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	88db      	ldrh	r3, [r3, #6]
 800e720:	429a      	cmp	r2, r3
 800e722:	d10c      	bne.n	800e73e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	785b      	ldrb	r3, [r3, #1]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fd fef8 	bl	800c520 <disk_status>
 800e730:	4603      	mov	r3, r0
 800e732:	f003 0301 	and.w	r3, r3, #1
 800e736:	2b00      	cmp	r3, #0
 800e738:	d101      	bne.n	800e73e <validate+0x4e>
			res = FR_OK;
 800e73a:	2300      	movs	r3, #0
 800e73c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d102      	bne.n	800e74a <validate+0x5a>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	e000      	b.n	800e74c <validate+0x5c>
 800e74a:	2300      	movs	r3, #0
 800e74c:	683a      	ldr	r2, [r7, #0]
 800e74e:	6013      	str	r3, [r2, #0]
	return res;
 800e750:	7bfb      	ldrb	r3, [r7, #15]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
	...

0800e75c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b088      	sub	sp, #32
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	4613      	mov	r3, r2
 800e768:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e76e:	f107 0310 	add.w	r3, r7, #16
 800e772:	4618      	mov	r0, r3
 800e774:	f7ff fcd1 	bl	800e11a <get_ldnumber>
 800e778:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	da01      	bge.n	800e784 <f_mount+0x28>
 800e780:	230b      	movs	r3, #11
 800e782:	e02b      	b.n	800e7dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e784:	4a17      	ldr	r2, [pc, #92]	@ (800e7e4 <f_mount+0x88>)
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e78c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d005      	beq.n	800e7a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e794:	69b8      	ldr	r0, [r7, #24]
 800e796:	f7fe f9ab 	bl	800caf0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	2200      	movs	r2, #0
 800e79e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	490d      	ldr	r1, [pc, #52]	@ (800e7e4 <f_mount+0x88>)
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d002      	beq.n	800e7c2 <f_mount+0x66>
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d001      	beq.n	800e7c6 <f_mount+0x6a>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	e00a      	b.n	800e7dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e7c6:	f107 010c 	add.w	r1, r7, #12
 800e7ca:	f107 0308 	add.w	r3, r7, #8
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7ff fd3d 	bl	800e250 <find_volume>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3720      	adds	r7, #32
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	24000380 	.word	0x24000380

0800e7e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b09a      	sub	sp, #104	@ 0x68
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d101      	bne.n	800e800 <f_open+0x18>
 800e7fc:	2309      	movs	r3, #9
 800e7fe:	e1a9      	b.n	800eb54 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e800:	79fb      	ldrb	r3, [r7, #7]
 800e802:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e806:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e808:	79fa      	ldrb	r2, [r7, #7]
 800e80a:	f107 0114 	add.w	r1, r7, #20
 800e80e:	f107 0308 	add.w	r3, r7, #8
 800e812:	4618      	mov	r0, r3
 800e814:	f7ff fd1c 	bl	800e250 <find_volume>
 800e818:	4603      	mov	r3, r0
 800e81a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e81e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e822:	2b00      	cmp	r3, #0
 800e824:	f040 818d 	bne.w	800eb42 <f_open+0x35a>
		dj.obj.fs = fs;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	f107 0318 	add.w	r3, r7, #24
 800e832:	4611      	mov	r1, r2
 800e834:	4618      	mov	r0, r3
 800e836:	f7ff fbff 	bl	800e038 <follow_path>
 800e83a:	4603      	mov	r3, r0
 800e83c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e840:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e844:	2b00      	cmp	r3, #0
 800e846:	d118      	bne.n	800e87a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e848:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e84c:	b25b      	sxtb	r3, r3
 800e84e:	2b00      	cmp	r3, #0
 800e850:	da03      	bge.n	800e85a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e852:	2306      	movs	r3, #6
 800e854:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e858:	e00f      	b.n	800e87a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e85a:	79fb      	ldrb	r3, [r7, #7]
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	bf8c      	ite	hi
 800e860:	2301      	movhi	r3, #1
 800e862:	2300      	movls	r3, #0
 800e864:	b2db      	uxtb	r3, r3
 800e866:	461a      	mov	r2, r3
 800e868:	f107 0318 	add.w	r3, r7, #24
 800e86c:	4611      	mov	r1, r2
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fd fff6 	bl	800c860 <chk_lock>
 800e874:	4603      	mov	r3, r0
 800e876:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	f003 031c 	and.w	r3, r3, #28
 800e880:	2b00      	cmp	r3, #0
 800e882:	d07f      	beq.n	800e984 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e884:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d017      	beq.n	800e8bc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e88c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e890:	2b04      	cmp	r3, #4
 800e892:	d10e      	bne.n	800e8b2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e894:	f7fe f840 	bl	800c918 <enq_lock>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d006      	beq.n	800e8ac <f_open+0xc4>
 800e89e:	f107 0318 	add.w	r3, r7, #24
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7ff f918 	bl	800dad8 <dir_register>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	e000      	b.n	800e8ae <f_open+0xc6>
 800e8ac:	2312      	movs	r3, #18
 800e8ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e8b2:	79fb      	ldrb	r3, [r7, #7]
 800e8b4:	f043 0308 	orr.w	r3, r3, #8
 800e8b8:	71fb      	strb	r3, [r7, #7]
 800e8ba:	e010      	b.n	800e8de <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e8bc:	7fbb      	ldrb	r3, [r7, #30]
 800e8be:	f003 0311 	and.w	r3, r3, #17
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d003      	beq.n	800e8ce <f_open+0xe6>
					res = FR_DENIED;
 800e8c6:	2307      	movs	r3, #7
 800e8c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e8cc:	e007      	b.n	800e8de <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e8ce:	79fb      	ldrb	r3, [r7, #7]
 800e8d0:	f003 0304 	and.w	r3, r3, #4
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d002      	beq.n	800e8de <f_open+0xf6>
 800e8d8:	2308      	movs	r3, #8
 800e8da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e8de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d168      	bne.n	800e9b8 <f_open+0x1d0>
 800e8e6:	79fb      	ldrb	r3, [r7, #7]
 800e8e8:	f003 0308 	and.w	r3, r3, #8
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d063      	beq.n	800e9b8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e8f0:	f7fd f802 	bl	800b8f8 <get_fattime>
 800e8f4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f8:	330e      	adds	r3, #14
 800e8fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fd ff05 	bl	800c70c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e904:	3316      	adds	r3, #22
 800e906:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fd feff 	bl	800c70c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e910:	330b      	adds	r3, #11
 800e912:	2220      	movs	r2, #32
 800e914:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e91a:	4611      	mov	r1, r2
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fe fe53 	bl	800d5c8 <ld_clust>
 800e922:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e928:	2200      	movs	r2, #0
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fe fe6b 	bl	800d606 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e932:	331c      	adds	r3, #28
 800e934:	2100      	movs	r1, #0
 800e936:	4618      	mov	r0, r3
 800e938:	f7fd fee8 	bl	800c70c <st_dword>
					fs->wflag = 1;
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	2201      	movs	r2, #1
 800e940:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e944:	2b00      	cmp	r3, #0
 800e946:	d037      	beq.n	800e9b8 <f_open+0x1d0>
						dw = fs->winsect;
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e94c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e94e:	f107 0318 	add.w	r3, r7, #24
 800e952:	2200      	movs	r2, #0
 800e954:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe fb7e 	bl	800d058 <remove_chain>
 800e95c:	4603      	mov	r3, r0
 800e95e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800e962:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e966:	2b00      	cmp	r3, #0
 800e968:	d126      	bne.n	800e9b8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e96e:	4618      	mov	r0, r3
 800e970:	f7fe f926 	bl	800cbc0 <move_window>
 800e974:	4603      	mov	r3, r0
 800e976:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e97e:	3a01      	subs	r2, #1
 800e980:	611a      	str	r2, [r3, #16]
 800e982:	e019      	b.n	800e9b8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e984:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d115      	bne.n	800e9b8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e98c:	7fbb      	ldrb	r3, [r7, #30]
 800e98e:	f003 0310 	and.w	r3, r3, #16
 800e992:	2b00      	cmp	r3, #0
 800e994:	d003      	beq.n	800e99e <f_open+0x1b6>
					res = FR_NO_FILE;
 800e996:	2304      	movs	r3, #4
 800e998:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e99c:	e00c      	b.n	800e9b8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e99e:	79fb      	ldrb	r3, [r7, #7]
 800e9a0:	f003 0302 	and.w	r3, r3, #2
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d007      	beq.n	800e9b8 <f_open+0x1d0>
 800e9a8:	7fbb      	ldrb	r3, [r7, #30]
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d002      	beq.n	800e9b8 <f_open+0x1d0>
						res = FR_DENIED;
 800e9b2:	2307      	movs	r3, #7
 800e9b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e9b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d126      	bne.n	800ea0e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e9c0:	79fb      	ldrb	r3, [r7, #7]
 800e9c2:	f003 0308 	and.w	r3, r3, #8
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d003      	beq.n	800e9d2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e9ca:	79fb      	ldrb	r3, [r7, #7]
 800e9cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e9da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e9e0:	79fb      	ldrb	r3, [r7, #7]
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	bf8c      	ite	hi
 800e9e6:	2301      	movhi	r3, #1
 800e9e8:	2300      	movls	r3, #0
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	f107 0318 	add.w	r3, r7, #24
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fd ffb1 	bl	800c95c <inc_lock>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d102      	bne.n	800ea0e <f_open+0x226>
 800ea08:	2302      	movs	r3, #2
 800ea0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ea0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f040 8095 	bne.w	800eb42 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe fdd2 	bl	800d5c8 <ld_clust>
 800ea24:	4602      	mov	r2, r0
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ea2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea2c:	331c      	adds	r3, #28
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fd fe2e 	bl	800c690 <ld_dword>
 800ea34:	4602      	mov	r2, r0
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ea40:	697a      	ldr	r2, [r7, #20]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	88da      	ldrh	r2, [r3, #6]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	79fa      	ldrb	r2, [r7, #7]
 800ea52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2200      	movs	r2, #0
 800ea64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	3330      	adds	r3, #48	@ 0x30
 800ea6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea6e:	2100      	movs	r1, #0
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fd fe98 	bl	800c7a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ea76:	79fb      	ldrb	r3, [r7, #7]
 800ea78:	f003 0320 	and.w	r3, r3, #32
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d060      	beq.n	800eb42 <f_open+0x35a>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d05c      	beq.n	800eb42 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	68da      	ldr	r2, [r3, #12]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	895b      	ldrh	r3, [r3, #10]
 800ea94:	025b      	lsls	r3, r3, #9
 800ea96:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eaa4:	e016      	b.n	800ead4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fe f943 	bl	800cd36 <get_fat>
 800eab0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800eab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d802      	bhi.n	800eabe <f_open+0x2d6>
 800eab8:	2302      	movs	r3, #2
 800eaba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eabe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac4:	d102      	bne.n	800eacc <f_open+0x2e4>
 800eac6:	2301      	movs	r3, #1
 800eac8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eacc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ead4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d103      	bne.n	800eae4 <f_open+0x2fc>
 800eadc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d8e0      	bhi.n	800eaa6 <f_open+0x2be>
				}
				fp->clust = clst;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eae8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eaea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d127      	bne.n	800eb42 <f_open+0x35a>
 800eaf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eaf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d022      	beq.n	800eb42 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fe f8f9 	bl	800ccf8 <clust2sect>
 800eb06:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800eb08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d103      	bne.n	800eb16 <f_open+0x32e>
						res = FR_INT_ERR;
 800eb0e:	2302      	movs	r3, #2
 800eb10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800eb14:	e015      	b.n	800eb42 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eb16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb18:	0a5a      	lsrs	r2, r3, #9
 800eb1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb1c:	441a      	add	r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	7858      	ldrb	r0, [r3, #1]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6a1a      	ldr	r2, [r3, #32]
 800eb30:	2301      	movs	r3, #1
 800eb32:	f7fd fd37 	bl	800c5a4 <disk_read>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d002      	beq.n	800eb42 <f_open+0x35a>
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eb42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d002      	beq.n	800eb50 <f_open+0x368>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3768      	adds	r7, #104	@ 0x68
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b08e      	sub	sp, #56	@ 0x38
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
 800eb68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2200      	movs	r2, #0
 800eb72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f107 0214 	add.w	r2, r7, #20
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7ff fdb7 	bl	800e6f0 <validate>
 800eb82:	4603      	mov	r3, r0
 800eb84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d107      	bne.n	800eba0 <f_read+0x44>
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	7d5b      	ldrb	r3, [r3, #21]
 800eb94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eb98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d002      	beq.n	800eba6 <f_read+0x4a>
 800eba0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eba4:	e115      	b.n	800edd2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	7d1b      	ldrb	r3, [r3, #20]
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d101      	bne.n	800ebb6 <f_read+0x5a>
 800ebb2:	2307      	movs	r3, #7
 800ebb4:	e10d      	b.n	800edd2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	68da      	ldr	r2, [r3, #12]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	699b      	ldr	r3, [r3, #24]
 800ebbe:	1ad3      	subs	r3, r2, r3
 800ebc0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	f240 80fe 	bls.w	800edc8 <f_read+0x26c>
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ebd0:	e0fa      	b.n	800edc8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	699b      	ldr	r3, [r3, #24]
 800ebd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f040 80c6 	bne.w	800ed6c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	699b      	ldr	r3, [r3, #24]
 800ebe4:	0a5b      	lsrs	r3, r3, #9
 800ebe6:	697a      	ldr	r2, [r7, #20]
 800ebe8:	8952      	ldrh	r2, [r2, #10]
 800ebea:	3a01      	subs	r2, #1
 800ebec:	4013      	ands	r3, r2
 800ebee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d12f      	bne.n	800ec56 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	699b      	ldr	r3, [r3, #24]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d103      	bne.n	800ec06 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec04:	e013      	b.n	800ec2e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	699b      	ldr	r3, [r3, #24]
 800ec12:	4619      	mov	r1, r3
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f7fe fb1c 	bl	800d252 <clmt_clust>
 800ec1a:	6338      	str	r0, [r7, #48]	@ 0x30
 800ec1c:	e007      	b.n	800ec2e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	69db      	ldr	r3, [r3, #28]
 800ec24:	4619      	mov	r1, r3
 800ec26:	4610      	mov	r0, r2
 800ec28:	f7fe f885 	bl	800cd36 <get_fat>
 800ec2c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d804      	bhi.n	800ec3e <f_read+0xe2>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2202      	movs	r2, #2
 800ec38:	755a      	strb	r2, [r3, #21]
 800ec3a:	2302      	movs	r3, #2
 800ec3c:	e0c9      	b.n	800edd2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec44:	d104      	bne.n	800ec50 <f_read+0xf4>
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2201      	movs	r2, #1
 800ec4a:	755a      	strb	r2, [r3, #21]
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e0c0      	b.n	800edd2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec54:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec56:	697a      	ldr	r2, [r7, #20]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	69db      	ldr	r3, [r3, #28]
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	4610      	mov	r0, r2
 800ec60:	f7fe f84a 	bl	800ccf8 <clust2sect>
 800ec64:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d104      	bne.n	800ec76 <f_read+0x11a>
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2202      	movs	r2, #2
 800ec70:	755a      	strb	r2, [r3, #21]
 800ec72:	2302      	movs	r3, #2
 800ec74:	e0ad      	b.n	800edd2 <f_read+0x276>
			sect += csect;
 800ec76:	69ba      	ldr	r2, [r7, #24]
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	0a5b      	lsrs	r3, r3, #9
 800ec82:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ec84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d039      	beq.n	800ecfe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ec8a:	69fa      	ldr	r2, [r7, #28]
 800ec8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec8e:	4413      	add	r3, r2
 800ec90:	697a      	ldr	r2, [r7, #20]
 800ec92:	8952      	ldrh	r2, [r2, #10]
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d905      	bls.n	800eca4 <f_read+0x148>
					cc = fs->csize - csect;
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	895b      	ldrh	r3, [r3, #10]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	69fb      	ldr	r3, [r7, #28]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	7858      	ldrb	r0, [r3, #1]
 800eca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecaa:	69ba      	ldr	r2, [r7, #24]
 800ecac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ecae:	f7fd fc79 	bl	800c5a4 <disk_read>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d004      	beq.n	800ecc2 <f_read+0x166>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2201      	movs	r2, #1
 800ecbc:	755a      	strb	r2, [r3, #21]
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	e087      	b.n	800edd2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	7d1b      	ldrb	r3, [r3, #20]
 800ecc6:	b25b      	sxtb	r3, r3
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	da14      	bge.n	800ecf6 <f_read+0x19a>
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6a1a      	ldr	r2, [r3, #32]
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	1ad3      	subs	r3, r2, r3
 800ecd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d90d      	bls.n	800ecf6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6a1a      	ldr	r2, [r3, #32]
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	1ad3      	subs	r3, r2, r3
 800ece2:	025b      	lsls	r3, r3, #9
 800ece4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ece6:	18d0      	adds	r0, r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	3330      	adds	r3, #48	@ 0x30
 800ecec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	f7fd fd37 	bl	800c764 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ecf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf8:	025b      	lsls	r3, r3, #9
 800ecfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ecfc:	e050      	b.n	800eda0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6a1b      	ldr	r3, [r3, #32]
 800ed02:	69ba      	ldr	r2, [r7, #24]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d02e      	beq.n	800ed66 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	7d1b      	ldrb	r3, [r3, #20]
 800ed0c:	b25b      	sxtb	r3, r3
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	da18      	bge.n	800ed44 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	7858      	ldrb	r0, [r3, #1]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6a1a      	ldr	r2, [r3, #32]
 800ed20:	2301      	movs	r3, #1
 800ed22:	f7fd fc5f 	bl	800c5e4 <disk_write>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d004      	beq.n	800ed36 <f_read+0x1da>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	755a      	strb	r2, [r3, #21]
 800ed32:	2301      	movs	r3, #1
 800ed34:	e04d      	b.n	800edd2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	7d1b      	ldrb	r3, [r3, #20]
 800ed3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	7858      	ldrb	r0, [r3, #1]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed4e:	2301      	movs	r3, #1
 800ed50:	69ba      	ldr	r2, [r7, #24]
 800ed52:	f7fd fc27 	bl	800c5a4 <disk_read>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d004      	beq.n	800ed66 <f_read+0x20a>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	755a      	strb	r2, [r3, #21]
 800ed62:	2301      	movs	r3, #1
 800ed64:	e035      	b.n	800edd2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	69ba      	ldr	r2, [r7, #24]
 800ed6a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	699b      	ldr	r3, [r3, #24]
 800ed70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed74:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ed78:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ed7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d901      	bls.n	800ed86 <f_read+0x22a>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed94:	4413      	add	r3, r2
 800ed96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed98:	4619      	mov	r1, r3
 800ed9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed9c:	f7fd fce2 	bl	800c764 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eda0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda4:	4413      	add	r3, r2
 800eda6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	699a      	ldr	r2, [r3, #24]
 800edac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edae:	441a      	add	r2, r3
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	619a      	str	r2, [r3, #24]
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edba:	441a      	add	r2, r3
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	601a      	str	r2, [r3, #0]
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	f47f af01 	bne.w	800ebd2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3738      	adds	r7, #56	@ 0x38
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b086      	sub	sp, #24
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f107 0208 	add.w	r2, r7, #8
 800ede8:	4611      	mov	r1, r2
 800edea:	4618      	mov	r0, r3
 800edec:	f7ff fc80 	bl	800e6f0 <validate>
 800edf0:	4603      	mov	r3, r0
 800edf2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800edf4:	7dfb      	ldrb	r3, [r7, #23]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d168      	bne.n	800eecc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	7d1b      	ldrb	r3, [r3, #20]
 800edfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d062      	beq.n	800eecc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	7d1b      	ldrb	r3, [r3, #20]
 800ee0a:	b25b      	sxtb	r3, r3
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	da15      	bge.n	800ee3c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	7858      	ldrb	r0, [r3, #1]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a1a      	ldr	r2, [r3, #32]
 800ee1e:	2301      	movs	r3, #1
 800ee20:	f7fd fbe0 	bl	800c5e4 <disk_write>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <f_sync+0x54>
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e04f      	b.n	800eece <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	7d1b      	ldrb	r3, [r3, #20]
 800ee32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ee3c:	f7fc fd5c 	bl	800b8f8 <get_fattime>
 800ee40:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4610      	mov	r0, r2
 800ee4c:	f7fd feb8 	bl	800cbc0 <move_window>
 800ee50:	4603      	mov	r3, r0
 800ee52:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ee54:	7dfb      	ldrb	r3, [r7, #23]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d138      	bne.n	800eecc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee5e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	330b      	adds	r3, #11
 800ee64:	781a      	ldrb	r2, [r3, #0]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	330b      	adds	r3, #11
 800ee6a:	f042 0220 	orr.w	r2, r2, #32
 800ee6e:	b2d2      	uxtb	r2, r2
 800ee70:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6818      	ldr	r0, [r3, #0]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	68f9      	ldr	r1, [r7, #12]
 800ee7e:	f7fe fbc2 	bl	800d606 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f103 021c 	add.w	r2, r3, #28
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	4610      	mov	r0, r2
 800ee90:	f7fd fc3c 	bl	800c70c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	3316      	adds	r3, #22
 800ee98:	6939      	ldr	r1, [r7, #16]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7fd fc36 	bl	800c70c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	3312      	adds	r3, #18
 800eea4:	2100      	movs	r1, #0
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fd fc15 	bl	800c6d6 <st_word>
					fs->wflag = 1;
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7fd feb1 	bl	800cc1c <sync_fs>
 800eeba:	4603      	mov	r3, r0
 800eebc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	7d1b      	ldrb	r3, [r3, #20]
 800eec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eecc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff ff7b 	bl	800edda <f_sync>
 800eee4:	4603      	mov	r3, r0
 800eee6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eee8:	7bfb      	ldrb	r3, [r7, #15]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d118      	bne.n	800ef20 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f107 0208 	add.w	r2, r7, #8
 800eef4:	4611      	mov	r1, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7ff fbfa 	bl	800e6f0 <validate>
 800eefc:	4603      	mov	r3, r0
 800eefe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10c      	bne.n	800ef20 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fd fdb4 	bl	800ca78 <dec_lock>
 800ef10:	4603      	mov	r3, r0
 800ef12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ef14:	7bfb      	ldrb	r3, [r7, #15]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d102      	bne.n	800ef20 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ef20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b087      	sub	sp, #28
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	4613      	mov	r3, r2
 800ef38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ef42:	4b1f      	ldr	r3, [pc, #124]	@ (800efc0 <FATFS_LinkDriverEx+0x94>)
 800ef44:	7a5b      	ldrb	r3, [r3, #9]
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d131      	bne.n	800efb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ef4c:	4b1c      	ldr	r3, [pc, #112]	@ (800efc0 <FATFS_LinkDriverEx+0x94>)
 800ef4e:	7a5b      	ldrb	r3, [r3, #9]
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	461a      	mov	r2, r3
 800ef54:	4b1a      	ldr	r3, [pc, #104]	@ (800efc0 <FATFS_LinkDriverEx+0x94>)
 800ef56:	2100      	movs	r1, #0
 800ef58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ef5a:	4b19      	ldr	r3, [pc, #100]	@ (800efc0 <FATFS_LinkDriverEx+0x94>)
 800ef5c:	7a5b      	ldrb	r3, [r3, #9]
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	4a17      	ldr	r2, [pc, #92]	@ (800efc0 <FATFS_LinkDriverEx+0x94>)
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	4413      	add	r3, r2
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ef6a:	4b15      	ldr	r3, [pc, #84]	@ (800efc0 <FATFS_LinkDriverEx+0x94>)
 800ef6c:	7a5b      	ldrb	r3, [r3, #9]
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	461a      	mov	r2, r3
 800ef72:	4b13      	ldr	r3, [pc, #76]	@ (800efc0 <FATFS_LinkDriverEx+0x94>)
 800ef74:	4413      	add	r3, r2
 800ef76:	79fa      	ldrb	r2, [r7, #7]
 800ef78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ef7a:	4b11      	ldr	r3, [pc, #68]	@ (800efc0 <FATFS_LinkDriverEx+0x94>)
 800ef7c:	7a5b      	ldrb	r3, [r3, #9]
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	1c5a      	adds	r2, r3, #1
 800ef82:	b2d1      	uxtb	r1, r2
 800ef84:	4a0e      	ldr	r2, [pc, #56]	@ (800efc0 <FATFS_LinkDriverEx+0x94>)
 800ef86:	7251      	strb	r1, [r2, #9]
 800ef88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ef8a:	7dbb      	ldrb	r3, [r7, #22]
 800ef8c:	3330      	adds	r3, #48	@ 0x30
 800ef8e:	b2da      	uxtb	r2, r3
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	3301      	adds	r3, #1
 800ef98:	223a      	movs	r2, #58	@ 0x3a
 800ef9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	3302      	adds	r3, #2
 800efa0:	222f      	movs	r2, #47	@ 0x2f
 800efa2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	3303      	adds	r3, #3
 800efa8:	2200      	movs	r2, #0
 800efaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800efac:	2300      	movs	r3, #0
 800efae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800efb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	371c      	adds	r7, #28
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	240005a8 	.word	0x240005a8

0800efc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800efce:	2200      	movs	r2, #0
 800efd0:	6839      	ldr	r1, [r7, #0]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7ff ffaa 	bl	800ef2c <FATFS_LinkDriverEx>
 800efd8:	4603      	mov	r3, r0
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
	...

0800efe4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	6039      	str	r1, [r7, #0]
 800efee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eff0:	88fb      	ldrh	r3, [r7, #6]
 800eff2:	2b7f      	cmp	r3, #127	@ 0x7f
 800eff4:	d802      	bhi.n	800effc <ff_convert+0x18>
		c = chr;
 800eff6:	88fb      	ldrh	r3, [r7, #6]
 800eff8:	81fb      	strh	r3, [r7, #14]
 800effa:	e025      	b.n	800f048 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00b      	beq.n	800f01a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f002:	88fb      	ldrh	r3, [r7, #6]
 800f004:	2bff      	cmp	r3, #255	@ 0xff
 800f006:	d805      	bhi.n	800f014 <ff_convert+0x30>
 800f008:	88fb      	ldrh	r3, [r7, #6]
 800f00a:	3b80      	subs	r3, #128	@ 0x80
 800f00c:	4a12      	ldr	r2, [pc, #72]	@ (800f058 <ff_convert+0x74>)
 800f00e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f012:	e000      	b.n	800f016 <ff_convert+0x32>
 800f014:	2300      	movs	r3, #0
 800f016:	81fb      	strh	r3, [r7, #14]
 800f018:	e016      	b.n	800f048 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f01a:	2300      	movs	r3, #0
 800f01c:	81fb      	strh	r3, [r7, #14]
 800f01e:	e009      	b.n	800f034 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f020:	89fb      	ldrh	r3, [r7, #14]
 800f022:	4a0d      	ldr	r2, [pc, #52]	@ (800f058 <ff_convert+0x74>)
 800f024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f028:	88fa      	ldrh	r2, [r7, #6]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d006      	beq.n	800f03c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f02e:	89fb      	ldrh	r3, [r7, #14]
 800f030:	3301      	adds	r3, #1
 800f032:	81fb      	strh	r3, [r7, #14]
 800f034:	89fb      	ldrh	r3, [r7, #14]
 800f036:	2b7f      	cmp	r3, #127	@ 0x7f
 800f038:	d9f2      	bls.n	800f020 <ff_convert+0x3c>
 800f03a:	e000      	b.n	800f03e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f03c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f03e:	89fb      	ldrh	r3, [r7, #14]
 800f040:	3380      	adds	r3, #128	@ 0x80
 800f042:	b29b      	uxth	r3, r3
 800f044:	b2db      	uxtb	r3, r3
 800f046:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f048:	89fb      	ldrh	r3, [r7, #14]
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	0800fda8 	.word	0x0800fda8

0800f05c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b087      	sub	sp, #28
 800f060:	af00      	add	r7, sp, #0
 800f062:	4603      	mov	r3, r0
 800f064:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f066:	88fb      	ldrh	r3, [r7, #6]
 800f068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f06c:	d201      	bcs.n	800f072 <ff_wtoupper+0x16>
 800f06e:	4b3e      	ldr	r3, [pc, #248]	@ (800f168 <ff_wtoupper+0x10c>)
 800f070:	e000      	b.n	800f074 <ff_wtoupper+0x18>
 800f072:	4b3e      	ldr	r3, [pc, #248]	@ (800f16c <ff_wtoupper+0x110>)
 800f074:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	1c9a      	adds	r2, r3, #2
 800f07a:	617a      	str	r2, [r7, #20]
 800f07c:	881b      	ldrh	r3, [r3, #0]
 800f07e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f080:	8a7b      	ldrh	r3, [r7, #18]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d068      	beq.n	800f158 <ff_wtoupper+0xfc>
 800f086:	88fa      	ldrh	r2, [r7, #6]
 800f088:	8a7b      	ldrh	r3, [r7, #18]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d364      	bcc.n	800f158 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	1c9a      	adds	r2, r3, #2
 800f092:	617a      	str	r2, [r7, #20]
 800f094:	881b      	ldrh	r3, [r3, #0]
 800f096:	823b      	strh	r3, [r7, #16]
 800f098:	8a3b      	ldrh	r3, [r7, #16]
 800f09a:	0a1b      	lsrs	r3, r3, #8
 800f09c:	81fb      	strh	r3, [r7, #14]
 800f09e:	8a3b      	ldrh	r3, [r7, #16]
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f0a4:	88fa      	ldrh	r2, [r7, #6]
 800f0a6:	8a79      	ldrh	r1, [r7, #18]
 800f0a8:	8a3b      	ldrh	r3, [r7, #16]
 800f0aa:	440b      	add	r3, r1
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	da49      	bge.n	800f144 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f0b0:	89fb      	ldrh	r3, [r7, #14]
 800f0b2:	2b08      	cmp	r3, #8
 800f0b4:	d84f      	bhi.n	800f156 <ff_wtoupper+0xfa>
 800f0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800f0bc <ff_wtoupper+0x60>)
 800f0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0bc:	0800f0e1 	.word	0x0800f0e1
 800f0c0:	0800f0f3 	.word	0x0800f0f3
 800f0c4:	0800f109 	.word	0x0800f109
 800f0c8:	0800f111 	.word	0x0800f111
 800f0cc:	0800f119 	.word	0x0800f119
 800f0d0:	0800f121 	.word	0x0800f121
 800f0d4:	0800f129 	.word	0x0800f129
 800f0d8:	0800f131 	.word	0x0800f131
 800f0dc:	0800f139 	.word	0x0800f139
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f0e0:	88fa      	ldrh	r2, [r7, #6]
 800f0e2:	8a7b      	ldrh	r3, [r7, #18]
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	005b      	lsls	r3, r3, #1
 800f0e8:	697a      	ldr	r2, [r7, #20]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	80fb      	strh	r3, [r7, #6]
 800f0f0:	e027      	b.n	800f142 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f0f2:	88fa      	ldrh	r2, [r7, #6]
 800f0f4:	8a7b      	ldrh	r3, [r7, #18]
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	f003 0301 	and.w	r3, r3, #1
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	88fa      	ldrh	r2, [r7, #6]
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	80fb      	strh	r3, [r7, #6]
 800f106:	e01c      	b.n	800f142 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f108:	88fb      	ldrh	r3, [r7, #6]
 800f10a:	3b10      	subs	r3, #16
 800f10c:	80fb      	strh	r3, [r7, #6]
 800f10e:	e018      	b.n	800f142 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f110:	88fb      	ldrh	r3, [r7, #6]
 800f112:	3b20      	subs	r3, #32
 800f114:	80fb      	strh	r3, [r7, #6]
 800f116:	e014      	b.n	800f142 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f118:	88fb      	ldrh	r3, [r7, #6]
 800f11a:	3b30      	subs	r3, #48	@ 0x30
 800f11c:	80fb      	strh	r3, [r7, #6]
 800f11e:	e010      	b.n	800f142 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f120:	88fb      	ldrh	r3, [r7, #6]
 800f122:	3b1a      	subs	r3, #26
 800f124:	80fb      	strh	r3, [r7, #6]
 800f126:	e00c      	b.n	800f142 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f128:	88fb      	ldrh	r3, [r7, #6]
 800f12a:	3308      	adds	r3, #8
 800f12c:	80fb      	strh	r3, [r7, #6]
 800f12e:	e008      	b.n	800f142 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f130:	88fb      	ldrh	r3, [r7, #6]
 800f132:	3b50      	subs	r3, #80	@ 0x50
 800f134:	80fb      	strh	r3, [r7, #6]
 800f136:	e004      	b.n	800f142 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f138:	88fb      	ldrh	r3, [r7, #6]
 800f13a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f13e:	80fb      	strh	r3, [r7, #6]
 800f140:	bf00      	nop
			}
			break;
 800f142:	e008      	b.n	800f156 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f144:	89fb      	ldrh	r3, [r7, #14]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d195      	bne.n	800f076 <ff_wtoupper+0x1a>
 800f14a:	8a3b      	ldrh	r3, [r7, #16]
 800f14c:	005b      	lsls	r3, r3, #1
 800f14e:	697a      	ldr	r2, [r7, #20]
 800f150:	4413      	add	r3, r2
 800f152:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f154:	e78f      	b.n	800f076 <ff_wtoupper+0x1a>
			break;
 800f156:	bf00      	nop
	}

	return chr;
 800f158:	88fb      	ldrh	r3, [r7, #6]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	371c      	adds	r7, #28
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	0800fea8 	.word	0x0800fea8
 800f16c:	0801009c 	.word	0x0801009c

0800f170 <malloc>:
 800f170:	4b02      	ldr	r3, [pc, #8]	@ (800f17c <malloc+0xc>)
 800f172:	4601      	mov	r1, r0
 800f174:	6818      	ldr	r0, [r3, #0]
 800f176:	f000 b82d 	b.w	800f1d4 <_malloc_r>
 800f17a:	bf00      	nop
 800f17c:	2400002c 	.word	0x2400002c

0800f180 <free>:
 800f180:	4b02      	ldr	r3, [pc, #8]	@ (800f18c <free+0xc>)
 800f182:	4601      	mov	r1, r0
 800f184:	6818      	ldr	r0, [r3, #0]
 800f186:	f000 b957 	b.w	800f438 <_free_r>
 800f18a:	bf00      	nop
 800f18c:	2400002c 	.word	0x2400002c

0800f190 <sbrk_aligned>:
 800f190:	b570      	push	{r4, r5, r6, lr}
 800f192:	4e0f      	ldr	r6, [pc, #60]	@ (800f1d0 <sbrk_aligned+0x40>)
 800f194:	460c      	mov	r4, r1
 800f196:	6831      	ldr	r1, [r6, #0]
 800f198:	4605      	mov	r5, r0
 800f19a:	b911      	cbnz	r1, 800f1a2 <sbrk_aligned+0x12>
 800f19c:	f000 f902 	bl	800f3a4 <_sbrk_r>
 800f1a0:	6030      	str	r0, [r6, #0]
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	f000 f8fd 	bl	800f3a4 <_sbrk_r>
 800f1aa:	1c43      	adds	r3, r0, #1
 800f1ac:	d103      	bne.n	800f1b6 <sbrk_aligned+0x26>
 800f1ae:	f04f 34ff 	mov.w	r4, #4294967295
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	bd70      	pop	{r4, r5, r6, pc}
 800f1b6:	1cc4      	adds	r4, r0, #3
 800f1b8:	f024 0403 	bic.w	r4, r4, #3
 800f1bc:	42a0      	cmp	r0, r4
 800f1be:	d0f8      	beq.n	800f1b2 <sbrk_aligned+0x22>
 800f1c0:	1a21      	subs	r1, r4, r0
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f000 f8ee 	bl	800f3a4 <_sbrk_r>
 800f1c8:	3001      	adds	r0, #1
 800f1ca:	d1f2      	bne.n	800f1b2 <sbrk_aligned+0x22>
 800f1cc:	e7ef      	b.n	800f1ae <sbrk_aligned+0x1e>
 800f1ce:	bf00      	nop
 800f1d0:	240005b4 	.word	0x240005b4

0800f1d4 <_malloc_r>:
 800f1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d8:	1ccd      	adds	r5, r1, #3
 800f1da:	f025 0503 	bic.w	r5, r5, #3
 800f1de:	3508      	adds	r5, #8
 800f1e0:	2d0c      	cmp	r5, #12
 800f1e2:	bf38      	it	cc
 800f1e4:	250c      	movcc	r5, #12
 800f1e6:	2d00      	cmp	r5, #0
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	db01      	blt.n	800f1f0 <_malloc_r+0x1c>
 800f1ec:	42a9      	cmp	r1, r5
 800f1ee:	d904      	bls.n	800f1fa <_malloc_r+0x26>
 800f1f0:	230c      	movs	r3, #12
 800f1f2:	6033      	str	r3, [r6, #0]
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f2d0 <_malloc_r+0xfc>
 800f1fe:	f000 f869 	bl	800f2d4 <__malloc_lock>
 800f202:	f8d8 3000 	ldr.w	r3, [r8]
 800f206:	461c      	mov	r4, r3
 800f208:	bb44      	cbnz	r4, 800f25c <_malloc_r+0x88>
 800f20a:	4629      	mov	r1, r5
 800f20c:	4630      	mov	r0, r6
 800f20e:	f7ff ffbf 	bl	800f190 <sbrk_aligned>
 800f212:	1c43      	adds	r3, r0, #1
 800f214:	4604      	mov	r4, r0
 800f216:	d158      	bne.n	800f2ca <_malloc_r+0xf6>
 800f218:	f8d8 4000 	ldr.w	r4, [r8]
 800f21c:	4627      	mov	r7, r4
 800f21e:	2f00      	cmp	r7, #0
 800f220:	d143      	bne.n	800f2aa <_malloc_r+0xd6>
 800f222:	2c00      	cmp	r4, #0
 800f224:	d04b      	beq.n	800f2be <_malloc_r+0xea>
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	4639      	mov	r1, r7
 800f22a:	4630      	mov	r0, r6
 800f22c:	eb04 0903 	add.w	r9, r4, r3
 800f230:	f000 f8b8 	bl	800f3a4 <_sbrk_r>
 800f234:	4581      	cmp	r9, r0
 800f236:	d142      	bne.n	800f2be <_malloc_r+0xea>
 800f238:	6821      	ldr	r1, [r4, #0]
 800f23a:	1a6d      	subs	r5, r5, r1
 800f23c:	4629      	mov	r1, r5
 800f23e:	4630      	mov	r0, r6
 800f240:	f7ff ffa6 	bl	800f190 <sbrk_aligned>
 800f244:	3001      	adds	r0, #1
 800f246:	d03a      	beq.n	800f2be <_malloc_r+0xea>
 800f248:	6823      	ldr	r3, [r4, #0]
 800f24a:	442b      	add	r3, r5
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	f8d8 3000 	ldr.w	r3, [r8]
 800f252:	685a      	ldr	r2, [r3, #4]
 800f254:	bb62      	cbnz	r2, 800f2b0 <_malloc_r+0xdc>
 800f256:	f8c8 7000 	str.w	r7, [r8]
 800f25a:	e00f      	b.n	800f27c <_malloc_r+0xa8>
 800f25c:	6822      	ldr	r2, [r4, #0]
 800f25e:	1b52      	subs	r2, r2, r5
 800f260:	d420      	bmi.n	800f2a4 <_malloc_r+0xd0>
 800f262:	2a0b      	cmp	r2, #11
 800f264:	d917      	bls.n	800f296 <_malloc_r+0xc2>
 800f266:	1961      	adds	r1, r4, r5
 800f268:	42a3      	cmp	r3, r4
 800f26a:	6025      	str	r5, [r4, #0]
 800f26c:	bf18      	it	ne
 800f26e:	6059      	strne	r1, [r3, #4]
 800f270:	6863      	ldr	r3, [r4, #4]
 800f272:	bf08      	it	eq
 800f274:	f8c8 1000 	streq.w	r1, [r8]
 800f278:	5162      	str	r2, [r4, r5]
 800f27a:	604b      	str	r3, [r1, #4]
 800f27c:	4630      	mov	r0, r6
 800f27e:	f000 f82f 	bl	800f2e0 <__malloc_unlock>
 800f282:	f104 000b 	add.w	r0, r4, #11
 800f286:	1d23      	adds	r3, r4, #4
 800f288:	f020 0007 	bic.w	r0, r0, #7
 800f28c:	1ac2      	subs	r2, r0, r3
 800f28e:	bf1c      	itt	ne
 800f290:	1a1b      	subne	r3, r3, r0
 800f292:	50a3      	strne	r3, [r4, r2]
 800f294:	e7af      	b.n	800f1f6 <_malloc_r+0x22>
 800f296:	6862      	ldr	r2, [r4, #4]
 800f298:	42a3      	cmp	r3, r4
 800f29a:	bf0c      	ite	eq
 800f29c:	f8c8 2000 	streq.w	r2, [r8]
 800f2a0:	605a      	strne	r2, [r3, #4]
 800f2a2:	e7eb      	b.n	800f27c <_malloc_r+0xa8>
 800f2a4:	4623      	mov	r3, r4
 800f2a6:	6864      	ldr	r4, [r4, #4]
 800f2a8:	e7ae      	b.n	800f208 <_malloc_r+0x34>
 800f2aa:	463c      	mov	r4, r7
 800f2ac:	687f      	ldr	r7, [r7, #4]
 800f2ae:	e7b6      	b.n	800f21e <_malloc_r+0x4a>
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	42a3      	cmp	r3, r4
 800f2b6:	d1fb      	bne.n	800f2b0 <_malloc_r+0xdc>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	6053      	str	r3, [r2, #4]
 800f2bc:	e7de      	b.n	800f27c <_malloc_r+0xa8>
 800f2be:	230c      	movs	r3, #12
 800f2c0:	6033      	str	r3, [r6, #0]
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f000 f80c 	bl	800f2e0 <__malloc_unlock>
 800f2c8:	e794      	b.n	800f1f4 <_malloc_r+0x20>
 800f2ca:	6005      	str	r5, [r0, #0]
 800f2cc:	e7d6      	b.n	800f27c <_malloc_r+0xa8>
 800f2ce:	bf00      	nop
 800f2d0:	240005b8 	.word	0x240005b8

0800f2d4 <__malloc_lock>:
 800f2d4:	4801      	ldr	r0, [pc, #4]	@ (800f2dc <__malloc_lock+0x8>)
 800f2d6:	f000 b89f 	b.w	800f418 <__retarget_lock_acquire_recursive>
 800f2da:	bf00      	nop
 800f2dc:	240006f8 	.word	0x240006f8

0800f2e0 <__malloc_unlock>:
 800f2e0:	4801      	ldr	r0, [pc, #4]	@ (800f2e8 <__malloc_unlock+0x8>)
 800f2e2:	f000 b89a 	b.w	800f41a <__retarget_lock_release_recursive>
 800f2e6:	bf00      	nop
 800f2e8:	240006f8 	.word	0x240006f8

0800f2ec <sniprintf>:
 800f2ec:	b40c      	push	{r2, r3}
 800f2ee:	b530      	push	{r4, r5, lr}
 800f2f0:	4b17      	ldr	r3, [pc, #92]	@ (800f350 <sniprintf+0x64>)
 800f2f2:	1e0c      	subs	r4, r1, #0
 800f2f4:	681d      	ldr	r5, [r3, #0]
 800f2f6:	b09d      	sub	sp, #116	@ 0x74
 800f2f8:	da08      	bge.n	800f30c <sniprintf+0x20>
 800f2fa:	238b      	movs	r3, #139	@ 0x8b
 800f2fc:	602b      	str	r3, [r5, #0]
 800f2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f302:	b01d      	add	sp, #116	@ 0x74
 800f304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f308:	b002      	add	sp, #8
 800f30a:	4770      	bx	lr
 800f30c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f310:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f314:	bf14      	ite	ne
 800f316:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f31a:	4623      	moveq	r3, r4
 800f31c:	9304      	str	r3, [sp, #16]
 800f31e:	9307      	str	r3, [sp, #28]
 800f320:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f324:	9002      	str	r0, [sp, #8]
 800f326:	9006      	str	r0, [sp, #24]
 800f328:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f32c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f32e:	ab21      	add	r3, sp, #132	@ 0x84
 800f330:	a902      	add	r1, sp, #8
 800f332:	4628      	mov	r0, r5
 800f334:	9301      	str	r3, [sp, #4]
 800f336:	f000 f925 	bl	800f584 <_svfiprintf_r>
 800f33a:	1c43      	adds	r3, r0, #1
 800f33c:	bfbc      	itt	lt
 800f33e:	238b      	movlt	r3, #139	@ 0x8b
 800f340:	602b      	strlt	r3, [r5, #0]
 800f342:	2c00      	cmp	r4, #0
 800f344:	d0dd      	beq.n	800f302 <sniprintf+0x16>
 800f346:	9b02      	ldr	r3, [sp, #8]
 800f348:	2200      	movs	r2, #0
 800f34a:	701a      	strb	r2, [r3, #0]
 800f34c:	e7d9      	b.n	800f302 <sniprintf+0x16>
 800f34e:	bf00      	nop
 800f350:	2400002c 	.word	0x2400002c

0800f354 <siprintf>:
 800f354:	b40e      	push	{r1, r2, r3}
 800f356:	b500      	push	{lr}
 800f358:	b09c      	sub	sp, #112	@ 0x70
 800f35a:	ab1d      	add	r3, sp, #116	@ 0x74
 800f35c:	9002      	str	r0, [sp, #8]
 800f35e:	9006      	str	r0, [sp, #24]
 800f360:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f364:	4809      	ldr	r0, [pc, #36]	@ (800f38c <siprintf+0x38>)
 800f366:	9107      	str	r1, [sp, #28]
 800f368:	9104      	str	r1, [sp, #16]
 800f36a:	4909      	ldr	r1, [pc, #36]	@ (800f390 <siprintf+0x3c>)
 800f36c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f370:	9105      	str	r1, [sp, #20]
 800f372:	6800      	ldr	r0, [r0, #0]
 800f374:	9301      	str	r3, [sp, #4]
 800f376:	a902      	add	r1, sp, #8
 800f378:	f000 f904 	bl	800f584 <_svfiprintf_r>
 800f37c:	9b02      	ldr	r3, [sp, #8]
 800f37e:	2200      	movs	r2, #0
 800f380:	701a      	strb	r2, [r3, #0]
 800f382:	b01c      	add	sp, #112	@ 0x70
 800f384:	f85d eb04 	ldr.w	lr, [sp], #4
 800f388:	b003      	add	sp, #12
 800f38a:	4770      	bx	lr
 800f38c:	2400002c 	.word	0x2400002c
 800f390:	ffff0208 	.word	0xffff0208

0800f394 <memset>:
 800f394:	4402      	add	r2, r0
 800f396:	4603      	mov	r3, r0
 800f398:	4293      	cmp	r3, r2
 800f39a:	d100      	bne.n	800f39e <memset+0xa>
 800f39c:	4770      	bx	lr
 800f39e:	f803 1b01 	strb.w	r1, [r3], #1
 800f3a2:	e7f9      	b.n	800f398 <memset+0x4>

0800f3a4 <_sbrk_r>:
 800f3a4:	b538      	push	{r3, r4, r5, lr}
 800f3a6:	4d06      	ldr	r5, [pc, #24]	@ (800f3c0 <_sbrk_r+0x1c>)
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	4608      	mov	r0, r1
 800f3ae:	602b      	str	r3, [r5, #0]
 800f3b0:	f7f4 f9a6 	bl	8003700 <_sbrk>
 800f3b4:	1c43      	adds	r3, r0, #1
 800f3b6:	d102      	bne.n	800f3be <_sbrk_r+0x1a>
 800f3b8:	682b      	ldr	r3, [r5, #0]
 800f3ba:	b103      	cbz	r3, 800f3be <_sbrk_r+0x1a>
 800f3bc:	6023      	str	r3, [r4, #0]
 800f3be:	bd38      	pop	{r3, r4, r5, pc}
 800f3c0:	240006f4 	.word	0x240006f4

0800f3c4 <__errno>:
 800f3c4:	4b01      	ldr	r3, [pc, #4]	@ (800f3cc <__errno+0x8>)
 800f3c6:	6818      	ldr	r0, [r3, #0]
 800f3c8:	4770      	bx	lr
 800f3ca:	bf00      	nop
 800f3cc:	2400002c 	.word	0x2400002c

0800f3d0 <__libc_init_array>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	4d0d      	ldr	r5, [pc, #52]	@ (800f408 <__libc_init_array+0x38>)
 800f3d4:	4c0d      	ldr	r4, [pc, #52]	@ (800f40c <__libc_init_array+0x3c>)
 800f3d6:	1b64      	subs	r4, r4, r5
 800f3d8:	10a4      	asrs	r4, r4, #2
 800f3da:	2600      	movs	r6, #0
 800f3dc:	42a6      	cmp	r6, r4
 800f3de:	d109      	bne.n	800f3f4 <__libc_init_array+0x24>
 800f3e0:	4d0b      	ldr	r5, [pc, #44]	@ (800f410 <__libc_init_array+0x40>)
 800f3e2:	4c0c      	ldr	r4, [pc, #48]	@ (800f414 <__libc_init_array+0x44>)
 800f3e4:	f000 fbcc 	bl	800fb80 <_init>
 800f3e8:	1b64      	subs	r4, r4, r5
 800f3ea:	10a4      	asrs	r4, r4, #2
 800f3ec:	2600      	movs	r6, #0
 800f3ee:	42a6      	cmp	r6, r4
 800f3f0:	d105      	bne.n	800f3fe <__libc_init_array+0x2e>
 800f3f2:	bd70      	pop	{r4, r5, r6, pc}
 800f3f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3f8:	4798      	blx	r3
 800f3fa:	3601      	adds	r6, #1
 800f3fc:	e7ee      	b.n	800f3dc <__libc_init_array+0xc>
 800f3fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f402:	4798      	blx	r3
 800f404:	3601      	adds	r6, #1
 800f406:	e7f2      	b.n	800f3ee <__libc_init_array+0x1e>
 800f408:	08010194 	.word	0x08010194
 800f40c:	08010194 	.word	0x08010194
 800f410:	08010194 	.word	0x08010194
 800f414:	08010198 	.word	0x08010198

0800f418 <__retarget_lock_acquire_recursive>:
 800f418:	4770      	bx	lr

0800f41a <__retarget_lock_release_recursive>:
 800f41a:	4770      	bx	lr

0800f41c <memcpy>:
 800f41c:	440a      	add	r2, r1
 800f41e:	4291      	cmp	r1, r2
 800f420:	f100 33ff 	add.w	r3, r0, #4294967295
 800f424:	d100      	bne.n	800f428 <memcpy+0xc>
 800f426:	4770      	bx	lr
 800f428:	b510      	push	{r4, lr}
 800f42a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f42e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f432:	4291      	cmp	r1, r2
 800f434:	d1f9      	bne.n	800f42a <memcpy+0xe>
 800f436:	bd10      	pop	{r4, pc}

0800f438 <_free_r>:
 800f438:	b538      	push	{r3, r4, r5, lr}
 800f43a:	4605      	mov	r5, r0
 800f43c:	2900      	cmp	r1, #0
 800f43e:	d041      	beq.n	800f4c4 <_free_r+0x8c>
 800f440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f444:	1f0c      	subs	r4, r1, #4
 800f446:	2b00      	cmp	r3, #0
 800f448:	bfb8      	it	lt
 800f44a:	18e4      	addlt	r4, r4, r3
 800f44c:	f7ff ff42 	bl	800f2d4 <__malloc_lock>
 800f450:	4a1d      	ldr	r2, [pc, #116]	@ (800f4c8 <_free_r+0x90>)
 800f452:	6813      	ldr	r3, [r2, #0]
 800f454:	b933      	cbnz	r3, 800f464 <_free_r+0x2c>
 800f456:	6063      	str	r3, [r4, #4]
 800f458:	6014      	str	r4, [r2, #0]
 800f45a:	4628      	mov	r0, r5
 800f45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f460:	f7ff bf3e 	b.w	800f2e0 <__malloc_unlock>
 800f464:	42a3      	cmp	r3, r4
 800f466:	d908      	bls.n	800f47a <_free_r+0x42>
 800f468:	6820      	ldr	r0, [r4, #0]
 800f46a:	1821      	adds	r1, r4, r0
 800f46c:	428b      	cmp	r3, r1
 800f46e:	bf01      	itttt	eq
 800f470:	6819      	ldreq	r1, [r3, #0]
 800f472:	685b      	ldreq	r3, [r3, #4]
 800f474:	1809      	addeq	r1, r1, r0
 800f476:	6021      	streq	r1, [r4, #0]
 800f478:	e7ed      	b.n	800f456 <_free_r+0x1e>
 800f47a:	461a      	mov	r2, r3
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	b10b      	cbz	r3, 800f484 <_free_r+0x4c>
 800f480:	42a3      	cmp	r3, r4
 800f482:	d9fa      	bls.n	800f47a <_free_r+0x42>
 800f484:	6811      	ldr	r1, [r2, #0]
 800f486:	1850      	adds	r0, r2, r1
 800f488:	42a0      	cmp	r0, r4
 800f48a:	d10b      	bne.n	800f4a4 <_free_r+0x6c>
 800f48c:	6820      	ldr	r0, [r4, #0]
 800f48e:	4401      	add	r1, r0
 800f490:	1850      	adds	r0, r2, r1
 800f492:	4283      	cmp	r3, r0
 800f494:	6011      	str	r1, [r2, #0]
 800f496:	d1e0      	bne.n	800f45a <_free_r+0x22>
 800f498:	6818      	ldr	r0, [r3, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	6053      	str	r3, [r2, #4]
 800f49e:	4408      	add	r0, r1
 800f4a0:	6010      	str	r0, [r2, #0]
 800f4a2:	e7da      	b.n	800f45a <_free_r+0x22>
 800f4a4:	d902      	bls.n	800f4ac <_free_r+0x74>
 800f4a6:	230c      	movs	r3, #12
 800f4a8:	602b      	str	r3, [r5, #0]
 800f4aa:	e7d6      	b.n	800f45a <_free_r+0x22>
 800f4ac:	6820      	ldr	r0, [r4, #0]
 800f4ae:	1821      	adds	r1, r4, r0
 800f4b0:	428b      	cmp	r3, r1
 800f4b2:	bf04      	itt	eq
 800f4b4:	6819      	ldreq	r1, [r3, #0]
 800f4b6:	685b      	ldreq	r3, [r3, #4]
 800f4b8:	6063      	str	r3, [r4, #4]
 800f4ba:	bf04      	itt	eq
 800f4bc:	1809      	addeq	r1, r1, r0
 800f4be:	6021      	streq	r1, [r4, #0]
 800f4c0:	6054      	str	r4, [r2, #4]
 800f4c2:	e7ca      	b.n	800f45a <_free_r+0x22>
 800f4c4:	bd38      	pop	{r3, r4, r5, pc}
 800f4c6:	bf00      	nop
 800f4c8:	240005b8 	.word	0x240005b8

0800f4cc <__ssputs_r>:
 800f4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d0:	688e      	ldr	r6, [r1, #8]
 800f4d2:	461f      	mov	r7, r3
 800f4d4:	42be      	cmp	r6, r7
 800f4d6:	680b      	ldr	r3, [r1, #0]
 800f4d8:	4682      	mov	sl, r0
 800f4da:	460c      	mov	r4, r1
 800f4dc:	4690      	mov	r8, r2
 800f4de:	d82d      	bhi.n	800f53c <__ssputs_r+0x70>
 800f4e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f4e8:	d026      	beq.n	800f538 <__ssputs_r+0x6c>
 800f4ea:	6965      	ldr	r5, [r4, #20]
 800f4ec:	6909      	ldr	r1, [r1, #16]
 800f4ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4f2:	eba3 0901 	sub.w	r9, r3, r1
 800f4f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4fa:	1c7b      	adds	r3, r7, #1
 800f4fc:	444b      	add	r3, r9
 800f4fe:	106d      	asrs	r5, r5, #1
 800f500:	429d      	cmp	r5, r3
 800f502:	bf38      	it	cc
 800f504:	461d      	movcc	r5, r3
 800f506:	0553      	lsls	r3, r2, #21
 800f508:	d527      	bpl.n	800f55a <__ssputs_r+0x8e>
 800f50a:	4629      	mov	r1, r5
 800f50c:	f7ff fe62 	bl	800f1d4 <_malloc_r>
 800f510:	4606      	mov	r6, r0
 800f512:	b360      	cbz	r0, 800f56e <__ssputs_r+0xa2>
 800f514:	6921      	ldr	r1, [r4, #16]
 800f516:	464a      	mov	r2, r9
 800f518:	f7ff ff80 	bl	800f41c <memcpy>
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f526:	81a3      	strh	r3, [r4, #12]
 800f528:	6126      	str	r6, [r4, #16]
 800f52a:	6165      	str	r5, [r4, #20]
 800f52c:	444e      	add	r6, r9
 800f52e:	eba5 0509 	sub.w	r5, r5, r9
 800f532:	6026      	str	r6, [r4, #0]
 800f534:	60a5      	str	r5, [r4, #8]
 800f536:	463e      	mov	r6, r7
 800f538:	42be      	cmp	r6, r7
 800f53a:	d900      	bls.n	800f53e <__ssputs_r+0x72>
 800f53c:	463e      	mov	r6, r7
 800f53e:	6820      	ldr	r0, [r4, #0]
 800f540:	4632      	mov	r2, r6
 800f542:	4641      	mov	r1, r8
 800f544:	f000 faa8 	bl	800fa98 <memmove>
 800f548:	68a3      	ldr	r3, [r4, #8]
 800f54a:	1b9b      	subs	r3, r3, r6
 800f54c:	60a3      	str	r3, [r4, #8]
 800f54e:	6823      	ldr	r3, [r4, #0]
 800f550:	4433      	add	r3, r6
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	2000      	movs	r0, #0
 800f556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f55a:	462a      	mov	r2, r5
 800f55c:	f000 fab6 	bl	800facc <_realloc_r>
 800f560:	4606      	mov	r6, r0
 800f562:	2800      	cmp	r0, #0
 800f564:	d1e0      	bne.n	800f528 <__ssputs_r+0x5c>
 800f566:	6921      	ldr	r1, [r4, #16]
 800f568:	4650      	mov	r0, sl
 800f56a:	f7ff ff65 	bl	800f438 <_free_r>
 800f56e:	230c      	movs	r3, #12
 800f570:	f8ca 3000 	str.w	r3, [sl]
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f57a:	81a3      	strh	r3, [r4, #12]
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295
 800f580:	e7e9      	b.n	800f556 <__ssputs_r+0x8a>
	...

0800f584 <_svfiprintf_r>:
 800f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	4698      	mov	r8, r3
 800f58a:	898b      	ldrh	r3, [r1, #12]
 800f58c:	061b      	lsls	r3, r3, #24
 800f58e:	b09d      	sub	sp, #116	@ 0x74
 800f590:	4607      	mov	r7, r0
 800f592:	460d      	mov	r5, r1
 800f594:	4614      	mov	r4, r2
 800f596:	d510      	bpl.n	800f5ba <_svfiprintf_r+0x36>
 800f598:	690b      	ldr	r3, [r1, #16]
 800f59a:	b973      	cbnz	r3, 800f5ba <_svfiprintf_r+0x36>
 800f59c:	2140      	movs	r1, #64	@ 0x40
 800f59e:	f7ff fe19 	bl	800f1d4 <_malloc_r>
 800f5a2:	6028      	str	r0, [r5, #0]
 800f5a4:	6128      	str	r0, [r5, #16]
 800f5a6:	b930      	cbnz	r0, 800f5b6 <_svfiprintf_r+0x32>
 800f5a8:	230c      	movs	r3, #12
 800f5aa:	603b      	str	r3, [r7, #0]
 800f5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b0:	b01d      	add	sp, #116	@ 0x74
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b6:	2340      	movs	r3, #64	@ 0x40
 800f5b8:	616b      	str	r3, [r5, #20]
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5be:	2320      	movs	r3, #32
 800f5c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5c8:	2330      	movs	r3, #48	@ 0x30
 800f5ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f768 <_svfiprintf_r+0x1e4>
 800f5ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5d2:	f04f 0901 	mov.w	r9, #1
 800f5d6:	4623      	mov	r3, r4
 800f5d8:	469a      	mov	sl, r3
 800f5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5de:	b10a      	cbz	r2, 800f5e4 <_svfiprintf_r+0x60>
 800f5e0:	2a25      	cmp	r2, #37	@ 0x25
 800f5e2:	d1f9      	bne.n	800f5d8 <_svfiprintf_r+0x54>
 800f5e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f5e8:	d00b      	beq.n	800f602 <_svfiprintf_r+0x7e>
 800f5ea:	465b      	mov	r3, fp
 800f5ec:	4622      	mov	r2, r4
 800f5ee:	4629      	mov	r1, r5
 800f5f0:	4638      	mov	r0, r7
 800f5f2:	f7ff ff6b 	bl	800f4cc <__ssputs_r>
 800f5f6:	3001      	adds	r0, #1
 800f5f8:	f000 80a7 	beq.w	800f74a <_svfiprintf_r+0x1c6>
 800f5fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5fe:	445a      	add	r2, fp
 800f600:	9209      	str	r2, [sp, #36]	@ 0x24
 800f602:	f89a 3000 	ldrb.w	r3, [sl]
 800f606:	2b00      	cmp	r3, #0
 800f608:	f000 809f 	beq.w	800f74a <_svfiprintf_r+0x1c6>
 800f60c:	2300      	movs	r3, #0
 800f60e:	f04f 32ff 	mov.w	r2, #4294967295
 800f612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f616:	f10a 0a01 	add.w	sl, sl, #1
 800f61a:	9304      	str	r3, [sp, #16]
 800f61c:	9307      	str	r3, [sp, #28]
 800f61e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f622:	931a      	str	r3, [sp, #104]	@ 0x68
 800f624:	4654      	mov	r4, sl
 800f626:	2205      	movs	r2, #5
 800f628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f62c:	484e      	ldr	r0, [pc, #312]	@ (800f768 <_svfiprintf_r+0x1e4>)
 800f62e:	f7f0 fe5f 	bl	80002f0 <memchr>
 800f632:	9a04      	ldr	r2, [sp, #16]
 800f634:	b9d8      	cbnz	r0, 800f66e <_svfiprintf_r+0xea>
 800f636:	06d0      	lsls	r0, r2, #27
 800f638:	bf44      	itt	mi
 800f63a:	2320      	movmi	r3, #32
 800f63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f640:	0711      	lsls	r1, r2, #28
 800f642:	bf44      	itt	mi
 800f644:	232b      	movmi	r3, #43	@ 0x2b
 800f646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f64a:	f89a 3000 	ldrb.w	r3, [sl]
 800f64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f650:	d015      	beq.n	800f67e <_svfiprintf_r+0xfa>
 800f652:	9a07      	ldr	r2, [sp, #28]
 800f654:	4654      	mov	r4, sl
 800f656:	2000      	movs	r0, #0
 800f658:	f04f 0c0a 	mov.w	ip, #10
 800f65c:	4621      	mov	r1, r4
 800f65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f662:	3b30      	subs	r3, #48	@ 0x30
 800f664:	2b09      	cmp	r3, #9
 800f666:	d94b      	bls.n	800f700 <_svfiprintf_r+0x17c>
 800f668:	b1b0      	cbz	r0, 800f698 <_svfiprintf_r+0x114>
 800f66a:	9207      	str	r2, [sp, #28]
 800f66c:	e014      	b.n	800f698 <_svfiprintf_r+0x114>
 800f66e:	eba0 0308 	sub.w	r3, r0, r8
 800f672:	fa09 f303 	lsl.w	r3, r9, r3
 800f676:	4313      	orrs	r3, r2
 800f678:	9304      	str	r3, [sp, #16]
 800f67a:	46a2      	mov	sl, r4
 800f67c:	e7d2      	b.n	800f624 <_svfiprintf_r+0xa0>
 800f67e:	9b03      	ldr	r3, [sp, #12]
 800f680:	1d19      	adds	r1, r3, #4
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	9103      	str	r1, [sp, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	bfbb      	ittet	lt
 800f68a:	425b      	neglt	r3, r3
 800f68c:	f042 0202 	orrlt.w	r2, r2, #2
 800f690:	9307      	strge	r3, [sp, #28]
 800f692:	9307      	strlt	r3, [sp, #28]
 800f694:	bfb8      	it	lt
 800f696:	9204      	strlt	r2, [sp, #16]
 800f698:	7823      	ldrb	r3, [r4, #0]
 800f69a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f69c:	d10a      	bne.n	800f6b4 <_svfiprintf_r+0x130>
 800f69e:	7863      	ldrb	r3, [r4, #1]
 800f6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6a2:	d132      	bne.n	800f70a <_svfiprintf_r+0x186>
 800f6a4:	9b03      	ldr	r3, [sp, #12]
 800f6a6:	1d1a      	adds	r2, r3, #4
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	9203      	str	r2, [sp, #12]
 800f6ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6b0:	3402      	adds	r4, #2
 800f6b2:	9305      	str	r3, [sp, #20]
 800f6b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f778 <_svfiprintf_r+0x1f4>
 800f6b8:	7821      	ldrb	r1, [r4, #0]
 800f6ba:	2203      	movs	r2, #3
 800f6bc:	4650      	mov	r0, sl
 800f6be:	f7f0 fe17 	bl	80002f0 <memchr>
 800f6c2:	b138      	cbz	r0, 800f6d4 <_svfiprintf_r+0x150>
 800f6c4:	9b04      	ldr	r3, [sp, #16]
 800f6c6:	eba0 000a 	sub.w	r0, r0, sl
 800f6ca:	2240      	movs	r2, #64	@ 0x40
 800f6cc:	4082      	lsls	r2, r0
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	3401      	adds	r4, #1
 800f6d2:	9304      	str	r3, [sp, #16]
 800f6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6d8:	4824      	ldr	r0, [pc, #144]	@ (800f76c <_svfiprintf_r+0x1e8>)
 800f6da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6de:	2206      	movs	r2, #6
 800f6e0:	f7f0 fe06 	bl	80002f0 <memchr>
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	d036      	beq.n	800f756 <_svfiprintf_r+0x1d2>
 800f6e8:	4b21      	ldr	r3, [pc, #132]	@ (800f770 <_svfiprintf_r+0x1ec>)
 800f6ea:	bb1b      	cbnz	r3, 800f734 <_svfiprintf_r+0x1b0>
 800f6ec:	9b03      	ldr	r3, [sp, #12]
 800f6ee:	3307      	adds	r3, #7
 800f6f0:	f023 0307 	bic.w	r3, r3, #7
 800f6f4:	3308      	adds	r3, #8
 800f6f6:	9303      	str	r3, [sp, #12]
 800f6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6fa:	4433      	add	r3, r6
 800f6fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6fe:	e76a      	b.n	800f5d6 <_svfiprintf_r+0x52>
 800f700:	fb0c 3202 	mla	r2, ip, r2, r3
 800f704:	460c      	mov	r4, r1
 800f706:	2001      	movs	r0, #1
 800f708:	e7a8      	b.n	800f65c <_svfiprintf_r+0xd8>
 800f70a:	2300      	movs	r3, #0
 800f70c:	3401      	adds	r4, #1
 800f70e:	9305      	str	r3, [sp, #20]
 800f710:	4619      	mov	r1, r3
 800f712:	f04f 0c0a 	mov.w	ip, #10
 800f716:	4620      	mov	r0, r4
 800f718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f71c:	3a30      	subs	r2, #48	@ 0x30
 800f71e:	2a09      	cmp	r2, #9
 800f720:	d903      	bls.n	800f72a <_svfiprintf_r+0x1a6>
 800f722:	2b00      	cmp	r3, #0
 800f724:	d0c6      	beq.n	800f6b4 <_svfiprintf_r+0x130>
 800f726:	9105      	str	r1, [sp, #20]
 800f728:	e7c4      	b.n	800f6b4 <_svfiprintf_r+0x130>
 800f72a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f72e:	4604      	mov	r4, r0
 800f730:	2301      	movs	r3, #1
 800f732:	e7f0      	b.n	800f716 <_svfiprintf_r+0x192>
 800f734:	ab03      	add	r3, sp, #12
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	462a      	mov	r2, r5
 800f73a:	4b0e      	ldr	r3, [pc, #56]	@ (800f774 <_svfiprintf_r+0x1f0>)
 800f73c:	a904      	add	r1, sp, #16
 800f73e:	4638      	mov	r0, r7
 800f740:	f3af 8000 	nop.w
 800f744:	1c42      	adds	r2, r0, #1
 800f746:	4606      	mov	r6, r0
 800f748:	d1d6      	bne.n	800f6f8 <_svfiprintf_r+0x174>
 800f74a:	89ab      	ldrh	r3, [r5, #12]
 800f74c:	065b      	lsls	r3, r3, #25
 800f74e:	f53f af2d 	bmi.w	800f5ac <_svfiprintf_r+0x28>
 800f752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f754:	e72c      	b.n	800f5b0 <_svfiprintf_r+0x2c>
 800f756:	ab03      	add	r3, sp, #12
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	462a      	mov	r2, r5
 800f75c:	4b05      	ldr	r3, [pc, #20]	@ (800f774 <_svfiprintf_r+0x1f0>)
 800f75e:	a904      	add	r1, sp, #16
 800f760:	4638      	mov	r0, r7
 800f762:	f000 f879 	bl	800f858 <_printf_i>
 800f766:	e7ed      	b.n	800f744 <_svfiprintf_r+0x1c0>
 800f768:	08010158 	.word	0x08010158
 800f76c:	08010162 	.word	0x08010162
 800f770:	00000000 	.word	0x00000000
 800f774:	0800f4cd 	.word	0x0800f4cd
 800f778:	0801015e 	.word	0x0801015e

0800f77c <_printf_common>:
 800f77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f780:	4616      	mov	r6, r2
 800f782:	4698      	mov	r8, r3
 800f784:	688a      	ldr	r2, [r1, #8]
 800f786:	690b      	ldr	r3, [r1, #16]
 800f788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f78c:	4293      	cmp	r3, r2
 800f78e:	bfb8      	it	lt
 800f790:	4613      	movlt	r3, r2
 800f792:	6033      	str	r3, [r6, #0]
 800f794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f798:	4607      	mov	r7, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	b10a      	cbz	r2, 800f7a2 <_printf_common+0x26>
 800f79e:	3301      	adds	r3, #1
 800f7a0:	6033      	str	r3, [r6, #0]
 800f7a2:	6823      	ldr	r3, [r4, #0]
 800f7a4:	0699      	lsls	r1, r3, #26
 800f7a6:	bf42      	ittt	mi
 800f7a8:	6833      	ldrmi	r3, [r6, #0]
 800f7aa:	3302      	addmi	r3, #2
 800f7ac:	6033      	strmi	r3, [r6, #0]
 800f7ae:	6825      	ldr	r5, [r4, #0]
 800f7b0:	f015 0506 	ands.w	r5, r5, #6
 800f7b4:	d106      	bne.n	800f7c4 <_printf_common+0x48>
 800f7b6:	f104 0a19 	add.w	sl, r4, #25
 800f7ba:	68e3      	ldr	r3, [r4, #12]
 800f7bc:	6832      	ldr	r2, [r6, #0]
 800f7be:	1a9b      	subs	r3, r3, r2
 800f7c0:	42ab      	cmp	r3, r5
 800f7c2:	dc26      	bgt.n	800f812 <_printf_common+0x96>
 800f7c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f7c8:	6822      	ldr	r2, [r4, #0]
 800f7ca:	3b00      	subs	r3, #0
 800f7cc:	bf18      	it	ne
 800f7ce:	2301      	movne	r3, #1
 800f7d0:	0692      	lsls	r2, r2, #26
 800f7d2:	d42b      	bmi.n	800f82c <_printf_common+0xb0>
 800f7d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f7d8:	4641      	mov	r1, r8
 800f7da:	4638      	mov	r0, r7
 800f7dc:	47c8      	blx	r9
 800f7de:	3001      	adds	r0, #1
 800f7e0:	d01e      	beq.n	800f820 <_printf_common+0xa4>
 800f7e2:	6823      	ldr	r3, [r4, #0]
 800f7e4:	6922      	ldr	r2, [r4, #16]
 800f7e6:	f003 0306 	and.w	r3, r3, #6
 800f7ea:	2b04      	cmp	r3, #4
 800f7ec:	bf02      	ittt	eq
 800f7ee:	68e5      	ldreq	r5, [r4, #12]
 800f7f0:	6833      	ldreq	r3, [r6, #0]
 800f7f2:	1aed      	subeq	r5, r5, r3
 800f7f4:	68a3      	ldr	r3, [r4, #8]
 800f7f6:	bf0c      	ite	eq
 800f7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7fc:	2500      	movne	r5, #0
 800f7fe:	4293      	cmp	r3, r2
 800f800:	bfc4      	itt	gt
 800f802:	1a9b      	subgt	r3, r3, r2
 800f804:	18ed      	addgt	r5, r5, r3
 800f806:	2600      	movs	r6, #0
 800f808:	341a      	adds	r4, #26
 800f80a:	42b5      	cmp	r5, r6
 800f80c:	d11a      	bne.n	800f844 <_printf_common+0xc8>
 800f80e:	2000      	movs	r0, #0
 800f810:	e008      	b.n	800f824 <_printf_common+0xa8>
 800f812:	2301      	movs	r3, #1
 800f814:	4652      	mov	r2, sl
 800f816:	4641      	mov	r1, r8
 800f818:	4638      	mov	r0, r7
 800f81a:	47c8      	blx	r9
 800f81c:	3001      	adds	r0, #1
 800f81e:	d103      	bne.n	800f828 <_printf_common+0xac>
 800f820:	f04f 30ff 	mov.w	r0, #4294967295
 800f824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f828:	3501      	adds	r5, #1
 800f82a:	e7c6      	b.n	800f7ba <_printf_common+0x3e>
 800f82c:	18e1      	adds	r1, r4, r3
 800f82e:	1c5a      	adds	r2, r3, #1
 800f830:	2030      	movs	r0, #48	@ 0x30
 800f832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f836:	4422      	add	r2, r4
 800f838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f83c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f840:	3302      	adds	r3, #2
 800f842:	e7c7      	b.n	800f7d4 <_printf_common+0x58>
 800f844:	2301      	movs	r3, #1
 800f846:	4622      	mov	r2, r4
 800f848:	4641      	mov	r1, r8
 800f84a:	4638      	mov	r0, r7
 800f84c:	47c8      	blx	r9
 800f84e:	3001      	adds	r0, #1
 800f850:	d0e6      	beq.n	800f820 <_printf_common+0xa4>
 800f852:	3601      	adds	r6, #1
 800f854:	e7d9      	b.n	800f80a <_printf_common+0x8e>
	...

0800f858 <_printf_i>:
 800f858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f85c:	7e0f      	ldrb	r7, [r1, #24]
 800f85e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f860:	2f78      	cmp	r7, #120	@ 0x78
 800f862:	4691      	mov	r9, r2
 800f864:	4680      	mov	r8, r0
 800f866:	460c      	mov	r4, r1
 800f868:	469a      	mov	sl, r3
 800f86a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f86e:	d807      	bhi.n	800f880 <_printf_i+0x28>
 800f870:	2f62      	cmp	r7, #98	@ 0x62
 800f872:	d80a      	bhi.n	800f88a <_printf_i+0x32>
 800f874:	2f00      	cmp	r7, #0
 800f876:	f000 80d2 	beq.w	800fa1e <_printf_i+0x1c6>
 800f87a:	2f58      	cmp	r7, #88	@ 0x58
 800f87c:	f000 80b9 	beq.w	800f9f2 <_printf_i+0x19a>
 800f880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f888:	e03a      	b.n	800f900 <_printf_i+0xa8>
 800f88a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f88e:	2b15      	cmp	r3, #21
 800f890:	d8f6      	bhi.n	800f880 <_printf_i+0x28>
 800f892:	a101      	add	r1, pc, #4	@ (adr r1, 800f898 <_printf_i+0x40>)
 800f894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f898:	0800f8f1 	.word	0x0800f8f1
 800f89c:	0800f905 	.word	0x0800f905
 800f8a0:	0800f881 	.word	0x0800f881
 800f8a4:	0800f881 	.word	0x0800f881
 800f8a8:	0800f881 	.word	0x0800f881
 800f8ac:	0800f881 	.word	0x0800f881
 800f8b0:	0800f905 	.word	0x0800f905
 800f8b4:	0800f881 	.word	0x0800f881
 800f8b8:	0800f881 	.word	0x0800f881
 800f8bc:	0800f881 	.word	0x0800f881
 800f8c0:	0800f881 	.word	0x0800f881
 800f8c4:	0800fa05 	.word	0x0800fa05
 800f8c8:	0800f92f 	.word	0x0800f92f
 800f8cc:	0800f9bf 	.word	0x0800f9bf
 800f8d0:	0800f881 	.word	0x0800f881
 800f8d4:	0800f881 	.word	0x0800f881
 800f8d8:	0800fa27 	.word	0x0800fa27
 800f8dc:	0800f881 	.word	0x0800f881
 800f8e0:	0800f92f 	.word	0x0800f92f
 800f8e4:	0800f881 	.word	0x0800f881
 800f8e8:	0800f881 	.word	0x0800f881
 800f8ec:	0800f9c7 	.word	0x0800f9c7
 800f8f0:	6833      	ldr	r3, [r6, #0]
 800f8f2:	1d1a      	adds	r2, r3, #4
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	6032      	str	r2, [r6, #0]
 800f8f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f900:	2301      	movs	r3, #1
 800f902:	e09d      	b.n	800fa40 <_printf_i+0x1e8>
 800f904:	6833      	ldr	r3, [r6, #0]
 800f906:	6820      	ldr	r0, [r4, #0]
 800f908:	1d19      	adds	r1, r3, #4
 800f90a:	6031      	str	r1, [r6, #0]
 800f90c:	0606      	lsls	r6, r0, #24
 800f90e:	d501      	bpl.n	800f914 <_printf_i+0xbc>
 800f910:	681d      	ldr	r5, [r3, #0]
 800f912:	e003      	b.n	800f91c <_printf_i+0xc4>
 800f914:	0645      	lsls	r5, r0, #25
 800f916:	d5fb      	bpl.n	800f910 <_printf_i+0xb8>
 800f918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f91c:	2d00      	cmp	r5, #0
 800f91e:	da03      	bge.n	800f928 <_printf_i+0xd0>
 800f920:	232d      	movs	r3, #45	@ 0x2d
 800f922:	426d      	negs	r5, r5
 800f924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f928:	4859      	ldr	r0, [pc, #356]	@ (800fa90 <_printf_i+0x238>)
 800f92a:	230a      	movs	r3, #10
 800f92c:	e011      	b.n	800f952 <_printf_i+0xfa>
 800f92e:	6821      	ldr	r1, [r4, #0]
 800f930:	6833      	ldr	r3, [r6, #0]
 800f932:	0608      	lsls	r0, r1, #24
 800f934:	f853 5b04 	ldr.w	r5, [r3], #4
 800f938:	d402      	bmi.n	800f940 <_printf_i+0xe8>
 800f93a:	0649      	lsls	r1, r1, #25
 800f93c:	bf48      	it	mi
 800f93e:	b2ad      	uxthmi	r5, r5
 800f940:	2f6f      	cmp	r7, #111	@ 0x6f
 800f942:	4853      	ldr	r0, [pc, #332]	@ (800fa90 <_printf_i+0x238>)
 800f944:	6033      	str	r3, [r6, #0]
 800f946:	bf14      	ite	ne
 800f948:	230a      	movne	r3, #10
 800f94a:	2308      	moveq	r3, #8
 800f94c:	2100      	movs	r1, #0
 800f94e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f952:	6866      	ldr	r6, [r4, #4]
 800f954:	60a6      	str	r6, [r4, #8]
 800f956:	2e00      	cmp	r6, #0
 800f958:	bfa2      	ittt	ge
 800f95a:	6821      	ldrge	r1, [r4, #0]
 800f95c:	f021 0104 	bicge.w	r1, r1, #4
 800f960:	6021      	strge	r1, [r4, #0]
 800f962:	b90d      	cbnz	r5, 800f968 <_printf_i+0x110>
 800f964:	2e00      	cmp	r6, #0
 800f966:	d04b      	beq.n	800fa00 <_printf_i+0x1a8>
 800f968:	4616      	mov	r6, r2
 800f96a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f96e:	fb03 5711 	mls	r7, r3, r1, r5
 800f972:	5dc7      	ldrb	r7, [r0, r7]
 800f974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f978:	462f      	mov	r7, r5
 800f97a:	42bb      	cmp	r3, r7
 800f97c:	460d      	mov	r5, r1
 800f97e:	d9f4      	bls.n	800f96a <_printf_i+0x112>
 800f980:	2b08      	cmp	r3, #8
 800f982:	d10b      	bne.n	800f99c <_printf_i+0x144>
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	07df      	lsls	r7, r3, #31
 800f988:	d508      	bpl.n	800f99c <_printf_i+0x144>
 800f98a:	6923      	ldr	r3, [r4, #16]
 800f98c:	6861      	ldr	r1, [r4, #4]
 800f98e:	4299      	cmp	r1, r3
 800f990:	bfde      	ittt	le
 800f992:	2330      	movle	r3, #48	@ 0x30
 800f994:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f998:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f99c:	1b92      	subs	r2, r2, r6
 800f99e:	6122      	str	r2, [r4, #16]
 800f9a0:	f8cd a000 	str.w	sl, [sp]
 800f9a4:	464b      	mov	r3, r9
 800f9a6:	aa03      	add	r2, sp, #12
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	4640      	mov	r0, r8
 800f9ac:	f7ff fee6 	bl	800f77c <_printf_common>
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	d14a      	bne.n	800fa4a <_printf_i+0x1f2>
 800f9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b8:	b004      	add	sp, #16
 800f9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9be:	6823      	ldr	r3, [r4, #0]
 800f9c0:	f043 0320 	orr.w	r3, r3, #32
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	4833      	ldr	r0, [pc, #204]	@ (800fa94 <_printf_i+0x23c>)
 800f9c8:	2778      	movs	r7, #120	@ 0x78
 800f9ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	6831      	ldr	r1, [r6, #0]
 800f9d2:	061f      	lsls	r7, r3, #24
 800f9d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800f9d8:	d402      	bmi.n	800f9e0 <_printf_i+0x188>
 800f9da:	065f      	lsls	r7, r3, #25
 800f9dc:	bf48      	it	mi
 800f9de:	b2ad      	uxthmi	r5, r5
 800f9e0:	6031      	str	r1, [r6, #0]
 800f9e2:	07d9      	lsls	r1, r3, #31
 800f9e4:	bf44      	itt	mi
 800f9e6:	f043 0320 	orrmi.w	r3, r3, #32
 800f9ea:	6023      	strmi	r3, [r4, #0]
 800f9ec:	b11d      	cbz	r5, 800f9f6 <_printf_i+0x19e>
 800f9ee:	2310      	movs	r3, #16
 800f9f0:	e7ac      	b.n	800f94c <_printf_i+0xf4>
 800f9f2:	4827      	ldr	r0, [pc, #156]	@ (800fa90 <_printf_i+0x238>)
 800f9f4:	e7e9      	b.n	800f9ca <_printf_i+0x172>
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	f023 0320 	bic.w	r3, r3, #32
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	e7f6      	b.n	800f9ee <_printf_i+0x196>
 800fa00:	4616      	mov	r6, r2
 800fa02:	e7bd      	b.n	800f980 <_printf_i+0x128>
 800fa04:	6833      	ldr	r3, [r6, #0]
 800fa06:	6825      	ldr	r5, [r4, #0]
 800fa08:	6961      	ldr	r1, [r4, #20]
 800fa0a:	1d18      	adds	r0, r3, #4
 800fa0c:	6030      	str	r0, [r6, #0]
 800fa0e:	062e      	lsls	r6, r5, #24
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	d501      	bpl.n	800fa18 <_printf_i+0x1c0>
 800fa14:	6019      	str	r1, [r3, #0]
 800fa16:	e002      	b.n	800fa1e <_printf_i+0x1c6>
 800fa18:	0668      	lsls	r0, r5, #25
 800fa1a:	d5fb      	bpl.n	800fa14 <_printf_i+0x1bc>
 800fa1c:	8019      	strh	r1, [r3, #0]
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6123      	str	r3, [r4, #16]
 800fa22:	4616      	mov	r6, r2
 800fa24:	e7bc      	b.n	800f9a0 <_printf_i+0x148>
 800fa26:	6833      	ldr	r3, [r6, #0]
 800fa28:	1d1a      	adds	r2, r3, #4
 800fa2a:	6032      	str	r2, [r6, #0]
 800fa2c:	681e      	ldr	r6, [r3, #0]
 800fa2e:	6862      	ldr	r2, [r4, #4]
 800fa30:	2100      	movs	r1, #0
 800fa32:	4630      	mov	r0, r6
 800fa34:	f7f0 fc5c 	bl	80002f0 <memchr>
 800fa38:	b108      	cbz	r0, 800fa3e <_printf_i+0x1e6>
 800fa3a:	1b80      	subs	r0, r0, r6
 800fa3c:	6060      	str	r0, [r4, #4]
 800fa3e:	6863      	ldr	r3, [r4, #4]
 800fa40:	6123      	str	r3, [r4, #16]
 800fa42:	2300      	movs	r3, #0
 800fa44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa48:	e7aa      	b.n	800f9a0 <_printf_i+0x148>
 800fa4a:	6923      	ldr	r3, [r4, #16]
 800fa4c:	4632      	mov	r2, r6
 800fa4e:	4649      	mov	r1, r9
 800fa50:	4640      	mov	r0, r8
 800fa52:	47d0      	blx	sl
 800fa54:	3001      	adds	r0, #1
 800fa56:	d0ad      	beq.n	800f9b4 <_printf_i+0x15c>
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	079b      	lsls	r3, r3, #30
 800fa5c:	d413      	bmi.n	800fa86 <_printf_i+0x22e>
 800fa5e:	68e0      	ldr	r0, [r4, #12]
 800fa60:	9b03      	ldr	r3, [sp, #12]
 800fa62:	4298      	cmp	r0, r3
 800fa64:	bfb8      	it	lt
 800fa66:	4618      	movlt	r0, r3
 800fa68:	e7a6      	b.n	800f9b8 <_printf_i+0x160>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	4632      	mov	r2, r6
 800fa6e:	4649      	mov	r1, r9
 800fa70:	4640      	mov	r0, r8
 800fa72:	47d0      	blx	sl
 800fa74:	3001      	adds	r0, #1
 800fa76:	d09d      	beq.n	800f9b4 <_printf_i+0x15c>
 800fa78:	3501      	adds	r5, #1
 800fa7a:	68e3      	ldr	r3, [r4, #12]
 800fa7c:	9903      	ldr	r1, [sp, #12]
 800fa7e:	1a5b      	subs	r3, r3, r1
 800fa80:	42ab      	cmp	r3, r5
 800fa82:	dcf2      	bgt.n	800fa6a <_printf_i+0x212>
 800fa84:	e7eb      	b.n	800fa5e <_printf_i+0x206>
 800fa86:	2500      	movs	r5, #0
 800fa88:	f104 0619 	add.w	r6, r4, #25
 800fa8c:	e7f5      	b.n	800fa7a <_printf_i+0x222>
 800fa8e:	bf00      	nop
 800fa90:	08010169 	.word	0x08010169
 800fa94:	0801017a 	.word	0x0801017a

0800fa98 <memmove>:
 800fa98:	4288      	cmp	r0, r1
 800fa9a:	b510      	push	{r4, lr}
 800fa9c:	eb01 0402 	add.w	r4, r1, r2
 800faa0:	d902      	bls.n	800faa8 <memmove+0x10>
 800faa2:	4284      	cmp	r4, r0
 800faa4:	4623      	mov	r3, r4
 800faa6:	d807      	bhi.n	800fab8 <memmove+0x20>
 800faa8:	1e43      	subs	r3, r0, #1
 800faaa:	42a1      	cmp	r1, r4
 800faac:	d008      	beq.n	800fac0 <memmove+0x28>
 800faae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fab6:	e7f8      	b.n	800faaa <memmove+0x12>
 800fab8:	4402      	add	r2, r0
 800faba:	4601      	mov	r1, r0
 800fabc:	428a      	cmp	r2, r1
 800fabe:	d100      	bne.n	800fac2 <memmove+0x2a>
 800fac0:	bd10      	pop	{r4, pc}
 800fac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800faca:	e7f7      	b.n	800fabc <memmove+0x24>

0800facc <_realloc_r>:
 800facc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad0:	4680      	mov	r8, r0
 800fad2:	4615      	mov	r5, r2
 800fad4:	460c      	mov	r4, r1
 800fad6:	b921      	cbnz	r1, 800fae2 <_realloc_r+0x16>
 800fad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fadc:	4611      	mov	r1, r2
 800fade:	f7ff bb79 	b.w	800f1d4 <_malloc_r>
 800fae2:	b92a      	cbnz	r2, 800faf0 <_realloc_r+0x24>
 800fae4:	f7ff fca8 	bl	800f438 <_free_r>
 800fae8:	2400      	movs	r4, #0
 800faea:	4620      	mov	r0, r4
 800faec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf0:	f000 f81a 	bl	800fb28 <_malloc_usable_size_r>
 800faf4:	4285      	cmp	r5, r0
 800faf6:	4606      	mov	r6, r0
 800faf8:	d802      	bhi.n	800fb00 <_realloc_r+0x34>
 800fafa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fafe:	d8f4      	bhi.n	800faea <_realloc_r+0x1e>
 800fb00:	4629      	mov	r1, r5
 800fb02:	4640      	mov	r0, r8
 800fb04:	f7ff fb66 	bl	800f1d4 <_malloc_r>
 800fb08:	4607      	mov	r7, r0
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d0ec      	beq.n	800fae8 <_realloc_r+0x1c>
 800fb0e:	42b5      	cmp	r5, r6
 800fb10:	462a      	mov	r2, r5
 800fb12:	4621      	mov	r1, r4
 800fb14:	bf28      	it	cs
 800fb16:	4632      	movcs	r2, r6
 800fb18:	f7ff fc80 	bl	800f41c <memcpy>
 800fb1c:	4621      	mov	r1, r4
 800fb1e:	4640      	mov	r0, r8
 800fb20:	f7ff fc8a 	bl	800f438 <_free_r>
 800fb24:	463c      	mov	r4, r7
 800fb26:	e7e0      	b.n	800faea <_realloc_r+0x1e>

0800fb28 <_malloc_usable_size_r>:
 800fb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb2c:	1f18      	subs	r0, r3, #4
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	bfbc      	itt	lt
 800fb32:	580b      	ldrlt	r3, [r1, r0]
 800fb34:	18c0      	addlt	r0, r0, r3
 800fb36:	4770      	bx	lr

0800fb38 <sqrt>:
 800fb38:	b508      	push	{r3, lr}
 800fb3a:	ed2d 8b04 	vpush	{d8-d9}
 800fb3e:	eeb0 8b40 	vmov.f64	d8, d0
 800fb42:	f000 f819 	bl	800fb78 <__ieee754_sqrt>
 800fb46:	eeb4 8b48 	vcmp.f64	d8, d8
 800fb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4e:	d60c      	bvs.n	800fb6a <sqrt+0x32>
 800fb50:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800fb70 <sqrt+0x38>
 800fb54:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800fb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5c:	d505      	bpl.n	800fb6a <sqrt+0x32>
 800fb5e:	f7ff fc31 	bl	800f3c4 <__errno>
 800fb62:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800fb66:	2321      	movs	r3, #33	@ 0x21
 800fb68:	6003      	str	r3, [r0, #0]
 800fb6a:	ecbd 8b04 	vpop	{d8-d9}
 800fb6e:	bd08      	pop	{r3, pc}
	...

0800fb78 <__ieee754_sqrt>:
 800fb78:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800fb7c:	4770      	bx	lr
	...

0800fb80 <_init>:
 800fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb82:	bf00      	nop
 800fb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb86:	bc08      	pop	{r3}
 800fb88:	469e      	mov	lr, r3
 800fb8a:	4770      	bx	lr

0800fb8c <_fini>:
 800fb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb8e:	bf00      	nop
 800fb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb92:	bc08      	pop	{r3}
 800fb94:	469e      	mov	lr, r3
 800fb96:	4770      	bx	lr
