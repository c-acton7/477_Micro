
conundrum_crack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f618  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800f8b8  0800f8b8  000108b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800feac  0800feac  00010eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800feb4  0800feb4  00010eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800feb8  0800feb8  00010eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0800febc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000680  2400007c  0800ff38  0001107c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006fc  0800ff38  000116fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b1f7  00000000  00000000  000110aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d3f  00000000  00000000  0002c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001870  00000000  00000000  0002ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012ef  00000000  00000000  00031850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b72a  00000000  00000000  00032b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022b33  00000000  00000000  0006e269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167148  00000000  00000000  00090d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f7ee4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006d78  00000000  00000000  001f7f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001feca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f8a0 	.word	0x0800f8a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800f8a0 	.word	0x0800f8a0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <swap>:

//Wait is active low in RA8875
#define LCD_WAIT_STATUS (_wait_port->IDR & _wait_pin)

static void swap (int16_t *x, int16_t *y)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int16_t temp = *x;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	81fb      	strh	r3, [r7, #14]
  *x = *y;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	801a      	strh	r2, [r3, #0]
  *y = temp;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	89fa      	ldrh	r2, [r7, #14]
 80003ae:	801a      	strh	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <RA8875_BUS_FREE>:
/**
 * Wait for BUS Free
 * @return 0 if bus not free, 1 otherwise
 */
static uint8_t RA8875_BUS_FREE ()
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  while (LCD_WAIT_STATUS == 0)
 80003c0:	bf00      	nop
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <RA8875_BUS_FREE+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a06      	ldr	r2, [pc, #24]	@ (80003e4 <RA8875_BUS_FREE+0x28>)
 80003ca:	8812      	ldrh	r2, [r2, #0]
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f7      	beq.n	80003c2 <RA8875_BUS_FREE+0x6>
  {
  }
  return 1;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	240000a0 	.word	0x240000a0
 80003e4:	240000a4 	.word	0x240000a4

080003e8 <RA8875_read_reg>:
 @param reg Register to read
 @return The value
 */
/**************************************************************************/
uint8_t RA8875_read_reg (uint8_t reg)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
  RA8875_write_command (reg);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f87f 	bl	80004f8 <RA8875_write_command>
  return RA8875_read_data ();
 80003fa:	f000 f841 	bl	8000480 <RA8875_read_data>
 80003fe:	4603      	mov	r3, r0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <RA8875_write_data>:
 Write data to the current register
 @param d Data to write
 */
/**************************************************************************/
void RA8875_write_data (uint8_t d)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000412:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <RA8875_write_data+0x68>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <RA8875_write_data+0x6c>)
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4013      	ands	r3, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	d105      	bne.n	800042e <RA8875_write_data+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ffca 	bl	80003bc <RA8875_BUS_FREE>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01b      	beq.n	8000466 <RA8875_write_data+0x5e>
  }
  uint8_t rs_rw_info = 0b00000000;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	4810      	ldr	r0, [pc, #64]	@ (8000478 <RA8875_write_data+0x70>)
 8000438:	f005 fbbc 	bl	8005bb4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800043c:	f107 010f 	add.w	r1, r7, #15
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	2201      	movs	r2, #1
 8000446:	480d      	ldr	r0, [pc, #52]	@ (800047c <RA8875_write_data+0x74>)
 8000448:	f009 fb7e 	bl	8009b48 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800044c:	1df9      	adds	r1, r7, #7
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
 8000452:	2201      	movs	r2, #1
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <RA8875_write_data+0x74>)
 8000456:	f009 fb77 	bl	8009b48 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <RA8875_write_data+0x70>)
 8000460:	f005 fba8 	bl	8005bb4 <HAL_GPIO_WritePin>
 8000464:	e000      	b.n	8000468 <RA8875_write_data+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000466:	bf00      	nop
}
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	240000a0 	.word	0x240000a0
 8000474:	240000a4 	.word	0x240000a4
 8000478:	58020000 	.word	0x58020000
 800047c:	24000118 	.word	0x24000118

08000480 <RA8875_read_data>:
 Read the data from the current register
 @return The Value
 */
/**************************************************************************/
uint8_t RA8875_read_data (void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

  uint8_t data = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	71fb      	strb	r3, [r7, #7]
  //  Wait is active low
  if (LCD_WAIT_STATUS == 0)
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <RA8875_read_data+0x68>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <RA8875_read_data+0x6c>)
 8000492:	8812      	ldrh	r2, [r2, #0]
 8000494:	4013      	ands	r3, r2
 8000496:	2b00      	cmp	r3, #0
 8000498:	d107      	bne.n	80004aa <RA8875_read_data+0x2a>
  {
    if (!(RA8875_BUS_FREE (1))) return 0;
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff ff8e 	bl	80003bc <RA8875_BUS_FREE>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d101      	bne.n	80004aa <RA8875_read_data+0x2a>
 80004a6:	2300      	movs	r3, #0
 80004a8:	e01a      	b.n	80004e0 <RA8875_read_data+0x60>
  }
  uint8_t rs_rw_info = 0b01000000;
 80004aa:	2340      	movs	r3, #64	@ 0x40
 80004ac:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2110      	movs	r1, #16
 80004b2:	480f      	ldr	r0, [pc, #60]	@ (80004f0 <RA8875_read_data+0x70>)
 80004b4:	f005 fb7e 	bl	8005bb4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 80004b8:	1db9      	adds	r1, r7, #6
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	2201      	movs	r2, #1
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <RA8875_read_data+0x74>)
 80004c2:	f009 fb41 	bl	8009b48 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &data, 1, HAL_MAX_DELAY);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	2201      	movs	r2, #1
 80004ce:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <RA8875_read_data+0x74>)
 80004d0:	f009 fd28 	bl	8009f24 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2110      	movs	r1, #16
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <RA8875_read_data+0x70>)
 80004da:	f005 fb6b 	bl	8005bb4 <HAL_GPIO_WritePin>
  return data;
 80004de:	79fb      	ldrb	r3, [r7, #7]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	240000a0 	.word	0x240000a0
 80004ec:	240000a4 	.word	0x240000a4
 80004f0:	58020000 	.word	0x58020000
 80004f4:	24000118 	.word	0x24000118

080004f8 <RA8875_write_command>:
 Write a command to the current register
 @param d The data to write as a command
 */
/**************************************************************************/
void RA8875_write_command (uint8_t d)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  //Wait is active low
  if (LCD_WAIT_STATUS == 0)
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <RA8875_write_command+0x68>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <RA8875_write_command+0x6c>)
 800050a:	8812      	ldrh	r2, [r2, #0]
 800050c:	4013      	ands	r3, r2
 800050e:	2b00      	cmp	r3, #0
 8000510:	d105      	bne.n	800051e <RA8875_write_command+0x26>
  {
    if (!(RA8875_BUS_FREE (1))) return;
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ff52 	bl	80003bc <RA8875_BUS_FREE>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d01b      	beq.n	8000556 <RA8875_write_command+0x5e>
  }
  uint8_t rs_rw_info = 0b10000000;
 800051e:	2380      	movs	r3, #128	@ 0x80
 8000520:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <RA8875_write_command+0x70>)
 8000528:	f005 fb44 	bl	8005bb4 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &rs_rw_info, 1, HAL_MAX_DELAY);
 800052c:	f107 010f 	add.w	r1, r7, #15
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	2201      	movs	r2, #1
 8000536:	480d      	ldr	r0, [pc, #52]	@ (800056c <RA8875_write_command+0x74>)
 8000538:	f009 fb06 	bl	8009b48 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &d, 1, HAL_MAX_DELAY);
 800053c:	1df9      	adds	r1, r7, #7
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	2201      	movs	r2, #1
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <RA8875_write_command+0x74>)
 8000546:	f009 faff 	bl	8009b48 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <RA8875_write_command+0x70>)
 8000550:	f005 fb30 	bl	8005bb4 <HAL_GPIO_WritePin>
 8000554:	e000      	b.n	8000558 <RA8875_write_command+0x60>
    if (!(RA8875_BUS_FREE (1))) return;
 8000556:	bf00      	nop
}
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	240000a0 	.word	0x240000a0
 8000564:	240000a4 	.word	0x240000a4
 8000568:	58020000 	.word	0x58020000
 800056c:	24000118 	.word	0x24000118

08000570 <RA8875_graphic_mode>:
/*!
 Sets the display in graphics mode (as opposed to text mode)
 */
/**************************************************************************/
void RA8875_graphic_mode (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  RA8875_write_command (RA8875_MWCR0);
 8000576:	2040      	movs	r0, #64	@ 0x40
 8000578:	f7ff ffbe 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 800057c:	f7ff ff80 	bl	8000480 <RA8875_read_data>
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]
  temp &= ~RA8875_MWCR0_TXTMODE; // bit #7
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800058a:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff3a 	bl	8000408 <RA8875_write_data>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <RA8875_wait_poll>:
 @param waitflag The value to wait for the status register to match
 @return 1 if the expected status has been reached
 */
/**************************************************************************/
uint8_t RA8875_wait_poll (uint8_t regname, uint8_t waitflag)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
  /* Wait for the command to finish */
  while (1)
  {
    uint8_t temp = RA8875_read_reg (regname);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff1a 	bl	80003e8 <RA8875_read_reg>
 80005b4:	4603      	mov	r3, r0
 80005b6:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag)) return 1;
 80005b8:	7bfa      	ldrb	r2, [r7, #15]
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	4013      	ands	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f3      	bne.n	80005ac <RA8875_wait_poll+0x10>
 80005c4:	2301      	movs	r3, #1
  }
  return 0; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <RA8875_apply_rotation_x>:
 Apply current rotation in the X direction
 @return the X value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_x (int16_t x)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <RA8875_apply_rotation_x+0x34>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d108      	bne.n	80005f4 <RA8875_apply_rotation_x+0x24>
  {
    case 2:
      x = _width - 1 - x;
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <RA8875_apply_rotation_x+0x38>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	80fb      	strh	r3, [r7, #6]
      break;
 80005f2:	bf00      	nop
  }

  return x;
 80005f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	2400009d 	.word	0x2400009d
 8000608:	24000098 	.word	0x24000098

0800060c <RA8875_apply_rotation_y>:
 Apply current rotation in the Y direction
 @return the Y value with current rotation applied
 */
/**************************************************************************/
static int16_t RA8875_apply_rotation_y (int16_t y)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
  switch (_rotation)
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <RA8875_apply_rotation_y+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d108      	bne.n	8000630 <RA8875_apply_rotation_y+0x24>
  {
    case 2:
      y = _height - 1 - y;
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <RA8875_apply_rotation_y+0x44>)
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	3b01      	subs	r3, #1
 800062a:	b29b      	uxth	r3, r3
 800062c:	80fb      	strh	r3, [r7, #6]
      break;
 800062e:	bf00      	nop
  }

  return y + _voffset;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <RA8875_apply_rotation_y+0x48>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	4413      	add	r3, r2
 800063a:	b29b      	uxth	r3, r3
 800063c:	b21b      	sxth	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2400009d 	.word	0x2400009d
 8000650:	2400009a 	.word	0x2400009a
 8000654:	2400009e 	.word	0x2400009e

08000658 <rectHelper>:
/*!
 Helper function for higher level rectangle drawing code
 */
/**************************************************************************/
static void rectHelper (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color, uint8_t filled)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4603      	mov	r3, r0
 800066c:	80bb      	strh	r3, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	807b      	strh	r3, [r7, #2]
 8000672:	4613      	mov	r3, r2
 8000674:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffa8 	bl	80005d0 <RA8875_apply_rotation_x>
 8000680:	4603      	mov	r3, r0
 8000682:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000684:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffbf 	bl	800060c <RA8875_apply_rotation_y>
 800068e:	4603      	mov	r3, r0
 8000690:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff9a 	bl	80005d0 <RA8875_apply_rotation_x>
 800069c:	4603      	mov	r3, r0
 800069e:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 80006a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffb1 	bl	800060c <RA8875_apply_rotation_y>
 80006aa:	4603      	mov	r3, r0
 80006ac:	803b      	strh	r3, [r7, #0]

  /* Set X */
  RA8875_write_command (0x91);
 80006ae:	2091      	movs	r0, #145	@ 0x91
 80006b0:	f7ff ff22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fea5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 80006be:	2092      	movs	r0, #146	@ 0x92
 80006c0:	f7ff ff1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 80006c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c8:	121b      	asrs	r3, r3, #8
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fe9a 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 80006d4:	2093      	movs	r0, #147	@ 0x93
 80006d6:	f7ff ff0f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe92 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 80006e4:	2094      	movs	r0, #148	@ 0x94
 80006e6:	f7ff ff07 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 80006ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ee:	121b      	asrs	r3, r3, #8
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fe87 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 80006fa:	2095      	movs	r0, #149	@ 0x95
 80006fc:	f7ff fefc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe7f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 800070a:	2096      	movs	r0, #150	@ 0x96
 800070c:	f7ff fef4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000714:	121b      	asrs	r3, r3, #8
 8000716:	b21b      	sxth	r3, r3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fe74 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000720:	2097      	movs	r0, #151	@ 0x97
 8000722:	f7ff fee9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000726:	883b      	ldrh	r3, [r7, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fe6c 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000730:	2098      	movs	r0, #152	@ 0x98
 8000732:	f7ff fee1 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000736:	f9b7 3000 	ldrsh.w	r3, [r7]
 800073a:	121b      	asrs	r3, r3, #8
 800073c:	b21b      	sxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe61 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000746:	2063      	movs	r0, #99	@ 0x63
 8000748:	f7ff fed6 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 800074c:	8b3b      	ldrh	r3, [r7, #24]
 800074e:	0adb      	lsrs	r3, r3, #11
 8000750:	b29b      	uxth	r3, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe57 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 800075a:	2064      	movs	r0, #100	@ 0x64
 800075c:	f7ff fecc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000760:	8b3b      	ldrh	r3, [r7, #24]
 8000762:	115b      	asrs	r3, r3, #5
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe4b 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000772:	2065      	movs	r0, #101	@ 0x65
 8000774:	f7ff fec0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000778:	8b3b      	ldrh	r3, [r7, #24]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe40 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000788:	2090      	movs	r0, #144	@ 0x90
 800078a:	f7ff feb5 	bl	80004f8 <RA8875_write_command>
  if (filled)
 800078e:	7f3b      	ldrb	r3, [r7, #28]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <rectHelper+0x144>
  {
    RA8875_write_data (0xB0);
 8000794:	20b0      	movs	r0, #176	@ 0xb0
 8000796:	f7ff fe37 	bl	8000408 <RA8875_write_data>
    RA8875_write_data (0x90);
  }

  /* Wait for the command to finish */
//  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
}
 800079a:	e002      	b.n	80007a2 <rectHelper+0x14a>
    RA8875_write_data (0x90);
 800079c:	2090      	movs	r0, #144	@ 0x90
 800079e:	f7ff fe33 	bl	8000408 <RA8875_write_data>
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd90      	pop	{r4, r7, pc}

080007aa <triangleHelper>:
/*!
 Helper function for higher level triangle drawing code
 */
/**************************************************************************/
static void triangleHelper (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color, uint8_t filled)
{
 80007aa:	b590      	push	{r4, r7, lr}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4604      	mov	r4, r0
 80007b2:	4608      	mov	r0, r1
 80007b4:	4611      	mov	r1, r2
 80007b6:	461a      	mov	r2, r3
 80007b8:	4623      	mov	r3, r4
 80007ba:	80fb      	strh	r3, [r7, #6]
 80007bc:	4603      	mov	r3, r0
 80007be:	80bb      	strh	r3, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	803b      	strh	r3, [r7, #0]
  x0 = RA8875_apply_rotation_x (x0);
 80007c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff feff 	bl	80005d0 <RA8875_apply_rotation_x>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  y0 = RA8875_apply_rotation_y (y0);
 80007d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff16 	bl	800060c <RA8875_apply_rotation_y>
 80007e0:	4603      	mov	r3, r0
 80007e2:	80bb      	strh	r3, [r7, #4]
  x1 = RA8875_apply_rotation_x (x1);
 80007e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fef1 	bl	80005d0 <RA8875_apply_rotation_x>
 80007ee:	4603      	mov	r3, r0
 80007f0:	807b      	strh	r3, [r7, #2]
  y1 = RA8875_apply_rotation_y (y1);
 80007f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff08 	bl	800060c <RA8875_apply_rotation_y>
 80007fc:	4603      	mov	r3, r0
 80007fe:	803b      	strh	r3, [r7, #0]
  x2 = RA8875_apply_rotation_x (x2);
 8000800:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fee3 	bl	80005d0 <RA8875_apply_rotation_x>
 800080a:	4603      	mov	r3, r0
 800080c:	833b      	strh	r3, [r7, #24]
  y2 = RA8875_apply_rotation_y (y2);
 800080e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fefa 	bl	800060c <RA8875_apply_rotation_y>
 8000818:	4603      	mov	r3, r0
 800081a:	83bb      	strh	r3, [r7, #28]

  /* Set Point 0 */
  RA8875_write_command (0x91);
 800081c:	2091      	movs	r0, #145	@ 0x91
 800081e:	f7ff fe6b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0);
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fdee 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 800082c:	2092      	movs	r0, #146	@ 0x92
 800082e:	f7ff fe63 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x0 >> 8);
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	121b      	asrs	r3, r3, #8
 8000838:	b21b      	sxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fde3 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x93);
 8000842:	2093      	movs	r0, #147	@ 0x93
 8000844:	f7ff fe58 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0);
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fddb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000852:	2094      	movs	r0, #148	@ 0x94
 8000854:	f7ff fe50 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y0 >> 8);
 8000858:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800085c:	121b      	asrs	r3, r3, #8
 800085e:	b21b      	sxth	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fdd0 	bl	8000408 <RA8875_write_data>

  /* Set Point 1 */
  RA8875_write_command (0x95);
 8000868:	2095      	movs	r0, #149	@ 0x95
 800086a:	f7ff fe45 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1);
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fdc8 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000878:	2096      	movs	r0, #150	@ 0x96
 800087a:	f7ff fe3d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x1 >> 8);
 800087e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000882:	121b      	asrs	r3, r3, #8
 8000884:	b21b      	sxth	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fdbd 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x97);
 800088e:	2097      	movs	r0, #151	@ 0x97
 8000890:	f7ff fe32 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1);
 8000894:	883b      	ldrh	r3, [r7, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fdb5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 800089e:	2098      	movs	r0, #152	@ 0x98
 80008a0:	f7ff fe2a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y1 >> 8);
 80008a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008a8:	121b      	asrs	r3, r3, #8
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fdaa 	bl	8000408 <RA8875_write_data>

  /* Set Point 2 */
  RA8875_write_command (0xA9);
 80008b4:	20a9      	movs	r0, #169	@ 0xa9
 80008b6:	f7ff fe1f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2);
 80008ba:	8b3b      	ldrh	r3, [r7, #24]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fda2 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAA);
 80008c4:	20aa      	movs	r0, #170	@ 0xaa
 80008c6:	f7ff fe17 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x2 >> 8);
 80008ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008ce:	121b      	asrs	r3, r3, #8
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fd97 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAB);
 80008da:	20ab      	movs	r0, #171	@ 0xab
 80008dc:	f7ff fe0c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2);
 80008e0:	8bbb      	ldrh	r3, [r7, #28]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fd8f 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xAC);
 80008ea:	20ac      	movs	r0, #172	@ 0xac
 80008ec:	f7ff fe04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y2 >> 8);
 80008f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008f4:	121b      	asrs	r3, r3, #8
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fd84 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000900:	2063      	movs	r0, #99	@ 0x63
 8000902:	f7ff fdf9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000906:	8c3b      	ldrh	r3, [r7, #32]
 8000908:	0adb      	lsrs	r3, r3, #11
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fd7a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f7ff fdef 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 800091a:	8c3b      	ldrh	r3, [r7, #32]
 800091c:	115b      	asrs	r3, r3, #5
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fd6e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 800092c:	2065      	movs	r0, #101	@ 0x65
 800092e:	f7ff fde3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000932:	8c3b      	ldrh	r3, [r7, #32]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 031f 	and.w	r3, r3, #31
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fd63 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_DCR);
 8000942:	2090      	movs	r0, #144	@ 0x90
 8000944:	f7ff fdd8 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <triangleHelper+0x1ae>
  {
    RA8875_write_data (0xA1);
 8000950:	20a1      	movs	r0, #161	@ 0xa1
 8000952:	f7ff fd59 	bl	8000408 <RA8875_write_data>
 8000956:	e002      	b.n	800095e <triangleHelper+0x1b4>
  }
  else
  {
    RA8875_write_data (0x81);
 8000958:	2081      	movs	r0, #129	@ 0x81
 800095a:	f7ff fd55 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	2090      	movs	r0, #144	@ 0x90
 8000962:	f7ff fe1b 	bl	800059c <RA8875_wait_poll>
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}

0800096e <ellipseHelper>:
/*!
 Helper function for higher level ellipse drawing code
 */
/**************************************************************************/
static void ellipseHelper (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color, uint8_t filled)
{
 800096e:	b590      	push	{r4, r7, lr}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4623      	mov	r3, r4
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	4603      	mov	r3, r0
 8000982:	80bb      	strh	r3, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	803b      	strh	r3, [r7, #0]
  xCenter = RA8875_apply_rotation_x (xCenter);
 800098c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe1d 	bl	80005d0 <RA8875_apply_rotation_x>
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
  yCenter = RA8875_apply_rotation_y (yCenter);
 800099a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe34 	bl	800060c <RA8875_apply_rotation_y>
 80009a4:	4603      	mov	r3, r0
 80009a6:	80bb      	strh	r3, [r7, #4]

  /* Set Center Point */
  RA8875_write_command (0xA5);
 80009a8:	20a5      	movs	r0, #165	@ 0xa5
 80009aa:	f7ff fda5 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd28 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA6);
 80009b8:	20a6      	movs	r0, #166	@ 0xa6
 80009ba:	f7ff fd9d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (xCenter >> 8);
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	121b      	asrs	r3, r3, #8
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd1d 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA7);
 80009ce:	20a7      	movs	r0, #167	@ 0xa7
 80009d0:	f7ff fd92 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter);
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd15 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA8);
 80009de:	20a8      	movs	r0, #168	@ 0xa8
 80009e0:	f7ff fd8a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (yCenter >> 8);
 80009e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009e8:	121b      	asrs	r3, r3, #8
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fd0a 	bl	8000408 <RA8875_write_data>

  /* Set Long and Short Axis */
  RA8875_write_command (0xA1);
 80009f4:	20a1      	movs	r0, #161	@ 0xa1
 80009f6:	f7ff fd7f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis);
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd02 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000a04:	20a2      	movs	r0, #162	@ 0xa2
 8000a06:	f7ff fd77 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (longAxis >> 8);
 8000a0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a0e:	121b      	asrs	r3, r3, #8
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fcf7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA3);
 8000a1a:	20a3      	movs	r0, #163	@ 0xa3
 8000a1c:	f7ff fd6c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis);
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fcef 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000a2a:	20a4      	movs	r0, #164	@ 0xa4
 8000a2c:	f7ff fd64 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (shortAxis >> 8);
 8000a30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fce4 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000a40:	2063      	movs	r0, #99	@ 0x63
 8000a42:	f7ff fd59 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000a46:	8b3b      	ldrh	r3, [r7, #24]
 8000a48:	0adb      	lsrs	r3, r3, #11
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fcda 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000a54:	2064      	movs	r0, #100	@ 0x64
 8000a56:	f7ff fd4f 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000a5a:	8b3b      	ldrh	r3, [r7, #24]
 8000a5c:	115b      	asrs	r3, r3, #5
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fcce 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000a6c:	2065      	movs	r0, #101	@ 0x65
 8000a6e:	f7ff fd43 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fcc3 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (0xA0);
 8000a82:	20a0      	movs	r0, #160	@ 0xa0
 8000a84:	f7ff fd38 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000a88:	7f3b      	ldrb	r3, [r7, #28]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <ellipseHelper+0x128>
  {
    RA8875_write_data (0xC0);
 8000a8e:	20c0      	movs	r0, #192	@ 0xc0
 8000a90:	f7ff fcba 	bl	8000408 <RA8875_write_data>
 8000a94:	e002      	b.n	8000a9c <ellipseHelper+0x12e>
  }
  else
  {
    RA8875_write_data (0x80);
 8000a96:	2080      	movs	r0, #128	@ 0x80
 8000a98:	f7ff fcb6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	20a0      	movs	r0, #160	@ 0xa0
 8000aa0:	f7ff fd7c 	bl	800059c <RA8875_wait_poll>
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}

08000aac <roundRectHelper>:
/*!
 Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
static void roundRectHelper (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color, uint8_t filled)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4623      	mov	r3, r4
 8000abc:	80fb      	strh	r3, [r7, #6]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80bb      	strh	r3, [r7, #4]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	807b      	strh	r3, [r7, #2]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	803b      	strh	r3, [r7, #0]
  x = RA8875_apply_rotation_x (x);
 8000aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fd7e 	bl	80005d0 <RA8875_apply_rotation_x>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000ad8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd95 	bl	800060c <RA8875_apply_rotation_y>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80bb      	strh	r3, [r7, #4]
  w = RA8875_apply_rotation_x (w);
 8000ae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd70 	bl	80005d0 <RA8875_apply_rotation_x>
 8000af0:	4603      	mov	r3, r0
 8000af2:	807b      	strh	r3, [r7, #2]
  h = RA8875_apply_rotation_y (h);
 8000af4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd87 	bl	800060c <RA8875_apply_rotation_y>
 8000afe:	4603      	mov	r3, r0
 8000b00:	803b      	strh	r3, [r7, #0]
  if (x > w) swap (&x, &w);
 8000b02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dd05      	ble.n	8000b1a <roundRectHelper+0x6e>
 8000b0e:	1cba      	adds	r2, r7, #2
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc3b 	bl	8000390 <swap>
  if (y > h) swap (&y, &h);
 8000b1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dd05      	ble.n	8000b32 <roundRectHelper+0x86>
 8000b26:	463a      	mov	r2, r7
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fc2f 	bl	8000390 <swap>

  /* Set X */
  RA8875_write_command (0x91);
 8000b32:	2091      	movs	r0, #145	@ 0x91
 8000b34:	f7ff fce0 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x);
 8000b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fc62 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x92);
 8000b44:	2092      	movs	r0, #146	@ 0x92
 8000b46:	f7ff fcd7 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4e:	121b      	asrs	r3, r3, #8
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fc57 	bl	8000408 <RA8875_write_data>

  /* Set Y */
  RA8875_write_command (0x93);
 8000b5a:	2093      	movs	r0, #147	@ 0x93
 8000b5c:	f7ff fccc 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y);
 8000b60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc4e 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x94);
 8000b6c:	2094      	movs	r0, #148	@ 0x94
 8000b6e:	f7ff fcc3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b76:	121b      	asrs	r3, r3, #8
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc43 	bl	8000408 <RA8875_write_data>

  /* Set X1 */
  RA8875_write_command (0x95);
 8000b82:	2095      	movs	r0, #149	@ 0x95
 8000b84:	f7ff fcb8 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (w);
 8000b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fc3a 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x96);
 8000b94:	2096      	movs	r0, #150	@ 0x96
 8000b96:	f7ff fcaf 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((w) >> 8);
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	121b      	asrs	r3, r3, #8
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc2f 	bl	8000408 <RA8875_write_data>

  /* Set Y1 */
  RA8875_write_command (0x97);
 8000baa:	2097      	movs	r0, #151	@ 0x97
 8000bac:	f7ff fca4 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (h);
 8000bb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc26 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x98);
 8000bbc:	2098      	movs	r0, #152	@ 0x98
 8000bbe:	f7ff fc9b 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((h) >> 8);
 8000bc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc6:	121b      	asrs	r3, r3, #8
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc1b 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA1);
 8000bd2:	20a1      	movs	r0, #161	@ 0xa1
 8000bd4:	f7ff fc90 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bd8:	8b3b      	ldrh	r3, [r7, #24]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fc13 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA2);
 8000be2:	20a2      	movs	r0, #162	@ 0xa2
 8000be4:	f7ff fc88 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000be8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000bec:	121b      	asrs	r3, r3, #8
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fc08 	bl	8000408 <RA8875_write_data>

  RA8875_write_command (0xA3);
 8000bf8:	20a3      	movs	r0, #163	@ 0xa3
 8000bfa:	f7ff fc7d 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (r);
 8000bfe:	8b3b      	ldrh	r3, [r7, #24]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc00 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0xA4);
 8000c08:	20a4      	movs	r0, #164	@ 0xa4
 8000c0a:	f7ff fc75 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((r) >> 8);
 8000c0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c12:	121b      	asrs	r3, r3, #8
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbf5 	bl	8000408 <RA8875_write_data>

  /* Set Color */
  RA8875_write_command (0x63);
 8000c1e:	2063      	movs	r0, #99	@ 0x63
 8000c20:	f7ff fc6a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0xf800) >> 11);
 8000c24:	8bbb      	ldrh	r3, [r7, #28]
 8000c26:	0adb      	lsrs	r3, r3, #11
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fbeb 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000c32:	2064      	movs	r0, #100	@ 0x64
 8000c34:	f7ff fc60 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x07e0) >> 5);
 8000c38:	8bbb      	ldrh	r3, [r7, #28]
 8000c3a:	115b      	asrs	r3, r3, #5
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbdf 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000c4a:	2065      	movs	r0, #101	@ 0x65
 8000c4c:	f7ff fc54 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((color & 0x001f));
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 031f 	and.w	r3, r3, #31
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fbd4 	bl	8000408 <RA8875_write_data>

  /* Draw! */
  RA8875_write_command (RA8875_ELLIPSE);
 8000c60:	20a0      	movs	r0, #160	@ 0xa0
 8000c62:	f7ff fc49 	bl	80004f8 <RA8875_write_command>
  if (filled)
 8000c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <roundRectHelper+0x1ca>
  {
    RA8875_write_data (0xE0);
 8000c6e:	20e0      	movs	r0, #224	@ 0xe0
 8000c70:	f7ff fbca 	bl	8000408 <RA8875_write_data>
 8000c74:	e002      	b.n	8000c7c <roundRectHelper+0x1d0>
  }
  else
  {
    RA8875_write_data (0xA0);
 8000c76:	20a0      	movs	r0, #160	@ 0xa0
 8000c78:	f7ff fbc6 	bl	8000408 <RA8875_write_data>
  }

  /* Wait for the command to finish */
  RA8875_wait_poll (RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	20a0      	movs	r0, #160	@ 0xa0
 8000c80:	f7ff fc8c 	bl	800059c <RA8875_wait_poll>
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}

08000c8c <RA8875_draw_fill_rect>:
 @param h     The rectangle height
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_rect (int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	807b      	strh	r3, [r7, #2]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
  rectHelper (x, y, x + w - 1, y + h - 1, color, 1);
 8000caa:	88fa      	ldrh	r2, [r7, #6]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b21c      	sxth	r4, r3
 8000cb8:	88ba      	ldrh	r2, [r7, #4]
 8000cba:	883b      	ldrh	r3, [r7, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000cca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	8b3b      	ldrh	r3, [r7, #24]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	4622      	mov	r2, r4
 8000cda:	f7ff fcbd 	bl	8000658 <rectHelper>
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
	...

08000ce8 <RA8875_fill_screen>:
 Fills the screen with the spefied RGB565 color
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_fill_screen (uint16_t color)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
  rectHelper (0, 0, _width - 1, _height - 1, color, 1);
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <RA8875_fill_screen+0x38>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <RA8875_fill_screen+0x3c>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b219      	sxth	r1, r3
 8000d06:	2301      	movs	r3, #1
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fca0 	bl	8000658 <rectHelper>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000098 	.word	0x24000098
 8000d24:	2400009a 	.word	0x2400009a

08000d28 <RA8875_draw_fill_triangle>:
 @param y2    The 0-based y location of point 2 on the triangle
 @param color The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_triangle (int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4608      	mov	r0, r1
 8000d32:	4611      	mov	r1, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	4623      	mov	r3, r4
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	807b      	strh	r3, [r7, #2]
 8000d42:	4613      	mov	r3, r2
 8000d44:	803b      	strh	r3, [r7, #0]
  triangleHelper (x0, y0, x1, y1, x2, y2, color, 1);
 8000d46:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d56:	2301      	movs	r3, #1
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	8c3b      	ldrh	r3, [r7, #32]
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	f7ff fd1d 	bl	80007aa <triangleHelper>
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}

08000d78 <RA8875_draw_fill_ellipse>:
 @param shortAxis The size in pixels of the ellipse's short axis
 @param color     The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_ellipse (int16_t xCenter, int16_t yCenter, int16_t longAxis, int16_t shortAxis, uint16_t color)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	807b      	strh	r3, [r7, #2]
 8000d92:	4613      	mov	r3, r2
 8000d94:	803b      	strh	r3, [r7, #0]
  ellipseHelper (xCenter, yCenter, longAxis, shortAxis, color, 1);
 8000d96:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d9e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000da2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000da6:	2301      	movs	r3, #1
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	8b3b      	ldrh	r3, [r7, #24]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4623      	mov	r3, r4
 8000db0:	f7ff fddd 	bl	800096e <ellipseHelper>
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <RA8875_draw_fill_round_rect>:
 @param r   The radius of the curves in the corners of the rectangle
 @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void RA8875_draw_fill_round_rect (int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af04      	add	r7, sp, #16
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
  roundRectHelper (x, y, x + w, y + h, r, color, 1);
 8000dda:	88fa      	ldrh	r2, [r7, #6]
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	4413      	add	r3, r2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b21c      	sxth	r4, r3
 8000de4:	88ba      	ldrh	r2, [r7, #4]
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	8bbb      	ldrh	r3, [r7, #28]
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	4622      	mov	r2, r4
 8000e08:	f7ff fe50 	bl	8000aac <roundRectHelper>
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}

08000e14 <RA8875_text_mode>:
/*!
 Sets the display in text mode (as opposed to graphics mode)
 */
/**************************************************************************/
void RA8875_text_mode (void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* Set text mode */
  RA8875_write_command (RA8875_MWCR0);
 8000e1a:	2040      	movs	r0, #64	@ 0x40
 8000e1c:	f7ff fb6c 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000e20:	f7ff fb2e 	bl	8000480 <RA8875_read_data>
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  temp |= RA8875_MWCR0_TXTMODE; // Set bit 7
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e2e:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fae8 	bl	8000408 <RA8875_write_data>

  /* Select the internal (ROM) font */
  RA8875_write_command (0x21);
 8000e38:	2021      	movs	r0, #33	@ 0x21
 8000e3a:	f7ff fb5d 	bl	80004f8 <RA8875_write_command>
  temp = RA8875_read_data ();
 8000e3e:	f7ff fb1f 	bl	8000480 <RA8875_read_data>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  temp &= ~((1 << 7) | (1 << 5)); // Clear bits 7 and 5
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8000e4c:	71fb      	strb	r3, [r7, #7]
  RA8875_write_data (temp);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fad9 	bl	8000408 <RA8875_write_data>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <RA8875_text_cursor_position>:
 @param x The x position of the cursor (in pixels, 0..1023)
 @param y The y position of the cursor (in pixels, 0..511)
 */
/**************************************************************************/
void RA8875_text_cursor_position (uint16_t x, uint16_t y)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	460a      	mov	r2, r1
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80bb      	strh	r3, [r7, #4]
  x = RA8875_apply_rotation_x (x);
 8000e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fbac 	bl	80005d0 <RA8875_apply_rotation_x>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	80fb      	strh	r3, [r7, #6]
  y = RA8875_apply_rotation_y (y);
 8000e7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fbc3 	bl	800060c <RA8875_apply_rotation_y>
 8000e86:	4603      	mov	r3, r0
 8000e88:	80bb      	strh	r3, [r7, #4]

  /* Set cursor location */
  RA8875_write_command (0x2A);
 8000e8a:	202a      	movs	r0, #42	@ 0x2a
 8000e8c:	f7ff fb34 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x & 0xFF);
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fab7 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2B);
 8000e9a:	202b      	movs	r0, #43	@ 0x2b
 8000e9c:	f7ff fb2c 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (x >> 8);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff faad 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2C);
 8000eae:	202c      	movs	r0, #44	@ 0x2c
 8000eb0:	f7ff fb22 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y & 0xFF);
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff faa5 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x2D);
 8000ebe:	202d      	movs	r0, #45	@ 0x2d
 8000ec0:	f7ff fb1a 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data (y >> 8);
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa9b 	bl	8000408 <RA8875_write_data>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <RA8875_text_color>:
 @param foreColor The RGB565 color to use when rendering the text
 @param bgColor   The RGB565 colot to use for the background
 */
/**************************************************************************/
void RA8875_text_color (uint16_t foreColor, uint16_t bgColor)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	80bb      	strh	r3, [r7, #4]
  /* Set Fore Color */
  RA8875_write_command (0x63);
 8000eea:	2063      	movs	r0, #99	@ 0x63
 8000eec:	f7ff fb04 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0xf800) >> 11);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	0adb      	lsrs	r3, r3, #11
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fa85 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x64);
 8000efe:	2064      	movs	r0, #100	@ 0x64
 8000f00:	f7ff fafa 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x07e0) >> 5);
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	115b      	asrs	r3, r3, #5
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa79 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x65);
 8000f16:	2065      	movs	r0, #101	@ 0x65
 8000f18:	f7ff faee 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((foreColor & 0x001f));
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa6e 	bl	8000408 <RA8875_write_data>

  /* Set Background Color */
  RA8875_write_command (0x60);
 8000f2c:	2060      	movs	r0, #96	@ 0x60
 8000f2e:	f7ff fae3 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0xf800) >> 11);
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	0adb      	lsrs	r3, r3, #11
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa64 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x61);
 8000f40:	2061      	movs	r0, #97	@ 0x61
 8000f42:	f7ff fad9 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x07e0) >> 5);
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	115b      	asrs	r3, r3, #5
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa58 	bl	8000408 <RA8875_write_data>
  RA8875_write_command (0x62);
 8000f58:	2062      	movs	r0, #98	@ 0x62
 8000f5a:	f7ff facd 	bl	80004f8 <RA8875_write_command>
  RA8875_write_data ((bgColor & 0x001f));
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa4d 	bl	8000408 <RA8875_write_data>

  /* Clear transparency flag */
  RA8875_write_command (0x22);
 8000f6e:	2022      	movs	r0, #34	@ 0x22
 8000f70:	f7ff fac2 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000f74:	f7ff fa84 	bl	8000480 <RA8875_read_data>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
  temp &= ~(1 << 6); // Clear bit 6
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f82:	73fb      	strb	r3, [r7, #15]
  RA8875_write_data (temp);
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa3e 	bl	8000408 <RA8875_write_data>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <RA8875_text_scale>:
 3 = 4x zoom
 @param scale   The zoom factor (0..3 for 1-4x zoom)
 */
/**************************************************************************/
void RA8875_text_scale (uint8_t scale)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if (scale > 3) scale = 3; // highest setting is 3
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d901      	bls.n	8000fa8 <RA8875_text_scale+0x14>
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	71fb      	strb	r3, [r7, #7]

  /* Set font size flags */
  RA8875_write_command (0x22);
 8000fa8:	2022      	movs	r0, #34	@ 0x22
 8000faa:	f7ff faa5 	bl	80004f8 <RA8875_write_command>
  uint8_t temp = RA8875_read_data ();
 8000fae:	f7ff fa67 	bl	8000480 <RA8875_read_data>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  temp &= ~(0xF); // Clears bits 0..3
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f023 030f 	bic.w	r3, r3, #15
 8000fbc:	73fb      	strb	r3, [r7, #15]
  temp = scale << 2;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	73fb      	strb	r3, [r7, #15]
  temp |= scale;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]

  RA8875_write_data (temp);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa1a 	bl	8000408 <RA8875_write_data>

  _textScale = scale;
 8000fd4:	4a03      	ldr	r2, [pc, #12]	@ (8000fe4 <RA8875_text_scale+0x50>)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	7013      	strb	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2400009c 	.word	0x2400009c

08000fe8 <RA8875_text_write>:
 @param buffer    The buffer containing the characters to render
 @param len       The size of the buffer in bytes
 */
/**************************************************************************/
void RA8875_text_write (const char *buffer, uint16_t len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
  if (len == 0) len = strlen (buffer);
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d104      	bne.n	8001004 <RA8875_text_write+0x1c>
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f970 	bl	80002e0 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	807b      	strh	r3, [r7, #2]
  RA8875_write_command (RA8875_MRWC);
 8001004:	2002      	movs	r0, #2
 8001006:	f7ff fa77 	bl	80004f8 <RA8875_write_command>
  for (uint16_t i = 0; i < len; i++)
 800100a:	2300      	movs	r3, #0
 800100c:	81fb      	strh	r3, [r7, #14]
 800100e:	e010      	b.n	8001032 <RA8875_text_write+0x4a>
  {
    RA8875_write_data (buffer[i]);
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f9f5 	bl	8000408 <RA8875_write_data>
    if (_textScale > 0) HAL_Delay (1);
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <RA8875_text_write+0x5c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <RA8875_text_write+0x44>
 8001026:	2001      	movs	r0, #1
 8001028:	f002 fbcc 	bl	80037c4 <HAL_Delay>
  for (uint16_t i = 0; i < len; i++)
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	3301      	adds	r3, #1
 8001030:	81fb      	strh	r3, [r7, #14]
 8001032:	89fa      	ldrh	r2, [r7, #14]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3ea      	bcc.n	8001010 <RA8875_text_write+0x28>
  }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2400009c 	.word	0x2400009c

08001048 <get_rand_num>:

typedef struct{
    float dims[200];
} Dict_Vector;

int get_rand_num(void){
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	while(1){
		if(RNG->SR & RNG_SR_DRDY ){
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <get_rand_num+0x20>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f9      	beq.n	800104c <get_rand_num+0x4>
			return RNG->DR;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <get_rand_num+0x20>)
 800105a:	689b      	ldr	r3, [r3, #8]
		}
	}
	return 0;

}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	48021800 	.word	0x48021800

0800106c <pick_index>:

unsigned short pick_index(float * arr, unsigned short len, unsigned short highest){
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	803b      	strh	r3, [r7, #0]
    //Find the index of the highest/lowest float in an array
    float val = arr[0];
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
    unsigned short ret_idx = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	817b      	strh	r3, [r7, #10]
    for(unsigned short idx = 1; idx < len; idx += 1){
 8001086:	2301      	movs	r3, #1
 8001088:	813b      	strh	r3, [r7, #8]
 800108a:	e030      	b.n	80010ee <pick_index+0x82>
        if(highest){
 800108c:	883b      	ldrh	r3, [r7, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d015      	beq.n	80010be <pick_index+0x52>
            if(arr[idx] > val){
 8001092:	893b      	ldrh	r3, [r7, #8]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ed97 7a03 	vldr	s14, [r7, #12]
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d51d      	bpl.n	80010e8 <pick_index+0x7c>
                val = arr[idx];
 80010ac:	893b      	ldrh	r3, [r7, #8]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60fb      	str	r3, [r7, #12]
                ret_idx = idx;
 80010b8:	893b      	ldrh	r3, [r7, #8]
 80010ba:	817b      	strh	r3, [r7, #10]
 80010bc:	e014      	b.n	80010e8 <pick_index+0x7c>
            }
        }
        else{
            if(arr[idx] < val){
 80010be:	893b      	ldrh	r3, [r7, #8]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd07      	ble.n	80010e8 <pick_index+0x7c>
                val = arr[idx];
 80010d8:	893b      	ldrh	r3, [r7, #8]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	60fb      	str	r3, [r7, #12]
                ret_idx = idx;
 80010e4:	893b      	ldrh	r3, [r7, #8]
 80010e6:	817b      	strh	r3, [r7, #10]
    for(unsigned short idx = 1; idx < len; idx += 1){
 80010e8:	893b      	ldrh	r3, [r7, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	813b      	strh	r3, [r7, #8]
 80010ee:	893a      	ldrh	r2, [r7, #8]
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ca      	bcc.n	800108c <pick_index+0x20>
            }
        }
        //printf("Idx: %d Score: %f, Highest:%f\n", idx, arr[idx], val);
    }
    return ret_idx;
 80010f6:	897b      	ldrh	r3, [r7, #10]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <is_subset>:

unsigned short is_subset(char * w1, char * w2){
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	//LUXURY MODIFICATION: MAKE SURE 5 OF SAME LETTER IN A ROW -> INVALID CLUE
    //Compute if W1 is a subset of W2 
    //Or the reverse is true
    unsigned short l1 = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	82fb      	strh	r3, [r7, #22]
    unsigned short l2 = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	82bb      	strh	r3, [r7, #20]
    while(w1[l1++] != '\0');
 8001116:	bf00      	nop
 8001118:	8afb      	ldrh	r3, [r7, #22]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	82fa      	strh	r2, [r7, #22]
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f6      	bne.n	8001118 <is_subset+0x14>
    while(w2[l2++] != '\0');
 800112a:	bf00      	nop
 800112c:	8abb      	ldrh	r3, [r7, #20]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	82ba      	strh	r2, [r7, #20]
 8001132:	461a      	mov	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f6      	bne.n	800112c <is_subset+0x28>
    l1 -= 1;
 800113e:	8afb      	ldrh	r3, [r7, #22]
 8001140:	3b01      	subs	r3, #1
 8001142:	82fb      	strh	r3, [r7, #22]
    l2 -= 1;
 8001144:	8abb      	ldrh	r3, [r7, #20]
 8001146:	3b01      	subs	r3, #1
 8001148:	82bb      	strh	r3, [r7, #20]
    unsigned short dist = (l1 > l2)?l1-l2:l2-l1;
 800114a:	8afa      	ldrh	r2, [r7, #22]
 800114c:	8abb      	ldrh	r3, [r7, #20]
 800114e:	429a      	cmp	r2, r3
 8001150:	d904      	bls.n	800115c <is_subset+0x58>
 8001152:	8afa      	ldrh	r2, [r7, #22]
 8001154:	8abb      	ldrh	r3, [r7, #20]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	e003      	b.n	8001164 <is_subset+0x60>
 800115c:	8aba      	ldrh	r2, [r7, #20]
 800115e:	8afb      	ldrh	r3, [r7, #22]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	b29b      	uxth	r3, r3
 8001164:	817b      	strh	r3, [r7, #10]
    for(unsigned short idx = 0; idx <= dist; idx += 1){
 8001166:	2300      	movs	r3, #0
 8001168:	827b      	strh	r3, [r7, #18]
 800116a:	e042      	b.n	80011f2 <is_subset+0xee>
        unsigned short same = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	823b      	strh	r3, [r7, #16]
        if(l1>l2){
 8001170:	8afa      	ldrh	r2, [r7, #22]
 8001172:	8abb      	ldrh	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	d91a      	bls.n	80011ae <is_subset+0xaa>
            for(unsigned short jdx = 0; jdx < l2; jdx += 1){
 8001178:	2300      	movs	r3, #0
 800117a:	81fb      	strh	r3, [r7, #14]
 800117c:	e012      	b.n	80011a4 <is_subset+0xa0>
                if(w2[jdx] != w1[jdx + idx]){
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	89f9      	ldrh	r1, [r7, #14]
 8001188:	8a7b      	ldrh	r3, [r7, #18]
 800118a:	440b      	add	r3, r1
 800118c:	4619      	mov	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	440b      	add	r3, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d002      	beq.n	800119e <is_subset+0x9a>
                    same = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	823b      	strh	r3, [r7, #16]
                    break;
 800119c:	e021      	b.n	80011e2 <is_subset+0xde>
            for(unsigned short jdx = 0; jdx < l2; jdx += 1){
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	3301      	adds	r3, #1
 80011a2:	81fb      	strh	r3, [r7, #14]
 80011a4:	89fa      	ldrh	r2, [r7, #14]
 80011a6:	8abb      	ldrh	r3, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3e8      	bcc.n	800117e <is_subset+0x7a>
 80011ac:	e019      	b.n	80011e2 <is_subset+0xde>
                }
            }
        }
        else{
            for(unsigned short jdx = 0; jdx < l1; jdx += 1){
 80011ae:	2300      	movs	r3, #0
 80011b0:	81bb      	strh	r3, [r7, #12]
 80011b2:	e012      	b.n	80011da <is_subset+0xd6>
                //printf("%c%c ", w1[jdx], w2[jdx]);
                if(w1[jdx] != w2[jdx + idx]){
 80011b4:	89bb      	ldrh	r3, [r7, #12]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	89b9      	ldrh	r1, [r7, #12]
 80011be:	8a7b      	ldrh	r3, [r7, #18]
 80011c0:	440b      	add	r3, r1
 80011c2:	4619      	mov	r1, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	440b      	add	r3, r1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d002      	beq.n	80011d4 <is_subset+0xd0>
                    same = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	823b      	strh	r3, [r7, #16]
                    break;
 80011d2:	e006      	b.n	80011e2 <is_subset+0xde>
            for(unsigned short jdx = 0; jdx < l1; jdx += 1){
 80011d4:	89bb      	ldrh	r3, [r7, #12]
 80011d6:	3301      	adds	r3, #1
 80011d8:	81bb      	strh	r3, [r7, #12]
 80011da:	89ba      	ldrh	r2, [r7, #12]
 80011dc:	8afb      	ldrh	r3, [r7, #22]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3e8      	bcc.n	80011b4 <is_subset+0xb0>
                }
            }
        }
        if(same){
 80011e2:	8a3b      	ldrh	r3, [r7, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <is_subset+0xe8>
            return 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e007      	b.n	80011fc <is_subset+0xf8>
    for(unsigned short idx = 0; idx <= dist; idx += 1){
 80011ec:	8a7b      	ldrh	r3, [r7, #18]
 80011ee:	3301      	adds	r3, #1
 80011f0:	827b      	strh	r3, [r7, #18]
 80011f2:	8a7a      	ldrh	r2, [r7, #18]
 80011f4:	897b      	ldrh	r3, [r7, #10]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d9b8      	bls.n	800116c <is_subset+0x68>
        }
    }
    return 0;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <shuffle>:

void shuffle(unsigned short * board_idx){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    for(unsigned short idx = 0; idx < 2; idx += 1){
 8001210:	2300      	movs	r3, #0
 8001212:	81fb      	strh	r3, [r7, #14]
 8001214:	e030      	b.n	8001278 <shuffle+0x70>
        for(unsigned short jdx = 0; jdx < 250; jdx += 1){
 8001216:	2300      	movs	r3, #0
 8001218:	81bb      	strh	r3, [r7, #12]
 800121a:	e027      	b.n	800126c <shuffle+0x64>
        	//USE TRUE_RNG HERE
            unsigned short rnd = (unsigned short)(get_rand_num() % 250);
 800121c:	f7ff ff14 	bl	8001048 <get_rand_num>
 8001220:	4603      	mov	r3, r0
 8001222:	4a19      	ldr	r2, [pc, #100]	@ (8001288 <shuffle+0x80>)
 8001224:	fb82 1203 	smull	r1, r2, r2, r3
 8001228:	1111      	asrs	r1, r2, #4
 800122a:	17da      	asrs	r2, r3, #31
 800122c:	1a8a      	subs	r2, r1, r2
 800122e:	21fa      	movs	r1, #250	@ 0xfa
 8001230:	fb01 f202 	mul.w	r2, r1, r2
 8001234:	1a9a      	subs	r2, r3, r2
 8001236:	4613      	mov	r3, r2
 8001238:	817b      	strh	r3, [r7, #10]
            unsigned short tmp = board_idx[rnd];
 800123a:	897b      	ldrh	r3, [r7, #10]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	813b      	strh	r3, [r7, #8]
            board_idx[rnd] = board_idx[jdx];
 8001246:	89bb      	ldrh	r3, [r7, #12]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	441a      	add	r2, r3
 800124e:	897b      	ldrh	r3, [r7, #10]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	440b      	add	r3, r1
 8001256:	8812      	ldrh	r2, [r2, #0]
 8001258:	801a      	strh	r2, [r3, #0]
            board_idx[jdx] = tmp;
 800125a:	89bb      	ldrh	r3, [r7, #12]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	893a      	ldrh	r2, [r7, #8]
 8001264:	801a      	strh	r2, [r3, #0]
        for(unsigned short jdx = 0; jdx < 250; jdx += 1){
 8001266:	89bb      	ldrh	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	81bb      	strh	r3, [r7, #12]
 800126c:	89bb      	ldrh	r3, [r7, #12]
 800126e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001270:	d9d4      	bls.n	800121c <shuffle+0x14>
    for(unsigned short idx = 0; idx < 2; idx += 1){
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	3301      	adds	r3, #1
 8001276:	81fb      	strh	r3, [r7, #14]
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d9cb      	bls.n	8001216 <shuffle+0xe>
        }
    }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	10624dd3 	.word	0x10624dd3

0800128c <cosine_similarity>:

float cosine_similarity(float * v1 , float *v2 , unsigned short len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	ed2d 8b04 	vpush	{d8-d9}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	4613      	mov	r3, r2
 800129c:	80fb      	strh	r3, [r7, #6]
    float dot = 0.0, denom_a = 0.0, denom_b = 0.0 ;
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
     for(unsigned short idx = 0; idx < len; idx +=1) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	827b      	strh	r3, [r7, #18]
 80012b4:	e03e      	b.n	8001334 <cosine_similarity+0xa8>
        dot += v1[idx] * v2[idx] ;
 80012b6:	8a7b      	ldrh	r3, [r7, #18]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	ed93 7a00 	vldr	s14, [r3]
 80012c2:	8a7b      	ldrh	r3, [r7, #18]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	4413      	add	r3, r2
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80012d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012da:	edc7 7a07 	vstr	s15, [r7, #28]
        denom_a += v1[idx] * v1[idx] ;
 80012de:	8a7b      	ldrh	r3, [r7, #18]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	ed93 7a00 	vldr	s14, [r3]
 80012ea:	8a7b      	ldrh	r3, [r7, #18]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80012fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001302:	edc7 7a06 	vstr	s15, [r7, #24]
        denom_b += v2[idx] * v2[idx] ;
 8001306:	8a7b      	ldrh	r3, [r7, #18]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	4413      	add	r3, r2
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	8a7b      	ldrh	r3, [r7, #18]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	4413      	add	r3, r2
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	ed97 7a05 	vldr	s14, [r7, #20]
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	edc7 7a05 	vstr	s15, [r7, #20]
     for(unsigned short idx = 0; idx < len; idx +=1) {
 800132e:	8a7b      	ldrh	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	827b      	strh	r3, [r7, #18]
 8001334:	8a7a      	ldrh	r2, [r7, #18]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3bc      	bcc.n	80012b6 <cosine_similarity+0x2a>
    }
    return dot / (sqrt(denom_a) * sqrt(denom_b)) ;
 800133c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001340:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001344:	edd7 7a06 	vldr	s15, [r7, #24]
 8001348:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134c:	eeb0 0b47 	vmov.f64	d0, d7
 8001350:	f00e fa82 	bl	800f858 <sqrt>
 8001354:	eeb0 9b40 	vmov.f64	d9, d0
 8001358:	edd7 7a05 	vldr	s15, [r7, #20]
 800135c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001360:	eeb0 0b47 	vmov.f64	d0, d7
 8001364:	f00e fa78 	bl	800f858 <sqrt>
 8001368:	eeb0 7b40 	vmov.f64	d7, d0
 800136c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001370:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001374:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	ecbd 8b04 	vpop	{d8-d9}
 8001384:	bd80      	pop	{r7, pc}

08001386 <glove_similarity>:
        return 0;
    }
    return (is_subset(w1, w2) == 1);
}

float glove_similarity(Glove_Vector glove1, Glove_Vector glove2){
 8001386:	b084      	sub	sp, #16
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
 800138c:	f107 0c08 	add.w	ip, r7, #8
 8001390:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return cosine_similarity(glove1.dims, glove2.dims, 300);
 8001394:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001398:	f103 011c 	add.w	r1, r3, #28
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff71 	bl	800128c <cosine_similarity>
 80013aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	46bd      	mov	sp, r7
 80013b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013b8:	b004      	add	sp, #16
 80013ba:	4770      	bx	lr

080013bc <dict_similarity>:

float dict_similarity(Dict_Vector dict1, Dict_Vector dict2){  
 80013bc:	b084      	sub	sp, #16
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	f107 0c08 	add.w	ip, r7, #8
 80013c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return cosine_similarity(dict1.dims, dict2.dims, 200);
 80013ca:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80013ce:	22c8      	movs	r2, #200	@ 0xc8
 80013d0:	4619      	mov	r1, r3
 80013d2:	f107 0008 	add.w	r0, r7, #8
 80013d6:	f7ff ff59 	bl	800128c <cosine_similarity>
 80013da:	eef0 7a40 	vmov.f32	s15, s0
}
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	46bd      	mov	sp, r7
 80013e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e8:	b004      	add	sp, #16
 80013ea:	4770      	bx	lr

080013ec <vector_score>:

float vector_score(Glove_Vector glove1, Dict_Vector dict1, Glove_Vector glove2, Dict_Vector dict2){
 80013ec:	b084      	sub	sp, #16
 80013ee:	b580      	push	{r7, lr}
 80013f0:	ed2d 8b02 	vpush	{d8}
 80013f4:	f6ad 1d88 	subw	sp, sp, #2440	@ 0x988
 80013f8:	f640 1788 	movw	r7, #2440	@ 0x988
 80013fc:	446f      	add	r7, sp
 80013fe:	f107 0c10 	add.w	ip, r7, #16
 8001402:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return glove_similarity(glove1, glove2) + dict_similarity(dict1, dict2);
 8001406:	f20d 40bc 	addw	r0, sp, #1212	@ 0x4bc
 800140a:	f207 73fc 	addw	r3, r7, #2044	@ 0x7fc
 800140e:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001412:	4619      	mov	r1, r3
 8001414:	f00d fe92 	bl	800f13c <memcpy>
 8001418:	4668      	mov	r0, sp
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001422:	4619      	mov	r1, r3
 8001424:	f00d fe8a 	bl	800f13c <memcpy>
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142e:	f7ff ffaa 	bl	8001386 <glove_similarity>
 8001432:	eeb0 8a40 	vmov.f32	s16, s0
 8001436:	a8c4      	add	r0, sp, #784	@ 0x310
 8001438:	f607 43c8 	addw	r3, r7, #3272	@ 0xcc8
 800143c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001440:	4619      	mov	r1, r3
 8001442:	f00d fe7b 	bl	800f13c <memcpy>
 8001446:	4668      	mov	r0, sp
 8001448:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800144c:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001450:	4619      	mov	r1, r3
 8001452:	f00d fe73 	bl	800f13c <memcpy>
 8001456:	f207 43dc 	addw	r3, r7, #1244	@ 0x4dc
 800145a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800145c:	f7ff ffae 	bl	80013bc <dict_similarity>
 8001460:	eef0 7a40 	vmov.f32	s15, s0
 8001464:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	46bd      	mov	sp, r7
 800146e:	ecbd 8b02 	vpop	{d8}
 8001472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001476:	b004      	add	sp, #16
 8001478:	4770      	bx	lr

0800147a <gen_board>:

void gen_board(unsigned short * board_idx, Glove_Vector ** board_glove, Dict_Vector ** board_dict, int num_rounds){
 800147a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800147e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8001482:	f640 77c8 	movw	r7, #4040	@ 0xfc8
 8001486:	446f      	add	r7, sp
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	603b      	str	r3, [r7, #0]
    //Take all possible board words, randomly select 16 to be board words
    //The first two are the targets
    shuffle(board_idx);
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff feb9 	bl	8001208 <shuffle>
//    printf("C1\n");

	//GATHER ALL BOARD VECTOR MATERIALS
    for(unsigned short gather_idx = 0; gather_idx < 16 * num_rounds; gather_idx += 1){
 8001496:	2300      	movs	r3, #0
 8001498:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800149c:	e087      	b.n	80015ae <gen_board+0x134>
    	char word[25];
    	float * vec_floats = read_vec(board_idx[gather_idx], word);
 800149e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	f107 0210 	add.w	r2, r7, #16
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00a fe5f 	bl	800c174 <read_vec>
 80014b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 80014be:	e01e      	b.n	80014fe <gen_board+0x84>
        	board_glove[gather_idx / 16][gather_idx % 16].word[wi] = word[wi];
 80014c0:	f8b7 1054 	ldrh.w	r1, [r7, #84]	@ 0x54
 80014c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	4413      	add	r3, r2
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	f240 40cc 	movw	r0, #1228	@ 0x4cc
 80014e0:	fb00 f303 	mul.w	r3, r0, r3
 80014e4:	441a      	add	r2, r3
 80014e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80014ea:	3158      	adds	r1, #88	@ 0x58
 80014ec:	4439      	add	r1, r7
 80014ee:	f811 1c48 	ldrb.w	r1, [r1, #-72]
 80014f2:	54d1      	strb	r1, [r2, r3]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 80014f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80014f8:	3301      	adds	r3, #1
 80014fa:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 80014fe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001502:	2b18      	cmp	r3, #24
 8001504:	d9dc      	bls.n	80014c0 <gen_board+0x46>
    	}
    	//free(word);
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001506:	2300      	movs	r3, #0
 8001508:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800150c:	e045      	b.n	800159a <gen_board+0x120>
    		//SAVE WORD TO GLOVE VEC TOO
    		board_glove[gather_idx / 16][gather_idx % 16].dims[move_idx] = vec_floats[1 + move_idx];
 800150e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001512:	3301      	adds	r3, #1
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001518:	441a      	add	r2, r3
 800151a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	b29b      	uxth	r3, r3
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	440b      	add	r3, r1
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	f240 40cc 	movw	r0, #1228	@ 0x4cc
 8001536:	fb00 f303 	mul.w	r3, r0, r3
 800153a:	4419      	add	r1, r3
 800153c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	3306      	adds	r3, #6
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	3304      	adds	r3, #4
 800154a:	601a      	str	r2, [r3, #0]
    		if(move_idx < 200){
 800154c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001550:	2bc7      	cmp	r3, #199	@ 0xc7
 8001552:	d81d      	bhi.n	8001590 <gen_board+0x116>
    			board_dict[gather_idx/16][gather_idx%16].dims[move_idx] = vec_floats[301 + move_idx];
 8001554:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001558:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001560:	441a      	add	r2, r3
 8001562:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	b29b      	uxth	r3, r3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	440b      	add	r3, r1
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800157e:	fb00 f303 	mul.w	r3, r0, r3
 8001582:	4419      	add	r1, r3
 8001584:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	601a      	str	r2, [r3, #0]
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001590:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001594:	3301      	adds	r3, #1
 8001596:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800159a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800159e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015a2:	d3b4      	bcc.n	800150e <gen_board+0x94>
    for(unsigned short gather_idx = 0; gather_idx < 16 * num_rounds; gather_idx += 1){
 80015a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80015ae:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	429a      	cmp	r2, r3
 80015b8:	f6ff af71 	blt.w	800149e <gen_board+0x24>
    	}
    	//free(vec_floats);
    }

    //Vector Scores for each board comparing to first target
    float ** scores = malloc(sizeof(*scores) * num_rounds);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00d fc65 	bl	800ee90 <malloc>
 80015c6:	4603      	mov	r3, r0
 80015c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for(unsigned short brd = 0; brd < num_rounds; brd += 1){
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80015d0:	e077      	b.n	80016c2 <gen_board+0x248>
        scores[brd] = malloc(sizeof(**scores) * 15);
 80015d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015da:	18d4      	adds	r4, r2, r3
 80015dc:	203c      	movs	r0, #60	@ 0x3c
 80015de:	f00d fc57 	bl	800ee90 <malloc>
 80015e2:	4603      	mov	r3, r0
 80015e4:	6023      	str	r3, [r4, #0]
        for(unsigned short idx = 1; idx < 16; idx += 1){
 80015e6:	2301      	movs	r3, #1
 80015e8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80015ec:	e060      	b.n	80016b0 <gen_board+0x236>
            scores[brd][idx - 1] = vector_score(board_glove[brd][0], board_dict[brd][0], board_glove[brd][idx], board_dict[brd][idx]);
 80015ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	4413      	add	r3, r2
 80015f8:	681c      	ldr	r4, [r3, #0]
 80015fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	681e      	ldr	r6, [r3, #0]
 8001606:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4413      	add	r3, r2
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001616:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	eb02 0803 	add.w	r8, r2, r3
 8001622:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001632:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	18d0      	adds	r0, r2, r3
 800163c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001644:	4413      	add	r3, r2
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800164c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001650:	440b      	add	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	18d5      	adds	r5, r2, r3
 8001656:	f60d 43a8 	addw	r3, sp, #3240	@ 0xca8
 800165a:	4601      	mov	r1, r0
 800165c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001660:	4618      	mov	r0, r3
 8001662:	f00d fd6b 	bl	800f13c <memcpy>
 8001666:	f20d 73dc 	addw	r3, sp, #2012	@ 0x7dc
 800166a:	4641      	mov	r1, r8
 800166c:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001670:	4618      	mov	r0, r3
 8001672:	f00d fd63 	bl	800f13c <memcpy>
 8001676:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 800167a:	4631      	mov	r1, r6
 800167c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001680:	4618      	mov	r0, r3
 8001682:	f00d fd5b 	bl	800f13c <memcpy>
 8001686:	4668      	mov	r0, sp
 8001688:	f104 0310 	add.w	r3, r4, #16
 800168c:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001690:	4619      	mov	r1, r3
 8001692:	f00d fd53 	bl	800f13c <memcpy>
 8001696:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800169a:	f7ff fea7 	bl	80013ec <vector_score>
 800169e:	eef0 7a40 	vmov.f32	s15, s0
 80016a2:	edc5 7a00 	vstr	s15, [r5]
        for(unsigned short idx = 1; idx < 16; idx += 1){
 80016a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80016aa:	3301      	adds	r3, #1
 80016ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80016b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d99a      	bls.n	80015ee <gen_board+0x174>
    for(unsigned short brd = 0; brd < num_rounds; brd += 1){
 80016b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80016bc:	3301      	adds	r3, #1
 80016be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80016c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dc82      	bgt.n	80015d2 <gen_board+0x158>
        }
    }
//    printf("C2\n");

    //PICK SECOND TARGET INDEXES
    unsigned short * stargets = malloc(sizeof(*stargets) * num_rounds);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4618      	mov	r0, r3
 80016d2:	f00d fbdd 	bl	800ee90 <malloc>
 80016d6:	4603      	mov	r3, r0
 80016d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    for(unsigned short b = 0; b < num_rounds; b += 1){
 80016da:	2300      	movs	r3, #0
 80016dc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80016e0:	e015      	b.n	800170e <gen_board+0x294>
        stargets[b] = pick_index(scores[b], 15, 1);
 80016e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016ea:	4413      	add	r3, r2
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016f6:	18d4      	adds	r4, r2, r3
 80016f8:	2201      	movs	r2, #1
 80016fa:	210f      	movs	r1, #15
 80016fc:	f7ff fcb6 	bl	800106c <pick_index>
 8001700:	4603      	mov	r3, r0
 8001702:	8023      	strh	r3, [r4, #0]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 8001704:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001708:	3301      	adds	r3, #1
 800170a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800170e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	dce4      	bgt.n	80016e2 <gen_board+0x268>
    }

    //COMPILE BOARDS
    for(unsigned short b = 0; b < num_rounds; b += 1){
 8001718:	2300      	movs	r3, #0
 800171a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800171e:	e0d5      	b.n	80018cc <gen_board+0x452>
        Glove_Vector * board_glove2 = malloc(sizeof(*board_glove) * 16);
 8001720:	2040      	movs	r0, #64	@ 0x40
 8001722:	f00d fbb5 	bl	800ee90 <malloc>
 8001726:	4603      	mov	r3, r0
 8001728:	637b      	str	r3, [r7, #52]	@ 0x34
        Dict_Vector * board_dict2 = malloc(sizeof(*board_dict) * 16);
 800172a:	2040      	movs	r0, #64	@ 0x40
 800172c:	f00d fbb0 	bl	800ee90 <malloc>
 8001730:	4603      	mov	r3, r0
 8001732:	633b      	str	r3, [r7, #48]	@ 0x30
        board_glove2[0] = board_glove[b][0];
 8001734:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	4413      	add	r3, r2
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 800174a:	461a      	mov	r2, r3
 800174c:	f00d fcf6 	bl	800f13c <memcpy>
        board_glove2[1] = board_glove[b][stargets[b] + 1];
 8001750:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001764:	440b      	add	r3, r1
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	441a      	add	r2, r3
 8001774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001776:	f203 43cc 	addw	r3, r3, #1228	@ 0x4cc
 800177a:	4618      	mov	r0, r3
 800177c:	4611      	mov	r1, r2
 800177e:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 8001782:	461a      	mov	r2, r3
 8001784:	f00d fcda 	bl	800f13c <memcpy>
        board_dict2[0] = board_dict[b][0];
 8001788:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800179e:	461a      	mov	r2, r3
 80017a0:	f00d fccc 	bl	800f13c <memcpy>
        board_dict2[1] = board_dict[b][stargets[b] + 1];
 80017a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80017b8:	440b      	add	r3, r1
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	441a      	add	r2, r3
 80017c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ca:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80017ce:	4618      	mov	r0, r3
 80017d0:	4611      	mov	r1, r2
 80017d2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80017d6:	461a      	mov	r2, r3
 80017d8:	f00d fcb0 	bl	800f13c <memcpy>
        int append = 2;
 80017dc:	2302      	movs	r3, #2
 80017de:	647b      	str	r3, [r7, #68]	@ 0x44
        for(int idx = 1; idx < 16; idx += 1){
 80017e0:	2301      	movs	r3, #1
 80017e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80017e4:	e041      	b.n	800186a <gen_board+0x3f0>
            if(stargets[b] + 1 != idx){
 80017e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017ee:	4413      	add	r3, r2
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d034      	beq.n	8001864 <gen_board+0x3ea>
            	board_glove2[append] = board_glove[b][idx];
 80017fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	4413      	add	r3, r2
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001808:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	18d1      	adds	r1, r2, r3
 8001812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001814:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001818:	fb02 f303 	mul.w	r3, r2, r3
 800181c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800181e:	4413      	add	r3, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 8001826:	461a      	mov	r2, r3
 8001828:	f00d fc88 	bl	800f13c <memcpy>
            	board_dict2[append++] = board_dict[b][idx];
 800182c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800183a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	18d1      	adds	r1, r2, r3
 8001844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	647a      	str	r2, [r7, #68]	@ 0x44
 800184a:	461a      	mov	r2, r3
 800184c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001850:	fb02 f303 	mul.w	r3, r2, r3
 8001854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001856:	4413      	add	r3, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800185e:	461a      	mov	r2, r3
 8001860:	f00d fc6c 	bl	800f13c <memcpy>
        for(int idx = 1; idx < 16; idx += 1){
 8001864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001866:	3301      	adds	r3, #1
 8001868:	643b      	str	r3, [r7, #64]	@ 0x40
 800186a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800186c:	2b0f      	cmp	r3, #15
 800186e:	ddba      	ble.n	80017e6 <gen_board+0x36c>
            }
        }
        free(board_glove[b]);
 8001870:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4413      	add	r3, r2
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f00d fb0f 	bl	800eea0 <free>
        free(board_dict[b]);
 8001882:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f00d fb06 	bl	800eea0 <free>
        free(scores[b]);
 8001894:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800189c:	4413      	add	r3, r2
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00d fafd 	bl	800eea0 <free>
        board_glove[b] = board_glove2;
 80018a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	4413      	add	r3, r2
 80018b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018b2:	601a      	str	r2, [r3, #0]
        board_dict[b] = board_dict2;
 80018b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018c0:	601a      	str	r2, [r3, #0]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 80018c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018c6:	3301      	adds	r3, #1
 80018c8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80018cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	f73f af24 	bgt.w	8001720 <gen_board+0x2a6>
    //     if(same(all_glove[brd_idx[i]].word, board[i]) == 0){
    //         printf("ALARM: %s, %s, brd_idx[i] %d, i %d\n", all_glove[brd_idx[i]].word, board[i], brd_idx[i], i);
    //     }
    //     board_idx[i] = brd_idx[i];
    // }
    free(stargets);
 80018d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80018da:	f00d fae1 	bl	800eea0 <free>
    free(scores);
 80018de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80018e0:	f00d fade 	bl	800eea0 <free>
    free(board_idx);
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f00d fadb 	bl	800eea0 <free>
}
 80018ea:	bf00      	nop
 80018ec:	3758      	adds	r7, #88	@ 0x58
 80018ee:	46bd      	mov	sp, r7
 80018f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080018f4 <is_valid_clue>:

int is_valid_clue(Glove_Vector clue, Glove_Vector * board){
 80018f4:	b084      	sub	sp, #16
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	f107 0c10 	add.w	ip, r7, #16
 8001900:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    //IN FUTURE: CONSIDER ADDING STEMMER
    for(int idx = 0; idx < 16; idx += 1){
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	e014      	b.n	8001934 <is_valid_clue+0x40>
        if(is_subset(board[idx].word, clue.word)){
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 8001918:	4413      	add	r3, r2
 800191a:	f107 0110 	add.w	r1, r7, #16
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fbf0 	bl	8001104 <is_subset>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <is_valid_clue+0x3a>
            return 0;
 800192a:	2300      	movs	r3, #0
 800192c:	e006      	b.n	800193c <is_valid_clue+0x48>
    for(int idx = 0; idx < 16; idx += 1){
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3301      	adds	r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	dde7      	ble.n	800190a <is_valid_clue+0x16>
        }
    }
    return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001946:	b004      	add	sp, #16
 8001948:	4770      	bx	lr
	...

0800194c <get_possibles>:

void get_possibles(Glove_Vector ** board_glove, Dict_Vector ** board_dict, float ** possible_scores, unsigned short ** possible_idx, int num_rounds){
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	f5ad 5dbf 	sub.w	sp, sp, #6112	@ 0x17e0
 8001952:	b086      	sub	sp, #24
 8001954:	f640 77c8 	movw	r7, #4040	@ 0xfc8
 8001958:	446f      	add	r7, sp
 800195a:	f507 6403 	add.w	r4, r7, #2096	@ 0x830
 800195e:	f6a4 0424 	subw	r4, r4, #2084	@ 0x824
 8001962:	6020      	str	r0, [r4, #0]
 8001964:	f507 6003 	add.w	r0, r7, #2096	@ 0x830
 8001968:	f6a0 0028 	subw	r0, r0, #2088	@ 0x828
 800196c:	6001      	str	r1, [r0, #0]
 800196e:	f507 6103 	add.w	r1, r7, #2096	@ 0x830
 8001972:	f6a1 012c 	subw	r1, r1, #2092	@ 0x82c
 8001976:	600a      	str	r2, [r1, #0]
 8001978:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 800197c:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001980:	6013      	str	r3, [r2, #0]
    //In the future, make this a HEAP or something faster
    //Consider shift to ALT
    for(unsigned short idx = 0; idx < 5000; idx += 1){
 8001982:	2300      	movs	r3, #0
 8001984:	f8a7 382e 	strh.w	r3, [r7, #2094]	@ 0x82e
 8001988:	e22e      	b.n	8001de8 <get_possibles+0x49c>
        //IMPORTANT: IN THE FUTURE, this will need to be read directly from SD, and FAST
    	Glove_Vector clue_glove;
        Dict_Vector clue_dict;
    	char * word = malloc(sizeof(*word) * 25);
 800198a:	2019      	movs	r0, #25
 800198c:	f00d fa80 	bl	800ee90 <malloc>
 8001990:	4603      	mov	r3, r0
 8001992:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
    	float * vec_floats = read_vec(idx, word);
 8001996:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	@ 0x82e
 800199a:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 800199e:	4618      	mov	r0, r3
 80019a0:	f00a fbe8 	bl	800c174 <read_vec>
 80019a4:	f8c7 0810 	str.w	r0, [r7, #2064]	@ 0x810
    	float clue_doc_freq = vec_floats[0];
 80019a8:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f607 020c 	addw	r2, r7, #2060	@ 0x80c
 80019b2:	6013      	str	r3, [r2, #0]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8a7 382c 	strh.w	r3, [r7, #2092]	@ 0x82c
 80019ba:	e011      	b.n	80019e0 <get_possibles+0x94>
        	clue_glove.word[wi] = word[wi];
 80019bc:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	@ 0x82c
 80019c0:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 80019c4:	441a      	add	r2, r3
 80019c6:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	@ 0x82c
 80019ca:	7811      	ldrb	r1, [r2, #0]
 80019cc:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80019d0:	f5a2 62a0 	sub.w	r2, r2, #1280	@ 0x500
 80019d4:	54d1      	strb	r1, [r2, r3]
    	for(unsigned short wi = 0; wi < 25; wi += 1){
 80019d6:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	@ 0x82c
 80019da:	3301      	adds	r3, #1
 80019dc:	f8a7 382c 	strh.w	r3, [r7, #2092]	@ 0x82c
 80019e0:	f8b7 382c 	ldrh.w	r3, [r7, #2092]	@ 0x82c
 80019e4:	2b18      	cmp	r3, #24
 80019e6:	d9e9      	bls.n	80019bc <get_possibles+0x70>
    	}
    	free(word);
 80019e8:	f8d7 0814 	ldr.w	r0, [r7, #2068]	@ 0x814
 80019ec:	f00d fa58 	bl	800eea0 <free>
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8a7 382a 	strh.w	r3, [r7, #2090]	@ 0x82a
 80019f6:	e02d      	b.n	8001a54 <get_possibles+0x108>
			//SAVE WORD TO GLOVE VEC TOO
			clue_glove.dims[move_idx] = vec_floats[1 + move_idx];
 80019f8:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 80019fc:	3301      	adds	r3, #1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 8001a04:	441a      	add	r2, r3
 8001a06:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	f507 6103 	add.w	r1, r7, #2096	@ 0x830
 8001a10:	f5a1 61a0 	sub.w	r1, r1, #1280	@ 0x500
 8001a14:	3306      	adds	r3, #6
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	601a      	str	r2, [r3, #0]
			if(move_idx < 200){
 8001a1e:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001a22:	2bc7      	cmp	r3, #199	@ 0xc7
 8001a24:	d811      	bhi.n	8001a4a <get_possibles+0xfe>
				clue_dict.dims[move_idx] = vec_floats[301 + move_idx];
 8001a26:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001a2a:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 8001a34:	441a      	add	r2, r3
 8001a36:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	f507 6103 	add.w	r1, r7, #2096	@ 0x830
 8001a40:	f5a1 6102 	sub.w	r1, r1, #2080	@ 0x820
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	601a      	str	r2, [r3, #0]
    	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001a4a:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f8a7 382a 	strh.w	r3, [r7, #2090]	@ 0x82a
 8001a54:	f8b7 382a 	ldrh.w	r3, [r7, #2090]	@ 0x82a
 8001a58:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001a5c:	d3cc      	bcc.n	80019f8 <get_possibles+0xac>
			}
		}
		free(vec_floats);
 8001a5e:	f8d7 0810 	ldr.w	r0, [r7, #2064]	@ 0x810
 8001a62:	f00d fa1d 	bl	800eea0 <free>


        for(int b = 0; b < num_rounds; b += 1){
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001a6c:	e1b0      	b.n	8001dd0 <get_possibles+0x484>
            if(is_valid_clue(clue_glove, board_glove[b]) == 0){
 8001a6e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001a78:	f6a2 0224 	subw	r2, r2, #2084	@ 0x824
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001a86:	f5a2 64a0 	sub.w	r4, r2, #1280	@ 0x500
 8001a8a:	f8cd 34bc 	str.w	r3, [sp, #1212]	@ 0x4bc
 8001a8e:	4668      	mov	r0, sp
 8001a90:	f104 0310 	add.w	r3, r4, #16
 8001a94:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f00d fb4f 	bl	800f13c <memcpy>
 8001a9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001aa2:	f7ff ff27 	bl	80018f4 <is_valid_clue>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 818b 	beq.w	8001dc4 <get_possibles+0x478>
                continue;
            }
            float score = vector_score(clue_glove, clue_dict, board_glove[b][0], board_dict[b][0]);
 8001aae:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001ab8:	f6a2 0224 	subw	r2, r2, #2084	@ 0x824
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	681d      	ldr	r5, [r3, #0]
 8001ac2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001acc:	f6a2 0228 	subw	r2, r2, #2088	@ 0x828
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001ada:	f5a3 64a0 	sub.w	r4, r3, #1280	@ 0x500
 8001ade:	f60d 43a8 	addw	r3, sp, #3240	@ 0xca8
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00d fb27 	bl	800f13c <memcpy>
 8001aee:	f20d 73dc 	addw	r3, sp, #2012	@ 0x7dc
 8001af2:	4629      	mov	r1, r5
 8001af4:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001af8:	4618      	mov	r0, r3
 8001afa:	f00d fb1f 	bl	800f13c <memcpy>
 8001afe:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001b02:	f5a3 6202 	sub.w	r2, r3, #2080	@ 0x820
 8001b06:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b10:	4618      	mov	r0, r3
 8001b12:	f00d fb13 	bl	800f13c <memcpy>
 8001b16:	4668      	mov	r0, sp
 8001b18:	f104 0310 	add.w	r3, r4, #16
 8001b1c:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001b20:	4619      	mov	r1, r3
 8001b22:	f00d fb0b 	bl	800f13c <memcpy>
 8001b26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b2a:	f7ff fc5f 	bl	80013ec <vector_score>
 8001b2e:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001b32:	ed83 0a00 	vstr	s0, [r3]
            score += vector_score(clue_glove, clue_dict, board_glove[b][1], board_dict[b][1]);
 8001b36:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001b40:	f6a2 0224 	subw	r2, r2, #2084	@ 0x824
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f203 45cc 	addw	r5, r3, #1228	@ 0x4cc
 8001b4e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001b58:	f6a2 0228 	subw	r2, r2, #2088	@ 0x828
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f503 7248 	add.w	r2, r3, #800	@ 0x320
 8001b66:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001b6a:	f5a3 64a0 	sub.w	r4, r3, #1280	@ 0x500
 8001b6e:	f60d 43a8 	addw	r3, sp, #3240	@ 0xca8
 8001b72:	4611      	mov	r1, r2
 8001b74:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00d fadf 	bl	800f13c <memcpy>
 8001b7e:	f20d 73dc 	addw	r3, sp, #2012	@ 0x7dc
 8001b82:	4629      	mov	r1, r5
 8001b84:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00d fad7 	bl	800f13c <memcpy>
 8001b8e:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001b92:	f5a3 6202 	sub.w	r2, r3, #2080	@ 0x820
 8001b96:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00d facb 	bl	800f13c <memcpy>
 8001ba6:	4668      	mov	r0, sp
 8001ba8:	f104 0310 	add.w	r3, r4, #16
 8001bac:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f00d fac3 	bl	800f13c <memcpy>
 8001bb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bba:	f7ff fc17 	bl	80013ec <vector_score>
 8001bbe:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc2:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bce:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001bd2:	edc3 7a00 	vstr	s15, [r3]
            score -= clue_doc_freq;
 8001bd6:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bea:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001bee:	edc3 7a00 	vstr	s15, [r3]
            unsigned short insert_idx = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
            for(unsigned short back = (idx<200)?idx-1:199; back >= 0; back -= 1){
 8001bf8:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	@ 0x82e
 8001bfc:	2bc8      	cmp	r3, #200	@ 0xc8
 8001bfe:	bf28      	it	cs
 8001c00:	23c8      	movcs	r3, #200	@ 0xc8
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	f8a7 3822 	strh.w	r3, [r7, #2082]	@ 0x822
                //Figure out where to insert based on score
                if(possible_scores[b][back] > score){
 8001c0a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001c14:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	@ 0x822
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001c2e:	ed93 7a00 	vldr	s14, [r3]
 8001c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d517      	bpl.n	8001c6c <get_possibles+0x320>
                    insert_idx = back + 1;
 8001c3c:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	@ 0x822
 8001c40:	3301      	adds	r3, #1
 8001c42:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
//                    if(insert_idx < 200){
//                        //printf("Possible IDX: %d, Insert IDX: %d \n", idx, insert_idx);
//                    }
                    break;
 8001c46:	bf00      	nop
                }
            }
            float score_pass = -9999;
 8001c48:	4b6e      	ldr	r3, [pc, #440]	@ (8001e04 <get_possibles+0x4b8>)
 8001c4a:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 8001c4e:	6013      	str	r3, [r2, #0]
            unsigned short idx_pass = 60000;
 8001c50:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001c54:	f8a7 381a 	strh.w	r3, [r7, #2074]	@ 0x81a
            unsigned short save_idx = 60000;
 8001c58:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001c5c:	f8a7 3818 	strh.w	r3, [r7, #2072]	@ 0x818
            if(insert_idx < 200){
 8001c60:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001c64:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c66:	f200 80a8 	bhi.w	8001dba <get_possibles+0x46e>
 8001c6a:	e005      	b.n	8001c78 <get_possibles+0x32c>
            for(unsigned short back = (idx<200)?idx-1:199; back >= 0; back -= 1){
 8001c6c:	f8b7 3822 	ldrh.w	r3, [r7, #2082]	@ 0x822
 8001c70:	3b01      	subs	r3, #1
 8001c72:	f8a7 3822 	strh.w	r3, [r7, #2082]	@ 0x822
                if(possible_scores[b][back] > score){
 8001c76:	e7c8      	b.n	8001c0a <get_possibles+0x2be>
                if(possible_idx[b][insert_idx] != -1){
                    score_pass = possible_scores[b][insert_idx];
 8001c78:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001c82:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 8001c9a:	6013      	str	r3, [r2, #0]
                    save_idx = possible_idx[b][insert_idx];
 8001c9c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001ca6:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	f8a7 3818 	strh.w	r3, [r7, #2072]	@ 0x818
                    idx_pass = insert_idx + 1;
 8001cbe:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f8a7 381a 	strh.w	r3, [r7, #2074]	@ 0x81a
                }
                possible_scores[b][insert_idx] = score;
 8001cc8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001cd2:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f607 0208 	addw	r2, r7, #2056	@ 0x808
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	601a      	str	r2, [r3, #0]
                possible_idx[b][insert_idx] = idx;
 8001cec:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001cf6:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	f8b7 282e 	ldrh.w	r2, [r7, #2094]	@ 0x82e
 8001d0c:	801a      	strh	r2, [r3, #0]
            }
            //Pass Everything along
            while(idx_pass < 200){
 8001d0e:	e054      	b.n	8001dba <get_possibles+0x46e>
                float ftemp = possible_scores[b][idx_pass];
 8001d10:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001d1a:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f507 6200 	add.w	r2, r7, #2048	@ 0x800
 8001d32:	6013      	str	r3, [r2, #0]
                unsigned short itemp = possible_idx[b][idx_pass];
 8001d34:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001d3e:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	f8a7 37fe 	strh.w	r3, [r7, #2046]	@ 0x7fe
                possible_scores[b][idx_pass] = score_pass;
 8001d56:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001d60:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	601a      	str	r2, [r3, #0]
                possible_idx[b][idx_pass] = save_idx;
 8001d7a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001d84:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	f8b7 2818 	ldrh.w	r2, [r7, #2072]	@ 0x818
 8001d9a:	801a      	strh	r2, [r3, #0]
                score_pass = ftemp;
 8001d9c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 8001da6:	6013      	str	r3, [r2, #0]
                save_idx = itemp;
 8001da8:	f8b7 37fe 	ldrh.w	r3, [r7, #2046]	@ 0x7fe
 8001dac:	f8a7 3818 	strh.w	r3, [r7, #2072]	@ 0x818
                idx_pass += 1;
 8001db0:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001db4:	3301      	adds	r3, #1
 8001db6:	f8a7 381a 	strh.w	r3, [r7, #2074]	@ 0x81a
            while(idx_pass < 200){
 8001dba:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	@ 0x81a
 8001dbe:	2bc7      	cmp	r3, #199	@ 0xc7
 8001dc0:	d9a6      	bls.n	8001d10 <get_possibles+0x3c4>
 8001dc2:	e000      	b.n	8001dc6 <get_possibles+0x47a>
                continue;
 8001dc4:	bf00      	nop
        for(int b = 0; b < num_rounds; b += 1){
 8001dc6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001dd0:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8001dd4:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f6ff ae48 	blt.w	8001a6e <get_possibles+0x122>
    for(unsigned short idx = 0; idx < 5000; idx += 1){
 8001dde:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	@ 0x82e
 8001de2:	3301      	adds	r3, #1
 8001de4:	f8a7 382e 	strh.w	r3, [r7, #2094]	@ 0x82e
 8001de8:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	@ 0x82e
 8001dec:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001df0:	4293      	cmp	r3, r2
 8001df2:	f67f adca 	bls.w	800198a <get_possibles+0x3e>
            }


        }
    }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bdb0      	pop	{r4, r5, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	c61c3c00 	.word	0xc61c3c00

08001e08 <overlap_score>:

float overlap_score(Glove_Vector * board_gloves, Dict_Vector * board_dicts, unsigned short clue_idx){
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	f5ad 5d8d 	sub.w	sp, sp, #4512	@ 0x11a0
 8001e0e:	b083      	sub	sp, #12
 8001e10:	f640 1788 	movw	r7, #2440	@ 0x988
 8001e14:	446f      	add	r7, sp
 8001e16:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001e1a:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8001e1e:	6018      	str	r0, [r3, #0]
 8001e20:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001e24:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8001e28:	6019      	str	r1, [r3, #0]
 8001e2a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001e2e:	f6a3 031a 	subw	r3, r3, #2074	@ 0x81a
 8001e32:	801a      	strh	r2, [r3, #0]
    //WILL BE DONE BY A READ ON THE FLY
    Glove_Vector clue_glove;
    Dict_Vector clue_dict;
    char * word = malloc(sizeof(*word) * 25);
 8001e34:	2019      	movs	r0, #25
 8001e36:	f00d f82b 	bl	800ee90 <malloc>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
    float * vec_floats = read_vec(clue_idx, word);
 8001e40:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001e44:	f6a3 031a 	subw	r3, r3, #2074	@ 0x81a
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f00a f990 	bl	800c174 <read_vec>
 8001e54:	f8c7 0808 	str.w	r0, [r7, #2056]	@ 0x808
	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8a7 381e 	strh.w	r3, [r7, #2078]	@ 0x81e
 8001e5e:	e03e      	b.n	8001ede <overlap_score+0xd6>
		//SAVE WORD TO GLOVE VEC TOO
		clue_glove.dims[move_idx] = vec_floats[1 + move_idx];
 8001e60:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e64:	3301      	adds	r3, #1
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001e6c:	441a      	add	r2, r3
 8001e6e:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 8001e78:	f2a1 41ec 	subw	r1, r1, #1260	@ 0x4ec
 8001e7c:	3306      	adds	r3, #6
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3304      	adds	r3, #4
 8001e84:	601a      	str	r2, [r3, #0]
		if(move_idx < 200){
 8001e86:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e8c:	d811      	bhi.n	8001eb2 <overlap_score+0xaa>
			clue_dict.dims[move_idx] = vec_floats[301 + move_idx];
 8001e8e:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001e92:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001e9c:	441a      	add	r2, r3
 8001e9e:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 8001ea8:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	601a      	str	r2, [r3, #0]
		}
		if(move_idx < 25){
 8001eb2:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001eb6:	2b18      	cmp	r3, #24
 8001eb8:	d80c      	bhi.n	8001ed4 <overlap_score+0xcc>
			clue_glove.word[move_idx] = word[move_idx];
 8001eba:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001ebe:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8001ec2:	441a      	add	r2, r3
 8001ec4:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001ec8:	7811      	ldrb	r1, [r2, #0]
 8001eca:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001ece:	f2a2 42ec 	subw	r2, r2, #1260	@ 0x4ec
 8001ed2:	54d1      	strb	r1, [r2, r3]
	for(unsigned short move_idx = 0; move_idx < 300; move_idx += 1){
 8001ed4:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f8a7 381e 	strh.w	r3, [r7, #2078]	@ 0x81e
 8001ede:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	@ 0x81e
 8001ee2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001ee6:	d3bb      	bcc.n	8001e60 <overlap_score+0x58>
		}
	}
	free(word);
 8001ee8:	f8d7 080c 	ldr.w	r0, [r7, #2060]	@ 0x80c
 8001eec:	f00c ffd8 	bl	800eea0 <free>
	free(vec_floats);
 8001ef0:	f8d7 0808 	ldr.w	r0, [r7, #2056]	@ 0x808
 8001ef4:	f00c ffd4 	bl	800eea0 <free>

    //Calculate An Overlap Score
    float max_glove = glove_similarity(clue_glove, board_gloves[2]);
 8001ef8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001efc:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f603 1298 	addw	r2, r3, #2456	@ 0x998
 8001f06:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001f0a:	f2a3 44ec 	subw	r4, r3, #1260	@ 0x4ec
 8001f0e:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001f12:	4611      	mov	r1, r2
 8001f14:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f00d f90f 	bl	800f13c <memcpy>
 8001f1e:	4668      	mov	r0, sp
 8001f20:	f104 0310 	add.w	r3, r4, #16
 8001f24:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f00d f907 	bl	800f13c <memcpy>
 8001f2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f32:	f7ff fa28 	bl	8001386 <glove_similarity>
 8001f36:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8001f3a:	ed83 0a00 	vstr	s0, [r3]
    float max_dict = dict_similarity(clue_dict, board_dicts[2]);
 8001f3e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001f42:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f503 62c8 	add.w	r2, r3, #1600	@ 0x640
 8001f4c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001f50:	f6a3 040c 	subw	r4, r3, #2060	@ 0x80c
 8001f54:	abc4      	add	r3, sp, #784	@ 0x310
 8001f56:	4611      	mov	r1, r2
 8001f58:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f00d f8ed 	bl	800f13c <memcpy>
 8001f62:	4668      	mov	r0, sp
 8001f64:	f104 0310 	add.w	r3, r4, #16
 8001f68:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f00d f8e5 	bl	800f13c <memcpy>
 8001f72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f76:	f7ff fa21 	bl	80013bc <dict_similarity>
 8001f7a:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8001f7e:	ed83 0a00 	vstr	s0, [r3]
    for(unsigned short idx = 2; idx < 16; idx += 1){
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
 8001f88:	e079      	b.n	800207e <overlap_score+0x276>
        float glove = glove_similarity(clue_glove, board_gloves[idx]);
 8001f8a:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8001f8e:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001f9a:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001fa6:	f2a3 44ec 	subw	r4, r3, #1260	@ 0x4ec
 8001faa:	f20d 43bc 	addw	r3, sp, #1212	@ 0x4bc
 8001fae:	4611      	mov	r1, r2
 8001fb0:	f240 42cc 	movw	r2, #1228	@ 0x4cc
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00d f8c1 	bl	800f13c <memcpy>
 8001fba:	4668      	mov	r0, sp
 8001fbc:	f104 0310 	add.w	r3, r4, #16
 8001fc0:	f240 42bc 	movw	r2, #1212	@ 0x4bc
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f00d f8b9 	bl	800f13c <memcpy>
 8001fca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fce:	f7ff f9da 	bl	8001386 <glove_similarity>
 8001fd2:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8001fd6:	ed83 0a00 	vstr	s0, [r3]
        float dict = dict_similarity(clue_dict, board_dicts[idx]);
 8001fda:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8001fde:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001fea:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	441a      	add	r2, r3
 8001ff2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001ff6:	f6a3 040c 	subw	r4, r3, #2060	@ 0x80c
 8001ffa:	abc4      	add	r3, sp, #784	@ 0x310
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002002:	4618      	mov	r0, r3
 8002004:	f00d f89a 	bl	800f13c <memcpy>
 8002008:	4668      	mov	r0, sp
 800200a:	f104 0310 	add.w	r3, r4, #16
 800200e:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8002012:	4619      	mov	r1, r3
 8002014:	f00d f892 	bl	800f13c <memcpy>
 8002018:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800201c:	f7ff f9ce 	bl	80013bc <dict_similarity>
 8002020:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002024:	ed83 0a00 	vstr	s0, [r3]
        if(dict > max_dict){
 8002028:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800202c:	ed93 7a00 	vldr	s14, [r3]
 8002030:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002040:	dd05      	ble.n	800204e <overlap_score+0x246>
            max_dict = dict;
 8002042:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 800204c:	6013      	str	r3, [r2, #0]
        }
        if(glove > max_glove){
 800204e:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	dd05      	ble.n	8002074 <overlap_score+0x26c>
            max_glove = glove;
 8002068:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 8002072:	6013      	str	r3, [r2, #0]
    for(unsigned short idx = 2; idx < 16; idx += 1){
 8002074:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8002078:	3301      	adds	r3, #1
 800207a:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
 800207e:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8002082:	2b0f      	cmp	r3, #15
 8002084:	d981      	bls.n	8001f8a <overlap_score+0x182>
        }
    }
    return 0.5 * (max_glove + max_dict);
 8002086:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800208a:	ed93 7a00 	vldr	s14, [r3]
 800208e:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800209e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80020a2:	eeb0 0a67 	vmov.f32	s0, s15
 80020a6:	f607 0724 	addw	r7, r7, #2084	@ 0x824
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}
	...

080020b0 <get_clues>:

unsigned short * get_clues(Glove_Vector ** board_glove, Dict_Vector ** board_dict, int num_rounds){
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	ed2d 8b02 	vpush	{d8}
 80020b6:	b091      	sub	sp, #68	@ 0x44
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
    //consider shift to ALT
    //SETUP POSSIBLE CLUE TRACKING INFOR
    unsigned short ** possible_idx = malloc(sizeof(*possible_idx) * num_rounds);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f00c fee3 	bl	800ee90 <malloc>
 80020ca:	4603      	mov	r3, r0
 80020cc:	61fb      	str	r3, [r7, #28]
    float ** possible_scores = malloc(sizeof(*possible_scores) * num_rounds);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00c fedc 	bl	800ee90 <malloc>
 80020d8:	4603      	mov	r3, r0
 80020da:	61bb      	str	r3, [r7, #24]
    for(int b = 0; b < num_rounds; b += 1){
 80020dc:	2300      	movs	r3, #0
 80020de:	637b      	str	r3, [r7, #52]	@ 0x34
 80020e0:	e034      	b.n	800214c <get_clues+0x9c>
        possible_idx[b] = malloc(sizeof(**possible_idx) * 200);
 80020e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	18d4      	adds	r4, r2, r3
 80020ea:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80020ee:	f00c fecf 	bl	800ee90 <malloc>
 80020f2:	4603      	mov	r3, r0
 80020f4:	6023      	str	r3, [r4, #0]
        possible_scores[b] = malloc(sizeof(**possible_scores) * 200);
 80020f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	18d4      	adds	r4, r2, r3
 80020fe:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002102:	f00c fec5 	bl	800ee90 <malloc>
 8002106:	4603      	mov	r3, r0
 8002108:	6023      	str	r3, [r4, #0]
        for(int fill = 0; fill < 200; fill += 1){
 800210a:	2300      	movs	r3, #0
 800210c:	633b      	str	r3, [r7, #48]	@ 0x30
 800210e:	e017      	b.n	8002140 <get_clues+0x90>
            possible_idx[b][fill] = -1;
 8002110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	4413      	add	r3, r2
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002124:	801a      	strh	r2, [r3, #0]
            possible_scores[b][fill] = -9999;
 8002126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	4a65      	ldr	r2, [pc, #404]	@ (80022cc <get_clues+0x21c>)
 8002138:	601a      	str	r2, [r3, #0]
        for(int fill = 0; fill < 200; fill += 1){
 800213a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213c:	3301      	adds	r3, #1
 800213e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002142:	2bc7      	cmp	r3, #199	@ 0xc7
 8002144:	dde4      	ble.n	8002110 <get_clues+0x60>
    for(int b = 0; b < num_rounds; b += 1){
 8002146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002148:	3301      	adds	r3, #1
 800214a:	637b      	str	r3, [r7, #52]	@ 0x34
 800214c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	dbc6      	blt.n	80020e2 <get_clues+0x32>
        }
    }
//    printf("Checkpoint #5\n");

    //GET POSSIBLE CLUES AND THEIR SCORES
    get_possibles(board_glove, board_dict, possible_scores, possible_idx, num_rounds);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7ff fbf4 	bl	800194c <get_possibles>
//    printf("Checkpoint #6\n");

    //FIND THE BEST CLUE FOR EACH BOARD
    unsigned short * ret_idx = malloc(sizeof(*ret_idx) * num_rounds);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4618      	mov	r0, r3
 800216a:	f00c fe91 	bl	800ee90 <malloc>
 800216e:	4603      	mov	r3, r0
 8002170:	617b      	str	r3, [r7, #20]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 8002172:	2300      	movs	r3, #0
 8002174:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002176:	e073      	b.n	8002260 <get_clues+0x1b0>
        unsigned short best_idx = possible_idx[b][0];
 8002178:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	4413      	add	r3, r2
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        float best_score = possible_scores[b][0] - overlap_score(board_glove[b], board_dict[b], possible_idx[b][0]);
 8002186:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4413      	add	r3, r2
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	ed93 8a00 	vldr	s16, [r3]
 8002194:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4413      	add	r3, r2
 80021a6:	6819      	ldr	r1, [r3, #0]
 80021a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f7ff fe27 	bl	8001e08 <overlap_score>
 80021ba:	eef0 7a40 	vmov.f32	s15, s0
 80021be:	ee78 7a67 	vsub.f32	s15, s16, s15
 80021c2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for(int idx = 1; idx < 200; idx += 1){
 80021c6:	2301      	movs	r3, #1
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ca:	e03d      	b.n	8002248 <get_clues+0x198>
            float score = possible_scores[b][idx] - overlap_score(board_glove[b], board_dict[b], possible_idx[b][idx]);
 80021cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4413      	add	r3, r2
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	ed93 8a00 	vldr	s16, [r3]
 80021e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	4413      	add	r3, r2
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	f7ff fdfe 	bl	8001e08 <overlap_score>
 800220c:	eef0 7a40 	vmov.f32	s15, s0
 8002210:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002214:	edc7 7a04 	vstr	s15, [r7, #16]
            if(score > best_score){
 8002218:	ed97 7a04 	vldr	s14, [r7, #16]
 800221c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002228:	dd0b      	ble.n	8002242 <get_clues+0x192>
                best_score = score;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
                best_idx = possible_idx[b][idx];
 800222e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        for(int idx = 1; idx < 200; idx += 1){
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	2bc7      	cmp	r3, #199	@ 0xc7
 800224c:	ddbe      	ble.n	80021cc <get_clues+0x11c>
            }
        }
        ret_idx[b] = best_idx;
 800224e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4413      	add	r3, r2
 8002256:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002258:	801a      	strh	r2, [r3, #0]
    for(unsigned short b = 0; b < num_rounds; b += 1){
 800225a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800225c:	3301      	adds	r3, #1
 800225e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002260:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	dc87      	bgt.n	8002178 <get_clues+0xc8>
//            save_scores[b][idx] = vector_score(board_glove[b][idx], board_dicts[b][idx], all_glove[ret_idx[b]], all_dict[ret_idx[b]]);
//        }
//    }

    //FREES
    for(int b = 0; b < num_rounds; b += 1){
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	e01a      	b.n	80022a4 <get_clues+0x1f4>
        free(board_dict[b]);
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4413      	add	r3, r2
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f00c fe11 	bl	800eea0 <free>
        free(possible_scores[b]);
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4413      	add	r3, r2
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f00c fe09 	bl	800eea0 <free>
        free(possible_idx[b]);
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f00c fe01 	bl	800eea0 <free>
    for(int b = 0; b < num_rounds; b += 1){
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	3301      	adds	r3, #1
 80022a2:	623b      	str	r3, [r7, #32]
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbe0      	blt.n	800226e <get_clues+0x1be>
    }
    free(board_dict);
 80022ac:	68b8      	ldr	r0, [r7, #8]
 80022ae:	f00c fdf7 	bl	800eea0 <free>
    free(possible_scores);
 80022b2:	69b8      	ldr	r0, [r7, #24]
 80022b4:	f00c fdf4 	bl	800eea0 <free>
    free(possible_idx);
 80022b8:	69f8      	ldr	r0, [r7, #28]
 80022ba:	f00c fdf1 	bl	800eea0 <free>

    return ret_idx;
 80022be:	697b      	ldr	r3, [r7, #20]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	373c      	adds	r7, #60	@ 0x3c
 80022c4:	46bd      	mov	sp, r7
 80022c6:	ecbd 8b02 	vpop	{d8}
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	c61c3c00 	.word	0xc61c3c00

080022d0 <play_round>:
//        // }
//    }
//    fclose(file);
//}

void play_round(unsigned short * clues, Glove_Vector ** board_glove, int num_rounds){
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
//            }
//            printf("\n");
//        }
//        printf("\n\n\n\n\n");
//    }
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <clues>:
//        c = arg[rds_idx++];
//    }
//    return ret;
//}

void clues(){
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af00      	add	r7, sp, #0
//    int num_rounds = read_rounds(argv[1]);
     int num_rounds = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
//    free(full_board);

     // char ** all_board = read_board("codewords.txt");
     // write_idxs("allboard", all_board, all_glove, 100);

     unsigned short * board_idx = malloc(sizeof(*board_idx) * 250);
 80022f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80022f6:	f00c fdcb 	bl	800ee90 <malloc>
 80022fa:	4603      	mov	r3, r0
 80022fc:	613b      	str	r3, [r7, #16]
     for(int i = 0; i < 250; i += 1){
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e009      	b.n	8002318 <clues+0x30>
    	 board_idx[i] = i;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	b292      	uxth	r2, r2
 8002310:	801a      	strh	r2, [r3, #0]
     for(int i = 0; i < 250; i += 1){
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3301      	adds	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2bf9      	cmp	r3, #249	@ 0xf9
 800231c:	ddf2      	ble.n	8002304 <clues+0x1c>
     }
//     read_board_2("allboard", all_board, board_idx, 100);
    
     Glove_Vector ** board_glove = malloc(sizeof(*board_glove) * num_rounds);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f00c fdb4 	bl	800ee90 <malloc>
 8002328:	4603      	mov	r3, r0
 800232a:	60fb      	str	r3, [r7, #12]
     Dict_Vector ** board_dict = malloc(sizeof(*board_dict) * num_rounds);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4618      	mov	r0, r3
 8002332:	f00c fdad 	bl	800ee90 <malloc>
 8002336:	4603      	mov	r3, r0
 8002338:	60bb      	str	r3, [r7, #8]
     for(unsigned short i = 0; i < 16; i += 1){
 800233a:	2300      	movs	r3, #0
 800233c:	837b      	strh	r3, [r7, #26]
 800233e:	e016      	b.n	800236e <clues+0x86>
    	 board_glove[i] = malloc(sizeof(**board_glove) * 16);
 8002340:	8b7b      	ldrh	r3, [r7, #26]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	18d4      	adds	r4, r2, r3
 8002348:	f644 40c0 	movw	r0, #19648	@ 0x4cc0
 800234c:	f00c fda0 	bl	800ee90 <malloc>
 8002350:	4603      	mov	r3, r0
 8002352:	6023      	str	r3, [r4, #0]
    	 board_dict[i] = malloc(sizeof(**board_dict) * 16);
 8002354:	8b7b      	ldrh	r3, [r7, #26]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	18d4      	adds	r4, r2, r3
 800235c:	f44f 5048 	mov.w	r0, #12800	@ 0x3200
 8002360:	f00c fd96 	bl	800ee90 <malloc>
 8002364:	4603      	mov	r3, r0
 8002366:	6023      	str	r3, [r4, #0]
     for(unsigned short i = 0; i < 16; i += 1){
 8002368:	8b7b      	ldrh	r3, [r7, #26]
 800236a:	3301      	adds	r3, #1
 800236c:	837b      	strh	r3, [r7, #26]
 800236e:	8b7b      	ldrh	r3, [r7, #26]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d9e5      	bls.n	8002340 <clues+0x58>
     }
     // EMPTY TO SAVE GLOVE AND DICT VECTORS IN

     gen_board(board_idx, board_glove, board_dict, num_rounds);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	6938      	ldr	r0, [r7, #16]
 800237c:	f7ff f87d 	bl	800147a <gen_board>
//         for(int idx = 0; idx < 16; idx+= 1){
//             save_scores[b][idx] = 0;
//         }
//     }

     unsigned short * clues = get_clues(board_glove, board_dict, num_rounds);
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff fe93 	bl	80020b0 <get_clues>
 800238a:	6078      	str	r0, [r7, #4]

//     printf("Checkpoint #7\n");
     play_round(clues, board_glove, num_rounds);
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff9d 	bl	80022d0 <play_round>

//     for(int b = 0; b < num_rounds; b += 1){
//         //free(boards_idx[b]);
//         //free(save_scores[b]);
//     }
     free(clues);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f00c fd82 	bl	800eea0 <free>
//     free(save_scores);
//     free(boards_idx);
}
 800239c:	bf00      	nop
 800239e:	3724      	adds	r7, #36	@ 0x24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd90      	pop	{r4, r7, pc}

080023a4 <end_game>:
			}
			break;
	}
}

void end_game(void) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af04      	add	r7, sp, #16
	mode = GAME_MODE_END;
 80023aa:	4bdb      	ldr	r3, [pc, #876]	@ (8002718 <end_game+0x374>)
 80023ac:	2202      	movs	r2, #2
 80023ae:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 80023b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023b4:	f001 fa06 	bl	80037c4 <HAL_Delay>
	//background
	RA8875_fill_screen(RA8875_BLUE);
 80023b8:	201f      	movs	r0, #31
 80023ba:	f7fe fc95 	bl	8000ce8 <RA8875_fill_screen>
	//banner
	RA8875_draw_fill_rect(0, 90, SCREEN_WIDTH, 10, RA8875_YELLOW);
 80023be:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	230a      	movs	r3, #10
 80023c6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80023ca:	215a      	movs	r1, #90	@ 0x5a
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7fe fc5d 	bl	8000c8c <RA8875_draw_fill_rect>
	RA8875_draw_fill_rect(0, 100, SCREEN_WIDTH, 10, RA8875_BLACK);
 80023d2:	2300      	movs	r3, #0
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	230a      	movs	r3, #10
 80023d8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80023dc:	2164      	movs	r1, #100	@ 0x64
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fc54 	bl	8000c8c <RA8875_draw_fill_rect>
	//arrows
	RA8875_draw_fill_triangle(700, 180, 750, 290, 700, 400, 0x8C4F);
 80023e4:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 80023e8:	9302      	str	r3, [sp, #8]
 80023ea:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80023fa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80023fe:	21b4      	movs	r1, #180	@ 0xb4
 8002400:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002404:	f7fe fc90 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(680, 180, 730, 290, 680, 400, RA8875_BLUE);
 8002408:	231f      	movs	r3, #31
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800241c:	f240 22da 	movw	r2, #730	@ 0x2da
 8002420:	21b4      	movs	r1, #180	@ 0xb4
 8002422:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8002426:	f7fe fc7f 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(650, 180, 700, 290, 650, 400, RA8875_YELLOW);
 800242a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	f240 238a 	movw	r3, #650	@ 0x28a
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002440:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8002444:	21b4      	movs	r1, #180	@ 0xb4
 8002446:	f240 208a 	movw	r0, #650	@ 0x28a
 800244a:	f7fe fc6d 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(630, 180, 680, 290, 630, 400, RA8875_BLUE);
 800244e:	231f      	movs	r3, #31
 8002450:	9302      	str	r3, [sp, #8]
 8002452:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	f240 2376 	movw	r3, #630	@ 0x276
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002462:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8002466:	21b4      	movs	r1, #180	@ 0xb4
 8002468:	f240 2076 	movw	r0, #630	@ 0x276
 800246c:	f7fe fc5c 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(70, 180, 20, 290, 70, 400, 0x8C4F);
 8002470:	f648 434f 	movw	r3, #35919	@ 0x8c4f
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	2346      	movs	r3, #70	@ 0x46
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002484:	2214      	movs	r2, #20
 8002486:	21b4      	movs	r1, #180	@ 0xb4
 8002488:	2046      	movs	r0, #70	@ 0x46
 800248a:	f7fe fc4d 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(90, 180, 40, 290, 90, 400, RA8875_BLUE);
 800248e:	231f      	movs	r3, #31
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	235a      	movs	r3, #90	@ 0x5a
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80024a0:	2228      	movs	r2, #40	@ 0x28
 80024a2:	21b4      	movs	r1, #180	@ 0xb4
 80024a4:	205a      	movs	r0, #90	@ 0x5a
 80024a6:	f7fe fc3f 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(120, 180, 70, 290, 120, 400, RA8875_YELLOW);
 80024aa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	2378      	movs	r3, #120	@ 0x78
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80024be:	2246      	movs	r2, #70	@ 0x46
 80024c0:	21b4      	movs	r1, #180	@ 0xb4
 80024c2:	2078      	movs	r0, #120	@ 0x78
 80024c4:	f7fe fc30 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(140, 180, 90, 290, 140, 400, RA8875_BLUE);
 80024c8:	231f      	movs	r3, #31
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	238c      	movs	r3, #140	@ 0x8c
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80024da:	225a      	movs	r2, #90	@ 0x5a
 80024dc:	21b4      	movs	r1, #180	@ 0xb4
 80024de:	208c      	movs	r0, #140	@ 0x8c
 80024e0:	f7fe fc22 	bl	8000d28 <RA8875_draw_fill_triangle>
	//bubble
	RA8875_draw_fill_ellipse(CENTER_X, CENTER_Y+42, SCREEN_WIDTH/4, SCREEN_HEIGHT/4, 0x94b3);
 80024e4:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2378      	movs	r3, #120	@ 0x78
 80024ec:	22c8      	movs	r2, #200	@ 0xc8
 80024ee:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80024f2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80024f6:	f7fe fc3f 	bl	8000d78 <RA8875_draw_fill_ellipse>
	RA8875_draw_fill_triangle(590, 250, 590, 330, 638, CENTER_Y+50, 0x94b3);//0deg
 80024fa:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	f240 237e 	movw	r3, #638	@ 0x27e
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002510:	f240 224e 	movw	r2, #590	@ 0x24e
 8002514:	21fa      	movs	r1, #250	@ 0xfa
 8002516:	f240 204e 	movw	r0, #590	@ 0x24e
 800251a:	f7fe fc05 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 212, 330, 174, CENTER_Y+20, 0x94b3);//180deg
 800251e:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002522:	9302      	str	r3, [sp, #8]
 8002524:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	23ae      	movs	r3, #174	@ 0xae
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002532:	22d4      	movs	r2, #212	@ 0xd4
 8002534:	21fa      	movs	r1, #250	@ 0xfa
 8002536:	20d4      	movs	r0, #212	@ 0xd4
 8002538:	f7fe fbf6 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 510, 192, 475, 130, 0x94b3);//74deg
 800253c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	2382      	movs	r3, #130	@ 0x82
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	f240 13db 	movw	r3, #475	@ 0x1db
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	23c0      	movs	r3, #192	@ 0xc0
 800254e:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 8002552:	21af      	movs	r1, #175	@ 0xaf
 8002554:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002558:	f7fe fbe6 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(400, 175, 290, 192, 325, 130, 0x94b3);//106deg
 800255c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002560:	9302      	str	r3, [sp, #8]
 8002562:	2382      	movs	r3, #130	@ 0x82
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	f240 1345 	movw	r3, #325	@ 0x145
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	23c0      	movs	r3, #192	@ 0xc0
 800256e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8002572:	21af      	movs	r1, #175	@ 0xaf
 8002574:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002578:	f7fe fbd6 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(522, 380, 400, 398, 470, 420, 0x94b3);//-74deg
 800257c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8002592:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002596:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800259a:	f240 200a 	movw	r0, #522	@ 0x20a
 800259e:	f7fe fbc3 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(282, 380, 400, 398, 330, 420, 0x94b3);//-106deg
 80025a2:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 80025b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80025bc:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80025c0:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80025c4:	f7fe fbb0 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 250, 510, 192, 580, 190, 0x94b3);//32deg
 80025c8:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80025cc:	9302      	str	r3, [sp, #8]
 80025ce:	23be      	movs	r3, #190	@ 0xbe
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	f44f 7311 	mov.w	r3, #580	@ 0x244
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	23c0      	movs	r3, #192	@ 0xc0
 80025da:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 80025de:	21fa      	movs	r1, #250	@ 0xfa
 80025e0:	f44f 7014 	mov.w	r0, #592	@ 0x250
 80025e4:	f7fe fba0 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(212, 250, 290, 192, 220, 190, 0x94b3);//122deg
 80025e8:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 80025ec:	9302      	str	r3, [sp, #8]
 80025ee:	23be      	movs	r3, #190	@ 0xbe
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	23dc      	movs	r3, #220	@ 0xdc
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	23c0      	movs	r3, #192	@ 0xc0
 80025f8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80025fc:	21fa      	movs	r1, #250	@ 0xfa
 80025fe:	20d4      	movs	r0, #212	@ 0xd4
 8002600:	f7fe fb92 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(592, 310, 490, 368, 580, 400, 0x94b3);//-32deg
 8002604:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002608:	9302      	str	r3, [sp, #8]
 800260a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800261a:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 800261e:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8002622:	f44f 7014 	mov.w	r0, #592	@ 0x250
 8002626:	f7fe fb7f 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(220, 400, 212, 310, 310, 368, 0x94b3);//-122deg
 800262a:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8002640:	22d4      	movs	r2, #212	@ 0xd4
 8002642:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002646:	20dc      	movs	r0, #220	@ 0xdc
 8002648:	f7fe fb6e 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(202, 270, 232, 330, 124, 420, 0x94b3);//stem
 800264c:	f249 43b3 	movw	r3, #38067	@ 0x94b3
 8002650:	9302      	str	r3, [sp, #8]
 8002652:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	237c      	movs	r3, #124	@ 0x7c
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8002660:	22e8      	movs	r2, #232	@ 0xe8
 8002662:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002666:	20ca      	movs	r0, #202	@ 0xca
 8002668:	f7fe fb5e 	bl	8000d28 <RA8875_draw_fill_triangle>
	//buttons
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y-35, 300, 70, 10, RA8875_WHITE);
 800266c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	230a      	movs	r3, #10
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2346      	movs	r3, #70	@ 0x46
 8002678:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800267c:	21cd      	movs	r1, #205	@ 0xcd
 800267e:	20fa      	movs	r0, #250	@ 0xfa
 8002680:	f7fe fb9c 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-150, CENTER_Y+55, 300, 70, 10, RA8875_WHITE);
 8002684:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	230a      	movs	r3, #10
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2346      	movs	r3, #70	@ 0x46
 8002690:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002694:	f240 1127 	movw	r1, #295	@ 0x127
 8002698:	20fa      	movs	r0, #250	@ 0xfa
 800269a:	f7fe fb8f 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y-25, 280, 50, 7, RA8875_BLACK);
 800269e:	2300      	movs	r3, #0
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2307      	movs	r3, #7
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2332      	movs	r3, #50	@ 0x32
 80026a8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80026ac:	21d7      	movs	r1, #215	@ 0xd7
 80026ae:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80026b2:	f7fe fb83 	bl	8000dbc <RA8875_draw_fill_round_rect>
	RA8875_draw_fill_round_rect(CENTER_X-140, CENTER_Y+65, 280, 50, 7, RA8875_BLACK);
 80026b6:	2300      	movs	r3, #0
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2307      	movs	r3, #7
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2332      	movs	r3, #50	@ 0x32
 80026c0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80026c4:	f240 1131 	movw	r1, #305	@ 0x131
 80026c8:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80026cc:	f7fe fb76 	bl	8000dbc <RA8875_draw_fill_round_rect>

	RA8875_text_mode();
 80026d0:	f7fe fba0 	bl	8000e14 <RA8875_text_mode>
	//button text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLACK);
 80026d4:	2100      	movs	r1, #0
 80026d6:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80026da:	f7fe fbfe 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(CENTER_X-120, CENTER_Y-25);
 80026de:	21d7      	movs	r1, #215	@ 0xd7
 80026e0:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80026e4:	f7fe fbbb 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(2);
 80026e8:	2002      	movs	r0, #2
 80026ea:	f7fe fc53 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Play Again", 10);
 80026ee:	210a      	movs	r1, #10
 80026f0:	480a      	ldr	r0, [pc, #40]	@ (800271c <end_game+0x378>)
 80026f2:	f7fe fc79 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X-45, CENTER_Y+65);
 80026f6:	f240 1131 	movw	r1, #305	@ 0x131
 80026fa:	f240 1063 	movw	r0, #355	@ 0x163
 80026fe:	f7fe fbae 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("Menu", 4);
 8002702:	2104      	movs	r1, #4
 8002704:	4806      	ldr	r0, [pc, #24]	@ (8002720 <end_game+0x37c>)
 8002706:	f7fe fc6f 	bl	8000fe8 <RA8875_text_write>
	//main text
	RA8875_text_color (RA8875_YELLOW, RA8875_BLUE);
 800270a:	211f      	movs	r1, #31
 800270c:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002710:	f7fe fbe3 	bl	8000eda <RA8875_text_color>
 8002714:	e006      	b.n	8002724 <end_game+0x380>
 8002716:	bf00      	nop
 8002718:	240000a6 	.word	0x240000a6
 800271c:	0800f918 	.word	0x0800f918
 8002720:	0800f924 	.word	0x0800f924
	RA8875_text_cursor_position(CENTER_X-143, 20);
 8002724:	2114      	movs	r1, #20
 8002726:	f240 1001 	movw	r0, #257	@ 0x101
 800272a:	f7fe fb98 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(3);
 800272e:	2003      	movs	r0, #3
 8002730:	f7fe fc30 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("GAME", 4);
 8002734:	2104      	movs	r1, #4
 8002736:	4849      	ldr	r0, [pc, #292]	@ (800285c <end_game+0x4b8>)
 8002738:	f7fe fc56 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(CENTER_X+5, 20);
 800273c:	2114      	movs	r1, #20
 800273e:	f240 1095 	movw	r0, #405	@ 0x195
 8002742:	f7fe fb8c 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("OVER", 4);
 8002746:	2104      	movs	r1, #4
 8002748:	4845      	ldr	r0, [pc, #276]	@ (8002860 <end_game+0x4bc>)
 800274a:	f7fe fc4d 	bl	8000fe8 <RA8875_text_write>
	//corner text
	RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 800274e:	211f      	movs	r1, #31
 8002750:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002754:	f7fe fbc1 	bl	8000eda <RA8875_text_color>
	RA8875_text_cursor_position(10, 0);
 8002758:	2100      	movs	r1, #0
 800275a:	200a      	movs	r0, #10
 800275c:	f7fe fb7f 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_scale(1);
 8002760:	2001      	movs	r0, #1
 8002762:	f7fe fc17 	bl	8000f94 <RA8875_text_scale>
	RA8875_text_write("Score:", 6);
 8002766:	2106      	movs	r1, #6
 8002768:	483e      	ldr	r0, [pc, #248]	@ (8002864 <end_game+0x4c0>)
 800276a:	f7fe fc3d 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-180, 0);
 800276e:	2100      	movs	r1, #0
 8002770:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8002774:	f7fe fb73 	bl	8000e5e <RA8875_text_cursor_position>
	RA8875_text_write("High Score:", 11);
 8002778:	210b      	movs	r1, #11
 800277a:	483b      	ldr	r0, [pc, #236]	@ (8002868 <end_game+0x4c4>)
 800277c:	f7fe fc34 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(10, 55);
 8002780:	2137      	movs	r1, #55	@ 0x37
 8002782:	200a      	movs	r0, #10
 8002784:	f7fe fb6b 	bl	8000e5e <RA8875_text_cursor_position>
	char buffer[3];
	sprintf(buffer, "%d", score);
 8002788:	4b38      	ldr	r3, [pc, #224]	@ (800286c <end_game+0x4c8>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	4938      	ldr	r1, [pc, #224]	@ (8002870 <end_game+0x4cc>)
 8002790:	4618      	mov	r0, r3
 8002792:	f00c fc6f 	bl	800f074 <siprintf>
	RA8875_text_write(buffer, 3);
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	2103      	movs	r1, #3
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fc24 	bl	8000fe8 <RA8875_text_write>
	RA8875_text_cursor_position(SCREEN_WIDTH-60, 55);
 80027a0:	2137      	movs	r1, #55	@ 0x37
 80027a2:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 80027a6:	f7fe fb5a 	bl	8000e5e <RA8875_text_cursor_position>
	if(score > hi_score) hi_score = score;
 80027aa:	4b30      	ldr	r3, [pc, #192]	@ (800286c <end_game+0x4c8>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b31      	ldr	r3, [pc, #196]	@ (8002874 <end_game+0x4d0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	dd03      	ble.n	80027be <end_game+0x41a>
 80027b6:	4b2d      	ldr	r3, [pc, #180]	@ (800286c <end_game+0x4c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002874 <end_game+0x4d0>)
 80027bc:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%d", hi_score);
 80027be:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <end_game+0x4d0>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	492a      	ldr	r1, [pc, #168]	@ (8002870 <end_game+0x4cc>)
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00c fc54 	bl	800f074 <siprintf>
	RA8875_text_write(buffer, 3);
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	2103      	movs	r1, #3
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fc09 	bl	8000fe8 <RA8875_text_write>
	RA8875_graphic_mode();
 80027d6:	f7fd fecb 	bl	8000570 <RA8875_graphic_mode>

	//lightning
	RA8875_draw_fill_triangle(CENTER_X-169, 10, CENTER_X-162, 50, CENTER_X-177, 50, RA8875_YELLOW);
 80027da:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80027de:	9302      	str	r3, [sp, #8]
 80027e0:	2332      	movs	r3, #50	@ 0x32
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	23df      	movs	r3, #223	@ 0xdf
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2332      	movs	r3, #50	@ 0x32
 80027ea:	22ee      	movs	r2, #238	@ 0xee
 80027ec:	210a      	movs	r1, #10
 80027ee:	20e7      	movs	r0, #231	@ 0xe7
 80027f0:	f7fe fa9a 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X-162, 85, CENTER_X-155, 50, CENTER_X-170, 50, RA8875_YELLOW);
 80027f4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80027f8:	9302      	str	r3, [sp, #8]
 80027fa:	2332      	movs	r3, #50	@ 0x32
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	23e6      	movs	r3, #230	@ 0xe6
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2332      	movs	r3, #50	@ 0x32
 8002804:	22f5      	movs	r2, #245	@ 0xf5
 8002806:	2155      	movs	r1, #85	@ 0x55
 8002808:	20ee      	movs	r0, #238	@ 0xee
 800280a:	f7fe fa8d 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+159, 10, CENTER_X+152, 50, CENTER_X+167, 50, RA8875_YELLOW);
 800280e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002812:	9302      	str	r3, [sp, #8]
 8002814:	2332      	movs	r3, #50	@ 0x32
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	f240 2337 	movw	r3, #567	@ 0x237
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2332      	movs	r3, #50	@ 0x32
 8002820:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8002824:	210a      	movs	r1, #10
 8002826:	f240 202f 	movw	r0, #559	@ 0x22f
 800282a:	f7fe fa7d 	bl	8000d28 <RA8875_draw_fill_triangle>
	RA8875_draw_fill_triangle(CENTER_X+152, 85, CENTER_X+145, 50, CENTER_X+160, 50, RA8875_YELLOW);
 800282e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2332      	movs	r3, #50	@ 0x32
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2332      	movs	r3, #50	@ 0x32
 8002840:	f240 2221 	movw	r2, #545	@ 0x221
 8002844:	2155      	movs	r1, #85	@ 0x55
 8002846:	f44f 700a 	mov.w	r0, #552	@ 0x228
 800284a:	f7fe fa6d 	bl	8000d28 <RA8875_draw_fill_triangle>

	score = 0;
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <end_game+0x4c8>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

	return;
 8002854:	bf00      	nop
}
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	0800f968 	.word	0x0800f968
 8002860:	0800f970 	.word	0x0800f970
 8002864:	0800f978 	.word	0x0800f978
 8002868:	0800f980 	.word	0x0800f980
 800286c:	240000a8 	.word	0x240000a8
 8002870:	0800f98c 	.word	0x0800f98c
 8002874:	240000ac 	.word	0x240000ac

08002878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002880:	f000 ff0e 	bl	80036a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002884:	f000 f828 	bl	80028d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002888:	f000 f9fa 	bl	8002c80 <MX_GPIO_Init>
  MX_DMA_Init();
 800288c:	f000 f9d0 	bl	8002c30 <MX_DMA_Init>
  MX_SPI1_Init();
 8002890:	f000 f8e8 	bl	8002a64 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002894:	f000 f93c 	bl	8002b10 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002898:	f008 ff04 	bl	800b6a4 <MX_FATFS_Init>
  MX_TIM6_Init();
 800289c:	f000 f990 	bl	8002bc0 <MX_TIM6_Init>
  MX_I2S3_Init();
 80028a0:	f000 f898 	bl	80029d4 <MX_I2S3_Init>
  MX_RNG_Init();
 80028a4:	f000 f8c8 	bl	8002a38 <MX_RNG_Init>
//  title_screen();

//  game_matrix();
  	  FATFS fs;
  	  FRESULT fr;
  	  fr = f_mount(&fs, "", 1);
 80028a8:	463b      	mov	r3, r7
 80028aa:	2201      	movs	r2, #1
 80028ac:	4909      	ldr	r1, [pc, #36]	@ (80028d4 <main+0x5c>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f00b fde4 	bl	800e47c <f_mount>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
  	  clues();
 80028ba:	f7ff fd15 	bl	80022e8 <clues>
  	  fr = f_mount(NULL, "", 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	4904      	ldr	r1, [pc, #16]	@ (80028d4 <main+0x5c>)
 80028c2:	2000      	movs	r0, #0
 80028c4:	f00b fdda 	bl	800e47c <f_mount>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
//  int data;
//  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
//  uint8_t pdata = 0x55;

//  HAL_Delay(10000);
  while (1)
 80028ce:	bf00      	nop
 80028d0:	e7fd      	b.n	80028ce <main+0x56>
 80028d2:	bf00      	nop
 80028d4:	0800f9b8 	.word	0x0800f9b8

080028d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b09c      	sub	sp, #112	@ 0x70
 80028dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e2:	224c      	movs	r2, #76	@ 0x4c
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f00c fbe4 	bl	800f0b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	2220      	movs	r2, #32
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f00c fbde 	bl	800f0b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80028f8:	2002      	movs	r0, #2
 80028fa:	f003 fa97 	bl	8005e2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80028fe:	2300      	movs	r3, #0
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4b32      	ldr	r3, [pc, #200]	@ (80029cc <SystemClock_Config+0xf4>)
 8002904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002906:	4a31      	ldr	r2, [pc, #196]	@ (80029cc <SystemClock_Config+0xf4>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800290e:	4b2f      	ldr	r3, [pc, #188]	@ (80029cc <SystemClock_Config+0xf4>)
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <SystemClock_Config+0xf8>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002920:	4a2b      	ldr	r2, [pc, #172]	@ (80029d0 <SystemClock_Config+0xf8>)
 8002922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002926:	6193      	str	r3, [r2, #24]
 8002928:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <SystemClock_Config+0xf8>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002934:	bf00      	nop
 8002936:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <SystemClock_Config+0xf8>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800293e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002942:	d1f8      	bne.n	8002936 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8002944:	2322      	movs	r3, #34	@ 0x22
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002948:	2301      	movs	r3, #1
 800294a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800294c:	2340      	movs	r3, #64	@ 0x40
 800294e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002950:	2301      	movs	r3, #1
 8002952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002954:	2302      	movs	r3, #2
 8002956:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002958:	2300      	movs	r3, #0
 800295a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800295c:	2304      	movs	r3, #4
 800295e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002960:	230c      	movs	r3, #12
 8002962:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002964:	2302      	movs	r3, #2
 8002966:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002968:	2302      	movs	r3, #2
 800296a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 3;
 800296c:	2303      	movs	r3, #3
 800296e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002970:	230c      	movs	r3, #12
 8002972:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002974:	2300      	movs	r3, #0
 8002976:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800297c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fa8d 	bl	8005ea0 <HAL_RCC_OscConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800298c:	f000 fa6c 	bl	8002e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002990:	233f      	movs	r3, #63	@ 0x3f
 8002992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002994:	2303      	movs	r3, #3
 8002996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2102      	movs	r1, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 fecd 	bl	8006754 <HAL_RCC_ClockConfig>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80029c0:	f000 fa52 	bl	8002e68 <Error_Handler>
  }
}
 80029c4:	bf00      	nop
 80029c6:	3770      	adds	r7, #112	@ 0x70
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	58000400 	.word	0x58000400
 80029d0:	58024800 	.word	0x58024800

080029d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80029d8:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 80029da:	4a16      	ldr	r2, [pc, #88]	@ (8002a34 <MX_I2S3_Init+0x60>)
 80029dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 80029de:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 80029e0:	220a      	movs	r2, #10
 80029e2:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80029ea:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80029f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 80029f8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80029fc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80029fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8002a04:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8002a10:	4b07      	ldr	r3, [pc, #28]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002a1c:	4804      	ldr	r0, [pc, #16]	@ (8002a30 <MX_I2S3_Init+0x5c>)
 8002a1e:	f003 f8e3 	bl	8005be8 <HAL_I2S_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8002a28:	f000 fa1e 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	240000b0 	.word	0x240000b0
 8002a34:	40003c00 	.word	0x40003c00

08002a38 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002a3c:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <MX_RNG_Init+0x24>)
 8002a3e:	4a08      	ldr	r2, [pc, #32]	@ (8002a60 <MX_RNG_Init+0x28>)
 8002a40:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <MX_RNG_Init+0x24>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002a48:	4804      	ldr	r0, [pc, #16]	@ (8002a5c <MX_RNG_Init+0x24>)
 8002a4a:	f006 fef7 	bl	800983c <HAL_RNG_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002a54:	f000 fa08 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	24000104 	.word	0x24000104
 8002a60:	48021800 	.word	0x48021800

08002a64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a68:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002a6a:	4a28      	ldr	r2, [pc, #160]	@ (8002b0c <MX_SPI1_Init+0xa8>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a6e:	4b26      	ldr	r3, [pc, #152]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002a70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002a74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a76:	4b24      	ldr	r3, [pc, #144]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a7c:	4b22      	ldr	r3, [pc, #136]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002a7e:	2207      	movs	r2, #7
 8002a80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a82:	4b21      	ldr	r3, [pc, #132]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a88:	4b1f      	ldr	r3, [pc, #124]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002a90:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a96:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aaa:	4b17      	ldr	r3, [pc, #92]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002ab0:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002abc:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ae6:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002af2:	4805      	ldr	r0, [pc, #20]	@ (8002b08 <MX_SPI1_Init+0xa4>)
 8002af4:	f006 ff04 	bl	8009900 <HAL_SPI_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8002afe:	f000 f9b3 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	24000118 	.word	0x24000118
 8002b0c:	40013000 	.word	0x40013000

08002b10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b14:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b16:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <MX_SPI2_Init+0xac>)
 8002b18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b1a:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b1c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002b20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b22:	4b25      	ldr	r3, [pc, #148]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b28:	4b23      	ldr	r3, [pc, #140]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b2e:	4b22      	ldr	r3, [pc, #136]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b36:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b46:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b52:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b58:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002b5e:	4b16      	ldr	r3, [pc, #88]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b64:	4b14      	ldr	r3, [pc, #80]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b72:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b78:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b96:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ba2:	4805      	ldr	r0, [pc, #20]	@ (8002bb8 <MX_SPI2_Init+0xa8>)
 8002ba4:	f006 feac 	bl	8009900 <HAL_SPI_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002bae:	f000 f95b 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	240001a0 	.word	0x240001a0
 8002bbc:	40003800 	.word	0x40003800

08002bc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <MX_TIM6_Init+0x68>)
 8002bd2:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <MX_TIM6_Init+0x6c>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <MX_TIM6_Init+0x68>)
 8002bd8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002bdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <MX_TIM6_Init+0x68>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002be4:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <MX_TIM6_Init+0x68>)
 8002be6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bec:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <MX_TIM6_Init+0x68>)
 8002bee:	2280      	movs	r2, #128	@ 0x80
 8002bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bf2:	480d      	ldr	r0, [pc, #52]	@ (8002c28 <MX_TIM6_Init+0x68>)
 8002bf4:	f008 fa45 	bl	800b082 <HAL_TIM_Base_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002bfe:	f000 f933 	bl	8002e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c02:	2320      	movs	r3, #32
 8002c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4806      	ldr	r0, [pc, #24]	@ (8002c28 <MX_TIM6_Init+0x68>)
 8002c10:	f008 fc9c 	bl	800b54c <HAL_TIMEx_MasterConfigSynchronization>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002c1a:	f000 f925 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	24000318 	.word	0x24000318
 8002c2c:	40001000 	.word	0x40001000

08002c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c36:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <MX_DMA_Init+0x4c>)
 8002c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c7c <MX_DMA_Init+0x4c>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c46:	4b0d      	ldr	r3, [pc, #52]	@ (8002c7c <MX_DMA_Init+0x4c>)
 8002c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2100      	movs	r1, #0
 8002c58:	200b      	movs	r0, #11
 8002c5a:	f000 febe 	bl	80039da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c5e:	200b      	movs	r0, #11
 8002c60:	f000 fed5 	bl	8003a0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2100      	movs	r1, #0
 8002c68:	200c      	movs	r0, #12
 8002c6a:	f000 feb6 	bl	80039da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c6e:	200c      	movs	r0, #12
 8002c70:	f000 fecd 	bl	8003a0e <HAL_NVIC_EnableIRQ>

}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	58024400 	.word	0x58024400

08002c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	@ 0x28
 8002c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c96:	4b6e      	ldr	r3, [pc, #440]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c9c:	4a6c      	ldr	r2, [pc, #432]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb4:	4b66      	ldr	r3, [pc, #408]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cba:	4a65      	ldr	r2, [pc, #404]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cc4:	4b62      	ldr	r3, [pc, #392]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf0:	4b57      	ldr	r3, [pc, #348]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cf6:	4a56      	ldr	r2, [pc, #344]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d00:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d0e:	4b50      	ldr	r3, [pc, #320]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d14:	4a4e      	ldr	r2, [pc, #312]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002d16:	f043 0310 	orr.w	r3, r3, #16
 8002d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e50 <MX_GPIO_Init+0x1d0>)
 8002d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2110      	movs	r1, #16
 8002d30:	4848      	ldr	r0, [pc, #288]	@ (8002e54 <MX_GPIO_Init+0x1d4>)
 8002d32:	f002 ff3f 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2120      	movs	r1, #32
 8002d3a:	4847      	ldr	r0, [pc, #284]	@ (8002e58 <MX_GPIO_Init+0x1d8>)
 8002d3c:	f002 ff3a 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002d40:	2201      	movs	r2, #1
 8002d42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d46:	4845      	ldr	r0, [pc, #276]	@ (8002e5c <MX_GPIO_Init+0x1dc>)
 8002d48:	f002 ff34 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	21e0      	movs	r1, #224	@ 0xe0
 8002d50:	4843      	ldr	r0, [pc, #268]	@ (8002e60 <MX_GPIO_Init+0x1e0>)
 8002d52:	f002 ff2f 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 8002d56:	2200      	movs	r2, #0
 8002d58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d5c:	483f      	ldr	r0, [pc, #252]	@ (8002e5c <MX_GPIO_Init+0x1dc>)
 8002d5e:	f002 ff29 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2103      	movs	r1, #3
 8002d66:	483f      	ldr	r0, [pc, #252]	@ (8002e64 <MX_GPIO_Init+0x1e4>)
 8002d68:	f002 ff24 	bl	8005bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d74:	2302      	movs	r3, #2
 8002d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	4619      	mov	r1, r3
 8002d82:	4834      	ldr	r0, [pc, #208]	@ (8002e54 <MX_GPIO_Init+0x1d4>)
 8002d84:	f002 fd66 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WAIT_Pin */
  GPIO_InitStruct.Pin = LCD_WAIT_Pin;
 8002d88:	2310      	movs	r3, #16
 8002d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_WAIT_GPIO_Port, &GPIO_InitStruct);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4619      	mov	r1, r3
 8002d9a:	482f      	ldr	r0, [pc, #188]	@ (8002e58 <MX_GPIO_Init+0x1d8>)
 8002d9c:	f002 fd5a 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8002da0:	2320      	movs	r3, #32
 8002da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da4:	2301      	movs	r3, #1
 8002da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002da8:	2302      	movs	r3, #2
 8002daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4619      	mov	r1, r3
 8002db6:	4828      	ldr	r0, [pc, #160]	@ (8002e58 <MX_GPIO_Init+0x1d8>)
 8002db8:	f002 fd4c 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4821      	ldr	r0, [pc, #132]	@ (8002e5c <MX_GPIO_Init+0x1dc>)
 8002dd6:	f002 fd3d 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW5_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = ROW5_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8002dda:	231f      	movs	r3, #31
 8002ddc:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	4619      	mov	r1, r3
 8002dec:	481c      	ldr	r0, [pc, #112]	@ (8002e60 <MX_GPIO_Init+0x1e0>)
 8002dee:	f002 fd31 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 8002df2:	23e0      	movs	r3, #224	@ 0xe0
 8002df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df6:	2301      	movs	r3, #1
 8002df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	4619      	mov	r1, r3
 8002e08:	4815      	ldr	r0, [pc, #84]	@ (8002e60 <MX_GPIO_Init+0x1e0>)
 8002e0a:	f002 fd23 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 8002e0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e14:	2301      	movs	r3, #1
 8002e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	480d      	ldr	r0, [pc, #52]	@ (8002e5c <MX_GPIO_Init+0x1dc>)
 8002e28:	f002 fd14 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDR_Pin;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4619      	mov	r1, r3
 8002e42:	4808      	ldr	r0, [pc, #32]	@ (8002e64 <MX_GPIO_Init+0x1e4>)
 8002e44:	f002 fd06 	bl	8005854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e48:	bf00      	nop
 8002e4a:	3728      	adds	r7, #40	@ 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	58024400 	.word	0x58024400
 8002e54:	58020000 	.word	0x58020000
 8002e58:	58020800 	.word	0x58020800
 8002e5c:	58020400 	.word	0x58020400
 8002e60:	58020c00 	.word	0x58020c00
 8002e64:	58021000 	.word	0x58021000

08002e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6c:	b672      	cpsid	i
}
 8002e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <Error_Handler+0x8>

08002e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_MspInit+0x30>)
 8002e7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e80:	4a08      	ldr	r2, [pc, #32]	@ (8002ea4 <HAL_MspInit+0x30>)
 8002e82:	f043 0302 	orr.w	r3, r3, #2
 8002e86:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_MspInit+0x30>)
 8002e8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	58024400 	.word	0x58024400

08002ea8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0bc      	sub	sp, #240	@ 0xf0
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec0:	f107 0318 	add.w	r3, r7, #24
 8002ec4:	22c0      	movs	r2, #192	@ 0xc0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00c f8f3 	bl	800f0b4 <memset>
  if(hi2s->Instance==SPI3)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a4b      	ldr	r2, [pc, #300]	@ (8003000 <HAL_I2S_MspInit+0x158>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	f040 808f 	bne.w	8002ff8 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002eda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eea:	f107 0318 	add.w	r3, r7, #24
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f003 ffa6 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8002efa:	f7ff ffb5 	bl	8002e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002efe:	4b41      	ldr	r3, [pc, #260]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f04:	4a3f      	ldr	r2, [pc, #252]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1c:	4b39      	ldr	r3, [pc, #228]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f22:	4a38      	ldr	r2, [pc, #224]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f2c:	4b35      	ldr	r3, [pc, #212]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3a:	4b32      	ldr	r3, [pc, #200]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f40:	4a30      	ldr	r2, [pc, #192]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f58:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f5e:	4a29      	ldr	r2, [pc, #164]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f68:	4b26      	ldr	r3, [pc, #152]	@ (8003004 <HAL_I2S_MspInit+0x15c>)
 8002f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f76:	2304      	movs	r3, #4
 8002f78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002f8e:	2307      	movs	r3, #7
 8002f90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f94:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f98:	4619      	mov	r1, r3
 8002f9a:	481b      	ldr	r0, [pc, #108]	@ (8003008 <HAL_I2S_MspInit+0x160>)
 8002f9c:	f002 fc5a 	bl	8005854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fba:	2306      	movs	r3, #6
 8002fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4811      	ldr	r0, [pc, #68]	@ (800300c <HAL_I2S_MspInit+0x164>)
 8002fc8:	f002 fc44 	bl	8005854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fcc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fe6:	2306      	movs	r3, #6
 8002fe8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4807      	ldr	r0, [pc, #28]	@ (8003010 <HAL_I2S_MspInit+0x168>)
 8002ff4:	f002 fc2e 	bl	8005854 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002ff8:	bf00      	nop
 8002ffa:	37f0      	adds	r7, #240	@ 0xf0
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40003c00 	.word	0x40003c00
 8003004:	58024400 	.word	0x58024400
 8003008:	58020400 	.word	0x58020400
 800300c:	58020000 	.word	0x58020000
 8003010:	58020800 	.word	0x58020800

08003014 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0b4      	sub	sp, #208	@ 0xd0
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	22c0      	movs	r2, #192	@ 0xc0
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f00c f845 	bl	800f0b4 <memset>
  if(hrng->Instance==RNG)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a14      	ldr	r2, [pc, #80]	@ (8003080 <HAL_RNG_MspInit+0x6c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d121      	bne.n	8003078 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003034:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003046:	f107 0310 	add.w	r3, r7, #16
 800304a:	4618      	mov	r0, r3
 800304c:	f003 fef8 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8003056:	f7ff ff07 	bl	8002e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RNG_MspInit+0x70>)
 800305c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003060:	4a08      	ldr	r2, [pc, #32]	@ (8003084 <HAL_RNG_MspInit+0x70>)
 8003062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003066:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_RNG_MspInit+0x70>)
 800306c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003078:	bf00      	nop
 800307a:	37d0      	adds	r7, #208	@ 0xd0
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	48021800 	.word	0x48021800
 8003084:	58024400 	.word	0x58024400

08003088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b0be      	sub	sp, #248	@ 0xf8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a0:	f107 0320 	add.w	r3, r7, #32
 80030a4:	22c0      	movs	r2, #192	@ 0xc0
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f00c f803 	bl	800f0b4 <memset>
  if(hspi->Instance==SPI1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4aa2      	ldr	r2, [pc, #648]	@ (800333c <HAL_SPI_MspInit+0x2b4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d16a      	bne.n	800318e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80030b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ca:	f107 0320 	add.w	r3, r7, #32
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 feb6 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80030da:	f7ff fec5 	bl	8002e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030de:	4b98      	ldr	r3, [pc, #608]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80030e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030e4:	4a96      	ldr	r2, [pc, #600]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80030e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030ee:	4b94      	ldr	r3, [pc, #592]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80030f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fc:	4b90      	ldr	r3, [pc, #576]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003102:	4a8f      	ldr	r2, [pc, #572]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800310c:	4b8c      	ldr	r3, [pc, #560]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 800310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	4b89      	ldr	r3, [pc, #548]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 800311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003120:	4a87      	ldr	r2, [pc, #540]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800312a:	4b85      	ldr	r3, [pc, #532]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 800312c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003138:	23c0      	movs	r3, #192	@ 0xc0
 800313a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314a:	2303      	movs	r3, #3
 800314c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003150:	2305      	movs	r3, #5
 8003152:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800315a:	4619      	mov	r1, r3
 800315c:	4879      	ldr	r0, [pc, #484]	@ (8003344 <HAL_SPI_MspInit+0x2bc>)
 800315e:	f002 fb79 	bl	8005854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003162:	2308      	movs	r3, #8
 8003164:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800317a:	2305      	movs	r3, #5
 800317c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003184:	4619      	mov	r1, r3
 8003186:	4870      	ldr	r0, [pc, #448]	@ (8003348 <HAL_SPI_MspInit+0x2c0>)
 8003188:	f002 fb64 	bl	8005854 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800318c:	e0d2      	b.n	8003334 <HAL_SPI_MspInit+0x2ac>
  else if(hspi->Instance==SPI2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a6e      	ldr	r2, [pc, #440]	@ (800334c <HAL_SPI_MspInit+0x2c4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	f040 80cd 	bne.w	8003334 <HAL_SPI_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800319a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ac:	f107 0320 	add.w	r3, r7, #32
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fe45 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 80031bc:	f7ff fe54 	bl	8002e68 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031c0:	4b5f      	ldr	r3, [pc, #380]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80031c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80031c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80031d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031de:	4b58      	ldr	r3, [pc, #352]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80031e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e4:	4a56      	ldr	r2, [pc, #344]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80031e6:	f043 0304 	orr.w	r3, r3, #4
 80031ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031ee:	4b54      	ldr	r3, [pc, #336]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80031f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fc:	4b50      	ldr	r3, [pc, #320]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 80031fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003202:	4a4f      	ldr	r2, [pc, #316]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800320c:	4b4c      	ldr	r3, [pc, #304]	@ (8003340 <HAL_SPI_MspInit+0x2b8>)
 800320e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800321a:	2306      	movs	r3, #6
 800321c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003232:	2305      	movs	r3, #5
 8003234:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003238:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800323c:	4619      	mov	r1, r3
 800323e:	4844      	ldr	r0, [pc, #272]	@ (8003350 <HAL_SPI_MspInit+0x2c8>)
 8003240:	f002 fb08 	bl	8005854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003248:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003258:	2303      	movs	r3, #3
 800325a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800325e:	2305      	movs	r3, #5
 8003260:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003264:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003268:	4619      	mov	r1, r3
 800326a:	4837      	ldr	r0, [pc, #220]	@ (8003348 <HAL_SPI_MspInit+0x2c0>)
 800326c:	f002 faf2 	bl	8005854 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8003270:	4b38      	ldr	r3, [pc, #224]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 8003272:	4a39      	ldr	r2, [pc, #228]	@ (8003358 <HAL_SPI_MspInit+0x2d0>)
 8003274:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003276:	4b37      	ldr	r3, [pc, #220]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 8003278:	2227      	movs	r2, #39	@ 0x27
 800327a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800327c:	4b35      	ldr	r3, [pc, #212]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003282:	4b34      	ldr	r3, [pc, #208]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003288:	4b32      	ldr	r3, [pc, #200]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 800328a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800328e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003290:	4b30      	ldr	r3, [pc, #192]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 8003292:	2200      	movs	r2, #0
 8003294:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003296:	4b2f      	ldr	r3, [pc, #188]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800329c:	4b2d      	ldr	r3, [pc, #180]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80032ae:	4829      	ldr	r0, [pc, #164]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 80032b0:	f000 fbc8 	bl	8003a44 <HAL_DMA_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_SPI_MspInit+0x236>
      Error_Handler();
 80032ba:	f7ff fdd5 	bl	8002e68 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a24      	ldr	r2, [pc, #144]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 80032c2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80032c4:	4a23      	ldr	r2, [pc, #140]	@ (8003354 <HAL_SPI_MspInit+0x2cc>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream1;
 80032ca:	4b24      	ldr	r3, [pc, #144]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 80032cc:	4a24      	ldr	r2, [pc, #144]	@ (8003360 <HAL_SPI_MspInit+0x2d8>)
 80032ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80032d0:	4b22      	ldr	r3, [pc, #136]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 80032d2:	2228      	movs	r2, #40	@ 0x28
 80032d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032d6:	4b21      	ldr	r3, [pc, #132]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 80032d8:	2240      	movs	r2, #64	@ 0x40
 80032da:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032dc:	4b1f      	ldr	r3, [pc, #124]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 80032de:	2200      	movs	r2, #0
 80032e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032e2:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 80032e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ea:	4b1c      	ldr	r3, [pc, #112]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80032f6:	4b19      	ldr	r3, [pc, #100]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032fc:	4b17      	ldr	r3, [pc, #92]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003302:	4b16      	ldr	r3, [pc, #88]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 8003304:	2200      	movs	r2, #0
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003308:	4814      	ldr	r0, [pc, #80]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 800330a:	f000 fb9b 	bl	8003a44 <HAL_DMA_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_SPI_MspInit+0x290>
      Error_Handler();
 8003314:	f7ff fda8 	bl	8002e68 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a10      	ldr	r2, [pc, #64]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 800331c:	679a      	str	r2, [r3, #120]	@ 0x78
 800331e:	4a0f      	ldr	r2, [pc, #60]	@ (800335c <HAL_SPI_MspInit+0x2d4>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003324:	2200      	movs	r2, #0
 8003326:	2100      	movs	r1, #0
 8003328:	2024      	movs	r0, #36	@ 0x24
 800332a:	f000 fb56 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800332e:	2024      	movs	r0, #36	@ 0x24
 8003330:	f000 fb6d 	bl	8003a0e <HAL_NVIC_EnableIRQ>
}
 8003334:	bf00      	nop
 8003336:	37f8      	adds	r7, #248	@ 0xf8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40013000 	.word	0x40013000
 8003340:	58024400 	.word	0x58024400
 8003344:	58020000 	.word	0x58020000
 8003348:	58020400 	.word	0x58020400
 800334c:	40003800 	.word	0x40003800
 8003350:	58020800 	.word	0x58020800
 8003354:	24000228 	.word	0x24000228
 8003358:	40020010 	.word	0x40020010
 800335c:	240002a0 	.word	0x240002a0
 8003360:	40020028 	.word	0x40020028

08003364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0e      	ldr	r2, [pc, #56]	@ (80033ac <HAL_TIM_Base_MspInit+0x48>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d116      	bne.n	80033a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003376:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <HAL_TIM_Base_MspInit+0x4c>)
 8003378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800337c:	4a0c      	ldr	r2, [pc, #48]	@ (80033b0 <HAL_TIM_Base_MspInit+0x4c>)
 800337e:	f043 0310 	orr.w	r3, r3, #16
 8003382:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003386:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <HAL_TIM_Base_MspInit+0x4c>)
 8003388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	2101      	movs	r1, #1
 8003398:	2036      	movs	r0, #54	@ 0x36
 800339a:	f000 fb1e 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800339e:	2036      	movs	r0, #54	@ 0x36
 80033a0:	f000 fb35 	bl	8003a0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40001000 	.word	0x40001000
 80033b0:	58024400 	.word	0x58024400

080033b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033b8:	bf00      	nop
 80033ba:	e7fd      	b.n	80033b8 <NMI_Handler+0x4>

080033bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <HardFault_Handler+0x4>

080033c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c8:	bf00      	nop
 80033ca:	e7fd      	b.n	80033c8 <MemManage_Handler+0x4>

080033cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <BusFault_Handler+0x4>

080033d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <UsageFault_Handler+0x4>

080033dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800340a:	f000 f9bb 	bl	8003784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003418:	4802      	ldr	r0, [pc, #8]	@ (8003424 <DMA1_Stream0_IRQHandler+0x10>)
 800341a:	f001 f8b5 	bl	8004588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	24000228 	.word	0x24000228

08003428 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800342c:	4802      	ldr	r0, [pc, #8]	@ (8003438 <DMA1_Stream1_IRQHandler+0x10>)
 800342e:	f001 f8ab 	bl	8004588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	240002a0 	.word	0x240002a0

0800343c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003440:	4802      	ldr	r0, [pc, #8]	@ (800344c <SPI2_IRQHandler+0x10>)
 8003442:	f007 fb1b 	bl	800aa7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	240001a0 	.word	0x240001a0

08003450 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  char print_timer[4];
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003456:	481b      	ldr	r0, [pc, #108]	@ (80034c4 <TIM6_DAC_IRQHandler+0x74>)
 8003458:	f007 fe99 	bl	800b18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  game_timer--;
 800345c:	4b1a      	ldr	r3, [pc, #104]	@ (80034c8 <TIM6_DAC_IRQHandler+0x78>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b18      	ldr	r3, [pc, #96]	@ (80034c8 <TIM6_DAC_IRQHandler+0x78>)
 8003466:	701a      	strb	r2, [r3, #0]
  sprintf(print_timer, "%d", game_timer);
 8003468:	4b17      	ldr	r3, [pc, #92]	@ (80034c8 <TIM6_DAC_IRQHandler+0x78>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	4916      	ldr	r1, [pc, #88]	@ (80034cc <TIM6_DAC_IRQHandler+0x7c>)
 8003472:	4618      	mov	r0, r3
 8003474:	f00b fdfe 	bl	800f074 <siprintf>
  RA8875_text_mode();
 8003478:	f7fd fccc 	bl	8000e14 <RA8875_text_mode>
  RA8875_text_cursor_position(CENTER_X-200, 50);
 800347c:	2132      	movs	r1, #50	@ 0x32
 800347e:	20c8      	movs	r0, #200	@ 0xc8
 8003480:	f7fd fced 	bl	8000e5e <RA8875_text_cursor_position>
  RA8875_text_color (RA8875_WHITE, RA8875_BLUE);
 8003484:	211f      	movs	r1, #31
 8003486:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800348a:	f7fd fd26 	bl	8000eda <RA8875_text_color>
  RA8875_text_scale(1);
 800348e:	2001      	movs	r0, #1
 8003490:	f7fd fd80 	bl	8000f94 <RA8875_text_scale>
  RA8875_text_write(print_timer, 2);
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	2102      	movs	r1, #2
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd fda5 	bl	8000fe8 <RA8875_text_write>
  RA8875_graphic_mode();
 800349e:	f7fd f867 	bl	8000570 <RA8875_graphic_mode>
  if(game_timer <= 0) {
 80034a2:	4b09      	ldr	r3, [pc, #36]	@ (80034c8 <TIM6_DAC_IRQHandler+0x78>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d107      	bne.n	80034ba <TIM6_DAC_IRQHandler+0x6a>
	  game_timer = 10;
 80034aa:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <TIM6_DAC_IRQHandler+0x78>)
 80034ac:	220a      	movs	r2, #10
 80034ae:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim6);
 80034b0:	4804      	ldr	r0, [pc, #16]	@ (80034c4 <TIM6_DAC_IRQHandler+0x74>)
 80034b2:	f007 fe3d 	bl	800b130 <HAL_TIM_Base_Stop_IT>
	  end_game();
 80034b6:	f7fe ff75 	bl	80023a4 <end_game>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	24000318 	.word	0x24000318
 80034c8:	24000000 	.word	0x24000000
 80034cc:	0800f9bc 	.word	0x0800f9bc

080034d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034d8:	4a14      	ldr	r2, [pc, #80]	@ (800352c <_sbrk+0x5c>)
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <_sbrk+0x60>)
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034e4:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <_sbrk+0x64>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034ec:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <_sbrk+0x64>)
 80034ee:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <_sbrk+0x68>)
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034f2:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <_sbrk+0x64>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d207      	bcs.n	8003510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003500:	f00b fdf0 	bl	800f0e4 <__errno>
 8003504:	4603      	mov	r3, r0
 8003506:	220c      	movs	r2, #12
 8003508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
 800350e:	e009      	b.n	8003524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003510:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <_sbrk+0x64>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <_sbrk+0x64>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	4a05      	ldr	r2, [pc, #20]	@ (8003534 <_sbrk+0x64>)
 8003520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	24080000 	.word	0x24080000
 8003530:	00000400 	.word	0x00000400
 8003534:	24000364 	.word	0x24000364
 8003538:	24000700 	.word	0x24000700

0800353c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003540:	4b37      	ldr	r3, [pc, #220]	@ (8003620 <SystemInit+0xe4>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	4a36      	ldr	r2, [pc, #216]	@ (8003620 <SystemInit+0xe4>)
 8003548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800354c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003550:	4b34      	ldr	r3, [pc, #208]	@ (8003624 <SystemInit+0xe8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	2b06      	cmp	r3, #6
 800355a:	d807      	bhi.n	800356c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800355c:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <SystemInit+0xe8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 030f 	bic.w	r3, r3, #15
 8003564:	4a2f      	ldr	r2, [pc, #188]	@ (8003624 <SystemInit+0xe8>)
 8003566:	f043 0307 	orr.w	r3, r3, #7
 800356a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800356c:	4b2e      	ldr	r3, [pc, #184]	@ (8003628 <SystemInit+0xec>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2d      	ldr	r2, [pc, #180]	@ (8003628 <SystemInit+0xec>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003578:	4b2b      	ldr	r3, [pc, #172]	@ (8003628 <SystemInit+0xec>)
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800357e:	4b2a      	ldr	r3, [pc, #168]	@ (8003628 <SystemInit+0xec>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4929      	ldr	r1, [pc, #164]	@ (8003628 <SystemInit+0xec>)
 8003584:	4b29      	ldr	r3, [pc, #164]	@ (800362c <SystemInit+0xf0>)
 8003586:	4013      	ands	r3, r2
 8003588:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800358a:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <SystemInit+0xe8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003596:	4b23      	ldr	r3, [pc, #140]	@ (8003624 <SystemInit+0xe8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 030f 	bic.w	r3, r3, #15
 800359e:	4a21      	ldr	r2, [pc, #132]	@ (8003624 <SystemInit+0xe8>)
 80035a0:	f043 0307 	orr.w	r3, r3, #7
 80035a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80035a6:	4b20      	ldr	r3, [pc, #128]	@ (8003628 <SystemInit+0xec>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80035ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <SystemInit+0xec>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80035b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <SystemInit+0xec>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <SystemInit+0xec>)
 80035ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003630 <SystemInit+0xf4>)
 80035bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <SystemInit+0xec>)
 80035c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003634 <SystemInit+0xf8>)
 80035c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80035c4:	4b18      	ldr	r3, [pc, #96]	@ (8003628 <SystemInit+0xec>)
 80035c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <SystemInit+0xfc>)
 80035c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80035ca:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <SystemInit+0xec>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80035d0:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <SystemInit+0xec>)
 80035d2:	4a19      	ldr	r2, [pc, #100]	@ (8003638 <SystemInit+0xfc>)
 80035d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80035d6:	4b14      	ldr	r3, [pc, #80]	@ (8003628 <SystemInit+0xec>)
 80035d8:	2200      	movs	r2, #0
 80035da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80035dc:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <SystemInit+0xec>)
 80035de:	4a16      	ldr	r2, [pc, #88]	@ (8003638 <SystemInit+0xfc>)
 80035e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80035e2:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <SystemInit+0xec>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <SystemInit+0xec>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003628 <SystemInit+0xec>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80035f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <SystemInit+0xec>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80035fa:	4b10      	ldr	r3, [pc, #64]	@ (800363c <SystemInit+0x100>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <SystemInit+0x104>)
 8003600:	4013      	ands	r3, r2
 8003602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003606:	d202      	bcs.n	800360e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003608:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <SystemInit+0x108>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800360e:	4b0e      	ldr	r3, [pc, #56]	@ (8003648 <SystemInit+0x10c>)
 8003610:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003614:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00
 8003624:	52002000 	.word	0x52002000
 8003628:	58024400 	.word	0x58024400
 800362c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003630:	02020200 	.word	0x02020200
 8003634:	01ff0000 	.word	0x01ff0000
 8003638:	01010280 	.word	0x01010280
 800363c:	5c001000 	.word	0x5c001000
 8003640:	ffff0000 	.word	0xffff0000
 8003644:	51008108 	.word	0x51008108
 8003648:	52004000 	.word	0x52004000

0800364c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800364c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003684 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003650:	f7ff ff74 	bl	800353c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003654:	480c      	ldr	r0, [pc, #48]	@ (8003688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003656:	490d      	ldr	r1, [pc, #52]	@ (800368c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003658:	4a0d      	ldr	r2, [pc, #52]	@ (8003690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800365a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800365c:	e002      	b.n	8003664 <LoopCopyDataInit>

0800365e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800365e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003662:	3304      	adds	r3, #4

08003664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003668:	d3f9      	bcc.n	800365e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800366a:	4a0a      	ldr	r2, [pc, #40]	@ (8003694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800366c:	4c0a      	ldr	r4, [pc, #40]	@ (8003698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800366e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003670:	e001      	b.n	8003676 <LoopFillZerobss>

08003672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003674:	3204      	adds	r2, #4

08003676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003678:	d3fb      	bcc.n	8003672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800367a:	f00b fd39 	bl	800f0f0 <__libc_init_array>
/* Call the application's entry point.*/  bl  main
 800367e:	f7ff f8fb 	bl	8002878 <main>
  bx  lr
 8003682:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003684:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003688:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800368c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8003690:	0800febc 	.word	0x0800febc
  ldr r2, =_sbss
 8003694:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8003698:	240006fc 	.word	0x240006fc

0800369c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800369c:	e7fe      	b.n	800369c <ADC3_IRQHandler>
	...

080036a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a6:	2003      	movs	r0, #3
 80036a8:	f000 f98c 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036ac:	f003 fa08 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <HAL_Init+0x68>)
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	4913      	ldr	r1, [pc, #76]	@ (800370c <HAL_Init+0x6c>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003708 <HAL_Init+0x68>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	4a0e      	ldr	r2, [pc, #56]	@ (800370c <HAL_Init+0x6c>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003710 <HAL_Init+0x70>)
 80036e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003714 <HAL_Init+0x74>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036ea:	200f      	movs	r0, #15
 80036ec:	f000 f814 	bl	8003718 <HAL_InitTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e002      	b.n	8003700 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80036fa:	f7ff fbbb 	bl	8002e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	58024400 	.word	0x58024400
 800370c:	0800fa20 	.word	0x0800fa20
 8003710:	24000008 	.word	0x24000008
 8003714:	24000004 	.word	0x24000004

08003718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003720:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <HAL_InitTick+0x60>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e021      	b.n	8003770 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800372c:	4b13      	ldr	r3, [pc, #76]	@ (800377c <HAL_InitTick+0x64>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <HAL_InitTick+0x60>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4619      	mov	r1, r3
 8003736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800373a:	fbb3 f3f1 	udiv	r3, r3, r1
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f971 	bl	8003a2a <HAL_SYSTICK_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e00e      	b.n	8003770 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b0f      	cmp	r3, #15
 8003756:	d80a      	bhi.n	800376e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003758:	2200      	movs	r2, #0
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
 8003760:	f000 f93b 	bl	80039da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003764:	4a06      	ldr	r2, [pc, #24]	@ (8003780 <HAL_InitTick+0x68>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	24000010 	.word	0x24000010
 800377c:	24000004 	.word	0x24000004
 8003780:	2400000c 	.word	0x2400000c

08003784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_IncTick+0x20>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_IncTick+0x24>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4413      	add	r3, r2
 8003794:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <HAL_IncTick+0x24>)
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	24000010 	.word	0x24000010
 80037a8:	24000368 	.word	0x24000368

080037ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return uwTick;
 80037b0:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <HAL_GetTick+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	24000368 	.word	0x24000368

080037c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037cc:	f7ff ffee 	bl	80037ac <HAL_GetTick>
 80037d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d005      	beq.n	80037ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037de:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <HAL_Delay+0x44>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037ea:	bf00      	nop
 80037ec:	f7ff ffde 	bl	80037ac <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d8f7      	bhi.n	80037ec <HAL_Delay+0x28>
  {
  }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	24000010 	.word	0x24000010

0800380c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003810:	4b03      	ldr	r3, [pc, #12]	@ (8003820 <HAL_GetREVID+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	0c1b      	lsrs	r3, r3, #16
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	5c001000 	.word	0x5c001000

08003824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <__NVIC_SetPriorityGrouping+0x40>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800384c:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 800384e:	4313      	orrs	r3, r2
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <__NVIC_SetPriorityGrouping+0x40>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00
 8003868:	05fa0000 	.word	0x05fa0000

0800386c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003870:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <__NVIC_GetPriorityGrouping+0x18>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	f003 0307 	and.w	r3, r3, #7
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db0b      	blt.n	80038b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4907      	ldr	r1, [pc, #28]	@ (80038c0 <__NVIC_EnableIRQ+0x38>)
 80038a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2001      	movs	r0, #1
 80038aa:	fa00 f202 	lsl.w	r2, r0, r2
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	@ (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	@ (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f1c3 0307 	rsb	r3, r3, #7
 8003932:	2b04      	cmp	r3, #4
 8003934:	bf28      	it	cs
 8003936:	2304      	movcs	r3, #4
 8003938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3304      	adds	r3, #4
 800393e:	2b06      	cmp	r3, #6
 8003940:	d902      	bls.n	8003948 <NVIC_EncodePriority+0x30>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3b03      	subs	r3, #3
 8003946:	e000      	b.n	800394a <NVIC_EncodePriority+0x32>
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003960:	f04f 31ff 	mov.w	r1, #4294967295
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43d9      	mvns	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	4313      	orrs	r3, r2
         );
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	@ 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003990:	d301      	bcc.n	8003996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003992:	2301      	movs	r3, #1
 8003994:	e00f      	b.n	80039b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003996:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <SysTick_Config+0x40>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399e:	210f      	movs	r1, #15
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f7ff ff8e 	bl	80038c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <SysTick_Config+0x40>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ae:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <SysTick_Config+0x40>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	e000e010 	.word	0xe000e010

080039c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ff29 	bl	8003824 <__NVIC_SetPriorityGrouping>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039e8:	f7ff ff40 	bl	800386c <__NVIC_GetPriorityGrouping>
 80039ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	6978      	ldr	r0, [r7, #20]
 80039f4:	f7ff ff90 	bl	8003918 <NVIC_EncodePriority>
 80039f8:	4602      	mov	r2, r0
 80039fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff5f 	bl	80038c4 <__NVIC_SetPriority>
}
 8003a06:	bf00      	nop
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff33 	bl	8003888 <__NVIC_EnableIRQ>
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffa4 	bl	8003980 <SysTick_Config>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a4c:	f7ff feae 	bl	80037ac <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e316      	b.n	800408a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a66      	ldr	r2, [pc, #408]	@ (8003bfc <HAL_DMA_Init+0x1b8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04a      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a65      	ldr	r2, [pc, #404]	@ (8003c00 <HAL_DMA_Init+0x1bc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d045      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a63      	ldr	r2, [pc, #396]	@ (8003c04 <HAL_DMA_Init+0x1c0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d040      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a62      	ldr	r2, [pc, #392]	@ (8003c08 <HAL_DMA_Init+0x1c4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d03b      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a60      	ldr	r2, [pc, #384]	@ (8003c0c <HAL_DMA_Init+0x1c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d036      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5f      	ldr	r2, [pc, #380]	@ (8003c10 <HAL_DMA_Init+0x1cc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d031      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003c14 <HAL_DMA_Init+0x1d0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02c      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8003c18 <HAL_DMA_Init+0x1d4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d027      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8003c1c <HAL_DMA_Init+0x1d8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d022      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a59      	ldr	r2, [pc, #356]	@ (8003c20 <HAL_DMA_Init+0x1dc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d01d      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a57      	ldr	r2, [pc, #348]	@ (8003c24 <HAL_DMA_Init+0x1e0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d018      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a56      	ldr	r2, [pc, #344]	@ (8003c28 <HAL_DMA_Init+0x1e4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a54      	ldr	r2, [pc, #336]	@ (8003c2c <HAL_DMA_Init+0x1e8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00e      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a53      	ldr	r2, [pc, #332]	@ (8003c30 <HAL_DMA_Init+0x1ec>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d009      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a51      	ldr	r2, [pc, #324]	@ (8003c34 <HAL_DMA_Init+0x1f0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_DMA_Init+0xb8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a50      	ldr	r2, [pc, #320]	@ (8003c38 <HAL_DMA_Init+0x1f4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_DMA_Init+0xbc>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_DMA_Init+0xbe>
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 813b 	beq.w	8003d7e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a37      	ldr	r2, [pc, #220]	@ (8003bfc <HAL_DMA_Init+0x1b8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d04a      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a36      	ldr	r2, [pc, #216]	@ (8003c00 <HAL_DMA_Init+0x1bc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d045      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a34      	ldr	r2, [pc, #208]	@ (8003c04 <HAL_DMA_Init+0x1c0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d040      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a33      	ldr	r2, [pc, #204]	@ (8003c08 <HAL_DMA_Init+0x1c4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d03b      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a31      	ldr	r2, [pc, #196]	@ (8003c0c <HAL_DMA_Init+0x1c8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d036      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a30      	ldr	r2, [pc, #192]	@ (8003c10 <HAL_DMA_Init+0x1cc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d031      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2e      	ldr	r2, [pc, #184]	@ (8003c14 <HAL_DMA_Init+0x1d0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d02c      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2d      	ldr	r2, [pc, #180]	@ (8003c18 <HAL_DMA_Init+0x1d4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d027      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c1c <HAL_DMA_Init+0x1d8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d022      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2a      	ldr	r2, [pc, #168]	@ (8003c20 <HAL_DMA_Init+0x1dc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a28      	ldr	r2, [pc, #160]	@ (8003c24 <HAL_DMA_Init+0x1e0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d018      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a27      	ldr	r2, [pc, #156]	@ (8003c28 <HAL_DMA_Init+0x1e4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a25      	ldr	r2, [pc, #148]	@ (8003c2c <HAL_DMA_Init+0x1e8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a24      	ldr	r2, [pc, #144]	@ (8003c30 <HAL_DMA_Init+0x1ec>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d009      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a22      	ldr	r2, [pc, #136]	@ (8003c34 <HAL_DMA_Init+0x1f0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_DMA_Init+0x174>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a21      	ldr	r2, [pc, #132]	@ (8003c38 <HAL_DMA_Init+0x1f4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d108      	bne.n	8003bca <HAL_DMA_Init+0x186>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e007      	b.n	8003bda <HAL_DMA_Init+0x196>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bda:	e02f      	b.n	8003c3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bdc:	f7ff fde6 	bl	80037ac <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d928      	bls.n	8003c3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e246      	b.n	800408a <HAL_DMA_Init+0x646>
 8003bfc:	40020010 	.word	0x40020010
 8003c00:	40020028 	.word	0x40020028
 8003c04:	40020040 	.word	0x40020040
 8003c08:	40020058 	.word	0x40020058
 8003c0c:	40020070 	.word	0x40020070
 8003c10:	40020088 	.word	0x40020088
 8003c14:	400200a0 	.word	0x400200a0
 8003c18:	400200b8 	.word	0x400200b8
 8003c1c:	40020410 	.word	0x40020410
 8003c20:	40020428 	.word	0x40020428
 8003c24:	40020440 	.word	0x40020440
 8003c28:	40020458 	.word	0x40020458
 8003c2c:	40020470 	.word	0x40020470
 8003c30:	40020488 	.word	0x40020488
 8003c34:	400204a0 	.word	0x400204a0
 8003c38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1c8      	bne.n	8003bdc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4b83      	ldr	r3, [pc, #524]	@ (8003e64 <HAL_DMA_Init+0x420>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d107      	bne.n	8003ca0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003ca0:	4b71      	ldr	r3, [pc, #452]	@ (8003e68 <HAL_DMA_Init+0x424>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b71      	ldr	r3, [pc, #452]	@ (8003e6c <HAL_DMA_Init+0x428>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cac:	d328      	bcc.n	8003d00 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b28      	cmp	r3, #40	@ 0x28
 8003cb4:	d903      	bls.n	8003cbe <HAL_DMA_Init+0x27a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cbc:	d917      	bls.n	8003cee <HAL_DMA_Init+0x2aa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cc4:	d903      	bls.n	8003cce <HAL_DMA_Init+0x28a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b42      	cmp	r3, #66	@ 0x42
 8003ccc:	d90f      	bls.n	8003cee <HAL_DMA_Init+0x2aa>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b46      	cmp	r3, #70	@ 0x46
 8003cd4:	d903      	bls.n	8003cde <HAL_DMA_Init+0x29a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b48      	cmp	r3, #72	@ 0x48
 8003cdc:	d907      	bls.n	8003cee <HAL_DMA_Init+0x2aa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b4e      	cmp	r3, #78	@ 0x4e
 8003ce4:	d905      	bls.n	8003cf2 <HAL_DMA_Init+0x2ae>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b52      	cmp	r3, #82	@ 0x52
 8003cec:	d801      	bhi.n	8003cf2 <HAL_DMA_Init+0x2ae>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_DMA_Init+0x2b0>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cfe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0307 	bic.w	r3, r3, #7
 8003d16:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d117      	bne.n	8003d5a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f001 fbff 	bl	8005540 <DMA_CheckFifoParam>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2240      	movs	r2, #64	@ 0x40
 8003d4c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e197      	b.n	800408a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f001 fb3a 	bl	80053dc <DMA_CalcBaseAndBitshift>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	223f      	movs	r2, #63	@ 0x3f
 8003d76:	409a      	lsls	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	e0cd      	b.n	8003f1a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a3b      	ldr	r2, [pc, #236]	@ (8003e70 <HAL_DMA_Init+0x42c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d022      	beq.n	8003dce <HAL_DMA_Init+0x38a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a39      	ldr	r2, [pc, #228]	@ (8003e74 <HAL_DMA_Init+0x430>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01d      	beq.n	8003dce <HAL_DMA_Init+0x38a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a38      	ldr	r2, [pc, #224]	@ (8003e78 <HAL_DMA_Init+0x434>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d018      	beq.n	8003dce <HAL_DMA_Init+0x38a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a36      	ldr	r2, [pc, #216]	@ (8003e7c <HAL_DMA_Init+0x438>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <HAL_DMA_Init+0x38a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a35      	ldr	r2, [pc, #212]	@ (8003e80 <HAL_DMA_Init+0x43c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00e      	beq.n	8003dce <HAL_DMA_Init+0x38a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a33      	ldr	r2, [pc, #204]	@ (8003e84 <HAL_DMA_Init+0x440>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d009      	beq.n	8003dce <HAL_DMA_Init+0x38a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a32      	ldr	r2, [pc, #200]	@ (8003e88 <HAL_DMA_Init+0x444>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_DMA_Init+0x38a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a30      	ldr	r2, [pc, #192]	@ (8003e8c <HAL_DMA_Init+0x448>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_DMA_Init+0x38e>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_DMA_Init+0x390>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8097 	beq.w	8003f08 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a24      	ldr	r2, [pc, #144]	@ (8003e70 <HAL_DMA_Init+0x42c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d021      	beq.n	8003e28 <HAL_DMA_Init+0x3e4>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a22      	ldr	r2, [pc, #136]	@ (8003e74 <HAL_DMA_Init+0x430>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01c      	beq.n	8003e28 <HAL_DMA_Init+0x3e4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <HAL_DMA_Init+0x434>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d017      	beq.n	8003e28 <HAL_DMA_Init+0x3e4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e7c <HAL_DMA_Init+0x438>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d012      	beq.n	8003e28 <HAL_DMA_Init+0x3e4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1e      	ldr	r2, [pc, #120]	@ (8003e80 <HAL_DMA_Init+0x43c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00d      	beq.n	8003e28 <HAL_DMA_Init+0x3e4>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1c      	ldr	r2, [pc, #112]	@ (8003e84 <HAL_DMA_Init+0x440>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d008      	beq.n	8003e28 <HAL_DMA_Init+0x3e4>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003e88 <HAL_DMA_Init+0x444>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <HAL_DMA_Init+0x3e4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <HAL_DMA_Init+0x448>)
 8003e26:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <HAL_DMA_Init+0x44c>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b40      	cmp	r3, #64	@ 0x40
 8003e4e:	d021      	beq.n	8003e94 <HAL_DMA_Init+0x450>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b80      	cmp	r3, #128	@ 0x80
 8003e56:	d102      	bne.n	8003e5e <HAL_DMA_Init+0x41a>
 8003e58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e5c:	e01b      	b.n	8003e96 <HAL_DMA_Init+0x452>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e019      	b.n	8003e96 <HAL_DMA_Init+0x452>
 8003e62:	bf00      	nop
 8003e64:	fe10803f 	.word	0xfe10803f
 8003e68:	5c001000 	.word	0x5c001000
 8003e6c:	ffff0000 	.word	0xffff0000
 8003e70:	58025408 	.word	0x58025408
 8003e74:	5802541c 	.word	0x5802541c
 8003e78:	58025430 	.word	0x58025430
 8003e7c:	58025444 	.word	0x58025444
 8003e80:	58025458 	.word	0x58025458
 8003e84:	5802546c 	.word	0x5802546c
 8003e88:	58025480 	.word	0x58025480
 8003e8c:	58025494 	.word	0x58025494
 8003e90:	fffe000f 	.word	0xfffe000f
 8003e94:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68d2      	ldr	r2, [r2, #12]
 8003e9a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ec4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b6e      	ldr	r3, [pc, #440]	@ (8004094 <HAL_DMA_Init+0x650>)
 8003edc:	4413      	add	r3, r2
 8003ede:	4a6e      	ldr	r2, [pc, #440]	@ (8004098 <HAL_DMA_Init+0x654>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f001 fa75 	bl	80053dc <DMA_CalcBaseAndBitshift>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2201      	movs	r2, #1
 8003f00:	409a      	lsls	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	e008      	b.n	8003f1a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2240      	movs	r2, #64	@ 0x40
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2203      	movs	r2, #3
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0b7      	b.n	800408a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a5f      	ldr	r2, [pc, #380]	@ (800409c <HAL_DMA_Init+0x658>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d072      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a5d      	ldr	r2, [pc, #372]	@ (80040a0 <HAL_DMA_Init+0x65c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d06d      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a5c      	ldr	r2, [pc, #368]	@ (80040a4 <HAL_DMA_Init+0x660>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d068      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a5a      	ldr	r2, [pc, #360]	@ (80040a8 <HAL_DMA_Init+0x664>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d063      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a59      	ldr	r2, [pc, #356]	@ (80040ac <HAL_DMA_Init+0x668>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d05e      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a57      	ldr	r2, [pc, #348]	@ (80040b0 <HAL_DMA_Init+0x66c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d059      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a56      	ldr	r2, [pc, #344]	@ (80040b4 <HAL_DMA_Init+0x670>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d054      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a54      	ldr	r2, [pc, #336]	@ (80040b8 <HAL_DMA_Init+0x674>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d04f      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a53      	ldr	r2, [pc, #332]	@ (80040bc <HAL_DMA_Init+0x678>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d04a      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a51      	ldr	r2, [pc, #324]	@ (80040c0 <HAL_DMA_Init+0x67c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d045      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a50      	ldr	r2, [pc, #320]	@ (80040c4 <HAL_DMA_Init+0x680>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d040      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a4e      	ldr	r2, [pc, #312]	@ (80040c8 <HAL_DMA_Init+0x684>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d03b      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a4d      	ldr	r2, [pc, #308]	@ (80040cc <HAL_DMA_Init+0x688>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d036      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80040d0 <HAL_DMA_Init+0x68c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d031      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a4a      	ldr	r2, [pc, #296]	@ (80040d4 <HAL_DMA_Init+0x690>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d02c      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a48      	ldr	r2, [pc, #288]	@ (80040d8 <HAL_DMA_Init+0x694>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d027      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a47      	ldr	r2, [pc, #284]	@ (80040dc <HAL_DMA_Init+0x698>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a45      	ldr	r2, [pc, #276]	@ (80040e0 <HAL_DMA_Init+0x69c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a44      	ldr	r2, [pc, #272]	@ (80040e4 <HAL_DMA_Init+0x6a0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a42      	ldr	r2, [pc, #264]	@ (80040e8 <HAL_DMA_Init+0x6a4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a41      	ldr	r2, [pc, #260]	@ (80040ec <HAL_DMA_Init+0x6a8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a3f      	ldr	r2, [pc, #252]	@ (80040f0 <HAL_DMA_Init+0x6ac>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80040f4 <HAL_DMA_Init+0x6b0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_DMA_Init+0x5c6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a3c      	ldr	r2, [pc, #240]	@ (80040f8 <HAL_DMA_Init+0x6b4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <HAL_DMA_Init+0x5ca>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <HAL_DMA_Init+0x5cc>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d032      	beq.n	800407a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f001 fb0f 	bl	8005638 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b80      	cmp	r3, #128	@ 0x80
 8004020:	d102      	bne.n	8004028 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800403c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d010      	beq.n	8004068 <HAL_DMA_Init+0x624>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b08      	cmp	r3, #8
 800404c:	d80c      	bhi.n	8004068 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f001 fb8c 	bl	800576c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	e008      	b.n	800407a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	a7fdabf8 	.word	0xa7fdabf8
 8004098:	cccccccd 	.word	0xcccccccd
 800409c:	40020010 	.word	0x40020010
 80040a0:	40020028 	.word	0x40020028
 80040a4:	40020040 	.word	0x40020040
 80040a8:	40020058 	.word	0x40020058
 80040ac:	40020070 	.word	0x40020070
 80040b0:	40020088 	.word	0x40020088
 80040b4:	400200a0 	.word	0x400200a0
 80040b8:	400200b8 	.word	0x400200b8
 80040bc:	40020410 	.word	0x40020410
 80040c0:	40020428 	.word	0x40020428
 80040c4:	40020440 	.word	0x40020440
 80040c8:	40020458 	.word	0x40020458
 80040cc:	40020470 	.word	0x40020470
 80040d0:	40020488 	.word	0x40020488
 80040d4:	400204a0 	.word	0x400204a0
 80040d8:	400204b8 	.word	0x400204b8
 80040dc:	58025408 	.word	0x58025408
 80040e0:	5802541c 	.word	0x5802541c
 80040e4:	58025430 	.word	0x58025430
 80040e8:	58025444 	.word	0x58025444
 80040ec:	58025458 	.word	0x58025458
 80040f0:	5802546c 	.word	0x5802546c
 80040f4:	58025480 	.word	0x58025480
 80040f8:	58025494 	.word	0x58025494

080040fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e237      	b.n	800457e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d004      	beq.n	8004124 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2280      	movs	r2, #128	@ 0x80
 800411e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e22c      	b.n	800457e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a5c      	ldr	r2, [pc, #368]	@ (800429c <HAL_DMA_Abort_IT+0x1a0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d04a      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a5b      	ldr	r2, [pc, #364]	@ (80042a0 <HAL_DMA_Abort_IT+0x1a4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d045      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a59      	ldr	r2, [pc, #356]	@ (80042a4 <HAL_DMA_Abort_IT+0x1a8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d040      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a58      	ldr	r2, [pc, #352]	@ (80042a8 <HAL_DMA_Abort_IT+0x1ac>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d03b      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a56      	ldr	r2, [pc, #344]	@ (80042ac <HAL_DMA_Abort_IT+0x1b0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d036      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a55      	ldr	r2, [pc, #340]	@ (80042b0 <HAL_DMA_Abort_IT+0x1b4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d031      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a53      	ldr	r2, [pc, #332]	@ (80042b4 <HAL_DMA_Abort_IT+0x1b8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d02c      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a52      	ldr	r2, [pc, #328]	@ (80042b8 <HAL_DMA_Abort_IT+0x1bc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d027      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a50      	ldr	r2, [pc, #320]	@ (80042bc <HAL_DMA_Abort_IT+0x1c0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d022      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a4f      	ldr	r2, [pc, #316]	@ (80042c0 <HAL_DMA_Abort_IT+0x1c4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d01d      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a4d      	ldr	r2, [pc, #308]	@ (80042c4 <HAL_DMA_Abort_IT+0x1c8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d018      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a4c      	ldr	r2, [pc, #304]	@ (80042c8 <HAL_DMA_Abort_IT+0x1cc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a4a      	ldr	r2, [pc, #296]	@ (80042cc <HAL_DMA_Abort_IT+0x1d0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00e      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a49      	ldr	r2, [pc, #292]	@ (80042d0 <HAL_DMA_Abort_IT+0x1d4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a47      	ldr	r2, [pc, #284]	@ (80042d4 <HAL_DMA_Abort_IT+0x1d8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <HAL_DMA_Abort_IT+0xc8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a46      	ldr	r2, [pc, #280]	@ (80042d8 <HAL_DMA_Abort_IT+0x1dc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d101      	bne.n	80041c8 <HAL_DMA_Abort_IT+0xcc>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_DMA_Abort_IT+0xce>
 80041c8:	2300      	movs	r3, #0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8086 	beq.w	80042dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2204      	movs	r2, #4
 80041d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2f      	ldr	r2, [pc, #188]	@ (800429c <HAL_DMA_Abort_IT+0x1a0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d04a      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2e      	ldr	r2, [pc, #184]	@ (80042a0 <HAL_DMA_Abort_IT+0x1a4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d045      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2c      	ldr	r2, [pc, #176]	@ (80042a4 <HAL_DMA_Abort_IT+0x1a8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d040      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2b      	ldr	r2, [pc, #172]	@ (80042a8 <HAL_DMA_Abort_IT+0x1ac>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d03b      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a29      	ldr	r2, [pc, #164]	@ (80042ac <HAL_DMA_Abort_IT+0x1b0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d036      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a28      	ldr	r2, [pc, #160]	@ (80042b0 <HAL_DMA_Abort_IT+0x1b4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d031      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a26      	ldr	r2, [pc, #152]	@ (80042b4 <HAL_DMA_Abort_IT+0x1b8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d02c      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a25      	ldr	r2, [pc, #148]	@ (80042b8 <HAL_DMA_Abort_IT+0x1bc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d027      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a23      	ldr	r2, [pc, #140]	@ (80042bc <HAL_DMA_Abort_IT+0x1c0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a22      	ldr	r2, [pc, #136]	@ (80042c0 <HAL_DMA_Abort_IT+0x1c4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d01d      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a20      	ldr	r2, [pc, #128]	@ (80042c4 <HAL_DMA_Abort_IT+0x1c8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d018      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1f      	ldr	r2, [pc, #124]	@ (80042c8 <HAL_DMA_Abort_IT+0x1cc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1d      	ldr	r2, [pc, #116]	@ (80042cc <HAL_DMA_Abort_IT+0x1d0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1c      	ldr	r2, [pc, #112]	@ (80042d0 <HAL_DMA_Abort_IT+0x1d4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1a      	ldr	r2, [pc, #104]	@ (80042d4 <HAL_DMA_Abort_IT+0x1d8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_DMA_Abort_IT+0x17c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a19      	ldr	r2, [pc, #100]	@ (80042d8 <HAL_DMA_Abort_IT+0x1dc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d108      	bne.n	800428a <HAL_DMA_Abort_IT+0x18e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e178      	b.n	800457c <HAL_DMA_Abort_IT+0x480>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e16f      	b.n	800457c <HAL_DMA_Abort_IT+0x480>
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 020e 	bic.w	r2, r2, #14
 80042ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a6c      	ldr	r2, [pc, #432]	@ (80044a4 <HAL_DMA_Abort_IT+0x3a8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d04a      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a6b      	ldr	r2, [pc, #428]	@ (80044a8 <HAL_DMA_Abort_IT+0x3ac>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d045      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a69      	ldr	r2, [pc, #420]	@ (80044ac <HAL_DMA_Abort_IT+0x3b0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d040      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a68      	ldr	r2, [pc, #416]	@ (80044b0 <HAL_DMA_Abort_IT+0x3b4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d03b      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a66      	ldr	r2, [pc, #408]	@ (80044b4 <HAL_DMA_Abort_IT+0x3b8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d036      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a65      	ldr	r2, [pc, #404]	@ (80044b8 <HAL_DMA_Abort_IT+0x3bc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d031      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a63      	ldr	r2, [pc, #396]	@ (80044bc <HAL_DMA_Abort_IT+0x3c0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d02c      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a62      	ldr	r2, [pc, #392]	@ (80044c0 <HAL_DMA_Abort_IT+0x3c4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d027      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a60      	ldr	r2, [pc, #384]	@ (80044c4 <HAL_DMA_Abort_IT+0x3c8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d022      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a5f      	ldr	r2, [pc, #380]	@ (80044c8 <HAL_DMA_Abort_IT+0x3cc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d01d      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5d      	ldr	r2, [pc, #372]	@ (80044cc <HAL_DMA_Abort_IT+0x3d0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d018      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a5c      	ldr	r2, [pc, #368]	@ (80044d0 <HAL_DMA_Abort_IT+0x3d4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a5a      	ldr	r2, [pc, #360]	@ (80044d4 <HAL_DMA_Abort_IT+0x3d8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00e      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a59      	ldr	r2, [pc, #356]	@ (80044d8 <HAL_DMA_Abort_IT+0x3dc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d009      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a57      	ldr	r2, [pc, #348]	@ (80044dc <HAL_DMA_Abort_IT+0x3e0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <HAL_DMA_Abort_IT+0x290>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a56      	ldr	r2, [pc, #344]	@ (80044e0 <HAL_DMA_Abort_IT+0x3e4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d108      	bne.n	800439e <HAL_DMA_Abort_IT+0x2a2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e007      	b.n	80043ae <HAL_DMA_Abort_IT+0x2b2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a3c      	ldr	r2, [pc, #240]	@ (80044a4 <HAL_DMA_Abort_IT+0x3a8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d072      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a3a      	ldr	r2, [pc, #232]	@ (80044a8 <HAL_DMA_Abort_IT+0x3ac>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d06d      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a39      	ldr	r2, [pc, #228]	@ (80044ac <HAL_DMA_Abort_IT+0x3b0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d068      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a37      	ldr	r2, [pc, #220]	@ (80044b0 <HAL_DMA_Abort_IT+0x3b4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d063      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a36      	ldr	r2, [pc, #216]	@ (80044b4 <HAL_DMA_Abort_IT+0x3b8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d05e      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a34      	ldr	r2, [pc, #208]	@ (80044b8 <HAL_DMA_Abort_IT+0x3bc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d059      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a33      	ldr	r2, [pc, #204]	@ (80044bc <HAL_DMA_Abort_IT+0x3c0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d054      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a31      	ldr	r2, [pc, #196]	@ (80044c0 <HAL_DMA_Abort_IT+0x3c4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d04f      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a30      	ldr	r2, [pc, #192]	@ (80044c4 <HAL_DMA_Abort_IT+0x3c8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d04a      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a2e      	ldr	r2, [pc, #184]	@ (80044c8 <HAL_DMA_Abort_IT+0x3cc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d045      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2d      	ldr	r2, [pc, #180]	@ (80044cc <HAL_DMA_Abort_IT+0x3d0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d040      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2b      	ldr	r2, [pc, #172]	@ (80044d0 <HAL_DMA_Abort_IT+0x3d4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d03b      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2a      	ldr	r2, [pc, #168]	@ (80044d4 <HAL_DMA_Abort_IT+0x3d8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d036      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a28      	ldr	r2, [pc, #160]	@ (80044d8 <HAL_DMA_Abort_IT+0x3dc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d031      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a27      	ldr	r2, [pc, #156]	@ (80044dc <HAL_DMA_Abort_IT+0x3e0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d02c      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a25      	ldr	r2, [pc, #148]	@ (80044e0 <HAL_DMA_Abort_IT+0x3e4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d027      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a24      	ldr	r2, [pc, #144]	@ (80044e4 <HAL_DMA_Abort_IT+0x3e8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d022      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a22      	ldr	r2, [pc, #136]	@ (80044e8 <HAL_DMA_Abort_IT+0x3ec>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01d      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a21      	ldr	r2, [pc, #132]	@ (80044ec <HAL_DMA_Abort_IT+0x3f0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d018      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1f      	ldr	r2, [pc, #124]	@ (80044f0 <HAL_DMA_Abort_IT+0x3f4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <HAL_DMA_Abort_IT+0x3f8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1c      	ldr	r2, [pc, #112]	@ (80044f8 <HAL_DMA_Abort_IT+0x3fc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1b      	ldr	r2, [pc, #108]	@ (80044fc <HAL_DMA_Abort_IT+0x400>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_DMA_Abort_IT+0x3a2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <HAL_DMA_Abort_IT+0x404>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d132      	bne.n	8004504 <HAL_DMA_Abort_IT+0x408>
 800449e:	2301      	movs	r3, #1
 80044a0:	e031      	b.n	8004506 <HAL_DMA_Abort_IT+0x40a>
 80044a2:	bf00      	nop
 80044a4:	40020010 	.word	0x40020010
 80044a8:	40020028 	.word	0x40020028
 80044ac:	40020040 	.word	0x40020040
 80044b0:	40020058 	.word	0x40020058
 80044b4:	40020070 	.word	0x40020070
 80044b8:	40020088 	.word	0x40020088
 80044bc:	400200a0 	.word	0x400200a0
 80044c0:	400200b8 	.word	0x400200b8
 80044c4:	40020410 	.word	0x40020410
 80044c8:	40020428 	.word	0x40020428
 80044cc:	40020440 	.word	0x40020440
 80044d0:	40020458 	.word	0x40020458
 80044d4:	40020470 	.word	0x40020470
 80044d8:	40020488 	.word	0x40020488
 80044dc:	400204a0 	.word	0x400204a0
 80044e0:	400204b8 	.word	0x400204b8
 80044e4:	58025408 	.word	0x58025408
 80044e8:	5802541c 	.word	0x5802541c
 80044ec:	58025430 	.word	0x58025430
 80044f0:	58025444 	.word	0x58025444
 80044f4:	58025458 	.word	0x58025458
 80044f8:	5802546c 	.word	0x5802546c
 80044fc:	58025480 	.word	0x58025480
 8004500:	58025494 	.word	0x58025494
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d028      	beq.n	800455c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004518:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	2201      	movs	r2, #1
 800452a:	409a      	lsls	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004538:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800454c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004550:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800455a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop

08004588 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	@ 0x28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004594:	4b67      	ldr	r3, [pc, #412]	@ (8004734 <HAL_DMA_IRQHandler+0x1ac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a67      	ldr	r2, [pc, #412]	@ (8004738 <HAL_DMA_IRQHandler+0x1b0>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	0a9b      	lsrs	r3, r3, #10
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a5f      	ldr	r2, [pc, #380]	@ (800473c <HAL_DMA_IRQHandler+0x1b4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d04a      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a5d      	ldr	r2, [pc, #372]	@ (8004740 <HAL_DMA_IRQHandler+0x1b8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d045      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004744 <HAL_DMA_IRQHandler+0x1bc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d040      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004748 <HAL_DMA_IRQHandler+0x1c0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d03b      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a59      	ldr	r2, [pc, #356]	@ (800474c <HAL_DMA_IRQHandler+0x1c4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d036      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a57      	ldr	r2, [pc, #348]	@ (8004750 <HAL_DMA_IRQHandler+0x1c8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d031      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a56      	ldr	r2, [pc, #344]	@ (8004754 <HAL_DMA_IRQHandler+0x1cc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d02c      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a54      	ldr	r2, [pc, #336]	@ (8004758 <HAL_DMA_IRQHandler+0x1d0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d027      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a53      	ldr	r2, [pc, #332]	@ (800475c <HAL_DMA_IRQHandler+0x1d4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d022      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a51      	ldr	r2, [pc, #324]	@ (8004760 <HAL_DMA_IRQHandler+0x1d8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01d      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a50      	ldr	r2, [pc, #320]	@ (8004764 <HAL_DMA_IRQHandler+0x1dc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a4e      	ldr	r2, [pc, #312]	@ (8004768 <HAL_DMA_IRQHandler+0x1e0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a4d      	ldr	r2, [pc, #308]	@ (800476c <HAL_DMA_IRQHandler+0x1e4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a4b      	ldr	r2, [pc, #300]	@ (8004770 <HAL_DMA_IRQHandler+0x1e8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a4a      	ldr	r2, [pc, #296]	@ (8004774 <HAL_DMA_IRQHandler+0x1ec>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <HAL_DMA_IRQHandler+0xd2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a48      	ldr	r2, [pc, #288]	@ (8004778 <HAL_DMA_IRQHandler+0x1f0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d101      	bne.n	800465e <HAL_DMA_IRQHandler+0xd6>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <HAL_DMA_IRQHandler+0xd8>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 842b 	beq.w	8004ebc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	2208      	movs	r2, #8
 8004670:	409a      	lsls	r2, r3
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80a2 	beq.w	80047c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2e      	ldr	r2, [pc, #184]	@ (800473c <HAL_DMA_IRQHandler+0x1b4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d04a      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2d      	ldr	r2, [pc, #180]	@ (8004740 <HAL_DMA_IRQHandler+0x1b8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d045      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2b      	ldr	r2, [pc, #172]	@ (8004744 <HAL_DMA_IRQHandler+0x1bc>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d040      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2a      	ldr	r2, [pc, #168]	@ (8004748 <HAL_DMA_IRQHandler+0x1c0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d03b      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a28      	ldr	r2, [pc, #160]	@ (800474c <HAL_DMA_IRQHandler+0x1c4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d036      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a27      	ldr	r2, [pc, #156]	@ (8004750 <HAL_DMA_IRQHandler+0x1c8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d031      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a25      	ldr	r2, [pc, #148]	@ (8004754 <HAL_DMA_IRQHandler+0x1cc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d02c      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a24      	ldr	r2, [pc, #144]	@ (8004758 <HAL_DMA_IRQHandler+0x1d0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d027      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a22      	ldr	r2, [pc, #136]	@ (800475c <HAL_DMA_IRQHandler+0x1d4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d022      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a21      	ldr	r2, [pc, #132]	@ (8004760 <HAL_DMA_IRQHandler+0x1d8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d01d      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004764 <HAL_DMA_IRQHandler+0x1dc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d018      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004768 <HAL_DMA_IRQHandler+0x1e0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1c      	ldr	r2, [pc, #112]	@ (800476c <HAL_DMA_IRQHandler+0x1e4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00e      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1b      	ldr	r2, [pc, #108]	@ (8004770 <HAL_DMA_IRQHandler+0x1e8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a19      	ldr	r2, [pc, #100]	@ (8004774 <HAL_DMA_IRQHandler+0x1ec>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_DMA_IRQHandler+0x194>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a18      	ldr	r2, [pc, #96]	@ (8004778 <HAL_DMA_IRQHandler+0x1f0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d12f      	bne.n	800477c <HAL_DMA_IRQHandler+0x1f4>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e02e      	b.n	8004790 <HAL_DMA_IRQHandler+0x208>
 8004732:	bf00      	nop
 8004734:	24000004 	.word	0x24000004
 8004738:	1b4e81b5 	.word	0x1b4e81b5
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d015      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0204 	bic.w	r2, r2, #4
 80047a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2208      	movs	r2, #8
 80047ae:	409a      	lsls	r2, r3
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b8:	f043 0201 	orr.w	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d06e      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a69      	ldr	r2, [pc, #420]	@ (8004980 <HAL_DMA_IRQHandler+0x3f8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d04a      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a67      	ldr	r2, [pc, #412]	@ (8004984 <HAL_DMA_IRQHandler+0x3fc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d045      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a66      	ldr	r2, [pc, #408]	@ (8004988 <HAL_DMA_IRQHandler+0x400>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d040      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a64      	ldr	r2, [pc, #400]	@ (800498c <HAL_DMA_IRQHandler+0x404>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d03b      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a63      	ldr	r2, [pc, #396]	@ (8004990 <HAL_DMA_IRQHandler+0x408>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d036      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a61      	ldr	r2, [pc, #388]	@ (8004994 <HAL_DMA_IRQHandler+0x40c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d031      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a60      	ldr	r2, [pc, #384]	@ (8004998 <HAL_DMA_IRQHandler+0x410>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d02c      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a5e      	ldr	r2, [pc, #376]	@ (800499c <HAL_DMA_IRQHandler+0x414>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d027      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a5d      	ldr	r2, [pc, #372]	@ (80049a0 <HAL_DMA_IRQHandler+0x418>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d022      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a5b      	ldr	r2, [pc, #364]	@ (80049a4 <HAL_DMA_IRQHandler+0x41c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01d      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a5a      	ldr	r2, [pc, #360]	@ (80049a8 <HAL_DMA_IRQHandler+0x420>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d018      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a58      	ldr	r2, [pc, #352]	@ (80049ac <HAL_DMA_IRQHandler+0x424>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a57      	ldr	r2, [pc, #348]	@ (80049b0 <HAL_DMA_IRQHandler+0x428>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00e      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a55      	ldr	r2, [pc, #340]	@ (80049b4 <HAL_DMA_IRQHandler+0x42c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a54      	ldr	r2, [pc, #336]	@ (80049b8 <HAL_DMA_IRQHandler+0x430>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_DMA_IRQHandler+0x2ee>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a52      	ldr	r2, [pc, #328]	@ (80049bc <HAL_DMA_IRQHandler+0x434>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d10a      	bne.n	800488c <HAL_DMA_IRQHandler+0x304>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e003      	b.n	8004894 <HAL_DMA_IRQHandler+0x30c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00d      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2201      	movs	r2, #1
 80048a2:	409a      	lsls	r2, r3
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ac:	f043 0202 	orr.w	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2204      	movs	r2, #4
 80048be:	409a      	lsls	r2, r3
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 808f 	beq.w	80049e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004980 <HAL_DMA_IRQHandler+0x3f8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d04a      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004984 <HAL_DMA_IRQHandler+0x3fc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d045      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a29      	ldr	r2, [pc, #164]	@ (8004988 <HAL_DMA_IRQHandler+0x400>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d040      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a27      	ldr	r2, [pc, #156]	@ (800498c <HAL_DMA_IRQHandler+0x404>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d03b      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a26      	ldr	r2, [pc, #152]	@ (8004990 <HAL_DMA_IRQHandler+0x408>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d036      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a24      	ldr	r2, [pc, #144]	@ (8004994 <HAL_DMA_IRQHandler+0x40c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d031      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a23      	ldr	r2, [pc, #140]	@ (8004998 <HAL_DMA_IRQHandler+0x410>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d02c      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a21      	ldr	r2, [pc, #132]	@ (800499c <HAL_DMA_IRQHandler+0x414>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d027      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a20      	ldr	r2, [pc, #128]	@ (80049a0 <HAL_DMA_IRQHandler+0x418>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d022      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1e      	ldr	r2, [pc, #120]	@ (80049a4 <HAL_DMA_IRQHandler+0x41c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01d      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1d      	ldr	r2, [pc, #116]	@ (80049a8 <HAL_DMA_IRQHandler+0x420>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ac <HAL_DMA_IRQHandler+0x424>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1a      	ldr	r2, [pc, #104]	@ (80049b0 <HAL_DMA_IRQHandler+0x428>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a18      	ldr	r2, [pc, #96]	@ (80049b4 <HAL_DMA_IRQHandler+0x42c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a17      	ldr	r2, [pc, #92]	@ (80049b8 <HAL_DMA_IRQHandler+0x430>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_DMA_IRQHandler+0x3e2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a15      	ldr	r2, [pc, #84]	@ (80049bc <HAL_DMA_IRQHandler+0x434>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d12a      	bne.n	80049c0 <HAL_DMA_IRQHandler+0x438>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf14      	ite	ne
 8004978:	2301      	movne	r3, #1
 800497a:	2300      	moveq	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e023      	b.n	80049c8 <HAL_DMA_IRQHandler+0x440>
 8004980:	40020010 	.word	0x40020010
 8004984:	40020028 	.word	0x40020028
 8004988:	40020040 	.word	0x40020040
 800498c:	40020058 	.word	0x40020058
 8004990:	40020070 	.word	0x40020070
 8004994:	40020088 	.word	0x40020088
 8004998:	400200a0 	.word	0x400200a0
 800499c:	400200b8 	.word	0x400200b8
 80049a0:	40020410 	.word	0x40020410
 80049a4:	40020428 	.word	0x40020428
 80049a8:	40020440 	.word	0x40020440
 80049ac:	40020458 	.word	0x40020458
 80049b0:	40020470 	.word	0x40020470
 80049b4:	40020488 	.word	0x40020488
 80049b8:	400204a0 	.word	0x400204a0
 80049bc:	400204b8 	.word	0x400204b8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2300      	movs	r3, #0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	2204      	movs	r2, #4
 80049d6:	409a      	lsls	r2, r3
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e0:	f043 0204 	orr.w	r2, r3, #4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	2210      	movs	r2, #16
 80049f2:	409a      	lsls	r2, r3
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80a6 	beq.w	8004b4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a85      	ldr	r2, [pc, #532]	@ (8004c18 <HAL_DMA_IRQHandler+0x690>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d04a      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a83      	ldr	r2, [pc, #524]	@ (8004c1c <HAL_DMA_IRQHandler+0x694>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d045      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a82      	ldr	r2, [pc, #520]	@ (8004c20 <HAL_DMA_IRQHandler+0x698>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d040      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a80      	ldr	r2, [pc, #512]	@ (8004c24 <HAL_DMA_IRQHandler+0x69c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d03b      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a7f      	ldr	r2, [pc, #508]	@ (8004c28 <HAL_DMA_IRQHandler+0x6a0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d036      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a7d      	ldr	r2, [pc, #500]	@ (8004c2c <HAL_DMA_IRQHandler+0x6a4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d031      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c30 <HAL_DMA_IRQHandler+0x6a8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d02c      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a7a      	ldr	r2, [pc, #488]	@ (8004c34 <HAL_DMA_IRQHandler+0x6ac>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d027      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a79      	ldr	r2, [pc, #484]	@ (8004c38 <HAL_DMA_IRQHandler+0x6b0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d022      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a77      	ldr	r2, [pc, #476]	@ (8004c3c <HAL_DMA_IRQHandler+0x6b4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01d      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a76      	ldr	r2, [pc, #472]	@ (8004c40 <HAL_DMA_IRQHandler+0x6b8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a74      	ldr	r2, [pc, #464]	@ (8004c44 <HAL_DMA_IRQHandler+0x6bc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a73      	ldr	r2, [pc, #460]	@ (8004c48 <HAL_DMA_IRQHandler+0x6c0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a71      	ldr	r2, [pc, #452]	@ (8004c4c <HAL_DMA_IRQHandler+0x6c4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a70      	ldr	r2, [pc, #448]	@ (8004c50 <HAL_DMA_IRQHandler+0x6c8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x516>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a6e      	ldr	r2, [pc, #440]	@ (8004c54 <HAL_DMA_IRQHandler+0x6cc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10a      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0x52c>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e009      	b.n	8004ac8 <HAL_DMA_IRQHandler+0x540>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf14      	ite	ne
 8004ac2:	2301      	movne	r3, #1
 8004ac4:	2300      	moveq	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d03e      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d108      	bne.n	8004b0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d024      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
 8004b08:	e01f      	b.n	8004b4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01b      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	e016      	b.n	8004b4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0208 	bic.w	r2, r2, #8
 8004b38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2220      	movs	r2, #32
 8004b54:	409a      	lsls	r2, r3
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8110 	beq.w	8004d80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2c      	ldr	r2, [pc, #176]	@ (8004c18 <HAL_DMA_IRQHandler+0x690>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d04a      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8004c1c <HAL_DMA_IRQHandler+0x694>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d045      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a29      	ldr	r2, [pc, #164]	@ (8004c20 <HAL_DMA_IRQHandler+0x698>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d040      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a28      	ldr	r2, [pc, #160]	@ (8004c24 <HAL_DMA_IRQHandler+0x69c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d03b      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a26      	ldr	r2, [pc, #152]	@ (8004c28 <HAL_DMA_IRQHandler+0x6a0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d036      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a25      	ldr	r2, [pc, #148]	@ (8004c2c <HAL_DMA_IRQHandler+0x6a4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d031      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a23      	ldr	r2, [pc, #140]	@ (8004c30 <HAL_DMA_IRQHandler+0x6a8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d02c      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a22      	ldr	r2, [pc, #136]	@ (8004c34 <HAL_DMA_IRQHandler+0x6ac>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d027      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a20      	ldr	r2, [pc, #128]	@ (8004c38 <HAL_DMA_IRQHandler+0x6b0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d022      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8004c3c <HAL_DMA_IRQHandler+0x6b4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d01d      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c40 <HAL_DMA_IRQHandler+0x6b8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d018      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c44 <HAL_DMA_IRQHandler+0x6bc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d013      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8004c48 <HAL_DMA_IRQHandler+0x6c0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00e      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a19      	ldr	r2, [pc, #100]	@ (8004c4c <HAL_DMA_IRQHandler+0x6c4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <HAL_DMA_IRQHandler+0x6c8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x678>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a16      	ldr	r2, [pc, #88]	@ (8004c54 <HAL_DMA_IRQHandler+0x6cc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d12b      	bne.n	8004c58 <HAL_DMA_IRQHandler+0x6d0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bf14      	ite	ne
 8004c0e:	2301      	movne	r3, #1
 8004c10:	2300      	moveq	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	e02a      	b.n	8004c6c <HAL_DMA_IRQHandler+0x6e4>
 8004c16:	bf00      	nop
 8004c18:	40020010 	.word	0x40020010
 8004c1c:	40020028 	.word	0x40020028
 8004c20:	40020040 	.word	0x40020040
 8004c24:	40020058 	.word	0x40020058
 8004c28:	40020070 	.word	0x40020070
 8004c2c:	40020088 	.word	0x40020088
 8004c30:	400200a0 	.word	0x400200a0
 8004c34:	400200b8 	.word	0x400200b8
 8004c38:	40020410 	.word	0x40020410
 8004c3c:	40020428 	.word	0x40020428
 8004c40:	40020440 	.word	0x40020440
 8004c44:	40020458 	.word	0x40020458
 8004c48:	40020470 	.word	0x40020470
 8004c4c:	40020488 	.word	0x40020488
 8004c50:	400204a0 	.word	0x400204a0
 8004c54:	400204b8 	.word	0x400204b8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8087 	beq.w	8004d80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d139      	bne.n	8004d02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0216 	bic.w	r2, r2, #22
 8004c9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x736>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0208 	bic.w	r2, r2, #8
 8004ccc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	223f      	movs	r2, #63	@ 0x3f
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 834a 	beq.w	800538c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
          }
          return;
 8004d00:	e344      	b.n	800538c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d018      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d02c      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4798      	blx	r3
 8004d2e:	e027      	b.n	8004d80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d023      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
 8004d40:	e01e      	b.n	8004d80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10f      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0210 	bic.w	r2, r2, #16
 8004d5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8306 	beq.w	8005396 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8088 	beq.w	8004ea8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a7a      	ldr	r2, [pc, #488]	@ (8004f90 <HAL_DMA_IRQHandler+0xa08>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d04a      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a79      	ldr	r2, [pc, #484]	@ (8004f94 <HAL_DMA_IRQHandler+0xa0c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d045      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a77      	ldr	r2, [pc, #476]	@ (8004f98 <HAL_DMA_IRQHandler+0xa10>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d040      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a76      	ldr	r2, [pc, #472]	@ (8004f9c <HAL_DMA_IRQHandler+0xa14>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d03b      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a74      	ldr	r2, [pc, #464]	@ (8004fa0 <HAL_DMA_IRQHandler+0xa18>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d036      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a73      	ldr	r2, [pc, #460]	@ (8004fa4 <HAL_DMA_IRQHandler+0xa1c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d031      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a71      	ldr	r2, [pc, #452]	@ (8004fa8 <HAL_DMA_IRQHandler+0xa20>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d02c      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a70      	ldr	r2, [pc, #448]	@ (8004fac <HAL_DMA_IRQHandler+0xa24>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d027      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a6e      	ldr	r2, [pc, #440]	@ (8004fb0 <HAL_DMA_IRQHandler+0xa28>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d022      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8004fb4 <HAL_DMA_IRQHandler+0xa2c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d01d      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6b      	ldr	r2, [pc, #428]	@ (8004fb8 <HAL_DMA_IRQHandler+0xa30>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d018      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6a      	ldr	r2, [pc, #424]	@ (8004fbc <HAL_DMA_IRQHandler+0xa34>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d013      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a68      	ldr	r2, [pc, #416]	@ (8004fc0 <HAL_DMA_IRQHandler+0xa38>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00e      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a67      	ldr	r2, [pc, #412]	@ (8004fc4 <HAL_DMA_IRQHandler+0xa3c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a65      	ldr	r2, [pc, #404]	@ (8004fc8 <HAL_DMA_IRQHandler+0xa40>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x8b8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a64      	ldr	r2, [pc, #400]	@ (8004fcc <HAL_DMA_IRQHandler+0xa44>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d108      	bne.n	8004e52 <HAL_DMA_IRQHandler+0x8ca>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e007      	b.n	8004e62 <HAL_DMA_IRQHandler+0x8da>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d307      	bcc.n	8004e7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f2      	bne.n	8004e62 <HAL_DMA_IRQHandler+0x8da>
 8004e7c:	e000      	b.n	8004e80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2203      	movs	r2, #3
 8004e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004e96:	e003      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8272 	beq.w	8005396 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
 8004eba:	e26c      	b.n	8005396 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a43      	ldr	r2, [pc, #268]	@ (8004fd0 <HAL_DMA_IRQHandler+0xa48>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x984>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a42      	ldr	r2, [pc, #264]	@ (8004fd4 <HAL_DMA_IRQHandler+0xa4c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d01d      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x984>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a40      	ldr	r2, [pc, #256]	@ (8004fd8 <HAL_DMA_IRQHandler+0xa50>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x984>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a3f      	ldr	r2, [pc, #252]	@ (8004fdc <HAL_DMA_IRQHandler+0xa54>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x984>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a3d      	ldr	r2, [pc, #244]	@ (8004fe0 <HAL_DMA_IRQHandler+0xa58>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x984>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a3c      	ldr	r2, [pc, #240]	@ (8004fe4 <HAL_DMA_IRQHandler+0xa5c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x984>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a3a      	ldr	r2, [pc, #232]	@ (8004fe8 <HAL_DMA_IRQHandler+0xa60>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x984>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a39      	ldr	r2, [pc, #228]	@ (8004fec <HAL_DMA_IRQHandler+0xa64>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <HAL_DMA_IRQHandler+0x988>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_DMA_IRQHandler+0x98a>
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 823f 	beq.w	8005396 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	2204      	movs	r2, #4
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80cd 	beq.w	80050d0 <HAL_DMA_IRQHandler+0xb48>
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80c7 	beq.w	80050d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d049      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8210 	beq.w	8005390 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f78:	e20a      	b.n	8005390 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8206 	beq.w	8005390 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f8c:	e200      	b.n	8005390 <HAL_DMA_IRQHandler+0xe08>
 8004f8e:	bf00      	nop
 8004f90:	40020010 	.word	0x40020010
 8004f94:	40020028 	.word	0x40020028
 8004f98:	40020040 	.word	0x40020040
 8004f9c:	40020058 	.word	0x40020058
 8004fa0:	40020070 	.word	0x40020070
 8004fa4:	40020088 	.word	0x40020088
 8004fa8:	400200a0 	.word	0x400200a0
 8004fac:	400200b8 	.word	0x400200b8
 8004fb0:	40020410 	.word	0x40020410
 8004fb4:	40020428 	.word	0x40020428
 8004fb8:	40020440 	.word	0x40020440
 8004fbc:	40020458 	.word	0x40020458
 8004fc0:	40020470 	.word	0x40020470
 8004fc4:	40020488 	.word	0x40020488
 8004fc8:	400204a0 	.word	0x400204a0
 8004fcc:	400204b8 	.word	0x400204b8
 8004fd0:	58025408 	.word	0x58025408
 8004fd4:	5802541c 	.word	0x5802541c
 8004fd8:	58025430 	.word	0x58025430
 8004fdc:	58025444 	.word	0x58025444
 8004fe0:	58025458 	.word	0x58025458
 8004fe4:	5802546c 	.word	0x5802546c
 8004fe8:	58025480 	.word	0x58025480
 8004fec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d160      	bne.n	80050bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7f      	ldr	r2, [pc, #508]	@ (80051fc <HAL_DMA_IRQHandler+0xc74>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d04a      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a7d      	ldr	r2, [pc, #500]	@ (8005200 <HAL_DMA_IRQHandler+0xc78>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d045      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7c      	ldr	r2, [pc, #496]	@ (8005204 <HAL_DMA_IRQHandler+0xc7c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d040      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7a      	ldr	r2, [pc, #488]	@ (8005208 <HAL_DMA_IRQHandler+0xc80>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d03b      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a79      	ldr	r2, [pc, #484]	@ (800520c <HAL_DMA_IRQHandler+0xc84>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d036      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a77      	ldr	r2, [pc, #476]	@ (8005210 <HAL_DMA_IRQHandler+0xc88>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d031      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a76      	ldr	r2, [pc, #472]	@ (8005214 <HAL_DMA_IRQHandler+0xc8c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d02c      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a74      	ldr	r2, [pc, #464]	@ (8005218 <HAL_DMA_IRQHandler+0xc90>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d027      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a73      	ldr	r2, [pc, #460]	@ (800521c <HAL_DMA_IRQHandler+0xc94>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d022      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a71      	ldr	r2, [pc, #452]	@ (8005220 <HAL_DMA_IRQHandler+0xc98>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01d      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a70      	ldr	r2, [pc, #448]	@ (8005224 <HAL_DMA_IRQHandler+0xc9c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d018      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a6e      	ldr	r2, [pc, #440]	@ (8005228 <HAL_DMA_IRQHandler+0xca0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a6d      	ldr	r2, [pc, #436]	@ (800522c <HAL_DMA_IRQHandler+0xca4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a6b      	ldr	r2, [pc, #428]	@ (8005230 <HAL_DMA_IRQHandler+0xca8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a6a      	ldr	r2, [pc, #424]	@ (8005234 <HAL_DMA_IRQHandler+0xcac>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_DMA_IRQHandler+0xb12>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a68      	ldr	r2, [pc, #416]	@ (8005238 <HAL_DMA_IRQHandler+0xcb0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d108      	bne.n	80050ac <HAL_DMA_IRQHandler+0xb24>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0208 	bic.w	r2, r2, #8
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e007      	b.n	80050bc <HAL_DMA_IRQHandler+0xb34>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8165 	beq.w	8005390 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050ce:	e15f      	b.n	8005390 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	2202      	movs	r2, #2
 80050da:	409a      	lsls	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4013      	ands	r3, r2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80c5 	beq.w	8005270 <HAL_DMA_IRQHandler+0xce8>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80bf 	beq.w	8005270 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2202      	movs	r2, #2
 80050fc:	409a      	lsls	r2, r3
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d018      	beq.n	800513e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 813a 	beq.w	8005394 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005128:	e134      	b.n	8005394 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8130 	beq.w	8005394 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800513c:	e12a      	b.n	8005394 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	f040 8089 	bne.w	800525c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2b      	ldr	r2, [pc, #172]	@ (80051fc <HAL_DMA_IRQHandler+0xc74>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d04a      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a29      	ldr	r2, [pc, #164]	@ (8005200 <HAL_DMA_IRQHandler+0xc78>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d045      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a28      	ldr	r2, [pc, #160]	@ (8005204 <HAL_DMA_IRQHandler+0xc7c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d040      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a26      	ldr	r2, [pc, #152]	@ (8005208 <HAL_DMA_IRQHandler+0xc80>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d03b      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a25      	ldr	r2, [pc, #148]	@ (800520c <HAL_DMA_IRQHandler+0xc84>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d036      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a23      	ldr	r2, [pc, #140]	@ (8005210 <HAL_DMA_IRQHandler+0xc88>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d031      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a22      	ldr	r2, [pc, #136]	@ (8005214 <HAL_DMA_IRQHandler+0xc8c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d02c      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a20      	ldr	r2, [pc, #128]	@ (8005218 <HAL_DMA_IRQHandler+0xc90>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d027      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1f      	ldr	r2, [pc, #124]	@ (800521c <HAL_DMA_IRQHandler+0xc94>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <HAL_DMA_IRQHandler+0xc98>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01d      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <HAL_DMA_IRQHandler+0xc9c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005228 <HAL_DMA_IRQHandler+0xca0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a19      	ldr	r2, [pc, #100]	@ (800522c <HAL_DMA_IRQHandler+0xca4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a17      	ldr	r2, [pc, #92]	@ (8005230 <HAL_DMA_IRQHandler+0xca8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a16      	ldr	r2, [pc, #88]	@ (8005234 <HAL_DMA_IRQHandler+0xcac>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_DMA_IRQHandler+0xc62>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a14      	ldr	r2, [pc, #80]	@ (8005238 <HAL_DMA_IRQHandler+0xcb0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d128      	bne.n	800523c <HAL_DMA_IRQHandler+0xcb4>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0214 	bic.w	r2, r2, #20
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e027      	b.n	800524c <HAL_DMA_IRQHandler+0xcc4>
 80051fc:	40020010 	.word	0x40020010
 8005200:	40020028 	.word	0x40020028
 8005204:	40020040 	.word	0x40020040
 8005208:	40020058 	.word	0x40020058
 800520c:	40020070 	.word	0x40020070
 8005210:	40020088 	.word	0x40020088
 8005214:	400200a0 	.word	0x400200a0
 8005218:	400200b8 	.word	0x400200b8
 800521c:	40020410 	.word	0x40020410
 8005220:	40020428 	.word	0x40020428
 8005224:	40020440 	.word	0x40020440
 8005228:	40020458 	.word	0x40020458
 800522c:	40020470 	.word	0x40020470
 8005230:	40020488 	.word	0x40020488
 8005234:	400204a0 	.word	0x400204a0
 8005238:	400204b8 	.word	0x400204b8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 020a 	bic.w	r2, r2, #10
 800524a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8097 	beq.w	8005394 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800526e:	e091      	b.n	8005394 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	2208      	movs	r2, #8
 800527a:	409a      	lsls	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8088 	beq.w	8005396 <HAL_DMA_IRQHandler+0xe0e>
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8082 	beq.w	8005396 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a41      	ldr	r2, [pc, #260]	@ (800539c <HAL_DMA_IRQHandler+0xe14>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d04a      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a3f      	ldr	r2, [pc, #252]	@ (80053a0 <HAL_DMA_IRQHandler+0xe18>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d045      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3e      	ldr	r2, [pc, #248]	@ (80053a4 <HAL_DMA_IRQHandler+0xe1c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d040      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a3c      	ldr	r2, [pc, #240]	@ (80053a8 <HAL_DMA_IRQHandler+0xe20>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d03b      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a3b      	ldr	r2, [pc, #236]	@ (80053ac <HAL_DMA_IRQHandler+0xe24>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d036      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a39      	ldr	r2, [pc, #228]	@ (80053b0 <HAL_DMA_IRQHandler+0xe28>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d031      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a38      	ldr	r2, [pc, #224]	@ (80053b4 <HAL_DMA_IRQHandler+0xe2c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d02c      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a36      	ldr	r2, [pc, #216]	@ (80053b8 <HAL_DMA_IRQHandler+0xe30>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d027      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a35      	ldr	r2, [pc, #212]	@ (80053bc <HAL_DMA_IRQHandler+0xe34>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d022      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a33      	ldr	r2, [pc, #204]	@ (80053c0 <HAL_DMA_IRQHandler+0xe38>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01d      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a32      	ldr	r2, [pc, #200]	@ (80053c4 <HAL_DMA_IRQHandler+0xe3c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d018      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a30      	ldr	r2, [pc, #192]	@ (80053c8 <HAL_DMA_IRQHandler+0xe40>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2f      	ldr	r2, [pc, #188]	@ (80053cc <HAL_DMA_IRQHandler+0xe44>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00e      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2d      	ldr	r2, [pc, #180]	@ (80053d0 <HAL_DMA_IRQHandler+0xe48>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d009      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2c      	ldr	r2, [pc, #176]	@ (80053d4 <HAL_DMA_IRQHandler+0xe4c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <HAL_DMA_IRQHandler+0xdaa>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2a      	ldr	r2, [pc, #168]	@ (80053d8 <HAL_DMA_IRQHandler+0xe50>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <HAL_DMA_IRQHandler+0xdbc>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 021c 	bic.w	r2, r2, #28
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e007      	b.n	8005354 <HAL_DMA_IRQHandler+0xdcc>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 020e 	bic.w	r2, r2, #14
 8005352:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2201      	movs	r2, #1
 800535e:	409a      	lsls	r2, r3
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
 800538a:	e004      	b.n	8005396 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800538c:	bf00      	nop
 800538e:	e002      	b.n	8005396 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005394:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005396:	3728      	adds	r7, #40	@ 0x28
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40020010 	.word	0x40020010
 80053a0:	40020028 	.word	0x40020028
 80053a4:	40020040 	.word	0x40020040
 80053a8:	40020058 	.word	0x40020058
 80053ac:	40020070 	.word	0x40020070
 80053b0:	40020088 	.word	0x40020088
 80053b4:	400200a0 	.word	0x400200a0
 80053b8:	400200b8 	.word	0x400200b8
 80053bc:	40020410 	.word	0x40020410
 80053c0:	40020428 	.word	0x40020428
 80053c4:	40020440 	.word	0x40020440
 80053c8:	40020458 	.word	0x40020458
 80053cc:	40020470 	.word	0x40020470
 80053d0:	40020488 	.word	0x40020488
 80053d4:	400204a0 	.word	0x400204a0
 80053d8:	400204b8 	.word	0x400204b8

080053dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a42      	ldr	r2, [pc, #264]	@ (80054f4 <DMA_CalcBaseAndBitshift+0x118>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d04a      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a41      	ldr	r2, [pc, #260]	@ (80054f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d045      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a3f      	ldr	r2, [pc, #252]	@ (80054fc <DMA_CalcBaseAndBitshift+0x120>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d040      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3e      	ldr	r2, [pc, #248]	@ (8005500 <DMA_CalcBaseAndBitshift+0x124>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d03b      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a3c      	ldr	r2, [pc, #240]	@ (8005504 <DMA_CalcBaseAndBitshift+0x128>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d036      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a3b      	ldr	r2, [pc, #236]	@ (8005508 <DMA_CalcBaseAndBitshift+0x12c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d031      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a39      	ldr	r2, [pc, #228]	@ (800550c <DMA_CalcBaseAndBitshift+0x130>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d02c      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a38      	ldr	r2, [pc, #224]	@ (8005510 <DMA_CalcBaseAndBitshift+0x134>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d027      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a36      	ldr	r2, [pc, #216]	@ (8005514 <DMA_CalcBaseAndBitshift+0x138>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d022      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a35      	ldr	r2, [pc, #212]	@ (8005518 <DMA_CalcBaseAndBitshift+0x13c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d01d      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a33      	ldr	r2, [pc, #204]	@ (800551c <DMA_CalcBaseAndBitshift+0x140>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a32      	ldr	r2, [pc, #200]	@ (8005520 <DMA_CalcBaseAndBitshift+0x144>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a30      	ldr	r2, [pc, #192]	@ (8005524 <DMA_CalcBaseAndBitshift+0x148>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2f      	ldr	r2, [pc, #188]	@ (8005528 <DMA_CalcBaseAndBitshift+0x14c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2d      	ldr	r2, [pc, #180]	@ (800552c <DMA_CalcBaseAndBitshift+0x150>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <DMA_CalcBaseAndBitshift+0xa8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2c      	ldr	r2, [pc, #176]	@ (8005530 <DMA_CalcBaseAndBitshift+0x154>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d101      	bne.n	8005488 <DMA_CalcBaseAndBitshift+0xac>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <DMA_CalcBaseAndBitshift+0xae>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d024      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	3b10      	subs	r3, #16
 8005496:	4a27      	ldr	r2, [pc, #156]	@ (8005534 <DMA_CalcBaseAndBitshift+0x158>)
 8005498:	fba2 2303 	umull	r2, r3, r2, r3
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	4a24      	ldr	r2, [pc, #144]	@ (8005538 <DMA_CalcBaseAndBitshift+0x15c>)
 80054a8:	5cd3      	ldrb	r3, [r2, r3]
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d908      	bls.n	80054c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	4b1f      	ldr	r3, [pc, #124]	@ (800553c <DMA_CalcBaseAndBitshift+0x160>)
 80054be:	4013      	ands	r3, r2
 80054c0:	1d1a      	adds	r2, r3, #4
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80054c6:	e00d      	b.n	80054e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b1b      	ldr	r3, [pc, #108]	@ (800553c <DMA_CalcBaseAndBitshift+0x160>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80054d6:	e005      	b.n	80054e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	40020010 	.word	0x40020010
 80054f8:	40020028 	.word	0x40020028
 80054fc:	40020040 	.word	0x40020040
 8005500:	40020058 	.word	0x40020058
 8005504:	40020070 	.word	0x40020070
 8005508:	40020088 	.word	0x40020088
 800550c:	400200a0 	.word	0x400200a0
 8005510:	400200b8 	.word	0x400200b8
 8005514:	40020410 	.word	0x40020410
 8005518:	40020428 	.word	0x40020428
 800551c:	40020440 	.word	0x40020440
 8005520:	40020458 	.word	0x40020458
 8005524:	40020470 	.word	0x40020470
 8005528:	40020488 	.word	0x40020488
 800552c:	400204a0 	.word	0x400204a0
 8005530:	400204b8 	.word	0x400204b8
 8005534:	aaaaaaab 	.word	0xaaaaaaab
 8005538:	0800fa30 	.word	0x0800fa30
 800553c:	fffffc00 	.word	0xfffffc00

08005540 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d120      	bne.n	8005596 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005558:	2b03      	cmp	r3, #3
 800555a:	d858      	bhi.n	800560e <DMA_CheckFifoParam+0xce>
 800555c:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <DMA_CheckFifoParam+0x24>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005575 	.word	0x08005575
 8005568:	08005587 	.word	0x08005587
 800556c:	08005575 	.word	0x08005575
 8005570:	0800560f 	.word	0x0800560f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d048      	beq.n	8005612 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005584:	e045      	b.n	8005612 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800558e:	d142      	bne.n	8005616 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005594:	e03f      	b.n	8005616 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800559e:	d123      	bne.n	80055e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d838      	bhi.n	800561a <DMA_CheckFifoParam+0xda>
 80055a8:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <DMA_CheckFifoParam+0x70>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055c1 	.word	0x080055c1
 80055b4:	080055c7 	.word	0x080055c7
 80055b8:	080055c1 	.word	0x080055c1
 80055bc:	080055d9 	.word	0x080055d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
        break;
 80055c4:	e030      	b.n	8005628 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d025      	beq.n	800561e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055d6:	e022      	b.n	800561e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055e0:	d11f      	bne.n	8005622 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055e6:	e01c      	b.n	8005622 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d902      	bls.n	80055f6 <DMA_CheckFifoParam+0xb6>
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d003      	beq.n	80055fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80055f4:	e018      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
        break;
 80055fa:	e015      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00e      	beq.n	8005626 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
    break;
 800560c:	e00b      	b.n	8005626 <DMA_CheckFifoParam+0xe6>
        break;
 800560e:	bf00      	nop
 8005610:	e00a      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
        break;
 8005612:	bf00      	nop
 8005614:	e008      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
        break;
 8005616:	bf00      	nop
 8005618:	e006      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
        break;
 800561a:	bf00      	nop
 800561c:	e004      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
        break;
 800561e:	bf00      	nop
 8005620:	e002      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
        break;
 8005622:	bf00      	nop
 8005624:	e000      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
    break;
 8005626:	bf00      	nop
    }
  }

  return status;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop

08005638 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a38      	ldr	r2, [pc, #224]	@ (800572c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d022      	beq.n	8005696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a36      	ldr	r2, [pc, #216]	@ (8005730 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01d      	beq.n	8005696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a35      	ldr	r2, [pc, #212]	@ (8005734 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d018      	beq.n	8005696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a33      	ldr	r2, [pc, #204]	@ (8005738 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a32      	ldr	r2, [pc, #200]	@ (800573c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a30      	ldr	r2, [pc, #192]	@ (8005740 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a2f      	ldr	r2, [pc, #188]	@ (8005744 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a2d      	ldr	r2, [pc, #180]	@ (8005748 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01a      	beq.n	80056d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	3b08      	subs	r3, #8
 80056a8:	4a28      	ldr	r2, [pc, #160]	@ (800574c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80056aa:	fba2 2303 	umull	r2, r3, r2, r3
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4b26      	ldr	r3, [pc, #152]	@ (8005750 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	461a      	mov	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a24      	ldr	r2, [pc, #144]	@ (8005754 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80056c4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	2201      	movs	r2, #1
 80056ce:	409a      	lsls	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80056d4:	e024      	b.n	8005720 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	3b10      	subs	r3, #16
 80056de:	4a1e      	ldr	r2, [pc, #120]	@ (8005758 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4a1c      	ldr	r2, [pc, #112]	@ (800575c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d806      	bhi.n	80056fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005760 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d902      	bls.n	80056fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3308      	adds	r3, #8
 80056fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4b18      	ldr	r3, [pc, #96]	@ (8005764 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a16      	ldr	r2, [pc, #88]	@ (8005768 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005710:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	2201      	movs	r2, #1
 800571a:	409a      	lsls	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	58025408 	.word	0x58025408
 8005730:	5802541c 	.word	0x5802541c
 8005734:	58025430 	.word	0x58025430
 8005738:	58025444 	.word	0x58025444
 800573c:	58025458 	.word	0x58025458
 8005740:	5802546c 	.word	0x5802546c
 8005744:	58025480 	.word	0x58025480
 8005748:	58025494 	.word	0x58025494
 800574c:	cccccccd 	.word	0xcccccccd
 8005750:	16009600 	.word	0x16009600
 8005754:	58025880 	.word	0x58025880
 8005758:	aaaaaaab 	.word	0xaaaaaaab
 800575c:	400204b8 	.word	0x400204b8
 8005760:	4002040f 	.word	0x4002040f
 8005764:	10008200 	.word	0x10008200
 8005768:	40020880 	.word	0x40020880

0800576c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d04a      	beq.n	8005818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d847      	bhi.n	8005818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a25      	ldr	r2, [pc, #148]	@ (8005824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d022      	beq.n	80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a24      	ldr	r2, [pc, #144]	@ (8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d01d      	beq.n	80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a22      	ldr	r2, [pc, #136]	@ (800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a21      	ldr	r2, [pc, #132]	@ (8005830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1e      	ldr	r2, [pc, #120]	@ (8005838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1c      	ldr	r2, [pc, #112]	@ (800583c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d101      	bne.n	80057dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80057dc:	2300      	movs	r3, #0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4b17      	ldr	r3, [pc, #92]	@ (8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	461a      	mov	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a15      	ldr	r2, [pc, #84]	@ (8005848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80057f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80057f6:	e009      	b.n	800580c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4b14      	ldr	r3, [pc, #80]	@ (800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a11      	ldr	r2, [pc, #68]	@ (8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800580a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3b01      	subs	r3, #1
 8005810:	2201      	movs	r2, #1
 8005812:	409a      	lsls	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	58025408 	.word	0x58025408
 8005828:	5802541c 	.word	0x5802541c
 800582c:	58025430 	.word	0x58025430
 8005830:	58025444 	.word	0x58025444
 8005834:	58025458 	.word	0x58025458
 8005838:	5802546c 	.word	0x5802546c
 800583c:	58025480 	.word	0x58025480
 8005840:	58025494 	.word	0x58025494
 8005844:	1600963f 	.word	0x1600963f
 8005848:	58025940 	.word	0x58025940
 800584c:	1000823f 	.word	0x1000823f
 8005850:	40020940 	.word	0x40020940

08005854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005854:	b480      	push	{r7}
 8005856:	b089      	sub	sp, #36	@ 0x24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005862:	4b89      	ldr	r3, [pc, #548]	@ (8005a88 <HAL_GPIO_Init+0x234>)
 8005864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005866:	e194      	b.n	8005b92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	2101      	movs	r1, #1
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	fa01 f303 	lsl.w	r3, r1, r3
 8005874:	4013      	ands	r3, r2
 8005876:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 8186 	beq.w	8005b8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	2b01      	cmp	r3, #1
 800588a:	d005      	beq.n	8005898 <HAL_GPIO_Init+0x44>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d130      	bne.n	80058fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	2203      	movs	r2, #3
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	43db      	mvns	r3, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4013      	ands	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058ce:	2201      	movs	r2, #1
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4013      	ands	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	091b      	lsrs	r3, r3, #4
 80058e4:	f003 0201 	and.w	r2, r3, #1
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b03      	cmp	r3, #3
 8005904:	d017      	beq.n	8005936 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	2203      	movs	r2, #3
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4013      	ands	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d123      	bne.n	800598a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	08da      	lsrs	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3208      	adds	r2, #8
 800594a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	220f      	movs	r2, #15
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	43db      	mvns	r3, r3
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4013      	ands	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4313      	orrs	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	08da      	lsrs	r2, r3, #3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3208      	adds	r2, #8
 8005984:	69b9      	ldr	r1, [r7, #24]
 8005986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	2203      	movs	r2, #3
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f003 0203 	and.w	r2, r3, #3
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 80e0 	beq.w	8005b8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059cc:	4b2f      	ldr	r3, [pc, #188]	@ (8005a8c <HAL_GPIO_Init+0x238>)
 80059ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059d2:	4a2e      	ldr	r2, [pc, #184]	@ (8005a8c <HAL_GPIO_Init+0x238>)
 80059d4:	f043 0302 	orr.w	r3, r3, #2
 80059d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80059dc:	4b2b      	ldr	r3, [pc, #172]	@ (8005a8c <HAL_GPIO_Init+0x238>)
 80059de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ea:	4a29      	ldr	r2, [pc, #164]	@ (8005a90 <HAL_GPIO_Init+0x23c>)
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	089b      	lsrs	r3, r3, #2
 80059f0:	3302      	adds	r3, #2
 80059f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	220f      	movs	r2, #15
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a20      	ldr	r2, [pc, #128]	@ (8005a94 <HAL_GPIO_Init+0x240>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d052      	beq.n	8005abc <HAL_GPIO_Init+0x268>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1f      	ldr	r2, [pc, #124]	@ (8005a98 <HAL_GPIO_Init+0x244>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d031      	beq.n	8005a82 <HAL_GPIO_Init+0x22e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1e      	ldr	r2, [pc, #120]	@ (8005a9c <HAL_GPIO_Init+0x248>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d02b      	beq.n	8005a7e <HAL_GPIO_Init+0x22a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa0 <HAL_GPIO_Init+0x24c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d025      	beq.n	8005a7a <HAL_GPIO_Init+0x226>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1c      	ldr	r2, [pc, #112]	@ (8005aa4 <HAL_GPIO_Init+0x250>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d01f      	beq.n	8005a76 <HAL_GPIO_Init+0x222>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa8 <HAL_GPIO_Init+0x254>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d019      	beq.n	8005a72 <HAL_GPIO_Init+0x21e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1a      	ldr	r2, [pc, #104]	@ (8005aac <HAL_GPIO_Init+0x258>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <HAL_GPIO_Init+0x21a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a19      	ldr	r2, [pc, #100]	@ (8005ab0 <HAL_GPIO_Init+0x25c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00d      	beq.n	8005a6a <HAL_GPIO_Init+0x216>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a18      	ldr	r2, [pc, #96]	@ (8005ab4 <HAL_GPIO_Init+0x260>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d007      	beq.n	8005a66 <HAL_GPIO_Init+0x212>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <HAL_GPIO_Init+0x264>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d101      	bne.n	8005a62 <HAL_GPIO_Init+0x20e>
 8005a5e:	2309      	movs	r3, #9
 8005a60:	e02d      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a62:	230a      	movs	r3, #10
 8005a64:	e02b      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a66:	2308      	movs	r3, #8
 8005a68:	e029      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a6a:	2307      	movs	r3, #7
 8005a6c:	e027      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a6e:	2306      	movs	r3, #6
 8005a70:	e025      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a72:	2305      	movs	r3, #5
 8005a74:	e023      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a76:	2304      	movs	r3, #4
 8005a78:	e021      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e01f      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e01d      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e01b      	b.n	8005abe <HAL_GPIO_Init+0x26a>
 8005a86:	bf00      	nop
 8005a88:	58000080 	.word	0x58000080
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	58000400 	.word	0x58000400
 8005a94:	58020000 	.word	0x58020000
 8005a98:	58020400 	.word	0x58020400
 8005a9c:	58020800 	.word	0x58020800
 8005aa0:	58020c00 	.word	0x58020c00
 8005aa4:	58021000 	.word	0x58021000
 8005aa8:	58021400 	.word	0x58021400
 8005aac:	58021800 	.word	0x58021800
 8005ab0:	58021c00 	.word	0x58021c00
 8005ab4:	58022000 	.word	0x58022000
 8005ab8:	58022400 	.word	0x58022400
 8005abc:	2300      	movs	r3, #0
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	f002 0203 	and.w	r2, r2, #3
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	4093      	lsls	r3, r2
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ace:	4938      	ldr	r1, [pc, #224]	@ (8005bb0 <HAL_GPIO_Init+0x35c>)
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	089b      	lsrs	r3, r3, #2
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4013      	ands	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4013      	ands	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f47f ae63 	bne.w	8005868 <HAL_GPIO_Init+0x14>
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	bf00      	nop
 8005ba6:	3724      	adds	r7, #36	@ 0x24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	58000400 	.word	0x58000400

08005bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	807b      	strh	r3, [r7, #2]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bc4:	787b      	ldrb	r3, [r7, #1]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bca:	887a      	ldrh	r2, [r7, #2]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005bd0:	e003      	b.n	8005bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	041a      	lsls	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	619a      	str	r2, [r3, #24]
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e10d      	b.n	8005e16 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fd f94a 	bl	8002ea8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d107      	bne.n	8005c3a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0201 	bic.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d008      	beq.n	8005c5c <HAL_I2S_Init+0x74>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d004      	beq.n	8005c5c <HAL_I2S_Init+0x74>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b0a      	cmp	r3, #10
 8005c58:	f040 8087 	bne.w	8005d6a <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d05a      	beq.n	8005d1a <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e001      	b.n	8005c76 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8005c72:	2301      	movs	r3, #1
 8005c74:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b30      	cmp	r3, #48	@ 0x30
 8005c7c:	d003      	beq.n	8005c86 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005c82:	2bb0      	cmp	r3, #176	@ 0xb0
 8005c84:	d102      	bne.n	8005c8c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8005c86:	2301      	movs	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e001      	b.n	8005c90 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8005c90:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005c94:	f04f 0100 	mov.w	r1, #0
 8005c98:	f002 fadc 	bl	8008254 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c9c:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ca6:	d113      	bne.n	8005cd0 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	3305      	adds	r3, #5
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	e014      	b.n	8005cfa <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	461a      	mov	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	3305      	adds	r3, #5
 8005cf8:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4a48      	ldr	r2, [pc, #288]	@ (8005e20 <HAL_I2S_Init+0x238>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	08db      	lsrs	r3, r3, #3
 8005d04:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	e003      	b.n	8005d22 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d102      	bne.n	8005d2e <HAL_I2S_Init+0x146>
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d002      	beq.n	8005d34 <HAL_I2S_Init+0x14c>
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	2bff      	cmp	r3, #255	@ 0xff
 8005d32:	d907      	bls.n	8005d44 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d38:	f043 0210 	orr.w	r2, r3, #16
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e068      	b.n	8005e16 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d54:	4b33      	ldr	r3, [pc, #204]	@ (8005e24 <HAL_I2S_Init+0x23c>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	0411      	lsls	r1, r2, #16
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0612      	lsls	r2, r2, #24
 8005d60:	4311      	orrs	r1, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	430b      	orrs	r3, r1
 8005d68:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d70:	4b2d      	ldr	r3, [pc, #180]	@ (8005e28 <HAL_I2S_Init+0x240>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6851      	ldr	r1, [r2, #4]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6892      	ldr	r2, [r2, #8]
 8005d7c:	4311      	orrs	r1, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68d2      	ldr	r2, [r2, #12]
 8005d82:	4311      	orrs	r1, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6992      	ldr	r2, [r2, #24]
 8005d88:	4311      	orrs	r1, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6a12      	ldr	r2, [r2, #32]
 8005d8e:	4311      	orrs	r1, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d94:	4311      	orrs	r1, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6912      	ldr	r2, [r2, #16]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8005db0:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005dc0:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d007      	beq.n	8005df0 <HAL_I2S_Init+0x208>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b06      	cmp	r3, #6
 8005de6:	d003      	beq.n	8005df0 <HAL_I2S_Init+0x208>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b0a      	cmp	r3, #10
 8005dee:	d10a      	bne.n	8005e06 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3720      	adds	r7, #32
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	cccccccd 	.word	0xcccccccd
 8005e24:	fe00ffff 	.word	0xfe00ffff
 8005e28:	fdff9040 	.word	0xfdff9040

08005e2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e34:	4b19      	ldr	r3, [pc, #100]	@ (8005e9c <HAL_PWREx_ConfigSupply+0x70>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d00a      	beq.n	8005e56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e40:	4b16      	ldr	r3, [pc, #88]	@ (8005e9c <HAL_PWREx_ConfigSupply+0x70>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d001      	beq.n	8005e52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e01f      	b.n	8005e92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e01d      	b.n	8005e92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e56:	4b11      	ldr	r3, [pc, #68]	@ (8005e9c <HAL_PWREx_ConfigSupply+0x70>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f023 0207 	bic.w	r2, r3, #7
 8005e5e:	490f      	ldr	r1, [pc, #60]	@ (8005e9c <HAL_PWREx_ConfigSupply+0x70>)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e66:	f7fd fca1 	bl	80037ac <HAL_GetTick>
 8005e6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e6c:	e009      	b.n	8005e82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e6e:	f7fd fc9d 	bl	80037ac <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e7c:	d901      	bls.n	8005e82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e007      	b.n	8005e92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e82:	4b06      	ldr	r3, [pc, #24]	@ (8005e9c <HAL_PWREx_ConfigSupply+0x70>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e8e:	d1ee      	bne.n	8005e6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	58024800 	.word	0x58024800

08005ea0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08c      	sub	sp, #48	@ 0x30
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f000 bc48 	b.w	8006744 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8088 	beq.w	8005fd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ec2:	4b99      	ldr	r3, [pc, #612]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ecc:	4b96      	ldr	r3, [pc, #600]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d007      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x48>
 8005ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eda:	2b18      	cmp	r3, #24
 8005edc:	d111      	bne.n	8005f02 <HAL_RCC_OscConfig+0x62>
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d10c      	bne.n	8005f02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee8:	4b8f      	ldr	r3, [pc, #572]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d06d      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x130>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d169      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f000 bc21 	b.w	8006744 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f0a:	d106      	bne.n	8005f1a <HAL_RCC_OscConfig+0x7a>
 8005f0c:	4b86      	ldr	r3, [pc, #536]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a85      	ldr	r2, [pc, #532]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	e02e      	b.n	8005f78 <HAL_RCC_OscConfig+0xd8>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x9c>
 8005f22:	4b81      	ldr	r3, [pc, #516]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a80      	ldr	r2, [pc, #512]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	4b7e      	ldr	r3, [pc, #504]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a7d      	ldr	r2, [pc, #500]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e01d      	b.n	8005f78 <HAL_RCC_OscConfig+0xd8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCC_OscConfig+0xc0>
 8005f46:	4b78      	ldr	r3, [pc, #480]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a77      	ldr	r2, [pc, #476]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	4b75      	ldr	r3, [pc, #468]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a74      	ldr	r2, [pc, #464]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e00b      	b.n	8005f78 <HAL_RCC_OscConfig+0xd8>
 8005f60:	4b71      	ldr	r3, [pc, #452]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a70      	ldr	r2, [pc, #448]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b6e      	ldr	r3, [pc, #440]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a6d      	ldr	r2, [pc, #436]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d013      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fd fc14 	bl	80037ac <HAL_GetTick>
 8005f84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fd fc10 	bl	80037ac <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	@ 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e3d4      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f9a:	4b63      	ldr	r3, [pc, #396]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0f0      	beq.n	8005f88 <HAL_RCC_OscConfig+0xe8>
 8005fa6:	e014      	b.n	8005fd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa8:	f7fd fc00 	bl	80037ac <HAL_GetTick>
 8005fac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb0:	f7fd fbfc 	bl	80037ac <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	@ 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e3c0      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fc2:	4b59      	ldr	r3, [pc, #356]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x110>
 8005fce:	e000      	b.n	8005fd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80ca 	beq.w	8006174 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe0:	4b51      	ldr	r3, [pc, #324]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fe8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fea:	4b4f      	ldr	r3, [pc, #316]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8005fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <HAL_RCC_OscConfig+0x166>
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	2b18      	cmp	r3, #24
 8005ffa:	d156      	bne.n	80060aa <HAL_RCC_OscConfig+0x20a>
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d151      	bne.n	80060aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006006:	4b48      	ldr	r3, [pc, #288]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_RCC_OscConfig+0x17e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e392      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800601e:	4b42      	ldr	r3, [pc, #264]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 0219 	bic.w	r2, r3, #25
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	493f      	ldr	r1, [pc, #252]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 800602c:	4313      	orrs	r3, r2
 800602e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fd fbbc 	bl	80037ac <HAL_GetTick>
 8006034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006038:	f7fd fbb8 	bl	80037ac <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e37c      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800604a:	4b37      	ldr	r3, [pc, #220]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006056:	f7fd fbd9 	bl	800380c <HAL_GetREVID>
 800605a:	4603      	mov	r3, r0
 800605c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006060:	4293      	cmp	r3, r2
 8006062:	d817      	bhi.n	8006094 <HAL_RCC_OscConfig+0x1f4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b40      	cmp	r3, #64	@ 0x40
 800606a:	d108      	bne.n	800607e <HAL_RCC_OscConfig+0x1de>
 800606c:	4b2e      	ldr	r3, [pc, #184]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006074:	4a2c      	ldr	r2, [pc, #176]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8006076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800607a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800607c:	e07a      	b.n	8006174 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607e:	4b2a      	ldr	r3, [pc, #168]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	031b      	lsls	r3, r3, #12
 800608c:	4926      	ldr	r1, [pc, #152]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 800608e:	4313      	orrs	r3, r2
 8006090:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006092:	e06f      	b.n	8006174 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006094:	4b24      	ldr	r3, [pc, #144]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	4921      	ldr	r1, [pc, #132]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060a8:	e064      	b.n	8006174 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d047      	beq.n	8006142 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 0219 	bic.w	r2, r3, #25
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	491a      	ldr	r1, [pc, #104]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c4:	f7fd fb72 	bl	80037ac <HAL_GetTick>
 80060c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060cc:	f7fd fb6e 	bl	80037ac <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e332      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060de:	4b12      	ldr	r3, [pc, #72]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ea:	f7fd fb8f 	bl	800380c <HAL_GetREVID>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d819      	bhi.n	800612c <HAL_RCC_OscConfig+0x28c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b40      	cmp	r3, #64	@ 0x40
 80060fe:	d108      	bne.n	8006112 <HAL_RCC_OscConfig+0x272>
 8006100:	4b09      	ldr	r3, [pc, #36]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006108:	4a07      	ldr	r2, [pc, #28]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 800610a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800610e:	6053      	str	r3, [r2, #4]
 8006110:	e030      	b.n	8006174 <HAL_RCC_OscConfig+0x2d4>
 8006112:	4b05      	ldr	r3, [pc, #20]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	031b      	lsls	r3, r3, #12
 8006120:	4901      	ldr	r1, [pc, #4]	@ (8006128 <HAL_RCC_OscConfig+0x288>)
 8006122:	4313      	orrs	r3, r2
 8006124:	604b      	str	r3, [r1, #4]
 8006126:	e025      	b.n	8006174 <HAL_RCC_OscConfig+0x2d4>
 8006128:	58024400 	.word	0x58024400
 800612c:	4b9a      	ldr	r3, [pc, #616]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	061b      	lsls	r3, r3, #24
 800613a:	4997      	ldr	r1, [pc, #604]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800613c:	4313      	orrs	r3, r2
 800613e:	604b      	str	r3, [r1, #4]
 8006140:	e018      	b.n	8006174 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006142:	4b95      	ldr	r3, [pc, #596]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a94      	ldr	r2, [pc, #592]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006148:	f023 0301 	bic.w	r3, r3, #1
 800614c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614e:	f7fd fb2d 	bl	80037ac <HAL_GetTick>
 8006152:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006156:	f7fd fb29 	bl	80037ac <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e2ed      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006168:	4b8b      	ldr	r3, [pc, #556]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f0      	bne.n	8006156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80a9 	beq.w	80062d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006182:	4b85      	ldr	r3, [pc, #532]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800618a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800618c:	4b82      	ldr	r3, [pc, #520]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b08      	cmp	r3, #8
 8006196:	d007      	beq.n	80061a8 <HAL_RCC_OscConfig+0x308>
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b18      	cmp	r3, #24
 800619c:	d13a      	bne.n	8006214 <HAL_RCC_OscConfig+0x374>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d135      	bne.n	8006214 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061a8:	4b7b      	ldr	r3, [pc, #492]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <HAL_RCC_OscConfig+0x320>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	2b80      	cmp	r3, #128	@ 0x80
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e2c1      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061c0:	f7fd fb24 	bl	800380c <HAL_GetREVID>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d817      	bhi.n	80061fe <HAL_RCC_OscConfig+0x35e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d108      	bne.n	80061e8 <HAL_RCC_OscConfig+0x348>
 80061d6:	4b70      	ldr	r3, [pc, #448]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061de:	4a6e      	ldr	r2, [pc, #440]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80061e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061e6:	e075      	b.n	80062d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061e8:	4b6b      	ldr	r3, [pc, #428]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	069b      	lsls	r3, r3, #26
 80061f6:	4968      	ldr	r1, [pc, #416]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061fc:	e06a      	b.n	80062d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061fe:	4b66      	ldr	r3, [pc, #408]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	061b      	lsls	r3, r3, #24
 800620c:	4962      	ldr	r1, [pc, #392]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800620e:	4313      	orrs	r3, r2
 8006210:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006212:	e05f      	b.n	80062d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d042      	beq.n	80062a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800621c:	4b5e      	ldr	r3, [pc, #376]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a5d      	ldr	r2, [pc, #372]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fd fac0 	bl	80037ac <HAL_GetTick>
 800622c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006230:	f7fd fabc 	bl	80037ac <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e280      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006242:	4b55      	ldr	r3, [pc, #340]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f0      	beq.n	8006230 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800624e:	f7fd fadd 	bl	800380c <HAL_GetREVID>
 8006252:	4603      	mov	r3, r0
 8006254:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006258:	4293      	cmp	r3, r2
 800625a:	d817      	bhi.n	800628c <HAL_RCC_OscConfig+0x3ec>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	2b20      	cmp	r3, #32
 8006262:	d108      	bne.n	8006276 <HAL_RCC_OscConfig+0x3d6>
 8006264:	4b4c      	ldr	r3, [pc, #304]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800626c:	4a4a      	ldr	r2, [pc, #296]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800626e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006272:	6053      	str	r3, [r2, #4]
 8006274:	e02e      	b.n	80062d4 <HAL_RCC_OscConfig+0x434>
 8006276:	4b48      	ldr	r3, [pc, #288]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	069b      	lsls	r3, r3, #26
 8006284:	4944      	ldr	r1, [pc, #272]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006286:	4313      	orrs	r3, r2
 8006288:	604b      	str	r3, [r1, #4]
 800628a:	e023      	b.n	80062d4 <HAL_RCC_OscConfig+0x434>
 800628c:	4b42      	ldr	r3, [pc, #264]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	061b      	lsls	r3, r3, #24
 800629a:	493f      	ldr	r1, [pc, #252]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800629c:	4313      	orrs	r3, r2
 800629e:	60cb      	str	r3, [r1, #12]
 80062a0:	e018      	b.n	80062d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062a2:	4b3d      	ldr	r3, [pc, #244]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a3c      	ldr	r2, [pc, #240]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80062a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ae:	f7fd fa7d 	bl	80037ac <HAL_GetTick>
 80062b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062b6:	f7fd fa79 	bl	80037ac <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e23d      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062c8:	4b33      	ldr	r3, [pc, #204]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f0      	bne.n	80062b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d036      	beq.n	800634e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d019      	beq.n	800631c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80062ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f4:	f7fd fa5a 	bl	80037ac <HAL_GetTick>
 80062f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062fc:	f7fd fa56 	bl	80037ac <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e21a      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800630e:	4b22      	ldr	r3, [pc, #136]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0f0      	beq.n	80062fc <HAL_RCC_OscConfig+0x45c>
 800631a:	e018      	b.n	800634e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800631c:	4b1e      	ldr	r3, [pc, #120]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800631e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006320:	4a1d      	ldr	r2, [pc, #116]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006322:	f023 0301 	bic.w	r3, r3, #1
 8006326:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006328:	f7fd fa40 	bl	80037ac <HAL_GetTick>
 800632c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006330:	f7fd fa3c 	bl	80037ac <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e200      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006342:	4b15      	ldr	r3, [pc, #84]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d039      	beq.n	80063ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01c      	beq.n	800639c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a0c      	ldr	r2, [pc, #48]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 8006368:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800636c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800636e:	f7fd fa1d 	bl	80037ac <HAL_GetTick>
 8006372:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006376:	f7fd fa19 	bl	80037ac <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e1dd      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006388:	4b03      	ldr	r3, [pc, #12]	@ (8006398 <HAL_RCC_OscConfig+0x4f8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0f0      	beq.n	8006376 <HAL_RCC_OscConfig+0x4d6>
 8006394:	e01b      	b.n	80063ce <HAL_RCC_OscConfig+0x52e>
 8006396:	bf00      	nop
 8006398:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800639c:	4b9b      	ldr	r3, [pc, #620]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a9a      	ldr	r2, [pc, #616]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80063a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063a8:	f7fd fa00 	bl	80037ac <HAL_GetTick>
 80063ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063b0:	f7fd f9fc 	bl	80037ac <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e1c0      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063c2:	4b92      	ldr	r3, [pc, #584]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f0      	bne.n	80063b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8081 	beq.w	80064de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063dc:	4b8c      	ldr	r3, [pc, #560]	@ (8006610 <HAL_RCC_OscConfig+0x770>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a8b      	ldr	r2, [pc, #556]	@ (8006610 <HAL_RCC_OscConfig+0x770>)
 80063e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063e8:	f7fd f9e0 	bl	80037ac <HAL_GetTick>
 80063ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063f0:	f7fd f9dc 	bl	80037ac <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b64      	cmp	r3, #100	@ 0x64
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e1a0      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006402:	4b83      	ldr	r3, [pc, #524]	@ (8006610 <HAL_RCC_OscConfig+0x770>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d106      	bne.n	8006424 <HAL_RCC_OscConfig+0x584>
 8006416:	4b7d      	ldr	r3, [pc, #500]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641a:	4a7c      	ldr	r2, [pc, #496]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	6713      	str	r3, [r2, #112]	@ 0x70
 8006422:	e02d      	b.n	8006480 <HAL_RCC_OscConfig+0x5e0>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10c      	bne.n	8006446 <HAL_RCC_OscConfig+0x5a6>
 800642c:	4b77      	ldr	r3, [pc, #476]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006430:	4a76      	ldr	r2, [pc, #472]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	6713      	str	r3, [r2, #112]	@ 0x70
 8006438:	4b74      	ldr	r3, [pc, #464]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643c:	4a73      	ldr	r2, [pc, #460]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800643e:	f023 0304 	bic.w	r3, r3, #4
 8006442:	6713      	str	r3, [r2, #112]	@ 0x70
 8006444:	e01c      	b.n	8006480 <HAL_RCC_OscConfig+0x5e0>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2b05      	cmp	r3, #5
 800644c:	d10c      	bne.n	8006468 <HAL_RCC_OscConfig+0x5c8>
 800644e:	4b6f      	ldr	r3, [pc, #444]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006452:	4a6e      	ldr	r2, [pc, #440]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006454:	f043 0304 	orr.w	r3, r3, #4
 8006458:	6713      	str	r3, [r2, #112]	@ 0x70
 800645a:	4b6c      	ldr	r3, [pc, #432]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645e:	4a6b      	ldr	r2, [pc, #428]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006460:	f043 0301 	orr.w	r3, r3, #1
 8006464:	6713      	str	r3, [r2, #112]	@ 0x70
 8006466:	e00b      	b.n	8006480 <HAL_RCC_OscConfig+0x5e0>
 8006468:	4b68      	ldr	r3, [pc, #416]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800646a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646c:	4a67      	ldr	r2, [pc, #412]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	6713      	str	r3, [r2, #112]	@ 0x70
 8006474:	4b65      	ldr	r3, [pc, #404]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006478:	4a64      	ldr	r2, [pc, #400]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800647a:	f023 0304 	bic.w	r3, r3, #4
 800647e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d015      	beq.n	80064b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006488:	f7fd f990 	bl	80037ac <HAL_GetTick>
 800648c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800648e:	e00a      	b.n	80064a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006490:	f7fd f98c 	bl	80037ac <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800649e:	4293      	cmp	r3, r2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e14e      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064a6:	4b59      	ldr	r3, [pc, #356]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0ee      	beq.n	8006490 <HAL_RCC_OscConfig+0x5f0>
 80064b2:	e014      	b.n	80064de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b4:	f7fd f97a 	bl	80037ac <HAL_GetTick>
 80064b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064ba:	e00a      	b.n	80064d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064bc:	f7fd f976 	bl	80037ac <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e138      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064d2:	4b4e      	ldr	r3, [pc, #312]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1ee      	bne.n	80064bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 812d 	beq.w	8006742 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064e8:	4b48      	ldr	r3, [pc, #288]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064f0:	2b18      	cmp	r3, #24
 80064f2:	f000 80bd 	beq.w	8006670 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	f040 809e 	bne.w	800663c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006500:	4b42      	ldr	r3, [pc, #264]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a41      	ldr	r2, [pc, #260]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800650a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7fd f94e 	bl	80037ac <HAL_GetTick>
 8006510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006514:	f7fd f94a 	bl	80037ac <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e10e      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006526:	4b39      	ldr	r3, [pc, #228]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f0      	bne.n	8006514 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006532:	4b36      	ldr	r3, [pc, #216]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006534:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006536:	4b37      	ldr	r3, [pc, #220]	@ (8006614 <HAL_RCC_OscConfig+0x774>)
 8006538:	4013      	ands	r3, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006542:	0112      	lsls	r2, r2, #4
 8006544:	430a      	orrs	r2, r1
 8006546:	4931      	ldr	r1, [pc, #196]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006548:	4313      	orrs	r3, r2
 800654a:	628b      	str	r3, [r1, #40]	@ 0x28
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006550:	3b01      	subs	r3, #1
 8006552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655a:	3b01      	subs	r3, #1
 800655c:	025b      	lsls	r3, r3, #9
 800655e:	b29b      	uxth	r3, r3
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006566:	3b01      	subs	r3, #1
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006574:	3b01      	subs	r3, #1
 8006576:	061b      	lsls	r3, r3, #24
 8006578:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800657c:	4923      	ldr	r1, [pc, #140]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800657e:	4313      	orrs	r3, r2
 8006580:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006582:	4b22      	ldr	r3, [pc, #136]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006586:	4a21      	ldr	r2, [pc, #132]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800658e:	4b1f      	ldr	r3, [pc, #124]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 8006590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006592:	4b21      	ldr	r3, [pc, #132]	@ (8006618 <HAL_RCC_OscConfig+0x778>)
 8006594:	4013      	ands	r3, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800659a:	00d2      	lsls	r2, r2, #3
 800659c:	491b      	ldr	r1, [pc, #108]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065a2:	4b1a      	ldr	r3, [pc, #104]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a6:	f023 020c 	bic.w	r2, r3, #12
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	4917      	ldr	r1, [pc, #92]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065b4:	4b15      	ldr	r3, [pc, #84]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	f023 0202 	bic.w	r2, r3, #2
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c0:	4912      	ldr	r1, [pc, #72]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065c6:	4b11      	ldr	r3, [pc, #68]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	4a10      	ldr	r2, [pc, #64]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d2:	4b0e      	ldr	r3, [pc, #56]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	4a0d      	ldr	r2, [pc, #52]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065de:	4b0b      	ldr	r3, [pc, #44]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	4a0a      	ldr	r2, [pc, #40]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065ea:	4b08      	ldr	r3, [pc, #32]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ee:	4a07      	ldr	r2, [pc, #28]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065f0:	f043 0301 	orr.w	r3, r3, #1
 80065f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f6:	4b05      	ldr	r3, [pc, #20]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a04      	ldr	r2, [pc, #16]	@ (800660c <HAL_RCC_OscConfig+0x76c>)
 80065fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006602:	f7fd f8d3 	bl	80037ac <HAL_GetTick>
 8006606:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006608:	e011      	b.n	800662e <HAL_RCC_OscConfig+0x78e>
 800660a:	bf00      	nop
 800660c:	58024400 	.word	0x58024400
 8006610:	58024800 	.word	0x58024800
 8006614:	fffffc0c 	.word	0xfffffc0c
 8006618:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fd f8c6 	bl	80037ac <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e08a      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800662e:	4b47      	ldr	r3, [pc, #284]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f0      	beq.n	800661c <HAL_RCC_OscConfig+0x77c>
 800663a:	e082      	b.n	8006742 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663c:	4b43      	ldr	r3, [pc, #268]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a42      	ldr	r2, [pc, #264]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fd f8b0 	bl	80037ac <HAL_GetTick>
 800664c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006650:	f7fd f8ac 	bl	80037ac <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e070      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006662:	4b3a      	ldr	r3, [pc, #232]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x7b0>
 800666e:	e068      	b.n	8006742 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006670:	4b36      	ldr	r3, [pc, #216]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006674:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006676:	4b35      	ldr	r3, [pc, #212]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006680:	2b01      	cmp	r3, #1
 8006682:	d031      	beq.n	80066e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f003 0203 	and.w	r2, r3, #3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800668e:	429a      	cmp	r2, r3
 8006690:	d12a      	bne.n	80066e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	091b      	lsrs	r3, r3, #4
 8006696:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669e:	429a      	cmp	r2, r3
 80066a0:	d122      	bne.n	80066e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d11a      	bne.n	80066e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	0a5b      	lsrs	r3, r3, #9
 80066b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d111      	bne.n	80066e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	0c1b      	lsrs	r3, r3, #16
 80066c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d108      	bne.n	80066e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	0e1b      	lsrs	r3, r3, #24
 80066da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d001      	beq.n	80066ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e02b      	b.n	8006744 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066ec:	4b17      	ldr	r3, [pc, #92]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 80066ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f0:	08db      	lsrs	r3, r3, #3
 80066f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d01f      	beq.n	8006742 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006702:	4b12      	ldr	r3, [pc, #72]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006706:	4a11      	ldr	r2, [pc, #68]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006708:	f023 0301 	bic.w	r3, r3, #1
 800670c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800670e:	f7fd f84d 	bl	80037ac <HAL_GetTick>
 8006712:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006714:	bf00      	nop
 8006716:	f7fd f849 	bl	80037ac <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	4293      	cmp	r3, r2
 8006720:	d0f9      	beq.n	8006716 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006722:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006726:	4b0a      	ldr	r3, [pc, #40]	@ (8006750 <HAL_RCC_OscConfig+0x8b0>)
 8006728:	4013      	ands	r3, r2
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800672e:	00d2      	lsls	r2, r2, #3
 8006730:	4906      	ldr	r1, [pc, #24]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006732:	4313      	orrs	r3, r2
 8006734:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006736:	4b05      	ldr	r3, [pc, #20]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	4a04      	ldr	r2, [pc, #16]	@ (800674c <HAL_RCC_OscConfig+0x8ac>)
 800673c:	f043 0301 	orr.w	r3, r3, #1
 8006740:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3730      	adds	r7, #48	@ 0x30
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	58024400 	.word	0x58024400
 8006750:	ffff0007 	.word	0xffff0007

08006754 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e19c      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006768:	4b8a      	ldr	r3, [pc, #552]	@ (8006994 <HAL_RCC_ClockConfig+0x240>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d910      	bls.n	8006798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b87      	ldr	r3, [pc, #540]	@ (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 020f 	bic.w	r2, r3, #15
 800677e:	4985      	ldr	r1, [pc, #532]	@ (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	4b83      	ldr	r3, [pc, #524]	@ (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e184      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d010      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	4b7b      	ldr	r3, [pc, #492]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d908      	bls.n	80067c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067b4:	4b78      	ldr	r3, [pc, #480]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	4975      	ldr	r1, [pc, #468]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d010      	beq.n	80067f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	4b70      	ldr	r3, [pc, #448]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067de:	429a      	cmp	r2, r3
 80067e0:	d908      	bls.n	80067f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	496a      	ldr	r1, [pc, #424]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d010      	beq.n	8006822 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	4b64      	ldr	r3, [pc, #400]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800680c:	429a      	cmp	r2, r3
 800680e:	d908      	bls.n	8006822 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006810:	4b61      	ldr	r3, [pc, #388]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	495e      	ldr	r1, [pc, #376]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 800681e:	4313      	orrs	r3, r2
 8006820:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d010      	beq.n	8006850 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69da      	ldr	r2, [r3, #28]
 8006832:	4b59      	ldr	r3, [pc, #356]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800683a:	429a      	cmp	r2, r3
 800683c:	d908      	bls.n	8006850 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800683e:	4b56      	ldr	r3, [pc, #344]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	4953      	ldr	r1, [pc, #332]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 800684c:	4313      	orrs	r3, r2
 800684e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	4b4d      	ldr	r3, [pc, #308]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	429a      	cmp	r2, r3
 800686a:	d908      	bls.n	800687e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800686c:	4b4a      	ldr	r3, [pc, #296]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f023 020f 	bic.w	r2, r3, #15
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	4947      	ldr	r1, [pc, #284]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 800687a:	4313      	orrs	r3, r2
 800687c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d055      	beq.n	8006936 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800688a:	4b43      	ldr	r3, [pc, #268]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	4940      	ldr	r1, [pc, #256]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006898:	4313      	orrs	r3, r2
 800689a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d107      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d121      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0f6      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d107      	bne.n	80068cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068bc:	4b36      	ldr	r3, [pc, #216]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d115      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0ea      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d107      	bne.n	80068e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068d4:	4b30      	ldr	r3, [pc, #192]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0de      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0d6      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068f4:	4b28      	ldr	r3, [pc, #160]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f023 0207 	bic.w	r2, r3, #7
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4925      	ldr	r1, [pc, #148]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006902:	4313      	orrs	r3, r2
 8006904:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006906:	f7fc ff51 	bl	80037ac <HAL_GetTick>
 800690a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690c:	e00a      	b.n	8006924 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800690e:	f7fc ff4d 	bl	80037ac <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e0be      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006924:	4b1c      	ldr	r3, [pc, #112]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	429a      	cmp	r2, r3
 8006934:	d1eb      	bne.n	800690e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d010      	beq.n	8006964 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	4b14      	ldr	r3, [pc, #80]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	429a      	cmp	r2, r3
 8006950:	d208      	bcs.n	8006964 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006952:	4b11      	ldr	r3, [pc, #68]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f023 020f 	bic.w	r2, r3, #15
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	490e      	ldr	r1, [pc, #56]	@ (8006998 <HAL_RCC_ClockConfig+0x244>)
 8006960:	4313      	orrs	r3, r2
 8006962:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d214      	bcs.n	800699c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006972:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f023 020f 	bic.w	r2, r3, #15
 800697a:	4906      	ldr	r1, [pc, #24]	@ (8006994 <HAL_RCC_ClockConfig+0x240>)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	4313      	orrs	r3, r2
 8006980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006982:	4b04      	ldr	r3, [pc, #16]	@ (8006994 <HAL_RCC_ClockConfig+0x240>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d005      	beq.n	800699c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e086      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x34e>
 8006994:	52002000 	.word	0x52002000
 8006998:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	4b3f      	ldr	r3, [pc, #252]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d208      	bcs.n	80069ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069b8:	4b3c      	ldr	r3, [pc, #240]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	4939      	ldr	r1, [pc, #228]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d010      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695a      	ldr	r2, [r3, #20]
 80069da:	4b34      	ldr	r3, [pc, #208]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d208      	bcs.n	80069f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069e6:	4b31      	ldr	r3, [pc, #196]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	492e      	ldr	r1, [pc, #184]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d010      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	4b28      	ldr	r3, [pc, #160]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d208      	bcs.n	8006a26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a14:	4b25      	ldr	r3, [pc, #148]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	4922      	ldr	r1, [pc, #136]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d010      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69da      	ldr	r2, [r3, #28]
 8006a36:	4b1d      	ldr	r3, [pc, #116]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d208      	bcs.n	8006a54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a42:	4b1a      	ldr	r3, [pc, #104]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	4917      	ldr	r1, [pc, #92]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a54:	f000 f834 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4b14      	ldr	r3, [pc, #80]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	0a1b      	lsrs	r3, r3, #8
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	4912      	ldr	r1, [pc, #72]	@ (8006ab0 <HAL_RCC_ClockConfig+0x35c>)
 8006a66:	5ccb      	ldrb	r3, [r1, r3]
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a72:	4b0e      	ldr	r3, [pc, #56]	@ (8006aac <HAL_RCC_ClockConfig+0x358>)
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006ab0 <HAL_RCC_ClockConfig+0x35c>)
 8006a7c:	5cd3      	ldrb	r3, [r2, r3]
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
 8006a88:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab4 <HAL_RCC_ClockConfig+0x360>)
 8006a8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab8 <HAL_RCC_ClockConfig+0x364>)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a92:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <HAL_RCC_ClockConfig+0x368>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fc fe3e 	bl	8003718 <HAL_InitTick>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	0800fa20 	.word	0x0800fa20
 8006ab4:	24000008 	.word	0x24000008
 8006ab8:	24000004 	.word	0x24000004
 8006abc:	2400000c 	.word	0x2400000c

08006ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b089      	sub	sp, #36	@ 0x24
 8006ac4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ac6:	4bb3      	ldr	r3, [pc, #716]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ace:	2b18      	cmp	r3, #24
 8006ad0:	f200 8155 	bhi.w	8006d7e <HAL_RCC_GetSysClockFreq+0x2be>
 8006ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8006adc <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ada:	bf00      	nop
 8006adc:	08006b41 	.word	0x08006b41
 8006ae0:	08006d7f 	.word	0x08006d7f
 8006ae4:	08006d7f 	.word	0x08006d7f
 8006ae8:	08006d7f 	.word	0x08006d7f
 8006aec:	08006d7f 	.word	0x08006d7f
 8006af0:	08006d7f 	.word	0x08006d7f
 8006af4:	08006d7f 	.word	0x08006d7f
 8006af8:	08006d7f 	.word	0x08006d7f
 8006afc:	08006b67 	.word	0x08006b67
 8006b00:	08006d7f 	.word	0x08006d7f
 8006b04:	08006d7f 	.word	0x08006d7f
 8006b08:	08006d7f 	.word	0x08006d7f
 8006b0c:	08006d7f 	.word	0x08006d7f
 8006b10:	08006d7f 	.word	0x08006d7f
 8006b14:	08006d7f 	.word	0x08006d7f
 8006b18:	08006d7f 	.word	0x08006d7f
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006d7f 	.word	0x08006d7f
 8006b24:	08006d7f 	.word	0x08006d7f
 8006b28:	08006d7f 	.word	0x08006d7f
 8006b2c:	08006d7f 	.word	0x08006d7f
 8006b30:	08006d7f 	.word	0x08006d7f
 8006b34:	08006d7f 	.word	0x08006d7f
 8006b38:	08006d7f 	.word	0x08006d7f
 8006b3c:	08006b73 	.word	0x08006b73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b40:	4b94      	ldr	r3, [pc, #592]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b4c:	4b91      	ldr	r3, [pc, #580]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	08db      	lsrs	r3, r3, #3
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	4a90      	ldr	r2, [pc, #576]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b5e:	e111      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b60:	4b8d      	ldr	r3, [pc, #564]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b62:	61bb      	str	r3, [r7, #24]
      break;
 8006b64:	e10e      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b66:	4b8d      	ldr	r3, [pc, #564]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b68:	61bb      	str	r3, [r7, #24]
      break;
 8006b6a:	e10b      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b6c:	4b8c      	ldr	r3, [pc, #560]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b6e:	61bb      	str	r3, [r7, #24]
      break;
 8006b70:	e108      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b72:	4b88      	ldr	r3, [pc, #544]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b7c:	4b85      	ldr	r3, [pc, #532]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b88:	4b82      	ldr	r3, [pc, #520]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b92:	4b80      	ldr	r3, [pc, #512]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b96:	08db      	lsrs	r3, r3, #3
 8006b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80e1 	beq.w	8006d78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	f000 8083 	beq.w	8006cc4 <HAL_RCC_GetSysClockFreq+0x204>
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	f200 80a1 	bhi.w	8006d08 <HAL_RCC_GetSysClockFreq+0x248>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x114>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d056      	beq.n	8006c80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006bd2:	e099      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d02d      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006be0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	08db      	lsrs	r3, r3, #3
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	4a6b      	ldr	r2, [pc, #428]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0a:	4b62      	ldr	r3, [pc, #392]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c3a:	e087      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006da8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4e:	4b51      	ldr	r3, [pc, #324]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c7e:	e065      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006dac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c92:	4b40      	ldr	r3, [pc, #256]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ca6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cc2:	e043      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d06:	e021      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006dac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d4c:	4b11      	ldr	r3, [pc, #68]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d50:	0a5b      	lsrs	r3, r3, #9
 8006d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d56:	3301      	adds	r3, #1
 8006d58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d70:	ee17 3a90 	vmov	r3, s15
 8006d74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d76:	e005      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
      break;
 8006d7c:	e002      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d7e:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d80:	61bb      	str	r3, [r7, #24]
      break;
 8006d82:	bf00      	nop
  }

  return sysclockfreq;
 8006d84:	69bb      	ldr	r3, [r7, #24]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3724      	adds	r7, #36	@ 0x24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	58024400 	.word	0x58024400
 8006d98:	03d09000 	.word	0x03d09000
 8006d9c:	003d0900 	.word	0x003d0900
 8006da0:	00f42400 	.word	0x00f42400
 8006da4:	46000000 	.word	0x46000000
 8006da8:	4c742400 	.word	0x4c742400
 8006dac:	4a742400 	.word	0x4a742400
 8006db0:	4b742400 	.word	0x4b742400

08006db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dba:	f7ff fe81 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	4b10      	ldr	r3, [pc, #64]	@ (8006e04 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	0a1b      	lsrs	r3, r3, #8
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	490f      	ldr	r1, [pc, #60]	@ (8006e08 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dcc:	5ccb      	ldrb	r3, [r1, r3]
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e04 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	4a09      	ldr	r2, [pc, #36]	@ (8006e08 <HAL_RCC_GetHCLKFreq+0x54>)
 8006de2:	5cd3      	ldrb	r3, [r2, r3]
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	fa22 f303 	lsr.w	r3, r2, r3
 8006dee:	4a07      	ldr	r2, [pc, #28]	@ (8006e0c <HAL_RCC_GetHCLKFreq+0x58>)
 8006df0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006df2:	4a07      	ldr	r2, [pc, #28]	@ (8006e10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006df8:	4b04      	ldr	r3, [pc, #16]	@ (8006e0c <HAL_RCC_GetHCLKFreq+0x58>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	58024400 	.word	0x58024400
 8006e08:	0800fa20 	.word	0x0800fa20
 8006e0c:	24000008 	.word	0x24000008
 8006e10:	24000004 	.word	0x24000004

08006e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e18:	f7ff ffcc 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	091b      	lsrs	r3, r3, #4
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4904      	ldr	r1, [pc, #16]	@ (8006e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	0800fa20 	.word	0x0800fa20

08006e40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e44:	b0ca      	sub	sp, #296	@ 0x128
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e52:	2300      	movs	r3, #0
 8006e54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e64:	2500      	movs	r5, #0
 8006e66:	ea54 0305 	orrs.w	r3, r4, r5
 8006e6a:	d049      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e76:	d02f      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e7c:	d828      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e82:	d01a      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e88:	d822      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e92:	d007      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e94:	e01c      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e96:	4bb8      	ldr	r3, [pc, #736]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9a:	4ab7      	ldr	r2, [pc, #732]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ea2:	e01a      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	2102      	movs	r1, #2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f002 fb61 	bl	8009574 <RCCEx_PLL2_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006eb8:	e00f      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebe:	3328      	adds	r3, #40	@ 0x28
 8006ec0:	2102      	movs	r1, #2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f002 fc08 	bl	80096d8 <RCCEx_PLL3_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ece:	e004      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ed6:	e000      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ee2:	4ba5      	ldr	r3, [pc, #660]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ef0:	4aa1      	ldr	r2, [pc, #644]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ef6:	e003      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006efc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f0c:	f04f 0900 	mov.w	r9, #0
 8006f10:	ea58 0309 	orrs.w	r3, r8, r9
 8006f14:	d047      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d82a      	bhi.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f20:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f3d 	.word	0x08006f3d
 8006f2c:	08006f4b 	.word	0x08006f4b
 8006f30:	08006f61 	.word	0x08006f61
 8006f34:	08006f7f 	.word	0x08006f7f
 8006f38:	08006f7f 	.word	0x08006f7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	4a8d      	ldr	r2, [pc, #564]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f48:	e01a      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	3308      	adds	r3, #8
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f002 fb0e 	bl	8009574 <RCCEx_PLL2_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f5e:	e00f      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f64:	3328      	adds	r3, #40	@ 0x28
 8006f66:	2100      	movs	r1, #0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f002 fbb5 	bl	80096d8 <RCCEx_PLL3_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f74:	e004      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f7c:	e000      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f88:	4b7b      	ldr	r3, [pc, #492]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f8c:	f023 0107 	bic.w	r1, r3, #7
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f96:	4a78      	ldr	r2, [pc, #480]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f9c:	e003      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006fb2:	f04f 0b00 	mov.w	fp, #0
 8006fb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fba:	d04c      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fc6:	d030      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fcc:	d829      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006fce:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fd0:	d02d      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006fd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fd4:	d825      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006fd6:	2b80      	cmp	r3, #128	@ 0x80
 8006fd8:	d018      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006fda:	2b80      	cmp	r3, #128	@ 0x80
 8006fdc:	d821      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006fe2:	2b40      	cmp	r3, #64	@ 0x40
 8006fe4:	d007      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006fe6:	e01c      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe8:	4b63      	ldr	r3, [pc, #396]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	4a62      	ldr	r2, [pc, #392]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ff4:	e01c      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f002 fab8 	bl	8009574 <RCCEx_PLL2_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800700a:	e011      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800700c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007010:	3328      	adds	r3, #40	@ 0x28
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f002 fb5f 	bl	80096d8 <RCCEx_PLL3_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007020:	e006      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007028:	e002      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800702a:	bf00      	nop
 800702c:	e000      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800702e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007038:	4b4f      	ldr	r3, [pc, #316]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800703a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800703c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007046:	4a4c      	ldr	r2, [pc, #304]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007048:	430b      	orrs	r3, r1
 800704a:	6513      	str	r3, [r2, #80]	@ 0x50
 800704c:	e003      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007062:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007066:	2300      	movs	r3, #0
 8007068:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800706c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007070:	460b      	mov	r3, r1
 8007072:	4313      	orrs	r3, r2
 8007074:	d053      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800707e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007082:	d035      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007084:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007088:	d82e      	bhi.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800708a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800708e:	d031      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007090:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007094:	d828      	bhi.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800709a:	d01a      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800709c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070a0:	d822      	bhi.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80070a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070aa:	d007      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80070ac:	e01c      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ae:	4b32      	ldr	r3, [pc, #200]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	4a31      	ldr	r2, [pc, #196]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070ba:	e01c      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c0:	3308      	adds	r3, #8
 80070c2:	2100      	movs	r1, #0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f002 fa55 	bl	8009574 <RCCEx_PLL2_Config>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80070d0:	e011      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d6:	3328      	adds	r3, #40	@ 0x28
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f002 fafc 	bl	80096d8 <RCCEx_PLL3_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070e6:	e006      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070ee:	e002      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80070f0:	bf00      	nop
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80070f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007102:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800710e:	4a1a      	ldr	r2, [pc, #104]	@ (8007178 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007110:	430b      	orrs	r3, r1
 8007112:	6593      	str	r3, [r2, #88]	@ 0x58
 8007114:	e003      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800711a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800711e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800712a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800712e:	2300      	movs	r3, #0
 8007130:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007134:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007138:	460b      	mov	r3, r1
 800713a:	4313      	orrs	r3, r2
 800713c:	d056      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007142:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007146:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800714a:	d038      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800714c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007150:	d831      	bhi.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007152:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007156:	d034      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007158:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800715c:	d82b      	bhi.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800715e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007162:	d01d      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007168:	d825      	bhi.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d006      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800716e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007172:	d00a      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007174:	e01f      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007176:	bf00      	nop
 8007178:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800717c:	4ba2      	ldr	r3, [pc, #648]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	4aa1      	ldr	r2, [pc, #644]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007188:	e01c      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718e:	3308      	adds	r3, #8
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f002 f9ee 	bl	8009574 <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800719e:	e011      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a4:	3328      	adds	r3, #40	@ 0x28
 80071a6:	2100      	movs	r1, #0
 80071a8:	4618      	mov	r0, r3
 80071aa:	f002 fa95 	bl	80096d8 <RCCEx_PLL3_Config>
 80071ae:	4603      	mov	r3, r0
 80071b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071bc:	e002      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80071be:	bf00      	nop
 80071c0:	e000      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80071c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071cc:	4b8e      	ldr	r3, [pc, #568]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80071dc:	4a8a      	ldr	r2, [pc, #552]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071de:	430b      	orrs	r3, r1
 80071e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80071e2:	e003      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80071f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007202:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007206:	460b      	mov	r3, r1
 8007208:	4313      	orrs	r3, r2
 800720a:	d03a      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007212:	2b30      	cmp	r3, #48	@ 0x30
 8007214:	d01f      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007216:	2b30      	cmp	r3, #48	@ 0x30
 8007218:	d819      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800721a:	2b20      	cmp	r3, #32
 800721c:	d00c      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800721e:	2b20      	cmp	r3, #32
 8007220:	d815      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d019      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007226:	2b10      	cmp	r3, #16
 8007228:	d111      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800722a:	4b77      	ldr	r3, [pc, #476]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	4a76      	ldr	r2, [pc, #472]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007234:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007236:	e011      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723c:	3308      	adds	r3, #8
 800723e:	2102      	movs	r1, #2
 8007240:	4618      	mov	r0, r3
 8007242:	f002 f997 	bl	8009574 <RCCEx_PLL2_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800724c:	e006      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007254:	e002      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800725a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007264:	4b68      	ldr	r3, [pc, #416]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007268:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007272:	4a65      	ldr	r2, [pc, #404]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007274:	430b      	orrs	r3, r1
 8007276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007278:	e003      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800727e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800728e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007292:	2300      	movs	r3, #0
 8007294:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007298:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800729c:	460b      	mov	r3, r1
 800729e:	4313      	orrs	r3, r2
 80072a0:	d051      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80072a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072ac:	d035      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80072ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072b2:	d82e      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80072b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072b8:	d031      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80072ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072be:	d828      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80072c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072c4:	d01a      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80072c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ca:	d822      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80072d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072d4:	d007      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80072d6:	e01c      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072e4:	e01c      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ea:	3308      	adds	r3, #8
 80072ec:	2100      	movs	r1, #0
 80072ee:	4618      	mov	r0, r3
 80072f0:	f002 f940 	bl	8009574 <RCCEx_PLL2_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072fa:	e011      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007300:	3328      	adds	r3, #40	@ 0x28
 8007302:	2100      	movs	r1, #0
 8007304:	4618      	mov	r0, r3
 8007306:	f002 f9e7 	bl	80096d8 <RCCEx_PLL3_Config>
 800730a:	4603      	mov	r3, r0
 800730c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007310:	e006      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007318:	e002      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800731a:	bf00      	nop
 800731c:	e000      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800731e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007328:	4b37      	ldr	r3, [pc, #220]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007336:	4a34      	ldr	r2, [pc, #208]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007338:	430b      	orrs	r3, r1
 800733a:	6513      	str	r3, [r2, #80]	@ 0x50
 800733c:	e003      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007352:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007356:	2300      	movs	r3, #0
 8007358:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800735c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007360:	460b      	mov	r3, r1
 8007362:	4313      	orrs	r3, r2
 8007364:	d056      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800736c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007370:	d033      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007372:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007376:	d82c      	bhi.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007378:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800737c:	d02f      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800737e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007382:	d826      	bhi.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007384:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007388:	d02b      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800738a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800738e:	d820      	bhi.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007394:	d012      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007396:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800739a:	d81a      	bhi.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d022      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80073a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a4:	d115      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073aa:	3308      	adds	r3, #8
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f002 f8e0 	bl	8009574 <RCCEx_PLL2_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80073ba:	e015      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c0:	3328      	adds	r3, #40	@ 0x28
 80073c2:	2101      	movs	r1, #1
 80073c4:	4618      	mov	r0, r3
 80073c6:	f002 f987 	bl	80096d8 <RCCEx_PLL3_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80073d0:	e00a      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073d8:	e006      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80073da:	bf00      	nop
 80073dc:	e004      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80073de:	bf00      	nop
 80073e0:	e002      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80073e2:	bf00      	nop
 80073e4:	e000      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80073e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10d      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073f0:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073fe:	4a02      	ldr	r2, [pc, #8]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007400:	430b      	orrs	r3, r1
 8007402:	6513      	str	r3, [r2, #80]	@ 0x50
 8007404:	e006      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007406:	bf00      	nop
 8007408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007424:	2300      	movs	r3, #0
 8007426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800742a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800742e:	460b      	mov	r3, r1
 8007430:	4313      	orrs	r3, r2
 8007432:	d055      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007438:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800743c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007440:	d033      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007446:	d82c      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744c:	d02f      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800744e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007452:	d826      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007454:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007458:	d02b      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800745a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800745e:	d820      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007464:	d012      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800746a:	d81a      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d022      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007474:	d115      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747a:	3308      	adds	r3, #8
 800747c:	2101      	movs	r1, #1
 800747e:	4618      	mov	r0, r3
 8007480:	f002 f878 	bl	8009574 <RCCEx_PLL2_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800748a:	e015      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007490:	3328      	adds	r3, #40	@ 0x28
 8007492:	2101      	movs	r1, #1
 8007494:	4618      	mov	r0, r3
 8007496:	f002 f91f 	bl	80096d8 <RCCEx_PLL3_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074a0:	e00a      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074a8:	e006      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074aa:	bf00      	nop
 80074ac:	e004      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074ae:	bf00      	nop
 80074b0:	e002      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80074c0:	4ba3      	ldr	r3, [pc, #652]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074d0:	4a9f      	ldr	r2, [pc, #636]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d2:	430b      	orrs	r3, r1
 80074d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80074d6:	e003      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80074ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80074f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074fa:	460b      	mov	r3, r1
 80074fc:	4313      	orrs	r3, r2
 80074fe:	d037      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800750a:	d00e      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800750c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007510:	d816      	bhi.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d018      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800751a:	d111      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751c:	4b8c      	ldr	r3, [pc, #560]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	4a8b      	ldr	r2, [pc, #556]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007528:	e00f      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752e:	3308      	adds	r3, #8
 8007530:	2101      	movs	r1, #1
 8007532:	4618      	mov	r0, r3
 8007534:	f002 f81e 	bl	8009574 <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800753e:	e004      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007546:	e000      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800754a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007552:	4b7f      	ldr	r3, [pc, #508]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007556:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007560:	4a7b      	ldr	r2, [pc, #492]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007562:	430b      	orrs	r3, r1
 8007564:	6513      	str	r3, [r2, #80]	@ 0x50
 8007566:	e003      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800756c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800757c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007580:	2300      	movs	r3, #0
 8007582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007586:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800758a:	460b      	mov	r3, r1
 800758c:	4313      	orrs	r3, r2
 800758e:	d039      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007596:	2b03      	cmp	r3, #3
 8007598:	d81c      	bhi.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800759a:	a201      	add	r2, pc, #4	@ (adr r2, 80075a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075dd 	.word	0x080075dd
 80075a4:	080075b1 	.word	0x080075b1
 80075a8:	080075bf 	.word	0x080075bf
 80075ac:	080075dd 	.word	0x080075dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b0:	4b67      	ldr	r3, [pc, #412]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	4a66      	ldr	r2, [pc, #408]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075bc:	e00f      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c2:	3308      	adds	r3, #8
 80075c4:	2102      	movs	r1, #2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 ffd4 	bl	8009574 <RCCEx_PLL2_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075d2:	e004      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075da:	e000      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80075dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80075e6:	4b5a      	ldr	r3, [pc, #360]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ea:	f023 0103 	bic.w	r1, r3, #3
 80075ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f4:	4a56      	ldr	r2, [pc, #344]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075f6:	430b      	orrs	r3, r1
 80075f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075fa:	e003      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007610:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007614:	2300      	movs	r3, #0
 8007616:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800761a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800761e:	460b      	mov	r3, r1
 8007620:	4313      	orrs	r3, r2
 8007622:	f000 809f 	beq.w	8007764 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007626:	4b4b      	ldr	r3, [pc, #300]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a4a      	ldr	r2, [pc, #296]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800762c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007632:	f7fc f8bb 	bl	80037ac <HAL_GetTick>
 8007636:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800763a:	e00b      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800763c:	f7fc f8b6 	bl	80037ac <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b64      	cmp	r3, #100	@ 0x64
 800764a:	d903      	bls.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007652:	e005      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007654:	4b3f      	ldr	r3, [pc, #252]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0ed      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007664:	2b00      	cmp	r3, #0
 8007666:	d179      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007668:	4b39      	ldr	r3, [pc, #228]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800766a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007670:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007674:	4053      	eors	r3, r2
 8007676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800767a:	2b00      	cmp	r3, #0
 800767c:	d015      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800767e:	4b34      	ldr	r3, [pc, #208]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007686:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800768a:	4b31      	ldr	r3, [pc, #196]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800768c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768e:	4a30      	ldr	r2, [pc, #192]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007694:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007696:	4b2e      	ldr	r3, [pc, #184]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769a:	4a2d      	ldr	r2, [pc, #180]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800769c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80076a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80076a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b6:	d118      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b8:	f7fc f878 	bl	80037ac <HAL_GetTick>
 80076bc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076c0:	e00d      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076c2:	f7fc f873 	bl	80037ac <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80076cc:	1ad2      	subs	r2, r2, r3
 80076ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d903      	bls.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80076dc:	e005      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076de:	4b1c      	ldr	r3, [pc, #112]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0eb      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80076ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d129      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007702:	d10e      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007704:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007714:	091a      	lsrs	r2, r3, #4
 8007716:	4b10      	ldr	r3, [pc, #64]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007718:	4013      	ands	r3, r2
 800771a:	4a0d      	ldr	r2, [pc, #52]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800771c:	430b      	orrs	r3, r1
 800771e:	6113      	str	r3, [r2, #16]
 8007720:	e005      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007722:	4b0b      	ldr	r3, [pc, #44]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	4a0a      	ldr	r2, [pc, #40]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007728:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800772c:	6113      	str	r3, [r2, #16]
 800772e:	4b08      	ldr	r3, [pc, #32]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007730:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007736:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800773a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800773e:	4a04      	ldr	r2, [pc, #16]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007740:	430b      	orrs	r3, r1
 8007742:	6713      	str	r3, [r2, #112]	@ 0x70
 8007744:	e00e      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800774a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800774e:	e009      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007750:	58024400 	.word	0x58024400
 8007754:	58024800 	.word	0x58024800
 8007758:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f002 0301 	and.w	r3, r2, #1
 8007770:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007774:	2300      	movs	r3, #0
 8007776:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800777a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800777e:	460b      	mov	r3, r1
 8007780:	4313      	orrs	r3, r2
 8007782:	f000 8089 	beq.w	8007898 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778c:	2b28      	cmp	r3, #40	@ 0x28
 800778e:	d86b      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007790:	a201      	add	r2, pc, #4	@ (adr r2, 8007798 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007796:	bf00      	nop
 8007798:	08007871 	.word	0x08007871
 800779c:	08007869 	.word	0x08007869
 80077a0:	08007869 	.word	0x08007869
 80077a4:	08007869 	.word	0x08007869
 80077a8:	08007869 	.word	0x08007869
 80077ac:	08007869 	.word	0x08007869
 80077b0:	08007869 	.word	0x08007869
 80077b4:	08007869 	.word	0x08007869
 80077b8:	0800783d 	.word	0x0800783d
 80077bc:	08007869 	.word	0x08007869
 80077c0:	08007869 	.word	0x08007869
 80077c4:	08007869 	.word	0x08007869
 80077c8:	08007869 	.word	0x08007869
 80077cc:	08007869 	.word	0x08007869
 80077d0:	08007869 	.word	0x08007869
 80077d4:	08007869 	.word	0x08007869
 80077d8:	08007853 	.word	0x08007853
 80077dc:	08007869 	.word	0x08007869
 80077e0:	08007869 	.word	0x08007869
 80077e4:	08007869 	.word	0x08007869
 80077e8:	08007869 	.word	0x08007869
 80077ec:	08007869 	.word	0x08007869
 80077f0:	08007869 	.word	0x08007869
 80077f4:	08007869 	.word	0x08007869
 80077f8:	08007871 	.word	0x08007871
 80077fc:	08007869 	.word	0x08007869
 8007800:	08007869 	.word	0x08007869
 8007804:	08007869 	.word	0x08007869
 8007808:	08007869 	.word	0x08007869
 800780c:	08007869 	.word	0x08007869
 8007810:	08007869 	.word	0x08007869
 8007814:	08007869 	.word	0x08007869
 8007818:	08007871 	.word	0x08007871
 800781c:	08007869 	.word	0x08007869
 8007820:	08007869 	.word	0x08007869
 8007824:	08007869 	.word	0x08007869
 8007828:	08007869 	.word	0x08007869
 800782c:	08007869 	.word	0x08007869
 8007830:	08007869 	.word	0x08007869
 8007834:	08007869 	.word	0x08007869
 8007838:	08007871 	.word	0x08007871
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007840:	3308      	adds	r3, #8
 8007842:	2101      	movs	r1, #1
 8007844:	4618      	mov	r0, r3
 8007846:	f001 fe95 	bl	8009574 <RCCEx_PLL2_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007850:	e00f      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007856:	3328      	adds	r3, #40	@ 0x28
 8007858:	2101      	movs	r1, #1
 800785a:	4618      	mov	r0, r3
 800785c:	f001 ff3c 	bl	80096d8 <RCCEx_PLL3_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007866:	e004      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800786e:	e000      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800787a:	4bbf      	ldr	r3, [pc, #764]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007886:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007888:	4abb      	ldr	r2, [pc, #748]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800788a:	430b      	orrs	r3, r1
 800788c:	6553      	str	r3, [r2, #84]	@ 0x54
 800788e:	e003      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007894:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f002 0302 	and.w	r3, r2, #2
 80078a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80078b2:	460b      	mov	r3, r1
 80078b4:	4313      	orrs	r3, r2
 80078b6:	d041      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80078b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078be:	2b05      	cmp	r3, #5
 80078c0:	d824      	bhi.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80078c2:	a201      	add	r2, pc, #4	@ (adr r2, 80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	08007915 	.word	0x08007915
 80078cc:	080078e1 	.word	0x080078e1
 80078d0:	080078f7 	.word	0x080078f7
 80078d4:	08007915 	.word	0x08007915
 80078d8:	08007915 	.word	0x08007915
 80078dc:	08007915 	.word	0x08007915
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e4:	3308      	adds	r3, #8
 80078e6:	2101      	movs	r1, #1
 80078e8:	4618      	mov	r0, r3
 80078ea:	f001 fe43 	bl	8009574 <RCCEx_PLL2_Config>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078f4:	e00f      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fa:	3328      	adds	r3, #40	@ 0x28
 80078fc:	2101      	movs	r1, #1
 80078fe:	4618      	mov	r0, r3
 8007900:	f001 feea 	bl	80096d8 <RCCEx_PLL3_Config>
 8007904:	4603      	mov	r3, r0
 8007906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800790a:	e004      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007912:	e000      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800791e:	4b96      	ldr	r3, [pc, #600]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007922:	f023 0107 	bic.w	r1, r3, #7
 8007926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800792c:	4a92      	ldr	r2, [pc, #584]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800792e:	430b      	orrs	r3, r1
 8007930:	6553      	str	r3, [r2, #84]	@ 0x54
 8007932:	e003      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f002 0304 	and.w	r3, r2, #4
 8007948:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800794c:	2300      	movs	r3, #0
 800794e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007952:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007956:	460b      	mov	r3, r1
 8007958:	4313      	orrs	r3, r2
 800795a:	d044      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800795c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007964:	2b05      	cmp	r3, #5
 8007966:	d825      	bhi.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007968:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	080079bd 	.word	0x080079bd
 8007974:	08007989 	.word	0x08007989
 8007978:	0800799f 	.word	0x0800799f
 800797c:	080079bd 	.word	0x080079bd
 8007980:	080079bd 	.word	0x080079bd
 8007984:	080079bd 	.word	0x080079bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798c:	3308      	adds	r3, #8
 800798e:	2101      	movs	r1, #1
 8007990:	4618      	mov	r0, r3
 8007992:	f001 fdef 	bl	8009574 <RCCEx_PLL2_Config>
 8007996:	4603      	mov	r3, r0
 8007998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800799c:	e00f      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a2:	3328      	adds	r3, #40	@ 0x28
 80079a4:	2101      	movs	r1, #1
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 fe96 	bl	80096d8 <RCCEx_PLL3_Config>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80079b2:	e004      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ba:	e000      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80079bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10b      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079c6:	4b6c      	ldr	r3, [pc, #432]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ca:	f023 0107 	bic.w	r1, r3, #7
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079d6:	4a68      	ldr	r2, [pc, #416]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079d8:	430b      	orrs	r3, r1
 80079da:	6593      	str	r3, [r2, #88]	@ 0x58
 80079dc:	e003      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f002 0320 	and.w	r3, r2, #32
 80079f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079f6:	2300      	movs	r3, #0
 80079f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a00:	460b      	mov	r3, r1
 8007a02:	4313      	orrs	r3, r2
 8007a04:	d055      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a12:	d033      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a18:	d82c      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a1e:	d02f      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a24:	d826      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a2a:	d02b      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007a2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a30:	d820      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a36:	d012      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a3c:	d81a      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d022      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a46:	d115      	bne.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4618      	mov	r0, r3
 8007a52:	f001 fd8f 	bl	8009574 <RCCEx_PLL2_Config>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a5c:	e015      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	3328      	adds	r3, #40	@ 0x28
 8007a64:	2102      	movs	r1, #2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 fe36 	bl	80096d8 <RCCEx_PLL3_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a72:	e00a      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a7a:	e006      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a7c:	bf00      	nop
 8007a7e:	e004      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a80:	bf00      	nop
 8007a82:	e002      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a84:	bf00      	nop
 8007a86:	e000      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a92:	4b39      	ldr	r3, [pc, #228]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa2:	4a35      	ldr	r2, [pc, #212]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007aa8:	e003      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ac8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	d058      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ada:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ade:	d033      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007ae0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ae4:	d82c      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aea:	d02f      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007af0:	d826      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007af2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007af6:	d02b      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007af8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007afc:	d820      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b02:	d012      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b08:	d81a      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d022      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b12:	d115      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b18:	3308      	adds	r3, #8
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 fd29 	bl	8009574 <RCCEx_PLL2_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b28:	e015      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b2e:	3328      	adds	r3, #40	@ 0x28
 8007b30:	2102      	movs	r1, #2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 fdd0 	bl	80096d8 <RCCEx_PLL3_Config>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b3e:	e00a      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b46:	e006      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b48:	bf00      	nop
 8007b4a:	e004      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b4c:	bf00      	nop
 8007b4e:	e002      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b50:	bf00      	nop
 8007b52:	e000      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10e      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b5e:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b6e:	4a02      	ldr	r2, [pc, #8]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b70:	430b      	orrs	r3, r1
 8007b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b74:	e006      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b76:	bf00      	nop
 8007b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b94:	2300      	movs	r3, #0
 8007b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	d055      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007bb0:	d033      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007bb2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007bb6:	d82c      	bhi.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bbc:	d02f      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007bbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bc2:	d826      	bhi.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007bc4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007bc8:	d02b      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007bca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007bce:	d820      	bhi.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bd4:	d012      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bda:	d81a      	bhi.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d022      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be4:	d115      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bea:	3308      	adds	r3, #8
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 fcc0 	bl	8009574 <RCCEx_PLL2_Config>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bfa:	e015      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c00:	3328      	adds	r3, #40	@ 0x28
 8007c02:	2102      	movs	r1, #2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 fd67 	bl	80096d8 <RCCEx_PLL3_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c10:	e00a      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c18:	e006      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c1a:	bf00      	nop
 8007c1c:	e004      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c1e:	bf00      	nop
 8007c20:	e002      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10b      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c30:	4ba1      	ldr	r3, [pc, #644]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c34:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c40:	4a9d      	ldr	r2, [pc, #628]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c42:	430b      	orrs	r3, r1
 8007c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c46:	e003      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f002 0308 	and.w	r3, r2, #8
 8007c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c60:	2300      	movs	r3, #0
 8007c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	d01e      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c7c:	d10c      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c82:	3328      	adds	r3, #40	@ 0x28
 8007c84:	2102      	movs	r1, #2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 fd26 	bl	80096d8 <RCCEx_PLL3_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c98:	4b87      	ldr	r3, [pc, #540]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca8:	4a83      	ldr	r2, [pc, #524]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007caa:	430b      	orrs	r3, r1
 8007cac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f002 0310 	and.w	r3, r2, #16
 8007cba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007cc4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	d01e      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cda:	d10c      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce0:	3328      	adds	r3, #40	@ 0x28
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f001 fcf7 	bl	80096d8 <RCCEx_PLL3_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cf6:	4b70      	ldr	r3, [pc, #448]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cfa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d06:	4a6c      	ldr	r2, [pc, #432]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007d18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007d26:	460b      	mov	r3, r1
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	d03e      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d38:	d022      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007d3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d3e:	d81b      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d48:	d00b      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007d4a:	e015      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d50:	3308      	adds	r3, #8
 8007d52:	2100      	movs	r1, #0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 fc0d 	bl	8009574 <RCCEx_PLL2_Config>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d60:	e00f      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d66:	3328      	adds	r3, #40	@ 0x28
 8007d68:	2102      	movs	r1, #2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 fcb4 	bl	80096d8 <RCCEx_PLL3_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d76:	e004      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d8e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d9a:	4a47      	ldr	r2, [pc, #284]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007da0:	e003      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007db6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007db8:	2300      	movs	r3, #0
 8007dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007dbc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	d03b      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dd2:	d01f      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007dd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dd8:	d818      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dde:	d003      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007de0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007de4:	d007      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007de6:	e011      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de8:	4b33      	ldr	r3, [pc, #204]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	4a32      	ldr	r2, [pc, #200]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007df4:	e00f      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	3328      	adds	r3, #40	@ 0x28
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 fc6a 	bl	80096d8 <RCCEx_PLL3_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e0a:	e004      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e12:	e000      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10b      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e1e:	4b26      	ldr	r3, [pc, #152]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e2e:	4a22      	ldr	r2, [pc, #136]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e30:	430b      	orrs	r3, r1
 8007e32:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e34:	e003      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007e4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007e54:	460b      	mov	r3, r1
 8007e56:	4313      	orrs	r3, r2
 8007e58:	d034      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e68:	d007      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007e6a:	e011      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6c:	4b12      	ldr	r3, [pc, #72]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e70:	4a11      	ldr	r2, [pc, #68]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e78:	e00e      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	3308      	adds	r3, #8
 8007e80:	2102      	movs	r1, #2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fb76 	bl	8009574 <RCCEx_PLL2_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e8e:	e003      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10d      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ea0:	4b05      	ldr	r3, [pc, #20]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eae:	4a02      	ldr	r2, [pc, #8]	@ (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007eb4:	e006      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007eb6:	bf00      	nop
 8007eb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ed6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007eda:	460b      	mov	r3, r1
 8007edc:	4313      	orrs	r3, r2
 8007ede:	d00c      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee4:	3328      	adds	r3, #40	@ 0x28
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 fbf5 	bl	80096d8 <RCCEx_PLL3_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007f06:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f08:	2300      	movs	r3, #0
 8007f0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007f10:	460b      	mov	r3, r1
 8007f12:	4313      	orrs	r3, r2
 8007f14:	d038      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f22:	d018      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f28:	d811      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007f2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f2e:	d014      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f34:	d80b      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f3e:	d106      	bne.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f40:	4bc3      	ldr	r3, [pc, #780]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	4ac2      	ldr	r2, [pc, #776]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007f4c:	e008      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f54:	e004      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f56:	bf00      	nop
 8007f58:	e002      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f5a:	bf00      	nop
 8007f5c:	e000      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10b      	bne.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f68:	4bb9      	ldr	r3, [pc, #740]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f78:	4ab5      	ldr	r2, [pc, #724]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f7e:	e003      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f96:	2300      	movs	r3, #0
 8007f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	d009      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fa4:	4baa      	ldr	r3, [pc, #680]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fb2:	4aa7      	ldr	r2, [pc, #668]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	d00a      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007fd4:	4b9e      	ldr	r3, [pc, #632]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007fe4:	4a9a      	ldr	r2, [pc, #616]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ffc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008000:	460b      	mov	r3, r1
 8008002:	4313      	orrs	r3, r2
 8008004:	d009      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008006:	4b92      	ldr	r3, [pc, #584]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800800a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008014:	4a8e      	ldr	r2, [pc, #568]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008016:	430b      	orrs	r3, r1
 8008018:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008026:	643b      	str	r3, [r7, #64]	@ 0x40
 8008028:	2300      	movs	r3, #0
 800802a:	647b      	str	r3, [r7, #68]	@ 0x44
 800802c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008030:	460b      	mov	r3, r1
 8008032:	4313      	orrs	r3, r2
 8008034:	d00e      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008036:	4b86      	ldr	r3, [pc, #536]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	4a85      	ldr	r2, [pc, #532]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800803c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008040:	6113      	str	r3, [r2, #16]
 8008042:	4b83      	ldr	r3, [pc, #524]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008044:	6919      	ldr	r1, [r3, #16]
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800804e:	4a80      	ldr	r2, [pc, #512]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008050:	430b      	orrs	r3, r1
 8008052:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008060:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008062:	2300      	movs	r3, #0
 8008064:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008066:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800806a:	460b      	mov	r3, r1
 800806c:	4313      	orrs	r3, r2
 800806e:	d009      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008070:	4b77      	ldr	r3, [pc, #476]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008074:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807e:	4a74      	ldr	r2, [pc, #464]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008080:	430b      	orrs	r3, r1
 8008082:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008090:	633b      	str	r3, [r7, #48]	@ 0x30
 8008092:	2300      	movs	r3, #0
 8008094:	637b      	str	r3, [r7, #52]	@ 0x34
 8008096:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800809a:	460b      	mov	r3, r1
 800809c:	4313      	orrs	r3, r2
 800809e:	d00a      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80080a0:	4b6b      	ldr	r3, [pc, #428]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080b0:	4a67      	ldr	r2, [pc, #412]	@ (8008250 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080b2:	430b      	orrs	r3, r1
 80080b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	2100      	movs	r1, #0
 80080c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80080cc:	460b      	mov	r3, r1
 80080ce:	4313      	orrs	r3, r2
 80080d0:	d011      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d6:	3308      	adds	r3, #8
 80080d8:	2100      	movs	r1, #0
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 fa4a 	bl	8009574 <RCCEx_PLL2_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	2100      	movs	r1, #0
 8008100:	6239      	str	r1, [r7, #32]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	627b      	str	r3, [r7, #36]	@ 0x24
 8008108:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800810c:	460b      	mov	r3, r1
 800810e:	4313      	orrs	r3, r2
 8008110:	d011      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008116:	3308      	adds	r3, #8
 8008118:	2101      	movs	r1, #1
 800811a:	4618      	mov	r0, r3
 800811c:	f001 fa2a 	bl	8009574 <RCCEx_PLL2_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	2100      	movs	r1, #0
 8008140:	61b9      	str	r1, [r7, #24]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	61fb      	str	r3, [r7, #28]
 8008148:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800814c:	460b      	mov	r3, r1
 800814e:	4313      	orrs	r3, r2
 8008150:	d011      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008156:	3308      	adds	r3, #8
 8008158:	2102      	movs	r1, #2
 800815a:	4618      	mov	r0, r3
 800815c:	f001 fa0a 	bl	8009574 <RCCEx_PLL2_Config>
 8008160:	4603      	mov	r3, r0
 8008162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800816e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	2100      	movs	r1, #0
 8008180:	6139      	str	r1, [r7, #16]
 8008182:	f003 0308 	and.w	r3, r3, #8
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800818c:	460b      	mov	r3, r1
 800818e:	4313      	orrs	r3, r2
 8008190:	d011      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008196:	3328      	adds	r3, #40	@ 0x28
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f001 fa9c 	bl	80096d8 <RCCEx_PLL3_Config>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80081a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	2100      	movs	r1, #0
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d011      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	3328      	adds	r3, #40	@ 0x28
 80081d8:	2101      	movs	r1, #1
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 fa7c 	bl	80096d8 <RCCEx_PLL3_Config>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	2100      	movs	r1, #0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	607b      	str	r3, [r7, #4]
 8008208:	e9d7 1200 	ldrd	r1, r2, [r7]
 800820c:	460b      	mov	r3, r1
 800820e:	4313      	orrs	r3, r2
 8008210:	d011      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008216:	3328      	adds	r3, #40	@ 0x28
 8008218:	2102      	movs	r1, #2
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fa5c 	bl	80096d8 <RCCEx_PLL3_Config>
 8008220:	4603      	mov	r3, r0
 8008222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008236:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	e000      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
}
 8008244:	4618      	mov	r0, r3
 8008246:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800824a:	46bd      	mov	sp, r7
 800824c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008250:	58024400 	.word	0x58024400

08008254 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b090      	sub	sp, #64	@ 0x40
 8008258:	af00      	add	r7, sp, #0
 800825a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800825e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008262:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008266:	430b      	orrs	r3, r1
 8008268:	f040 8094 	bne.w	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800826c:	4b9e      	ldr	r3, [pc, #632]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800826e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	2b04      	cmp	r3, #4
 800827a:	f200 8087 	bhi.w	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800827e:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	08008299 	.word	0x08008299
 8008288:	080082c1 	.word	0x080082c1
 800828c:	080082e9 	.word	0x080082e9
 8008290:	08008385 	.word	0x08008385
 8008294:	08008311 	.word	0x08008311
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008298:	4b93      	ldr	r3, [pc, #588]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082a4:	d108      	bne.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 f810 	bl	80092d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b4:	f000 bd45 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082bc:	f000 bd41 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082c0:	4b89      	ldr	r3, [pc, #548]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082cc:	d108      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ce:	f107 0318 	add.w	r3, r7, #24
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fd54 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082dc:	f000 bd31 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e4:	f000 bd2d 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082e8:	4b7f      	ldr	r3, [pc, #508]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082f4:	d108      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f6:	f107 030c 	add.w	r3, r7, #12
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fe94 	bl	8009028 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008304:	f000 bd1d 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800830c:	f000 bd19 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008310:	4b75      	ldr	r3, [pc, #468]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008314:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800831a:	4b73      	ldr	r3, [pc, #460]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0304 	and.w	r3, r3, #4
 8008322:	2b04      	cmp	r3, #4
 8008324:	d10c      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008328:	2b00      	cmp	r3, #0
 800832a:	d109      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800832c:	4b6e      	ldr	r3, [pc, #440]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	08db      	lsrs	r3, r3, #3
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	4a6d      	ldr	r2, [pc, #436]	@ (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008338:	fa22 f303 	lsr.w	r3, r2, r3
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800833e:	e01f      	b.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008340:	4b69      	ldr	r3, [pc, #420]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834c:	d106      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800834e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008354:	d102      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008356:	4b66      	ldr	r3, [pc, #408]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800835a:	e011      	b.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800835c:	4b62      	ldr	r3, [pc, #392]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008368:	d106      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800836a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008370:	d102      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008372:	4b60      	ldr	r3, [pc, #384]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008376:	e003      	b.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800837c:	f000 bce1 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008380:	f000 bcdf 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008384:	4b5c      	ldr	r3, [pc, #368]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008388:	f000 bcdb 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008390:	f000 bcd7 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008398:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800839c:	430b      	orrs	r3, r1
 800839e:	f040 80ad 	bne.w	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80083a2:	4b51      	ldr	r3, [pc, #324]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80083aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80083ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b2:	d056      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80083b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ba:	f200 8090 	bhi.w	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80083c2:	f000 8088 	beq.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80083ca:	f200 8088 	bhi.w	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	2b80      	cmp	r3, #128	@ 0x80
 80083d2:	d032      	beq.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	2b80      	cmp	r3, #128	@ 0x80
 80083d8:	f200 8081 	bhi.w	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80083e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e4:	2b40      	cmp	r3, #64	@ 0x40
 80083e6:	d014      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80083e8:	e079      	b.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083ea:	4b3f      	ldr	r3, [pc, #252]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083f6:	d108      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 ff67 	bl	80092d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008406:	f000 bc9c 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840e:	f000 bc98 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008412:	4b35      	ldr	r3, [pc, #212]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800841a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800841e:	d108      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008420:	f107 0318 	add.w	r3, r7, #24
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fcab 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800842e:	f000 bc88 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008436:	f000 bc84 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800843a:	4b2b      	ldr	r3, [pc, #172]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008446:	d108      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008448:	f107 030c 	add.w	r3, r7, #12
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fdeb 	bl	8009028 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008456:	f000 bc74 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800845e:	f000 bc70 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008462:	4b21      	ldr	r3, [pc, #132]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008466:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800846a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800846c:	4b1e      	ldr	r3, [pc, #120]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b04      	cmp	r3, #4
 8008476:	d10c      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847a:	2b00      	cmp	r3, #0
 800847c:	d109      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800847e:	4b1a      	ldr	r3, [pc, #104]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	08db      	lsrs	r3, r3, #3
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	4a18      	ldr	r2, [pc, #96]	@ (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800848a:	fa22 f303 	lsr.w	r3, r2, r3
 800848e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008490:	e01f      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008492:	4b15      	ldr	r3, [pc, #84]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800849a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800849e:	d106      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80084a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084a6:	d102      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084a8:	4b11      	ldr	r3, [pc, #68]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80084aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ac:	e011      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084ae:	4b0e      	ldr	r3, [pc, #56]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084ba:	d106      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80084bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084c2:	d102      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084c4:	4b0b      	ldr	r3, [pc, #44]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084c8:	e003      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084ce:	f000 bc38 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084d2:	f000 bc36 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084d6:	4b08      	ldr	r3, [pc, #32]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80084d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084da:	f000 bc32 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e2:	f000 bc2e 	b.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084e6:	bf00      	nop
 80084e8:	58024400 	.word	0x58024400
 80084ec:	03d09000 	.word	0x03d09000
 80084f0:	003d0900 	.word	0x003d0900
 80084f4:	00f42400 	.word	0x00f42400
 80084f8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80084fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008500:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008504:	430b      	orrs	r3, r1
 8008506:	f040 809c 	bne.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800850a:	4b9e      	ldr	r3, [pc, #632]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800850c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800850e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008512:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800851a:	d054      	beq.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008522:	f200 808b 	bhi.w	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800852c:	f000 8083 	beq.w	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008532:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008536:	f200 8081 	bhi.w	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008540:	d02f      	beq.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008548:	d878      	bhi.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008556:	d012      	beq.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008558:	e070      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800855a:	4b8a      	ldr	r3, [pc, #552]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008566:	d107      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800856c:	4618      	mov	r0, r3
 800856e:	f000 feaf 	bl	80092d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008576:	e3e4      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800857c:	e3e1      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800857e:	4b81      	ldr	r3, [pc, #516]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800858a:	d107      	bne.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800858c:	f107 0318 	add.w	r3, r7, #24
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fbf5 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800859a:	e3d2      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a0:	e3cf      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085a2:	4b78      	ldr	r3, [pc, #480]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ae:	d107      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085b0:	f107 030c 	add.w	r3, r7, #12
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fd37 	bl	8009028 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085be:	e3c0      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c4:	e3bd      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085c6:	4b6f      	ldr	r3, [pc, #444]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085d0:	4b6c      	ldr	r3, [pc, #432]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d10c      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80085dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085e2:	4b68      	ldr	r3, [pc, #416]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	08db      	lsrs	r3, r3, #3
 80085e8:	f003 0303 	and.w	r3, r3, #3
 80085ec:	4a66      	ldr	r2, [pc, #408]	@ (8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80085ee:	fa22 f303 	lsr.w	r3, r2, r3
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085f4:	e01e      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085f6:	4b63      	ldr	r3, [pc, #396]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008602:	d106      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800860a:	d102      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800860c:	4b5f      	ldr	r3, [pc, #380]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008610:	e010      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008612:	4b5c      	ldr	r3, [pc, #368]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800861a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800861e:	d106      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008626:	d102      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008628:	4b59      	ldr	r3, [pc, #356]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800862a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800862c:	e002      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008632:	e386      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008634:	e385      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008636:	4b57      	ldr	r3, [pc, #348]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800863a:	e382      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008640:	e37f      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008646:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800864a:	430b      	orrs	r3, r1
 800864c:	f040 80a7 	bne.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008650:	4b4c      	ldr	r3, [pc, #304]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008654:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008658:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800865a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008660:	d055      	beq.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008668:	f200 8096 	bhi.w	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008672:	f000 8084 	beq.w	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800867c:	f200 808c 	bhi.w	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008686:	d030      	beq.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800868e:	f200 8083 	bhi.w	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	2b00      	cmp	r3, #0
 8008696:	d004      	beq.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800869e:	d012      	beq.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80086a0:	e07a      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086a2:	4b38      	ldr	r3, [pc, #224]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086ae:	d107      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fe0b 	bl	80092d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086be:	e340      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c4:	e33d      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086d2:	d107      	bne.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086d4:	f107 0318 	add.w	r3, r7, #24
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fb51 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e2:	e32e      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086e8:	e32b      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086ea:	4b26      	ldr	r3, [pc, #152]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086f6:	d107      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086f8:	f107 030c 	add.w	r3, r7, #12
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fc93 	bl	8009028 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008706:	e31c      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800870c:	e319      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800870e:	4b1d      	ldr	r3, [pc, #116]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008712:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008716:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008718:	4b1a      	ldr	r3, [pc, #104]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b04      	cmp	r3, #4
 8008722:	d10c      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800872a:	4b16      	ldr	r3, [pc, #88]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	08db      	lsrs	r3, r3, #3
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	4a14      	ldr	r2, [pc, #80]	@ (8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008736:	fa22 f303 	lsr.w	r3, r2, r3
 800873a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800873c:	e01e      	b.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800873e:	4b11      	ldr	r3, [pc, #68]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800874a:	d106      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800874c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008752:	d102      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008754:	4b0d      	ldr	r3, [pc, #52]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008758:	e010      	b.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800875a:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008766:	d106      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800876a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800876e:	d102      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008770:	4b07      	ldr	r3, [pc, #28]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008774:	e002      	b.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800877a:	e2e2      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800877c:	e2e1      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800877e:	4b05      	ldr	r3, [pc, #20]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008782:	e2de      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008784:	58024400 	.word	0x58024400
 8008788:	03d09000 	.word	0x03d09000
 800878c:	003d0900 	.word	0x003d0900
 8008790:	00f42400 	.word	0x00f42400
 8008794:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879c:	e2d1      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800879e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80087a6:	430b      	orrs	r3, r1
 80087a8:	f040 809c 	bne.w	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80087ac:	4b93      	ldr	r3, [pc, #588]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80087b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087bc:	d054      	beq.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80087be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087c4:	f200 808b 	bhi.w	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80087c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087ce:	f000 8083 	beq.w	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80087d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087d8:	f200 8081 	bhi.w	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087e2:	d02f      	beq.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80087e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ea:	d878      	bhi.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80087ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d004      	beq.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80087f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f8:	d012      	beq.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80087fa:	e070      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087fc:	4b7f      	ldr	r3, [pc, #508]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008808:	d107      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800880a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800880e:	4618      	mov	r0, r3
 8008810:	f000 fd5e 	bl	80092d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008818:	e293      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881e:	e290      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008820:	4b76      	ldr	r3, [pc, #472]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008828:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800882c:	d107      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800882e:	f107 0318 	add.w	r3, r7, #24
 8008832:	4618      	mov	r0, r3
 8008834:	f000 faa4 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800883c:	e281      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008842:	e27e      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008844:	4b6d      	ldr	r3, [pc, #436]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800884c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008850:	d107      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008852:	f107 030c 	add.w	r3, r7, #12
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fbe6 	bl	8009028 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008860:	e26f      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008866:	e26c      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008868:	4b64      	ldr	r3, [pc, #400]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800886a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800886c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008870:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008872:	4b62      	ldr	r3, [pc, #392]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b04      	cmp	r3, #4
 800887c:	d10c      	bne.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800887e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008880:	2b00      	cmp	r3, #0
 8008882:	d109      	bne.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008884:	4b5d      	ldr	r3, [pc, #372]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	08db      	lsrs	r3, r3, #3
 800888a:	f003 0303 	and.w	r3, r3, #3
 800888e:	4a5c      	ldr	r2, [pc, #368]	@ (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008890:	fa22 f303 	lsr.w	r3, r2, r3
 8008894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008896:	e01e      	b.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008898:	4b58      	ldr	r3, [pc, #352]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088a4:	d106      	bne.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80088a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ac:	d102      	bne.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088ae:	4b55      	ldr	r3, [pc, #340]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088b2:	e010      	b.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088b4:	4b51      	ldr	r3, [pc, #324]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088c0:	d106      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80088c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c8:	d102      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80088cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088ce:	e002      	b.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088d4:	e235      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80088d6:	e234      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088d8:	4b4c      	ldr	r3, [pc, #304]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088dc:	e231      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e2:	e22e      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80088e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80088ec:	430b      	orrs	r3, r1
 80088ee:	f040 808f 	bne.w	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80088f2:	4b42      	ldr	r3, [pc, #264]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088f6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80088fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80088fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008902:	d06b      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008906:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800890a:	d874      	bhi.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008912:	d056      	beq.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800891a:	d86c      	bhi.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800891c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008922:	d03b      	beq.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008926:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800892a:	d864      	bhi.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800892c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008932:	d021      	beq.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800893a:	d85c      	bhi.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800893c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893e:	2b00      	cmp	r3, #0
 8008940:	d004      	beq.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008948:	d004      	beq.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800894a:	e054      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800894c:	f7fe fa62 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 8008950:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008952:	e1f6      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008954:	4b29      	ldr	r3, [pc, #164]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800895c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008960:	d107      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008962:	f107 0318 	add.w	r3, r7, #24
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fa0a 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008970:	e1e7      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008976:	e1e4      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008978:	4b20      	ldr	r3, [pc, #128]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008984:	d107      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008986:	f107 030c 	add.w	r3, r7, #12
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fb4c 	bl	8009028 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008994:	e1d5      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800899a:	e1d2      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800899c:	4b17      	ldr	r3, [pc, #92]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	d109      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089a8:	4b14      	ldr	r3, [pc, #80]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	08db      	lsrs	r3, r3, #3
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	4a13      	ldr	r2, [pc, #76]	@ (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80089b4:	fa22 f303 	lsr.w	r3, r2, r3
 80089b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ba:	e1c2      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c0:	e1bf      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80089c2:	4b0e      	ldr	r3, [pc, #56]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ce:	d102      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80089d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089d4:	e1b5      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089da:	e1b2      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089dc:	4b07      	ldr	r3, [pc, #28]	@ (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089e8:	d102      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80089ea:	4b07      	ldr	r3, [pc, #28]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80089ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ee:	e1a8      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f4:	e1a5      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fa:	e1a2      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089fc:	58024400 	.word	0x58024400
 8008a00:	03d09000 	.word	0x03d09000
 8008a04:	003d0900 	.word	0x003d0900
 8008a08:	00f42400 	.word	0x00f42400
 8008a0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a14:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	d173      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008a1c:	4b9c      	ldr	r3, [pc, #624]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a24:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a2c:	d02f      	beq.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a34:	d863      	bhi.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a42:	d012      	beq.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008a44:	e05b      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a46:	4b92      	ldr	r3, [pc, #584]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a52:	d107      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a54:	f107 0318 	add.w	r3, r7, #24
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 f991 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a62:	e16e      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a68:	e16b      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a6a:	4b89      	ldr	r3, [pc, #548]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a76:	d107      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a78:	f107 030c 	add.w	r3, r7, #12
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fad3 	bl	8009028 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a86:	e15c      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a8c:	e159      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a8e:	4b80      	ldr	r3, [pc, #512]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a98:	4b7d      	ldr	r3, [pc, #500]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d10c      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aaa:	4b79      	ldr	r3, [pc, #484]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	08db      	lsrs	r3, r3, #3
 8008ab0:	f003 0303 	and.w	r3, r3, #3
 8008ab4:	4a77      	ldr	r2, [pc, #476]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8008aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008abc:	e01e      	b.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008abe:	4b74      	ldr	r3, [pc, #464]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aca:	d106      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ad2:	d102      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ad4:	4b70      	ldr	r3, [pc, #448]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ad8:	e010      	b.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ada:	4b6d      	ldr	r3, [pc, #436]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ae6:	d106      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aee:	d102      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008af0:	4b6a      	ldr	r3, [pc, #424]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af4:	e002      	b.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008afa:	e122      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008afc:	e121      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b02:	e11e      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b08:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	d133      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008b10:	4b5f      	ldr	r3, [pc, #380]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d004      	beq.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b26:	d012      	beq.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008b28:	e023      	b.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b2a:	4b59      	ldr	r3, [pc, #356]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b36:	d107      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fbc7 	bl	80092d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b46:	e0fc      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b4c:	e0f9      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b4e:	4b50      	ldr	r3, [pc, #320]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b5a:	d107      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b5c:	f107 0318 	add.w	r3, r7, #24
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f90d 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b6a:	e0ea      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b70:	e0e7      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b76:	e0e4      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b80:	430b      	orrs	r3, r1
 8008b82:	f040 808d 	bne.w	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b86:	4b42      	ldr	r3, [pc, #264]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b8a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008b8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b96:	d06b      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b9e:	d874      	bhi.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ba6:	d056      	beq.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bae:	d86c      	bhi.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008bb6:	d03b      	beq.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008bbe:	d864      	bhi.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc6:	d021      	beq.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bce:	d85c      	bhi.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d004      	beq.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bdc:	d004      	beq.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008bde:	e054      	b.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008be0:	f000 f8b8 	bl	8008d54 <HAL_RCCEx_GetD3PCLK1Freq>
 8008be4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008be6:	e0ac      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008be8:	4b29      	ldr	r3, [pc, #164]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bf4:	d107      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf6:	f107 0318 	add.w	r3, r7, #24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f8c0 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c04:	e09d      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0a:	e09a      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c0c:	4b20      	ldr	r3, [pc, #128]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c18:	d107      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c1a:	f107 030c 	add.w	r3, r7, #12
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fa02 	bl	8009028 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c28:	e08b      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c2e:	e088      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c30:	4b17      	ldr	r3, [pc, #92]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d109      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c3c:	4b14      	ldr	r3, [pc, #80]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	08db      	lsrs	r3, r3, #3
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	4a13      	ldr	r2, [pc, #76]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008c48:	fa22 f303 	lsr.w	r3, r2, r3
 8008c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c4e:	e078      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c54:	e075      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c56:	4b0e      	ldr	r3, [pc, #56]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c62:	d102      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008c64:	4b0c      	ldr	r3, [pc, #48]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c68:	e06b      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c6e:	e068      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c7c:	d102      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008c7e:	4b07      	ldr	r3, [pc, #28]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c82:	e05e      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c88:	e05b      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8e:	e058      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c90:	58024400 	.word	0x58024400
 8008c94:	03d09000 	.word	0x03d09000
 8008c98:	003d0900 	.word	0x003d0900
 8008c9c:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	d148      	bne.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008cac:	4b27      	ldr	r3, [pc, #156]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cbc:	d02a      	beq.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cc4:	d838      	bhi.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cd2:	d00d      	beq.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008cd4:	e030      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ce2:	d102      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce8:	e02b      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cee:	e028      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cf0:	4b16      	ldr	r3, [pc, #88]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cfc:	d107      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fae4 	bl	80092d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d0c:	e019      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d12:	e016      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d14:	4b0d      	ldr	r3, [pc, #52]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d20:	d107      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d22:	f107 0318 	add.w	r3, r7, #24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 f82a 	bl	8008d80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d30:	e007      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d36:	e004      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d3c:	e001      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3740      	adds	r7, #64	@ 0x40
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	00f42400 	.word	0x00f42400

08008d54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d58:	f7fe f82c 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	4b06      	ldr	r3, [pc, #24]	@ (8008d78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	091b      	lsrs	r3, r3, #4
 8008d64:	f003 0307 	and.w	r3, r3, #7
 8008d68:	4904      	ldr	r1, [pc, #16]	@ (8008d7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d6a:	5ccb      	ldrb	r3, [r1, r3]
 8008d6c:	f003 031f 	and.w	r3, r3, #31
 8008d70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	58024400 	.word	0x58024400
 8008d7c:	0800fa20 	.word	0x0800fa20

08008d80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b089      	sub	sp, #36	@ 0x24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d88:	4ba1      	ldr	r3, [pc, #644]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8c:	f003 0303 	and.w	r3, r3, #3
 8008d90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008d92:	4b9f      	ldr	r3, [pc, #636]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d96:	0b1b      	lsrs	r3, r3, #12
 8008d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da2:	091b      	lsrs	r3, r3, #4
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008daa:	4b99      	ldr	r3, [pc, #612]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dae:	08db      	lsrs	r3, r3, #3
 8008db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	fb02 f303 	mul.w	r3, r2, r3
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 8111 	beq.w	8008ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	f000 8083 	beq.w	8008edc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	f200 80a1 	bhi.w	8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d056      	beq.n	8008e98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008dea:	e099      	b.n	8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dec:	4b88      	ldr	r3, [pc, #544]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d02d      	beq.n	8008e54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008df8:	4b85      	ldr	r3, [pc, #532]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	08db      	lsrs	r3, r3, #3
 8008dfe:	f003 0303 	and.w	r3, r3, #3
 8008e02:	4a84      	ldr	r2, [pc, #528]	@ (8009014 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e04:	fa22 f303 	lsr.w	r3, r2, r3
 8008e08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	ee07 3a90 	vmov	s15, r3
 8008e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e22:	4b7b      	ldr	r3, [pc, #492]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e52:	e087      	b.n	8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800901c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e66:	4b6a      	ldr	r3, [pc, #424]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6e:	ee07 3a90 	vmov	s15, r3
 8008e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e96:	e065      	b.n	8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009020 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eaa:	4b59      	ldr	r3, [pc, #356]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ebe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eda:	e043      	b.n	8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009024 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eee:	4b48      	ldr	r3, [pc, #288]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f1e:	e021      	b.n	8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009020 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f32:	4b37      	ldr	r3, [pc, #220]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008f64:	4b2a      	ldr	r3, [pc, #168]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f68:	0a5b      	lsrs	r3, r3, #9
 8008f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f8a:	ee17 2a90 	vmov	r2, s15
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008f92:	4b1f      	ldr	r3, [pc, #124]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f96:	0c1b      	lsrs	r3, r3, #16
 8008f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb8:	ee17 2a90 	vmov	r2, s15
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008fc0:	4b13      	ldr	r3, [pc, #76]	@ (8009010 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc4:	0e1b      	lsrs	r3, r3, #24
 8008fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fca:	ee07 3a90 	vmov	s15, r3
 8008fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe6:	ee17 2a90 	vmov	r2, s15
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008fee:	e008      	b.n	8009002 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	609a      	str	r2, [r3, #8]
}
 8009002:	bf00      	nop
 8009004:	3724      	adds	r7, #36	@ 0x24
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	58024400 	.word	0x58024400
 8009014:	03d09000 	.word	0x03d09000
 8009018:	46000000 	.word	0x46000000
 800901c:	4c742400 	.word	0x4c742400
 8009020:	4a742400 	.word	0x4a742400
 8009024:	4b742400 	.word	0x4b742400

08009028 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009028:	b480      	push	{r7}
 800902a:	b089      	sub	sp, #36	@ 0x24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009030:	4ba1      	ldr	r3, [pc, #644]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009034:	f003 0303 	and.w	r3, r3, #3
 8009038:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800903a:	4b9f      	ldr	r3, [pc, #636]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800903c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903e:	0d1b      	lsrs	r3, r3, #20
 8009040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009044:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009046:	4b9c      	ldr	r3, [pc, #624]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904a:	0a1b      	lsrs	r3, r3, #8
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009052:	4b99      	ldr	r3, [pc, #612]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009056:	08db      	lsrs	r3, r3, #3
 8009058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	fb02 f303 	mul.w	r3, r2, r3
 8009062:	ee07 3a90 	vmov	s15, r3
 8009066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8111 	beq.w	8009298 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b02      	cmp	r3, #2
 800907a:	f000 8083 	beq.w	8009184 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	2b02      	cmp	r3, #2
 8009082:	f200 80a1 	bhi.w	80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d056      	beq.n	8009140 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009092:	e099      	b.n	80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009094:	4b88      	ldr	r3, [pc, #544]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0320 	and.w	r3, r3, #32
 800909c:	2b00      	cmp	r3, #0
 800909e:	d02d      	beq.n	80090fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090a0:	4b85      	ldr	r3, [pc, #532]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	08db      	lsrs	r3, r3, #3
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	4a84      	ldr	r2, [pc, #528]	@ (80092bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80090ac:	fa22 f303 	lsr.w	r3, r2, r3
 80090b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	ee07 3a90 	vmov	s15, r3
 80090b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ca:	4b7b      	ldr	r3, [pc, #492]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090da:	ed97 6a03 	vldr	s12, [r7, #12]
 80090de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090fa:	e087      	b.n	800920c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80092c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800910a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910e:	4b6a      	ldr	r3, [pc, #424]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009122:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800913e:	e065      	b.n	800920c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80092c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800914e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009152:	4b59      	ldr	r3, [pc, #356]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009162:	ed97 6a03 	vldr	s12, [r7, #12]
 8009166:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800916a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009182:	e043      	b.n	800920c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80092cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009196:	4b48      	ldr	r3, [pc, #288]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c6:	e021      	b.n	800920c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80092c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091da:	4b37      	ldr	r3, [pc, #220]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800920a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800920c:	4b2a      	ldr	r3, [pc, #168]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800920e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009210:	0a5b      	lsrs	r3, r3, #9
 8009212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009216:	ee07 3a90 	vmov	s15, r3
 800921a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009226:	edd7 6a07 	vldr	s13, [r7, #28]
 800922a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800922e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009232:	ee17 2a90 	vmov	r2, s15
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800923a:	4b1f      	ldr	r3, [pc, #124]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800923c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923e:	0c1b      	lsrs	r3, r3, #16
 8009240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009244:	ee07 3a90 	vmov	s15, r3
 8009248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009254:	edd7 6a07 	vldr	s13, [r7, #28]
 8009258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800925c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009260:	ee17 2a90 	vmov	r2, s15
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009268:	4b13      	ldr	r3, [pc, #76]	@ (80092b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800926a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926c:	0e1b      	lsrs	r3, r3, #24
 800926e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800927e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009282:	edd7 6a07 	vldr	s13, [r7, #28]
 8009286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800928a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800928e:	ee17 2a90 	vmov	r2, s15
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009296:	e008      	b.n	80092aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	609a      	str	r2, [r3, #8]
}
 80092aa:	bf00      	nop
 80092ac:	3724      	adds	r7, #36	@ 0x24
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	58024400 	.word	0x58024400
 80092bc:	03d09000 	.word	0x03d09000
 80092c0:	46000000 	.word	0x46000000
 80092c4:	4c742400 	.word	0x4c742400
 80092c8:	4a742400 	.word	0x4a742400
 80092cc:	4b742400 	.word	0x4b742400

080092d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b089      	sub	sp, #36	@ 0x24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092d8:	4ba0      	ldr	r3, [pc, #640]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092dc:	f003 0303 	and.w	r3, r3, #3
 80092e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80092e2:	4b9e      	ldr	r3, [pc, #632]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e6:	091b      	lsrs	r3, r3, #4
 80092e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80092ee:	4b9b      	ldr	r3, [pc, #620]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80092f8:	4b98      	ldr	r3, [pc, #608]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092fc:	08db      	lsrs	r3, r3, #3
 80092fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	fb02 f303 	mul.w	r3, r2, r3
 8009308:	ee07 3a90 	vmov	s15, r3
 800930c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009310:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 8111 	beq.w	800953e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	2b02      	cmp	r3, #2
 8009320:	f000 8083 	beq.w	800942a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	2b02      	cmp	r3, #2
 8009328:	f200 80a1 	bhi.w	800946e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d056      	beq.n	80093e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009338:	e099      	b.n	800946e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800933a:	4b88      	ldr	r3, [pc, #544]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b00      	cmp	r3, #0
 8009344:	d02d      	beq.n	80093a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009346:	4b85      	ldr	r3, [pc, #532]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	08db      	lsrs	r3, r3, #3
 800934c:	f003 0303 	and.w	r3, r3, #3
 8009350:	4a83      	ldr	r2, [pc, #524]	@ (8009560 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009352:	fa22 f303 	lsr.w	r3, r2, r3
 8009356:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009370:	4b7a      	ldr	r3, [pc, #488]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009380:	ed97 6a03 	vldr	s12, [r7, #12]
 8009384:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009564 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093a0:	e087      	b.n	80094b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	ee07 3a90 	vmov	s15, r3
 80093a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009568 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b4:	4b69      	ldr	r3, [pc, #420]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093bc:	ee07 3a90 	vmov	s15, r3
 80093c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009564 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093e4:	e065      	b.n	80094b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	ee07 3a90 	vmov	s15, r3
 80093ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800956c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80093f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f8:	4b58      	ldr	r3, [pc, #352]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009400:	ee07 3a90 	vmov	s15, r3
 8009404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009408:	ed97 6a03 	vldr	s12, [r7, #12]
 800940c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009564 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800941c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009424:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009428:	e043      	b.n	80094b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	ee07 3a90 	vmov	s15, r3
 8009430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009434:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009570 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943c:	4b47      	ldr	r3, [pc, #284]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800943e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009444:	ee07 3a90 	vmov	s15, r3
 8009448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009450:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009564 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009468:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800946c:	e021      	b.n	80094b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	ee07 3a90 	vmov	s15, r3
 8009474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009478:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009568 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800947c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009480:	4b36      	ldr	r3, [pc, #216]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009490:	ed97 6a03 	vldr	s12, [r7, #12]
 8009494:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009564 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80094b2:	4b2a      	ldr	r3, [pc, #168]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b6:	0a5b      	lsrs	r3, r3, #9
 80094b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094bc:	ee07 3a90 	vmov	s15, r3
 80094c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80094d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d8:	ee17 2a90 	vmov	r2, s15
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80094e0:	4b1e      	ldr	r3, [pc, #120]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e4:	0c1b      	lsrs	r3, r3, #16
 80094e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ea:	ee07 3a90 	vmov	s15, r3
 80094ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80094fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009506:	ee17 2a90 	vmov	r2, s15
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800950e:	4b13      	ldr	r3, [pc, #76]	@ (800955c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009512:	0e1b      	lsrs	r3, r3, #24
 8009514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009518:	ee07 3a90 	vmov	s15, r3
 800951c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009520:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009524:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009528:	edd7 6a07 	vldr	s13, [r7, #28]
 800952c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009534:	ee17 2a90 	vmov	r2, s15
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800953c:	e008      	b.n	8009550 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	609a      	str	r2, [r3, #8]
}
 8009550:	bf00      	nop
 8009552:	3724      	adds	r7, #36	@ 0x24
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	58024400 	.word	0x58024400
 8009560:	03d09000 	.word	0x03d09000
 8009564:	46000000 	.word	0x46000000
 8009568:	4c742400 	.word	0x4c742400
 800956c:	4a742400 	.word	0x4a742400
 8009570:	4b742400 	.word	0x4b742400

08009574 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009582:	4b53      	ldr	r3, [pc, #332]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	2b03      	cmp	r3, #3
 800958c:	d101      	bne.n	8009592 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e099      	b.n	80096c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009592:	4b4f      	ldr	r3, [pc, #316]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a4e      	ldr	r2, [pc, #312]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009598:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800959c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800959e:	f7fa f905 	bl	80037ac <HAL_GetTick>
 80095a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095a4:	e008      	b.n	80095b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095a6:	f7fa f901 	bl	80037ac <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d901      	bls.n	80095b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e086      	b.n	80096c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095b8:	4b45      	ldr	r3, [pc, #276]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1f0      	bne.n	80095a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80095c4:	4b42      	ldr	r3, [pc, #264]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 80095c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	031b      	lsls	r3, r3, #12
 80095d2:	493f      	ldr	r1, [pc, #252]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	3b01      	subs	r3, #1
 80095de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	025b      	lsls	r3, r3, #9
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	041b      	lsls	r3, r3, #16
 80095f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	3b01      	subs	r3, #1
 8009602:	061b      	lsls	r3, r3, #24
 8009604:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009608:	4931      	ldr	r1, [pc, #196]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 800960a:	4313      	orrs	r3, r2
 800960c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800960e:	4b30      	ldr	r3, [pc, #192]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009612:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	492d      	ldr	r1, [pc, #180]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 800961c:	4313      	orrs	r3, r2
 800961e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009620:	4b2b      	ldr	r3, [pc, #172]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009624:	f023 0220 	bic.w	r2, r3, #32
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	4928      	ldr	r1, [pc, #160]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 800962e:	4313      	orrs	r3, r2
 8009630:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009632:	4b27      	ldr	r3, [pc, #156]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009636:	4a26      	ldr	r2, [pc, #152]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009638:	f023 0310 	bic.w	r3, r3, #16
 800963c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800963e:	4b24      	ldr	r3, [pc, #144]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009640:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009642:	4b24      	ldr	r3, [pc, #144]	@ (80096d4 <RCCEx_PLL2_Config+0x160>)
 8009644:	4013      	ands	r3, r2
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	69d2      	ldr	r2, [r2, #28]
 800964a:	00d2      	lsls	r2, r2, #3
 800964c:	4920      	ldr	r1, [pc, #128]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 800964e:	4313      	orrs	r3, r2
 8009650:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009652:	4b1f      	ldr	r3, [pc, #124]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009656:	4a1e      	ldr	r2, [pc, #120]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009658:	f043 0310 	orr.w	r3, r3, #16
 800965c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009664:	4b1a      	ldr	r3, [pc, #104]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	4a19      	ldr	r2, [pc, #100]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 800966a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800966e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009670:	e00f      	b.n	8009692 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d106      	bne.n	8009686 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009678:	4b15      	ldr	r3, [pc, #84]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 800967a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967c:	4a14      	ldr	r2, [pc, #80]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 800967e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009684:	e005      	b.n	8009692 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009686:	4b12      	ldr	r3, [pc, #72]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968a:	4a11      	ldr	r2, [pc, #68]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 800968c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009690:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009692:	4b0f      	ldr	r3, [pc, #60]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a0e      	ldr	r2, [pc, #56]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 8009698:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800969c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800969e:	f7fa f885 	bl	80037ac <HAL_GetTick>
 80096a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096a4:	e008      	b.n	80096b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096a6:	f7fa f881 	bl	80037ac <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e006      	b.n	80096c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096b8:	4b05      	ldr	r3, [pc, #20]	@ (80096d0 <RCCEx_PLL2_Config+0x15c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0f0      	beq.n	80096a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	58024400 	.word	0x58024400
 80096d4:	ffff0007 	.word	0xffff0007

080096d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096e6:	4b53      	ldr	r3, [pc, #332]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80096e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ea:	f003 0303 	and.w	r3, r3, #3
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	d101      	bne.n	80096f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e099      	b.n	800982a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80096f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a4e      	ldr	r2, [pc, #312]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80096fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009702:	f7fa f853 	bl	80037ac <HAL_GetTick>
 8009706:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009708:	e008      	b.n	800971c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800970a:	f7fa f84f 	bl	80037ac <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b02      	cmp	r3, #2
 8009716:	d901      	bls.n	800971c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e086      	b.n	800982a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800971c:	4b45      	ldr	r3, [pc, #276]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1f0      	bne.n	800970a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009728:	4b42      	ldr	r3, [pc, #264]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 800972a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	051b      	lsls	r3, r3, #20
 8009736:	493f      	ldr	r1, [pc, #252]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 8009738:	4313      	orrs	r3, r2
 800973a:	628b      	str	r3, [r1, #40]	@ 0x28
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	3b01      	subs	r3, #1
 8009742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	3b01      	subs	r3, #1
 800974c:	025b      	lsls	r3, r3, #9
 800974e:	b29b      	uxth	r3, r3
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	3b01      	subs	r3, #1
 8009758:	041b      	lsls	r3, r3, #16
 800975a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800975e:	431a      	orrs	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	3b01      	subs	r3, #1
 8009766:	061b      	lsls	r3, r3, #24
 8009768:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800976c:	4931      	ldr	r1, [pc, #196]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 800976e:	4313      	orrs	r3, r2
 8009770:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009772:	4b30      	ldr	r3, [pc, #192]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 8009774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009776:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	492d      	ldr	r1, [pc, #180]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 8009780:	4313      	orrs	r3, r2
 8009782:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009784:	4b2b      	ldr	r3, [pc, #172]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 8009786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009788:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	4928      	ldr	r1, [pc, #160]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 8009792:	4313      	orrs	r3, r2
 8009794:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009796:	4b27      	ldr	r3, [pc, #156]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 8009798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979a:	4a26      	ldr	r2, [pc, #152]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 800979c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80097a2:	4b24      	ldr	r3, [pc, #144]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097a6:	4b24      	ldr	r3, [pc, #144]	@ (8009838 <RCCEx_PLL3_Config+0x160>)
 80097a8:	4013      	ands	r3, r2
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	69d2      	ldr	r2, [r2, #28]
 80097ae:	00d2      	lsls	r2, r2, #3
 80097b0:	4920      	ldr	r1, [pc, #128]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80097c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097cc:	4a19      	ldr	r2, [pc, #100]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80097d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097d4:	e00f      	b.n	80097f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d106      	bne.n	80097ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80097dc:	4b15      	ldr	r3, [pc, #84]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e0:	4a14      	ldr	r2, [pc, #80]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80097e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097e8:	e005      	b.n	80097f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80097ea:	4b12      	ldr	r3, [pc, #72]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ee:	4a11      	ldr	r2, [pc, #68]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80097f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 80097fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009802:	f7f9 ffd3 	bl	80037ac <HAL_GetTick>
 8009806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009808:	e008      	b.n	800981c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800980a:	f7f9 ffcf 	bl	80037ac <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	2b02      	cmp	r3, #2
 8009816:	d901      	bls.n	800981c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e006      	b.n	800982a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800981c:	4b05      	ldr	r3, [pc, #20]	@ (8009834 <RCCEx_PLL3_Config+0x15c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0f0      	beq.n	800980a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
 8009838:	ffff0007 	.word	0xffff0007

0800983c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e054      	b.n	80098f8 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7a5b      	ldrb	r3, [r3, #9]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b00      	cmp	r3, #0
 8009856:	d105      	bne.n	8009864 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7f9 fbd8 	bl	8003014 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2202      	movs	r2, #2
 8009868:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f023 0120 	bic.w	r1, r3, #32
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0204 	orr.w	r2, r2, #4
 800988e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800989a:	2b40      	cmp	r3, #64	@ 0x40
 800989c:	d104      	bne.n	80098a8 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2204      	movs	r2, #4
 80098a2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e027      	b.n	80098f8 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80098a8:	f7f9 ff80 	bl	80037ac <HAL_GetTick>
 80098ac:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80098ae:	e015      	b.n	80098dc <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80098b0:	f7f9 ff7c 	bl	80037ac <HAL_GetTick>
 80098b4:	4602      	mov	r2, r0
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d90e      	bls.n	80098dc <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f003 0304 	and.w	r3, r3, #4
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	d107      	bne.n	80098dc <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2204      	movs	r2, #4
 80098d0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2202      	movs	r2, #2
 80098d6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e00d      	b.n	80098f8 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d0e2      	beq.n	80098b0 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e10f      	b.n	8009b32 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a87      	ldr	r2, [pc, #540]	@ (8009b3c <HAL_SPI_Init+0x23c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00f      	beq.n	8009942 <HAL_SPI_Init+0x42>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a86      	ldr	r2, [pc, #536]	@ (8009b40 <HAL_SPI_Init+0x240>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d00a      	beq.n	8009942 <HAL_SPI_Init+0x42>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a84      	ldr	r2, [pc, #528]	@ (8009b44 <HAL_SPI_Init+0x244>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d005      	beq.n	8009942 <HAL_SPI_Init+0x42>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	2b0f      	cmp	r3, #15
 800993c:	d901      	bls.n	8009942 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e0f7      	b.n	8009b32 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 fb82 	bl	800b04c <SPI_GetPacketSize>
 8009948:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a7b      	ldr	r2, [pc, #492]	@ (8009b3c <HAL_SPI_Init+0x23c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d00c      	beq.n	800996e <HAL_SPI_Init+0x6e>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a79      	ldr	r2, [pc, #484]	@ (8009b40 <HAL_SPI_Init+0x240>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d007      	beq.n	800996e <HAL_SPI_Init+0x6e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a78      	ldr	r2, [pc, #480]	@ (8009b44 <HAL_SPI_Init+0x244>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d002      	beq.n	800996e <HAL_SPI_Init+0x6e>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b08      	cmp	r3, #8
 800996c:	d811      	bhi.n	8009992 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009972:	4a72      	ldr	r2, [pc, #456]	@ (8009b3c <HAL_SPI_Init+0x23c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d009      	beq.n	800998c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a70      	ldr	r2, [pc, #448]	@ (8009b40 <HAL_SPI_Init+0x240>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d004      	beq.n	800998c <HAL_SPI_Init+0x8c>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a6f      	ldr	r2, [pc, #444]	@ (8009b44 <HAL_SPI_Init+0x244>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d104      	bne.n	8009996 <HAL_SPI_Init+0x96>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b10      	cmp	r3, #16
 8009990:	d901      	bls.n	8009996 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e0cd      	b.n	8009b32 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d106      	bne.n	80099b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7f9 fb6c 	bl	8003088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 0201 	bic.w	r2, r2, #1
 80099c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80099d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80099dc:	d119      	bne.n	8009a12 <HAL_SPI_Init+0x112>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099e6:	d103      	bne.n	80099f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d008      	beq.n	8009a02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10c      	bne.n	8009a12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80099fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a00:	d107      	bne.n	8009a12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00f      	beq.n	8009a3e <HAL_SPI_Init+0x13e>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	2b06      	cmp	r3, #6
 8009a24:	d90b      	bls.n	8009a3e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e007      	b.n	8009a4e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	69da      	ldr	r2, [r3, #28]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a56:	431a      	orrs	r2, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a60:	ea42 0103 	orr.w	r1, r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	431a      	orrs	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	431a      	orrs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	431a      	orrs	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aae:	ea42 0103 	orr.w	r1, r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d113      	bne.n	8009aee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ad8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009aec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0201 	bic.w	r2, r2, #1
 8009afc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	40013000 	.word	0x40013000
 8009b40:	40003800 	.word	0x40003800
 8009b44:	40003c00 	.word	0x40003c00

08009b48 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af02      	add	r7, sp, #8
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	4613      	mov	r3, r2
 8009b56:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3320      	adds	r3, #32
 8009b5e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b60:	f7f9 fe24 	bl	80037ac <HAL_GetTick>
 8009b64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d001      	beq.n	8009b76 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009b72:	2302      	movs	r3, #2
 8009b74:	e1d1      	b.n	8009f1a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <HAL_SPI_Transmit+0x3a>
 8009b7c:	88fb      	ldrh	r3, [r7, #6]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e1c9      	b.n	8009f1a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d101      	bne.n	8009b94 <HAL_SPI_Transmit+0x4c>
 8009b90:	2302      	movs	r3, #2
 8009b92:	e1c2      	b.n	8009f1a <HAL_SPI_Transmit+0x3d2>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2203      	movs	r2, #3
 8009ba0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	88fa      	ldrh	r2, [r7, #6]
 8009bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	88fa      	ldrh	r2, [r7, #6]
 8009bbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009bec:	d108      	bne.n	8009c00 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	e009      	b.n	8009c14 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009c12:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	4b96      	ldr	r3, [pc, #600]	@ (8009e74 <HAL_SPI_Transmit+0x32c>)
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	88f9      	ldrh	r1, [r7, #6]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	6812      	ldr	r2, [r2, #0]
 8009c24:	430b      	orrs	r3, r1
 8009c26:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c40:	d107      	bne.n	8009c52 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	2b0f      	cmp	r3, #15
 8009c58:	d947      	bls.n	8009cea <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009c5a:	e03f      	b.n	8009cdc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d114      	bne.n	8009c94 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6812      	ldr	r2, [r2, #0]
 8009c74:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c7a:	1d1a      	adds	r2, r3, #4
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c92:	e023      	b.n	8009cdc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c94:	f7f9 fd8a 	bl	80037ac <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d803      	bhi.n	8009cac <HAL_SPI_Transmit+0x164>
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009caa:	d102      	bne.n	8009cb2 <HAL_SPI_Transmit+0x16a>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d114      	bne.n	8009cdc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f001 f8fc 	bl	800aeb0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e11e      	b.n	8009f1a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1b9      	bne.n	8009c5c <HAL_SPI_Transmit+0x114>
 8009ce8:	e0f1      	b.n	8009ece <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	2b07      	cmp	r3, #7
 8009cf0:	f240 80e6 	bls.w	8009ec0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009cf4:	e05d      	b.n	8009db2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	f003 0302 	and.w	r3, r3, #2
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d132      	bne.n	8009d6a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d918      	bls.n	8009d42 <HAL_SPI_Transmit+0x1fa>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d014      	beq.n	8009d42 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6812      	ldr	r2, [r2, #0]
 8009d22:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d28:	1d1a      	adds	r2, r3, #4
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	3b02      	subs	r3, #2
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009d40:	e037      	b.n	8009db2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d46:	881a      	ldrh	r2, [r3, #0]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d50:	1c9a      	adds	r2, r3, #2
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009d68:	e023      	b.n	8009db2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d6a:	f7f9 fd1f 	bl	80037ac <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d803      	bhi.n	8009d82 <HAL_SPI_Transmit+0x23a>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d80:	d102      	bne.n	8009d88 <HAL_SPI_Transmit+0x240>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d114      	bne.n	8009db2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f001 f891 	bl	800aeb0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e0b3      	b.n	8009f1a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d19b      	bne.n	8009cf6 <HAL_SPI_Transmit+0x1ae>
 8009dbe:	e086      	b.n	8009ece <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	f003 0302 	and.w	r3, r3, #2
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d154      	bne.n	8009e78 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d918      	bls.n	8009e0c <HAL_SPI_Transmit+0x2c4>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dde:	2b40      	cmp	r3, #64	@ 0x40
 8009de0:	d914      	bls.n	8009e0c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6812      	ldr	r2, [r2, #0]
 8009dec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009df2:	1d1a      	adds	r2, r3, #4
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	3b04      	subs	r3, #4
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e0a:	e059      	b.n	8009ec0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d917      	bls.n	8009e48 <HAL_SPI_Transmit+0x300>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d013      	beq.n	8009e48 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e24:	881a      	ldrh	r2, [r3, #0]
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e2e:	1c9a      	adds	r2, r3, #2
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	3b02      	subs	r3, #2
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e46:	e03b      	b.n	8009ec0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3320      	adds	r3, #32
 8009e52:	7812      	ldrb	r2, [r2, #0]
 8009e54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e72:	e025      	b.n	8009ec0 <HAL_SPI_Transmit+0x378>
 8009e74:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e78:	f7f9 fc98 	bl	80037ac <HAL_GetTick>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d803      	bhi.n	8009e90 <HAL_SPI_Transmit+0x348>
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8e:	d102      	bne.n	8009e96 <HAL_SPI_Transmit+0x34e>
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d114      	bne.n	8009ec0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f001 f80a 	bl	800aeb0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ea2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e02c      	b.n	8009f1a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f47f af79 	bne.w	8009dc0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2108      	movs	r1, #8
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f001 f889 	bl	800aff0 <SPI_WaitOnFlagUntilTimeout>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d007      	beq.n	8009ef4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eea:	f043 0220 	orr.w	r2, r3, #32
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 ffdb 	bl	800aeb0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e000      	b.n	8009f1a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009f18:	2300      	movs	r3, #0
  }
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop

08009f24 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	4613      	mov	r3, r2
 8009f32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f38:	095b      	lsrs	r3, r3, #5
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3330      	adds	r3, #48	@ 0x30
 8009f46:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f48:	f7f9 fc30 	bl	80037ac <HAL_GetTick>
 8009f4c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d001      	beq.n	8009f5e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	e250      	b.n	800a400 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <HAL_SPI_Receive+0x46>
 8009f64:	88fb      	ldrh	r3, [r7, #6]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e248      	b.n	800a400 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d101      	bne.n	8009f7c <HAL_SPI_Receive+0x58>
 8009f78:	2302      	movs	r3, #2
 8009f7a:	e241      	b.n	800a400 <HAL_SPI_Receive+0x4dc>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2204      	movs	r2, #4
 8009f88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	88fa      	ldrh	r2, [r7, #6]
 8009f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	88fa      	ldrh	r2, [r7, #6]
 8009fa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009fd4:	d108      	bne.n	8009fe8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	e009      	b.n	8009ffc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009ffa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	4b95      	ldr	r3, [pc, #596]	@ (800a258 <HAL_SPI_Receive+0x334>)
 800a004:	4013      	ands	r3, r2
 800a006:	88f9      	ldrh	r1, [r7, #6]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	6812      	ldr	r2, [r2, #0]
 800a00c:	430b      	orrs	r3, r1
 800a00e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0201 	orr.w	r2, r2, #1
 800a01e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a028:	d107      	bne.n	800a03a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a038:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	2b0f      	cmp	r3, #15
 800a040:	d96c      	bls.n	800a11c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a042:	e064      	b.n	800a10e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b01      	cmp	r3, #1
 800a058:	d114      	bne.n	800a084 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a062:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a064:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a06a:	1d1a      	adds	r2, r3, #4
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a076:	b29b      	uxth	r3, r3
 800a078:	3b01      	subs	r3, #1
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a082:	e044      	b.n	800a10e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	8bfa      	ldrh	r2, [r7, #30]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d919      	bls.n	800a0c6 <HAL_SPI_Receive+0x1a2>
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d014      	beq.n	800a0c6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a0a6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0ac:	1d1a      	adds	r2, r3, #4
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a0c4:	e023      	b.n	800a10e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0c6:	f7f9 fb71 	bl	80037ac <HAL_GetTick>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d803      	bhi.n	800a0de <HAL_SPI_Receive+0x1ba>
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0dc:	d102      	bne.n	800a0e4 <HAL_SPI_Receive+0x1c0>
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d114      	bne.n	800a10e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 fee3 	bl	800aeb0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e178      	b.n	800a400 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a114:	b29b      	uxth	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d194      	bne.n	800a044 <HAL_SPI_Receive+0x120>
 800a11a:	e15e      	b.n	800a3da <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	2b07      	cmp	r3, #7
 800a122:	f240 8153 	bls.w	800a3cc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a126:	e08f      	b.n	800a248 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d114      	bne.n	800a168 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	8812      	ldrh	r2, [r2, #0]
 800a146:	b292      	uxth	r2, r2
 800a148:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a14e:	1c9a      	adds	r2, r3, #2
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	3b01      	subs	r3, #1
 800a15e:	b29a      	uxth	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a166:	e06f      	b.n	800a248 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a16e:	b29b      	uxth	r3, r3
 800a170:	8bfa      	ldrh	r2, [r7, #30]
 800a172:	429a      	cmp	r2, r3
 800a174:	d924      	bls.n	800a1c0 <HAL_SPI_Receive+0x29c>
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d01f      	beq.n	800a1c0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	8812      	ldrh	r2, [r2, #0]
 800a188:	b292      	uxth	r2, r2
 800a18a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a190:	1c9a      	adds	r2, r3, #2
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	8812      	ldrh	r2, [r2, #0]
 800a19e:	b292      	uxth	r2, r2
 800a1a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1a6:	1c9a      	adds	r2, r3, #2
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	3b02      	subs	r3, #2
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a1be:	e043      	b.n	800a248 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d119      	bne.n	800a200 <HAL_SPI_Receive+0x2dc>
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d014      	beq.n	800a200 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	8812      	ldrh	r2, [r2, #0]
 800a1de:	b292      	uxth	r2, r2
 800a1e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1e6:	1c9a      	adds	r2, r3, #2
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a1fe:	e023      	b.n	800a248 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a200:	f7f9 fad4 	bl	80037ac <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d803      	bhi.n	800a218 <HAL_SPI_Receive+0x2f4>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a216:	d102      	bne.n	800a21e <HAL_SPI_Receive+0x2fa>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d114      	bne.n	800a248 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f000 fe46 	bl	800aeb0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a22a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e0db      	b.n	800a400 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a24e:	b29b      	uxth	r3, r3
 800a250:	2b00      	cmp	r3, #0
 800a252:	f47f af69 	bne.w	800a128 <HAL_SPI_Receive+0x204>
 800a256:	e0c0      	b.n	800a3da <HAL_SPI_Receive+0x4b6>
 800a258:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d117      	bne.n	800a2a2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a27e:	7812      	ldrb	r2, [r2, #0]
 800a280:	b2d2      	uxtb	r2, r2
 800a282:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a294:	b29b      	uxth	r3, r3
 800a296:	3b01      	subs	r3, #1
 800a298:	b29a      	uxth	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a2a0:	e094      	b.n	800a3cc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	8bfa      	ldrh	r2, [r7, #30]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d946      	bls.n	800a33e <HAL_SPI_Receive+0x41a>
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d041      	beq.n	800a33e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2c6:	7812      	ldrb	r2, [r2, #0]
 800a2c8:	b2d2      	uxtb	r2, r2
 800a2ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2e2:	7812      	ldrb	r2, [r2, #0]
 800a2e4:	b2d2      	uxtb	r2, r2
 800a2e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2fe:	7812      	ldrb	r2, [r2, #0]
 800a300:	b2d2      	uxtb	r2, r2
 800a302:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a31a:	7812      	ldrb	r2, [r2, #0]
 800a31c:	b2d2      	uxtb	r2, r2
 800a31e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a330:	b29b      	uxth	r3, r3
 800a332:	3b04      	subs	r3, #4
 800a334:	b29a      	uxth	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a33c:	e046      	b.n	800a3cc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a344:	b29b      	uxth	r3, r3
 800a346:	2b03      	cmp	r3, #3
 800a348:	d81c      	bhi.n	800a384 <HAL_SPI_Receive+0x460>
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d017      	beq.n	800a384 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a360:	7812      	ldrb	r2, [r2, #0]
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a376:	b29b      	uxth	r3, r3
 800a378:	3b01      	subs	r3, #1
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a382:	e023      	b.n	800a3cc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a384:	f7f9 fa12 	bl	80037ac <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	d803      	bhi.n	800a39c <HAL_SPI_Receive+0x478>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39a:	d102      	bne.n	800a3a2 <HAL_SPI_Receive+0x47e>
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d114      	bne.n	800a3cc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 fd84 	bl	800aeb0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e019      	b.n	800a400 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f47f af41 	bne.w	800a25c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f000 fd68 	bl	800aeb0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e000      	b.n	800a400 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
  }
}
 800a400:	4618      	mov	r0, r3
 800a402:	3720      	adds	r7, #32
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08e      	sub	sp, #56	@ 0x38
 800a40c:	af02      	add	r7, sp, #8
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3320      	adds	r3, #32
 800a41c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3330      	adds	r3, #48	@ 0x30
 800a424:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	3301      	adds	r3, #1
 800a430:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a432:	f7f9 f9bb 	bl	80037ac <HAL_GetTick>
 800a436:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a438:	887b      	ldrh	r3, [r7, #2]
 800a43a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a43c:	887b      	ldrh	r3, [r7, #2]
 800a43e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d001      	beq.n	800a450 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800a44c:	2302      	movs	r3, #2
 800a44e:	e310      	b.n	800aa72 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d005      	beq.n	800a462 <HAL_SPI_TransmitReceive+0x5a>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <HAL_SPI_TransmitReceive+0x5a>
 800a45c:	887b      	ldrh	r3, [r7, #2]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e305      	b.n	800aa72 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d101      	bne.n	800a474 <HAL_SPI_TransmitReceive+0x6c>
 800a470:	2302      	movs	r3, #2
 800a472:	e2fe      	b.n	800aa72 <HAL_SPI_TransmitReceive+0x66a>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2205      	movs	r2, #5
 800a480:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	887a      	ldrh	r2, [r7, #2]
 800a496:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	887a      	ldrh	r2, [r7, #2]
 800a49e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	887a      	ldrh	r2, [r7, #2]
 800a4ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	887a      	ldrh	r2, [r7, #2]
 800a4b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a4d2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a70      	ldr	r2, [pc, #448]	@ (800a69c <HAL_SPI_TransmitReceive+0x294>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d009      	beq.n	800a4f2 <HAL_SPI_TransmitReceive+0xea>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a6f      	ldr	r2, [pc, #444]	@ (800a6a0 <HAL_SPI_TransmitReceive+0x298>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d004      	beq.n	800a4f2 <HAL_SPI_TransmitReceive+0xea>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a6d      	ldr	r2, [pc, #436]	@ (800a6a4 <HAL_SPI_TransmitReceive+0x29c>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d102      	bne.n	800a4f8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a4f2:	2310      	movs	r3, #16
 800a4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4f6:	e001      	b.n	800a4fc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	4b69      	ldr	r3, [pc, #420]	@ (800a6a8 <HAL_SPI_TransmitReceive+0x2a0>)
 800a504:	4013      	ands	r3, r2
 800a506:	8879      	ldrh	r1, [r7, #2]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	6812      	ldr	r2, [r2, #0]
 800a50c:	430b      	orrs	r3, r1
 800a50e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f042 0201 	orr.w	r2, r2, #1
 800a51e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a528:	d107      	bne.n	800a53a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a538:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	2b0f      	cmp	r3, #15
 800a540:	f240 80a2 	bls.w	800a688 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a546:	089b      	lsrs	r3, r3, #2
 800a548:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a54a:	e094      	b.n	800a676 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b02      	cmp	r3, #2
 800a558:	d120      	bne.n	800a59c <HAL_SPI_TransmitReceive+0x194>
 800a55a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d01d      	beq.n	800a59c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a560:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a562:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a566:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a568:	429a      	cmp	r2, r3
 800a56a:	d217      	bcs.n	800a59c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a57c:	1d1a      	adds	r2, r3, #4
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a588:	b29b      	uxth	r3, r3
 800a58a:	3b01      	subs	r3, #1
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a59a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a5a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d065      	beq.n	800a676 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d118      	bne.n	800a5ea <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a5c2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5c8:	1d1a      	adds	r2, r3, #4
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a5e8:	e045      	b.n	800a676 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a5ea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a5ec:	8bfb      	ldrh	r3, [r7, #30]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d21d      	bcs.n	800a62e <HAL_SPI_TransmitReceive+0x226>
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d018      	beq.n	800a62e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a604:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a606:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a60c:	1d1a      	adds	r2, r3, #4
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a618:	b29b      	uxth	r3, r3
 800a61a:	3b01      	subs	r3, #1
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a62a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a62c:	e023      	b.n	800a676 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a62e:	f7f9 f8bd 	bl	80037ac <HAL_GetTick>
 800a632:	4602      	mov	r2, r0
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d803      	bhi.n	800a646 <HAL_SPI_TransmitReceive+0x23e>
 800a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a644:	d102      	bne.n	800a64c <HAL_SPI_TransmitReceive+0x244>
 800a646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d114      	bne.n	800a676 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 fc2f 	bl	800aeb0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a658:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e1fd      	b.n	800aa72 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a676:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f47f af67 	bne.w	800a54c <HAL_SPI_TransmitReceive+0x144>
 800a67e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a680:	2b00      	cmp	r3, #0
 800a682:	f47f af63 	bne.w	800a54c <HAL_SPI_TransmitReceive+0x144>
 800a686:	e1ce      	b.n	800aa26 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	2b07      	cmp	r3, #7
 800a68e:	f240 81c2 	bls.w	800aa16 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a694:	085b      	lsrs	r3, r3, #1
 800a696:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a698:	e0c9      	b.n	800a82e <HAL_SPI_TransmitReceive+0x426>
 800a69a:	bf00      	nop
 800a69c:	40013000 	.word	0x40013000
 800a6a0:	40003800 	.word	0x40003800
 800a6a4:	40003c00 	.word	0x40003c00
 800a6a8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d11f      	bne.n	800a6fa <HAL_SPI_TransmitReceive+0x2f2>
 800a6ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01c      	beq.n	800a6fa <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a6c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a6c2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d216      	bcs.n	800a6fa <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6d0:	881a      	ldrh	r2, [r3, #0]
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6da:	1c9a      	adds	r2, r3, #2
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6f8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a702:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 8092 	beq.w	800a82e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	f003 0301 	and.w	r3, r3, #1
 800a714:	2b01      	cmp	r3, #1
 800a716:	d118      	bne.n	800a74a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a71c:	6a3a      	ldr	r2, [r7, #32]
 800a71e:	8812      	ldrh	r2, [r2, #0]
 800a720:	b292      	uxth	r2, r2
 800a722:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a728:	1c9a      	adds	r2, r3, #2
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a734:	b29b      	uxth	r3, r3
 800a736:	3b01      	subs	r3, #1
 800a738:	b29a      	uxth	r2, r3
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a746:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a748:	e071      	b.n	800a82e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a74a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a74c:	8bfb      	ldrh	r3, [r7, #30]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d228      	bcs.n	800a7a4 <HAL_SPI_TransmitReceive+0x39c>
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d023      	beq.n	800a7a4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a760:	6a3a      	ldr	r2, [r7, #32]
 800a762:	8812      	ldrh	r2, [r2, #0]
 800a764:	b292      	uxth	r2, r2
 800a766:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a76c:	1c9a      	adds	r2, r3, #2
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a776:	6a3a      	ldr	r2, [r7, #32]
 800a778:	8812      	ldrh	r2, [r2, #0]
 800a77a:	b292      	uxth	r2, r2
 800a77c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a782:	1c9a      	adds	r2, r3, #2
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a78e:	b29b      	uxth	r3, r3
 800a790:	3b02      	subs	r3, #2
 800a792:	b29a      	uxth	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7a0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a7a2:	e044      	b.n	800a82e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a7a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d11d      	bne.n	800a7e6 <HAL_SPI_TransmitReceive+0x3de>
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d018      	beq.n	800a7e6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7b8:	6a3a      	ldr	r2, [r7, #32]
 800a7ba:	8812      	ldrh	r2, [r2, #0]
 800a7bc:	b292      	uxth	r2, r2
 800a7be:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7c4:	1c9a      	adds	r2, r3, #2
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a7e4:	e023      	b.n	800a82e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7e6:	f7f8 ffe1 	bl	80037ac <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d803      	bhi.n	800a7fe <HAL_SPI_TransmitReceive+0x3f6>
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fc:	d102      	bne.n	800a804 <HAL_SPI_TransmitReceive+0x3fc>
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a800:	2b00      	cmp	r3, #0
 800a802:	d114      	bne.n	800a82e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 fb53 	bl	800aeb0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a810:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e121      	b.n	800aa72 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a82e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a830:	2b00      	cmp	r3, #0
 800a832:	f47f af3b 	bne.w	800a6ac <HAL_SPI_TransmitReceive+0x2a4>
 800a836:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f47f af37 	bne.w	800a6ac <HAL_SPI_TransmitReceive+0x2a4>
 800a83e:	e0f2      	b.n	800aa26 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d121      	bne.n	800a892 <HAL_SPI_TransmitReceive+0x48a>
 800a84e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a850:	2b00      	cmp	r3, #0
 800a852:	d01e      	beq.n	800a892 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a854:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a856:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a85a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d218      	bcs.n	800a892 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3320      	adds	r3, #32
 800a86a:	7812      	ldrb	r2, [r2, #0]
 800a86c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a87e:	b29b      	uxth	r3, r3
 800a880:	3b01      	subs	r3, #1
 800a882:	b29a      	uxth	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a890:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a89a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 80ba 	beq.w	800aa16 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d11b      	bne.n	800a8e8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8bc:	7812      	ldrb	r2, [r2, #0]
 800a8be:	b2d2      	uxtb	r2, r2
 800a8c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8e4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a8e6:	e096      	b.n	800aa16 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a8e8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a8ea:	8bfb      	ldrh	r3, [r7, #30]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d24a      	bcs.n	800a986 <HAL_SPI_TransmitReceive+0x57e>
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d045      	beq.n	800a986 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a906:	7812      	ldrb	r2, [r2, #0]
 800a908:	b2d2      	uxtb	r2, r2
 800a90a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a910:	1c5a      	adds	r2, r3, #1
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a922:	7812      	ldrb	r2, [r2, #0]
 800a924:	b2d2      	uxtb	r2, r2
 800a926:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a92c:	1c5a      	adds	r2, r3, #1
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a93e:	7812      	ldrb	r2, [r2, #0]
 800a940:	b2d2      	uxtb	r2, r2
 800a942:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a95a:	7812      	ldrb	r2, [r2, #0]
 800a95c:	b2d2      	uxtb	r2, r2
 800a95e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a970:	b29b      	uxth	r3, r3
 800a972:	3b04      	subs	r3, #4
 800a974:	b29a      	uxth	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a982:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a984:	e047      	b.n	800aa16 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a986:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d820      	bhi.n	800a9ce <HAL_SPI_TransmitReceive+0x5c6>
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01b      	beq.n	800a9ce <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a2:	7812      	ldrb	r2, [r2, #0]
 800a9a4:	b2d2      	uxtb	r2, r2
 800a9a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9ac:	1c5a      	adds	r2, r3, #1
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a9cc:	e023      	b.n	800aa16 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9ce:	f7f8 feed 	bl	80037ac <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d803      	bhi.n	800a9e6 <HAL_SPI_TransmitReceive+0x5de>
 800a9de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e4:	d102      	bne.n	800a9ec <HAL_SPI_TransmitReceive+0x5e4>
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d114      	bne.n	800aa16 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 fa5f 	bl	800aeb0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e02d      	b.n	800aa72 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aa16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f47f af11 	bne.w	800a840 <HAL_SPI_TransmitReceive+0x438>
 800aa1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f47f af0d 	bne.w	800a840 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2108      	movs	r1, #8
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 fadd 	bl	800aff0 <SPI_WaitOnFlagUntilTimeout>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d007      	beq.n	800aa4c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa42:	f043 0220 	orr.w	r2, r3, #32
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 fa2f 	bl	800aeb0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e000      	b.n	800aa72 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800aa70:	2300      	movs	r3, #0
  }
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3730      	adds	r7, #48	@ 0x30
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop

0800aa7c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08a      	sub	sp, #40	@ 0x28
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800aa94:	6a3a      	ldr	r2, [r7, #32]
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	4013      	ands	r3, r2
 800aa9a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aaae:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3330      	adds	r3, #48	@ 0x30
 800aab6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d010      	beq.n	800aae4 <HAL_SPI_IRQHandler+0x68>
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	f003 0308 	and.w	r3, r3, #8
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00b      	beq.n	800aae4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699a      	ldr	r2, [r3, #24]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aada:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f9c3 	bl	800ae68 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800aae2:	e192      	b.n	800ae0a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d113      	bne.n	800ab16 <HAL_SPI_IRQHandler+0x9a>
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	f003 0320 	and.w	r3, r3, #32
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10e      	bne.n	800ab16 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d009      	beq.n	800ab16 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	4798      	blx	r3
    handled = 1UL;
 800ab12:	2301      	movs	r3, #1
 800ab14:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10f      	bne.n	800ab40 <HAL_SPI_IRQHandler+0xc4>
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00a      	beq.n	800ab40 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d105      	bne.n	800ab40 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	4798      	blx	r3
    handled = 1UL;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	f003 0320 	and.w	r3, r3, #32
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10f      	bne.n	800ab6a <HAL_SPI_IRQHandler+0xee>
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00a      	beq.n	800ab6a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d105      	bne.n	800ab6a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
    handled = 1UL;
 800ab66:	2301      	movs	r3, #1
 800ab68:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f040 8147 	bne.w	800ae00 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	f003 0308 	and.w	r3, r3, #8
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 808b 	beq.w	800ac94 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	699a      	ldr	r2, [r3, #24]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f042 0208 	orr.w	r2, r2, #8
 800ab8c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	699a      	ldr	r2, [r3, #24]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f042 0210 	orr.w	r2, r2, #16
 800ab9c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	699a      	ldr	r2, [r3, #24]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800abac:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	691a      	ldr	r2, [r3, #16]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0208 	bic.w	r2, r2, #8
 800abbc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d13d      	bne.n	800ac48 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800abcc:	e036      	b.n	800ac3c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	2b0f      	cmp	r3, #15
 800abd4:	d90b      	bls.n	800abee <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800abe0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abe6:	1d1a      	adds	r2, r3, #4
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	665a      	str	r2, [r3, #100]	@ 0x64
 800abec:	e01d      	b.n	800ac2a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	2b07      	cmp	r3, #7
 800abf4:	d90b      	bls.n	800ac0e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	8812      	ldrh	r2, [r2, #0]
 800abfe:	b292      	uxth	r2, r2
 800ac00:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac06:	1c9a      	adds	r2, r3, #2
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	665a      	str	r2, [r3, #100]	@ 0x64
 800ac0c:	e00d      	b.n	800ac2a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac1a:	7812      	ldrb	r2, [r2, #0]
 800ac1c:	b2d2      	uxtb	r2, r2
 800ac1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	3b01      	subs	r3, #1
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1c2      	bne.n	800abce <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f931 	bl	800aeb0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f8f7 	bl	800ae54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac66:	e0d0      	b.n	800ae0a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ac68:	7cfb      	ldrb	r3, [r7, #19]
 800ac6a:	2b05      	cmp	r3, #5
 800ac6c:	d103      	bne.n	800ac76 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f8e6 	bl	800ae40 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ac74:	e0c6      	b.n	800ae04 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ac76:	7cfb      	ldrb	r3, [r7, #19]
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d103      	bne.n	800ac84 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f8d5 	bl	800ae2c <HAL_SPI_RxCpltCallback>
    return;
 800ac82:	e0bf      	b.n	800ae04 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ac84:	7cfb      	ldrb	r3, [r7, #19]
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	f040 80bc 	bne.w	800ae04 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f8c3 	bl	800ae18 <HAL_SPI_TxCpltCallback>
    return;
 800ac92:	e0b7      	b.n	800ae04 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 80b5 	beq.w	800ae0a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00f      	beq.n	800acca <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acb0:	f043 0204 	orr.w	r2, r3, #4
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	699a      	ldr	r2, [r3, #24]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acc8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00f      	beq.n	800acf4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acda:	f043 0201 	orr.w	r2, r3, #1
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	699a      	ldr	r2, [r3, #24]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acf2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00f      	beq.n	800ad1e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad04:	f043 0208 	orr.w	r2, r3, #8
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	699a      	ldr	r2, [r3, #24]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad1c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	f003 0320 	and.w	r3, r3, #32
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00f      	beq.n	800ad48 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	699a      	ldr	r2, [r3, #24]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f042 0220 	orr.w	r2, r2, #32
 800ad46:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d05a      	beq.n	800ae08 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f022 0201 	bic.w	r2, r2, #1
 800ad60:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6919      	ldr	r1, [r3, #16]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	4b28      	ldr	r3, [pc, #160]	@ (800ae10 <HAL_SPI_IRQHandler+0x394>)
 800ad6e:	400b      	ands	r3, r1
 800ad70:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ad78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ad7c:	d138      	bne.n	800adf0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	689a      	ldr	r2, [r3, #8]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ad8c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d013      	beq.n	800adbe <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad9a:	4a1e      	ldr	r2, [pc, #120]	@ (800ae14 <HAL_SPI_IRQHandler+0x398>)
 800ad9c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7f9 f9aa 	bl	80040fc <HAL_DMA_Abort_IT>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d007      	beq.n	800adbe <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d020      	beq.n	800ae08 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adca:	4a12      	ldr	r2, [pc, #72]	@ (800ae14 <HAL_SPI_IRQHandler+0x398>)
 800adcc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800add2:	4618      	mov	r0, r3
 800add4:	f7f9 f992 	bl	80040fc <HAL_DMA_Abort_IT>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d014      	beq.n	800ae08 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ade4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800adee:	e00b      	b.n	800ae08 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f82b 	bl	800ae54 <HAL_SPI_ErrorCallback>
    return;
 800adfe:	e003      	b.n	800ae08 <HAL_SPI_IRQHandler+0x38c>
    return;
 800ae00:	bf00      	nop
 800ae02:	e002      	b.n	800ae0a <HAL_SPI_IRQHandler+0x38e>
    return;
 800ae04:	bf00      	nop
 800ae06:	e000      	b.n	800ae0a <HAL_SPI_IRQHandler+0x38e>
    return;
 800ae08:	bf00      	nop
  }
}
 800ae0a:	3728      	adds	r7, #40	@ 0x28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	fffffc94 	.word	0xfffffc94
 800ae14:	0800ae7d 	.word	0x0800ae7d

0800ae18 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff ffd6 	bl	800ae54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aea8:	bf00      	nop
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	699a      	ldr	r2, [r3, #24]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f042 0208 	orr.w	r2, r2, #8
 800aece:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	699a      	ldr	r2, [r3, #24]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f042 0210 	orr.w	r2, r2, #16
 800aede:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f022 0201 	bic.w	r2, r2, #1
 800aeee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6919      	ldr	r1, [r3, #16]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	4b3c      	ldr	r3, [pc, #240]	@ (800afec <SPI_CloseTransfer+0x13c>)
 800aefc:	400b      	ands	r3, r1
 800aefe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689a      	ldr	r2, [r3, #8]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800af0e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d014      	beq.n	800af46 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f003 0320 	and.w	r3, r3, #32
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00f      	beq.n	800af46 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	699a      	ldr	r2, [r3, #24]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f042 0220 	orr.w	r2, r2, #32
 800af44:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d014      	beq.n	800af7c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00f      	beq.n	800af7c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af62:	f043 0204 	orr.w	r2, r3, #4
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	699a      	ldr	r2, [r3, #24]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af7a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00f      	beq.n	800afa6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af8c:	f043 0201 	orr.w	r2, r3, #1
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	699a      	ldr	r2, [r3, #24]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afa4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00f      	beq.n	800afd0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afb6:	f043 0208 	orr.w	r2, r3, #8
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	699a      	ldr	r2, [r3, #24]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800afce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800afe0:	bf00      	nop
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr
 800afec:	fffffc90 	.word	0xfffffc90

0800aff0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	4613      	mov	r3, r2
 800affe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b000:	e010      	b.n	800b024 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b002:	f7f8 fbd3 	bl	80037ac <HAL_GetTick>
 800b006:	4602      	mov	r2, r0
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d803      	bhi.n	800b01a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b018:	d102      	bne.n	800b020 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b020:	2303      	movs	r3, #3
 800b022:	e00f      	b.n	800b044 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	695a      	ldr	r2, [r3, #20]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	4013      	ands	r3, r2
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	429a      	cmp	r2, r3
 800b032:	bf0c      	ite	eq
 800b034:	2301      	moveq	r3, #1
 800b036:	2300      	movne	r3, #0
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	461a      	mov	r2, r3
 800b03c:	79fb      	ldrb	r3, [r7, #7]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d0df      	beq.n	800b002 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b058:	095b      	lsrs	r3, r3, #5
 800b05a:	3301      	adds	r3, #1
 800b05c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	3301      	adds	r3, #1
 800b064:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	3307      	adds	r3, #7
 800b06a:	08db      	lsrs	r3, r3, #3
 800b06c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	fb02 f303 	mul.w	r3, r2, r3
}
 800b076:	4618      	mov	r0, r3
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d101      	bne.n	800b094 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e049      	b.n	800b128 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d106      	bne.n	800b0ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7f8 f95b 	bl	8003364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	f000 f99d 	bl	800b400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68da      	ldr	r2, [r3, #12]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f022 0201 	bic.w	r2, r2, #1
 800b146:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6a1a      	ldr	r2, [r3, #32]
 800b14e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b152:	4013      	ands	r3, r2
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10f      	bne.n	800b178 <HAL_TIM_Base_Stop_IT+0x48>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6a1a      	ldr	r2, [r3, #32]
 800b15e:	f240 4344 	movw	r3, #1092	@ 0x444
 800b162:	4013      	ands	r3, r2
 800b164:	2b00      	cmp	r3, #0
 800b166:	d107      	bne.n	800b178 <HAL_TIM_Base_Stop_IT+0x48>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f022 0201 	bic.w	r2, r2, #1
 800b176:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b084      	sub	sp, #16
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d020      	beq.n	800b1f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d01b      	beq.n	800b1f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f06f 0202 	mvn.w	r2, #2
 800b1c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	f003 0303 	and.w	r3, r3, #3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f8f3 	bl	800b3c4 <HAL_TIM_IC_CaptureCallback>
 800b1de:	e005      	b.n	800b1ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f8e5 	bl	800b3b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f8f6 	bl	800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f003 0304 	and.w	r3, r3, #4
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d020      	beq.n	800b23e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b00      	cmp	r3, #0
 800b204:	d01b      	beq.n	800b23e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f06f 0204 	mvn.w	r2, #4
 800b20e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f8cd 	bl	800b3c4 <HAL_TIM_IC_CaptureCallback>
 800b22a:	e005      	b.n	800b238 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f8bf 	bl	800b3b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f8d0 	bl	800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f003 0308 	and.w	r3, r3, #8
 800b244:	2b00      	cmp	r3, #0
 800b246:	d020      	beq.n	800b28a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f003 0308 	and.w	r3, r3, #8
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d01b      	beq.n	800b28a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f06f 0208 	mvn.w	r2, #8
 800b25a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2204      	movs	r2, #4
 800b260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	f003 0303 	and.w	r3, r3, #3
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d003      	beq.n	800b278 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f8a7 	bl	800b3c4 <HAL_TIM_IC_CaptureCallback>
 800b276:	e005      	b.n	800b284 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f899 	bl	800b3b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f8aa 	bl	800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	f003 0310 	and.w	r3, r3, #16
 800b290:	2b00      	cmp	r3, #0
 800b292:	d020      	beq.n	800b2d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f003 0310 	and.w	r3, r3, #16
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d01b      	beq.n	800b2d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f06f 0210 	mvn.w	r2, #16
 800b2a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2208      	movs	r2, #8
 800b2ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	69db      	ldr	r3, [r3, #28]
 800b2b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f881 	bl	800b3c4 <HAL_TIM_IC_CaptureCallback>
 800b2c2:	e005      	b.n	800b2d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f873 	bl	800b3b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f884 	bl	800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00c      	beq.n	800b2fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d007      	beq.n	800b2fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f06f 0201 	mvn.w	r2, #1
 800b2f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f851 	bl	800b39c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b300:	2b00      	cmp	r3, #0
 800b302:	d104      	bne.n	800b30e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00c      	beq.n	800b328 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b314:	2b00      	cmp	r3, #0
 800b316:	d007      	beq.n	800b328 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f9aa 	bl	800b67c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00c      	beq.n	800b34c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d007      	beq.n	800b34c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f9a2 	bl	800b690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00c      	beq.n	800b370 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d007      	beq.n	800b370 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f83e 	bl	800b3ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f003 0320 	and.w	r3, r3, #32
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00c      	beq.n	800b394 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f003 0320 	and.w	r3, r3, #32
 800b380:	2b00      	cmp	r3, #0
 800b382:	d007      	beq.n	800b394 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f06f 0220 	mvn.w	r2, #32
 800b38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f96a 	bl	800b668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b394:	bf00      	nop
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a46      	ldr	r2, [pc, #280]	@ (800b52c <TIM_Base_SetConfig+0x12c>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d013      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b41e:	d00f      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a43      	ldr	r2, [pc, #268]	@ (800b530 <TIM_Base_SetConfig+0x130>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d00b      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a42      	ldr	r2, [pc, #264]	@ (800b534 <TIM_Base_SetConfig+0x134>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d007      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a41      	ldr	r2, [pc, #260]	@ (800b538 <TIM_Base_SetConfig+0x138>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d003      	beq.n	800b440 <TIM_Base_SetConfig+0x40>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a40      	ldr	r2, [pc, #256]	@ (800b53c <TIM_Base_SetConfig+0x13c>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d108      	bne.n	800b452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a35      	ldr	r2, [pc, #212]	@ (800b52c <TIM_Base_SetConfig+0x12c>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d01f      	beq.n	800b49a <TIM_Base_SetConfig+0x9a>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b460:	d01b      	beq.n	800b49a <TIM_Base_SetConfig+0x9a>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a32      	ldr	r2, [pc, #200]	@ (800b530 <TIM_Base_SetConfig+0x130>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d017      	beq.n	800b49a <TIM_Base_SetConfig+0x9a>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a31      	ldr	r2, [pc, #196]	@ (800b534 <TIM_Base_SetConfig+0x134>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d013      	beq.n	800b49a <TIM_Base_SetConfig+0x9a>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a30      	ldr	r2, [pc, #192]	@ (800b538 <TIM_Base_SetConfig+0x138>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d00f      	beq.n	800b49a <TIM_Base_SetConfig+0x9a>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a2f      	ldr	r2, [pc, #188]	@ (800b53c <TIM_Base_SetConfig+0x13c>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d00b      	beq.n	800b49a <TIM_Base_SetConfig+0x9a>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a2e      	ldr	r2, [pc, #184]	@ (800b540 <TIM_Base_SetConfig+0x140>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d007      	beq.n	800b49a <TIM_Base_SetConfig+0x9a>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a2d      	ldr	r2, [pc, #180]	@ (800b544 <TIM_Base_SetConfig+0x144>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d003      	beq.n	800b49a <TIM_Base_SetConfig+0x9a>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a2c      	ldr	r2, [pc, #176]	@ (800b548 <TIM_Base_SetConfig+0x148>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d108      	bne.n	800b4ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	695b      	ldr	r3, [r3, #20]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	689a      	ldr	r2, [r3, #8]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a16      	ldr	r2, [pc, #88]	@ (800b52c <TIM_Base_SetConfig+0x12c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d00f      	beq.n	800b4f8 <TIM_Base_SetConfig+0xf8>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a18      	ldr	r2, [pc, #96]	@ (800b53c <TIM_Base_SetConfig+0x13c>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d00b      	beq.n	800b4f8 <TIM_Base_SetConfig+0xf8>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a17      	ldr	r2, [pc, #92]	@ (800b540 <TIM_Base_SetConfig+0x140>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d007      	beq.n	800b4f8 <TIM_Base_SetConfig+0xf8>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a16      	ldr	r2, [pc, #88]	@ (800b544 <TIM_Base_SetConfig+0x144>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d003      	beq.n	800b4f8 <TIM_Base_SetConfig+0xf8>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a15      	ldr	r2, [pc, #84]	@ (800b548 <TIM_Base_SetConfig+0x148>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d103      	bne.n	800b500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	691a      	ldr	r2, [r3, #16]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d105      	bne.n	800b51e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f023 0201 	bic.w	r2, r3, #1
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	611a      	str	r2, [r3, #16]
  }
}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	40010000 	.word	0x40010000
 800b530:	40000400 	.word	0x40000400
 800b534:	40000800 	.word	0x40000800
 800b538:	40000c00 	.word	0x40000c00
 800b53c:	40010400 	.word	0x40010400
 800b540:	40014000 	.word	0x40014000
 800b544:	40014400 	.word	0x40014400
 800b548:	40014800 	.word	0x40014800

0800b54c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d101      	bne.n	800b564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b560:	2302      	movs	r3, #2
 800b562:	e06d      	b.n	800b640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a30      	ldr	r2, [pc, #192]	@ (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d004      	beq.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a2f      	ldr	r2, [pc, #188]	@ (800b650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d108      	bne.n	800b5aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b59e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a20      	ldr	r2, [pc, #128]	@ (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d022      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5d6:	d01d      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a1d      	ldr	r2, [pc, #116]	@ (800b654 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d018      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a1c      	ldr	r2, [pc, #112]	@ (800b658 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d013      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a1a      	ldr	r2, [pc, #104]	@ (800b65c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d00e      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a15      	ldr	r2, [pc, #84]	@ (800b650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d009      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a16      	ldr	r2, [pc, #88]	@ (800b660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d004      	beq.n	800b614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a15      	ldr	r2, [pc, #84]	@ (800b664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d10c      	bne.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b61a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	4313      	orrs	r3, r2
 800b624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	40010000 	.word	0x40010000
 800b650:	40010400 	.word	0x40010400
 800b654:	40000400 	.word	0x40000400
 800b658:	40000800 	.word	0x40000800
 800b65c:	40000c00 	.word	0x40000c00
 800b660:	40001800 	.word	0x40001800
 800b664:	40014000 	.word	0x40014000

0800b668 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b684:	bf00      	nop
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b6a8:	4904      	ldr	r1, [pc, #16]	@ (800b6bc <MX_FATFS_Init+0x18>)
 800b6aa:	4805      	ldr	r0, [pc, #20]	@ (800b6c0 <MX_FATFS_Init+0x1c>)
 800b6ac:	f003 fb1a 	bl	800ece4 <FATFS_LinkDriver>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	4b03      	ldr	r3, [pc, #12]	@ (800b6c4 <MX_FATFS_Init+0x20>)
 800b6b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b6b8:	bf00      	nop
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	24000370 	.word	0x24000370
 800b6c0:	24000014 	.word	0x24000014
 800b6c4:	2400036c 	.word	0x2400036c

0800b6c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b6cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 f9fd 	bl	800bae4 <USER_SPI_initialize>
 800b6ea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	4618      	mov	r0, r3
 800b702:	f000 facf 	bl	800bca4 <USER_SPI_status>
 800b706:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	607a      	str	r2, [r7, #4]
 800b71a:	603b      	str	r3, [r7, #0]
 800b71c:	4603      	mov	r3, r0
 800b71e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800b720:	7bf8      	ldrb	r0, [r7, #15]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	68b9      	ldr	r1, [r7, #8]
 800b728:	f000 fad2 	bl	800bcd0 <USER_SPI_read>
 800b72c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
 800b742:	4603      	mov	r3, r0
 800b744:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800b746:	7bf8      	ldrb	r0, [r7, #15]
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	68b9      	ldr	r1, [r7, #8]
 800b74e:	f000 fb25 	bl	800bd9c <USER_SPI_write>
 800b752:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	603a      	str	r2, [r7, #0]
 800b766:	71fb      	strb	r3, [r7, #7]
 800b768:	460b      	mov	r3, r1
 800b76a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800b76c:	79b9      	ldrb	r1, [r7, #6]
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	4618      	mov	r0, r3
 800b774:	f000 fb8e 	bl	800be94 <USER_SPI_ioctl>
 800b778:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <Set_SPI_BaudRate>:
extern SPI_HandleTypeDef SD_SPI_HANDLE;

/* Function prototypes */

//(Note that the _256 is used as a mask to clear the prescalar bits as it provides binary 111 in the correct position)
void Set_SPI_BaudRate(SPI_HandleTypeDef *hspi, uint32_t prescaler) {
 800b782:	b480      	push	{r7}
 800b784:	b083      	sub	sp, #12
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
    // Disable the SPI peripheral
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f022 0201 	bic.w	r2, r2, #1
 800b79a:	601a      	str	r2, [r3, #0]
    // Modify the MBR (Master Baud Rate) bits in SPI_CFG1
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_MBR_Msk, prescaler << SPI_CFG1_MBR_Pos);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	071a      	lsls	r2, r3, #28
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	609a      	str	r2, [r3, #8]
    // Re-enable the SPI peripheral
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f042 0201 	orr.w	r2, r2, #1
 800b7c0:	601a      	str	r2, [r3, #0]
}
 800b7c2:	bf00      	nop
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
	...

0800b7d0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800b7d8:	f7f7 ffe8 	bl	80037ac <HAL_GetTick>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	4a04      	ldr	r2, [pc, #16]	@ (800b7f0 <SPI_Timer_On+0x20>)
 800b7e0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800b7e2:	4a04      	ldr	r2, [pc, #16]	@ (800b7f4 <SPI_Timer_On+0x24>)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6013      	str	r3, [r2, #0]
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	24000378 	.word	0x24000378
 800b7f4:	2400037c 	.word	0x2400037c

0800b7f8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800b7fc:	f7f7 ffd6 	bl	80037ac <HAL_GetTick>
 800b800:	4602      	mov	r2, r0
 800b802:	4b06      	ldr	r3, [pc, #24]	@ (800b81c <SPI_Timer_Status+0x24>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	1ad2      	subs	r2, r2, r3
 800b808:	4b05      	ldr	r3, [pc, #20]	@ (800b820 <SPI_Timer_Status+0x28>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	bf34      	ite	cc
 800b810:	2301      	movcc	r3, #1
 800b812:	2300      	movcs	r3, #0
 800b814:	b2db      	uxtb	r3, r3
}
 800b816:	4618      	mov	r0, r3
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	24000378 	.word	0x24000378
 800b820:	2400037c 	.word	0x2400037c

0800b824 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b086      	sub	sp, #24
 800b828:	af02      	add	r7, sp, #8
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, HAL_MAX_DELAY);
 800b82e:	f107 020f 	add.w	r2, r7, #15
 800b832:	1df9      	adds	r1, r7, #7
 800b834:	f04f 33ff 	mov.w	r3, #4294967295
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	2301      	movs	r3, #1
 800b83c:	4803      	ldr	r0, [pc, #12]	@ (800b84c <xchg_spi+0x28>)
 800b83e:	f7fe fde3 	bl	800a408 <HAL_SPI_TransmitReceive>
//	 Clear the DMA transfer complete flag
//    while (__HAL_DMA_GET_FLAG(hspi2.hdmarx, DMA_FLAG_TCIF3_7) == RESET) {
//        // Optionally, add a timeout here
//    }

    return rxDat;
 800b842:	7bfb      	ldrb	r3, [r7, #15]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	240001a0 	.word	0x240001a0

0800b850 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800b850:	b590      	push	{r4, r7, lr}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800b85a:	2300      	movs	r3, #0
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	e00a      	b.n	800b876 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	18d4      	adds	r4, r2, r3
 800b866:	20ff      	movs	r0, #255	@ 0xff
 800b868:	f7ff ffdc 	bl	800b824 <xchg_spi>
 800b86c:	4603      	mov	r3, r0
 800b86e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3301      	adds	r3, #1
 800b874:	60fb      	str	r3, [r7, #12]
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d3f0      	bcc.n	800b860 <rcvr_spi_multi+0x10>
	}
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	bd90      	pop	{r4, r7, pc}

0800b888 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	b29a      	uxth	r2, r3
 800b896:	f04f 33ff 	mov.w	r3, #4294967295
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	4803      	ldr	r0, [pc, #12]	@ (800b8ac <xmit_spi_multi+0x24>)
 800b89e:	f7fe f953 	bl	8009b48 <HAL_SPI_Transmit>

//	while ((READ_BIT(hspi->Instance->IER, SPI_IT_EOT) == 0)) {}

}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	240001a0 	.word	0x240001a0

0800b8b0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b8b8:	f7f7 ff78 	bl	80037ac <HAL_GetTick>
 800b8bc:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b8c2:	20ff      	movs	r0, #255	@ 0xff
 800b8c4:	f7ff ffae 	bl	800b824 <xchg_spi>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b8cc:	7bfb      	ldrb	r3, [r7, #15]
 800b8ce:	2bff      	cmp	r3, #255	@ 0xff
 800b8d0:	d007      	beq.n	800b8e2 <wait_ready+0x32>
 800b8d2:	f7f7 ff6b 	bl	80037ac <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d8ef      	bhi.n	800b8c2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
 800b8e4:	2bff      	cmp	r3, #255	@ 0xff
 800b8e6:	bf0c      	ite	eq
 800b8e8:	2301      	moveq	r3, #1
 800b8ea:	2300      	movne	r3, #0
 800b8ec:	b2db      	uxtb	r3, r3
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

void despiselect (void)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b902:	4804      	ldr	r0, [pc, #16]	@ (800b914 <despiselect+0x1c>)
 800b904:	f7fa f956 	bl	8005bb4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b908:	20ff      	movs	r0, #255	@ 0xff
 800b90a:	f7ff ff8b 	bl	800b824 <xchg_spi>

}
 800b90e:	bf00      	nop
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	58020400 	.word	0x58020400

0800b918 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/


int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b91c:	2200      	movs	r2, #0
 800b91e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b922:	480a      	ldr	r0, [pc, #40]	@ (800b94c <spiselect+0x34>)
 800b924:	f7fa f946 	bl	8005bb4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b928:	20ff      	movs	r0, #255	@ 0xff
 800b92a:	f7ff ff7b 	bl	800b824 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b92e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b932:	f7ff ffbd 	bl	800b8b0 <wait_ready>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <spiselect+0x28>
 800b93c:	2301      	movs	r3, #1
 800b93e:	e002      	b.n	800b946 <spiselect+0x2e>

	despiselect();
 800b940:	f7ff ffda 	bl	800b8f8 <despiselect>
	return 0;	/* Timeout */
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	58020400 	.word	0x58020400

0800b950 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b95a:	20c8      	movs	r0, #200	@ 0xc8
 800b95c:	f7ff ff38 	bl	800b7d0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b960:	20ff      	movs	r0, #255	@ 0xff
 800b962:	f7ff ff5f 	bl	800b824 <xchg_spi>
 800b966:	4603      	mov	r3, r0
 800b968:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	2bff      	cmp	r3, #255	@ 0xff
 800b96e:	d104      	bne.n	800b97a <rcvr_datablock+0x2a>
 800b970:	f7ff ff42 	bl	800b7f8 <SPI_Timer_Status>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1f2      	bne.n	800b960 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
 800b97c:	2bfe      	cmp	r3, #254	@ 0xfe
 800b97e:	d001      	beq.n	800b984 <rcvr_datablock+0x34>
 800b980:	2300      	movs	r3, #0
 800b982:	e00a      	b.n	800b99a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff ff62 	bl	800b850 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b98c:	20ff      	movs	r0, #255	@ 0xff
 800b98e:	f7ff ff49 	bl	800b824 <xchg_spi>
 800b992:	20ff      	movs	r0, #255	@ 0xff
 800b994:	f7ff ff46 	bl	800b824 <xchg_spi>

	return 1;						/* Function succeeded */
 800b998:	2301      	movs	r3, #1
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b9ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b9b2:	f7ff ff7d 	bl	800b8b0 <wait_ready>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <xmit_datablock+0x1e>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	e01e      	b.n	800b9fe <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff ff2e 	bl	800b824 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	2bfd      	cmp	r3, #253	@ 0xfd
 800b9cc:	d016      	beq.n	800b9fc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b9ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7ff ff58 	bl	800b888 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b9d8:	20ff      	movs	r0, #255	@ 0xff
 800b9da:	f7ff ff23 	bl	800b824 <xchg_spi>
 800b9de:	20ff      	movs	r0, #255	@ 0xff
 800b9e0:	f7ff ff20 	bl	800b824 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b9e4:	20ff      	movs	r0, #255	@ 0xff
 800b9e6:	f7ff ff1d 	bl	800b824 <xchg_spi>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
 800b9f0:	f003 031f 	and.w	r3, r3, #31
 800b9f4:	2b05      	cmp	r3, #5
 800b9f6:	d001      	beq.n	800b9fc <xmit_datablock+0x5a>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	e000      	b.n	800b9fe <xmit_datablock+0x5c>
	}
	return 1;
 800b9fc:	2301      	movs	r3, #1
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	6039      	str	r1, [r7, #0]
 800ba10:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800ba12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	da0e      	bge.n	800ba38 <send_cmd+0x32>
		cmd &= 0x7F;
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba20:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800ba22:	2100      	movs	r1, #0
 800ba24:	2037      	movs	r0, #55	@ 0x37
 800ba26:	f7ff ffee 	bl	800ba06 <send_cmd>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800ba2e:	7bbb      	ldrb	r3, [r7, #14]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d901      	bls.n	800ba38 <send_cmd+0x32>
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
 800ba36:	e051      	b.n	800badc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	2b0c      	cmp	r3, #12
 800ba3c:	d008      	beq.n	800ba50 <send_cmd+0x4a>
		despiselect();
 800ba3e:	f7ff ff5b 	bl	800b8f8 <despiselect>
		if (!spiselect()) return 0xFF;
 800ba42:	f7ff ff69 	bl	800b918 <spiselect>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <send_cmd+0x4a>
 800ba4c:	23ff      	movs	r3, #255	@ 0xff
 800ba4e:	e045      	b.n	800badc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800ba50:	79fb      	ldrb	r3, [r7, #7]
 800ba52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7ff fee3 	bl	800b824 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	0e1b      	lsrs	r3, r3, #24
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fedd 	bl	800b824 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	0c1b      	lsrs	r3, r3, #16
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff fed7 	bl	800b824 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	0a1b      	lsrs	r3, r3, #8
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7ff fed1 	bl	800b824 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fecc 	bl	800b824 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800ba90:	79fb      	ldrb	r3, [r7, #7]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <send_cmd+0x94>
 800ba96:	2395      	movs	r3, #149	@ 0x95
 800ba98:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800ba9a:	79fb      	ldrb	r3, [r7, #7]
 800ba9c:	2b08      	cmp	r3, #8
 800ba9e:	d101      	bne.n	800baa4 <send_cmd+0x9e>
 800baa0:	2387      	movs	r3, #135	@ 0x87
 800baa2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7ff febc 	bl	800b824 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800baac:	79fb      	ldrb	r3, [r7, #7]
 800baae:	2b0c      	cmp	r3, #12
 800bab0:	d102      	bne.n	800bab8 <send_cmd+0xb2>
 800bab2:	20ff      	movs	r0, #255	@ 0xff
 800bab4:	f7ff feb6 	bl	800b824 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800bab8:	230a      	movs	r3, #10
 800baba:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800babc:	20ff      	movs	r0, #255	@ 0xff
 800babe:	f7ff feb1 	bl	800b824 <xchg_spi>
 800bac2:	4603      	mov	r3, r0
 800bac4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800bac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	da05      	bge.n	800bada <send_cmd+0xd4>
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	3b01      	subs	r3, #1
 800bad2:	73fb      	strb	r3, [r7, #15]
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1f0      	bne.n	800babc <send_cmd+0xb6>

	return res;							/* Return received response */
 800bada:	7bbb      	ldrb	r3, [r7, #14]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800bae4:	b590      	push	{r4, r7, lr}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800baee:	79fb      	ldrb	r3, [r7, #7]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <USER_SPI_initialize+0x14>
 800baf4:	2301      	movs	r3, #1
 800baf6:	e0cb      	b.n	800bc90 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800baf8:	4b67      	ldr	r3, [pc, #412]	@ (800bc98 <USER_SPI_initialize+0x1b4>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	f003 0302 	and.w	r3, r3, #2
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <USER_SPI_initialize+0x2a>
 800bb06:	4b64      	ldr	r3, [pc, #400]	@ (800bc98 <USER_SPI_initialize+0x1b4>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	e0c0      	b.n	800bc90 <USER_SPI_initialize+0x1ac>

	Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_256);
 800bb0e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800bb12:	4862      	ldr	r0, [pc, #392]	@ (800bc9c <USER_SPI_initialize+0x1b8>)
 800bb14:	f7ff fe35 	bl	800b782 <Set_SPI_BaudRate>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800bb18:	230a      	movs	r3, #10
 800bb1a:	73fb      	strb	r3, [r7, #15]
 800bb1c:	e005      	b.n	800bb2a <USER_SPI_initialize+0x46>
 800bb1e:	20ff      	movs	r0, #255	@ 0xff
 800bb20:	f7ff fe80 	bl	800b824 <xchg_spi>
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	3b01      	subs	r3, #1
 800bb28:	73fb      	strb	r3, [r7, #15]
 800bb2a:	7bfb      	ldrb	r3, [r7, #15]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1f6      	bne.n	800bb1e <USER_SPI_initialize+0x3a>

	ty = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800bb34:	2100      	movs	r1, #0
 800bb36:	2000      	movs	r0, #0
 800bb38:	f7ff ff65 	bl	800ba06 <send_cmd>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	f040 808b 	bne.w	800bc5a <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800bb44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bb48:	f7ff fe42 	bl	800b7d0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800bb4c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800bb50:	2008      	movs	r0, #8
 800bb52:	f7ff ff58 	bl	800ba06 <send_cmd>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d151      	bne.n	800bc00 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]
 800bb60:	e00d      	b.n	800bb7e <USER_SPI_initialize+0x9a>
 800bb62:	7bfc      	ldrb	r4, [r7, #15]
 800bb64:	20ff      	movs	r0, #255	@ 0xff
 800bb66:	f7ff fe5d 	bl	800b824 <xchg_spi>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	f104 0310 	add.w	r3, r4, #16
 800bb72:	443b      	add	r3, r7
 800bb74:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	73fb      	strb	r3, [r7, #15]
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d9ee      	bls.n	800bb62 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800bb84:	7abb      	ldrb	r3, [r7, #10]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d167      	bne.n	800bc5a <USER_SPI_initialize+0x176>
 800bb8a:	7afb      	ldrb	r3, [r7, #11]
 800bb8c:	2baa      	cmp	r3, #170	@ 0xaa
 800bb8e:	d164      	bne.n	800bc5a <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800bb90:	bf00      	nop
 800bb92:	f7ff fe31 	bl	800b7f8 <SPI_Timer_Status>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d007      	beq.n	800bbac <USER_SPI_initialize+0xc8>
 800bb9c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bba0:	20a9      	movs	r0, #169	@ 0xa9
 800bba2:	f7ff ff30 	bl	800ba06 <send_cmd>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1f2      	bne.n	800bb92 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800bbac:	f7ff fe24 	bl	800b7f8 <SPI_Timer_Status>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d051      	beq.n	800bc5a <USER_SPI_initialize+0x176>
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	203a      	movs	r0, #58	@ 0x3a
 800bbba:	f7ff ff24 	bl	800ba06 <send_cmd>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d14a      	bne.n	800bc5a <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73fb      	strb	r3, [r7, #15]
 800bbc8:	e00d      	b.n	800bbe6 <USER_SPI_initialize+0x102>
 800bbca:	7bfc      	ldrb	r4, [r7, #15]
 800bbcc:	20ff      	movs	r0, #255	@ 0xff
 800bbce:	f7ff fe29 	bl	800b824 <xchg_spi>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	f104 0310 	add.w	r3, r4, #16
 800bbda:	443b      	add	r3, r7
 800bbdc:	f803 2c08 	strb.w	r2, [r3, #-8]
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	73fb      	strb	r3, [r7, #15]
 800bbe6:	7bfb      	ldrb	r3, [r7, #15]
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d9ee      	bls.n	800bbca <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800bbec:	7a3b      	ldrb	r3, [r7, #8]
 800bbee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <USER_SPI_initialize+0x116>
 800bbf6:	230c      	movs	r3, #12
 800bbf8:	e000      	b.n	800bbfc <USER_SPI_initialize+0x118>
 800bbfa:	2304      	movs	r3, #4
 800bbfc:	737b      	strb	r3, [r7, #13]
 800bbfe:	e02c      	b.n	800bc5a <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800bc00:	2100      	movs	r1, #0
 800bc02:	20a9      	movs	r0, #169	@ 0xa9
 800bc04:	f7ff feff 	bl	800ba06 <send_cmd>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d804      	bhi.n	800bc18 <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800bc0e:	2302      	movs	r3, #2
 800bc10:	737b      	strb	r3, [r7, #13]
 800bc12:	23a9      	movs	r3, #169	@ 0xa9
 800bc14:	73bb      	strb	r3, [r7, #14]
 800bc16:	e003      	b.n	800bc20 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800bc18:	2301      	movs	r3, #1
 800bc1a:	737b      	strb	r3, [r7, #13]
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800bc20:	bf00      	nop
 800bc22:	f7ff fde9 	bl	800b7f8 <SPI_Timer_Status>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d007      	beq.n	800bc3c <USER_SPI_initialize+0x158>
 800bc2c:	7bbb      	ldrb	r3, [r7, #14]
 800bc2e:	2100      	movs	r1, #0
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff fee8 	bl	800ba06 <send_cmd>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1f2      	bne.n	800bc22 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800bc3c:	f7ff fddc 	bl	800b7f8 <SPI_Timer_Status>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d007      	beq.n	800bc56 <USER_SPI_initialize+0x172>
 800bc46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc4a:	2010      	movs	r0, #16
 800bc4c:	f7ff fedb 	bl	800ba06 <send_cmd>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <USER_SPI_initialize+0x176>
				ty = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800bc5a:	4a11      	ldr	r2, [pc, #68]	@ (800bca0 <USER_SPI_initialize+0x1bc>)
 800bc5c:	7b7b      	ldrb	r3, [r7, #13]
 800bc5e:	7013      	strb	r3, [r2, #0]
	despiselect();
 800bc60:	f7ff fe4a 	bl	800b8f8 <despiselect>

	if (ty) {			/* OK */
 800bc64:	7b7b      	ldrb	r3, [r7, #13]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00c      	beq.n	800bc84 <USER_SPI_initialize+0x1a0>
		Set_SPI_BaudRate(&SD_SPI_HANDLE, SPI_BAUDRATEPRESCALER_2);	/* Set fast clock */
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	480b      	ldr	r0, [pc, #44]	@ (800bc9c <USER_SPI_initialize+0x1b8>)
 800bc6e:	f7ff fd88 	bl	800b782 <Set_SPI_BaudRate>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800bc72:	4b09      	ldr	r3, [pc, #36]	@ (800bc98 <USER_SPI_initialize+0x1b4>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	f023 0301 	bic.w	r3, r3, #1
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	4b06      	ldr	r3, [pc, #24]	@ (800bc98 <USER_SPI_initialize+0x1b4>)
 800bc80:	701a      	strb	r2, [r3, #0]
 800bc82:	e002      	b.n	800bc8a <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800bc84:	4b04      	ldr	r3, [pc, #16]	@ (800bc98 <USER_SPI_initialize+0x1b4>)
 800bc86:	2201      	movs	r2, #1
 800bc88:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800bc8a:	4b03      	ldr	r3, [pc, #12]	@ (800bc98 <USER_SPI_initialize+0x1b4>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b2db      	uxtb	r3, r3
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3714      	adds	r7, #20
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd90      	pop	{r4, r7, pc}
 800bc98:	24000028 	.word	0x24000028
 800bc9c:	240001a0 	.word	0x240001a0
 800bca0:	24000374 	.word	0x24000374

0800bca4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <USER_SPI_status+0x14>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e002      	b.n	800bcbe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800bcb8:	4b04      	ldr	r3, [pc, #16]	@ (800bccc <USER_SPI_status+0x28>)
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	b2db      	uxtb	r3, r3
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	24000028 	.word	0x24000028

0800bcd0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60b9      	str	r1, [r7, #8]
 800bcd8:	607a      	str	r2, [r7, #4]
 800bcda:	603b      	str	r3, [r7, #0]
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d102      	bne.n	800bcec <USER_SPI_read+0x1c>
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <USER_SPI_read+0x20>
 800bcec:	2304      	movs	r3, #4
 800bcee:	e04d      	b.n	800bd8c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800bcf0:	4b28      	ldr	r3, [pc, #160]	@ (800bd94 <USER_SPI_read+0xc4>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <USER_SPI_read+0x32>
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e044      	b.n	800bd8c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800bd02:	4b25      	ldr	r3, [pc, #148]	@ (800bd98 <USER_SPI_read+0xc8>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	f003 0308 	and.w	r3, r3, #8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d102      	bne.n	800bd14 <USER_SPI_read+0x44>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	025b      	lsls	r3, r3, #9
 800bd12:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d111      	bne.n	800bd3e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800bd1a:	6879      	ldr	r1, [r7, #4]
 800bd1c:	2011      	movs	r0, #17
 800bd1e:	f7ff fe72 	bl	800ba06 <send_cmd>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d129      	bne.n	800bd7c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800bd28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd2c:	68b8      	ldr	r0, [r7, #8]
 800bd2e:	f7ff fe0f 	bl	800b950 <rcvr_datablock>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d021      	beq.n	800bd7c <USER_SPI_read+0xac>
			count = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	e01e      	b.n	800bd7c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	2012      	movs	r0, #18
 800bd42:	f7ff fe60 	bl	800ba06 <send_cmd>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d117      	bne.n	800bd7c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800bd4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd50:	68b8      	ldr	r0, [r7, #8]
 800bd52:	f7ff fdfd 	bl	800b950 <rcvr_datablock>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00a      	beq.n	800bd72 <USER_SPI_read+0xa2>
				buff += 512;
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800bd62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	3b01      	subs	r3, #1
 800bd68:	603b      	str	r3, [r7, #0]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1ed      	bne.n	800bd4c <USER_SPI_read+0x7c>
 800bd70:	e000      	b.n	800bd74 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800bd72:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800bd74:	2100      	movs	r1, #0
 800bd76:	200c      	movs	r0, #12
 800bd78:	f7ff fe45 	bl	800ba06 <send_cmd>
		}
	}
	despiselect();
 800bd7c:	f7ff fdbc 	bl	800b8f8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	bf14      	ite	ne
 800bd86:	2301      	movne	r3, #1
 800bd88:	2300      	moveq	r3, #0
 800bd8a:	b2db      	uxtb	r3, r3
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	24000028 	.word	0x24000028
 800bd98:	24000374 	.word	0x24000374

0800bd9c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60b9      	str	r1, [r7, #8]
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	603b      	str	r3, [r7, #0]
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d102      	bne.n	800bdb8 <USER_SPI_write+0x1c>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <USER_SPI_write+0x20>
 800bdb8:	2304      	movs	r3, #4
 800bdba:	e063      	b.n	800be84 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800bdbc:	4b33      	ldr	r3, [pc, #204]	@ (800be8c <USER_SPI_write+0xf0>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	f003 0301 	and.w	r3, r3, #1
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d001      	beq.n	800bdce <USER_SPI_write+0x32>
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e05a      	b.n	800be84 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800bdce:	4b2f      	ldr	r3, [pc, #188]	@ (800be8c <USER_SPI_write+0xf0>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	f003 0304 	and.w	r3, r3, #4
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <USER_SPI_write+0x44>
 800bddc:	2302      	movs	r3, #2
 800bdde:	e051      	b.n	800be84 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800bde0:	4b2b      	ldr	r3, [pc, #172]	@ (800be90 <USER_SPI_write+0xf4>)
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	f003 0308 	and.w	r3, r3, #8
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d102      	bne.n	800bdf2 <USER_SPI_write+0x56>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	025b      	lsls	r3, r3, #9
 800bdf0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d110      	bne.n	800be1a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	2018      	movs	r0, #24
 800bdfc:	f7ff fe03 	bl	800ba06 <send_cmd>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d136      	bne.n	800be74 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800be06:	21fe      	movs	r1, #254	@ 0xfe
 800be08:	68b8      	ldr	r0, [r7, #8]
 800be0a:	f7ff fdca 	bl	800b9a2 <xmit_datablock>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d02f      	beq.n	800be74 <USER_SPI_write+0xd8>
			count = 0;
 800be14:	2300      	movs	r3, #0
 800be16:	603b      	str	r3, [r7, #0]
 800be18:	e02c      	b.n	800be74 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800be1a:	4b1d      	ldr	r3, [pc, #116]	@ (800be90 <USER_SPI_write+0xf4>)
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	f003 0306 	and.w	r3, r3, #6
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <USER_SPI_write+0x92>
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	2097      	movs	r0, #151	@ 0x97
 800be2a:	f7ff fdec 	bl	800ba06 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	2019      	movs	r0, #25
 800be32:	f7ff fde8 	bl	800ba06 <send_cmd>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d11b      	bne.n	800be74 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800be3c:	21fc      	movs	r1, #252	@ 0xfc
 800be3e:	68b8      	ldr	r0, [r7, #8]
 800be40:	f7ff fdaf 	bl	800b9a2 <xmit_datablock>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <USER_SPI_write+0xc4>
				buff += 512;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800be50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	3b01      	subs	r3, #1
 800be56:	603b      	str	r3, [r7, #0]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1ee      	bne.n	800be3c <USER_SPI_write+0xa0>
 800be5e:	e000      	b.n	800be62 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800be60:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800be62:	21fd      	movs	r1, #253	@ 0xfd
 800be64:	2000      	movs	r0, #0
 800be66:	f7ff fd9c 	bl	800b9a2 <xmit_datablock>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <USER_SPI_write+0xd8>
 800be70:	2301      	movs	r3, #1
 800be72:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800be74:	f7ff fd40 	bl	800b8f8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	bf14      	ite	ne
 800be7e:	2301      	movne	r3, #1
 800be80:	2300      	moveq	r3, #0
 800be82:	b2db      	uxtb	r3, r3
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	24000028 	.word	0x24000028
 800be90:	24000374 	.word	0x24000374

0800be94 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08c      	sub	sp, #48	@ 0x30
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	603a      	str	r2, [r7, #0]
 800be9e:	71fb      	strb	r3, [r7, #7]
 800bea0:	460b      	mov	r3, r1
 800bea2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <USER_SPI_ioctl+0x1a>
 800beaa:	2304      	movs	r3, #4
 800beac:	e15a      	b.n	800c164 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800beae:	4baf      	ldr	r3, [pc, #700]	@ (800c16c <USER_SPI_ioctl+0x2d8>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <USER_SPI_ioctl+0x2c>
 800bebc:	2303      	movs	r3, #3
 800bebe:	e151      	b.n	800c164 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800bec6:	79bb      	ldrb	r3, [r7, #6]
 800bec8:	2b04      	cmp	r3, #4
 800beca:	f200 8136 	bhi.w	800c13a <USER_SPI_ioctl+0x2a6>
 800bece:	a201      	add	r2, pc, #4	@ (adr r2, 800bed4 <USER_SPI_ioctl+0x40>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800bee9 	.word	0x0800bee9
 800bed8:	0800befd 	.word	0x0800befd
 800bedc:	0800c13b 	.word	0x0800c13b
 800bee0:	0800bfa9 	.word	0x0800bfa9
 800bee4:	0800c09f 	.word	0x0800c09f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800bee8:	f7ff fd16 	bl	800b918 <spiselect>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 8127 	beq.w	800c142 <USER_SPI_ioctl+0x2ae>
 800bef4:	2300      	movs	r3, #0
 800bef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800befa:	e122      	b.n	800c142 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800befc:	2100      	movs	r1, #0
 800befe:	2009      	movs	r0, #9
 800bf00:	f7ff fd81 	bl	800ba06 <send_cmd>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f040 811d 	bne.w	800c146 <USER_SPI_ioctl+0x2b2>
 800bf0c:	f107 030c 	add.w	r3, r7, #12
 800bf10:	2110      	movs	r1, #16
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff fd1c 	bl	800b950 <rcvr_datablock>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 8113 	beq.w	800c146 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800bf20:	7b3b      	ldrb	r3, [r7, #12]
 800bf22:	099b      	lsrs	r3, r3, #6
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d111      	bne.n	800bf4e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800bf2a:	7d7b      	ldrb	r3, [r7, #21]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	7d3b      	ldrb	r3, [r7, #20]
 800bf30:	021b      	lsls	r3, r3, #8
 800bf32:	4413      	add	r3, r2
 800bf34:	461a      	mov	r2, r3
 800bf36:	7cfb      	ldrb	r3, [r7, #19]
 800bf38:	041b      	lsls	r3, r3, #16
 800bf3a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800bf3e:	4413      	add	r3, r2
 800bf40:	3301      	adds	r3, #1
 800bf42:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	029a      	lsls	r2, r3, #10
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	e028      	b.n	800bfa0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800bf4e:	7c7b      	ldrb	r3, [r7, #17]
 800bf50:	f003 030f 	and.w	r3, r3, #15
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	7dbb      	ldrb	r3, [r7, #22]
 800bf58:	09db      	lsrs	r3, r3, #7
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	7d7b      	ldrb	r3, [r7, #21]
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	f003 0306 	and.w	r3, r3, #6
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	4413      	add	r3, r2
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	3302      	adds	r3, #2
 800bf72:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800bf76:	7d3b      	ldrb	r3, [r7, #20]
 800bf78:	099b      	lsrs	r3, r3, #6
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	7cfb      	ldrb	r3, [r7, #19]
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	441a      	add	r2, r3
 800bf84:	7cbb      	ldrb	r3, [r7, #18]
 800bf86:	029b      	lsls	r3, r3, #10
 800bf88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bf8c:	4413      	add	r3, r2
 800bf8e:	3301      	adds	r3, #1
 800bf90:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800bf92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf96:	3b09      	subs	r3, #9
 800bf98:	69fa      	ldr	r2, [r7, #28]
 800bf9a:	409a      	lsls	r2, r3
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800bfa6:	e0ce      	b.n	800c146 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800bfa8:	4b71      	ldr	r3, [pc, #452]	@ (800c170 <USER_SPI_ioctl+0x2dc>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 0304 	and.w	r3, r3, #4
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d031      	beq.n	800c018 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	208d      	movs	r0, #141	@ 0x8d
 800bfb8:	f7ff fd25 	bl	800ba06 <send_cmd>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f040 80c3 	bne.w	800c14a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800bfc4:	20ff      	movs	r0, #255	@ 0xff
 800bfc6:	f7ff fc2d 	bl	800b824 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800bfca:	f107 030c 	add.w	r3, r7, #12
 800bfce:	2110      	movs	r1, #16
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff fcbd 	bl	800b950 <rcvr_datablock>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 80b6 	beq.w	800c14a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800bfde:	2330      	movs	r3, #48	@ 0x30
 800bfe0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bfe4:	e007      	b.n	800bff6 <USER_SPI_ioctl+0x162>
 800bfe6:	20ff      	movs	r0, #255	@ 0xff
 800bfe8:	f7ff fc1c 	bl	800b824 <xchg_spi>
 800bfec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bff0:	3b01      	subs	r3, #1
 800bff2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800bff6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1f3      	bne.n	800bfe6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800bffe:	7dbb      	ldrb	r3, [r7, #22]
 800c000:	091b      	lsrs	r3, r3, #4
 800c002:	b2db      	uxtb	r3, r3
 800c004:	461a      	mov	r2, r3
 800c006:	2310      	movs	r3, #16
 800c008:	fa03 f202 	lsl.w	r2, r3, r2
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c016:	e098      	b.n	800c14a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c018:	2100      	movs	r1, #0
 800c01a:	2009      	movs	r0, #9
 800c01c:	f7ff fcf3 	bl	800ba06 <send_cmd>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	f040 8091 	bne.w	800c14a <USER_SPI_ioctl+0x2b6>
 800c028:	f107 030c 	add.w	r3, r7, #12
 800c02c:	2110      	movs	r1, #16
 800c02e:	4618      	mov	r0, r3
 800c030:	f7ff fc8e 	bl	800b950 <rcvr_datablock>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 8087 	beq.w	800c14a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c03c:	4b4c      	ldr	r3, [pc, #304]	@ (800c170 <USER_SPI_ioctl+0x2dc>)
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	f003 0302 	and.w	r3, r3, #2
 800c044:	2b00      	cmp	r3, #0
 800c046:	d012      	beq.n	800c06e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c048:	7dbb      	ldrb	r3, [r7, #22]
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800c050:	7dfa      	ldrb	r2, [r7, #23]
 800c052:	09d2      	lsrs	r2, r2, #7
 800c054:	b2d2      	uxtb	r2, r2
 800c056:	4413      	add	r3, r2
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	7e7b      	ldrb	r3, [r7, #25]
 800c05c:	099b      	lsrs	r3, r3, #6
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	3b01      	subs	r3, #1
 800c062:	fa02 f303 	lsl.w	r3, r2, r3
 800c066:	461a      	mov	r2, r3
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	e013      	b.n	800c096 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c06e:	7dbb      	ldrb	r3, [r7, #22]
 800c070:	109b      	asrs	r3, r3, #2
 800c072:	b29b      	uxth	r3, r3
 800c074:	f003 031f 	and.w	r3, r3, #31
 800c078:	3301      	adds	r3, #1
 800c07a:	7dfa      	ldrb	r2, [r7, #23]
 800c07c:	00d2      	lsls	r2, r2, #3
 800c07e:	f002 0218 	and.w	r2, r2, #24
 800c082:	7df9      	ldrb	r1, [r7, #23]
 800c084:	0949      	lsrs	r1, r1, #5
 800c086:	b2c9      	uxtb	r1, r1
 800c088:	440a      	add	r2, r1
 800c08a:	3201      	adds	r2, #1
 800c08c:	fb02 f303 	mul.w	r3, r2, r3
 800c090:	461a      	mov	r2, r3
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800c09c:	e055      	b.n	800c14a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c09e:	4b34      	ldr	r3, [pc, #208]	@ (800c170 <USER_SPI_ioctl+0x2dc>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	f003 0306 	and.w	r3, r3, #6
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d051      	beq.n	800c14e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c0aa:	f107 020c 	add.w	r2, r7, #12
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	210b      	movs	r1, #11
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7ff feee 	bl	800be94 <USER_SPI_ioctl>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d149      	bne.n	800c152 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c0be:	7b3b      	ldrb	r3, [r7, #12]
 800c0c0:	099b      	lsrs	r3, r3, #6
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d104      	bne.n	800c0d2 <USER_SPI_ioctl+0x23e>
 800c0c8:	7dbb      	ldrb	r3, [r7, #22]
 800c0ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d041      	beq.n	800c156 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	623b      	str	r3, [r7, #32]
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800c0e2:	4b23      	ldr	r3, [pc, #140]	@ (800c170 <USER_SPI_ioctl+0x2dc>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	f003 0308 	and.w	r3, r3, #8
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d105      	bne.n	800c0fa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f0:	025b      	lsls	r3, r3, #9
 800c0f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	025b      	lsls	r3, r3, #9
 800c0f8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c0fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0fc:	2020      	movs	r0, #32
 800c0fe:	f7ff fc82 	bl	800ba06 <send_cmd>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d128      	bne.n	800c15a <USER_SPI_ioctl+0x2c6>
 800c108:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c10a:	2021      	movs	r0, #33	@ 0x21
 800c10c:	f7ff fc7b 	bl	800ba06 <send_cmd>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d121      	bne.n	800c15a <USER_SPI_ioctl+0x2c6>
 800c116:	2100      	movs	r1, #0
 800c118:	2026      	movs	r0, #38	@ 0x26
 800c11a:	f7ff fc74 	bl	800ba06 <send_cmd>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11a      	bne.n	800c15a <USER_SPI_ioctl+0x2c6>
 800c124:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c128:	f7ff fbc2 	bl	800b8b0 <wait_ready>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d013      	beq.n	800c15a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c132:	2300      	movs	r3, #0
 800c134:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800c138:	e00f      	b.n	800c15a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c13a:	2304      	movs	r3, #4
 800c13c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c140:	e00c      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		break;
 800c142:	bf00      	nop
 800c144:	e00a      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		break;
 800c146:	bf00      	nop
 800c148:	e008      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		break;
 800c14a:	bf00      	nop
 800c14c:	e006      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c14e:	bf00      	nop
 800c150:	e004      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c152:	bf00      	nop
 800c154:	e002      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c156:	bf00      	nop
 800c158:	e000      	b.n	800c15c <USER_SPI_ioctl+0x2c8>
		break;
 800c15a:	bf00      	nop
	}

	despiselect();
 800c15c:	f7ff fbcc 	bl	800b8f8 <despiselect>

	return res;
 800c160:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c164:	4618      	mov	r0, r3
 800c166:	3730      	adds	r7, #48	@ 0x30
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	24000028 	.word	0x24000028
 800c170:	24000374 	.word	0x24000374

0800c174 <read_vec>:
#endif



float * read_vec(unsigned short index, char * word){
 800c174:	b580      	push	{r7, lr}
 800c176:	f5ad 6d25 	sub.w	sp, sp, #2640	@ 0xa50
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	4602      	mov	r2, r0
 800c17e:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 800c182:	f5a3 6325 	sub.w	r3, r3, #2640	@ 0xa50
 800c186:	6019      	str	r1, [r3, #0]
 800c188:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 800c18c:	f6a3 234a 	subw	r3, r3, #2634	@ 0xa4a
 800c190:	801a      	strh	r2, [r3, #0]

	//JOSEPH CHANGED THIS TO MALLOC SO HE CAN FREE AND FORGET IT LATER
	float arr_float[508];
			//malloc(sizeof(*arr_float) * 508);

	spiselect();
 800c192:	f7ff fbc1 	bl	800b918 <spiselect>
	snprintf(name, 22,  "Win/v/vector%05d.bin", index);
 800c196:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 800c19a:	f6a3 234a 	subw	r3, r3, #2634	@ 0xa4a
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	f607 202c 	addw	r0, r7, #2604	@ 0xa2c
 800c1a4:	4a25      	ldr	r2, [pc, #148]	@ (800c23c <read_vec+0xc8>)
 800c1a6:	2116      	movs	r1, #22
 800c1a8:	f002 ff30 	bl	800f00c <sniprintf>

	fr =  f_open(&file, name, FA_READ);
 800c1ac:	f607 212c 	addw	r1, r7, #2604	@ 0xa2c
 800c1b0:	f207 73fc 	addw	r3, r7, #2044	@ 0x7fc
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f002 f9a6 	bl	800e508 <f_open>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	f887 3a4b 	strb.w	r3, [r7, #2635]	@ 0xa4b

	fr = f_read(&file, arr_float, 501*4, &bytes);
 800c1c2:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 800c1c6:	f107 0108 	add.w	r1, r7, #8
 800c1ca:	f207 70fc 	addw	r0, r7, #2044	@ 0x7fc
 800c1ce:	f240 72d4 	movw	r2, #2004	@ 0x7d4
 800c1d2:	f002 fb53 	bl	800e87c <f_read>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	f887 3a4b 	strb.w	r3, [r7, #2635]	@ 0xa4b

	 uint8_t *bytePointer = (uint8_t *)arr_float;
 800c1dc:	f107 0308 	add.w	r3, r7, #8
 800c1e0:	f8c7 3a44 	str.w	r3, [r7, #2628]	@ 0xa44

	// Example: Extracting bytes 0 to 4 into a char array
	for (size_t i = 0; i < 25; i++) {
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f8c7 3a4c 	str.w	r3, [r7, #2636]	@ 0xa4c
 800c1ea:	e013      	b.n	800c214 <read_vec+0xa0>
		word[i] = (char)bytePointer[i];
 800c1ec:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	@ 0xa44
 800c1f0:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 800c1f4:	441a      	add	r2, r3
 800c1f6:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 800c1fa:	f5a3 6325 	sub.w	r3, r3, #2640	@ 0xa50
 800c1fe:	6819      	ldr	r1, [r3, #0]
 800c200:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 800c204:	440b      	add	r3, r1
 800c206:	7812      	ldrb	r2, [r2, #0]
 800c208:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < 25; i++) {
 800c20a:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 800c20e:	3301      	adds	r3, #1
 800c210:	f8c7 3a4c 	str.w	r3, [r7, #2636]	@ 0xa4c
 800c214:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 800c218:	2b18      	cmp	r3, #24
 800c21a:	d9e7      	bls.n	800c1ec <read_vec+0x78>
	}


	fr = f_close(&file);
 800c21c:	f207 73fc 	addw	r3, r7, #2044	@ 0x7fc
 800c220:	4618      	mov	r0, r3
 800c222:	f002 fce8 	bl	800ebf6 <f_close>
 800c226:	4603      	mov	r3, r0
 800c228:	f887 3a4b 	strb.w	r3, [r7, #2635]	@ 0xa4b

	despiselect();
 800c22c:	f7ff fb64 	bl	800b8f8 <despiselect>

	return &arr_float;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	f507 6725 	add.w	r7, r7, #2640	@ 0xa50
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	0800f9c0 	.word	0x0800f9c0

0800c240 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c24a:	79fb      	ldrb	r3, [r7, #7]
 800c24c:	4a08      	ldr	r2, [pc, #32]	@ (800c270 <disk_status+0x30>)
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	79fa      	ldrb	r2, [r7, #7]
 800c258:	4905      	ldr	r1, [pc, #20]	@ (800c270 <disk_status+0x30>)
 800c25a:	440a      	add	r2, r1
 800c25c:	7a12      	ldrb	r2, [r2, #8]
 800c25e:	4610      	mov	r0, r2
 800c260:	4798      	blx	r3
 800c262:	4603      	mov	r3, r0
 800c264:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c266:	7bfb      	ldrb	r3, [r7, #15]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	240005a8 	.word	0x240005a8

0800c274 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c282:	79fb      	ldrb	r3, [r7, #7]
 800c284:	4a0e      	ldr	r2, [pc, #56]	@ (800c2c0 <disk_initialize+0x4c>)
 800c286:	5cd3      	ldrb	r3, [r2, r3]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d114      	bne.n	800c2b6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c28c:	79fb      	ldrb	r3, [r7, #7]
 800c28e:	4a0c      	ldr	r2, [pc, #48]	@ (800c2c0 <disk_initialize+0x4c>)
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	79fa      	ldrb	r2, [r7, #7]
 800c29a:	4909      	ldr	r1, [pc, #36]	@ (800c2c0 <disk_initialize+0x4c>)
 800c29c:	440a      	add	r2, r1
 800c29e:	7a12      	ldrb	r2, [r2, #8]
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	4798      	blx	r3
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d103      	bne.n	800c2b6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c2ae:	79fb      	ldrb	r3, [r7, #7]
 800c2b0:	4a03      	ldr	r2, [pc, #12]	@ (800c2c0 <disk_initialize+0x4c>)
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	240005a8 	.word	0x240005a8

0800c2c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c2c4:	b590      	push	{r4, r7, lr}
 800c2c6:	b087      	sub	sp, #28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	607a      	str	r2, [r7, #4]
 800c2ce:	603b      	str	r3, [r7, #0]
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	4a0a      	ldr	r2, [pc, #40]	@ (800c300 <disk_read+0x3c>)
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	689c      	ldr	r4, [r3, #8]
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	4a07      	ldr	r2, [pc, #28]	@ (800c300 <disk_read+0x3c>)
 800c2e4:	4413      	add	r3, r2
 800c2e6:	7a18      	ldrb	r0, [r3, #8]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	47a0      	blx	r4
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd90      	pop	{r4, r7, pc}
 800c2fe:	bf00      	nop
 800c300:	240005a8 	.word	0x240005a8

0800c304 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c304:	b590      	push	{r4, r7, lr}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60b9      	str	r1, [r7, #8]
 800c30c:	607a      	str	r2, [r7, #4]
 800c30e:	603b      	str	r3, [r7, #0]
 800c310:	4603      	mov	r3, r0
 800c312:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c314:	7bfb      	ldrb	r3, [r7, #15]
 800c316:	4a0a      	ldr	r2, [pc, #40]	@ (800c340 <disk_write+0x3c>)
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	68dc      	ldr	r4, [r3, #12]
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	4a07      	ldr	r2, [pc, #28]	@ (800c340 <disk_write+0x3c>)
 800c324:	4413      	add	r3, r2
 800c326:	7a18      	ldrb	r0, [r3, #8]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	47a0      	blx	r4
 800c330:	4603      	mov	r3, r0
 800c332:	75fb      	strb	r3, [r7, #23]
  return res;
 800c334:	7dfb      	ldrb	r3, [r7, #23]
}
 800c336:	4618      	mov	r0, r3
 800c338:	371c      	adds	r7, #28
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd90      	pop	{r4, r7, pc}
 800c33e:	bf00      	nop
 800c340:	240005a8 	.word	0x240005a8

0800c344 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	603a      	str	r2, [r7, #0]
 800c34e:	71fb      	strb	r3, [r7, #7]
 800c350:	460b      	mov	r3, r1
 800c352:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	4a09      	ldr	r2, [pc, #36]	@ (800c37c <disk_ioctl+0x38>)
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	79fa      	ldrb	r2, [r7, #7]
 800c362:	4906      	ldr	r1, [pc, #24]	@ (800c37c <disk_ioctl+0x38>)
 800c364:	440a      	add	r2, r1
 800c366:	7a10      	ldrb	r0, [r2, #8]
 800c368:	79b9      	ldrb	r1, [r7, #6]
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	4798      	blx	r3
 800c36e:	4603      	mov	r3, r0
 800c370:	73fb      	strb	r3, [r7, #15]
  return res;
 800c372:	7bfb      	ldrb	r3, [r7, #15]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	240005a8 	.word	0x240005a8

0800c380 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c380:	b480      	push	{r7}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3301      	adds	r3, #1
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c390:	89fb      	ldrh	r3, [r7, #14]
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	b21a      	sxth	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	b21b      	sxth	r3, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	b21b      	sxth	r3, r3
 800c3a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c3a2:	89fb      	ldrh	r3, [r7, #14]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3303      	adds	r3, #3
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	021b      	lsls	r3, r3, #8
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	3202      	adds	r2, #2
 800c3c8:	7812      	ldrb	r2, [r2, #0]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	021b      	lsls	r3, r3, #8
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	3201      	adds	r2, #1
 800c3d6:	7812      	ldrb	r2, [r2, #0]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	021b      	lsls	r3, r3, #8
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	7812      	ldrb	r2, [r2, #0]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]
	return rv;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3714      	adds	r7, #20
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c3f6:	b480      	push	{r7}
 800c3f8:	b083      	sub	sp, #12
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	460b      	mov	r3, r1
 800c400:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	607a      	str	r2, [r7, #4]
 800c408:	887a      	ldrh	r2, [r7, #2]
 800c40a:	b2d2      	uxtb	r2, r2
 800c40c:	701a      	strb	r2, [r3, #0]
 800c40e:	887b      	ldrh	r3, [r7, #2]
 800c410:	0a1b      	lsrs	r3, r3, #8
 800c412:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	1c5a      	adds	r2, r3, #1
 800c418:	607a      	str	r2, [r7, #4]
 800c41a:	887a      	ldrh	r2, [r7, #2]
 800c41c:	b2d2      	uxtb	r2, r2
 800c41e:	701a      	strb	r2, [r3, #0]
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	683a      	ldr	r2, [r7, #0]
 800c43e:	b2d2      	uxtb	r2, r2
 800c440:	701a      	strb	r2, [r3, #0]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	0a1b      	lsrs	r3, r3, #8
 800c446:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	607a      	str	r2, [r7, #4]
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	b2d2      	uxtb	r2, r2
 800c452:	701a      	strb	r2, [r3, #0]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	0a1b      	lsrs	r3, r3, #8
 800c458:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	607a      	str	r2, [r7, #4]
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	b2d2      	uxtb	r2, r2
 800c464:	701a      	strb	r2, [r3, #0]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	0a1b      	lsrs	r3, r3, #8
 800c46a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	607a      	str	r2, [r7, #4]
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	b2d2      	uxtb	r2, r2
 800c476:	701a      	strb	r2, [r3, #0]
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c484:	b480      	push	{r7}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00d      	beq.n	800c4ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	1c53      	adds	r3, r2, #1
 800c4a2:	613b      	str	r3, [r7, #16]
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	1c59      	adds	r1, r3, #1
 800c4a8:	6179      	str	r1, [r7, #20]
 800c4aa:	7812      	ldrb	r2, [r2, #0]
 800c4ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	607b      	str	r3, [r7, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1f1      	bne.n	800c49e <mem_cpy+0x1a>
	}
}
 800c4ba:	bf00      	nop
 800c4bc:	371c      	adds	r7, #28
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c4c6:	b480      	push	{r7}
 800c4c8:	b087      	sub	sp, #28
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	60f8      	str	r0, [r7, #12]
 800c4ce:	60b9      	str	r1, [r7, #8]
 800c4d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	617a      	str	r2, [r7, #20]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	b2d2      	uxtb	r2, r2
 800c4e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	607b      	str	r3, [r7, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1f3      	bne.n	800c4d6 <mem_set+0x10>
}
 800c4ee:	bf00      	nop
 800c4f0:	bf00      	nop
 800c4f2:	371c      	adds	r7, #28
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c4fc:	b480      	push	{r7}
 800c4fe:	b089      	sub	sp, #36	@ 0x24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	61fb      	str	r3, [r7, #28]
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	61fa      	str	r2, [r7, #28]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	4619      	mov	r1, r3
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	61ba      	str	r2, [r7, #24]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	1acb      	subs	r3, r1, r3
 800c528:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3b01      	subs	r3, #1
 800c52e:	607b      	str	r3, [r7, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d002      	beq.n	800c53c <mem_cmp+0x40>
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d0eb      	beq.n	800c514 <mem_cmp+0x18>

	return r;
 800c53c:	697b      	ldr	r3, [r7, #20]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3724      	adds	r7, #36	@ 0x24
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c54a:	b480      	push	{r7}
 800c54c:	b083      	sub	sp, #12
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c554:	e002      	b.n	800c55c <chk_chr+0x12>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	3301      	adds	r3, #1
 800c55a:	607b      	str	r3, [r7, #4]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d005      	beq.n	800c570 <chk_chr+0x26>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	461a      	mov	r2, r3
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d1f2      	bne.n	800c556 <chk_chr+0xc>
	return *str;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	781b      	ldrb	r3, [r3, #0]
}
 800c574:	4618      	mov	r0, r3
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c58a:	2300      	movs	r3, #0
 800c58c:	60bb      	str	r3, [r7, #8]
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	60fb      	str	r3, [r7, #12]
 800c592:	e029      	b.n	800c5e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c594:	4a27      	ldr	r2, [pc, #156]	@ (800c634 <chk_lock+0xb4>)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	011b      	lsls	r3, r3, #4
 800c59a:	4413      	add	r3, r2
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d01d      	beq.n	800c5de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c5a2:	4a24      	ldr	r2, [pc, #144]	@ (800c634 <chk_lock+0xb4>)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	011b      	lsls	r3, r3, #4
 800c5a8:	4413      	add	r3, r2
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d116      	bne.n	800c5e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c5b4:	4a1f      	ldr	r2, [pc, #124]	@ (800c634 <chk_lock+0xb4>)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	011b      	lsls	r3, r3, #4
 800c5ba:	4413      	add	r3, r2
 800c5bc:	3304      	adds	r3, #4
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d10c      	bne.n	800c5e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5c8:	4a1a      	ldr	r2, [pc, #104]	@ (800c634 <chk_lock+0xb4>)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	011b      	lsls	r3, r3, #4
 800c5ce:	4413      	add	r3, r2
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d102      	bne.n	800c5e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5dc:	e007      	b.n	800c5ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	60fb      	str	r3, [r7, #12]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d9d2      	bls.n	800c594 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d109      	bne.n	800c608 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d102      	bne.n	800c600 <chk_lock+0x80>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d101      	bne.n	800c604 <chk_lock+0x84>
 800c600:	2300      	movs	r3, #0
 800c602:	e010      	b.n	800c626 <chk_lock+0xa6>
 800c604:	2312      	movs	r3, #18
 800c606:	e00e      	b.n	800c626 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d108      	bne.n	800c620 <chk_lock+0xa0>
 800c60e:	4a09      	ldr	r2, [pc, #36]	@ (800c634 <chk_lock+0xb4>)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	011b      	lsls	r3, r3, #4
 800c614:	4413      	add	r3, r2
 800c616:	330c      	adds	r3, #12
 800c618:	881b      	ldrh	r3, [r3, #0]
 800c61a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c61e:	d101      	bne.n	800c624 <chk_lock+0xa4>
 800c620:	2310      	movs	r3, #16
 800c622:	e000      	b.n	800c626 <chk_lock+0xa6>
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3714      	adds	r7, #20
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	24000388 	.word	0x24000388

0800c638 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c63e:	2300      	movs	r3, #0
 800c640:	607b      	str	r3, [r7, #4]
 800c642:	e002      	b.n	800c64a <enq_lock+0x12>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3301      	adds	r3, #1
 800c648:	607b      	str	r3, [r7, #4]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d806      	bhi.n	800c65e <enq_lock+0x26>
 800c650:	4a09      	ldr	r2, [pc, #36]	@ (800c678 <enq_lock+0x40>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	011b      	lsls	r3, r3, #4
 800c656:	4413      	add	r3, r2
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1f2      	bne.n	800c644 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b02      	cmp	r3, #2
 800c662:	bf14      	ite	ne
 800c664:	2301      	movne	r3, #1
 800c666:	2300      	moveq	r3, #0
 800c668:	b2db      	uxtb	r3, r3
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	24000388 	.word	0x24000388

0800c67c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c686:	2300      	movs	r3, #0
 800c688:	60fb      	str	r3, [r7, #12]
 800c68a:	e01f      	b.n	800c6cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c68c:	4a41      	ldr	r2, [pc, #260]	@ (800c794 <inc_lock+0x118>)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	011b      	lsls	r3, r3, #4
 800c692:	4413      	add	r3, r2
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d113      	bne.n	800c6c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c69e:	4a3d      	ldr	r2, [pc, #244]	@ (800c794 <inc_lock+0x118>)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	011b      	lsls	r3, r3, #4
 800c6a4:	4413      	add	r3, r2
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d109      	bne.n	800c6c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c6b2:	4a38      	ldr	r2, [pc, #224]	@ (800c794 <inc_lock+0x118>)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	4413      	add	r3, r2
 800c6ba:	3308      	adds	r3, #8
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d006      	beq.n	800c6d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d9dc      	bls.n	800c68c <inc_lock+0x10>
 800c6d2:	e000      	b.n	800c6d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c6d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d132      	bne.n	800c742 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	60fb      	str	r3, [r7, #12]
 800c6e0:	e002      	b.n	800c6e8 <inc_lock+0x6c>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d806      	bhi.n	800c6fc <inc_lock+0x80>
 800c6ee:	4a29      	ldr	r2, [pc, #164]	@ (800c794 <inc_lock+0x118>)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	011b      	lsls	r3, r3, #4
 800c6f4:	4413      	add	r3, r2
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1f2      	bne.n	800c6e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d101      	bne.n	800c706 <inc_lock+0x8a>
 800c702:	2300      	movs	r3, #0
 800c704:	e040      	b.n	800c788 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	4922      	ldr	r1, [pc, #136]	@ (800c794 <inc_lock+0x118>)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	011b      	lsls	r3, r3, #4
 800c710:	440b      	add	r3, r1
 800c712:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689a      	ldr	r2, [r3, #8]
 800c718:	491e      	ldr	r1, [pc, #120]	@ (800c794 <inc_lock+0x118>)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	011b      	lsls	r3, r3, #4
 800c71e:	440b      	add	r3, r1
 800c720:	3304      	adds	r3, #4
 800c722:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	695a      	ldr	r2, [r3, #20]
 800c728:	491a      	ldr	r1, [pc, #104]	@ (800c794 <inc_lock+0x118>)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	011b      	lsls	r3, r3, #4
 800c72e:	440b      	add	r3, r1
 800c730:	3308      	adds	r3, #8
 800c732:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c734:	4a17      	ldr	r2, [pc, #92]	@ (800c794 <inc_lock+0x118>)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	011b      	lsls	r3, r3, #4
 800c73a:	4413      	add	r3, r2
 800c73c:	330c      	adds	r3, #12
 800c73e:	2200      	movs	r2, #0
 800c740:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d009      	beq.n	800c75c <inc_lock+0xe0>
 800c748:	4a12      	ldr	r2, [pc, #72]	@ (800c794 <inc_lock+0x118>)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	011b      	lsls	r3, r3, #4
 800c74e:	4413      	add	r3, r2
 800c750:	330c      	adds	r3, #12
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <inc_lock+0xe0>
 800c758:	2300      	movs	r3, #0
 800c75a:	e015      	b.n	800c788 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d108      	bne.n	800c774 <inc_lock+0xf8>
 800c762:	4a0c      	ldr	r2, [pc, #48]	@ (800c794 <inc_lock+0x118>)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	011b      	lsls	r3, r3, #4
 800c768:	4413      	add	r3, r2
 800c76a:	330c      	adds	r3, #12
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	3301      	adds	r3, #1
 800c770:	b29a      	uxth	r2, r3
 800c772:	e001      	b.n	800c778 <inc_lock+0xfc>
 800c774:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c778:	4906      	ldr	r1, [pc, #24]	@ (800c794 <inc_lock+0x118>)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	011b      	lsls	r3, r3, #4
 800c77e:	440b      	add	r3, r1
 800c780:	330c      	adds	r3, #12
 800c782:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	3301      	adds	r3, #1
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	24000388 	.word	0x24000388

0800c798 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	607b      	str	r3, [r7, #4]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d825      	bhi.n	800c7f8 <dec_lock+0x60>
		n = Files[i].ctr;
 800c7ac:	4a17      	ldr	r2, [pc, #92]	@ (800c80c <dec_lock+0x74>)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	011b      	lsls	r3, r3, #4
 800c7b2:	4413      	add	r3, r2
 800c7b4:	330c      	adds	r3, #12
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c7ba:	89fb      	ldrh	r3, [r7, #14]
 800c7bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7c0:	d101      	bne.n	800c7c6 <dec_lock+0x2e>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c7c6:	89fb      	ldrh	r3, [r7, #14]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <dec_lock+0x3a>
 800c7cc:	89fb      	ldrh	r3, [r7, #14]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c7d2:	4a0e      	ldr	r2, [pc, #56]	@ (800c80c <dec_lock+0x74>)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	011b      	lsls	r3, r3, #4
 800c7d8:	4413      	add	r3, r2
 800c7da:	330c      	adds	r3, #12
 800c7dc:	89fa      	ldrh	r2, [r7, #14]
 800c7de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c7e0:	89fb      	ldrh	r3, [r7, #14]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d105      	bne.n	800c7f2 <dec_lock+0x5a>
 800c7e6:	4a09      	ldr	r2, [pc, #36]	@ (800c80c <dec_lock+0x74>)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	011b      	lsls	r3, r3, #4
 800c7ec:	4413      	add	r3, r2
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	737b      	strb	r3, [r7, #13]
 800c7f6:	e001      	b.n	800c7fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c7fc:	7b7b      	ldrb	r3, [r7, #13]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	24000388 	.word	0x24000388

0800c810 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c818:	2300      	movs	r3, #0
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	e010      	b.n	800c840 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c81e:	4a0d      	ldr	r2, [pc, #52]	@ (800c854 <clear_lock+0x44>)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	011b      	lsls	r3, r3, #4
 800c824:	4413      	add	r3, r2
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d105      	bne.n	800c83a <clear_lock+0x2a>
 800c82e:	4a09      	ldr	r2, [pc, #36]	@ (800c854 <clear_lock+0x44>)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	011b      	lsls	r3, r3, #4
 800c834:	4413      	add	r3, r2
 800c836:	2200      	movs	r2, #0
 800c838:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3301      	adds	r3, #1
 800c83e:	60fb      	str	r3, [r7, #12]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d9eb      	bls.n	800c81e <clear_lock+0xe>
	}
}
 800c846:	bf00      	nop
 800c848:	bf00      	nop
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	24000388 	.word	0x24000388

0800c858 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c860:	2300      	movs	r3, #0
 800c862:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	78db      	ldrb	r3, [r3, #3]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d034      	beq.n	800c8d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c870:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	7858      	ldrb	r0, [r3, #1]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c87c:	2301      	movs	r3, #1
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	f7ff fd40 	bl	800c304 <disk_write>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d002      	beq.n	800c890 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	73fb      	strb	r3, [r7, #15]
 800c88e:	e022      	b.n	800c8d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	1ad2      	subs	r2, r2, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	69db      	ldr	r3, [r3, #28]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d217      	bcs.n	800c8d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	789b      	ldrb	r3, [r3, #2]
 800c8aa:	613b      	str	r3, [r7, #16]
 800c8ac:	e010      	b.n	800c8d0 <sync_window+0x78>
					wsect += fs->fsize;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	69db      	ldr	r3, [r3, #28]
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	7858      	ldrb	r0, [r3, #1]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	f7ff fd1d 	bl	800c304 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	613b      	str	r3, [r7, #16]
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d8eb      	bhi.n	800c8ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3718      	adds	r7, #24
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d01b      	beq.n	800c930 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7ff ffad 	bl	800c858 <sync_window>
 800c8fe:	4603      	mov	r3, r0
 800c900:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d113      	bne.n	800c930 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	7858      	ldrb	r0, [r3, #1]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c912:	2301      	movs	r3, #1
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	f7ff fcd5 	bl	800c2c4 <disk_read>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d004      	beq.n	800c92a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c920:	f04f 33ff 	mov.w	r3, #4294967295
 800c924:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c926:	2301      	movs	r3, #1
 800c928:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	683a      	ldr	r2, [r7, #0]
 800c92e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800c930:	7bfb      	ldrb	r3, [r7, #15]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7ff ff87 	bl	800c858 <sync_window>
 800c94a:	4603      	mov	r3, r0
 800c94c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d158      	bne.n	800ca06 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	2b03      	cmp	r3, #3
 800c95a:	d148      	bne.n	800c9ee <sync_fs+0xb2>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	791b      	ldrb	r3, [r3, #4]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d144      	bne.n	800c9ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	3334      	adds	r3, #52	@ 0x34
 800c968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c96c:	2100      	movs	r1, #0
 800c96e:	4618      	mov	r0, r3
 800c970:	f7ff fda9 	bl	800c4c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	3334      	adds	r3, #52	@ 0x34
 800c978:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c97c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c980:	4618      	mov	r0, r3
 800c982:	f7ff fd38 	bl	800c3f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	3334      	adds	r3, #52	@ 0x34
 800c98a:	4921      	ldr	r1, [pc, #132]	@ (800ca10 <sync_fs+0xd4>)
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff fd4d 	bl	800c42c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3334      	adds	r3, #52	@ 0x34
 800c996:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c99a:	491e      	ldr	r1, [pc, #120]	@ (800ca14 <sync_fs+0xd8>)
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7ff fd45 	bl	800c42c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	3334      	adds	r3, #52	@ 0x34
 800c9a6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	695b      	ldr	r3, [r3, #20]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	f7ff fd3b 	bl	800c42c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	3334      	adds	r3, #52	@ 0x34
 800c9ba:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	f7ff fd31 	bl	800c42c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7858      	ldrb	r0, [r3, #1]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	f7ff fc8e 	bl	800c304 <disk_write>
			fs->fsi_flag = 0;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	785b      	ldrb	r3, [r3, #1]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7ff fca4 	bl	800c344 <disk_ioctl>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <sync_fs+0xca>
 800ca02:	2301      	movs	r3, #1
 800ca04:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ca06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	41615252 	.word	0x41615252
 800ca14:	61417272 	.word	0x61417272

0800ca18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	3b02      	subs	r3, #2
 800ca26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	699b      	ldr	r3, [r3, #24]
 800ca2c:	3b02      	subs	r3, #2
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d301      	bcc.n	800ca38 <clust2sect+0x20>
 800ca34:	2300      	movs	r3, #0
 800ca36:	e008      	b.n	800ca4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	895b      	ldrh	r3, [r3, #10]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	fb03 f202 	mul.w	r2, r3, r2
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca48:	4413      	add	r3, r2
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b086      	sub	sp, #24
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d904      	bls.n	800ca76 <get_fat+0x20>
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d302      	bcc.n	800ca7c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ca76:	2301      	movs	r3, #1
 800ca78:	617b      	str	r3, [r7, #20]
 800ca7a:	e08e      	b.n	800cb9a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ca7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	2b03      	cmp	r3, #3
 800ca88:	d061      	beq.n	800cb4e <get_fat+0xf8>
 800ca8a:	2b03      	cmp	r3, #3
 800ca8c:	dc7b      	bgt.n	800cb86 <get_fat+0x130>
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d002      	beq.n	800ca98 <get_fat+0x42>
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d041      	beq.n	800cb1a <get_fat+0xc4>
 800ca96:	e076      	b.n	800cb86 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	085b      	lsrs	r3, r3, #1
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	4413      	add	r3, r2
 800caa4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	0a5b      	lsrs	r3, r3, #9
 800caae:	4413      	add	r3, r2
 800cab0:	4619      	mov	r1, r3
 800cab2:	6938      	ldr	r0, [r7, #16]
 800cab4:	f7ff ff14 	bl	800c8e0 <move_window>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d166      	bne.n	800cb8c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	1c5a      	adds	r2, r3, #1
 800cac2:	60fa      	str	r2, [r7, #12]
 800cac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	4413      	add	r3, r2
 800cacc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cad0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	0a5b      	lsrs	r3, r3, #9
 800cada:	4413      	add	r3, r2
 800cadc:	4619      	mov	r1, r3
 800cade:	6938      	ldr	r0, [r7, #16]
 800cae0:	f7ff fefe 	bl	800c8e0 <move_window>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d152      	bne.n	800cb90 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	4413      	add	r3, r2
 800caf4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800caf8:	021b      	lsls	r3, r3, #8
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	f003 0301 	and.w	r3, r3, #1
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d002      	beq.n	800cb10 <get_fat+0xba>
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	091b      	lsrs	r3, r3, #4
 800cb0e:	e002      	b.n	800cb16 <get_fat+0xc0>
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb16:	617b      	str	r3, [r7, #20]
			break;
 800cb18:	e03f      	b.n	800cb9a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	0a1b      	lsrs	r3, r3, #8
 800cb22:	4413      	add	r3, r2
 800cb24:	4619      	mov	r1, r3
 800cb26:	6938      	ldr	r0, [r7, #16]
 800cb28:	f7ff feda 	bl	800c8e0 <move_window>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d130      	bne.n	800cb94 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cb40:	4413      	add	r3, r2
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7ff fc1c 	bl	800c380 <ld_word>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	617b      	str	r3, [r7, #20]
			break;
 800cb4c:	e025      	b.n	800cb9a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	09db      	lsrs	r3, r3, #7
 800cb56:	4413      	add	r3, r2
 800cb58:	4619      	mov	r1, r3
 800cb5a:	6938      	ldr	r0, [r7, #16]
 800cb5c:	f7ff fec0 	bl	800c8e0 <move_window>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d118      	bne.n	800cb98 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cb74:	4413      	add	r3, r2
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7ff fc1a 	bl	800c3b0 <ld_dword>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cb82:	617b      	str	r3, [r7, #20]
			break;
 800cb84:	e009      	b.n	800cb9a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cb86:	2301      	movs	r3, #1
 800cb88:	617b      	str	r3, [r7, #20]
 800cb8a:	e006      	b.n	800cb9a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb8c:	bf00      	nop
 800cb8e:	e004      	b.n	800cb9a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb90:	bf00      	nop
 800cb92:	e002      	b.n	800cb9a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb94:	bf00      	nop
 800cb96:	e000      	b.n	800cb9a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb98:	bf00      	nop
		}
	}

	return val;
 800cb9a:	697b      	ldr	r3, [r7, #20]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3718      	adds	r7, #24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cba4:	b590      	push	{r4, r7, lr}
 800cba6:	b089      	sub	sp, #36	@ 0x24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	f240 80d9 	bls.w	800cd6e <put_fat+0x1ca>
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	f080 80d3 	bcs.w	800cd6e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b03      	cmp	r3, #3
 800cbce:	f000 8096 	beq.w	800ccfe <put_fat+0x15a>
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	f300 80cb 	bgt.w	800cd6e <put_fat+0x1ca>
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d002      	beq.n	800cbe2 <put_fat+0x3e>
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d06e      	beq.n	800ccbe <put_fat+0x11a>
 800cbe0:	e0c5      	b.n	800cd6e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	61bb      	str	r3, [r7, #24]
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	085b      	lsrs	r3, r3, #1
 800cbea:	69ba      	ldr	r2, [r7, #24]
 800cbec:	4413      	add	r3, r2
 800cbee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	0a5b      	lsrs	r3, r3, #9
 800cbf8:	4413      	add	r3, r2
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f7ff fe6f 	bl	800c8e0 <move_window>
 800cc02:	4603      	mov	r3, r0
 800cc04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc06:	7ffb      	ldrb	r3, [r7, #31]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f040 80a9 	bne.w	800cd60 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	1c59      	adds	r1, r3, #1
 800cc18:	61b9      	str	r1, [r7, #24]
 800cc1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc1e:	4413      	add	r3, r2
 800cc20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	f003 0301 	and.w	r3, r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00d      	beq.n	800cc48 <put_fat+0xa4>
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	b25b      	sxtb	r3, r3
 800cc32:	f003 030f 	and.w	r3, r3, #15
 800cc36:	b25a      	sxtb	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	011b      	lsls	r3, r3, #4
 800cc3e:	b25b      	sxtb	r3, r3
 800cc40:	4313      	orrs	r3, r2
 800cc42:	b25b      	sxtb	r3, r3
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	e001      	b.n	800cc4c <put_fat+0xa8>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	697a      	ldr	r2, [r7, #20]
 800cc4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2201      	movs	r2, #1
 800cc54:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	0a5b      	lsrs	r3, r3, #9
 800cc5e:	4413      	add	r3, r2
 800cc60:	4619      	mov	r1, r3
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f7ff fe3c 	bl	800c8e0 <move_window>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc6c:	7ffb      	ldrb	r3, [r7, #31]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d178      	bne.n	800cd64 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7e:	4413      	add	r3, r2
 800cc80:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d003      	beq.n	800cc94 <put_fat+0xf0>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	091b      	lsrs	r3, r3, #4
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	e00e      	b.n	800ccb2 <put_fat+0x10e>
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	b25b      	sxtb	r3, r3
 800cc9a:	f023 030f 	bic.w	r3, r3, #15
 800cc9e:	b25a      	sxtb	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	0a1b      	lsrs	r3, r3, #8
 800cca4:	b25b      	sxtb	r3, r3
 800cca6:	f003 030f 	and.w	r3, r3, #15
 800ccaa:	b25b      	sxtb	r3, r3
 800ccac:	4313      	orrs	r3, r2
 800ccae:	b25b      	sxtb	r3, r3
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2201      	movs	r2, #1
 800ccba:	70da      	strb	r2, [r3, #3]
			break;
 800ccbc:	e057      	b.n	800cd6e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	0a1b      	lsrs	r3, r3, #8
 800ccc6:	4413      	add	r3, r2
 800ccc8:	4619      	mov	r1, r3
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f7ff fe08 	bl	800c8e0 <move_window>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccd4:	7ffb      	ldrb	r3, [r7, #31]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d146      	bne.n	800cd68 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cce8:	4413      	add	r3, r2
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	b292      	uxth	r2, r2
 800ccee:	4611      	mov	r1, r2
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7ff fb80 	bl	800c3f6 <st_word>
			fs->wflag = 1;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	70da      	strb	r2, [r3, #3]
			break;
 800ccfc:	e037      	b.n	800cd6e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	09db      	lsrs	r3, r3, #7
 800cd06:	4413      	add	r3, r2
 800cd08:	4619      	mov	r1, r3
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f7ff fde8 	bl	800c8e0 <move_window>
 800cd10:	4603      	mov	r3, r0
 800cd12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd14:	7ffb      	ldrb	r3, [r7, #31]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d128      	bne.n	800cd6c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cd2e:	4413      	add	r3, r2
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7ff fb3d 	bl	800c3b0 <ld_dword>
 800cd36:	4603      	mov	r3, r0
 800cd38:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800cd3c:	4323      	orrs	r3, r4
 800cd3e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cd4e:	4413      	add	r3, r2
 800cd50:	6879      	ldr	r1, [r7, #4]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff fb6a 	bl	800c42c <st_dword>
			fs->wflag = 1;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	70da      	strb	r2, [r3, #3]
			break;
 800cd5e:	e006      	b.n	800cd6e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cd60:	bf00      	nop
 800cd62:	e004      	b.n	800cd6e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cd64:	bf00      	nop
 800cd66:	e002      	b.n	800cd6e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cd68:	bf00      	nop
 800cd6a:	e000      	b.n	800cd6e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cd6c:	bf00      	nop
		}
	}
	return res;
 800cd6e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3724      	adds	r7, #36	@ 0x24
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd90      	pop	{r4, r7, pc}

0800cd78 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b088      	sub	sp, #32
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d904      	bls.n	800cd9e <remove_chain+0x26>
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	699b      	ldr	r3, [r3, #24]
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d301      	bcc.n	800cda2 <remove_chain+0x2a>
 800cd9e:	2302      	movs	r3, #2
 800cda0:	e04b      	b.n	800ce3a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d00c      	beq.n	800cdc2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cda8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdac:	6879      	ldr	r1, [r7, #4]
 800cdae:	69b8      	ldr	r0, [r7, #24]
 800cdb0:	f7ff fef8 	bl	800cba4 <put_fat>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cdb8:	7ffb      	ldrb	r3, [r7, #31]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d001      	beq.n	800cdc2 <remove_chain+0x4a>
 800cdbe:	7ffb      	ldrb	r3, [r7, #31]
 800cdc0:	e03b      	b.n	800ce3a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cdc2:	68b9      	ldr	r1, [r7, #8]
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f7ff fe46 	bl	800ca56 <get_fat>
 800cdca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d031      	beq.n	800ce36 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d101      	bne.n	800cddc <remove_chain+0x64>
 800cdd8:	2302      	movs	r3, #2
 800cdda:	e02e      	b.n	800ce3a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde2:	d101      	bne.n	800cde8 <remove_chain+0x70>
 800cde4:	2301      	movs	r3, #1
 800cde6:	e028      	b.n	800ce3a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cde8:	2200      	movs	r2, #0
 800cdea:	68b9      	ldr	r1, [r7, #8]
 800cdec:	69b8      	ldr	r0, [r7, #24]
 800cdee:	f7ff fed9 	bl	800cba4 <put_fat>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cdf6:	7ffb      	ldrb	r3, [r7, #31]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d001      	beq.n	800ce00 <remove_chain+0x88>
 800cdfc:	7ffb      	ldrb	r3, [r7, #31]
 800cdfe:	e01c      	b.n	800ce3a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	695a      	ldr	r2, [r3, #20]
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	3b02      	subs	r3, #2
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d20b      	bcs.n	800ce26 <remove_chain+0xae>
			fs->free_clst++;
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	695b      	ldr	r3, [r3, #20]
 800ce12:	1c5a      	adds	r2, r3, #1
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	791b      	ldrb	r3, [r3, #4]
 800ce1c:	f043 0301 	orr.w	r3, r3, #1
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d3c6      	bcc.n	800cdc2 <remove_chain+0x4a>
 800ce34:	e000      	b.n	800ce38 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ce36:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3720      	adds	r7, #32
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b088      	sub	sp, #32
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10d      	bne.n	800ce74 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d004      	beq.n	800ce6e <create_chain+0x2c>
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	699b      	ldr	r3, [r3, #24]
 800ce68:	69ba      	ldr	r2, [r7, #24]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d31b      	bcc.n	800cea6 <create_chain+0x64>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	61bb      	str	r3, [r7, #24]
 800ce72:	e018      	b.n	800cea6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7ff fded 	bl	800ca56 <get_fat>
 800ce7c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d801      	bhi.n	800ce88 <create_chain+0x46>
 800ce84:	2301      	movs	r3, #1
 800ce86:	e070      	b.n	800cf6a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8e:	d101      	bne.n	800ce94 <create_chain+0x52>
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	e06a      	b.n	800cf6a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d201      	bcs.n	800cea2 <create_chain+0x60>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	e063      	b.n	800cf6a <create_chain+0x128>
		scl = clst;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	3301      	adds	r3, #1
 800ceae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	699b      	ldr	r3, [r3, #24]
 800ceb4:	69fa      	ldr	r2, [r7, #28]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d307      	bcc.n	800ceca <create_chain+0x88>
				ncl = 2;
 800ceba:	2302      	movs	r3, #2
 800cebc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cebe:	69fa      	ldr	r2, [r7, #28]
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d901      	bls.n	800ceca <create_chain+0x88>
 800cec6:	2300      	movs	r3, #0
 800cec8:	e04f      	b.n	800cf6a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ceca:	69f9      	ldr	r1, [r7, #28]
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff fdc2 	bl	800ca56 <get_fat>
 800ced2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00e      	beq.n	800cef8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d003      	beq.n	800cee8 <create_chain+0xa6>
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee6:	d101      	bne.n	800ceec <create_chain+0xaa>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	e03e      	b.n	800cf6a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ceec:	69fa      	ldr	r2, [r7, #28]
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d1da      	bne.n	800ceaa <create_chain+0x68>
 800cef4:	2300      	movs	r3, #0
 800cef6:	e038      	b.n	800cf6a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cef8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cefa:	f04f 32ff 	mov.w	r2, #4294967295
 800cefe:	69f9      	ldr	r1, [r7, #28]
 800cf00:	6938      	ldr	r0, [r7, #16]
 800cf02:	f7ff fe4f 	bl	800cba4 <put_fat>
 800cf06:	4603      	mov	r3, r0
 800cf08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d109      	bne.n	800cf24 <create_chain+0xe2>
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d006      	beq.n	800cf24 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cf16:	69fa      	ldr	r2, [r7, #28]
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6938      	ldr	r0, [r7, #16]
 800cf1c:	f7ff fe42 	bl	800cba4 <put_fat>
 800cf20:	4603      	mov	r3, r0
 800cf22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cf24:	7dfb      	ldrb	r3, [r7, #23]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d116      	bne.n	800cf58 <create_chain+0x116>
		fs->last_clst = ncl;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	69fa      	ldr	r2, [r7, #28]
 800cf2e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	695a      	ldr	r2, [r3, #20]
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	699b      	ldr	r3, [r3, #24]
 800cf38:	3b02      	subs	r3, #2
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d804      	bhi.n	800cf48 <create_chain+0x106>
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	1e5a      	subs	r2, r3, #1
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	791b      	ldrb	r3, [r3, #4]
 800cf4c:	f043 0301 	orr.w	r3, r3, #1
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	711a      	strb	r2, [r3, #4]
 800cf56:	e007      	b.n	800cf68 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cf58:	7dfb      	ldrb	r3, [r7, #23]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d102      	bne.n	800cf64 <create_chain+0x122>
 800cf5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf62:	e000      	b.n	800cf66 <create_chain+0x124>
 800cf64:	2301      	movs	r3, #1
 800cf66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cf68:	69fb      	ldr	r3, [r7, #28]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3720      	adds	r7, #32
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cf72:	b480      	push	{r7}
 800cf74:	b087      	sub	sp, #28
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf86:	3304      	adds	r3, #4
 800cf88:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	0a5b      	lsrs	r3, r3, #9
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	8952      	ldrh	r2, [r2, #10]
 800cf92:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf96:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	1d1a      	adds	r2, r3, #4
 800cf9c:	613a      	str	r2, [r7, #16]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d101      	bne.n	800cfac <clmt_clust+0x3a>
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	e010      	b.n	800cfce <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cfac:	697a      	ldr	r2, [r7, #20]
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d307      	bcc.n	800cfc4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	1ad3      	subs	r3, r2, r3
 800cfba:	617b      	str	r3, [r7, #20]
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cfc2:	e7e9      	b.n	800cf98 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cfc4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	4413      	add	r3, r2
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	371c      	adds	r7, #28
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b086      	sub	sp, #24
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cff0:	d204      	bcs.n	800cffc <dir_sdi+0x22>
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	f003 031f 	and.w	r3, r3, #31
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cffc:	2302      	movs	r3, #2
 800cffe:	e063      	b.n	800d0c8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	683a      	ldr	r2, [r7, #0]
 800d004:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d106      	bne.n	800d020 <dir_sdi+0x46>
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	2b02      	cmp	r3, #2
 800d018:	d902      	bls.n	800d020 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d01e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10c      	bne.n	800d040 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	095b      	lsrs	r3, r3, #5
 800d02a:	693a      	ldr	r2, [r7, #16]
 800d02c:	8912      	ldrh	r2, [r2, #8]
 800d02e:	4293      	cmp	r3, r2
 800d030:	d301      	bcc.n	800d036 <dir_sdi+0x5c>
 800d032:	2302      	movs	r3, #2
 800d034:	e048      	b.n	800d0c8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	61da      	str	r2, [r3, #28]
 800d03e:	e029      	b.n	800d094 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	895b      	ldrh	r3, [r3, #10]
 800d044:	025b      	lsls	r3, r3, #9
 800d046:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d048:	e019      	b.n	800d07e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6979      	ldr	r1, [r7, #20]
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fd01 	bl	800ca56 <get_fat>
 800d054:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05c:	d101      	bne.n	800d062 <dir_sdi+0x88>
 800d05e:	2301      	movs	r3, #1
 800d060:	e032      	b.n	800d0c8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d904      	bls.n	800d072 <dir_sdi+0x98>
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	697a      	ldr	r2, [r7, #20]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d301      	bcc.n	800d076 <dir_sdi+0x9c>
 800d072:	2302      	movs	r3, #2
 800d074:	e028      	b.n	800d0c8 <dir_sdi+0xee>
			ofs -= csz;
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	1ad3      	subs	r3, r2, r3
 800d07c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d07e:	683a      	ldr	r2, [r7, #0]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	429a      	cmp	r2, r3
 800d084:	d2e1      	bcs.n	800d04a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d086:	6979      	ldr	r1, [r7, #20]
 800d088:	6938      	ldr	r0, [r7, #16]
 800d08a:	f7ff fcc5 	bl	800ca18 <clust2sect>
 800d08e:	4602      	mov	r2, r0
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	69db      	ldr	r3, [r3, #28]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d101      	bne.n	800d0a6 <dir_sdi+0xcc>
 800d0a2:	2302      	movs	r3, #2
 800d0a4:	e010      	b.n	800d0c8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	69da      	ldr	r2, [r3, #28]
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	0a5b      	lsrs	r3, r3, #9
 800d0ae:	441a      	add	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c0:	441a      	add	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	695b      	ldr	r3, [r3, #20]
 800d0e4:	3320      	adds	r3, #32
 800d0e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	69db      	ldr	r3, [r3, #28]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d003      	beq.n	800d0f8 <dir_next+0x28>
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0f6:	d301      	bcc.n	800d0fc <dir_next+0x2c>
 800d0f8:	2304      	movs	r3, #4
 800d0fa:	e0aa      	b.n	800d252 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d102:	2b00      	cmp	r3, #0
 800d104:	f040 8098 	bne.w	800d238 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	69db      	ldr	r3, [r3, #28]
 800d10c:	1c5a      	adds	r2, r3, #1
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	699b      	ldr	r3, [r3, #24]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10b      	bne.n	800d132 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	095b      	lsrs	r3, r3, #5
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	8912      	ldrh	r2, [r2, #8]
 800d122:	4293      	cmp	r3, r2
 800d124:	f0c0 8088 	bcc.w	800d238 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	61da      	str	r2, [r3, #28]
 800d12e:	2304      	movs	r3, #4
 800d130:	e08f      	b.n	800d252 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	0a5b      	lsrs	r3, r3, #9
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	8952      	ldrh	r2, [r2, #10]
 800d13a:	3a01      	subs	r2, #1
 800d13c:	4013      	ands	r3, r2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d17a      	bne.n	800d238 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	699b      	ldr	r3, [r3, #24]
 800d148:	4619      	mov	r1, r3
 800d14a:	4610      	mov	r0, r2
 800d14c:	f7ff fc83 	bl	800ca56 <get_fat>
 800d150:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d801      	bhi.n	800d15c <dir_next+0x8c>
 800d158:	2302      	movs	r3, #2
 800d15a:	e07a      	b.n	800d252 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d162:	d101      	bne.n	800d168 <dir_next+0x98>
 800d164:	2301      	movs	r3, #1
 800d166:	e074      	b.n	800d252 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	699b      	ldr	r3, [r3, #24]
 800d16c:	697a      	ldr	r2, [r7, #20]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d358      	bcc.n	800d224 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d104      	bne.n	800d182 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	61da      	str	r2, [r3, #28]
 800d17e:	2304      	movs	r3, #4
 800d180:	e067      	b.n	800d252 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	699b      	ldr	r3, [r3, #24]
 800d188:	4619      	mov	r1, r3
 800d18a:	4610      	mov	r0, r2
 800d18c:	f7ff fe59 	bl	800ce42 <create_chain>
 800d190:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <dir_next+0xcc>
 800d198:	2307      	movs	r3, #7
 800d19a:	e05a      	b.n	800d252 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d101      	bne.n	800d1a6 <dir_next+0xd6>
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	e055      	b.n	800d252 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ac:	d101      	bne.n	800d1b2 <dir_next+0xe2>
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e04f      	b.n	800d252 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff fb50 	bl	800c858 <sync_window>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <dir_next+0xf2>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e047      	b.n	800d252 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	3334      	adds	r3, #52	@ 0x34
 800d1c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7ff f97a 	bl	800c4c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	613b      	str	r3, [r7, #16]
 800d1d6:	6979      	ldr	r1, [r7, #20]
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f7ff fc1d 	bl	800ca18 <clust2sect>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	631a      	str	r2, [r3, #48]	@ 0x30
 800d1e4:	e012      	b.n	800d20c <dir_next+0x13c>
						fs->wflag = 1;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f7ff fb33 	bl	800c858 <sync_window>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <dir_next+0x12c>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e02a      	b.n	800d252 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	3301      	adds	r3, #1
 800d200:	613b      	str	r3, [r7, #16]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	631a      	str	r2, [r3, #48]	@ 0x30
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	895b      	ldrh	r3, [r3, #10]
 800d210:	461a      	mov	r2, r3
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	4293      	cmp	r3, r2
 800d216:	d3e6      	bcc.n	800d1e6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	1ad2      	subs	r2, r2, r3
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d22a:	6979      	ldr	r1, [r7, #20]
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f7ff fbf3 	bl	800ca18 <clust2sect>
 800d232:	4602      	mov	r2, r0
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d24a:	441a      	add	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3718      	adds	r7, #24
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b086      	sub	sp, #24
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d26a:	2100      	movs	r1, #0
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7ff feb4 	bl	800cfda <dir_sdi>
 800d272:	4603      	mov	r3, r0
 800d274:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d276:	7dfb      	ldrb	r3, [r7, #23]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d12b      	bne.n	800d2d4 <dir_alloc+0x7a>
		n = 0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	69db      	ldr	r3, [r3, #28]
 800d284:	4619      	mov	r1, r3
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f7ff fb2a 	bl	800c8e0 <move_window>
 800d28c:	4603      	mov	r3, r0
 800d28e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d11d      	bne.n	800d2d2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2be5      	cmp	r3, #229	@ 0xe5
 800d29e:	d004      	beq.n	800d2aa <dir_alloc+0x50>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a1b      	ldr	r3, [r3, #32]
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d107      	bne.n	800d2ba <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	613b      	str	r3, [r7, #16]
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d102      	bne.n	800d2be <dir_alloc+0x64>
 800d2b8:	e00c      	b.n	800d2d4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d2be:	2101      	movs	r1, #1
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f7ff ff05 	bl	800d0d0 <dir_next>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d0d7      	beq.n	800d280 <dir_alloc+0x26>
 800d2d0:	e000      	b.n	800d2d4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d2d2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d2d4:	7dfb      	ldrb	r3, [r7, #23]
 800d2d6:	2b04      	cmp	r3, #4
 800d2d8:	d101      	bne.n	800d2de <dir_alloc+0x84>
 800d2da:	2307      	movs	r3, #7
 800d2dc:	75fb      	strb	r3, [r7, #23]
	return res;
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3718      	adds	r7, #24
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	331a      	adds	r3, #26
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7ff f842 	bl	800c380 <ld_word>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b03      	cmp	r3, #3
 800d306:	d109      	bne.n	800d31c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	3314      	adds	r3, #20
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff f837 	bl	800c380 <ld_word>
 800d312:	4603      	mov	r3, r0
 800d314:	041b      	lsls	r3, r3, #16
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	4313      	orrs	r3, r2
 800d31a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d31c:	68fb      	ldr	r3, [r7, #12]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b084      	sub	sp, #16
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	60f8      	str	r0, [r7, #12]
 800d32e:	60b9      	str	r1, [r7, #8]
 800d330:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	331a      	adds	r3, #26
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	b292      	uxth	r2, r2
 800d33a:	4611      	mov	r1, r2
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7ff f85a 	bl	800c3f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	2b03      	cmp	r3, #3
 800d348:	d109      	bne.n	800d35e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	f103 0214 	add.w	r2, r3, #20
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	0c1b      	lsrs	r3, r3, #16
 800d354:	b29b      	uxth	r3, r3
 800d356:	4619      	mov	r1, r3
 800d358:	4610      	mov	r0, r2
 800d35a:	f7ff f84c 	bl	800c3f6 <st_word>
	}
}
 800d35e:	bf00      	nop
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d368:	b590      	push	{r4, r7, lr}
 800d36a:	b087      	sub	sp, #28
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	331a      	adds	r3, #26
 800d376:	4618      	mov	r0, r3
 800d378:	f7ff f802 	bl	800c380 <ld_word>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <cmp_lfn+0x1e>
 800d382:	2300      	movs	r3, #0
 800d384:	e059      	b.n	800d43a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d38e:	1e5a      	subs	r2, r3, #1
 800d390:	4613      	mov	r3, r2
 800d392:	005b      	lsls	r3, r3, #1
 800d394:	4413      	add	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d39c:	2301      	movs	r3, #1
 800d39e:	81fb      	strh	r3, [r7, #14]
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	613b      	str	r3, [r7, #16]
 800d3a4:	e033      	b.n	800d40e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d3a6:	4a27      	ldr	r2, [pc, #156]	@ (800d444 <cmp_lfn+0xdc>)
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fe ffe3 	bl	800c380 <ld_word>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d3be:	89fb      	ldrh	r3, [r7, #14]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d01a      	beq.n	800d3fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	2bfe      	cmp	r3, #254	@ 0xfe
 800d3c8:	d812      	bhi.n	800d3f0 <cmp_lfn+0x88>
 800d3ca:	89bb      	ldrh	r3, [r7, #12]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f001 fcd5 	bl	800ed7c <ff_wtoupper>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	461c      	mov	r4, r3
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	1c5a      	adds	r2, r3, #1
 800d3da:	617a      	str	r2, [r7, #20]
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	881b      	ldrh	r3, [r3, #0]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f001 fcc9 	bl	800ed7c <ff_wtoupper>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	429c      	cmp	r4, r3
 800d3ee:	d001      	beq.n	800d3f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	e022      	b.n	800d43a <cmp_lfn+0xd2>
			}
			wc = uc;
 800d3f4:	89bb      	ldrh	r3, [r7, #12]
 800d3f6:	81fb      	strh	r3, [r7, #14]
 800d3f8:	e006      	b.n	800d408 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d3fa:	89bb      	ldrh	r3, [r7, #12]
 800d3fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d400:	4293      	cmp	r3, r2
 800d402:	d001      	beq.n	800d408 <cmp_lfn+0xa0>
 800d404:	2300      	movs	r3, #0
 800d406:	e018      	b.n	800d43a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	3301      	adds	r3, #1
 800d40c:	613b      	str	r3, [r7, #16]
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	2b0c      	cmp	r3, #12
 800d412:	d9c8      	bls.n	800d3a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00b      	beq.n	800d438 <cmp_lfn+0xd0>
 800d420:	89fb      	ldrh	r3, [r7, #14]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d008      	beq.n	800d438 <cmp_lfn+0xd0>
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	4413      	add	r3, r2
 800d42e:	881b      	ldrh	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <cmp_lfn+0xd0>
 800d434:	2300      	movs	r3, #0
 800d436:	e000      	b.n	800d43a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d438:	2301      	movs	r3, #1
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	371c      	adds	r7, #28
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd90      	pop	{r4, r7, pc}
 800d442:	bf00      	nop
 800d444:	0800fab8 	.word	0x0800fab8

0800d448 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	4611      	mov	r1, r2
 800d454:	461a      	mov	r2, r3
 800d456:	460b      	mov	r3, r1
 800d458:	71fb      	strb	r3, [r7, #7]
 800d45a:	4613      	mov	r3, r2
 800d45c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	330d      	adds	r3, #13
 800d462:	79ba      	ldrb	r2, [r7, #6]
 800d464:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	330b      	adds	r3, #11
 800d46a:	220f      	movs	r2, #15
 800d46c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	330c      	adds	r3, #12
 800d472:	2200      	movs	r2, #0
 800d474:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	331a      	adds	r3, #26
 800d47a:	2100      	movs	r1, #0
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe ffba 	bl	800c3f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d482:	79fb      	ldrb	r3, [r7, #7]
 800d484:	1e5a      	subs	r2, r3, #1
 800d486:	4613      	mov	r3, r2
 800d488:	005b      	lsls	r3, r3, #1
 800d48a:	4413      	add	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	4413      	add	r3, r2
 800d490:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d492:	2300      	movs	r3, #0
 800d494:	82fb      	strh	r3, [r7, #22]
 800d496:	2300      	movs	r3, #0
 800d498:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d49a:	8afb      	ldrh	r3, [r7, #22]
 800d49c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d007      	beq.n	800d4b4 <put_lfn+0x6c>
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	1c5a      	adds	r2, r3, #1
 800d4a8:	61fa      	str	r2, [r7, #28]
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	881b      	ldrh	r3, [r3, #0]
 800d4b2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d4b4:	4a17      	ldr	r2, [pc, #92]	@ (800d514 <put_lfn+0xcc>)
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	8afa      	ldrh	r2, [r7, #22]
 800d4c4:	4611      	mov	r1, r2
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7fe ff95 	bl	800c3f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d4cc:	8afb      	ldrh	r3, [r7, #22]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d102      	bne.n	800d4d8 <put_lfn+0x90>
 800d4d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d4d6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	2b0c      	cmp	r3, #12
 800d4e2:	d9da      	bls.n	800d49a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d4e4:	8afb      	ldrh	r3, [r7, #22]
 800d4e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d006      	beq.n	800d4fc <put_lfn+0xb4>
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	005b      	lsls	r3, r3, #1
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d103      	bne.n	800d504 <put_lfn+0xbc>
 800d4fc:	79fb      	ldrb	r3, [r7, #7]
 800d4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d502:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	79fa      	ldrb	r2, [r7, #7]
 800d508:	701a      	strb	r2, [r3, #0]
}
 800d50a:	bf00      	nop
 800d50c:	3720      	adds	r7, #32
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	0800fab8 	.word	0x0800fab8

0800d518 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b08c      	sub	sp, #48	@ 0x30
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
 800d524:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d526:	220b      	movs	r2, #11
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7fe ffaa 	bl	800c484 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2b05      	cmp	r3, #5
 800d534:	d929      	bls.n	800d58a <gen_numname+0x72>
		sr = seq;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d53a:	e020      	b.n	800d57e <gen_numname+0x66>
			wc = *lfn++;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	1c9a      	adds	r2, r3, #2
 800d540:	607a      	str	r2, [r7, #4]
 800d542:	881b      	ldrh	r3, [r3, #0]
 800d544:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d546:	2300      	movs	r3, #0
 800d548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d54a:	e015      	b.n	800d578 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	005a      	lsls	r2, r3, #1
 800d550:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d552:	f003 0301 	and.w	r3, r3, #1
 800d556:	4413      	add	r3, r2
 800d558:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d55a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d55c:	085b      	lsrs	r3, r3, #1
 800d55e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d566:	2b00      	cmp	r3, #0
 800d568:	d003      	beq.n	800d572 <gen_numname+0x5a>
 800d56a:	69fa      	ldr	r2, [r7, #28]
 800d56c:	4b30      	ldr	r3, [pc, #192]	@ (800d630 <gen_numname+0x118>)
 800d56e:	4053      	eors	r3, r2
 800d570:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d574:	3301      	adds	r3, #1
 800d576:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57a:	2b0f      	cmp	r3, #15
 800d57c:	d9e6      	bls.n	800d54c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	881b      	ldrh	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1da      	bne.n	800d53c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d58a:	2307      	movs	r3, #7
 800d58c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	b2db      	uxtb	r3, r3
 800d592:	f003 030f 	and.w	r3, r3, #15
 800d596:	b2db      	uxtb	r3, r3
 800d598:	3330      	adds	r3, #48	@ 0x30
 800d59a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d59e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5a2:	2b39      	cmp	r3, #57	@ 0x39
 800d5a4:	d904      	bls.n	800d5b0 <gen_numname+0x98>
 800d5a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5aa:	3307      	adds	r3, #7
 800d5ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b2:	1e5a      	subs	r2, r3, #1
 800d5b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d5b6:	3330      	adds	r3, #48	@ 0x30
 800d5b8:	443b      	add	r3, r7
 800d5ba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d5be:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	091b      	lsrs	r3, r3, #4
 800d5c6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1df      	bne.n	800d58e <gen_numname+0x76>
	ns[i] = '~';
 800d5ce:	f107 0214 	add.w	r2, r7, #20
 800d5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d4:	4413      	add	r3, r2
 800d5d6:	227e      	movs	r2, #126	@ 0x7e
 800d5d8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d5da:	2300      	movs	r3, #0
 800d5dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5de:	e002      	b.n	800d5e6 <gen_numname+0xce>
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d205      	bcs.n	800d5fa <gen_numname+0xe2>
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f2:	4413      	add	r3, r2
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	2b20      	cmp	r3, #32
 800d5f8:	d1f2      	bne.n	800d5e0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fc:	2b07      	cmp	r3, #7
 800d5fe:	d807      	bhi.n	800d610 <gen_numname+0xf8>
 800d600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d602:	1c5a      	adds	r2, r3, #1
 800d604:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d606:	3330      	adds	r3, #48	@ 0x30
 800d608:	443b      	add	r3, r7
 800d60a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d60e:	e000      	b.n	800d612 <gen_numname+0xfa>
 800d610:	2120      	movs	r1, #32
 800d612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	627a      	str	r2, [r7, #36]	@ 0x24
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	4413      	add	r3, r2
 800d61c:	460a      	mov	r2, r1
 800d61e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d622:	2b07      	cmp	r3, #7
 800d624:	d9e9      	bls.n	800d5fa <gen_numname+0xe2>
}
 800d626:	bf00      	nop
 800d628:	bf00      	nop
 800d62a:	3730      	adds	r7, #48	@ 0x30
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	00011021 	.word	0x00011021

0800d634 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d63c:	2300      	movs	r3, #0
 800d63e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d640:	230b      	movs	r3, #11
 800d642:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d644:	7bfb      	ldrb	r3, [r7, #15]
 800d646:	b2da      	uxtb	r2, r3
 800d648:	0852      	lsrs	r2, r2, #1
 800d64a:	01db      	lsls	r3, r3, #7
 800d64c:	4313      	orrs	r3, r2
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	1c59      	adds	r1, r3, #1
 800d654:	6079      	str	r1, [r7, #4]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	4413      	add	r3, r2
 800d65a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	3b01      	subs	r3, #1
 800d660:	60bb      	str	r3, [r7, #8]
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1ed      	bne.n	800d644 <sum_sfn+0x10>
	return sum;
 800d668:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr

0800d676 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b086      	sub	sp, #24
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d684:	2100      	movs	r1, #0
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7ff fca7 	bl	800cfda <dir_sdi>
 800d68c:	4603      	mov	r3, r0
 800d68e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d690:	7dfb      	ldrb	r3, [r7, #23]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d001      	beq.n	800d69a <dir_find+0x24>
 800d696:	7dfb      	ldrb	r3, [r7, #23]
 800d698:	e0a9      	b.n	800d7ee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d69a:	23ff      	movs	r3, #255	@ 0xff
 800d69c:	753b      	strb	r3, [r7, #20]
 800d69e:	7d3b      	ldrb	r3, [r7, #20]
 800d6a0:	757b      	strb	r3, [r7, #21]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	69db      	ldr	r3, [r3, #28]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6938      	ldr	r0, [r7, #16]
 800d6b2:	f7ff f915 	bl	800c8e0 <move_window>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f040 8090 	bne.w	800d7e2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d6ca:	7dbb      	ldrb	r3, [r7, #22]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d102      	bne.n	800d6d6 <dir_find+0x60>
 800d6d0:	2304      	movs	r3, #4
 800d6d2:	75fb      	strb	r3, [r7, #23]
 800d6d4:	e08a      	b.n	800d7ec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a1b      	ldr	r3, [r3, #32]
 800d6da:	330b      	adds	r3, #11
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d6e2:	73fb      	strb	r3, [r7, #15]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7bfa      	ldrb	r2, [r7, #15]
 800d6e8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d6ea:	7dbb      	ldrb	r3, [r7, #22]
 800d6ec:	2be5      	cmp	r3, #229	@ 0xe5
 800d6ee:	d007      	beq.n	800d700 <dir_find+0x8a>
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	f003 0308 	and.w	r3, r3, #8
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d009      	beq.n	800d70e <dir_find+0x98>
 800d6fa:	7bfb      	ldrb	r3, [r7, #15]
 800d6fc:	2b0f      	cmp	r3, #15
 800d6fe:	d006      	beq.n	800d70e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d700:	23ff      	movs	r3, #255	@ 0xff
 800d702:	757b      	strb	r3, [r7, #21]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f04f 32ff 	mov.w	r2, #4294967295
 800d70a:	631a      	str	r2, [r3, #48]	@ 0x30
 800d70c:	e05e      	b.n	800d7cc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
 800d710:	2b0f      	cmp	r3, #15
 800d712:	d136      	bne.n	800d782 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d71a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d154      	bne.n	800d7cc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d722:	7dbb      	ldrb	r3, [r7, #22]
 800d724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00d      	beq.n	800d748 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a1b      	ldr	r3, [r3, #32]
 800d730:	7b5b      	ldrb	r3, [r3, #13]
 800d732:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d734:	7dbb      	ldrb	r3, [r7, #22]
 800d736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d73a:	75bb      	strb	r3, [r7, #22]
 800d73c:	7dbb      	ldrb	r3, [r7, #22]
 800d73e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	695a      	ldr	r2, [r3, #20]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d748:	7dba      	ldrb	r2, [r7, #22]
 800d74a:	7d7b      	ldrb	r3, [r7, #21]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d115      	bne.n	800d77c <dir_find+0x106>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6a1b      	ldr	r3, [r3, #32]
 800d754:	330d      	adds	r3, #13
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	7d3a      	ldrb	r2, [r7, #20]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d10e      	bne.n	800d77c <dir_find+0x106>
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	68da      	ldr	r2, [r3, #12]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a1b      	ldr	r3, [r3, #32]
 800d766:	4619      	mov	r1, r3
 800d768:	4610      	mov	r0, r2
 800d76a:	f7ff fdfd 	bl	800d368 <cmp_lfn>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d003      	beq.n	800d77c <dir_find+0x106>
 800d774:	7d7b      	ldrb	r3, [r7, #21]
 800d776:	3b01      	subs	r3, #1
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	e000      	b.n	800d77e <dir_find+0x108>
 800d77c:	23ff      	movs	r3, #255	@ 0xff
 800d77e:	757b      	strb	r3, [r7, #21]
 800d780:	e024      	b.n	800d7cc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d782:	7d7b      	ldrb	r3, [r7, #21]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d109      	bne.n	800d79c <dir_find+0x126>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a1b      	ldr	r3, [r3, #32]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7ff ff51 	bl	800d634 <sum_sfn>
 800d792:	4603      	mov	r3, r0
 800d794:	461a      	mov	r2, r3
 800d796:	7d3b      	ldrb	r3, [r7, #20]
 800d798:	4293      	cmp	r3, r2
 800d79a:	d024      	beq.n	800d7e6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d7a2:	f003 0301 	and.w	r3, r3, #1
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10a      	bne.n	800d7c0 <dir_find+0x14a>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6a18      	ldr	r0, [r3, #32]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3324      	adds	r3, #36	@ 0x24
 800d7b2:	220b      	movs	r2, #11
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	f7fe fea1 	bl	800c4fc <mem_cmp>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d014      	beq.n	800d7ea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d7c0:	23ff      	movs	r3, #255	@ 0xff
 800d7c2:	757b      	strb	r3, [r7, #21]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f7ff fc7e 	bl	800d0d0 <dir_next>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d7d8:	7dfb      	ldrb	r3, [r7, #23]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f43f af65 	beq.w	800d6aa <dir_find+0x34>
 800d7e0:	e004      	b.n	800d7ec <dir_find+0x176>
		if (res != FR_OK) break;
 800d7e2:	bf00      	nop
 800d7e4:	e002      	b.n	800d7ec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d7e6:	bf00      	nop
 800d7e8:	e000      	b.n	800d7ec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d7ea:	bf00      	nop

	return res;
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3718      	adds	r7, #24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
	...

0800d7f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08c      	sub	sp, #48	@ 0x30
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d80c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <dir_register+0x20>
 800d814:	2306      	movs	r3, #6
 800d816:	e0e0      	b.n	800d9da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d818:	2300      	movs	r3, #0
 800d81a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d81c:	e002      	b.n	800d824 <dir_register+0x2c>
 800d81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d820:	3301      	adds	r3, #1
 800d822:	627b      	str	r3, [r7, #36]	@ 0x24
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	68da      	ldr	r2, [r3, #12]
 800d828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	4413      	add	r3, r2
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d1f4      	bne.n	800d81e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d83a:	f107 030c 	add.w	r3, r7, #12
 800d83e:	220c      	movs	r2, #12
 800d840:	4618      	mov	r0, r3
 800d842:	f7fe fe1f 	bl	800c484 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d846:	7dfb      	ldrb	r3, [r7, #23]
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d032      	beq.n	800d8b6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2240      	movs	r2, #64	@ 0x40
 800d854:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800d858:	2301      	movs	r3, #1
 800d85a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d85c:	e016      	b.n	800d88c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	68da      	ldr	r2, [r3, #12]
 800d868:	f107 010c 	add.w	r1, r7, #12
 800d86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86e:	f7ff fe53 	bl	800d518 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7ff feff 	bl	800d676 <dir_find>
 800d878:	4603      	mov	r3, r0
 800d87a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800d87e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d882:	2b00      	cmp	r3, #0
 800d884:	d106      	bne.n	800d894 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d888:	3301      	adds	r3, #1
 800d88a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d88e:	2b63      	cmp	r3, #99	@ 0x63
 800d890:	d9e5      	bls.n	800d85e <dir_register+0x66>
 800d892:	e000      	b.n	800d896 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d894:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d898:	2b64      	cmp	r3, #100	@ 0x64
 800d89a:	d101      	bne.n	800d8a0 <dir_register+0xa8>
 800d89c:	2307      	movs	r3, #7
 800d89e:	e09c      	b.n	800d9da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d8a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8a4:	2b04      	cmp	r3, #4
 800d8a6:	d002      	beq.n	800d8ae <dir_register+0xb6>
 800d8a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8ac:	e095      	b.n	800d9da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d8ae:	7dfa      	ldrb	r2, [r7, #23]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d8b6:	7dfb      	ldrb	r3, [r7, #23]
 800d8b8:	f003 0302 	and.w	r3, r3, #2
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d007      	beq.n	800d8d0 <dir_register+0xd8>
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c2:	330c      	adds	r3, #12
 800d8c4:	4a47      	ldr	r2, [pc, #284]	@ (800d9e4 <dir_register+0x1ec>)
 800d8c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ca:	089b      	lsrs	r3, r3, #2
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	e000      	b.n	800d8d2 <dir_register+0xda>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d8d4:	6a39      	ldr	r1, [r7, #32]
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7ff fcbf 	bl	800d25a <dir_alloc>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d8e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d148      	bne.n	800d97c <dir_register+0x184>
 800d8ea:	6a3b      	ldr	r3, [r7, #32]
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	623b      	str	r3, [r7, #32]
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d042      	beq.n	800d97c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	695a      	ldr	r2, [r3, #20]
 800d8fa:	6a3b      	ldr	r3, [r7, #32]
 800d8fc:	015b      	lsls	r3, r3, #5
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	4619      	mov	r1, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff fb69 	bl	800cfda <dir_sdi>
 800d908:	4603      	mov	r3, r0
 800d90a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d90e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d912:	2b00      	cmp	r3, #0
 800d914:	d132      	bne.n	800d97c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	3324      	adds	r3, #36	@ 0x24
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7ff fe8a 	bl	800d634 <sum_sfn>
 800d920:	4603      	mov	r3, r0
 800d922:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	69db      	ldr	r3, [r3, #28]
 800d928:	4619      	mov	r1, r3
 800d92a:	69f8      	ldr	r0, [r7, #28]
 800d92c:	f7fe ffd8 	bl	800c8e0 <move_window>
 800d930:	4603      	mov	r3, r0
 800d932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d11d      	bne.n	800d97a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	68d8      	ldr	r0, [r3, #12]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a19      	ldr	r1, [r3, #32]
 800d946:	6a3b      	ldr	r3, [r7, #32]
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	7efb      	ldrb	r3, [r7, #27]
 800d94c:	f7ff fd7c 	bl	800d448 <put_lfn>
				fs->wflag = 1;
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	2201      	movs	r2, #1
 800d954:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d956:	2100      	movs	r1, #0
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff fbb9 	bl	800d0d0 <dir_next>
 800d95e:	4603      	mov	r3, r0
 800d960:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d964:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d107      	bne.n	800d97c <dir_register+0x184>
 800d96c:	6a3b      	ldr	r3, [r7, #32]
 800d96e:	3b01      	subs	r3, #1
 800d970:	623b      	str	r3, [r7, #32]
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1d5      	bne.n	800d924 <dir_register+0x12c>
 800d978:	e000      	b.n	800d97c <dir_register+0x184>
				if (res != FR_OK) break;
 800d97a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d97c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d980:	2b00      	cmp	r3, #0
 800d982:	d128      	bne.n	800d9d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	69db      	ldr	r3, [r3, #28]
 800d988:	4619      	mov	r1, r3
 800d98a:	69f8      	ldr	r0, [r7, #28]
 800d98c:	f7fe ffa8 	bl	800c8e0 <move_window>
 800d990:	4603      	mov	r3, r0
 800d992:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d11b      	bne.n	800d9d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	2220      	movs	r2, #32
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fd8d 	bl	800c4c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6a18      	ldr	r0, [r3, #32]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	3324      	adds	r3, #36	@ 0x24
 800d9b4:	220b      	movs	r2, #11
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	f7fe fd64 	bl	800c484 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	330c      	adds	r3, #12
 800d9c8:	f002 0218 	and.w	r2, r2, #24
 800d9cc:	b2d2      	uxtb	r2, r2
 800d9ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d9d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3730      	adds	r7, #48	@ 0x30
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	4ec4ec4f 	.word	0x4ec4ec4f

0800d9e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08a      	sub	sp, #40	@ 0x28
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	613b      	str	r3, [r7, #16]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	60fb      	str	r3, [r7, #12]
 800da00:	2300      	movs	r3, #0
 800da02:	617b      	str	r3, [r7, #20]
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	61ba      	str	r2, [r7, #24]
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	4413      	add	r3, r2
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800da16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da18:	2b1f      	cmp	r3, #31
 800da1a:	d940      	bls.n	800da9e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800da1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da1e:	2b2f      	cmp	r3, #47	@ 0x2f
 800da20:	d006      	beq.n	800da30 <create_name+0x48>
 800da22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da24:	2b5c      	cmp	r3, #92	@ 0x5c
 800da26:	d110      	bne.n	800da4a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800da28:	e002      	b.n	800da30 <create_name+0x48>
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	3301      	adds	r3, #1
 800da2e:	61bb      	str	r3, [r7, #24]
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	4413      	add	r3, r2
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	2b2f      	cmp	r3, #47	@ 0x2f
 800da3a:	d0f6      	beq.n	800da2a <create_name+0x42>
 800da3c:	693a      	ldr	r2, [r7, #16]
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	4413      	add	r3, r2
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	2b5c      	cmp	r3, #92	@ 0x5c
 800da46:	d0f0      	beq.n	800da2a <create_name+0x42>
			break;
 800da48:	e02a      	b.n	800daa0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2bfe      	cmp	r3, #254	@ 0xfe
 800da4e:	d901      	bls.n	800da54 <create_name+0x6c>
 800da50:	2306      	movs	r3, #6
 800da52:	e17d      	b.n	800dd50 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800da54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da56:	b2db      	uxtb	r3, r3
 800da58:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800da5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da5c:	2101      	movs	r1, #1
 800da5e:	4618      	mov	r0, r3
 800da60:	f001 f950 	bl	800ed04 <ff_convert>
 800da64:	4603      	mov	r3, r0
 800da66:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800da68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <create_name+0x8a>
 800da6e:	2306      	movs	r3, #6
 800da70:	e16e      	b.n	800dd50 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800da72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da74:	2b7f      	cmp	r3, #127	@ 0x7f
 800da76:	d809      	bhi.n	800da8c <create_name+0xa4>
 800da78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da7a:	4619      	mov	r1, r3
 800da7c:	488d      	ldr	r0, [pc, #564]	@ (800dcb4 <create_name+0x2cc>)
 800da7e:	f7fe fd64 	bl	800c54a <chk_chr>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d001      	beq.n	800da8c <create_name+0xa4>
 800da88:	2306      	movs	r3, #6
 800da8a:	e161      	b.n	800dd50 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	1c5a      	adds	r2, r3, #1
 800da90:	617a      	str	r2, [r7, #20]
 800da92:	005b      	lsls	r3, r3, #1
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	4413      	add	r3, r2
 800da98:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800da9a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800da9c:	e7b4      	b.n	800da08 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800da9e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800daa0:	693a      	ldr	r2, [r7, #16]
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	441a      	add	r2, r3
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800daaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800daac:	2b1f      	cmp	r3, #31
 800daae:	d801      	bhi.n	800dab4 <create_name+0xcc>
 800dab0:	2304      	movs	r3, #4
 800dab2:	e000      	b.n	800dab6 <create_name+0xce>
 800dab4:	2300      	movs	r3, #0
 800dab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800daba:	e011      	b.n	800dae0 <create_name+0xf8>
		w = lfn[di - 1];
 800dabc:	697a      	ldr	r2, [r7, #20]
 800dabe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dac2:	4413      	add	r3, r2
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	4413      	add	r3, r2
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800dace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dad0:	2b20      	cmp	r3, #32
 800dad2:	d002      	beq.n	800dada <create_name+0xf2>
 800dad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dad6:	2b2e      	cmp	r3, #46	@ 0x2e
 800dad8:	d106      	bne.n	800dae8 <create_name+0x100>
		di--;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	3b01      	subs	r3, #1
 800dade:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1ea      	bne.n	800dabc <create_name+0xd4>
 800dae6:	e000      	b.n	800daea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dae8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	005b      	lsls	r3, r3, #1
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	4413      	add	r3, r2
 800daf2:	2200      	movs	r2, #0
 800daf4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <create_name+0x118>
 800dafc:	2306      	movs	r3, #6
 800dafe:	e127      	b.n	800dd50 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3324      	adds	r3, #36	@ 0x24
 800db04:	220b      	movs	r2, #11
 800db06:	2120      	movs	r1, #32
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe fcdc 	bl	800c4c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800db0e:	2300      	movs	r3, #0
 800db10:	61bb      	str	r3, [r7, #24]
 800db12:	e002      	b.n	800db1a <create_name+0x132>
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	3301      	adds	r3, #1
 800db18:	61bb      	str	r3, [r7, #24]
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	005b      	lsls	r3, r3, #1
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4413      	add	r3, r2
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	2b20      	cmp	r3, #32
 800db26:	d0f5      	beq.n	800db14 <create_name+0x12c>
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	4413      	add	r3, r2
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	2b2e      	cmp	r3, #46	@ 0x2e
 800db34:	d0ee      	beq.n	800db14 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d009      	beq.n	800db50 <create_name+0x168>
 800db3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db40:	f043 0303 	orr.w	r3, r3, #3
 800db44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800db48:	e002      	b.n	800db50 <create_name+0x168>
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	3b01      	subs	r3, #1
 800db4e:	617b      	str	r3, [r7, #20]
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d009      	beq.n	800db6a <create_name+0x182>
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800db5c:	4413      	add	r3, r2
 800db5e:	005b      	lsls	r3, r3, #1
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	4413      	add	r3, r2
 800db64:	881b      	ldrh	r3, [r3, #0]
 800db66:	2b2e      	cmp	r3, #46	@ 0x2e
 800db68:	d1ef      	bne.n	800db4a <create_name+0x162>

	i = b = 0; ni = 8;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800db70:	2300      	movs	r3, #0
 800db72:	623b      	str	r3, [r7, #32]
 800db74:	2308      	movs	r3, #8
 800db76:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	61ba      	str	r2, [r7, #24]
 800db7e:	005b      	lsls	r3, r3, #1
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	4413      	add	r3, r2
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800db88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f000 8090 	beq.w	800dcb0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800db90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db92:	2b20      	cmp	r3, #32
 800db94:	d006      	beq.n	800dba4 <create_name+0x1bc>
 800db96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db98:	2b2e      	cmp	r3, #46	@ 0x2e
 800db9a:	d10a      	bne.n	800dbb2 <create_name+0x1ca>
 800db9c:	69ba      	ldr	r2, [r7, #24]
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d006      	beq.n	800dbb2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dba8:	f043 0303 	orr.w	r3, r3, #3
 800dbac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dbb0:	e07d      	b.n	800dcae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dbb2:	6a3a      	ldr	r2, [r7, #32]
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d203      	bcs.n	800dbc2 <create_name+0x1da>
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d123      	bne.n	800dc0a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dbc2:	69fb      	ldr	r3, [r7, #28]
 800dbc4:	2b0b      	cmp	r3, #11
 800dbc6:	d106      	bne.n	800dbd6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbcc:	f043 0303 	orr.w	r3, r3, #3
 800dbd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dbd4:	e075      	b.n	800dcc2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dbd6:	69ba      	ldr	r2, [r7, #24]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d005      	beq.n	800dbea <create_name+0x202>
 800dbde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbe2:	f043 0303 	orr.w	r3, r3, #3
 800dbe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800dbea:	69ba      	ldr	r2, [r7, #24]
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d866      	bhi.n	800dcc0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	61bb      	str	r3, [r7, #24]
 800dbf6:	2308      	movs	r3, #8
 800dbf8:	623b      	str	r3, [r7, #32]
 800dbfa:	230b      	movs	r3, #11
 800dbfc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dbfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dc08:	e051      	b.n	800dcae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dc0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc0c:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc0e:	d914      	bls.n	800dc3a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dc10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc12:	2100      	movs	r1, #0
 800dc14:	4618      	mov	r0, r3
 800dc16:	f001 f875 	bl	800ed04 <ff_convert>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dc1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d004      	beq.n	800dc2e <create_name+0x246>
 800dc24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc26:	3b80      	subs	r3, #128	@ 0x80
 800dc28:	4a23      	ldr	r2, [pc, #140]	@ (800dcb8 <create_name+0x2d0>)
 800dc2a:	5cd3      	ldrb	r3, [r2, r3]
 800dc2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dc2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc32:	f043 0302 	orr.w	r3, r3, #2
 800dc36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dc3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d007      	beq.n	800dc50 <create_name+0x268>
 800dc40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc42:	4619      	mov	r1, r3
 800dc44:	481d      	ldr	r0, [pc, #116]	@ (800dcbc <create_name+0x2d4>)
 800dc46:	f7fe fc80 	bl	800c54a <chk_chr>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d008      	beq.n	800dc62 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dc50:	235f      	movs	r3, #95	@ 0x5f
 800dc52:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800dc54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc58:	f043 0303 	orr.w	r3, r3, #3
 800dc5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc60:	e01b      	b.n	800dc9a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dc62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc64:	2b40      	cmp	r3, #64	@ 0x40
 800dc66:	d909      	bls.n	800dc7c <create_name+0x294>
 800dc68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc6a:	2b5a      	cmp	r3, #90	@ 0x5a
 800dc6c:	d806      	bhi.n	800dc7c <create_name+0x294>
					b |= 2;
 800dc6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc72:	f043 0302 	orr.w	r3, r3, #2
 800dc76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dc7a:	e00e      	b.n	800dc9a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dc7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc7e:	2b60      	cmp	r3, #96	@ 0x60
 800dc80:	d90b      	bls.n	800dc9a <create_name+0x2b2>
 800dc82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc84:	2b7a      	cmp	r3, #122	@ 0x7a
 800dc86:	d808      	bhi.n	800dc9a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dc88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc8c:	f043 0301 	orr.w	r3, r3, #1
 800dc90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dc94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dc96:	3b20      	subs	r3, #32
 800dc98:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dc9a:	6a3b      	ldr	r3, [r7, #32]
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	623a      	str	r2, [r7, #32]
 800dca0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dca2:	b2d1      	uxtb	r1, r2
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	4413      	add	r3, r2
 800dca8:	460a      	mov	r2, r1
 800dcaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dcae:	e763      	b.n	800db78 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dcb0:	bf00      	nop
 800dcb2:	e006      	b.n	800dcc2 <create_name+0x2da>
 800dcb4:	0800f9d8 	.word	0x0800f9d8
 800dcb8:	0800fa38 	.word	0x0800fa38
 800dcbc:	0800f9e4 	.word	0x0800f9e4
			if (si > di) break;			/* No extension */
 800dcc0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dcc8:	2be5      	cmp	r3, #229	@ 0xe5
 800dcca:	d103      	bne.n	800dcd4 <create_name+0x2ec>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2205      	movs	r2, #5
 800dcd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	2b08      	cmp	r3, #8
 800dcd8:	d104      	bne.n	800dce4 <create_name+0x2fc>
 800dcda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dce4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dce8:	f003 030c 	and.w	r3, r3, #12
 800dcec:	2b0c      	cmp	r3, #12
 800dcee:	d005      	beq.n	800dcfc <create_name+0x314>
 800dcf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dcf4:	f003 0303 	and.w	r3, r3, #3
 800dcf8:	2b03      	cmp	r3, #3
 800dcfa:	d105      	bne.n	800dd08 <create_name+0x320>
 800dcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd00:	f043 0302 	orr.w	r3, r3, #2
 800dd04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dd08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd0c:	f003 0302 	and.w	r3, r3, #2
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d117      	bne.n	800dd44 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dd14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dd18:	f003 0303 	and.w	r3, r3, #3
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d105      	bne.n	800dd2c <create_name+0x344>
 800dd20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd24:	f043 0310 	orr.w	r3, r3, #16
 800dd28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dd2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dd30:	f003 030c 	and.w	r3, r3, #12
 800dd34:	2b04      	cmp	r3, #4
 800dd36:	d105      	bne.n	800dd44 <create_name+0x35c>
 800dd38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd3c:	f043 0308 	orr.w	r3, r3, #8
 800dd40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dd4a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800dd4e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3728      	adds	r7, #40	@ 0x28
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd6c:	e002      	b.n	800dd74 <follow_path+0x1c>
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	3301      	adds	r3, #1
 800dd72:	603b      	str	r3, [r7, #0]
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd7a:	d0f8      	beq.n	800dd6e <follow_path+0x16>
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b5c      	cmp	r3, #92	@ 0x5c
 800dd82:	d0f4      	beq.n	800dd6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	2200      	movs	r2, #0
 800dd88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	2b1f      	cmp	r3, #31
 800dd90:	d80a      	bhi.n	800dda8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2280      	movs	r2, #128	@ 0x80
 800dd96:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff f91c 	bl	800cfda <dir_sdi>
 800dda2:	4603      	mov	r3, r0
 800dda4:	75fb      	strb	r3, [r7, #23]
 800dda6:	e043      	b.n	800de30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dda8:	463b      	mov	r3, r7
 800ddaa:	4619      	mov	r1, r3
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff fe1b 	bl	800d9e8 <create_name>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d134      	bne.n	800de26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fc5a 	bl	800d676 <dir_find>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ddcc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00a      	beq.n	800ddea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
 800ddd6:	2b04      	cmp	r3, #4
 800ddd8:	d127      	bne.n	800de2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ddda:	7afb      	ldrb	r3, [r7, #11]
 800dddc:	f003 0304 	and.w	r3, r3, #4
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d122      	bne.n	800de2a <follow_path+0xd2>
 800dde4:	2305      	movs	r3, #5
 800dde6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dde8:	e01f      	b.n	800de2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ddea:	7afb      	ldrb	r3, [r7, #11]
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d11c      	bne.n	800de2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	799b      	ldrb	r3, [r3, #6]
 800ddf8:	f003 0310 	and.w	r3, r3, #16
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d102      	bne.n	800de06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800de00:	2305      	movs	r3, #5
 800de02:	75fb      	strb	r3, [r7, #23]
 800de04:	e014      	b.n	800de30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	695b      	ldr	r3, [r3, #20]
 800de10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de14:	4413      	add	r3, r2
 800de16:	4619      	mov	r1, r3
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f7ff fa65 	bl	800d2e8 <ld_clust>
 800de1e:	4602      	mov	r2, r0
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de24:	e7c0      	b.n	800dda8 <follow_path+0x50>
			if (res != FR_OK) break;
 800de26:	bf00      	nop
 800de28:	e002      	b.n	800de30 <follow_path+0xd8>
				break;
 800de2a:	bf00      	nop
 800de2c:	e000      	b.n	800de30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de2e:	bf00      	nop
			}
		}
	}

	return res;
 800de30:	7dfb      	ldrb	r3, [r7, #23]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b087      	sub	sp, #28
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de42:	f04f 33ff 	mov.w	r3, #4294967295
 800de46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d031      	beq.n	800deb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	e002      	b.n	800de5e <get_ldnumber+0x24>
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	3301      	adds	r3, #1
 800de5c:	617b      	str	r3, [r7, #20]
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2b1f      	cmp	r3, #31
 800de64:	d903      	bls.n	800de6e <get_ldnumber+0x34>
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	2b3a      	cmp	r3, #58	@ 0x3a
 800de6c:	d1f4      	bne.n	800de58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	2b3a      	cmp	r3, #58	@ 0x3a
 800de74:	d11c      	bne.n	800deb0 <get_ldnumber+0x76>
			tp = *path;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	1c5a      	adds	r2, r3, #1
 800de80:	60fa      	str	r2, [r7, #12]
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	3b30      	subs	r3, #48	@ 0x30
 800de86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	2b09      	cmp	r3, #9
 800de8c:	d80e      	bhi.n	800deac <get_ldnumber+0x72>
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	429a      	cmp	r2, r3
 800de94:	d10a      	bne.n	800deac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d107      	bne.n	800deac <get_ldnumber+0x72>
					vol = (int)i;
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	3301      	adds	r3, #1
 800dea4:	617b      	str	r3, [r7, #20]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	697a      	ldr	r2, [r7, #20]
 800deaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	e002      	b.n	800deb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800deb0:	2300      	movs	r3, #0
 800deb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800deb4:	693b      	ldr	r3, [r7, #16]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	371c      	adds	r7, #28
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
	...

0800dec4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	70da      	strb	r2, [r3, #3]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f04f 32ff 	mov.w	r2, #4294967295
 800deda:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7fe fcfe 	bl	800c8e0 <move_window>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d001      	beq.n	800deee <check_fs+0x2a>
 800deea:	2304      	movs	r3, #4
 800deec:	e038      	b.n	800df60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	3334      	adds	r3, #52	@ 0x34
 800def2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800def6:	4618      	mov	r0, r3
 800def8:	f7fe fa42 	bl	800c380 <ld_word>
 800defc:	4603      	mov	r3, r0
 800defe:	461a      	mov	r2, r3
 800df00:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800df04:	429a      	cmp	r2, r3
 800df06:	d001      	beq.n	800df0c <check_fs+0x48>
 800df08:	2303      	movs	r3, #3
 800df0a:	e029      	b.n	800df60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800df12:	2be9      	cmp	r3, #233	@ 0xe9
 800df14:	d009      	beq.n	800df2a <check_fs+0x66>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800df1c:	2beb      	cmp	r3, #235	@ 0xeb
 800df1e:	d11e      	bne.n	800df5e <check_fs+0x9a>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800df26:	2b90      	cmp	r3, #144	@ 0x90
 800df28:	d119      	bne.n	800df5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3334      	adds	r3, #52	@ 0x34
 800df2e:	3336      	adds	r3, #54	@ 0x36
 800df30:	4618      	mov	r0, r3
 800df32:	f7fe fa3d 	bl	800c3b0 <ld_dword>
 800df36:	4603      	mov	r3, r0
 800df38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800df3c:	4a0a      	ldr	r2, [pc, #40]	@ (800df68 <check_fs+0xa4>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d101      	bne.n	800df46 <check_fs+0x82>
 800df42:	2300      	movs	r3, #0
 800df44:	e00c      	b.n	800df60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	3334      	adds	r3, #52	@ 0x34
 800df4a:	3352      	adds	r3, #82	@ 0x52
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fa2f 	bl	800c3b0 <ld_dword>
 800df52:	4603      	mov	r3, r0
 800df54:	4a05      	ldr	r2, [pc, #20]	@ (800df6c <check_fs+0xa8>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d101      	bne.n	800df5e <check_fs+0x9a>
 800df5a:	2300      	movs	r3, #0
 800df5c:	e000      	b.n	800df60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df5e:	2302      	movs	r3, #2
}
 800df60:	4618      	mov	r0, r3
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	00544146 	.word	0x00544146
 800df6c:	33544146 	.word	0x33544146

0800df70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b096      	sub	sp, #88	@ 0x58
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	4613      	mov	r3, r2
 800df7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f7ff ff58 	bl	800de3a <get_ldnumber>
 800df8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df8e:	2b00      	cmp	r3, #0
 800df90:	da01      	bge.n	800df96 <find_volume+0x26>
 800df92:	230b      	movs	r3, #11
 800df94:	e230      	b.n	800e3f8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df96:	4aa1      	ldr	r2, [pc, #644]	@ (800e21c <find_volume+0x2ac>)
 800df98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df9e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <find_volume+0x3a>
 800dfa6:	230c      	movs	r3, #12
 800dfa8:	e226      	b.n	800e3f8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dfb0:	79fb      	ldrb	r3, [r7, #7]
 800dfb2:	f023 0301 	bic.w	r3, r3, #1
 800dfb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d01a      	beq.n	800dff6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc2:	785b      	ldrb	r3, [r3, #1]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fe f93b 	bl	800c240 <disk_status>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dfd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dfd4:	f003 0301 	and.w	r3, r3, #1
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d10c      	bne.n	800dff6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dfdc:	79fb      	ldrb	r3, [r7, #7]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d007      	beq.n	800dff2 <find_volume+0x82>
 800dfe2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dfe6:	f003 0304 	and.w	r3, r3, #4
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dfee:	230a      	movs	r3, #10
 800dff0:	e202      	b.n	800e3f8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800dff2:	2300      	movs	r3, #0
 800dff4:	e200      	b.n	800e3f8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff8:	2200      	movs	r2, #0
 800dffa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e002:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e006:	785b      	ldrb	r3, [r3, #1]
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fe f933 	bl	800c274 <disk_initialize>
 800e00e:	4603      	mov	r3, r0
 800e010:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e014:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e018:	f003 0301 	and.w	r3, r3, #1
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e020:	2303      	movs	r3, #3
 800e022:	e1e9      	b.n	800e3f8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e024:	79fb      	ldrb	r3, [r7, #7]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d007      	beq.n	800e03a <find_volume+0xca>
 800e02a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e02e:	f003 0304 	and.w	r3, r3, #4
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e036:	230a      	movs	r3, #10
 800e038:	e1de      	b.n	800e3f8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e03e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e040:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e042:	f7ff ff3f 	bl	800dec4 <check_fs>
 800e046:	4603      	mov	r3, r0
 800e048:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e04c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e050:	2b02      	cmp	r3, #2
 800e052:	d149      	bne.n	800e0e8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e054:	2300      	movs	r3, #0
 800e056:	643b      	str	r3, [r7, #64]	@ 0x40
 800e058:	e01e      	b.n	800e098 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e05c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e062:	011b      	lsls	r3, r3, #4
 800e064:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e068:	4413      	add	r3, r2
 800e06a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06e:	3304      	adds	r3, #4
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d006      	beq.n	800e084 <find_volume+0x114>
 800e076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e078:	3308      	adds	r3, #8
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe f998 	bl	800c3b0 <ld_dword>
 800e080:	4602      	mov	r2, r0
 800e082:	e000      	b.n	800e086 <find_volume+0x116>
 800e084:	2200      	movs	r2, #0
 800e086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	3358      	adds	r3, #88	@ 0x58
 800e08c:	443b      	add	r3, r7
 800e08e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e094:	3301      	adds	r3, #1
 800e096:	643b      	str	r3, [r7, #64]	@ 0x40
 800e098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e09a:	2b03      	cmp	r3, #3
 800e09c:	d9dd      	bls.n	800e05a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e09e:	2300      	movs	r3, #0
 800e0a0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <find_volume+0x13e>
 800e0a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	3358      	adds	r3, #88	@ 0x58
 800e0b4:	443b      	add	r3, r7
 800e0b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e0ba:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e0bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d005      	beq.n	800e0ce <find_volume+0x15e>
 800e0c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e0c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e0c6:	f7ff fefd 	bl	800dec4 <check_fs>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	e000      	b.n	800e0d0 <find_volume+0x160>
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d905      	bls.n	800e0e8 <find_volume+0x178>
 800e0dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0de:	3301      	adds	r3, #1
 800e0e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0e4:	2b03      	cmp	r3, #3
 800e0e6:	d9e2      	bls.n	800e0ae <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e0e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0ec:	2b04      	cmp	r3, #4
 800e0ee:	d101      	bne.n	800e0f4 <find_volume+0x184>
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	e181      	b.n	800e3f8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d901      	bls.n	800e100 <find_volume+0x190>
 800e0fc:	230d      	movs	r3, #13
 800e0fe:	e17b      	b.n	800e3f8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e102:	3334      	adds	r3, #52	@ 0x34
 800e104:	330b      	adds	r3, #11
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe f93a 	bl	800c380 <ld_word>
 800e10c:	4603      	mov	r3, r0
 800e10e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e112:	d001      	beq.n	800e118 <find_volume+0x1a8>
 800e114:	230d      	movs	r3, #13
 800e116:	e16f      	b.n	800e3f8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e11a:	3334      	adds	r3, #52	@ 0x34
 800e11c:	3316      	adds	r3, #22
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fe f92e 	bl	800c380 <ld_word>
 800e124:	4603      	mov	r3, r0
 800e126:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d106      	bne.n	800e13c <find_volume+0x1cc>
 800e12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e130:	3334      	adds	r3, #52	@ 0x34
 800e132:	3324      	adds	r3, #36	@ 0x24
 800e134:	4618      	mov	r0, r3
 800e136:	f7fe f93b 	bl	800c3b0 <ld_dword>
 800e13a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e13e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e140:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e144:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14e:	789b      	ldrb	r3, [r3, #2]
 800e150:	2b01      	cmp	r3, #1
 800e152:	d005      	beq.n	800e160 <find_volume+0x1f0>
 800e154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e156:	789b      	ldrb	r3, [r3, #2]
 800e158:	2b02      	cmp	r3, #2
 800e15a:	d001      	beq.n	800e160 <find_volume+0x1f0>
 800e15c:	230d      	movs	r3, #13
 800e15e:	e14b      	b.n	800e3f8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e162:	789b      	ldrb	r3, [r3, #2]
 800e164:	461a      	mov	r2, r3
 800e166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e168:	fb02 f303 	mul.w	r3, r2, r3
 800e16c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e174:	461a      	mov	r2, r3
 800e176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e178:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17c:	895b      	ldrh	r3, [r3, #10]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d008      	beq.n	800e194 <find_volume+0x224>
 800e182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e184:	895b      	ldrh	r3, [r3, #10]
 800e186:	461a      	mov	r2, r3
 800e188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e18a:	895b      	ldrh	r3, [r3, #10]
 800e18c:	3b01      	subs	r3, #1
 800e18e:	4013      	ands	r3, r2
 800e190:	2b00      	cmp	r3, #0
 800e192:	d001      	beq.n	800e198 <find_volume+0x228>
 800e194:	230d      	movs	r3, #13
 800e196:	e12f      	b.n	800e3f8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19a:	3334      	adds	r3, #52	@ 0x34
 800e19c:	3311      	adds	r3, #17
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fe f8ee 	bl	800c380 <ld_word>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ae:	891b      	ldrh	r3, [r3, #8]
 800e1b0:	f003 030f 	and.w	r3, r3, #15
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <find_volume+0x24e>
 800e1ba:	230d      	movs	r3, #13
 800e1bc:	e11c      	b.n	800e3f8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c0:	3334      	adds	r3, #52	@ 0x34
 800e1c2:	3313      	adds	r3, #19
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fe f8db 	bl	800c380 <ld_word>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d106      	bne.n	800e1e2 <find_volume+0x272>
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d6:	3334      	adds	r3, #52	@ 0x34
 800e1d8:	3320      	adds	r3, #32
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fe f8e8 	bl	800c3b0 <ld_dword>
 800e1e0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e4:	3334      	adds	r3, #52	@ 0x34
 800e1e6:	330e      	adds	r3, #14
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe f8c9 	bl	800c380 <ld_word>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d101      	bne.n	800e1fc <find_volume+0x28c>
 800e1f8:	230d      	movs	r3, #13
 800e1fa:	e0fd      	b.n	800e3f8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e1fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e1fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e200:	4413      	add	r3, r2
 800e202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e204:	8912      	ldrh	r2, [r2, #8]
 800e206:	0912      	lsrs	r2, r2, #4
 800e208:	b292      	uxth	r2, r2
 800e20a:	4413      	add	r3, r2
 800e20c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e20e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e212:	429a      	cmp	r2, r3
 800e214:	d204      	bcs.n	800e220 <find_volume+0x2b0>
 800e216:	230d      	movs	r3, #13
 800e218:	e0ee      	b.n	800e3f8 <find_volume+0x488>
 800e21a:	bf00      	nop
 800e21c:	24000380 	.word	0x24000380
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e220:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e228:	8952      	ldrh	r2, [r2, #10]
 800e22a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e22e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e232:	2b00      	cmp	r3, #0
 800e234:	d101      	bne.n	800e23a <find_volume+0x2ca>
 800e236:	230d      	movs	r3, #13
 800e238:	e0de      	b.n	800e3f8 <find_volume+0x488>
		fmt = FS_FAT32;
 800e23a:	2303      	movs	r3, #3
 800e23c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e242:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e246:	4293      	cmp	r3, r2
 800e248:	d802      	bhi.n	800e250 <find_volume+0x2e0>
 800e24a:	2302      	movs	r3, #2
 800e24c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e252:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e256:	4293      	cmp	r3, r2
 800e258:	d802      	bhi.n	800e260 <find_volume+0x2f0>
 800e25a:	2301      	movs	r3, #1
 800e25c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e262:	1c9a      	adds	r2, r3, #2
 800e264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e266:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e26c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e26e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e272:	441a      	add	r2, r3
 800e274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e276:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e278:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e27c:	441a      	add	r2, r3
 800e27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e280:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800e282:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e286:	2b03      	cmp	r3, #3
 800e288:	d11e      	bne.n	800e2c8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e28c:	3334      	adds	r3, #52	@ 0x34
 800e28e:	332a      	adds	r3, #42	@ 0x2a
 800e290:	4618      	mov	r0, r3
 800e292:	f7fe f875 	bl	800c380 <ld_word>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <find_volume+0x330>
 800e29c:	230d      	movs	r3, #13
 800e29e:	e0ab      	b.n	800e3f8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a2:	891b      	ldrh	r3, [r3, #8]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d001      	beq.n	800e2ac <find_volume+0x33c>
 800e2a8:	230d      	movs	r3, #13
 800e2aa:	e0a5      	b.n	800e3f8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ae:	3334      	adds	r3, #52	@ 0x34
 800e2b0:	332c      	adds	r3, #44	@ 0x2c
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe f87c 	bl	800c3b0 <ld_dword>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2bc:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c0:	699b      	ldr	r3, [r3, #24]
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2c6:	e01f      	b.n	800e308 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ca:	891b      	ldrh	r3, [r3, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d101      	bne.n	800e2d4 <find_volume+0x364>
 800e2d0:	230d      	movs	r3, #13
 800e2d2:	e091      	b.n	800e3f8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2da:	441a      	add	r2, r3
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2de:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	d103      	bne.n	800e2f0 <find_volume+0x380>
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ea:	699b      	ldr	r3, [r3, #24]
 800e2ec:	005b      	lsls	r3, r3, #1
 800e2ee:	e00a      	b.n	800e306 <find_volume+0x396>
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f2:	699a      	ldr	r2, [r3, #24]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	005b      	lsls	r3, r3, #1
 800e2f8:	4413      	add	r3, r2
 800e2fa:	085a      	lsrs	r2, r3, #1
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fe:	699b      	ldr	r3, [r3, #24]
 800e300:	f003 0301 	and.w	r3, r3, #1
 800e304:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e306:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30a:	69da      	ldr	r2, [r3, #28]
 800e30c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e30e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e312:	0a5b      	lsrs	r3, r3, #9
 800e314:	429a      	cmp	r2, r3
 800e316:	d201      	bcs.n	800e31c <find_volume+0x3ac>
 800e318:	230d      	movs	r3, #13
 800e31a:	e06d      	b.n	800e3f8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31e:	f04f 32ff 	mov.w	r2, #4294967295
 800e322:	615a      	str	r2, [r3, #20]
 800e324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e326:	695a      	ldr	r2, [r3, #20]
 800e328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32e:	2280      	movs	r2, #128	@ 0x80
 800e330:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e332:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e336:	2b03      	cmp	r3, #3
 800e338:	d149      	bne.n	800e3ce <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33c:	3334      	adds	r3, #52	@ 0x34
 800e33e:	3330      	adds	r3, #48	@ 0x30
 800e340:	4618      	mov	r0, r3
 800e342:	f7fe f81d 	bl	800c380 <ld_word>
 800e346:	4603      	mov	r3, r0
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d140      	bne.n	800e3ce <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e34c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e34e:	3301      	adds	r3, #1
 800e350:	4619      	mov	r1, r3
 800e352:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e354:	f7fe fac4 	bl	800c8e0 <move_window>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d137      	bne.n	800e3ce <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e360:	2200      	movs	r2, #0
 800e362:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e366:	3334      	adds	r3, #52	@ 0x34
 800e368:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fe f807 	bl	800c380 <ld_word>
 800e372:	4603      	mov	r3, r0
 800e374:	461a      	mov	r2, r3
 800e376:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d127      	bne.n	800e3ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e380:	3334      	adds	r3, #52	@ 0x34
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe f814 	bl	800c3b0 <ld_dword>
 800e388:	4603      	mov	r3, r0
 800e38a:	4a1d      	ldr	r2, [pc, #116]	@ (800e400 <find_volume+0x490>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d11e      	bne.n	800e3ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e392:	3334      	adds	r3, #52	@ 0x34
 800e394:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fe f809 	bl	800c3b0 <ld_dword>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	4a18      	ldr	r2, [pc, #96]	@ (800e404 <find_volume+0x494>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d113      	bne.n	800e3ce <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a8:	3334      	adds	r3, #52	@ 0x34
 800e3aa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fd fffe 	bl	800c3b0 <ld_dword>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3bc:	3334      	adds	r3, #52	@ 0x34
 800e3be:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fd fff4 	bl	800c3b0 <ld_dword>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3cc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e3d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e408 <find_volume+0x498>)
 800e3d8:	881b      	ldrh	r3, [r3, #0]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	b29a      	uxth	r2, r3
 800e3de:	4b0a      	ldr	r3, [pc, #40]	@ (800e408 <find_volume+0x498>)
 800e3e0:	801a      	strh	r2, [r3, #0]
 800e3e2:	4b09      	ldr	r3, [pc, #36]	@ (800e408 <find_volume+0x498>)
 800e3e4:	881a      	ldrh	r2, [r3, #0]
 800e3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ec:	4a07      	ldr	r2, [pc, #28]	@ (800e40c <find_volume+0x49c>)
 800e3ee:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e3f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e3f2:	f7fe fa0d 	bl	800c810 <clear_lock>
#endif
	return FR_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3758      	adds	r7, #88	@ 0x58
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	41615252 	.word	0x41615252
 800e404:	61417272 	.word	0x61417272
 800e408:	24000384 	.word	0x24000384
 800e40c:	240003a8 	.word	0x240003a8

0800e410 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e41a:	2309      	movs	r3, #9
 800e41c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d01c      	beq.n	800e45e <validate+0x4e>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d018      	beq.n	800e45e <validate+0x4e>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d013      	beq.n	800e45e <validate+0x4e>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	889a      	ldrh	r2, [r3, #4]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	88db      	ldrh	r3, [r3, #6]
 800e440:	429a      	cmp	r2, r3
 800e442:	d10c      	bne.n	800e45e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	785b      	ldrb	r3, [r3, #1]
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fd fef8 	bl	800c240 <disk_status>
 800e450:	4603      	mov	r3, r0
 800e452:	f003 0301 	and.w	r3, r3, #1
 800e456:	2b00      	cmp	r3, #0
 800e458:	d101      	bne.n	800e45e <validate+0x4e>
			res = FR_OK;
 800e45a:	2300      	movs	r3, #0
 800e45c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d102      	bne.n	800e46a <validate+0x5a>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	e000      	b.n	800e46c <validate+0x5c>
 800e46a:	2300      	movs	r3, #0
 800e46c:	683a      	ldr	r2, [r7, #0]
 800e46e:	6013      	str	r3, [r2, #0]
	return res;
 800e470:	7bfb      	ldrb	r3, [r7, #15]
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
	...

0800e47c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	4613      	mov	r3, r2
 800e488:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e48e:	f107 0310 	add.w	r3, r7, #16
 800e492:	4618      	mov	r0, r3
 800e494:	f7ff fcd1 	bl	800de3a <get_ldnumber>
 800e498:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	da01      	bge.n	800e4a4 <f_mount+0x28>
 800e4a0:	230b      	movs	r3, #11
 800e4a2:	e02b      	b.n	800e4fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e4a4:	4a17      	ldr	r2, [pc, #92]	@ (800e504 <f_mount+0x88>)
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d005      	beq.n	800e4c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e4b4:	69b8      	ldr	r0, [r7, #24]
 800e4b6:	f7fe f9ab 	bl	800c810 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	490d      	ldr	r1, [pc, #52]	@ (800e504 <f_mount+0x88>)
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d002      	beq.n	800e4e2 <f_mount+0x66>
 800e4dc:	79fb      	ldrb	r3, [r7, #7]
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d001      	beq.n	800e4e6 <f_mount+0x6a>
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e00a      	b.n	800e4fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e4e6:	f107 010c 	add.w	r1, r7, #12
 800e4ea:	f107 0308 	add.w	r3, r7, #8
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7ff fd3d 	bl	800df70 <find_volume>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3720      	adds	r7, #32
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	24000380 	.word	0x24000380

0800e508 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b09a      	sub	sp, #104	@ 0x68
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	4613      	mov	r3, r2
 800e514:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d101      	bne.n	800e520 <f_open+0x18>
 800e51c:	2309      	movs	r3, #9
 800e51e:	e1a9      	b.n	800e874 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e520:	79fb      	ldrb	r3, [r7, #7]
 800e522:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e526:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e528:	79fa      	ldrb	r2, [r7, #7]
 800e52a:	f107 0114 	add.w	r1, r7, #20
 800e52e:	f107 0308 	add.w	r3, r7, #8
 800e532:	4618      	mov	r0, r3
 800e534:	f7ff fd1c 	bl	800df70 <find_volume>
 800e538:	4603      	mov	r3, r0
 800e53a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800e53e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e542:	2b00      	cmp	r3, #0
 800e544:	f040 818d 	bne.w	800e862 <f_open+0x35a>
		dj.obj.fs = fs;
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e54c:	68ba      	ldr	r2, [r7, #8]
 800e54e:	f107 0318 	add.w	r3, r7, #24
 800e552:	4611      	mov	r1, r2
 800e554:	4618      	mov	r0, r3
 800e556:	f7ff fbff 	bl	800dd58 <follow_path>
 800e55a:	4603      	mov	r3, r0
 800e55c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e560:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e564:	2b00      	cmp	r3, #0
 800e566:	d118      	bne.n	800e59a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e568:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e56c:	b25b      	sxtb	r3, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	da03      	bge.n	800e57a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e572:	2306      	movs	r3, #6
 800e574:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e578:	e00f      	b.n	800e59a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e57a:	79fb      	ldrb	r3, [r7, #7]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	bf8c      	ite	hi
 800e580:	2301      	movhi	r3, #1
 800e582:	2300      	movls	r3, #0
 800e584:	b2db      	uxtb	r3, r3
 800e586:	461a      	mov	r2, r3
 800e588:	f107 0318 	add.w	r3, r7, #24
 800e58c:	4611      	mov	r1, r2
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fd fff6 	bl	800c580 <chk_lock>
 800e594:	4603      	mov	r3, r0
 800e596:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e59a:	79fb      	ldrb	r3, [r7, #7]
 800e59c:	f003 031c 	and.w	r3, r3, #28
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d07f      	beq.n	800e6a4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e5a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d017      	beq.n	800e5dc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e5ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e5b0:	2b04      	cmp	r3, #4
 800e5b2:	d10e      	bne.n	800e5d2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e5b4:	f7fe f840 	bl	800c638 <enq_lock>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d006      	beq.n	800e5cc <f_open+0xc4>
 800e5be:	f107 0318 	add.w	r3, r7, #24
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7ff f918 	bl	800d7f8 <dir_register>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	e000      	b.n	800e5ce <f_open+0xc6>
 800e5cc:	2312      	movs	r3, #18
 800e5ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e5d2:	79fb      	ldrb	r3, [r7, #7]
 800e5d4:	f043 0308 	orr.w	r3, r3, #8
 800e5d8:	71fb      	strb	r3, [r7, #7]
 800e5da:	e010      	b.n	800e5fe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5dc:	7fbb      	ldrb	r3, [r7, #30]
 800e5de:	f003 0311 	and.w	r3, r3, #17
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d003      	beq.n	800e5ee <f_open+0xe6>
					res = FR_DENIED;
 800e5e6:	2307      	movs	r3, #7
 800e5e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e5ec:	e007      	b.n	800e5fe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e5ee:	79fb      	ldrb	r3, [r7, #7]
 800e5f0:	f003 0304 	and.w	r3, r3, #4
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <f_open+0xf6>
 800e5f8:	2308      	movs	r3, #8
 800e5fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e5fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e602:	2b00      	cmp	r3, #0
 800e604:	d168      	bne.n	800e6d8 <f_open+0x1d0>
 800e606:	79fb      	ldrb	r3, [r7, #7]
 800e608:	f003 0308 	and.w	r3, r3, #8
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d063      	beq.n	800e6d8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e610:	f7fd f85a 	bl	800b6c8 <get_fattime>
 800e614:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e618:	330e      	adds	r3, #14
 800e61a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fd ff05 	bl	800c42c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e624:	3316      	adds	r3, #22
 800e626:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fd feff 	bl	800c42c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e630:	330b      	adds	r3, #11
 800e632:	2220      	movs	r2, #32
 800e634:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e63a:	4611      	mov	r1, r2
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fe fe53 	bl	800d2e8 <ld_clust>
 800e642:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e648:	2200      	movs	r2, #0
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fe fe6b 	bl	800d326 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e652:	331c      	adds	r3, #28
 800e654:	2100      	movs	r1, #0
 800e656:	4618      	mov	r0, r3
 800e658:	f7fd fee8 	bl	800c42c <st_dword>
					fs->wflag = 1;
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	2201      	movs	r2, #1
 800e660:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e664:	2b00      	cmp	r3, #0
 800e666:	d037      	beq.n	800e6d8 <f_open+0x1d0>
						dw = fs->winsect;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e66c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e66e:	f107 0318 	add.w	r3, r7, #24
 800e672:	2200      	movs	r2, #0
 800e674:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e676:	4618      	mov	r0, r3
 800e678:	f7fe fb7e 	bl	800cd78 <remove_chain>
 800e67c:	4603      	mov	r3, r0
 800e67e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800e682:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e686:	2b00      	cmp	r3, #0
 800e688:	d126      	bne.n	800e6d8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fe f926 	bl	800c8e0 <move_window>
 800e694:	4603      	mov	r3, r0
 800e696:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e69e:	3a01      	subs	r2, #1
 800e6a0:	611a      	str	r2, [r3, #16]
 800e6a2:	e019      	b.n	800e6d8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e6a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d115      	bne.n	800e6d8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e6ac:	7fbb      	ldrb	r3, [r7, #30]
 800e6ae:	f003 0310 	and.w	r3, r3, #16
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d003      	beq.n	800e6be <f_open+0x1b6>
					res = FR_NO_FILE;
 800e6b6:	2304      	movs	r3, #4
 800e6b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e6bc:	e00c      	b.n	800e6d8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e6be:	79fb      	ldrb	r3, [r7, #7]
 800e6c0:	f003 0302 	and.w	r3, r3, #2
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d007      	beq.n	800e6d8 <f_open+0x1d0>
 800e6c8:	7fbb      	ldrb	r3, [r7, #30]
 800e6ca:	f003 0301 	and.w	r3, r3, #1
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d002      	beq.n	800e6d8 <f_open+0x1d0>
						res = FR_DENIED;
 800e6d2:	2307      	movs	r3, #7
 800e6d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e6d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d126      	bne.n	800e72e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e6e0:	79fb      	ldrb	r3, [r7, #7]
 800e6e2:	f003 0308 	and.w	r3, r3, #8
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d003      	beq.n	800e6f2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e6ea:	79fb      	ldrb	r3, [r7, #7]
 800e6ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e6fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e700:	79fb      	ldrb	r3, [r7, #7]
 800e702:	2b01      	cmp	r3, #1
 800e704:	bf8c      	ite	hi
 800e706:	2301      	movhi	r3, #1
 800e708:	2300      	movls	r3, #0
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	461a      	mov	r2, r3
 800e70e:	f107 0318 	add.w	r3, r7, #24
 800e712:	4611      	mov	r1, r2
 800e714:	4618      	mov	r0, r3
 800e716:	f7fd ffb1 	bl	800c67c <inc_lock>
 800e71a:	4602      	mov	r2, r0
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d102      	bne.n	800e72e <f_open+0x226>
 800e728:	2302      	movs	r3, #2
 800e72a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e72e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e732:	2b00      	cmp	r3, #0
 800e734:	f040 8095 	bne.w	800e862 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e73c:	4611      	mov	r1, r2
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fe fdd2 	bl	800d2e8 <ld_clust>
 800e744:	4602      	mov	r2, r0
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74c:	331c      	adds	r3, #28
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fd fe2e 	bl	800c3b0 <ld_dword>
 800e754:	4602      	mov	r2, r0
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2200      	movs	r2, #0
 800e75e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e760:	697a      	ldr	r2, [r7, #20]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	88da      	ldrh	r2, [r3, #6]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	79fa      	ldrb	r2, [r7, #7]
 800e772:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	3330      	adds	r3, #48	@ 0x30
 800e78a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e78e:	2100      	movs	r1, #0
 800e790:	4618      	mov	r0, r3
 800e792:	f7fd fe98 	bl	800c4c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	f003 0320 	and.w	r3, r3, #32
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d060      	beq.n	800e862 <f_open+0x35a>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d05c      	beq.n	800e862 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	68da      	ldr	r2, [r3, #12]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	895b      	ldrh	r3, [r3, #10]
 800e7b4:	025b      	lsls	r3, r3, #9
 800e7b6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7c4:	e016      	b.n	800e7f4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe f943 	bl	800ca56 <get_fat>
 800e7d0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e7d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d802      	bhi.n	800e7de <f_open+0x2d6>
 800e7d8:	2302      	movs	r3, #2
 800e7da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e7de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e4:	d102      	bne.n	800e7ec <f_open+0x2e4>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e7ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d103      	bne.n	800e804 <f_open+0x2fc>
 800e7fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e7fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e800:	429a      	cmp	r2, r3
 800e802:	d8e0      	bhi.n	800e7c6 <f_open+0x2be>
				}
				fp->clust = clst;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e808:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e80a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d127      	bne.n	800e862 <f_open+0x35a>
 800e812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d022      	beq.n	800e862 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e820:	4618      	mov	r0, r3
 800e822:	f7fe f8f9 	bl	800ca18 <clust2sect>
 800e826:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800e828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d103      	bne.n	800e836 <f_open+0x32e>
						res = FR_INT_ERR;
 800e82e:	2302      	movs	r3, #2
 800e830:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800e834:	e015      	b.n	800e862 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e838:	0a5a      	lsrs	r2, r3, #9
 800e83a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e83c:	441a      	add	r2, r3
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	7858      	ldrb	r0, [r3, #1]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6a1a      	ldr	r2, [r3, #32]
 800e850:	2301      	movs	r3, #1
 800e852:	f7fd fd37 	bl	800c2c4 <disk_read>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d002      	beq.n	800e862 <f_open+0x35a>
 800e85c:	2301      	movs	r3, #1
 800e85e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e862:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <f_open+0x368>
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e870:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e874:	4618      	mov	r0, r3
 800e876:	3768      	adds	r7, #104	@ 0x68
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08e      	sub	sp, #56	@ 0x38
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	2200      	movs	r2, #0
 800e892:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f107 0214 	add.w	r2, r7, #20
 800e89a:	4611      	mov	r1, r2
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7ff fdb7 	bl	800e410 <validate>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e8a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d107      	bne.n	800e8c0 <f_read+0x44>
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	7d5b      	ldrb	r3, [r3, #21]
 800e8b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e8b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <f_read+0x4a>
 800e8c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e8c4:	e115      	b.n	800eaf2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d101      	bne.n	800e8d6 <f_read+0x5a>
 800e8d2:	2307      	movs	r3, #7
 800e8d4:	e10d      	b.n	800eaf2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	68da      	ldr	r2, [r3, #12]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	699b      	ldr	r3, [r3, #24]
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	6a3b      	ldr	r3, [r7, #32]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	f240 80fe 	bls.w	800eae8 <f_read+0x26c>
 800e8ec:	6a3b      	ldr	r3, [r7, #32]
 800e8ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e8f0:	e0fa      	b.n	800eae8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f040 80c6 	bne.w	800ea8c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	0a5b      	lsrs	r3, r3, #9
 800e906:	697a      	ldr	r2, [r7, #20]
 800e908:	8952      	ldrh	r2, [r2, #10]
 800e90a:	3a01      	subs	r2, #1
 800e90c:	4013      	ands	r3, r2
 800e90e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d12f      	bne.n	800e976 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	699b      	ldr	r3, [r3, #24]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d103      	bne.n	800e926 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	633b      	str	r3, [r7, #48]	@ 0x30
 800e924:	e013      	b.n	800e94e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d007      	beq.n	800e93e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	699b      	ldr	r3, [r3, #24]
 800e932:	4619      	mov	r1, r3
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	f7fe fb1c 	bl	800cf72 <clmt_clust>
 800e93a:	6338      	str	r0, [r7, #48]	@ 0x30
 800e93c:	e007      	b.n	800e94e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	4619      	mov	r1, r3
 800e946:	4610      	mov	r0, r2
 800e948:	f7fe f885 	bl	800ca56 <get_fat>
 800e94c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e950:	2b01      	cmp	r3, #1
 800e952:	d804      	bhi.n	800e95e <f_read+0xe2>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2202      	movs	r2, #2
 800e958:	755a      	strb	r2, [r3, #21]
 800e95a:	2302      	movs	r3, #2
 800e95c:	e0c9      	b.n	800eaf2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e964:	d104      	bne.n	800e970 <f_read+0xf4>
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2201      	movs	r2, #1
 800e96a:	755a      	strb	r2, [r3, #21]
 800e96c:	2301      	movs	r3, #1
 800e96e:	e0c0      	b.n	800eaf2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e974:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e976:	697a      	ldr	r2, [r7, #20]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	69db      	ldr	r3, [r3, #28]
 800e97c:	4619      	mov	r1, r3
 800e97e:	4610      	mov	r0, r2
 800e980:	f7fe f84a 	bl	800ca18 <clust2sect>
 800e984:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d104      	bne.n	800e996 <f_read+0x11a>
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2202      	movs	r2, #2
 800e990:	755a      	strb	r2, [r3, #21]
 800e992:	2302      	movs	r3, #2
 800e994:	e0ad      	b.n	800eaf2 <f_read+0x276>
			sect += csect;
 800e996:	69ba      	ldr	r2, [r7, #24]
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	4413      	add	r3, r2
 800e99c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	0a5b      	lsrs	r3, r3, #9
 800e9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d039      	beq.n	800ea1e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e9aa:	69fa      	ldr	r2, [r7, #28]
 800e9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ae:	4413      	add	r3, r2
 800e9b0:	697a      	ldr	r2, [r7, #20]
 800e9b2:	8952      	ldrh	r2, [r2, #10]
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d905      	bls.n	800e9c4 <f_read+0x148>
					cc = fs->csize - csect;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	895b      	ldrh	r3, [r3, #10]
 800e9bc:	461a      	mov	r2, r3
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	1ad3      	subs	r3, r2, r3
 800e9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	7858      	ldrb	r0, [r3, #1]
 800e9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ca:	69ba      	ldr	r2, [r7, #24]
 800e9cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e9ce:	f7fd fc79 	bl	800c2c4 <disk_read>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d004      	beq.n	800e9e2 <f_read+0x166>
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	755a      	strb	r2, [r3, #21]
 800e9de:	2301      	movs	r3, #1
 800e9e0:	e087      	b.n	800eaf2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	7d1b      	ldrb	r3, [r3, #20]
 800e9e6:	b25b      	sxtb	r3, r3
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	da14      	bge.n	800ea16 <f_read+0x19a>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6a1a      	ldr	r2, [r3, #32]
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	1ad3      	subs	r3, r2, r3
 800e9f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d90d      	bls.n	800ea16 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	6a1a      	ldr	r2, [r3, #32]
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	025b      	lsls	r3, r3, #9
 800ea04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea06:	18d0      	adds	r0, r2, r3
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	3330      	adds	r3, #48	@ 0x30
 800ea0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea10:	4619      	mov	r1, r3
 800ea12:	f7fd fd37 	bl	800c484 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ea16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea18:	025b      	lsls	r3, r3, #9
 800ea1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ea1c:	e050      	b.n	800eac0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	6a1b      	ldr	r3, [r3, #32]
 800ea22:	69ba      	ldr	r2, [r7, #24]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d02e      	beq.n	800ea86 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	7d1b      	ldrb	r3, [r3, #20]
 800ea2c:	b25b      	sxtb	r3, r3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	da18      	bge.n	800ea64 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	7858      	ldrb	r0, [r3, #1]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6a1a      	ldr	r2, [r3, #32]
 800ea40:	2301      	movs	r3, #1
 800ea42:	f7fd fc5f 	bl	800c304 <disk_write>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d004      	beq.n	800ea56 <f_read+0x1da>
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2201      	movs	r2, #1
 800ea50:	755a      	strb	r2, [r3, #21]
 800ea52:	2301      	movs	r3, #1
 800ea54:	e04d      	b.n	800eaf2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	7d1b      	ldrb	r3, [r3, #20]
 800ea5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	7858      	ldrb	r0, [r3, #1]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea6e:	2301      	movs	r3, #1
 800ea70:	69ba      	ldr	r2, [r7, #24]
 800ea72:	f7fd fc27 	bl	800c2c4 <disk_read>
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d004      	beq.n	800ea86 <f_read+0x20a>
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	755a      	strb	r2, [r3, #21]
 800ea82:	2301      	movs	r3, #1
 800ea84:	e035      	b.n	800eaf2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	69ba      	ldr	r2, [r7, #24]
 800ea8a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	699b      	ldr	r3, [r3, #24]
 800ea90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea94:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ea98:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ea9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d901      	bls.n	800eaa6 <f_read+0x22a>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	699b      	ldr	r3, [r3, #24]
 800eab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eab4:	4413      	add	r3, r2
 800eab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eab8:	4619      	mov	r1, r3
 800eaba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eabc:	f7fd fce2 	bl	800c484 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eac4:	4413      	add	r3, r2
 800eac6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	699a      	ldr	r2, [r3, #24]
 800eacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eace:	441a      	add	r2, r3
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	619a      	str	r2, [r3, #24]
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eada:	441a      	add	r2, r3
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	601a      	str	r2, [r3, #0]
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f47f af01 	bne.w	800e8f2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3738      	adds	r7, #56	@ 0x38
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b086      	sub	sp, #24
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f107 0208 	add.w	r2, r7, #8
 800eb08:	4611      	mov	r1, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7ff fc80 	bl	800e410 <validate>
 800eb10:	4603      	mov	r3, r0
 800eb12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d168      	bne.n	800ebec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	7d1b      	ldrb	r3, [r3, #20]
 800eb1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d062      	beq.n	800ebec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	7d1b      	ldrb	r3, [r3, #20]
 800eb2a:	b25b      	sxtb	r3, r3
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	da15      	bge.n	800eb5c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	7858      	ldrb	r0, [r3, #1]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a1a      	ldr	r2, [r3, #32]
 800eb3e:	2301      	movs	r3, #1
 800eb40:	f7fd fbe0 	bl	800c304 <disk_write>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d001      	beq.n	800eb4e <f_sync+0x54>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e04f      	b.n	800ebee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	7d1b      	ldrb	r3, [r3, #20]
 800eb52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eb5c:	f7fc fdb4 	bl	800b6c8 <get_fattime>
 800eb60:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eb62:	68ba      	ldr	r2, [r7, #8]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb68:	4619      	mov	r1, r3
 800eb6a:	4610      	mov	r0, r2
 800eb6c:	f7fd feb8 	bl	800c8e0 <move_window>
 800eb70:	4603      	mov	r3, r0
 800eb72:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eb74:	7dfb      	ldrb	r3, [r7, #23]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d138      	bne.n	800ebec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb7e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	330b      	adds	r3, #11
 800eb84:	781a      	ldrb	r2, [r3, #0]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	330b      	adds	r3, #11
 800eb8a:	f042 0220 	orr.w	r2, r2, #32
 800eb8e:	b2d2      	uxtb	r2, r2
 800eb90:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6818      	ldr	r0, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	68f9      	ldr	r1, [r7, #12]
 800eb9e:	f7fe fbc2 	bl	800d326 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f103 021c 	add.w	r2, r3, #28
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	4619      	mov	r1, r3
 800ebae:	4610      	mov	r0, r2
 800ebb0:	f7fd fc3c 	bl	800c42c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	3316      	adds	r3, #22
 800ebb8:	6939      	ldr	r1, [r7, #16]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fd fc36 	bl	800c42c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	3312      	adds	r3, #18
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fd fc15 	bl	800c3f6 <st_word>
					fs->wflag = 1;
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fd feb1 	bl	800c93c <sync_fs>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7d1b      	ldrb	r3, [r3, #20]
 800ebe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ebec:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3718      	adds	r7, #24
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b084      	sub	sp, #16
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7ff ff7b 	bl	800eafa <f_sync>
 800ec04:	4603      	mov	r3, r0
 800ec06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec08:	7bfb      	ldrb	r3, [r7, #15]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d118      	bne.n	800ec40 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f107 0208 	add.w	r2, r7, #8
 800ec14:	4611      	mov	r1, r2
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7ff fbfa 	bl	800e410 <validate>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10c      	bne.n	800ec40 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fd fdb4 	bl	800c798 <dec_lock>
 800ec30:	4603      	mov	r3, r0
 800ec32:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d102      	bne.n	800ec40 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b087      	sub	sp, #28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	4613      	mov	r3, r2
 800ec58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec62:	4b1f      	ldr	r3, [pc, #124]	@ (800ece0 <FATFS_LinkDriverEx+0x94>)
 800ec64:	7a5b      	ldrb	r3, [r3, #9]
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d131      	bne.n	800ecd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec6c:	4b1c      	ldr	r3, [pc, #112]	@ (800ece0 <FATFS_LinkDriverEx+0x94>)
 800ec6e:	7a5b      	ldrb	r3, [r3, #9]
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	461a      	mov	r2, r3
 800ec74:	4b1a      	ldr	r3, [pc, #104]	@ (800ece0 <FATFS_LinkDriverEx+0x94>)
 800ec76:	2100      	movs	r1, #0
 800ec78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec7a:	4b19      	ldr	r3, [pc, #100]	@ (800ece0 <FATFS_LinkDriverEx+0x94>)
 800ec7c:	7a5b      	ldrb	r3, [r3, #9]
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	4a17      	ldr	r2, [pc, #92]	@ (800ece0 <FATFS_LinkDriverEx+0x94>)
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	4413      	add	r3, r2
 800ec86:	68fa      	ldr	r2, [r7, #12]
 800ec88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec8a:	4b15      	ldr	r3, [pc, #84]	@ (800ece0 <FATFS_LinkDriverEx+0x94>)
 800ec8c:	7a5b      	ldrb	r3, [r3, #9]
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	461a      	mov	r2, r3
 800ec92:	4b13      	ldr	r3, [pc, #76]	@ (800ece0 <FATFS_LinkDriverEx+0x94>)
 800ec94:	4413      	add	r3, r2
 800ec96:	79fa      	ldrb	r2, [r7, #7]
 800ec98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec9a:	4b11      	ldr	r3, [pc, #68]	@ (800ece0 <FATFS_LinkDriverEx+0x94>)
 800ec9c:	7a5b      	ldrb	r3, [r3, #9]
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	1c5a      	adds	r2, r3, #1
 800eca2:	b2d1      	uxtb	r1, r2
 800eca4:	4a0e      	ldr	r2, [pc, #56]	@ (800ece0 <FATFS_LinkDriverEx+0x94>)
 800eca6:	7251      	strb	r1, [r2, #9]
 800eca8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ecaa:	7dbb      	ldrb	r3, [r7, #22]
 800ecac:	3330      	adds	r3, #48	@ 0x30
 800ecae:	b2da      	uxtb	r2, r3
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	223a      	movs	r2, #58	@ 0x3a
 800ecba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	3302      	adds	r3, #2
 800ecc0:	222f      	movs	r2, #47	@ 0x2f
 800ecc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	3303      	adds	r3, #3
 800ecc8:	2200      	movs	r2, #0
 800ecca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eccc:	2300      	movs	r3, #0
 800ecce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ecd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	371c      	adds	r7, #28
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop
 800ece0:	240005a8 	.word	0x240005a8

0800ece4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ecee:	2200      	movs	r2, #0
 800ecf0:	6839      	ldr	r1, [r7, #0]
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f7ff ffaa 	bl	800ec4c <FATFS_LinkDriverEx>
 800ecf8:	4603      	mov	r3, r0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
	...

0800ed04 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	6039      	str	r1, [r7, #0]
 800ed0e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ed10:	88fb      	ldrh	r3, [r7, #6]
 800ed12:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed14:	d802      	bhi.n	800ed1c <ff_convert+0x18>
		c = chr;
 800ed16:	88fb      	ldrh	r3, [r7, #6]
 800ed18:	81fb      	strh	r3, [r7, #14]
 800ed1a:	e025      	b.n	800ed68 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00b      	beq.n	800ed3a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ed22:	88fb      	ldrh	r3, [r7, #6]
 800ed24:	2bff      	cmp	r3, #255	@ 0xff
 800ed26:	d805      	bhi.n	800ed34 <ff_convert+0x30>
 800ed28:	88fb      	ldrh	r3, [r7, #6]
 800ed2a:	3b80      	subs	r3, #128	@ 0x80
 800ed2c:	4a12      	ldr	r2, [pc, #72]	@ (800ed78 <ff_convert+0x74>)
 800ed2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed32:	e000      	b.n	800ed36 <ff_convert+0x32>
 800ed34:	2300      	movs	r3, #0
 800ed36:	81fb      	strh	r3, [r7, #14]
 800ed38:	e016      	b.n	800ed68 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	81fb      	strh	r3, [r7, #14]
 800ed3e:	e009      	b.n	800ed54 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ed40:	89fb      	ldrh	r3, [r7, #14]
 800ed42:	4a0d      	ldr	r2, [pc, #52]	@ (800ed78 <ff_convert+0x74>)
 800ed44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed48:	88fa      	ldrh	r2, [r7, #6]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d006      	beq.n	800ed5c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ed4e:	89fb      	ldrh	r3, [r7, #14]
 800ed50:	3301      	adds	r3, #1
 800ed52:	81fb      	strh	r3, [r7, #14]
 800ed54:	89fb      	ldrh	r3, [r7, #14]
 800ed56:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed58:	d9f2      	bls.n	800ed40 <ff_convert+0x3c>
 800ed5a:	e000      	b.n	800ed5e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ed5c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ed5e:	89fb      	ldrh	r3, [r7, #14]
 800ed60:	3380      	adds	r3, #128	@ 0x80
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ed68:	89fb      	ldrh	r3, [r7, #14]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3714      	adds	r7, #20
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	0800fac8 	.word	0x0800fac8

0800ed7c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b087      	sub	sp, #28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	4603      	mov	r3, r0
 800ed84:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ed86:	88fb      	ldrh	r3, [r7, #6]
 800ed88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed8c:	d201      	bcs.n	800ed92 <ff_wtoupper+0x16>
 800ed8e:	4b3e      	ldr	r3, [pc, #248]	@ (800ee88 <ff_wtoupper+0x10c>)
 800ed90:	e000      	b.n	800ed94 <ff_wtoupper+0x18>
 800ed92:	4b3e      	ldr	r3, [pc, #248]	@ (800ee8c <ff_wtoupper+0x110>)
 800ed94:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	1c9a      	adds	r2, r3, #2
 800ed9a:	617a      	str	r2, [r7, #20]
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eda0:	8a7b      	ldrh	r3, [r7, #18]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d068      	beq.n	800ee78 <ff_wtoupper+0xfc>
 800eda6:	88fa      	ldrh	r2, [r7, #6]
 800eda8:	8a7b      	ldrh	r3, [r7, #18]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d364      	bcc.n	800ee78 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	1c9a      	adds	r2, r3, #2
 800edb2:	617a      	str	r2, [r7, #20]
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	823b      	strh	r3, [r7, #16]
 800edb8:	8a3b      	ldrh	r3, [r7, #16]
 800edba:	0a1b      	lsrs	r3, r3, #8
 800edbc:	81fb      	strh	r3, [r7, #14]
 800edbe:	8a3b      	ldrh	r3, [r7, #16]
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800edc4:	88fa      	ldrh	r2, [r7, #6]
 800edc6:	8a79      	ldrh	r1, [r7, #18]
 800edc8:	8a3b      	ldrh	r3, [r7, #16]
 800edca:	440b      	add	r3, r1
 800edcc:	429a      	cmp	r2, r3
 800edce:	da49      	bge.n	800ee64 <ff_wtoupper+0xe8>
			switch (cmd) {
 800edd0:	89fb      	ldrh	r3, [r7, #14]
 800edd2:	2b08      	cmp	r3, #8
 800edd4:	d84f      	bhi.n	800ee76 <ff_wtoupper+0xfa>
 800edd6:	a201      	add	r2, pc, #4	@ (adr r2, 800eddc <ff_wtoupper+0x60>)
 800edd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eddc:	0800ee01 	.word	0x0800ee01
 800ede0:	0800ee13 	.word	0x0800ee13
 800ede4:	0800ee29 	.word	0x0800ee29
 800ede8:	0800ee31 	.word	0x0800ee31
 800edec:	0800ee39 	.word	0x0800ee39
 800edf0:	0800ee41 	.word	0x0800ee41
 800edf4:	0800ee49 	.word	0x0800ee49
 800edf8:	0800ee51 	.word	0x0800ee51
 800edfc:	0800ee59 	.word	0x0800ee59
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ee00:	88fa      	ldrh	r2, [r7, #6]
 800ee02:	8a7b      	ldrh	r3, [r7, #18]
 800ee04:	1ad3      	subs	r3, r2, r3
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	697a      	ldr	r2, [r7, #20]
 800ee0a:	4413      	add	r3, r2
 800ee0c:	881b      	ldrh	r3, [r3, #0]
 800ee0e:	80fb      	strh	r3, [r7, #6]
 800ee10:	e027      	b.n	800ee62 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ee12:	88fa      	ldrh	r2, [r7, #6]
 800ee14:	8a7b      	ldrh	r3, [r7, #18]
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	f003 0301 	and.w	r3, r3, #1
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	88fa      	ldrh	r2, [r7, #6]
 800ee22:	1ad3      	subs	r3, r2, r3
 800ee24:	80fb      	strh	r3, [r7, #6]
 800ee26:	e01c      	b.n	800ee62 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ee28:	88fb      	ldrh	r3, [r7, #6]
 800ee2a:	3b10      	subs	r3, #16
 800ee2c:	80fb      	strh	r3, [r7, #6]
 800ee2e:	e018      	b.n	800ee62 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ee30:	88fb      	ldrh	r3, [r7, #6]
 800ee32:	3b20      	subs	r3, #32
 800ee34:	80fb      	strh	r3, [r7, #6]
 800ee36:	e014      	b.n	800ee62 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ee38:	88fb      	ldrh	r3, [r7, #6]
 800ee3a:	3b30      	subs	r3, #48	@ 0x30
 800ee3c:	80fb      	strh	r3, [r7, #6]
 800ee3e:	e010      	b.n	800ee62 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ee40:	88fb      	ldrh	r3, [r7, #6]
 800ee42:	3b1a      	subs	r3, #26
 800ee44:	80fb      	strh	r3, [r7, #6]
 800ee46:	e00c      	b.n	800ee62 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ee48:	88fb      	ldrh	r3, [r7, #6]
 800ee4a:	3308      	adds	r3, #8
 800ee4c:	80fb      	strh	r3, [r7, #6]
 800ee4e:	e008      	b.n	800ee62 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ee50:	88fb      	ldrh	r3, [r7, #6]
 800ee52:	3b50      	subs	r3, #80	@ 0x50
 800ee54:	80fb      	strh	r3, [r7, #6]
 800ee56:	e004      	b.n	800ee62 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ee58:	88fb      	ldrh	r3, [r7, #6]
 800ee5a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800ee5e:	80fb      	strh	r3, [r7, #6]
 800ee60:	bf00      	nop
			}
			break;
 800ee62:	e008      	b.n	800ee76 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ee64:	89fb      	ldrh	r3, [r7, #14]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d195      	bne.n	800ed96 <ff_wtoupper+0x1a>
 800ee6a:	8a3b      	ldrh	r3, [r7, #16]
 800ee6c:	005b      	lsls	r3, r3, #1
 800ee6e:	697a      	ldr	r2, [r7, #20]
 800ee70:	4413      	add	r3, r2
 800ee72:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ee74:	e78f      	b.n	800ed96 <ff_wtoupper+0x1a>
			break;
 800ee76:	bf00      	nop
	}

	return chr;
 800ee78:	88fb      	ldrh	r3, [r7, #6]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	371c      	adds	r7, #28
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	0800fbc8 	.word	0x0800fbc8
 800ee8c:	0800fdbc 	.word	0x0800fdbc

0800ee90 <malloc>:
 800ee90:	4b02      	ldr	r3, [pc, #8]	@ (800ee9c <malloc+0xc>)
 800ee92:	4601      	mov	r1, r0
 800ee94:	6818      	ldr	r0, [r3, #0]
 800ee96:	f000 b82d 	b.w	800eef4 <_malloc_r>
 800ee9a:	bf00      	nop
 800ee9c:	2400002c 	.word	0x2400002c

0800eea0 <free>:
 800eea0:	4b02      	ldr	r3, [pc, #8]	@ (800eeac <free+0xc>)
 800eea2:	4601      	mov	r1, r0
 800eea4:	6818      	ldr	r0, [r3, #0]
 800eea6:	f000 b957 	b.w	800f158 <_free_r>
 800eeaa:	bf00      	nop
 800eeac:	2400002c 	.word	0x2400002c

0800eeb0 <sbrk_aligned>:
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	4e0f      	ldr	r6, [pc, #60]	@ (800eef0 <sbrk_aligned+0x40>)
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	6831      	ldr	r1, [r6, #0]
 800eeb8:	4605      	mov	r5, r0
 800eeba:	b911      	cbnz	r1, 800eec2 <sbrk_aligned+0x12>
 800eebc:	f000 f902 	bl	800f0c4 <_sbrk_r>
 800eec0:	6030      	str	r0, [r6, #0]
 800eec2:	4621      	mov	r1, r4
 800eec4:	4628      	mov	r0, r5
 800eec6:	f000 f8fd 	bl	800f0c4 <_sbrk_r>
 800eeca:	1c43      	adds	r3, r0, #1
 800eecc:	d103      	bne.n	800eed6 <sbrk_aligned+0x26>
 800eece:	f04f 34ff 	mov.w	r4, #4294967295
 800eed2:	4620      	mov	r0, r4
 800eed4:	bd70      	pop	{r4, r5, r6, pc}
 800eed6:	1cc4      	adds	r4, r0, #3
 800eed8:	f024 0403 	bic.w	r4, r4, #3
 800eedc:	42a0      	cmp	r0, r4
 800eede:	d0f8      	beq.n	800eed2 <sbrk_aligned+0x22>
 800eee0:	1a21      	subs	r1, r4, r0
 800eee2:	4628      	mov	r0, r5
 800eee4:	f000 f8ee 	bl	800f0c4 <_sbrk_r>
 800eee8:	3001      	adds	r0, #1
 800eeea:	d1f2      	bne.n	800eed2 <sbrk_aligned+0x22>
 800eeec:	e7ef      	b.n	800eece <sbrk_aligned+0x1e>
 800eeee:	bf00      	nop
 800eef0:	240005b4 	.word	0x240005b4

0800eef4 <_malloc_r>:
 800eef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef8:	1ccd      	adds	r5, r1, #3
 800eefa:	f025 0503 	bic.w	r5, r5, #3
 800eefe:	3508      	adds	r5, #8
 800ef00:	2d0c      	cmp	r5, #12
 800ef02:	bf38      	it	cc
 800ef04:	250c      	movcc	r5, #12
 800ef06:	2d00      	cmp	r5, #0
 800ef08:	4606      	mov	r6, r0
 800ef0a:	db01      	blt.n	800ef10 <_malloc_r+0x1c>
 800ef0c:	42a9      	cmp	r1, r5
 800ef0e:	d904      	bls.n	800ef1a <_malloc_r+0x26>
 800ef10:	230c      	movs	r3, #12
 800ef12:	6033      	str	r3, [r6, #0]
 800ef14:	2000      	movs	r0, #0
 800ef16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eff0 <_malloc_r+0xfc>
 800ef1e:	f000 f869 	bl	800eff4 <__malloc_lock>
 800ef22:	f8d8 3000 	ldr.w	r3, [r8]
 800ef26:	461c      	mov	r4, r3
 800ef28:	bb44      	cbnz	r4, 800ef7c <_malloc_r+0x88>
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	f7ff ffbf 	bl	800eeb0 <sbrk_aligned>
 800ef32:	1c43      	adds	r3, r0, #1
 800ef34:	4604      	mov	r4, r0
 800ef36:	d158      	bne.n	800efea <_malloc_r+0xf6>
 800ef38:	f8d8 4000 	ldr.w	r4, [r8]
 800ef3c:	4627      	mov	r7, r4
 800ef3e:	2f00      	cmp	r7, #0
 800ef40:	d143      	bne.n	800efca <_malloc_r+0xd6>
 800ef42:	2c00      	cmp	r4, #0
 800ef44:	d04b      	beq.n	800efde <_malloc_r+0xea>
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	4639      	mov	r1, r7
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	eb04 0903 	add.w	r9, r4, r3
 800ef50:	f000 f8b8 	bl	800f0c4 <_sbrk_r>
 800ef54:	4581      	cmp	r9, r0
 800ef56:	d142      	bne.n	800efde <_malloc_r+0xea>
 800ef58:	6821      	ldr	r1, [r4, #0]
 800ef5a:	1a6d      	subs	r5, r5, r1
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f7ff ffa6 	bl	800eeb0 <sbrk_aligned>
 800ef64:	3001      	adds	r0, #1
 800ef66:	d03a      	beq.n	800efde <_malloc_r+0xea>
 800ef68:	6823      	ldr	r3, [r4, #0]
 800ef6a:	442b      	add	r3, r5
 800ef6c:	6023      	str	r3, [r4, #0]
 800ef6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ef72:	685a      	ldr	r2, [r3, #4]
 800ef74:	bb62      	cbnz	r2, 800efd0 <_malloc_r+0xdc>
 800ef76:	f8c8 7000 	str.w	r7, [r8]
 800ef7a:	e00f      	b.n	800ef9c <_malloc_r+0xa8>
 800ef7c:	6822      	ldr	r2, [r4, #0]
 800ef7e:	1b52      	subs	r2, r2, r5
 800ef80:	d420      	bmi.n	800efc4 <_malloc_r+0xd0>
 800ef82:	2a0b      	cmp	r2, #11
 800ef84:	d917      	bls.n	800efb6 <_malloc_r+0xc2>
 800ef86:	1961      	adds	r1, r4, r5
 800ef88:	42a3      	cmp	r3, r4
 800ef8a:	6025      	str	r5, [r4, #0]
 800ef8c:	bf18      	it	ne
 800ef8e:	6059      	strne	r1, [r3, #4]
 800ef90:	6863      	ldr	r3, [r4, #4]
 800ef92:	bf08      	it	eq
 800ef94:	f8c8 1000 	streq.w	r1, [r8]
 800ef98:	5162      	str	r2, [r4, r5]
 800ef9a:	604b      	str	r3, [r1, #4]
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	f000 f82f 	bl	800f000 <__malloc_unlock>
 800efa2:	f104 000b 	add.w	r0, r4, #11
 800efa6:	1d23      	adds	r3, r4, #4
 800efa8:	f020 0007 	bic.w	r0, r0, #7
 800efac:	1ac2      	subs	r2, r0, r3
 800efae:	bf1c      	itt	ne
 800efb0:	1a1b      	subne	r3, r3, r0
 800efb2:	50a3      	strne	r3, [r4, r2]
 800efb4:	e7af      	b.n	800ef16 <_malloc_r+0x22>
 800efb6:	6862      	ldr	r2, [r4, #4]
 800efb8:	42a3      	cmp	r3, r4
 800efba:	bf0c      	ite	eq
 800efbc:	f8c8 2000 	streq.w	r2, [r8]
 800efc0:	605a      	strne	r2, [r3, #4]
 800efc2:	e7eb      	b.n	800ef9c <_malloc_r+0xa8>
 800efc4:	4623      	mov	r3, r4
 800efc6:	6864      	ldr	r4, [r4, #4]
 800efc8:	e7ae      	b.n	800ef28 <_malloc_r+0x34>
 800efca:	463c      	mov	r4, r7
 800efcc:	687f      	ldr	r7, [r7, #4]
 800efce:	e7b6      	b.n	800ef3e <_malloc_r+0x4a>
 800efd0:	461a      	mov	r2, r3
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	42a3      	cmp	r3, r4
 800efd6:	d1fb      	bne.n	800efd0 <_malloc_r+0xdc>
 800efd8:	2300      	movs	r3, #0
 800efda:	6053      	str	r3, [r2, #4]
 800efdc:	e7de      	b.n	800ef9c <_malloc_r+0xa8>
 800efde:	230c      	movs	r3, #12
 800efe0:	6033      	str	r3, [r6, #0]
 800efe2:	4630      	mov	r0, r6
 800efe4:	f000 f80c 	bl	800f000 <__malloc_unlock>
 800efe8:	e794      	b.n	800ef14 <_malloc_r+0x20>
 800efea:	6005      	str	r5, [r0, #0]
 800efec:	e7d6      	b.n	800ef9c <_malloc_r+0xa8>
 800efee:	bf00      	nop
 800eff0:	240005b8 	.word	0x240005b8

0800eff4 <__malloc_lock>:
 800eff4:	4801      	ldr	r0, [pc, #4]	@ (800effc <__malloc_lock+0x8>)
 800eff6:	f000 b89f 	b.w	800f138 <__retarget_lock_acquire_recursive>
 800effa:	bf00      	nop
 800effc:	240006f8 	.word	0x240006f8

0800f000 <__malloc_unlock>:
 800f000:	4801      	ldr	r0, [pc, #4]	@ (800f008 <__malloc_unlock+0x8>)
 800f002:	f000 b89a 	b.w	800f13a <__retarget_lock_release_recursive>
 800f006:	bf00      	nop
 800f008:	240006f8 	.word	0x240006f8

0800f00c <sniprintf>:
 800f00c:	b40c      	push	{r2, r3}
 800f00e:	b530      	push	{r4, r5, lr}
 800f010:	4b17      	ldr	r3, [pc, #92]	@ (800f070 <sniprintf+0x64>)
 800f012:	1e0c      	subs	r4, r1, #0
 800f014:	681d      	ldr	r5, [r3, #0]
 800f016:	b09d      	sub	sp, #116	@ 0x74
 800f018:	da08      	bge.n	800f02c <sniprintf+0x20>
 800f01a:	238b      	movs	r3, #139	@ 0x8b
 800f01c:	602b      	str	r3, [r5, #0]
 800f01e:	f04f 30ff 	mov.w	r0, #4294967295
 800f022:	b01d      	add	sp, #116	@ 0x74
 800f024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f028:	b002      	add	sp, #8
 800f02a:	4770      	bx	lr
 800f02c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f030:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f034:	bf14      	ite	ne
 800f036:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f03a:	4623      	moveq	r3, r4
 800f03c:	9304      	str	r3, [sp, #16]
 800f03e:	9307      	str	r3, [sp, #28]
 800f040:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f044:	9002      	str	r0, [sp, #8]
 800f046:	9006      	str	r0, [sp, #24]
 800f048:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f04c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f04e:	ab21      	add	r3, sp, #132	@ 0x84
 800f050:	a902      	add	r1, sp, #8
 800f052:	4628      	mov	r0, r5
 800f054:	9301      	str	r3, [sp, #4]
 800f056:	f000 f925 	bl	800f2a4 <_svfiprintf_r>
 800f05a:	1c43      	adds	r3, r0, #1
 800f05c:	bfbc      	itt	lt
 800f05e:	238b      	movlt	r3, #139	@ 0x8b
 800f060:	602b      	strlt	r3, [r5, #0]
 800f062:	2c00      	cmp	r4, #0
 800f064:	d0dd      	beq.n	800f022 <sniprintf+0x16>
 800f066:	9b02      	ldr	r3, [sp, #8]
 800f068:	2200      	movs	r2, #0
 800f06a:	701a      	strb	r2, [r3, #0]
 800f06c:	e7d9      	b.n	800f022 <sniprintf+0x16>
 800f06e:	bf00      	nop
 800f070:	2400002c 	.word	0x2400002c

0800f074 <siprintf>:
 800f074:	b40e      	push	{r1, r2, r3}
 800f076:	b500      	push	{lr}
 800f078:	b09c      	sub	sp, #112	@ 0x70
 800f07a:	ab1d      	add	r3, sp, #116	@ 0x74
 800f07c:	9002      	str	r0, [sp, #8]
 800f07e:	9006      	str	r0, [sp, #24]
 800f080:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f084:	4809      	ldr	r0, [pc, #36]	@ (800f0ac <siprintf+0x38>)
 800f086:	9107      	str	r1, [sp, #28]
 800f088:	9104      	str	r1, [sp, #16]
 800f08a:	4909      	ldr	r1, [pc, #36]	@ (800f0b0 <siprintf+0x3c>)
 800f08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f090:	9105      	str	r1, [sp, #20]
 800f092:	6800      	ldr	r0, [r0, #0]
 800f094:	9301      	str	r3, [sp, #4]
 800f096:	a902      	add	r1, sp, #8
 800f098:	f000 f904 	bl	800f2a4 <_svfiprintf_r>
 800f09c:	9b02      	ldr	r3, [sp, #8]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	701a      	strb	r2, [r3, #0]
 800f0a2:	b01c      	add	sp, #112	@ 0x70
 800f0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0a8:	b003      	add	sp, #12
 800f0aa:	4770      	bx	lr
 800f0ac:	2400002c 	.word	0x2400002c
 800f0b0:	ffff0208 	.word	0xffff0208

0800f0b4 <memset>:
 800f0b4:	4402      	add	r2, r0
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d100      	bne.n	800f0be <memset+0xa>
 800f0bc:	4770      	bx	lr
 800f0be:	f803 1b01 	strb.w	r1, [r3], #1
 800f0c2:	e7f9      	b.n	800f0b8 <memset+0x4>

0800f0c4 <_sbrk_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	4d06      	ldr	r5, [pc, #24]	@ (800f0e0 <_sbrk_r+0x1c>)
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	4608      	mov	r0, r1
 800f0ce:	602b      	str	r3, [r5, #0]
 800f0d0:	f7f4 f9fe 	bl	80034d0 <_sbrk>
 800f0d4:	1c43      	adds	r3, r0, #1
 800f0d6:	d102      	bne.n	800f0de <_sbrk_r+0x1a>
 800f0d8:	682b      	ldr	r3, [r5, #0]
 800f0da:	b103      	cbz	r3, 800f0de <_sbrk_r+0x1a>
 800f0dc:	6023      	str	r3, [r4, #0]
 800f0de:	bd38      	pop	{r3, r4, r5, pc}
 800f0e0:	240006f4 	.word	0x240006f4

0800f0e4 <__errno>:
 800f0e4:	4b01      	ldr	r3, [pc, #4]	@ (800f0ec <__errno+0x8>)
 800f0e6:	6818      	ldr	r0, [r3, #0]
 800f0e8:	4770      	bx	lr
 800f0ea:	bf00      	nop
 800f0ec:	2400002c 	.word	0x2400002c

0800f0f0 <__libc_init_array>:
 800f0f0:	b570      	push	{r4, r5, r6, lr}
 800f0f2:	4d0d      	ldr	r5, [pc, #52]	@ (800f128 <__libc_init_array+0x38>)
 800f0f4:	4c0d      	ldr	r4, [pc, #52]	@ (800f12c <__libc_init_array+0x3c>)
 800f0f6:	1b64      	subs	r4, r4, r5
 800f0f8:	10a4      	asrs	r4, r4, #2
 800f0fa:	2600      	movs	r6, #0
 800f0fc:	42a6      	cmp	r6, r4
 800f0fe:	d109      	bne.n	800f114 <__libc_init_array+0x24>
 800f100:	4d0b      	ldr	r5, [pc, #44]	@ (800f130 <__libc_init_array+0x40>)
 800f102:	4c0c      	ldr	r4, [pc, #48]	@ (800f134 <__libc_init_array+0x44>)
 800f104:	f000 fbcc 	bl	800f8a0 <_init>
 800f108:	1b64      	subs	r4, r4, r5
 800f10a:	10a4      	asrs	r4, r4, #2
 800f10c:	2600      	movs	r6, #0
 800f10e:	42a6      	cmp	r6, r4
 800f110:	d105      	bne.n	800f11e <__libc_init_array+0x2e>
 800f112:	bd70      	pop	{r4, r5, r6, pc}
 800f114:	f855 3b04 	ldr.w	r3, [r5], #4
 800f118:	4798      	blx	r3
 800f11a:	3601      	adds	r6, #1
 800f11c:	e7ee      	b.n	800f0fc <__libc_init_array+0xc>
 800f11e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f122:	4798      	blx	r3
 800f124:	3601      	adds	r6, #1
 800f126:	e7f2      	b.n	800f10e <__libc_init_array+0x1e>
 800f128:	0800feb4 	.word	0x0800feb4
 800f12c:	0800feb4 	.word	0x0800feb4
 800f130:	0800feb4 	.word	0x0800feb4
 800f134:	0800feb8 	.word	0x0800feb8

0800f138 <__retarget_lock_acquire_recursive>:
 800f138:	4770      	bx	lr

0800f13a <__retarget_lock_release_recursive>:
 800f13a:	4770      	bx	lr

0800f13c <memcpy>:
 800f13c:	440a      	add	r2, r1
 800f13e:	4291      	cmp	r1, r2
 800f140:	f100 33ff 	add.w	r3, r0, #4294967295
 800f144:	d100      	bne.n	800f148 <memcpy+0xc>
 800f146:	4770      	bx	lr
 800f148:	b510      	push	{r4, lr}
 800f14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f14e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f152:	4291      	cmp	r1, r2
 800f154:	d1f9      	bne.n	800f14a <memcpy+0xe>
 800f156:	bd10      	pop	{r4, pc}

0800f158 <_free_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4605      	mov	r5, r0
 800f15c:	2900      	cmp	r1, #0
 800f15e:	d041      	beq.n	800f1e4 <_free_r+0x8c>
 800f160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f164:	1f0c      	subs	r4, r1, #4
 800f166:	2b00      	cmp	r3, #0
 800f168:	bfb8      	it	lt
 800f16a:	18e4      	addlt	r4, r4, r3
 800f16c:	f7ff ff42 	bl	800eff4 <__malloc_lock>
 800f170:	4a1d      	ldr	r2, [pc, #116]	@ (800f1e8 <_free_r+0x90>)
 800f172:	6813      	ldr	r3, [r2, #0]
 800f174:	b933      	cbnz	r3, 800f184 <_free_r+0x2c>
 800f176:	6063      	str	r3, [r4, #4]
 800f178:	6014      	str	r4, [r2, #0]
 800f17a:	4628      	mov	r0, r5
 800f17c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f180:	f7ff bf3e 	b.w	800f000 <__malloc_unlock>
 800f184:	42a3      	cmp	r3, r4
 800f186:	d908      	bls.n	800f19a <_free_r+0x42>
 800f188:	6820      	ldr	r0, [r4, #0]
 800f18a:	1821      	adds	r1, r4, r0
 800f18c:	428b      	cmp	r3, r1
 800f18e:	bf01      	itttt	eq
 800f190:	6819      	ldreq	r1, [r3, #0]
 800f192:	685b      	ldreq	r3, [r3, #4]
 800f194:	1809      	addeq	r1, r1, r0
 800f196:	6021      	streq	r1, [r4, #0]
 800f198:	e7ed      	b.n	800f176 <_free_r+0x1e>
 800f19a:	461a      	mov	r2, r3
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	b10b      	cbz	r3, 800f1a4 <_free_r+0x4c>
 800f1a0:	42a3      	cmp	r3, r4
 800f1a2:	d9fa      	bls.n	800f19a <_free_r+0x42>
 800f1a4:	6811      	ldr	r1, [r2, #0]
 800f1a6:	1850      	adds	r0, r2, r1
 800f1a8:	42a0      	cmp	r0, r4
 800f1aa:	d10b      	bne.n	800f1c4 <_free_r+0x6c>
 800f1ac:	6820      	ldr	r0, [r4, #0]
 800f1ae:	4401      	add	r1, r0
 800f1b0:	1850      	adds	r0, r2, r1
 800f1b2:	4283      	cmp	r3, r0
 800f1b4:	6011      	str	r1, [r2, #0]
 800f1b6:	d1e0      	bne.n	800f17a <_free_r+0x22>
 800f1b8:	6818      	ldr	r0, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	6053      	str	r3, [r2, #4]
 800f1be:	4408      	add	r0, r1
 800f1c0:	6010      	str	r0, [r2, #0]
 800f1c2:	e7da      	b.n	800f17a <_free_r+0x22>
 800f1c4:	d902      	bls.n	800f1cc <_free_r+0x74>
 800f1c6:	230c      	movs	r3, #12
 800f1c8:	602b      	str	r3, [r5, #0]
 800f1ca:	e7d6      	b.n	800f17a <_free_r+0x22>
 800f1cc:	6820      	ldr	r0, [r4, #0]
 800f1ce:	1821      	adds	r1, r4, r0
 800f1d0:	428b      	cmp	r3, r1
 800f1d2:	bf04      	itt	eq
 800f1d4:	6819      	ldreq	r1, [r3, #0]
 800f1d6:	685b      	ldreq	r3, [r3, #4]
 800f1d8:	6063      	str	r3, [r4, #4]
 800f1da:	bf04      	itt	eq
 800f1dc:	1809      	addeq	r1, r1, r0
 800f1de:	6021      	streq	r1, [r4, #0]
 800f1e0:	6054      	str	r4, [r2, #4]
 800f1e2:	e7ca      	b.n	800f17a <_free_r+0x22>
 800f1e4:	bd38      	pop	{r3, r4, r5, pc}
 800f1e6:	bf00      	nop
 800f1e8:	240005b8 	.word	0x240005b8

0800f1ec <__ssputs_r>:
 800f1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f0:	688e      	ldr	r6, [r1, #8]
 800f1f2:	461f      	mov	r7, r3
 800f1f4:	42be      	cmp	r6, r7
 800f1f6:	680b      	ldr	r3, [r1, #0]
 800f1f8:	4682      	mov	sl, r0
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	4690      	mov	r8, r2
 800f1fe:	d82d      	bhi.n	800f25c <__ssputs_r+0x70>
 800f200:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f204:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f208:	d026      	beq.n	800f258 <__ssputs_r+0x6c>
 800f20a:	6965      	ldr	r5, [r4, #20]
 800f20c:	6909      	ldr	r1, [r1, #16]
 800f20e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f212:	eba3 0901 	sub.w	r9, r3, r1
 800f216:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f21a:	1c7b      	adds	r3, r7, #1
 800f21c:	444b      	add	r3, r9
 800f21e:	106d      	asrs	r5, r5, #1
 800f220:	429d      	cmp	r5, r3
 800f222:	bf38      	it	cc
 800f224:	461d      	movcc	r5, r3
 800f226:	0553      	lsls	r3, r2, #21
 800f228:	d527      	bpl.n	800f27a <__ssputs_r+0x8e>
 800f22a:	4629      	mov	r1, r5
 800f22c:	f7ff fe62 	bl	800eef4 <_malloc_r>
 800f230:	4606      	mov	r6, r0
 800f232:	b360      	cbz	r0, 800f28e <__ssputs_r+0xa2>
 800f234:	6921      	ldr	r1, [r4, #16]
 800f236:	464a      	mov	r2, r9
 800f238:	f7ff ff80 	bl	800f13c <memcpy>
 800f23c:	89a3      	ldrh	r3, [r4, #12]
 800f23e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f246:	81a3      	strh	r3, [r4, #12]
 800f248:	6126      	str	r6, [r4, #16]
 800f24a:	6165      	str	r5, [r4, #20]
 800f24c:	444e      	add	r6, r9
 800f24e:	eba5 0509 	sub.w	r5, r5, r9
 800f252:	6026      	str	r6, [r4, #0]
 800f254:	60a5      	str	r5, [r4, #8]
 800f256:	463e      	mov	r6, r7
 800f258:	42be      	cmp	r6, r7
 800f25a:	d900      	bls.n	800f25e <__ssputs_r+0x72>
 800f25c:	463e      	mov	r6, r7
 800f25e:	6820      	ldr	r0, [r4, #0]
 800f260:	4632      	mov	r2, r6
 800f262:	4641      	mov	r1, r8
 800f264:	f000 faa8 	bl	800f7b8 <memmove>
 800f268:	68a3      	ldr	r3, [r4, #8]
 800f26a:	1b9b      	subs	r3, r3, r6
 800f26c:	60a3      	str	r3, [r4, #8]
 800f26e:	6823      	ldr	r3, [r4, #0]
 800f270:	4433      	add	r3, r6
 800f272:	6023      	str	r3, [r4, #0]
 800f274:	2000      	movs	r0, #0
 800f276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f27a:	462a      	mov	r2, r5
 800f27c:	f000 fab6 	bl	800f7ec <_realloc_r>
 800f280:	4606      	mov	r6, r0
 800f282:	2800      	cmp	r0, #0
 800f284:	d1e0      	bne.n	800f248 <__ssputs_r+0x5c>
 800f286:	6921      	ldr	r1, [r4, #16]
 800f288:	4650      	mov	r0, sl
 800f28a:	f7ff ff65 	bl	800f158 <_free_r>
 800f28e:	230c      	movs	r3, #12
 800f290:	f8ca 3000 	str.w	r3, [sl]
 800f294:	89a3      	ldrh	r3, [r4, #12]
 800f296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f29a:	81a3      	strh	r3, [r4, #12]
 800f29c:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a0:	e7e9      	b.n	800f276 <__ssputs_r+0x8a>
	...

0800f2a4 <_svfiprintf_r>:
 800f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a8:	4698      	mov	r8, r3
 800f2aa:	898b      	ldrh	r3, [r1, #12]
 800f2ac:	061b      	lsls	r3, r3, #24
 800f2ae:	b09d      	sub	sp, #116	@ 0x74
 800f2b0:	4607      	mov	r7, r0
 800f2b2:	460d      	mov	r5, r1
 800f2b4:	4614      	mov	r4, r2
 800f2b6:	d510      	bpl.n	800f2da <_svfiprintf_r+0x36>
 800f2b8:	690b      	ldr	r3, [r1, #16]
 800f2ba:	b973      	cbnz	r3, 800f2da <_svfiprintf_r+0x36>
 800f2bc:	2140      	movs	r1, #64	@ 0x40
 800f2be:	f7ff fe19 	bl	800eef4 <_malloc_r>
 800f2c2:	6028      	str	r0, [r5, #0]
 800f2c4:	6128      	str	r0, [r5, #16]
 800f2c6:	b930      	cbnz	r0, 800f2d6 <_svfiprintf_r+0x32>
 800f2c8:	230c      	movs	r3, #12
 800f2ca:	603b      	str	r3, [r7, #0]
 800f2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d0:	b01d      	add	sp, #116	@ 0x74
 800f2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d6:	2340      	movs	r3, #64	@ 0x40
 800f2d8:	616b      	str	r3, [r5, #20]
 800f2da:	2300      	movs	r3, #0
 800f2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2de:	2320      	movs	r3, #32
 800f2e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2e8:	2330      	movs	r3, #48	@ 0x30
 800f2ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f488 <_svfiprintf_r+0x1e4>
 800f2ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2f2:	f04f 0901 	mov.w	r9, #1
 800f2f6:	4623      	mov	r3, r4
 800f2f8:	469a      	mov	sl, r3
 800f2fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2fe:	b10a      	cbz	r2, 800f304 <_svfiprintf_r+0x60>
 800f300:	2a25      	cmp	r2, #37	@ 0x25
 800f302:	d1f9      	bne.n	800f2f8 <_svfiprintf_r+0x54>
 800f304:	ebba 0b04 	subs.w	fp, sl, r4
 800f308:	d00b      	beq.n	800f322 <_svfiprintf_r+0x7e>
 800f30a:	465b      	mov	r3, fp
 800f30c:	4622      	mov	r2, r4
 800f30e:	4629      	mov	r1, r5
 800f310:	4638      	mov	r0, r7
 800f312:	f7ff ff6b 	bl	800f1ec <__ssputs_r>
 800f316:	3001      	adds	r0, #1
 800f318:	f000 80a7 	beq.w	800f46a <_svfiprintf_r+0x1c6>
 800f31c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f31e:	445a      	add	r2, fp
 800f320:	9209      	str	r2, [sp, #36]	@ 0x24
 800f322:	f89a 3000 	ldrb.w	r3, [sl]
 800f326:	2b00      	cmp	r3, #0
 800f328:	f000 809f 	beq.w	800f46a <_svfiprintf_r+0x1c6>
 800f32c:	2300      	movs	r3, #0
 800f32e:	f04f 32ff 	mov.w	r2, #4294967295
 800f332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f336:	f10a 0a01 	add.w	sl, sl, #1
 800f33a:	9304      	str	r3, [sp, #16]
 800f33c:	9307      	str	r3, [sp, #28]
 800f33e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f342:	931a      	str	r3, [sp, #104]	@ 0x68
 800f344:	4654      	mov	r4, sl
 800f346:	2205      	movs	r2, #5
 800f348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f34c:	484e      	ldr	r0, [pc, #312]	@ (800f488 <_svfiprintf_r+0x1e4>)
 800f34e:	f7f0 ffcf 	bl	80002f0 <memchr>
 800f352:	9a04      	ldr	r2, [sp, #16]
 800f354:	b9d8      	cbnz	r0, 800f38e <_svfiprintf_r+0xea>
 800f356:	06d0      	lsls	r0, r2, #27
 800f358:	bf44      	itt	mi
 800f35a:	2320      	movmi	r3, #32
 800f35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f360:	0711      	lsls	r1, r2, #28
 800f362:	bf44      	itt	mi
 800f364:	232b      	movmi	r3, #43	@ 0x2b
 800f366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f36a:	f89a 3000 	ldrb.w	r3, [sl]
 800f36e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f370:	d015      	beq.n	800f39e <_svfiprintf_r+0xfa>
 800f372:	9a07      	ldr	r2, [sp, #28]
 800f374:	4654      	mov	r4, sl
 800f376:	2000      	movs	r0, #0
 800f378:	f04f 0c0a 	mov.w	ip, #10
 800f37c:	4621      	mov	r1, r4
 800f37e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f382:	3b30      	subs	r3, #48	@ 0x30
 800f384:	2b09      	cmp	r3, #9
 800f386:	d94b      	bls.n	800f420 <_svfiprintf_r+0x17c>
 800f388:	b1b0      	cbz	r0, 800f3b8 <_svfiprintf_r+0x114>
 800f38a:	9207      	str	r2, [sp, #28]
 800f38c:	e014      	b.n	800f3b8 <_svfiprintf_r+0x114>
 800f38e:	eba0 0308 	sub.w	r3, r0, r8
 800f392:	fa09 f303 	lsl.w	r3, r9, r3
 800f396:	4313      	orrs	r3, r2
 800f398:	9304      	str	r3, [sp, #16]
 800f39a:	46a2      	mov	sl, r4
 800f39c:	e7d2      	b.n	800f344 <_svfiprintf_r+0xa0>
 800f39e:	9b03      	ldr	r3, [sp, #12]
 800f3a0:	1d19      	adds	r1, r3, #4
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	9103      	str	r1, [sp, #12]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	bfbb      	ittet	lt
 800f3aa:	425b      	neglt	r3, r3
 800f3ac:	f042 0202 	orrlt.w	r2, r2, #2
 800f3b0:	9307      	strge	r3, [sp, #28]
 800f3b2:	9307      	strlt	r3, [sp, #28]
 800f3b4:	bfb8      	it	lt
 800f3b6:	9204      	strlt	r2, [sp, #16]
 800f3b8:	7823      	ldrb	r3, [r4, #0]
 800f3ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3bc:	d10a      	bne.n	800f3d4 <_svfiprintf_r+0x130>
 800f3be:	7863      	ldrb	r3, [r4, #1]
 800f3c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3c2:	d132      	bne.n	800f42a <_svfiprintf_r+0x186>
 800f3c4:	9b03      	ldr	r3, [sp, #12]
 800f3c6:	1d1a      	adds	r2, r3, #4
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	9203      	str	r2, [sp, #12]
 800f3cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3d0:	3402      	adds	r4, #2
 800f3d2:	9305      	str	r3, [sp, #20]
 800f3d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f498 <_svfiprintf_r+0x1f4>
 800f3d8:	7821      	ldrb	r1, [r4, #0]
 800f3da:	2203      	movs	r2, #3
 800f3dc:	4650      	mov	r0, sl
 800f3de:	f7f0 ff87 	bl	80002f0 <memchr>
 800f3e2:	b138      	cbz	r0, 800f3f4 <_svfiprintf_r+0x150>
 800f3e4:	9b04      	ldr	r3, [sp, #16]
 800f3e6:	eba0 000a 	sub.w	r0, r0, sl
 800f3ea:	2240      	movs	r2, #64	@ 0x40
 800f3ec:	4082      	lsls	r2, r0
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	3401      	adds	r4, #1
 800f3f2:	9304      	str	r3, [sp, #16]
 800f3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f8:	4824      	ldr	r0, [pc, #144]	@ (800f48c <_svfiprintf_r+0x1e8>)
 800f3fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3fe:	2206      	movs	r2, #6
 800f400:	f7f0 ff76 	bl	80002f0 <memchr>
 800f404:	2800      	cmp	r0, #0
 800f406:	d036      	beq.n	800f476 <_svfiprintf_r+0x1d2>
 800f408:	4b21      	ldr	r3, [pc, #132]	@ (800f490 <_svfiprintf_r+0x1ec>)
 800f40a:	bb1b      	cbnz	r3, 800f454 <_svfiprintf_r+0x1b0>
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	3307      	adds	r3, #7
 800f410:	f023 0307 	bic.w	r3, r3, #7
 800f414:	3308      	adds	r3, #8
 800f416:	9303      	str	r3, [sp, #12]
 800f418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f41a:	4433      	add	r3, r6
 800f41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f41e:	e76a      	b.n	800f2f6 <_svfiprintf_r+0x52>
 800f420:	fb0c 3202 	mla	r2, ip, r2, r3
 800f424:	460c      	mov	r4, r1
 800f426:	2001      	movs	r0, #1
 800f428:	e7a8      	b.n	800f37c <_svfiprintf_r+0xd8>
 800f42a:	2300      	movs	r3, #0
 800f42c:	3401      	adds	r4, #1
 800f42e:	9305      	str	r3, [sp, #20]
 800f430:	4619      	mov	r1, r3
 800f432:	f04f 0c0a 	mov.w	ip, #10
 800f436:	4620      	mov	r0, r4
 800f438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f43c:	3a30      	subs	r2, #48	@ 0x30
 800f43e:	2a09      	cmp	r2, #9
 800f440:	d903      	bls.n	800f44a <_svfiprintf_r+0x1a6>
 800f442:	2b00      	cmp	r3, #0
 800f444:	d0c6      	beq.n	800f3d4 <_svfiprintf_r+0x130>
 800f446:	9105      	str	r1, [sp, #20]
 800f448:	e7c4      	b.n	800f3d4 <_svfiprintf_r+0x130>
 800f44a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f44e:	4604      	mov	r4, r0
 800f450:	2301      	movs	r3, #1
 800f452:	e7f0      	b.n	800f436 <_svfiprintf_r+0x192>
 800f454:	ab03      	add	r3, sp, #12
 800f456:	9300      	str	r3, [sp, #0]
 800f458:	462a      	mov	r2, r5
 800f45a:	4b0e      	ldr	r3, [pc, #56]	@ (800f494 <_svfiprintf_r+0x1f0>)
 800f45c:	a904      	add	r1, sp, #16
 800f45e:	4638      	mov	r0, r7
 800f460:	f3af 8000 	nop.w
 800f464:	1c42      	adds	r2, r0, #1
 800f466:	4606      	mov	r6, r0
 800f468:	d1d6      	bne.n	800f418 <_svfiprintf_r+0x174>
 800f46a:	89ab      	ldrh	r3, [r5, #12]
 800f46c:	065b      	lsls	r3, r3, #25
 800f46e:	f53f af2d 	bmi.w	800f2cc <_svfiprintf_r+0x28>
 800f472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f474:	e72c      	b.n	800f2d0 <_svfiprintf_r+0x2c>
 800f476:	ab03      	add	r3, sp, #12
 800f478:	9300      	str	r3, [sp, #0]
 800f47a:	462a      	mov	r2, r5
 800f47c:	4b05      	ldr	r3, [pc, #20]	@ (800f494 <_svfiprintf_r+0x1f0>)
 800f47e:	a904      	add	r1, sp, #16
 800f480:	4638      	mov	r0, r7
 800f482:	f000 f879 	bl	800f578 <_printf_i>
 800f486:	e7ed      	b.n	800f464 <_svfiprintf_r+0x1c0>
 800f488:	0800fe78 	.word	0x0800fe78
 800f48c:	0800fe82 	.word	0x0800fe82
 800f490:	00000000 	.word	0x00000000
 800f494:	0800f1ed 	.word	0x0800f1ed
 800f498:	0800fe7e 	.word	0x0800fe7e

0800f49c <_printf_common>:
 800f49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4a0:	4616      	mov	r6, r2
 800f4a2:	4698      	mov	r8, r3
 800f4a4:	688a      	ldr	r2, [r1, #8]
 800f4a6:	690b      	ldr	r3, [r1, #16]
 800f4a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	bfb8      	it	lt
 800f4b0:	4613      	movlt	r3, r2
 800f4b2:	6033      	str	r3, [r6, #0]
 800f4b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f4b8:	4607      	mov	r7, r0
 800f4ba:	460c      	mov	r4, r1
 800f4bc:	b10a      	cbz	r2, 800f4c2 <_printf_common+0x26>
 800f4be:	3301      	adds	r3, #1
 800f4c0:	6033      	str	r3, [r6, #0]
 800f4c2:	6823      	ldr	r3, [r4, #0]
 800f4c4:	0699      	lsls	r1, r3, #26
 800f4c6:	bf42      	ittt	mi
 800f4c8:	6833      	ldrmi	r3, [r6, #0]
 800f4ca:	3302      	addmi	r3, #2
 800f4cc:	6033      	strmi	r3, [r6, #0]
 800f4ce:	6825      	ldr	r5, [r4, #0]
 800f4d0:	f015 0506 	ands.w	r5, r5, #6
 800f4d4:	d106      	bne.n	800f4e4 <_printf_common+0x48>
 800f4d6:	f104 0a19 	add.w	sl, r4, #25
 800f4da:	68e3      	ldr	r3, [r4, #12]
 800f4dc:	6832      	ldr	r2, [r6, #0]
 800f4de:	1a9b      	subs	r3, r3, r2
 800f4e0:	42ab      	cmp	r3, r5
 800f4e2:	dc26      	bgt.n	800f532 <_printf_common+0x96>
 800f4e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4e8:	6822      	ldr	r2, [r4, #0]
 800f4ea:	3b00      	subs	r3, #0
 800f4ec:	bf18      	it	ne
 800f4ee:	2301      	movne	r3, #1
 800f4f0:	0692      	lsls	r2, r2, #26
 800f4f2:	d42b      	bmi.n	800f54c <_printf_common+0xb0>
 800f4f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f4f8:	4641      	mov	r1, r8
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	47c8      	blx	r9
 800f4fe:	3001      	adds	r0, #1
 800f500:	d01e      	beq.n	800f540 <_printf_common+0xa4>
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	6922      	ldr	r2, [r4, #16]
 800f506:	f003 0306 	and.w	r3, r3, #6
 800f50a:	2b04      	cmp	r3, #4
 800f50c:	bf02      	ittt	eq
 800f50e:	68e5      	ldreq	r5, [r4, #12]
 800f510:	6833      	ldreq	r3, [r6, #0]
 800f512:	1aed      	subeq	r5, r5, r3
 800f514:	68a3      	ldr	r3, [r4, #8]
 800f516:	bf0c      	ite	eq
 800f518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f51c:	2500      	movne	r5, #0
 800f51e:	4293      	cmp	r3, r2
 800f520:	bfc4      	itt	gt
 800f522:	1a9b      	subgt	r3, r3, r2
 800f524:	18ed      	addgt	r5, r5, r3
 800f526:	2600      	movs	r6, #0
 800f528:	341a      	adds	r4, #26
 800f52a:	42b5      	cmp	r5, r6
 800f52c:	d11a      	bne.n	800f564 <_printf_common+0xc8>
 800f52e:	2000      	movs	r0, #0
 800f530:	e008      	b.n	800f544 <_printf_common+0xa8>
 800f532:	2301      	movs	r3, #1
 800f534:	4652      	mov	r2, sl
 800f536:	4641      	mov	r1, r8
 800f538:	4638      	mov	r0, r7
 800f53a:	47c8      	blx	r9
 800f53c:	3001      	adds	r0, #1
 800f53e:	d103      	bne.n	800f548 <_printf_common+0xac>
 800f540:	f04f 30ff 	mov.w	r0, #4294967295
 800f544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f548:	3501      	adds	r5, #1
 800f54a:	e7c6      	b.n	800f4da <_printf_common+0x3e>
 800f54c:	18e1      	adds	r1, r4, r3
 800f54e:	1c5a      	adds	r2, r3, #1
 800f550:	2030      	movs	r0, #48	@ 0x30
 800f552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f556:	4422      	add	r2, r4
 800f558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f55c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f560:	3302      	adds	r3, #2
 800f562:	e7c7      	b.n	800f4f4 <_printf_common+0x58>
 800f564:	2301      	movs	r3, #1
 800f566:	4622      	mov	r2, r4
 800f568:	4641      	mov	r1, r8
 800f56a:	4638      	mov	r0, r7
 800f56c:	47c8      	blx	r9
 800f56e:	3001      	adds	r0, #1
 800f570:	d0e6      	beq.n	800f540 <_printf_common+0xa4>
 800f572:	3601      	adds	r6, #1
 800f574:	e7d9      	b.n	800f52a <_printf_common+0x8e>
	...

0800f578 <_printf_i>:
 800f578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f57c:	7e0f      	ldrb	r7, [r1, #24]
 800f57e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f580:	2f78      	cmp	r7, #120	@ 0x78
 800f582:	4691      	mov	r9, r2
 800f584:	4680      	mov	r8, r0
 800f586:	460c      	mov	r4, r1
 800f588:	469a      	mov	sl, r3
 800f58a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f58e:	d807      	bhi.n	800f5a0 <_printf_i+0x28>
 800f590:	2f62      	cmp	r7, #98	@ 0x62
 800f592:	d80a      	bhi.n	800f5aa <_printf_i+0x32>
 800f594:	2f00      	cmp	r7, #0
 800f596:	f000 80d2 	beq.w	800f73e <_printf_i+0x1c6>
 800f59a:	2f58      	cmp	r7, #88	@ 0x58
 800f59c:	f000 80b9 	beq.w	800f712 <_printf_i+0x19a>
 800f5a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f5a8:	e03a      	b.n	800f620 <_printf_i+0xa8>
 800f5aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f5ae:	2b15      	cmp	r3, #21
 800f5b0:	d8f6      	bhi.n	800f5a0 <_printf_i+0x28>
 800f5b2:	a101      	add	r1, pc, #4	@ (adr r1, 800f5b8 <_printf_i+0x40>)
 800f5b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5b8:	0800f611 	.word	0x0800f611
 800f5bc:	0800f625 	.word	0x0800f625
 800f5c0:	0800f5a1 	.word	0x0800f5a1
 800f5c4:	0800f5a1 	.word	0x0800f5a1
 800f5c8:	0800f5a1 	.word	0x0800f5a1
 800f5cc:	0800f5a1 	.word	0x0800f5a1
 800f5d0:	0800f625 	.word	0x0800f625
 800f5d4:	0800f5a1 	.word	0x0800f5a1
 800f5d8:	0800f5a1 	.word	0x0800f5a1
 800f5dc:	0800f5a1 	.word	0x0800f5a1
 800f5e0:	0800f5a1 	.word	0x0800f5a1
 800f5e4:	0800f725 	.word	0x0800f725
 800f5e8:	0800f64f 	.word	0x0800f64f
 800f5ec:	0800f6df 	.word	0x0800f6df
 800f5f0:	0800f5a1 	.word	0x0800f5a1
 800f5f4:	0800f5a1 	.word	0x0800f5a1
 800f5f8:	0800f747 	.word	0x0800f747
 800f5fc:	0800f5a1 	.word	0x0800f5a1
 800f600:	0800f64f 	.word	0x0800f64f
 800f604:	0800f5a1 	.word	0x0800f5a1
 800f608:	0800f5a1 	.word	0x0800f5a1
 800f60c:	0800f6e7 	.word	0x0800f6e7
 800f610:	6833      	ldr	r3, [r6, #0]
 800f612:	1d1a      	adds	r2, r3, #4
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	6032      	str	r2, [r6, #0]
 800f618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f61c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f620:	2301      	movs	r3, #1
 800f622:	e09d      	b.n	800f760 <_printf_i+0x1e8>
 800f624:	6833      	ldr	r3, [r6, #0]
 800f626:	6820      	ldr	r0, [r4, #0]
 800f628:	1d19      	adds	r1, r3, #4
 800f62a:	6031      	str	r1, [r6, #0]
 800f62c:	0606      	lsls	r6, r0, #24
 800f62e:	d501      	bpl.n	800f634 <_printf_i+0xbc>
 800f630:	681d      	ldr	r5, [r3, #0]
 800f632:	e003      	b.n	800f63c <_printf_i+0xc4>
 800f634:	0645      	lsls	r5, r0, #25
 800f636:	d5fb      	bpl.n	800f630 <_printf_i+0xb8>
 800f638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f63c:	2d00      	cmp	r5, #0
 800f63e:	da03      	bge.n	800f648 <_printf_i+0xd0>
 800f640:	232d      	movs	r3, #45	@ 0x2d
 800f642:	426d      	negs	r5, r5
 800f644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f648:	4859      	ldr	r0, [pc, #356]	@ (800f7b0 <_printf_i+0x238>)
 800f64a:	230a      	movs	r3, #10
 800f64c:	e011      	b.n	800f672 <_printf_i+0xfa>
 800f64e:	6821      	ldr	r1, [r4, #0]
 800f650:	6833      	ldr	r3, [r6, #0]
 800f652:	0608      	lsls	r0, r1, #24
 800f654:	f853 5b04 	ldr.w	r5, [r3], #4
 800f658:	d402      	bmi.n	800f660 <_printf_i+0xe8>
 800f65a:	0649      	lsls	r1, r1, #25
 800f65c:	bf48      	it	mi
 800f65e:	b2ad      	uxthmi	r5, r5
 800f660:	2f6f      	cmp	r7, #111	@ 0x6f
 800f662:	4853      	ldr	r0, [pc, #332]	@ (800f7b0 <_printf_i+0x238>)
 800f664:	6033      	str	r3, [r6, #0]
 800f666:	bf14      	ite	ne
 800f668:	230a      	movne	r3, #10
 800f66a:	2308      	moveq	r3, #8
 800f66c:	2100      	movs	r1, #0
 800f66e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f672:	6866      	ldr	r6, [r4, #4]
 800f674:	60a6      	str	r6, [r4, #8]
 800f676:	2e00      	cmp	r6, #0
 800f678:	bfa2      	ittt	ge
 800f67a:	6821      	ldrge	r1, [r4, #0]
 800f67c:	f021 0104 	bicge.w	r1, r1, #4
 800f680:	6021      	strge	r1, [r4, #0]
 800f682:	b90d      	cbnz	r5, 800f688 <_printf_i+0x110>
 800f684:	2e00      	cmp	r6, #0
 800f686:	d04b      	beq.n	800f720 <_printf_i+0x1a8>
 800f688:	4616      	mov	r6, r2
 800f68a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f68e:	fb03 5711 	mls	r7, r3, r1, r5
 800f692:	5dc7      	ldrb	r7, [r0, r7]
 800f694:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f698:	462f      	mov	r7, r5
 800f69a:	42bb      	cmp	r3, r7
 800f69c:	460d      	mov	r5, r1
 800f69e:	d9f4      	bls.n	800f68a <_printf_i+0x112>
 800f6a0:	2b08      	cmp	r3, #8
 800f6a2:	d10b      	bne.n	800f6bc <_printf_i+0x144>
 800f6a4:	6823      	ldr	r3, [r4, #0]
 800f6a6:	07df      	lsls	r7, r3, #31
 800f6a8:	d508      	bpl.n	800f6bc <_printf_i+0x144>
 800f6aa:	6923      	ldr	r3, [r4, #16]
 800f6ac:	6861      	ldr	r1, [r4, #4]
 800f6ae:	4299      	cmp	r1, r3
 800f6b0:	bfde      	ittt	le
 800f6b2:	2330      	movle	r3, #48	@ 0x30
 800f6b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f6b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f6bc:	1b92      	subs	r2, r2, r6
 800f6be:	6122      	str	r2, [r4, #16]
 800f6c0:	f8cd a000 	str.w	sl, [sp]
 800f6c4:	464b      	mov	r3, r9
 800f6c6:	aa03      	add	r2, sp, #12
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	4640      	mov	r0, r8
 800f6cc:	f7ff fee6 	bl	800f49c <_printf_common>
 800f6d0:	3001      	adds	r0, #1
 800f6d2:	d14a      	bne.n	800f76a <_printf_i+0x1f2>
 800f6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d8:	b004      	add	sp, #16
 800f6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6de:	6823      	ldr	r3, [r4, #0]
 800f6e0:	f043 0320 	orr.w	r3, r3, #32
 800f6e4:	6023      	str	r3, [r4, #0]
 800f6e6:	4833      	ldr	r0, [pc, #204]	@ (800f7b4 <_printf_i+0x23c>)
 800f6e8:	2778      	movs	r7, #120	@ 0x78
 800f6ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	6831      	ldr	r1, [r6, #0]
 800f6f2:	061f      	lsls	r7, r3, #24
 800f6f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800f6f8:	d402      	bmi.n	800f700 <_printf_i+0x188>
 800f6fa:	065f      	lsls	r7, r3, #25
 800f6fc:	bf48      	it	mi
 800f6fe:	b2ad      	uxthmi	r5, r5
 800f700:	6031      	str	r1, [r6, #0]
 800f702:	07d9      	lsls	r1, r3, #31
 800f704:	bf44      	itt	mi
 800f706:	f043 0320 	orrmi.w	r3, r3, #32
 800f70a:	6023      	strmi	r3, [r4, #0]
 800f70c:	b11d      	cbz	r5, 800f716 <_printf_i+0x19e>
 800f70e:	2310      	movs	r3, #16
 800f710:	e7ac      	b.n	800f66c <_printf_i+0xf4>
 800f712:	4827      	ldr	r0, [pc, #156]	@ (800f7b0 <_printf_i+0x238>)
 800f714:	e7e9      	b.n	800f6ea <_printf_i+0x172>
 800f716:	6823      	ldr	r3, [r4, #0]
 800f718:	f023 0320 	bic.w	r3, r3, #32
 800f71c:	6023      	str	r3, [r4, #0]
 800f71e:	e7f6      	b.n	800f70e <_printf_i+0x196>
 800f720:	4616      	mov	r6, r2
 800f722:	e7bd      	b.n	800f6a0 <_printf_i+0x128>
 800f724:	6833      	ldr	r3, [r6, #0]
 800f726:	6825      	ldr	r5, [r4, #0]
 800f728:	6961      	ldr	r1, [r4, #20]
 800f72a:	1d18      	adds	r0, r3, #4
 800f72c:	6030      	str	r0, [r6, #0]
 800f72e:	062e      	lsls	r6, r5, #24
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	d501      	bpl.n	800f738 <_printf_i+0x1c0>
 800f734:	6019      	str	r1, [r3, #0]
 800f736:	e002      	b.n	800f73e <_printf_i+0x1c6>
 800f738:	0668      	lsls	r0, r5, #25
 800f73a:	d5fb      	bpl.n	800f734 <_printf_i+0x1bc>
 800f73c:	8019      	strh	r1, [r3, #0]
 800f73e:	2300      	movs	r3, #0
 800f740:	6123      	str	r3, [r4, #16]
 800f742:	4616      	mov	r6, r2
 800f744:	e7bc      	b.n	800f6c0 <_printf_i+0x148>
 800f746:	6833      	ldr	r3, [r6, #0]
 800f748:	1d1a      	adds	r2, r3, #4
 800f74a:	6032      	str	r2, [r6, #0]
 800f74c:	681e      	ldr	r6, [r3, #0]
 800f74e:	6862      	ldr	r2, [r4, #4]
 800f750:	2100      	movs	r1, #0
 800f752:	4630      	mov	r0, r6
 800f754:	f7f0 fdcc 	bl	80002f0 <memchr>
 800f758:	b108      	cbz	r0, 800f75e <_printf_i+0x1e6>
 800f75a:	1b80      	subs	r0, r0, r6
 800f75c:	6060      	str	r0, [r4, #4]
 800f75e:	6863      	ldr	r3, [r4, #4]
 800f760:	6123      	str	r3, [r4, #16]
 800f762:	2300      	movs	r3, #0
 800f764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f768:	e7aa      	b.n	800f6c0 <_printf_i+0x148>
 800f76a:	6923      	ldr	r3, [r4, #16]
 800f76c:	4632      	mov	r2, r6
 800f76e:	4649      	mov	r1, r9
 800f770:	4640      	mov	r0, r8
 800f772:	47d0      	blx	sl
 800f774:	3001      	adds	r0, #1
 800f776:	d0ad      	beq.n	800f6d4 <_printf_i+0x15c>
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	079b      	lsls	r3, r3, #30
 800f77c:	d413      	bmi.n	800f7a6 <_printf_i+0x22e>
 800f77e:	68e0      	ldr	r0, [r4, #12]
 800f780:	9b03      	ldr	r3, [sp, #12]
 800f782:	4298      	cmp	r0, r3
 800f784:	bfb8      	it	lt
 800f786:	4618      	movlt	r0, r3
 800f788:	e7a6      	b.n	800f6d8 <_printf_i+0x160>
 800f78a:	2301      	movs	r3, #1
 800f78c:	4632      	mov	r2, r6
 800f78e:	4649      	mov	r1, r9
 800f790:	4640      	mov	r0, r8
 800f792:	47d0      	blx	sl
 800f794:	3001      	adds	r0, #1
 800f796:	d09d      	beq.n	800f6d4 <_printf_i+0x15c>
 800f798:	3501      	adds	r5, #1
 800f79a:	68e3      	ldr	r3, [r4, #12]
 800f79c:	9903      	ldr	r1, [sp, #12]
 800f79e:	1a5b      	subs	r3, r3, r1
 800f7a0:	42ab      	cmp	r3, r5
 800f7a2:	dcf2      	bgt.n	800f78a <_printf_i+0x212>
 800f7a4:	e7eb      	b.n	800f77e <_printf_i+0x206>
 800f7a6:	2500      	movs	r5, #0
 800f7a8:	f104 0619 	add.w	r6, r4, #25
 800f7ac:	e7f5      	b.n	800f79a <_printf_i+0x222>
 800f7ae:	bf00      	nop
 800f7b0:	0800fe89 	.word	0x0800fe89
 800f7b4:	0800fe9a 	.word	0x0800fe9a

0800f7b8 <memmove>:
 800f7b8:	4288      	cmp	r0, r1
 800f7ba:	b510      	push	{r4, lr}
 800f7bc:	eb01 0402 	add.w	r4, r1, r2
 800f7c0:	d902      	bls.n	800f7c8 <memmove+0x10>
 800f7c2:	4284      	cmp	r4, r0
 800f7c4:	4623      	mov	r3, r4
 800f7c6:	d807      	bhi.n	800f7d8 <memmove+0x20>
 800f7c8:	1e43      	subs	r3, r0, #1
 800f7ca:	42a1      	cmp	r1, r4
 800f7cc:	d008      	beq.n	800f7e0 <memmove+0x28>
 800f7ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7d6:	e7f8      	b.n	800f7ca <memmove+0x12>
 800f7d8:	4402      	add	r2, r0
 800f7da:	4601      	mov	r1, r0
 800f7dc:	428a      	cmp	r2, r1
 800f7de:	d100      	bne.n	800f7e2 <memmove+0x2a>
 800f7e0:	bd10      	pop	{r4, pc}
 800f7e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7ea:	e7f7      	b.n	800f7dc <memmove+0x24>

0800f7ec <_realloc_r>:
 800f7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f0:	4680      	mov	r8, r0
 800f7f2:	4615      	mov	r5, r2
 800f7f4:	460c      	mov	r4, r1
 800f7f6:	b921      	cbnz	r1, 800f802 <_realloc_r+0x16>
 800f7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	f7ff bb79 	b.w	800eef4 <_malloc_r>
 800f802:	b92a      	cbnz	r2, 800f810 <_realloc_r+0x24>
 800f804:	f7ff fca8 	bl	800f158 <_free_r>
 800f808:	2400      	movs	r4, #0
 800f80a:	4620      	mov	r0, r4
 800f80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f810:	f000 f81a 	bl	800f848 <_malloc_usable_size_r>
 800f814:	4285      	cmp	r5, r0
 800f816:	4606      	mov	r6, r0
 800f818:	d802      	bhi.n	800f820 <_realloc_r+0x34>
 800f81a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f81e:	d8f4      	bhi.n	800f80a <_realloc_r+0x1e>
 800f820:	4629      	mov	r1, r5
 800f822:	4640      	mov	r0, r8
 800f824:	f7ff fb66 	bl	800eef4 <_malloc_r>
 800f828:	4607      	mov	r7, r0
 800f82a:	2800      	cmp	r0, #0
 800f82c:	d0ec      	beq.n	800f808 <_realloc_r+0x1c>
 800f82e:	42b5      	cmp	r5, r6
 800f830:	462a      	mov	r2, r5
 800f832:	4621      	mov	r1, r4
 800f834:	bf28      	it	cs
 800f836:	4632      	movcs	r2, r6
 800f838:	f7ff fc80 	bl	800f13c <memcpy>
 800f83c:	4621      	mov	r1, r4
 800f83e:	4640      	mov	r0, r8
 800f840:	f7ff fc8a 	bl	800f158 <_free_r>
 800f844:	463c      	mov	r4, r7
 800f846:	e7e0      	b.n	800f80a <_realloc_r+0x1e>

0800f848 <_malloc_usable_size_r>:
 800f848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f84c:	1f18      	subs	r0, r3, #4
 800f84e:	2b00      	cmp	r3, #0
 800f850:	bfbc      	itt	lt
 800f852:	580b      	ldrlt	r3, [r1, r0]
 800f854:	18c0      	addlt	r0, r0, r3
 800f856:	4770      	bx	lr

0800f858 <sqrt>:
 800f858:	b508      	push	{r3, lr}
 800f85a:	ed2d 8b04 	vpush	{d8-d9}
 800f85e:	eeb0 8b40 	vmov.f64	d8, d0
 800f862:	f000 f819 	bl	800f898 <__ieee754_sqrt>
 800f866:	eeb4 8b48 	vcmp.f64	d8, d8
 800f86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f86e:	d60c      	bvs.n	800f88a <sqrt+0x32>
 800f870:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800f890 <sqrt+0x38>
 800f874:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800f878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87c:	d505      	bpl.n	800f88a <sqrt+0x32>
 800f87e:	f7ff fc31 	bl	800f0e4 <__errno>
 800f882:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800f886:	2321      	movs	r3, #33	@ 0x21
 800f888:	6003      	str	r3, [r0, #0]
 800f88a:	ecbd 8b04 	vpop	{d8-d9}
 800f88e:	bd08      	pop	{r3, pc}
	...

0800f898 <__ieee754_sqrt>:
 800f898:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800f89c:	4770      	bx	lr
	...

0800f8a0 <_init>:
 800f8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8a2:	bf00      	nop
 800f8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8a6:	bc08      	pop	{r3}
 800f8a8:	469e      	mov	lr, r3
 800f8aa:	4770      	bx	lr

0800f8ac <_fini>:
 800f8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ae:	bf00      	nop
 800f8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8b2:	bc08      	pop	{r3}
 800f8b4:	469e      	mov	lr, r3
 800f8b6:	4770      	bx	lr
